// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_HMIH_HMISTATE_H_
#define MF_HMIH_HMISTATE_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace mf_hmih
{
  /// \cond HIDDEN_ENUMS
  ///State of the  hmi communication state machine
  class HMIState
  {
  public:
    typedef uint8 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      HMI_INACTIVE = 0U,
      HMI_SCANNING_IN = 1U,
      HMI_SCANNING_OUT = 2U,
      HMI_DIRECTION_SELECTION = 3U,
      HMI_PARKING_SLOT_SELECTION = 4U,
      HMI_LOW_ENERGY_LEVEL = 5U,
      HMI_USER_MANEUVERING_REQ = 6U,
      HMI_VIS_MANEUVERING_CONDITIONS = 7U,
      HMI_VIS_PARKING_MANEUVER = 8U,
      HMI_MANEUVERING_PAUSE = 9U,
      HMI_PARKING_FAILED = 10U,
      HMI_REQUEST_HANDOVER = 11U,
      HMI_CONNECT_REMOTE_DEVICE = 12U,
      HMI_SHOW_CIRCLE_SCREEN = 13U,
      HMI_REM_DIRECTION_SELECTION = 14U,
      HMI_REM_SLOT_SELECTION = 15U,
      HMI_REM_RM_CHOSEN = 16U,
      HMI_CANCELED_BY_USER = 17U,
      HMI_CANCELED_BY_BEHAVIOR = 18U,
      HMI_PARKING_SUCCESS = 19U,
      HMI_REVERSIBLE_ERROR = 20U,
      HMI_IRREVERSIBLE_ERROR = 21U,
      HMI_INACTIVE_NO_ERROR_MODE = 22U,
      HMI_SUB_HMI_INACTIVE = 23U,
      HMI_PDC_COMM = 24U,
      HMI_SCANNING_GP_IN = 25U,
      HMI_SCANNING_GP_OUT = 26U,
      HMI_REM_GP_SLOT_SELECTION = 27U,
      HMI_MP_SLOT_ADJUSTMENT = 28U,
      HMI_MP_SLOT_SELECTION = 29U,
      HMI_REVERSE_ASSIST = 30U
    };

    HMIState() :
      value(static_cast< underlying_type >(HMI_INACTIVE))
    {
    }

    HMIState(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    HMIState(const HMIState& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END HMIState(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    HMIState& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(HMIState&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    HMIState& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    HMIState& operator=(const HMIState& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(HMIState&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace mf_hmih

// PRQA S 2180 --

#endif // MF_HMIH_HMISTATE_H_
