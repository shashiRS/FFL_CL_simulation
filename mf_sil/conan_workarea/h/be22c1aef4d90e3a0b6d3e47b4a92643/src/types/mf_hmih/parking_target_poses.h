// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_HMIH_PARKING_TARGET_POSES_H_
#define MF_HMIH_PARKING_TARGET_POSES_H_

#include "Platform_Types.h"
#include "mf_hmih/parking_target_pose.h"
#include "eco/memset.h"


namespace mf_hmih
{

  /// Target poses information for Visu
  struct ParkingTargetPoses
  {
    ///Number of poses that are valid (does not need to be reachable)
    uint8 numValidParkingPoses_nu;
    ///All information related to a possible target pose
    ParkingTargetPose parkingPoses[20];
  };

  inline ::mf_hmih::ParkingTargetPoses createParkingTargetPoses()
  {
    ParkingTargetPoses m;
    (void)::eco::memset(&m, 0U, sizeof(ParkingTargetPoses));
    m.numValidParkingPoses_nu = 255U;
    {
      const uint64 arraysize = (sizeof(m.parkingPoses) / sizeof(m.parkingPoses[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.parkingPoses[i] = createParkingTargetPose();
      }
    }
    return m;
  }

} // namespace mf_hmih

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_hmih::ParkingTargetPoses create_default()
  {
      return ::mf_hmih::createParkingTargetPoses();
  }
}


#endif // MF_HMIH_PARKING_TARGET_POSES_H_
