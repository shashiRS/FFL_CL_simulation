// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_TP_POSE_BOX_DATA_H_
#define AP_TP_POSE_BOX_DATA_H_

#include "Platform_Types.h"
#include "ap_tp/target_road_side.h"
#include "eco/memset.h"


namespace ap_tp
{

  /// 
  struct PoseBoxData
  {
    ///@range{-3.14,3.14}
    ///@unit{Radian}
    ///Yaw angle of ego vehicle at first detection of parking box with ID parkingBoxID_nu @min: -3.14 @max: 3.14 @unit: Radian
    float32 egoYawFirstDetection_rad;
    ///@range{0,65535}
    ///@unit{Identifier}
    ///ID of parking box @min: 0 @max: 65535 @unit: Identifier
    uint16 parkingBoxID_nu;
    ///@range{0,255}
    ///@unit{Identifier}
    ///ID of target pose for park in that was created based on parking box with ID parkingBoxID_nu @min: 0 @max: 255 @unit: Identifier
    uint8 poseInID_nu;
    ///@range{0,255}
    ///@unit{Identifier}
    ///ID of target pose for park out that was created based on parking box with ID parkingBoxID_nu @min: 0 @max: 255 @unit: Identifier
    uint8 poseOutID_nu;
    ///@range{0,8}
    ///@unit{Index}
    ///Current index of target pose that refers to poseInID @min: 0 @max: 8 @unit: Index
    uint8 poseInIdx_nu;
    ///@range{0,8}
    ///@unit{Index}
    ///Current index of target pose that refers to poseOutID @min: 0 @max: 8 @unit: Index
    uint8 poseOutIdx_nu;
    ///@range{0,3}
    ///@unit{enum TargetRoadSide}
    ///Road side of parking box determined using the driving direction @min: 0 @max: 3 @unit: enum TargetRoadSide @values: enum { _TRS_RIGHT_SIDE=0,_TRS_LEFT_SIDE=1,_TRS_IN_FRONT=2,_TRS_IN_REAR=3 }
    TargetRoadSide parkingBoxSide_nu;
    ///@range{0,1}
    ///@unit{boolean}
    ///Wether the left edge of the parking box is the edge with greater x-value for x pointing in driving direction @min: 0 @max: 1 @unit: boolean
    boolean leftEdgeIsFront_nu;
    ///@range{0,1}
    ///@unit{boolean}
    ///Wether the mapping values between pose and parking box are valid @min: 0 @max: 1 @unit: boolean
    boolean mappingValid_nu;
  };

  inline ::ap_tp::PoseBoxData createPoseBoxData()
  {
    PoseBoxData m;
    (void)::eco::memset(&m, 0U, sizeof(PoseBoxData));
    m.parkingBoxID_nu = 65535U;
    m.poseInID_nu = 255U;
    m.poseOutID_nu = 255U;
    m.poseInIdx_nu = 8U;
    m.poseOutIdx_nu = 8U;
    m.leftEdgeIsFront_nu = 1;
    return m;
  }

} // namespace ap_tp

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::ap_tp::PoseBoxData create_default()
  {
      return ::ap_tp::createPoseBoxData();
  }
}


#endif // AP_TP_POSE_BOX_DATA_H_
