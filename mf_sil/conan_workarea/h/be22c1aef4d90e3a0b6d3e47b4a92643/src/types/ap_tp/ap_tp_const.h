// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_TP_AP_TP_CONST_H_
#define AP_TP_AP_TP_CONST_H_

#include "Platform_Types.h"
#include "eco/memset.h"


namespace ap_tp
{

  /// 
  struct AP_TP_Const
  {
    enum { AP_P_MAX_NUM_TRAJ_CTRL_POINTS = 20U};
    enum { NUM_MTS_DEBUG_FREESPACE_TP = 10U};
    enum { AP_T_MAX_NUM_SMPL_PBOX_VERT_NU = 4U};
    enum { AP_T_MAX_NUM_POSE_BOX_DATA_NU = 8U};
    enum { NUM_MTS_DEBUG_FREESPACE_TPD = 10U};
    ///maximum poses in a parking path
    enum { AP_P_MAX_NUM_POSES_IN_PATH_NU = 1000U};
    ///maximum number of segments (changes of turn radius or gear) in a geometric path
    enum { AP_P_MAX_NUM_SEGMENTS_IN_PATH_NU = 25U};
    enum { AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH = 1000U};
    enum { AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH_BUFFER = 10U};
  };

  inline ::ap_tp::AP_TP_Const createAP_TP_Const()
  {
    AP_TP_Const m;
    (void)::eco::memset(&m, 0U, sizeof(AP_TP_Const));
    return m;
  }

} // namespace ap_tp

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::ap_tp::AP_TP_Const create_default()
  {
      return ::ap_tp::createAP_TP_Const();
  }
}


#endif // AP_TP_AP_TP_CONST_H_
