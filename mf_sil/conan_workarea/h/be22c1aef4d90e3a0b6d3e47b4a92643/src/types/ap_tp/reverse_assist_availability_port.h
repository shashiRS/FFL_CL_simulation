// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_TP_REVERSE_ASSIST_AVAILABILITY_PORT_H_
#define AP_TP_REVERSE_ASSIST_AVAILABILITY_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace ap_tp
{

  /// 
  struct ReverseAssistAvailabilityPort
  {
    ///@unit{eco.AlgoInterfaceVersionNumber}
    ///
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ///@unit{eco.SignalHeader}
    ///
    ::eco::SignalHeader sSigHeader;
    ///@range{0,1}
    ///@unit{nu}
    ///indicator signalizing whether a Reverse Assist path is available @min: 0 @max: 1 @unit: nu
    boolean pathAvailable;
    ///@range{0,150}
    ///@unit{m}
    ///length of the currently stored Reverse Assist path @min: 0 @max: 150 @unit: m
    float32 pathLength_m;
  };

  inline ::ap_tp::ReverseAssistAvailabilityPort createReverseAssistAvailabilityPort()
  {
    ReverseAssistAvailabilityPort m;
    (void)::eco::memset(&m, 0U, sizeof(ReverseAssistAvailabilityPort));
    m.sSigHeader = ::eco::createSignalHeader();
    m.pathAvailable = 0;
    return m;
  }

} // namespace ap_tp

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::ap_tp::ReverseAssistAvailabilityPort create_default()
  {
      return ::ap_tp::createReverseAssistAvailabilityPort();
  }
}


#endif // AP_TP_REVERSE_ASSIST_AVAILABILITY_PORT_H_
