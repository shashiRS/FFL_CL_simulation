// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef SI_SLOT_STATUS_H_
#define SI_SLOT_STATUS_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace si
{
  /// \cond HIDDEN_ENUMS
  ///@brief Describes the possible states of a slot.
  class SlotStatus
  {
  public:
    typedef uint8 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      ///@brief The state of the slot is unknown.
      UNKNOWN = 0U,
      ///@brief The slot is a valid slot.
      VALID = 1U,
      ///@brief The slot opening does not match any defined prototype.
      INVALID_OPENING = 2U,
      ///@brief The area of the slot is invalid due to some reason (e.g. too many lines overlapping with it).
      INVALID_WINDOW = 3U,
      ///@brief Slot area does not match the slot.
      NOT_MATCHING_WINDOW = 4U,
      ///@brief The slot defines and already managed slot.
      SLOT_ALREADY_KNOWN = 5U,
      ///@brief Slot overlaps some higher priority object.
      SLOT_INVALIDATED_BY_OVERLAP_WITH_HIGHER_PRIO = 6U,
      ///@brief An expected side or curb object is missing.
      SIDE_OR_CURB_OBJECTS_MISSING = 7U,
      ///@brief Too many iterations occurring during slot shrinking.
      TOO_MANY_ITERATIONS_IN_SHRINKING = 8U,
      ///@brief No valid shift vector is found during slot shrinking.
      NO_VALID_SHIFT_VECTOR_FOUND = 9U,
      ///@brief Slot becomes too small after shrinking.
      SLOT_TOO_SMALL_AFTER_SHRINKING = 10U,
      ///@brief Slot definition is invalid.
      SLOT_INVALID_BY_DEF = 11U,
      ///@brief Opening classified as parallel.
      SLOT_PARALLEL_WINDOW_VALID = 12U,
      ///@brief Parallel slot with invalid area.
      SLOT_PARALLEL_WINDOW_INVALID = 13U,
      ///@brief Opening classified as perpendicular.
      SLOT_PERP_WINDOW_VALID = 14U,
      ///@brief Perpendicular slot with invalid area.
      SLOT_PERP_WINDOW_INVALID = 15U,
      ///@brief Opening classified as garage parking slot.
      SLOT_GARAGE_WINDOW_VALID = 16U,
      ///@brief Garage parking slot with invalid area.
      SLOT_GARAGE_WINDOW_INVALID = 17U,
      ///@brief Opening classified as angled slot.
      SLOT_ANGLED_WINDOW_VALID = 18U,
      ///@brief Angular slot with invalid area.
      SLOT_ANGLED_WINDOW_INVALID = 19U,
      ///@brief Parking slot is not rectangular.
      SLOT_NOT_RECTANGULAR = 20U,
      ///@brief Parking slot is not long enough.
      SLOT_OPENING_TOO_SHORT = 21U,
      ///@brief Parking slot is too long.
      SLOT_OPENING_TOO_LONG = 22U,
      ///@brief Parking slot is not deep enough.
      SLOT_DEPTH_TOO_SHORT = 23U,
      ///@brief Parking slot is too deep.
      SLOT_DEPTH_TOO_LONG = 24U,
      ///@brief Invalid parking slot because its orientation changed over the threshold.
      SLOT_ORIENTATION_OVER_THRESHOLD = 25U,
      ///@brief Slot has an invalid delimiter object.
      SIDE_DELIMITER_INVALID = 26U,
      ///@brief Mini EM cannot handle the slot anymore.
      SI_LOW_MINI_EM_OVERFLOW = 27U,
      ///@brief If the slot is ready and not containing the ego shape, then it is not valid.
      SLOT_NOT_OVERLAPPING_EGO = 28U,
      ///@brief Kill slot whose rotation exceeds a limit.
      SLOT_ROTATED_TOO_FAR = 29U,
      ///@brief Slot does not have a CNN counterpart.
      SLOT_NOT_VALIDATED_BY_CNN_SLOT = 30U,
      ///@brief Slot overlaps too much with an already managed CNN slot.
      SLOT_IS_INVALIDATED_BY_CNN_SLOT = 31U,
      ///@brief Slot extends too much beyond the side delimiter line.
      SLOT_EXTENDED_BEYOND_LINE_TOO_FAR = 32U
    };

    SlotStatus() :
      value(static_cast< underlying_type >(UNKNOWN))
    {
    }

    SlotStatus(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    SlotStatus(const SlotStatus& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END SlotStatus(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    SlotStatus& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(SlotStatus&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    SlotStatus& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    SlotStatus& operator=(const SlotStatus& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(SlotStatus&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace si

// PRQA S 2180 --

#endif // SI_SLOT_STATUS_H_
