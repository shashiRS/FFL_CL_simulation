// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef SI_EGO_MOTION_PORT_H_
#define SI_EGO_MOTION_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "si/simotion_state.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace si
{

  /// None
  struct EgoMotionPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,1}
    ///motion state of the vehicle
    SIMotionState motionState_nu;
    ///@unit{Radian}
    ///@range{-3.14159265359,3.14159265359}
    ///pitch angle of the vehicle
    float32 pitch_rad;
    ///@unit{Radian}
    ///@range{-3.14159265359,3.14159265359}
    ///roll angle of the vehicle
    float32 roll_rad;
    ///@unit{m / s}
    ///@range{-27.8,100.0}
    ///velocity vehicle (rear axle based)
    float32 vel_mps;
    ///@unit{Radian / s}
    ///yaw rate of the vehicle
    float32 yawRate_radps;
    ///@unit{m / s^2}
    ///@range{-27.8,100.0}
    ///acceleration vector of the vehicle
    float32 accel_mps2;
    ///@unit{m}
    ///@range{-1000.0,1000.0}
    ///driven distance of the vehicle
    float32 drivenDistance_m;
    ///@unit{Radian}
    ///@range{-0.8,0.8}
    ///front wheel angle
    float32 frontWheelAngle_rad;
    ///@unit{Radian}
    ///@range{-0.8,0.8}
    ///rear wheel angle
    float32 rearWheelAngle_rad;
  };

  inline ::si::EgoMotionPort createEgoMotionPort()
  {
    EgoMotionPort m;
    (void)::eco::memset(&m, 0U, sizeof(EgoMotionPort));
    m.sSigHeader = ::eco::createSignalHeader();
    m.drivenDistance_m = 0.0F;
    return m;
  }

} // namespace si

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::si::EgoMotionPort create_default()
  {
      return ::si::createEgoMotionPort();
  }
}


#endif // SI_EGO_MOTION_PORT_H_
