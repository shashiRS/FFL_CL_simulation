// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef SI_AP_ENV_MODEL_PORT_H_
#define SI_AP_ENV_MODEL_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "si/reset_origin_result.h"
#include "lsm_geoml/pose_pod.h"
#include "si/dynamic_object_serializable.h"
#include "si/static_object_serializable.h"
#include "eco/memset.h"


namespace si
{

  /// None
  struct ApEnvModelPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@unit{nu}
    ///Number of valid static objects
    uint8 numberOfStaticObjects_u8;
    ///@unit{nu}
    ///Number of valid dynamic objects
    uint8 numberOfDynamicObjects_u8;
    ///@unit{nu}
    ///Information about the previously used coordinate system.
    ResetOriginResult resetOriginResult;
    ///@unit{no unit}
    ///Transformation information from AP (performance core) to odometry coordinate system (realtime core)
    ::lsm_geoml::Pose_POD transformationToOdometry;
    ///@unit{no unit}
    ///A pose defined by an x and y coordinate as well as a yaw angle
    ::lsm_geoml::Pose_POD egoVehiclePoseForAP;
    ///@unit{nu}
    ///dynamic objects
    DynamicObjectSerializable dynamicObjects[4];
    ///@unit{nu}
    ///structures comprising the static environment of the vehicle
    StaticObjectSerializable staticObjects[32];
  };

  inline ::si::ApEnvModelPort createApEnvModelPort()
  {
    ApEnvModelPort m;
    (void)::eco::memset(&m, 0U, sizeof(ApEnvModelPort));
    m.sSigHeader = ::eco::createSignalHeader();
    m.resetOriginResult = createResetOriginResult();
    m.transformationToOdometry = ::lsm_geoml::createPose_POD();
    m.egoVehiclePoseForAP = ::lsm_geoml::createPose_POD();
    {
      const uint64 arraysize = (sizeof(m.dynamicObjects) / sizeof(m.dynamicObjects[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.dynamicObjects[i] = createDynamicObjectSerializable();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.staticObjects) / sizeof(m.staticObjects[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.staticObjects[i] = createStaticObjectSerializable();
      }
    }
    return m;
  }

} // namespace si

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::si::ApEnvModelPort create_default()
  {
      return ::si::createApEnvModelPort();
  }
}


#endif // SI_AP_ENV_MODEL_PORT_H_
