// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef SI_AP_PARKING_BOX_PORT_H_
#define SI_AP_PARKING_BOX_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "si/parking_box_serializable.h"
#include "si/external_pose_data.h"
#include "eco/memset.h"


namespace si
{

  /// None
  struct ApParkingBoxPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,MAX_NUM_PARKING_BOXES}
    ///number of valid parking boxes
    uint8 numValidParkingBoxes_nu;
    uint8 numValidExternalPoses;
    ///@unit{nu}
    ///description of potential parking boxes
    ParkingBoxSerializable parkingBoxes[6];
    ExternalPoseData extPoseData[4];
  };

  inline ::si::ApParkingBoxPort createApParkingBoxPort()
  {
    ApParkingBoxPort m;
    (void)::eco::memset(&m, 0U, sizeof(ApParkingBoxPort));
    m.sSigHeader = ::eco::createSignalHeader();
    m.numValidParkingBoxes_nu = 0U;
    {
      const uint64 arraysize = (sizeof(m.parkingBoxes) / sizeof(m.parkingBoxes[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.parkingBoxes[i] = createParkingBoxSerializable();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.extPoseData) / sizeof(m.extPoseData[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.extPoseData[i] = createExternalPoseData();
      }
    }
    return m;
  }

} // namespace si

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::si::ApParkingBoxPort create_default()
  {
      return ::si::createApParkingBoxPort();
  }
}


#endif // SI_AP_PARKING_BOX_PORT_H_
