// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef SI_CORE_SLOT_PROTOTYPE_H_
#define SI_CORE_SLOT_PROTOTYPE_H_

#include "Platform_Types.h"
#include "si/slot_dimension.h"
#include "eco/memset.h"


namespace si
{

  /// @brief Geometry of a slot prototype.
  struct CoreSlotPrototype
  {
    ///@unit{nu}
    ///@brief Switch to enable or disable this slot type.
    boolean enabled_nu;
    ///@unit{m}
    ///@brief Length (longer side) information.
    SlotDimension length_m;
    ///@unit{m}
    ///@brief Width (shorter side) information.
    SlotDimension width_m;
  };

  inline ::si::CoreSlotPrototype createCoreSlotPrototype()
  {
    CoreSlotPrototype m;
    (void)::eco::memset(&m, 0U, sizeof(CoreSlotPrototype));
    m.enabled_nu = 0;
    m.length_m = createSlotDimension();
    m.width_m = createSlotDimension();
    return m;
  }

} // namespace si

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::si::CoreSlotPrototype create_default()
  {
      return ::si::createCoreSlotPrototype();
  }
}


#endif // SI_CORE_SLOT_PROTOTYPE_H_
