// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_PROCESSING_US_PROCESSING_SENSOR_PARAMETERS_H_
#define US_PROCESSING_US_PROCESSING_SENSOR_PARAMETERS_H_

#include "Platform_Types.h"
#include "us_processing/us_processing_sensor_parameter.h"
#include "eco/memset.h"


namespace us_processing
{

  struct UsProcessingSensorParameters
  {
    uint32 sensorParameterCount;
    UsProcessingSensorParameter sensorParameter[12];
  };

  inline ::us_processing::UsProcessingSensorParameters createUsProcessingSensorParameters()
  {
    UsProcessingSensorParameters m;
    (void)::eco::memset(&m, 0U, sizeof(UsProcessingSensorParameters));
    {
      const uint64 arraysize = (sizeof(m.sensorParameter) / sizeof(m.sensorParameter[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sensorParameter[i] = createUsProcessingSensorParameter();
      }
    }
    return m;
  }

} // namespace us_processing

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::us_processing::UsProcessingSensorParameters create_default()
  {
      return ::us_processing::createUsProcessingSensorParameters();
  }
}


#endif // US_PROCESSING_US_PROCESSING_SENSOR_PARAMETERS_H_
