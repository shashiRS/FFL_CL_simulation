// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_PROCESSING_US_PROCESSING_OBJECT_LIST_H_
#define US_PROCESSING_US_PROCESSING_OBJECT_LIST_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "us_processing/us_processing_object.h"
#include "us_processing/us_processing_vertex.h"
#include "eco/memset.h"


namespace us_processing
{

  struct UsProcessingObjectList
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,US_PROCESSING_MAX_NUM_OBJECTS}
    ///@unit{nu}
    ///used data buffers to optimize processing
    uint32 numberOfObjects;
    ///Array of Objects
    UsProcessingObject objects[20];
    ///Array of Vertices referenced in the Object definition to describe the objects shape
    UsProcessingVertex vertices[240];
  };

  inline ::us_processing::UsProcessingObjectList createUsProcessingObjectList()
  {
    UsProcessingObjectList m;
    (void)::eco::memset(&m, 0U, sizeof(UsProcessingObjectList));
    m.sSigHeader = ::eco::createSignalHeader();
    {
      const uint64 arraysize = (sizeof(m.objects) / sizeof(m.objects[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.objects[i] = createUsProcessingObject();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.vertices) / sizeof(m.vertices[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.vertices[i] = createUsProcessingVertex();
      }
    }
    return m;
  }

} // namespace us_processing

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::us_processing::UsProcessingObjectList create_default()
  {
      return ::us_processing::createUsProcessingObjectList();
  }
}


#endif // US_PROCESSING_US_PROCESSING_OBJECT_LIST_H_
