// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MEMPARK_MF_MEM_PARK_CONSTS_H_
#define MF_MEMPARK_MF_MEM_PARK_CONSTS_H_

#include "Platform_Types.h"
#include "eco/memset.h"


namespace mf_mempark
{

  struct MF_MemPark_Consts
  {
    enum { MAX_NUM_PARKING_SLOTS_NU = 10U};
    enum { MAX_NUM_TRAJECTORY_NU = 5U};
    enum { MAX_NUM_REQUESTABLE_RELOCALIZATION_SLOTS = 10U};
    ///Parameter that determines the max size of points to
    ///use for trajectory representation, each point takes place every meter.
    ///E.g. for MAX_SIZE_OF_POINTS=100 we can represent 100 meters distance
    ///due to 1 point per meter
    enum { MAX_SIZE_OF_POINTS = 200U};
    enum { MAX_SLOTS_PER_METAMAP_NU = 1U};
    enum { MAX_TRAJECTORIES_PER_METAMAP_NU = 1U};
    enum { MAX_NUM_MAPS_STORED_NU = 10U};
    enum { INVALID_MAP_ID = 255U};
  };

  inline ::mf_mempark::MF_MemPark_Consts createMF_MemPark_Consts()
  {
    MF_MemPark_Consts m;
    (void)::eco::memset(&m, 0U, sizeof(MF_MemPark_Consts));
    return m;
  }

} // namespace mf_mempark

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_mempark::MF_MemPark_Consts create_default()
  {
      return ::mf_mempark::createMF_MemPark_Consts();
  }
}


#endif // MF_MEMPARK_MF_MEM_PARK_CONSTS_H_
