// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MEMPARK_MEM_PARK_PARAMS_H_
#define MF_MEMPARK_MEM_PARK_PARAMS_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace mf_mempark
{

  /// Memory Parking Parameters
  struct MemParkParams
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///None
    boolean functionActive_nu;
    ///Scan roi
    float32 scanRoiHalfWidth_m;
    ///Scan roi
    float32 scanRoiBackExtension_m;
    ///Scan roi
    float32 scanRoiFrontExtension_m;
    ///ICP covergence criterion
    uint8 minRequiredRelocalizationProb_perc;
    ///developer parameters
    float32 memParkDeveloperParam_0;
    ///Generic member for developer parameter.
    float32 memParkDeveloperParam_1;
    ///Generic member for developer parameter.
    float32 memParkDeveloperParam_2;
    ///Generic member for developer parameter.
    float32 memParkDeveloperParam_3;
    ///Generic member for developer parameter.
    float32 memParkDeveloperParam_4;
    ///Generic member for developer parameter.
    float32 memParkDeveloperParam_5;
    ///Generic member for developer parameter.
    float32 memParkDeveloperParam_6;
    ///Generic member for developer parameter.
    float32 memParkDeveloperParam_7;
  };

  inline ::mf_mempark::MemParkParams createMemParkParams()
  {
    MemParkParams m;
    (void)::eco::memset(&m, 0U, sizeof(MemParkParams));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_mempark

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_mempark::MemParkParams create_default()
  {
      return ::mf_mempark::createMemParkParams();
  }
}


#endif // MF_MEMPARK_MEM_PARK_PARAMS_H_
