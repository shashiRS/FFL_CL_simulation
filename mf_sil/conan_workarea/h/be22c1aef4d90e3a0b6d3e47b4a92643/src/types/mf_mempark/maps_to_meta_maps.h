// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MEMPARK_MAPS_TO_META_MAPS_H_
#define MF_MEMPARK_MAPS_TO_META_MAPS_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "mf_mempark/map_idto_meta_map.h"
#include "eco/memset.h"


namespace mf_mempark
{

  /// This structure represents a collection of map IDs each associated with its corresponding MetaMap.
  struct MapsToMetaMaps
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    uint8 numValidMaps;
    MapIDToMetaMap mapsMetaMaps[10];
  };

  inline ::mf_mempark::MapsToMetaMaps createMapsToMetaMaps()
  {
    MapsToMetaMaps m;
    (void)::eco::memset(&m, 0U, sizeof(MapsToMetaMaps));
    m.sSigHeader = ::eco::createSignalHeader();
    {
      const uint64 arraysize = (sizeof(m.mapsMetaMaps) / sizeof(m.mapsMetaMaps[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.mapsMetaMaps[i] = createMapIDToMetaMap();
      }
    }
    return m;
  }

} // namespace mf_mempark

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_mempark::MapsToMetaMaps create_default()
  {
      return ::mf_mempark::createMapsToMetaMaps();
  }
}


#endif // MF_MEMPARK_MAPS_TO_META_MAPS_H_
