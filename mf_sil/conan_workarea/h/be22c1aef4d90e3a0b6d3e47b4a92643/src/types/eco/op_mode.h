// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef ECO_OP_MODE_H_
#define ECO_OP_MODE_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace eco
{
  /// \cond HIDDEN_ENUMS
  ///Represents the component execution mode context  which is provided
  ///by the Framework to all components.  values: enum { OPM_INIT=0
  ///,OPM_EXEC1=1,OPM_EXEC2=2,OPM_EXEC3=3,OPM_EXEC4=4,OPM_EXEC5=5,
  ///OPM_EXEC6=6,OPM_NOP=254,OPM_UNDEF=255,}
  ///@range{0,255}
  class OpMode
  {
  public:
    typedef uint8 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      OPM_INIT = 0U,
      OPM_EXEC1 = 1U,
      OPM_EXEC2 = 2U,
      OPM_EXEC3 = 3U,
      OPM_EXEC4 = 4U,
      OPM_EXEC5 = 5U,
      OPM_EXEC6 = 6U,
      OPM_NOP = 254U,
      OPM_UNDEF = 255U
    };

    OpMode() :
      value(static_cast< underlying_type >(OPM_INIT))
    {
    }

    OpMode(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    OpMode(const OpMode& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END OpMode(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    OpMode& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(OpMode&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    OpMode& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    OpMode& operator=(const OpMode& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(OpMode&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace eco

// PRQA S 2180 --

#endif // ECO_OP_MODE_H_
