// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef ECO_FRAMEWORK_CONTROL_H_
#define ECO_FRAMEWORK_CONTROL_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "eco/op_mode.h"
#include "eco/algo_data_time_stamp.h"
#include "eco/comp_op_state.h"
#include "Platform_Types.h"
#include "eco/first_last_component_execution.h"
#include "eco/memset.h"


namespace eco
{

  struct FrameworkControl
  {
    ///Version number of interface
    AlgoInterfaceVersionNumber uiVersionNumber;
    ///Signal header with common signal information
    SignalHeader sSigHeader;
    ///Represents the component execution mode context  which is provided
    ///by the Framework to all components.
    OpMode opMode;
    ///Represents the time stamp at the begin of the cycle.
    AlgoDataTimeStamp cemCycleInitTimeStamp;
    ///Represents the time stamp at the end of the cycle.
    AlgoDataTimeStamp endCycleEstimatedTimeStamp;
    ///Represents the operation state of components updated by
    ///the framework
    ///through shell with return provided by the components.
    CompOpState opState;
    ///@unit{us}
    ///Represents the execution time, of the last operation mode of components (exec1() .. exec6()).
    AlgoDataTimeStamp opModeExecTime;
    ///Returned error code by the component
    uint64 errorCode;
    ///Returned functional error codes (range check results) by the component
    uint64 functionalErrorCode[4];
    ///Used for computing the time offset of the recorded data to the windows time. This reports the windows time at the
    ///start of the cycle.
    AlgoDataTimeStamp windowsCycleStart;
    ///Used for computing the time offset of the recorded data to the windows time. This reports the recorded time at the
    ///start of the cycle without the latency compensation.
    AlgoDataTimeStamp rawCycleStart;
    ///Used to determine if the execution is the first or last or both execution in the current cycle.
    FirstLastComponentExecution firstLastExecution;
    ///Used to determine if the system mode is ose mode or not.
    boolean oseMode;
  };

  inline ::eco::FrameworkControl createFrameworkControl()
  {
    FrameworkControl m;
    (void)::eco::memset(&m, 0U, sizeof(FrameworkControl));
    m.sSigHeader = createSignalHeader();
    m.firstLastExecution = createFirstLastComponentExecution();
    return m;
  }

} // namespace eco

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::eco::FrameworkControl create_default()
  {
      return ::eco::createFrameworkControl();
  }
}


#endif // ECO_FRAMEWORK_CONTROL_H_
