// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_DRVWARNSM_CORE_DRV_WARN_CORE_STATUS_PORT_H_
#define MF_DRVWARNSM_CORE_DRV_WARN_CORE_STATUS_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "mf_drvwarnsm_core/dwfcore_state.h"
#include "eco/memset.h"


namespace mf_drvwarnsm_core
{

  /// Main output of Driver Warning State Machines Core (status information)
  struct DrvWarnCoreStatusPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///PDW core activation state flag
    boolean pdwActiveState_nu;
    ///@range{0,5}
    ///Internal state of the PDW core state machine
    DWFCoreState pdwCoreState_nu;
    ///@range{0,5}
    ///Internal state of the WHP core state machine
    DWFCoreState whpCoreState_nu;
  };

  inline ::mf_drvwarnsm_core::DrvWarnCoreStatusPort createDrvWarnCoreStatusPort()
  {
    DrvWarnCoreStatusPort m;
    (void)::eco::memset(&m, 0U, sizeof(DrvWarnCoreStatusPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_drvwarnsm_core

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_drvwarnsm_core::DrvWarnCoreStatusPort create_default()
  {
      return ::mf_drvwarnsm_core::createDrvWarnCoreStatusPort();
  }
}


#endif // MF_DRVWARNSM_CORE_DRV_WARN_CORE_STATUS_PORT_H_
