// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_COMMONVEHSIGPROVIDER_WHEEL_PULSE_PORT_H_
#define AP_COMMONVEHSIGPROVIDER_WHEEL_PULSE_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace ap_commonvehsigprovider
{

  /// Measurements describing the wheel pulses
  struct WheelPulsePort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,1000}
    ///Number of wheel-sensor impulses front left. Rising and falling edge.
    uint16 wheelPulsesFL_nu;
    ///@range{0,1000}
    ///Number of wheel-sensor impulses front right. Rising and falling edge.
    uint16 wheelPulsesFR_nu;
    ///@range{0,1000}
    ///Number of wheel-sensor impulses rear left. Rising and falling edge.
    uint16 wheelPulsesRL_nu;
    ///@range{0,1000}
    ///Number of wheel-sensor impulses rear right. Rising and falling edge.
    uint16 wheelPulsesRR_nu;
    ///Qualifier-Bit Number of wheel-sensor impulse signal front left
    boolean wheelPulsesFL_QF_nu;
    ///Qualifier-Bit Number of wheel-sensor impulse signal front right.
    boolean wheelPulsesFR_QF_nu;
    ///Qualifier-Bit Number of wheel-sensor impulse signal rear left.
    boolean wheelPulsesRL_QF_nu;
    ///Qualifier-Bit Number of wheel-sensor impulse signal rear right.
    boolean wheelPulsesRR_QF_nu;
  };

  inline ::ap_commonvehsigprovider::WheelPulsePort createWheelPulsePort()
  {
    WheelPulsePort m;
    (void)::eco::memset(&m, 0U, sizeof(WheelPulsePort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace ap_commonvehsigprovider

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::ap_commonvehsigprovider::WheelPulsePort create_default()
  {
      return ::ap_commonvehsigprovider::createWheelPulsePort();
  }
}


#endif // AP_COMMONVEHSIGPROVIDER_WHEEL_PULSE_PORT_H_
