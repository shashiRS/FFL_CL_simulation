// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_DRVWARNSM_DRV_WARN_STATUS_PORT_H_
#define MF_DRVWARNSM_DRV_WARN_STATUS_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "mf_drvwarnsm/whpstate.h"
#include "Platform_Types.h"
#include "mf_drvwarnsm/pdwsystem_state.h"
#include "mf_drvwarnsm/pdwshutdown_cause.h"
#include "mf_drvwarnsm/pdwstate.h"
#include "mf_drvwarnsm/reduce_to_mute_req.h"
#include "eco/memset.h"


namespace mf_drvwarnsm
{

  /// Main output from Driver Warning State machines (status information)
  struct DrvWarnStatusPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,4}
    ///Wheel Protection function status(internal state).
    WHPState whpState_nu;
    ///Wheel Protection function display request.
    boolean whpDisplayReq_nu;
    ///@range{0,5}
    ///PDW system state information.
    PDWSystemState pdwSystemState_nu;
    ///@range{0,3}
    ///The reason why  PDW system state is off
    PDWShutdownCause pdwShutdownCause_nu;
    ///@range{0,13}
    ///Internal state of the PDW state machine
    PDWState pdwState_nu;
    ///@range{0,5}
    ///reduced to mute sound volume in standstill _PDW_REDUCE_NONE=0,_PDW_REDUCE_LVL1=1,_PDW_REDUCE_LVL2=2,_PDW_REDUCE_LVL3=3,_PDW_REDUCE_LVL4=4,_PDW_NUM_LEVELS=5
    ReduceToMuteReq reduceToMuteSoundReq_nu;
  };

  inline ::mf_drvwarnsm::DrvWarnStatusPort createDrvWarnStatusPort()
  {
    DrvWarnStatusPort m;
    (void)::eco::memset(&m, 0U, sizeof(DrvWarnStatusPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_drvwarnsm

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_drvwarnsm::DrvWarnStatusPort create_default()
  {
      return ::mf_drvwarnsm::createDrvWarnStatusPort();
  }
}


#endif // MF_DRVWARNSM_DRV_WARN_STATUS_PORT_H_
