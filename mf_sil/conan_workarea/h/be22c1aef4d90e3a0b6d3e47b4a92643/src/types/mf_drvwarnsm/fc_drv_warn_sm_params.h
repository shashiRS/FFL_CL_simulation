// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_DRVWARNSM_FC_DRV_WARN_SM_PARAMS_H_
#define MF_DRVWARNSM_FC_DRV_WARN_SM_PARAMS_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace mf_drvwarnsm
{

  struct FC_DrvWarnSM_Params
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///The hysteresis to be applied to the speed threshold when switching between active/inactive states
    float32 DWF_L_SPEED_HYSTERESIS_MPS;
    ///Maximum duration for initialization phase
    float32 PDW_L_INIT_TIME_S;
    ///Maximum waiting time for the system to be stable during initialization.
    float32 PDW_L_STABILIZATON_WAIT_TIME_S;
    ///Waiting time before the vehicle is considered in standstill (time with no ticks detected at the rear wheels)
    float32 PDW_L_STANDSTILL_TIME_S;
    ///Waiting time, before PDW function consider R gear engaged in case of manual transmission
    float32 PDW_L_REV_GEAR_DEB_TIME_MAN_S;
    ///Waiting time, before PDW function consider R gear engaged in case of automatic transmission
    float32 PDW_L_REV_GEAR_DEB_TIME_AUT_S;
    ///Maximum allowed velocity in order to use PDW
    float32 PDW_L_VEL_THRESH_OFF_MPS;
    ///Maximum speed for which the wheel protection function is enabled
    float32 WHP_L_MAX_SPEED_MPS;
    ///Parameter for the minimum change in wheel angle to reactivate the wheel warning level
    float32 WHP_L_MIN_WHL_ANGLE_DIFF_RAD;
    ///Define a distance threshold while rolling backwards for PDW activation caused by backwards rolling with obstacle
    float32 PDW_L_ROLLBACK_W_OBST_DIST_M;
    ///Define a distance threshold while rolling backwards for PDW activation caused by backwards rolling without obstacle
    float32 PDW_L_ROLLBACK_WO_OBST_DIST_M;
    ///Define maximum distance threshold  for continous tone range.
    float32 PDW_L_MAX_DIST_CONT_TONE_M;
    ///Define minimum distance threshold for rear sensors.
    float32 PDW_L_MIN_DIST_REAR_SENSORS_M;
    ///Coding parameter that specifies the variant: OPS or 360 OPS.
    uint8 DWF_C_OPS_VARIANT_NU;
    ///Coding parameter that specifices which transmission is available: 1 = automatic; 0 = manual
    boolean DWF_C_TRANSMISSION_TYPE_NU;
    ///Parameter to enable the driving tube
    boolean PDW_L_DRIVING_TUBE_NU;
    ///Parameter to activate/deactivate the automatic activation: 1= active
    boolean PDW_L_AUTOMATIC_ACTIVATION_NU;
    ///Parameter that determines the action taken when the PDW button is pressed during automatic activation: 0 = PDW becomes activated by button; 1 = PDW becomes deactivated by button
    boolean PDW_L_AUTO_ACT_BUTTON_NU;
    ///Parameter to allow the PDW function to be automatically activated in standstill
    boolean PDW_L_AUTOM_ACTIV_STANDSTILL_NU;
    ///Parameter to activate/deactivate the rolling backwards: 1 = active
    boolean PDW_L_ROLLBACK_ACTIVATION_NU;
    ///Parameter to allow or not, to automatically deactivate the PDW function by P gear:  1 = deactivate  by P gear
    boolean PDW_L_DEACTIV_BY_P_GEAR_NU;
    ///Parameter to allow or not to automatically deactivate the PDW function by EPB intervention: 1 = deactivate by EPB
    boolean PDW_L_DEACTIV_BY_EPB_NU;
    ///Parameter to reset automatic activation after P-gear is engaged and then disengaged.
    boolean PDW_L_P_GEAR_RESET_AUTO_ACT_NU;
    ///Parameter to reset automatic activation after EPB is enabled and then disabled.
    boolean PDW_L_EPB_RESET_AUTO_ACT_NU;
    ///Parameter to allow full view in case of rollback activation. 1 = full view active
    boolean PDW_L_ROLLBACK_FULL_VIEW_NU;
    ///Parameter that specifies if rollback activation shall be available or not in case of a attached trailer. 1 = rollback activation available even with attached trailer
    boolean PDW_L_ROLLBACK_TRAILER_NU;
    ///Parameter to enable/disable PDW activation by AUP.
    boolean PDW_L_ACT_PDW_BY_AP_NU;
    ///Parameter to enable/disable WHP deactivation by AUP.
    boolean WHP_L_DEACT_WHP_BY_AP_NU;
    ///Parameter to enable/disable DWF tone deactivation during AUP: 1 = tone deactivation is allowed
    boolean DWF_L_TONE_SUPPRESS_BY_AP_NU;
    ///Parameter to enable/disable tone volume reduction in standstill for intermittent: 1 = tone reduction allowed
    boolean DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU;
    ///Parameter to enable/disable tone volume reduction in standstill for continuous : 1 = tone reduction allowed
    boolean DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU;
    ///Waiting time before the vehicle is considered in standstill for intermittent tone(time with no ticks detected at the rear wheels)
    float32 PDW_L_STANDSTILL_INTER_TIME_S;
    ///Waiting time before the vehicle is considered in standstill for continuos tone(time with no ticks detected at the rear wheels)
    float32 PDW_L_STANDSTILL_CONT_TIME_S;
    ///Parameter to select the autoactivation for obstacles 1= autoactivation for obstacles in the continuous zone or in driving tube, 0= autoactivation for activation region
    boolean PDW_L_AUTO_ACTIV_CRITICAL_NU;
    ///Define maximum distance threshold  for continous tone range for front side
    float32 PDW_L_MAX_DIST_CONT_TONE_FWD_M;
    ///Define maximum distance threshold  for continous tone range for rear side
    float32 PDW_L_MAX_DIST_CONT_TONE_REAR_M;
    ///Define maximum distance threshold  for continous tone range for lateral sides
    float32 PDW_L_MAX_DIST_CONT_TONE_LAT_M;
    ///Parameter to enable/disable modification of continuous zone length
    boolean PDW_L_CONT_DIST_EXTEND_NU;
    ///Define maximum distance for activation range
    float32 PDW_AUTO_ACTIV_THRESHOLD;
    ///Parameter to enable/disable PDW activation by critical obstacles during AUP.
    boolean PDW_L_CRIT_ACT_PDW_BY_AP_NU;
    ///Parameter to enable/disable PDW for front sectors: 1 = PDW for front sectors is enable
    boolean PDW_L_FRONT_SECT_ACTIV_NU;
    ///Parameter to enable/disable PDW for lateral sectors: 1 = PDW for lateral sectors is enable
    boolean PDW_L_LAT_SECT_ACTIV_NU;
    ///Parameter to enable/disable PDW for rear sectors: 1 = PDW for rear sectors is enable
    boolean PDW_L_REAR_SECT_ACTIV_NU;
  };

  inline ::mf_drvwarnsm::FC_DrvWarnSM_Params createFC_DrvWarnSM_Params()
  {
    FC_DrvWarnSM_Params m;
    (void)::eco::memset(&m, 0U, sizeof(FC_DrvWarnSM_Params));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_drvwarnsm

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_drvwarnsm::FC_DrvWarnSM_Params create_default()
  {
      return ::mf_drvwarnsm::createFC_DrvWarnSM_Params();
  }
}


#endif // MF_DRVWARNSM_FC_DRV_WARN_SM_PARAMS_H_
