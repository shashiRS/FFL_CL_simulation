// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MANAGER_LO_CTRL_REQUEST_PORT_H_
#define MF_MANAGER_LO_CTRL_REQUEST_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "mf_manager/lo_ctrl_request_type.h"
#include "mf_manager/activate_lo_ctrl_type.h"
#include "mf_manager/directed_lo_ctrl_request.h"
#include "mf_manager/lo_ctrl_request_source.h"
#include "eco/memset.h"


namespace mf_manager
{

  struct LoCtrlRequestPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    boolean activateLoCtrl;
    LoCtrlRequestType loCtrlRequestType;
    ActivateLoCtrlType activateLoCtrlType_nu;
    boolean secureInStandstill;
    boolean comfortStopRequest;
    DirectedLoCtrlRequest distanceToStopReq_m;
    DirectedLoCtrlRequest velocityReq_mps;
    DirectedLoCtrlRequest accelerationReq_mps2;
    loCtrlRequestSource loCtrlRequestSource_nu;
    boolean remoteSelfTest;
  };

  inline ::mf_manager::LoCtrlRequestPort createLoCtrlRequestPort()
  {
    LoCtrlRequestPort m;
    (void)::eco::memset(&m, 0U, sizeof(LoCtrlRequestPort));
    m.sSigHeader = ::eco::createSignalHeader();
    m.distanceToStopReq_m = createDirectedLoCtrlRequest();
    m.velocityReq_mps = createDirectedLoCtrlRequest();
    m.accelerationReq_mps2 = createDirectedLoCtrlRequest();
    return m;
  }

} // namespace mf_manager

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_manager::LoCtrlRequestPort create_default()
  {
      return ::mf_manager::createLoCtrlRequestPort();
  }
}


#endif // MF_MANAGER_LO_CTRL_REQUEST_PORT_H_
