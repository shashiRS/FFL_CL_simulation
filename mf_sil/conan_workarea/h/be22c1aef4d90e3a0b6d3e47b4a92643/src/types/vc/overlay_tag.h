// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef VC_OVERLAY_TAG_H_
#define VC_OVERLAY_TAG_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace vc
{
  /// \cond HIDDEN_ENUMS
  class OverlayTag
  {
  public:
    typedef uint16 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      OVERLAY_TAG_UNDEFINED = 0U,
      OVERLAY_TAG_DISTANCE_BAR_LEFT = 1U,
      OVERLAY_TAG_DISTANCE_BAR_RIGHT = 2U,
      OVERLAY_TAG_CARPET = 3U,
      OVERLAY_TAG_FRONT_TRAJECTORY = 4U,
      OVERLAY_TAG_TRAILER_TARGET = 5U,
      OVERLAY_TAG_REAR_TRAJECTORY = 6U,
      OVERLAY_TAG_HITCH_TRAJECTORY = 7U,
      OVERLAY_TAG_TAILGATE = 8U,
      OVERLAY_TAG_DETECTED_PARK_SLOT = 9U,
      OVERLAY_TAG_GLOW_FRONT_LEFT = 10U,
      OVERLAY_TAG_GLOW_FRONT_RIGHT = 11U,
      OVERLAY_TAG_GLOW_REAR_LEFT = 12U,
      OVERLAY_TAG_GLOW_REAR_RIGHT = 13U,
      OVERLAY_TAG_CAM_LEFT_N_A = 14U,
      OVERLAY_TAG_CAM_RIGHT_N_A = 15U,
      OVERLAY_TAG_CAM_FRONT_N_A = 16U,
      OVERLAY_TAG_CAM_REAR_N_A = 17U,
      OVERLAY_TAG_CAM_LEFT_DEFECT = 18U,
      OVERLAY_TAG_CAM_RIGHT_DEFECT = 19U,
      OVERLAY_TAG_CAM_FRONT_DEFECT = 20U,
      OVERLAY_TAG_CAM_REAR_DEFECT = 21U,
      OVERLAY_TAG_DOOR_LEFT = 22U,
      OVERLAY_TAG_DOOR_RIGHT = 23U,
      OVERLAY_TAG_MIRROR_LEFT = 24U,
      OVERLAY_TAG_MIRROR_RIGHT = 25U,
      OVERLAY_TAG_PARK_MARKER_DETECTION = 26U,
      OVERLAY_TAG_TRUNK = 27U,
      OVERLAY_TAG_EARLY_BITMAP = 28U,
      OVERLAY_TAG_POLYGON = 29U,
      OVERLAY_TAG_PLANNED_TRAJECTORY = 30U,
      OVERLAY_TAG_AUP_FRONT_TRAJECTORY = 31U,
      OVERLAY_TAG_AUP_REAR_TRAJECTORY = 32U,
      OVERLAY_TAG_CLIPPING_MASK = 33U,
      OVERLAY_TAG_PDW = 34U,
      OVERLAY_TAG_GHOST_CAR = 35U,
      OVERLAY_TAG_REVERSE_ASSIST_ICON = 36U,
      OVERLAY_TAG_REVERSE_ASSIST_DISTANCE_MARKER = 37U,
      OVERLAY_TAG_RIM_WARNING = 38U,
      NUM_OVERLAY_TAGS = 39U
    };

    OverlayTag() :
      value(static_cast< underlying_type >(OVERLAY_TAG_UNDEFINED))
    {
    }

    OverlayTag(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    OverlayTag(const OverlayTag& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END OverlayTag(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    OverlayTag& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(OverlayTag&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    OverlayTag& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    OverlayTag& operator=(const OverlayTag& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(OverlayTag&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace vc

// PRQA S 2180 --

#endif // VC_OVERLAY_TAG_H_
