// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_LSCA_LSCA_STEER_PORT_H_
#define MF_LSCA_LSCA_STEER_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "mf_lsca/lsca_steer_mode.h"
#include "eco/memset.h"


namespace mf_lsca
{

  struct LscaSteerPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///Requested torque, if torque is requested
    float32 requestTorque_Nm;
    ///Requested front steering angle, if angle is requested
    float32 requestAngleFront_rad;
    ///Requested rear steering angle, if angle is requested
    float32 requestAngleRear_rad;
    ///The current request mode
    LSCA_STEER_MODE requestMode;
  };

  inline ::mf_lsca::LscaSteerPort createLscaSteerPort()
  {
    LscaSteerPort m;
    (void)::eco::memset(&m, 0U, sizeof(LscaSteerPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_lsca

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_lsca::LscaSteerPort create_default()
  {
      return ::mf_lsca::createLscaSteerPort();
  }
}


#endif // MF_LSCA_LSCA_STEER_PORT_H_
