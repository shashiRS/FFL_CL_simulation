// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_14\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP14_TYPES_USED

#ifndef MF_TONH_FC_MF_TONE_HANDLER_PARAMS_H_
#define MF_TONH_FC_MF_TONE_HANDLER_PARAMS_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"


namespace mf_tonh
{

  /// Tone handler parameters
  struct FC_MF_ToneHandler_Params
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber{};
    ///Common header for all structured data types (e.g. timestamp)
    ::eco::SignalHeader sSigHeader{};
    ///Delay for acknowledgement tone
    float32 TH_ACK_TONE_DELAY_S{};
    ///Duration for acknowledgement tone
    float32 TH_ACK_TONE_DURATION_S{};
    ///Duration for error tone
    float32 TH_ERR_TONE_DURATION_S{};
    ///Duration of sound ON for warning tone
    float32 TH_SOUND_PULSE_LEN_S{};
    ///Duration of sound ON for warning tone - LVMD only
    float32 TH_LVMD_SOUND_PULSE_LEN_S{};
    ///Distance to determine the continuous tone limit
    float32 TH_CONT_TONE_LIMIT_M{};
    ///Duration of ping pong sound
    float32 TH_PING_PONG_DURATION_S{};
    ///Minimum duration of a pause
    float32 TH_MIN_PAUSE_DURATION_S{};
    ///Maximum duration of a pause
    float32 TH_MAX_PAUSE_DURATION_S{};
    ///Duration of acknowledgement pause
    float32 TH_ACK_PAUSE_DURATION_S{};
    ///Duration of pause when WHP has a low criticality
    float32 TH_WHP_LOW_PAUSE_DURATION_S{};
    ///Duration of pause when WHP has a high criticality
    float32 TH_WHP_HIGH_PAUSE_DURATION_S{};
    ///Duration of pause for LSCA
    float32 TH_LSCA_PAUSE_DURATION_S{};
    ///Maximum distance for object to be reported
    float32 TH_ACTIVE_DISTANCE_M{};
    ///Front volume level
    uint8 TH_VOLUME_FRONT_NU{};
    ///Rear volume level
    uint8 TH_VOLUME_REAR_NU{};
    ///Pitch for acknowledgement tone
    uint8 TH_ACK_TONE_PITCH_NU{};
    ///Volume offset to the reference volume for acknowledgement tone
    uint8 TH_ACK_TONE_VOL_OFFSET_NU{};
    ///Volume offset to the reference volume for error tone
    uint8 TH_ERR_TONE_VOL_OFFSET_NU{};
    ///Pitch for error tone
    uint8 TH_ERR_TONE_PITCH_NU{};
    ///Pitch for warning tone - general value
    uint8 TH_WARN_TONE_PITCH_NU{};
    ///Pitch for warning tone - WHP only
    ///Pitch for warning tone - LVMD only
    uint8 TH_WHP_WARN_TONE_PITCH_NU{};
    ///Pitch for low warning tone - LSCA only
    uint8 TH_LSCA_LOW_TONE_PITCH_NU{};
    uint8 TH_LSCA_HIGH_TONE_PITCH_NU{};
    ///Pitch for high warning tone - LSCA only
    uint8 TH_LVMD_TONE_PITCH_NU{};
    ///Rear volume level
    uint8 TH_WEAK_VOLUME_NU{};
    ///Parameter to enable/disable the tone handler entirely
    boolean TH_ENABLED_NU{};
    ///Parameter to enable/disable usage of different pitch for different plugins
    boolean TH_DIFFERENT_TONES_NU{};
    ///Parameter to enalbe/disable the acknowledge sounds for PDW and WHP.
    boolean TH_ACK_ACTIVE_NU{};
  };

} // namespace mf_tonh

#endif // MF_TONH_FC_MF_TONE_HANDLER_PARAMS_H_
