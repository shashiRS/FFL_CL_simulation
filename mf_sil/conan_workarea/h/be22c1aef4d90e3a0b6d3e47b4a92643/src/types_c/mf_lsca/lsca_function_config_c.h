//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef MF_LSCA_LSCA_FUNCTION_CONFIG_C_H_
#define MF_LSCA_LSCA_FUNCTION_CONFIG_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "mf_lsca/config_general_t_c.h"
#include "mf_lsca/config_brake_t_c.h"
#include "mf_lsca/config_pmp_t_c.h"
#include "mf_lsca/config_steer_t_c.h"
#include "mf_lsca/config_application_features_t_c.h"
#include "mf_lsca/config_developer_t_c.h"
#include "eco/memset_c.h"

/// LscaFunctionConfig Struct that contains all relevant function configuration data for lsca
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///General parameters
    MF_LSCA_configGeneral_t general;
    ///Brake function specific parameters
    MF_LSCA_configBrake_t functionBrake;
    ///PMP function specific parameters
    MF_LSCA_configPmp_t functionPmp;
    ///Steer function specific parameters
    MF_LSCA_configSteer_t functionSteer;
    ///Parameters and switches for application/client specific features
    MF_LSCA_configApplicationFeatures_t applicationFeatures;
    ///Developer parameters (tests, fake objects)
    MF_LSCA_configDeveloper_t developer;
} MF_LSCA_LscaFunctionConfig;

inline MF_LSCA_LscaFunctionConfig create_MF_LSCA_LscaFunctionConfig(void)
{
  MF_LSCA_LscaFunctionConfig m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  m.general = create_MF_LSCA_configGeneral_t();
  m.functionBrake = create_MF_LSCA_configBrake_t();
  m.functionPmp = create_MF_LSCA_configPmp_t();
  m.functionSteer = create_MF_LSCA_configSteer_t();
  m.applicationFeatures = create_MF_LSCA_configApplicationFeatures_t();
  m.developer = create_MF_LSCA_configDeveloper_t();
  return m;
}

#endif // MF_LSCA_LSCA_FUNCTION_CONFIG_C_H_
