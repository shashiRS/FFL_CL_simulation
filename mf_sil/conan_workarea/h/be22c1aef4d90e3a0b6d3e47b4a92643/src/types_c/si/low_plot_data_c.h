//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef SI_LOW_PLOT_DATA_C_H_
#define SI_LOW_PLOT_DATA_C_H_

#include "si/quadrilateral_serializable_array_c.h"
#include "si/triangle_serializable_array_c.h"
#include "si/ego_shape_polygon_serializable_c.h"
#include "si/transformed_scenario_serializable_c.h"
#include "si/quadrilateral_serializable_c.h"
#include "si/slot_cost_fun_data_per_slot_serializable_c.h"
#include "eco/memset_c.h"

/// @brief SI Low Plot Data contains the debug data needed for plotting low features.
typedef struct
{
    ///@brief Array of left object RoI. If object overlaps this, the slot is NOT shrunk (we assume that the area was sensed correctly).
    SI_QuadrilateralSerializableArray shrinkingObjectLeftRoi;
    ///@brief Array of right object RoI. If object overlaps this, the slot is NOT shrunk (we assume that the area was sensed correctly).
    SI_QuadrilateralSerializableArray shrinkingObjectRightRoi;
    ///@brief Array of left ego RoI. If the ego overlaps that area, the slot is NOT shrunk (we assume that the ego is close enough to sense the relevant area correctly).
    SI_TriangleSerializableArray shrinkingEgoLeftRoi;
    ///@brief Array of right ego RoI. If the ego overlaps that area, the slot is NOT shrunk (we assume that the ego is close enough to sense the relevant area correctly).
    SI_TriangleSerializableArray shrinkingEgoRightRoi;
    ///@brief Array of slots before postprocessing.
    SI_QuadrilateralSerializableArray slotsBeforePostprocessing;
    ///@brief Array of slots after postprocessing.
    SI_QuadrilateralSerializableArray slotsAfterPostprocessing;
    ///@brief Array of per-slot sub-em RoIs.
    SI_QuadrilateralSerializableArray perSlotSubEmRoi;
    ///@brief Array of current maneuvering RoIs.
    SI_QuadrilateralSerializableArray perSlotAboveSubEmRoi;
    ///@brief Array of plot per-slot follow-em RoIs (used for slot entrance ROIs because follow-em ROI doesn"t exist any more).
    SI_QuadrilateralSerializableArray perSlotFollowROI;
    ///@brief Array of per-slot oncoming-em RoIs.
    SI_QuadrilateralSerializableArray perSlotOncomingROI;
    ///@brief Array of vertices corresponding to the inflated shape of the ego vehicle.
    SI_EgoShapePolygonSerializable inflatedEgoShape;
    ///@brief Array of aggregate information related to the different steps of optimization.
    SI_TransformedScenarioSerializable slot1InSlotCoordinates;
    ///@brief Dynamic object classification RoI.
    SI_QuadrilateralSerializable dynObjClassifierROI;
    ///@brief Dynamic object classification RoI for overhead beams.
    SI_QuadrilateralSerializable dynObjClassifierROI2;
    ///@brief Array of slot cost function data for slots.
    SI_SlotCostFunDataPerSlotSerializable slotCostFunctionData;
} SI_LowPlotData;

inline SI_LowPlotData create_SI_LowPlotData(void)
{
  SI_LowPlotData m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.shrinkingObjectLeftRoi = create_SI_QuadrilateralSerializableArray();
  m.shrinkingObjectRightRoi = create_SI_QuadrilateralSerializableArray();
  m.shrinkingEgoLeftRoi = create_SI_TriangleSerializableArray();
  m.shrinkingEgoRightRoi = create_SI_TriangleSerializableArray();
  m.slotsBeforePostprocessing = create_SI_QuadrilateralSerializableArray();
  m.slotsAfterPostprocessing = create_SI_QuadrilateralSerializableArray();
  m.perSlotSubEmRoi = create_SI_QuadrilateralSerializableArray();
  m.perSlotAboveSubEmRoi = create_SI_QuadrilateralSerializableArray();
  m.perSlotFollowROI = create_SI_QuadrilateralSerializableArray();
  m.perSlotOncomingROI = create_SI_QuadrilateralSerializableArray();
  m.inflatedEgoShape = create_SI_EgoShapePolygonSerializable();
  m.slot1InSlotCoordinates = create_SI_TransformedScenarioSerializable();
  m.dynObjClassifierROI = create_SI_QuadrilateralSerializable();
  m.dynObjClassifierROI2 = create_SI_QuadrilateralSerializable();
  m.slotCostFunctionData = create_SI_SlotCostFunDataPerSlotSerializable();
  return m;
}

#endif // SI_LOW_PLOT_DATA_C_H_
