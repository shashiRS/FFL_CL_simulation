//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef SI_PARKING_BOX_SERIALIZABLE_C_H_
#define SI_PARKING_BOX_SERIALIZABLE_C_H_

#include "Platform_Types.h"
#include "si/slot_coordinates_m_serializable_c.h"
#include "si/parking_scenario_types_c.h"
#include "si/parking_scenario_side_types_c.h"
#include "si/parking_box_delimiter_c.h"
#include "si/virtual_line_serializable_c.h"
#include "cml/vec2_df_pod_c.h"
#include "eco/memset_c.h"

/// description of potential parking boxes
typedef struct
{
    ///@range{0,65535}
    ///ID of the parking box
    uint16 parkingBoxID_nu;
    ///@unit{m}
    ///vertices describing the parking box polygon
    SI_SlotCoordinates_mSerializable slotCoordinates_m;
    ///@unit{Percent}
    ///@range{0,100}
    ///existence probability of the parking box
    uint8 existenceProb_perc;
    ///@range{0,10}
    ///type of parking sccenario associated with this parking box
    SI_ParkingScenarioTypes parkingScenario_nu;
    ///@range{0,3}
    ///marks which side of the road is the parking scenario
    SI_ParkingScenarioSideTypes parkingScenarioSide_nu;
    ///@unit{nu}
    ///delimiter of a parking box
    SI_ParkingBoxDelimiter delimiters[8];
    ///@range{0,255}
    ///number of valid entries in delimiter list
    uint8 numValidDelimiters_nu;
    ///@range{0,255}
    ///number of virtual lines for this parking box
    uint8 numVirtualLines_nu;
    ///@unit{nu}
    ///virtual line constructed to facilitate a smooth orientation alignment of the parked vehicle
    SI_VirtualLineSerializable virtualLines[4];
    uint16 groupID_nu;
    uint8 priority_nu;
    ///the edge of the parking box on the road side
    CML_Vec2Df_POD parkingBoxRoadSideEdge[2];
    ///boolean showing if parkingBoxRoadSideEdge value had been filled with valid data
    boolean hasValueParkingBoxRoadSideEdge;
    ///the road side edge of the CNN parking box
    CML_Vec2Df_POD cnnBoxRoadSideEdge[2];
    ///boolean showing if cnnBoxRoadSideEdge value had been filled with valid data
    boolean hasValueCnnBoxRoadSideEdge;
} SI_ParkingBoxSerializable;

inline SI_ParkingBoxSerializable create_SI_ParkingBoxSerializable(void)
{
  SI_ParkingBoxSerializable m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.parkingBoxID_nu = 65535U;
  m.slotCoordinates_m = create_SI_SlotCoordinates_mSerializable();
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.delimiters) / sizeof(m.delimiters[0])); ++i)
    {
      m.delimiters[i] = create_SI_ParkingBoxDelimiter();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.virtualLines) / sizeof(m.virtualLines[0])); ++i)
    {
      m.virtualLines[i] = create_SI_VirtualLineSerializable();
    }
  }
  m.groupID_nu = 65535U;
  m.priority_nu = 255U;
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.parkingBoxRoadSideEdge) / sizeof(m.parkingBoxRoadSideEdge[0])); ++i)
    {
      m.parkingBoxRoadSideEdge[i] = create_CML_Vec2Df_POD();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.cnnBoxRoadSideEdge) / sizeof(m.cnnBoxRoadSideEdge[0])); ++i)
    {
      m.cnnBoxRoadSideEdge[i] = create_CML_Vec2Df_POD();
    }
  }
  return m;
}

#endif // SI_PARKING_BOX_SERIALIZABLE_C_H_
