//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef SI_PULL_CORNER_POLY_C_H_
#define SI_PULL_CORNER_POLY_C_H_

#include "si/quadrilateral_serializable_c.h"
#include "Platform_Types.h"
#include "eco/memset_c.h"

/// @brief Corner pulling polygon.
typedef struct
{
    ///@brief Rectangular RoI centered around the front left corner of the slot.
    SI_QuadrilateralSerializable fl;
    ///@brief Rectangular RoI centered around the front right corner of the slot.
    SI_QuadrilateralSerializable fr;
    ///@brief RoI for curb alignment.
    SI_QuadrilateralSerializable curb;
    ///@unit{nu}
    ///@brief Defines whether front left RoI is on or not.
    boolean flOn_nu;
    ///@unit{nu}
    ///@brief Axis aligned bounding box around the RoI for curb alignment.
    boolean frOn_nu;
    ///@range{0,3.4028237e+38}
    ///@unit{m}
    ///@brief Distance from the front left RoI.
    float32 flDist_m;
    ///@range{0,3.4028237e+38}
    ///@unit{m}
    ///@brief Distance from the front right RoI.
    float32 frDist_m;
} SI_PullCornerPoly;

inline SI_PullCornerPoly create_SI_PullCornerPoly(void)
{
  SI_PullCornerPoly m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.fl = create_SI_QuadrilateralSerializable();
  m.fr = create_SI_QuadrilateralSerializable();
  m.curb = create_SI_QuadrilateralSerializable();
  m.flOn_nu = 0;
  m.frOn_nu = 0;
  m.flDist_m = 0.0F;
  m.frDist_m = 0.0F;
  return m;
}

#endif // SI_PULL_CORNER_POLY_C_H_
