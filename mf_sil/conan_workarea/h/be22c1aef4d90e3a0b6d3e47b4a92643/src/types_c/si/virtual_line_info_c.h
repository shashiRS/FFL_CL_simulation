//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef SI_VIRTUAL_LINE_INFO_C_H_
#define SI_VIRTUAL_LINE_INFO_C_H_

#include "lsm_geoml/size_type_c.h"
#include "eco/memset_c.h"

/// @brief Aggregating information relevant for virtual lines in one structure.
typedef struct
{
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief Describes to which parking slot does the virtual line belong.
    LSM_GEOML_size_type parkingSlotId_nu;
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief Describes to which delimiter does the virtual line belong.
    LSM_GEOML_size_type delimiterId_nu;
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief Describes to which static structure does the virtual line belong.
    LSM_GEOML_size_type staticStructureId_nu;
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief Defines the ID of the virtual line.
    LSM_GEOML_size_type virtualLineId_nu;
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief Defines the ID of the virtual line"s starting vertex.
    LSM_GEOML_size_type startVertex_nu;
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief Defines the ID of the virtual line"s starting vertex.
    LSM_GEOML_size_type endVertex_nu;
} SI_VirtualLineInfo;

inline SI_VirtualLineInfo create_SI_VirtualLineInfo(void)
{
  SI_VirtualLineInfo m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.parkingSlotId_nu = 65535U;
  m.delimiterId_nu = 65535U;
  m.staticStructureId_nu = 65535U;
  m.virtualLineId_nu = 65535U;
  m.startVertex_nu = 65535U;
  m.endVertex_nu = 65535U;
  return m;
}

#endif // SI_VIRTUAL_LINE_INFO_C_H_
