//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_TP_TRAJ_PLAN_VISU_PORT_C_H_
#define AP_TP_TRAJ_PLAN_VISU_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "ap_tp/planned_geometric_path_output_c.h"
#include "ap_tp/driving_resistance_c.h"
#include "eco/memset_c.h"

/// 
typedef struct
{
    ///@unit{eco.AlgoInterfaceVersionNumber}
    ///
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ///@unit{eco.SignalHeader}
    ///
    ECO_SignalHeader sSigHeader;
    ///@range{0,1023}
    ///@unit{---}
    ///index of current pose along the planned path @min: 0 @max: 1023 @unit: ---
    uint16 currentPoseIdx_nu;
    ///@range{0,1023}
    ///@unit{---}
    ///number of valid positions in the planned path @min: 0 @max: 1023 @unit: ---
    uint16 numValidPoses_nu;
    ///@range{0,255}
    ///@unit{---}
    ///number of valid positions in the planned path @min: 0 @max: 255 @unit: ---
    uint8 numValidSegments;
    ///@range{-1000,1000}
    ///@unit{m}
    ///x coordinates of the whole path @min: -1000 @max: 1000 @unit: m
    float32 plannedPathXPos_m[1000];
    ///@range{-1000,1000}
    ///@unit{m}
    ///y coordinates of the whole path @min: -1000 @max: 1000 @unit: m
    float32 plannedPathYPos_m[1000];
    ///@unit{nu}
    ///None @min: 0 @max: 0 @unit: nu
    AP_TP_PlannedGeometricPathOutput plannedGeometricPath[25];
    ///Driving resistance distance and type information per wheel.
    AP_TP_DrivingResistance drivingResistance[4];
} AP_TP_TrajPlanVisuPort;

inline AP_TP_TrajPlanVisuPort create_AP_TP_TrajPlanVisuPort(void)
{
  AP_TP_TrajPlanVisuPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.plannedGeometricPath) / sizeof(m.plannedGeometricPath[0])); ++i)
    {
      m.plannedGeometricPath[i] = create_AP_TP_PlannedGeometricPathOutput();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.drivingResistance) / sizeof(m.drivingResistance[0])); ++i)
    {
      m.drivingResistance[i] = create_AP_TP_DrivingResistance();
    }
  }
  return m;
}

#endif // AP_TP_TRAJ_PLAN_VISU_PORT_C_H_
