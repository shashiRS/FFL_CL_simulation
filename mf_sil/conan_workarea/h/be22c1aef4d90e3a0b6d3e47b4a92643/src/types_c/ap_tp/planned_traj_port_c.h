//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_TP_PLANNED_TRAJ_PORT_C_H_
#define AP_TP_PLANNED_TRAJ_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "ap_tp/planned_traj_type_c.h"
#include "Platform_Types.h"
#include "ap_tp/driving_resistance_c.h"
#include "ap_tp/planned_traj_c.h"
#include "eco/memset_c.h"

/// From TrajectoryPlanning
typedef struct
{
    ///@unit{eco.AlgoInterfaceVersionNumber}
    ///
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ///@unit{eco.SignalHeader}
    ///
    ECO_SignalHeader sSigHeader;
    ///@range{0,7}
    ///The type of the output trajectory (used to trigger certain behavior in controller).
    AP_TP_PlannedTrajType trajType_nu;
    ///Define the requested driving direction.
    boolean drivingForwardReq_nu;
    ///Flag whether the trajectory data is valid.
    boolean trajValid_nu;
    ///Flag that a new segment (e.g. new stroke) was calculated.
    boolean newSegmentStarted_nu;
    ///Flag that the current segment is the final segment of the current trajectory
    boolean isLastSegment_nu;
    ///@range{0,255}
    ///If there is a discontinuity in either x, y or yaw within the trajectory this will indicate the index of the point after which the discontinuity happens
    uint8 stepInTrajAfterIdx_nu;
    ///@unit{nu}
    ///Driving resistance distance and type information per wheel.
    AP_TP_DrivingResistance drivingResistance[4];
    ///@range{0,MAX_NUM_TRAJ_CTRL_POINTS}
    ///Number of vali d and unique trajectory points in "plannedTraj". (e.g. if this value is 5 only the first 5 trajectory points inside "plannedTraj" are unique; the 6th,7th,... point would be equal to the 5th point)
    uint8 numValidCtrlPoints_nu;
    ///@unit{nu}
    ///Calculated Trajectory from the Trajectory Planning with EM based velocity limit.
    AP_TP_PlannedTraj plannedTraj[20];
} AP_TP_PlannedTrajPort;

inline AP_TP_PlannedTrajPort create_AP_TP_PlannedTrajPort(void)
{
  AP_TP_PlannedTrajPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  m.trajType_nu = AP_TP_PLANNED_TRAJ_TYPE_MAX_NUM_PLANNED_TRAJ_TYPES;
  m.stepInTrajAfterIdx_nu = 255U;
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.drivingResistance) / sizeof(m.drivingResistance[0])); ++i)
    {
      m.drivingResistance[i] = create_AP_TP_DrivingResistance();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.plannedTraj) / sizeof(m.plannedTraj[0])); ++i)
    {
      m.plannedTraj[i] = create_AP_TP_PlannedTraj();
    }
  }
  return m;
}

#endif // AP_TP_PLANNED_TRAJ_PORT_C_H_
