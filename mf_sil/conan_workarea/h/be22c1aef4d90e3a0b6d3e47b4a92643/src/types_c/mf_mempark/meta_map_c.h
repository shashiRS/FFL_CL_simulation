//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef MF_MEMPARK_META_MAP_C_H_
#define MF_MEMPARK_META_MAP_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "mf_mempark/parking_slot_c.h"
#include "mf_mempark/parking_trajectory_c.h"
#include "eco/memset_c.h"

/// This structure represents a MetaMap which contains arrays of Parking Slots and Parking Trajectories
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    uint8 correspondingMapID;
    uint8 numValidParkingSlots;
    MF_MEMPARK_ParkingSlot parkingSlots[1];
    uint8 numValidTrajectories;
    MF_MEMPARK_ParkingTrajectory parkingTrajectories[1];
} MF_MEMPARK_MetaMap;

inline MF_MEMPARK_MetaMap create_MF_MEMPARK_MetaMap(void)
{
  MF_MEMPARK_MetaMap m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.parkingSlots) / sizeof(m.parkingSlots[0])); ++i)
    {
      m.parkingSlots[i] = create_MF_MEMPARK_ParkingSlot();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.parkingTrajectories) / sizeof(m.parkingTrajectories[0])); ++i)
    {
      m.parkingTrajectories[i] = create_MF_MEMPARK_ParkingTrajectory();
    }
  }
  return m;
}

#endif // MF_MEMPARK_META_MAP_C_H_
