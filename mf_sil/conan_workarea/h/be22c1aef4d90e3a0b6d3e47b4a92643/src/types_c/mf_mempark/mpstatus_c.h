//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef MF_MEMPARK_MPSTATUS_C_H_
#define MF_MEMPARK_MPSTATUS_C_H_

#include "Platform_Types.h"
#include "mf_mempark/memorized_slot_c.h"
#include "mf_mempark/memorized_parking_status_c.h"
#include "mf_mempark/training_status_c.h"
#include "mf_mempark/localization_status_c.h"
#include "mf_mempark/user_update_request_status_c.h"
#include "eco/memset_c.h"

/// The elements for Memory Parking Status
typedef struct
{
    uint8 numStoredMemoryParkingSlots_nu;
    MF_MEMPARK_MemorizedSlot memorizedParkingSlots[10];
    MF_MEMPARK_MemorizedParkingStatus memoryParkingState;
    MF_MEMPARK_TrainingStatus trainingStatus;
    MF_MEMPARK_LocalizationStatus localizationStatus;
    MF_MEMPARK_UserUpdateRequestStatus userUpdateRequestStatus;
} MF_MEMPARK_MPStatus;

inline MF_MEMPARK_MPStatus create_MF_MEMPARK_MPStatus(void)
{
  MF_MEMPARK_MPStatus m;
  (void) ECO_memset (&m, 0, sizeof(m));
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.memorizedParkingSlots) / sizeof(m.memorizedParkingSlots[0])); ++i)
    {
      m.memorizedParkingSlots[i] = create_MF_MEMPARK_MemorizedSlot();
    }
  }
  return m;
}

#endif // MF_MEMPARK_MPSTATUS_C_H_
