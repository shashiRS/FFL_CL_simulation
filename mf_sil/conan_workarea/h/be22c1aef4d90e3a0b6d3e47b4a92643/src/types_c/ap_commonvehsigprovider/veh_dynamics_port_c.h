//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_COMMONVEHSIGPROVIDER_VEH_DYNAMICS_PORT_C_H_
#define AP_COMMONVEHSIGPROVIDER_VEH_DYNAMICS_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "eco/memset_c.h"

/// Measurements describing general vehicle dynamics
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///@unit{rad/s}
    ///@range{-3.2767,3.2767}
    ///vehicles yaw rate around z-axis. (VW Uncalibrated)
    float32 yawRate_radps;
    ///@unit{rad/s}
    ///@range{-0.1785471824790199,0.17837264955382048}
    ///Estimatet offset of yaw rate calculated in ESP.
    float32 yawRateOffset_radps;
    ///@unit{rad/s}
    ///pitch rate
    float32 pitchRate_radps;
    ///@unit{rad/s}
    ///pitch rate offset
    float32 pitchRateOffset_radps;
    ///@unit{rad/s}
    ///roll rate
    float32 rollRate_radps;
    ///@unit{rad/s}
    ///roll rate offset
    float32 rollRateOffset_radps;
    ///@unit{m/s^2}
    ///@range{-10,10}
    ///vehicle acceleration on y-axis (VW calibrated)
    float32 lateralAcceleration_mps2;
    ///@unit{m/s^2}
    ///@range{-0.3,0.3}
    ///lateral acceleration signal offset estimated by signal provider. (to calculate raw value signal is calibrated) Lat_acc = raw_value - offset
    float32 lateralAccelerationOffset_mps2;
    ///@unit{m/s^2}
    ///@range{-10,10}
    ///vehicle acceleration on x-axis (VW calibrated)
    float32 longitudinalAcceleration_mps2;
    ///@unit{m/s^2}
    ///@range{-3.9375,3.9375}
    ///longitudinal acceleration signal offset estimated by signal provider. (to calculate raw value signal is calibrated) Long_acc = raw_value - offset
    float32 longitudinalAccelerationOffset_mps2;
    ///@unit{nu}
    ///vertical acceleration
    float32 verticalAcceleration_mps2;
    ///@unit{nu}
    ///vertical acceleration offset
    float32 verticalAccelerationOffset_mps2;
    ///Qualifier-Bit of yaw rate signal
    boolean yawRate_QF_nu;
    ///Qualifier-Bit of pitch rate signal
    boolean pitchRate_QF_nu;
    ///Qualifier-Bit of roll rate signal
    boolean rollRate_QF_nu;
    ///Qualifier-Bit of lateral acceleration signal
    boolean lateralAcceleration_QF_nu;
    ///Qualifier-Bit of longitudinal signal
    boolean longitudinalAcceleration_QF_nu;
    ///Qualifier-Bit of vertical signal
    boolean verticalAcceleration_QF_nu;
} AP_COMMONVEHSIGPROVIDER_VehDynamicsPort;

inline AP_COMMONVEHSIGPROVIDER_VehDynamicsPort create_AP_COMMONVEHSIGPROVIDER_VehDynamicsPort(void)
{
  AP_COMMONVEHSIGPROVIDER_VehDynamicsPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  return m;
}

#endif // AP_COMMONVEHSIGPROVIDER_VEH_DYNAMICS_PORT_C_H_
