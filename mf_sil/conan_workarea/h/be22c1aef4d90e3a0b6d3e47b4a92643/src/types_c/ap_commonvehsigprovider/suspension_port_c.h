//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_COMMONVEHSIGPROVIDER_SUSPENSION_PORT_C_H_
#define AP_COMMONVEHSIGPROVIDER_SUSPENSION_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "eco/memset_c.h"

/// Measurements from the suspension
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///@range{-0.254,0.254}
    ///@unit{m}
    ///calibrated suspension travel front left
    float32 suspensionTravelFL_m;
    ///@range{-0.254,0.254}
    ///@unit{m}
    ///calibrated suspension travel front right
    float32 suspensionTravelFR_m;
    ///@range{-0.254,0.254}
    ///@unit{m}
    ///calibrated suspension travel rear left
    float32 suspensionTravelRL_m;
    ///@range{-0.254,0.254}
    ///@unit{m}
    ///calibrated suspension travel rear right
    float32 suspensionTravelRR_m;
    ///@range{0,100}
    ///@unit{%}
    ///raw suspension travel front left
    float32 suspensionTravelFL_pct;
    ///@range{0,100}
    ///@unit{%}
    ///raw suspension travel front right
    float32 suspensionTravelFR_pct;
    ///@range{0,100}
    ///@unit{%}
    ///raw suspension travel rear left
    float32 suspensionTravelRL_pct;
    ///@range{0,100}
    ///@unit{%}
    ///raw suspension travel rear right
    float32 suspensionTravelRR_pct;
    ///@unit{boolean}
    ///None
    boolean isSuspensionCalibrated;
    ///@unit{boolean}
    ///None
    boolean suspensionTravelFL_QF;
    ///@unit{boolean}
    ///None
    boolean suspensionTravelFR_QF;
    ///@unit{boolean}
    ///None
    boolean suspensionTravelRL_QF;
    ///@unit{boolean}
    ///None
    boolean suspensionTravelRR_QF;
} AP_COMMONVEHSIGPROVIDER_SuspensionPort;

inline AP_COMMONVEHSIGPROVIDER_SuspensionPort create_AP_COMMONVEHSIGPROVIDER_SuspensionPort(void)
{
  AP_COMMONVEHSIGPROVIDER_SuspensionPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  return m;
}

#endif // AP_COMMONVEHSIGPROVIDER_SUSPENSION_PORT_C_H_
