//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_TRJCTL_DRIVING_RESISTANCE_PORT_C_H_
#define AP_TRJCTL_DRIVING_RESISTANCE_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "ap_trjctl/drv_res_c.h"
#include "eco/memset_c.h"

/// Information about driving resistance (e.g. for driving resistance on planned trajectory)
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///@unit{nu}
    ///Wheel specific driving resistance to cover curbstone and wheel stopper scenarios
    AP_TRJCTL_DrvRes drivingResistance_FL;
    ///@unit{nu}
    ///Wheel specific driving resistance to cover curbstone and wheel stopper scenarios
    AP_TRJCTL_DrvRes drivingResistance_RL;
    ///@unit{nu}
    ///Wheel specific driving resistance to cover curbstone and wheel stopper scenarios
    AP_TRJCTL_DrvRes drivingResistance_RR;
    ///@unit{nu}
    ///Wheel specific driving resistance to cover curbstone and wheel stopper scenarios
    AP_TRJCTL_DrvRes drivingResistance_FR;
} AP_TRJCTL_DrivingResistancePort;

inline AP_TRJCTL_DrivingResistancePort create_AP_TRJCTL_DrivingResistancePort(void)
{
  AP_TRJCTL_DrivingResistancePort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  m.drivingResistance_FL = create_AP_TRJCTL_DrvRes();
  m.drivingResistance_RL = create_AP_TRJCTL_DrvRes();
  m.drivingResistance_RR = create_AP_TRJCTL_DrvRes();
  m.drivingResistance_FR = create_AP_TRJCTL_DrvRes();
  return m;
}

#endif // AP_TRJCTL_DRIVING_RESISTANCE_PORT_C_H_
