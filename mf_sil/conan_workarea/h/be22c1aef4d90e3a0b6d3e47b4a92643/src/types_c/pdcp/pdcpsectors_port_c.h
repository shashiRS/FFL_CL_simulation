//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef PDCP_PDCPSECTORS_PORT_C_H_
#define PDCP_PDCPSECTORS_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "pdcp/sector_info_c.h"
#include "Platform_Types.h"
#include "eco/memset_c.h"

/// Signals from PDC Processing containg the information about sectors
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///@unit{nu}
    ///Information for the PDC sectors from the front side (numbering is done from left side towards right side)
    PDCP_SectorInfo sectorsFront[4];
    ///@unit{nu}
    ///Information for the PDC sectors from the rear side (numbering is done from left side towards right side)
    PDCP_SectorInfo sectorsRear[4];
    ///@unit{nu}
    ///Information for the PDC sectors from the left side (numbering is done from front towards rear)
    PDCP_SectorInfo sectorsLeft[4];
    ///@unit{nu}
    ///Information for the PDC sectors from the right side (numbering is done from front towards rear)
    PDCP_SectorInfo sectorsRight[4];
    ///The x coordinates of the inner sectors contour
    float32 PDC_P_SECTOR_INNER_COORDS_X_M[16];
    ///The y coordinates of the inner sectors contour
    float32 PDC_P_SECTOR_INNER_COORDS_Y_M[16];
    ///The x coordinates of the outer sectors contour
    float32 PDC_P_SECTOR_OUTER_COORDS_X_M[16];
    ///The y coordinates of the outer sectors contour
    float32 PDC_P_SECTOR_OUTER_COORDS_Y_M[16];
} PDCP_PDCPSectorsPort;

inline PDCP_PDCPSectorsPort create_PDCP_PDCPSectorsPort(void)
{
  PDCP_PDCPSectorsPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.sectorsFront) / sizeof(m.sectorsFront[0])); ++i)
    {
      m.sectorsFront[i] = create_PDCP_SectorInfo();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.sectorsRear) / sizeof(m.sectorsRear[0])); ++i)
    {
      m.sectorsRear[i] = create_PDCP_SectorInfo();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.sectorsLeft) / sizeof(m.sectorsLeft[0])); ++i)
    {
      m.sectorsLeft[i] = create_PDCP_SectorInfo();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.sectorsRight) / sizeof(m.sectorsRight[0])); ++i)
    {
      m.sectorsRight[i] = create_PDCP_SectorInfo();
    }
  }
  return m;
}

#endif // PDCP_PDCPSECTORS_PORT_C_H_
