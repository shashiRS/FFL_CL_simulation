// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lsm_vedodo/odo_debug_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto;
namespace pb {
namespace lsm_vedodo {
namespace odo_debug_port {
class OdoDebugPort;
class OdoDebugPortDefaultTypeInternal;
extern OdoDebugPortDefaultTypeInternal _OdoDebugPort_default_instance_;
class OdoDebugPort_array_port;
class OdoDebugPort_array_portDefaultTypeInternal;
extern OdoDebugPort_array_portDefaultTypeInternal _OdoDebugPort_array_port_default_instance_;
}  // namespace odo_debug_port
}  // namespace lsm_vedodo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* Arena::CreateMaybeMessage<::pb::lsm_vedodo::odo_debug_port::OdoDebugPort>(Arena*);
template<> ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port* Arena::CreateMaybeMessage<::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace lsm_vedodo {
namespace odo_debug_port {

// ===================================================================

class OdoDebugPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.lsm_vedodo.odo_debug_port.OdoDebugPort) */ {
 public:
  OdoDebugPort();
  virtual ~OdoDebugPort();

  OdoDebugPort(const OdoDebugPort& from);
  OdoDebugPort(OdoDebugPort&& from) noexcept
    : OdoDebugPort() {
    *this = ::std::move(from);
  }

  inline OdoDebugPort& operator=(const OdoDebugPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdoDebugPort& operator=(OdoDebugPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdoDebugPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdoDebugPort* internal_default_instance() {
    return reinterpret_cast<const OdoDebugPort*>(
               &_OdoDebugPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OdoDebugPort& a, OdoDebugPort& b) {
    a.Swap(&b);
  }
  inline void Swap(OdoDebugPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdoDebugPort* New() const final {
    return CreateMaybeMessage<OdoDebugPort>(nullptr);
  }

  OdoDebugPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdoDebugPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdoDebugPort& from);
  void MergeFrom(const OdoDebugPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdoDebugPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.lsm_vedodo.odo_debug_port.OdoDebugPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto);
    return ::descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistancePerStepWheelMFieldNumber = 708,
    kTicsIncrement4NuFieldNumber = 1072,
    kDebugIntFieldNumber = 1230,
    kDebugFloatFieldNumber = 2041,
    kSSigHeaderFieldNumber = 1033,
    kEstimYawRateFRRRRadpsFieldNumber = 4062,
    kSteeringWheelAngleOffsetRadFieldNumber = 35,
    kEstimVelRearAxleFRRLMpsFieldNumber = 361,
    kYawAnglePerStepYawRateRadFieldNumber = 459,
    kDrivingDirectionGearNuFieldNumber = 597,
    kYawAnglePerStepWhlDistRearRadFieldNumber = 712,
    kOdoAccelByWheelMps2FieldNumber = 844,
    kEstimVelRearAxleFLFRMpsFieldNumber = 845,
    kYawAnglePerStepWhlDistFrontRadFieldNumber = 1083,
    kEstimVelRearAxleFLRLMpsFieldNumber = 1178,
    kSteerAngleFLFieldNumber = 1414,
    kSteerAngleFRFieldNumber = 1657,
    kEstimYawRateRLRRRadpsFieldNumber = 1780,
    kSteeringWheelAngleOffsetCalibratedRadFieldNumber = 2088,
    kUiVersionNumberFieldNumber = 2124,
    kDistancePerStepRAMFieldNumber = 2132,
    kDistanceFAMFieldNumber = 2177,
    kSteerAngleCTRFieldNumber = 2258,
    kDistancePerStepFAMFieldNumber = 2306,
    kYawAnglePerStepAckermannRadFieldNumber = 2424,
    kDistanceRAMFieldNumber = 2519,
    kEstimYawRateFRRLRadpsFieldNumber = 2605,
    kEstimVelRearAxleFRRRMpsFieldNumber = 2715,
    kEstimYawRateFLRLRadpsFieldNumber = 2724,
    kEstimYawRateFLFRRadpsFieldNumber = 3470,
    kEstimVelRearAxleRLRRMpsFieldNumber = 3505,
    kYawRateOffsetRadpsFieldNumber = 3529,
    kYawAnglePerStepStandstillSteerRadFieldNumber = 3549,
    kYawRateOffsetCalibratedRadpsFieldNumber = 3810,
    kEstimYawRateFLRRRadpsFieldNumber = 3927,
    kEstimVelRearAxleFLRRMpsFieldNumber = 3944,
  };
  // repeated float distancePerStepWheel_m = 708;
  int distanceperstepwheel_m_size() const;
  private:
  int _internal_distanceperstepwheel_m_size() const;
  public:
  void clear_distanceperstepwheel_m();
  private:
  float _internal_distanceperstepwheel_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_distanceperstepwheel_m() const;
  void _internal_add_distanceperstepwheel_m(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_distanceperstepwheel_m();
  public:
  float distanceperstepwheel_m(int index) const;
  void set_distanceperstepwheel_m(int index, float value);
  void add_distanceperstepwheel_m(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      distanceperstepwheel_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_distanceperstepwheel_m();

  // repeated sint32 ticsIncrement_4_nu = 1072;
  int ticsincrement_4_nu_size() const;
  private:
  int _internal_ticsincrement_4_nu_size() const;
  public:
  void clear_ticsincrement_4_nu();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ticsincrement_4_nu(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ticsincrement_4_nu() const;
  void _internal_add_ticsincrement_4_nu(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ticsincrement_4_nu();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ticsincrement_4_nu(int index) const;
  void set_ticsincrement_4_nu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ticsincrement_4_nu(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ticsincrement_4_nu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ticsincrement_4_nu();

  // repeated sint32 debugInt = 1230;
  int debugint_size() const;
  private:
  int _internal_debugint_size() const;
  public:
  void clear_debugint();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_debugint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_debugint() const;
  void _internal_add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_debugint();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 debugint(int index) const;
  void set_debugint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      debugint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_debugint();

  // repeated float debugFloat = 2041;
  int debugfloat_size() const;
  private:
  int _internal_debugfloat_size() const;
  public:
  void clear_debugfloat();
  private:
  float _internal_debugfloat(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_debugfloat() const;
  void _internal_add_debugfloat(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_debugfloat();
  public:
  float debugfloat(int index) const;
  void set_debugfloat(int index, float value);
  void add_debugfloat(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      debugfloat() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_debugfloat();

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float estimYawRateFRRR_radps = 4062;
  bool has_estimyawratefrrr_radps() const;
  private:
  bool _internal_has_estimyawratefrrr_radps() const;
  public:
  void clear_estimyawratefrrr_radps();
  float estimyawratefrrr_radps() const;
  void set_estimyawratefrrr_radps(float value);
  private:
  float _internal_estimyawratefrrr_radps() const;
  void _internal_set_estimyawratefrrr_radps(float value);
  public:

  // optional float steeringWheelAngleOffset_rad = 35;
  bool has_steeringwheelangleoffset_rad() const;
  private:
  bool _internal_has_steeringwheelangleoffset_rad() const;
  public:
  void clear_steeringwheelangleoffset_rad();
  float steeringwheelangleoffset_rad() const;
  void set_steeringwheelangleoffset_rad(float value);
  private:
  float _internal_steeringwheelangleoffset_rad() const;
  void _internal_set_steeringwheelangleoffset_rad(float value);
  public:

  // optional float estimVelRearAxleFRRL_mps = 361;
  bool has_estimvelrearaxlefrrl_mps() const;
  private:
  bool _internal_has_estimvelrearaxlefrrl_mps() const;
  public:
  void clear_estimvelrearaxlefrrl_mps();
  float estimvelrearaxlefrrl_mps() const;
  void set_estimvelrearaxlefrrl_mps(float value);
  private:
  float _internal_estimvelrearaxlefrrl_mps() const;
  void _internal_set_estimvelrearaxlefrrl_mps(float value);
  public:

  // optional float yawAnglePerStepYawRate_rad = 459;
  bool has_yawangleperstepyawrate_rad() const;
  private:
  bool _internal_has_yawangleperstepyawrate_rad() const;
  public:
  void clear_yawangleperstepyawrate_rad();
  float yawangleperstepyawrate_rad() const;
  void set_yawangleperstepyawrate_rad(float value);
  private:
  float _internal_yawangleperstepyawrate_rad() const;
  void _internal_set_yawangleperstepyawrate_rad(float value);
  public:

  // optional sint32 drivingDirectionGear_nu = 597;
  bool has_drivingdirectiongear_nu() const;
  private:
  bool _internal_has_drivingdirectiongear_nu() const;
  public:
  void clear_drivingdirectiongear_nu();
  ::PROTOBUF_NAMESPACE_ID::int32 drivingdirectiongear_nu() const;
  void set_drivingdirectiongear_nu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drivingdirectiongear_nu() const;
  void _internal_set_drivingdirectiongear_nu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float yawAnglePerStepWhlDistRear_rad = 712;
  bool has_yawangleperstepwhldistrear_rad() const;
  private:
  bool _internal_has_yawangleperstepwhldistrear_rad() const;
  public:
  void clear_yawangleperstepwhldistrear_rad();
  float yawangleperstepwhldistrear_rad() const;
  void set_yawangleperstepwhldistrear_rad(float value);
  private:
  float _internal_yawangleperstepwhldistrear_rad() const;
  void _internal_set_yawangleperstepwhldistrear_rad(float value);
  public:

  // optional float odoAccelByWheel_mps2 = 844;
  bool has_odoaccelbywheel_mps2() const;
  private:
  bool _internal_has_odoaccelbywheel_mps2() const;
  public:
  void clear_odoaccelbywheel_mps2();
  float odoaccelbywheel_mps2() const;
  void set_odoaccelbywheel_mps2(float value);
  private:
  float _internal_odoaccelbywheel_mps2() const;
  void _internal_set_odoaccelbywheel_mps2(float value);
  public:

  // optional float estimVelRearAxleFLFR_mps = 845;
  bool has_estimvelrearaxleflfr_mps() const;
  private:
  bool _internal_has_estimvelrearaxleflfr_mps() const;
  public:
  void clear_estimvelrearaxleflfr_mps();
  float estimvelrearaxleflfr_mps() const;
  void set_estimvelrearaxleflfr_mps(float value);
  private:
  float _internal_estimvelrearaxleflfr_mps() const;
  void _internal_set_estimvelrearaxleflfr_mps(float value);
  public:

  // optional float yawAnglePerStepWhlDistFront_rad = 1083;
  bool has_yawangleperstepwhldistfront_rad() const;
  private:
  bool _internal_has_yawangleperstepwhldistfront_rad() const;
  public:
  void clear_yawangleperstepwhldistfront_rad();
  float yawangleperstepwhldistfront_rad() const;
  void set_yawangleperstepwhldistfront_rad(float value);
  private:
  float _internal_yawangleperstepwhldistfront_rad() const;
  void _internal_set_yawangleperstepwhldistfront_rad(float value);
  public:

  // optional float estimVelRearAxleFLRL_mps = 1178;
  bool has_estimvelrearaxleflrl_mps() const;
  private:
  bool _internal_has_estimvelrearaxleflrl_mps() const;
  public:
  void clear_estimvelrearaxleflrl_mps();
  float estimvelrearaxleflrl_mps() const;
  void set_estimvelrearaxleflrl_mps(float value);
  private:
  float _internal_estimvelrearaxleflrl_mps() const;
  void _internal_set_estimvelrearaxleflrl_mps(float value);
  public:

  // optional float steerAngleFL = 1414;
  bool has_steeranglefl() const;
  private:
  bool _internal_has_steeranglefl() const;
  public:
  void clear_steeranglefl();
  float steeranglefl() const;
  void set_steeranglefl(float value);
  private:
  float _internal_steeranglefl() const;
  void _internal_set_steeranglefl(float value);
  public:

  // optional float steerAngleFR = 1657;
  bool has_steeranglefr() const;
  private:
  bool _internal_has_steeranglefr() const;
  public:
  void clear_steeranglefr();
  float steeranglefr() const;
  void set_steeranglefr(float value);
  private:
  float _internal_steeranglefr() const;
  void _internal_set_steeranglefr(float value);
  public:

  // optional float estimYawRateRLRR_radps = 1780;
  bool has_estimyawraterlrr_radps() const;
  private:
  bool _internal_has_estimyawraterlrr_radps() const;
  public:
  void clear_estimyawraterlrr_radps();
  float estimyawraterlrr_radps() const;
  void set_estimyawraterlrr_radps(float value);
  private:
  float _internal_estimyawraterlrr_radps() const;
  void _internal_set_estimyawraterlrr_radps(float value);
  public:

  // optional float steeringWheelAngleOffsetCalibrated_rad = 2088;
  bool has_steeringwheelangleoffsetcalibrated_rad() const;
  private:
  bool _internal_has_steeringwheelangleoffsetcalibrated_rad() const;
  public:
  void clear_steeringwheelangleoffsetcalibrated_rad();
  float steeringwheelangleoffsetcalibrated_rad() const;
  void set_steeringwheelangleoffsetcalibrated_rad(float value);
  private:
  float _internal_steeringwheelangleoffsetcalibrated_rad() const;
  void _internal_set_steeringwheelangleoffsetcalibrated_rad(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float distancePerStepRA_m = 2132;
  bool has_distanceperstepra_m() const;
  private:
  bool _internal_has_distanceperstepra_m() const;
  public:
  void clear_distanceperstepra_m();
  float distanceperstepra_m() const;
  void set_distanceperstepra_m(float value);
  private:
  float _internal_distanceperstepra_m() const;
  void _internal_set_distanceperstepra_m(float value);
  public:

  // optional float distanceFA_m = 2177;
  bool has_distancefa_m() const;
  private:
  bool _internal_has_distancefa_m() const;
  public:
  void clear_distancefa_m();
  float distancefa_m() const;
  void set_distancefa_m(float value);
  private:
  float _internal_distancefa_m() const;
  void _internal_set_distancefa_m(float value);
  public:

  // optional float steerAngleCTR = 2258;
  bool has_steeranglectr() const;
  private:
  bool _internal_has_steeranglectr() const;
  public:
  void clear_steeranglectr();
  float steeranglectr() const;
  void set_steeranglectr(float value);
  private:
  float _internal_steeranglectr() const;
  void _internal_set_steeranglectr(float value);
  public:

  // optional float distancePerStepFA_m = 2306;
  bool has_distanceperstepfa_m() const;
  private:
  bool _internal_has_distanceperstepfa_m() const;
  public:
  void clear_distanceperstepfa_m();
  float distanceperstepfa_m() const;
  void set_distanceperstepfa_m(float value);
  private:
  float _internal_distanceperstepfa_m() const;
  void _internal_set_distanceperstepfa_m(float value);
  public:

  // optional float yawAnglePerStepAckermann_rad = 2424;
  bool has_yawangleperstepackermann_rad() const;
  private:
  bool _internal_has_yawangleperstepackermann_rad() const;
  public:
  void clear_yawangleperstepackermann_rad();
  float yawangleperstepackermann_rad() const;
  void set_yawangleperstepackermann_rad(float value);
  private:
  float _internal_yawangleperstepackermann_rad() const;
  void _internal_set_yawangleperstepackermann_rad(float value);
  public:

  // optional float distanceRA_m = 2519;
  bool has_distancera_m() const;
  private:
  bool _internal_has_distancera_m() const;
  public:
  void clear_distancera_m();
  float distancera_m() const;
  void set_distancera_m(float value);
  private:
  float _internal_distancera_m() const;
  void _internal_set_distancera_m(float value);
  public:

  // optional float estimYawRateFRRL_radps = 2605;
  bool has_estimyawratefrrl_radps() const;
  private:
  bool _internal_has_estimyawratefrrl_radps() const;
  public:
  void clear_estimyawratefrrl_radps();
  float estimyawratefrrl_radps() const;
  void set_estimyawratefrrl_radps(float value);
  private:
  float _internal_estimyawratefrrl_radps() const;
  void _internal_set_estimyawratefrrl_radps(float value);
  public:

  // optional float estimVelRearAxleFRRR_mps = 2715;
  bool has_estimvelrearaxlefrrr_mps() const;
  private:
  bool _internal_has_estimvelrearaxlefrrr_mps() const;
  public:
  void clear_estimvelrearaxlefrrr_mps();
  float estimvelrearaxlefrrr_mps() const;
  void set_estimvelrearaxlefrrr_mps(float value);
  private:
  float _internal_estimvelrearaxlefrrr_mps() const;
  void _internal_set_estimvelrearaxlefrrr_mps(float value);
  public:

  // optional float estimYawRateFLRL_radps = 2724;
  bool has_estimyawrateflrl_radps() const;
  private:
  bool _internal_has_estimyawrateflrl_radps() const;
  public:
  void clear_estimyawrateflrl_radps();
  float estimyawrateflrl_radps() const;
  void set_estimyawrateflrl_radps(float value);
  private:
  float _internal_estimyawrateflrl_radps() const;
  void _internal_set_estimyawrateflrl_radps(float value);
  public:

  // optional float estimYawRateFLFR_radps = 3470;
  bool has_estimyawrateflfr_radps() const;
  private:
  bool _internal_has_estimyawrateflfr_radps() const;
  public:
  void clear_estimyawrateflfr_radps();
  float estimyawrateflfr_radps() const;
  void set_estimyawrateflfr_radps(float value);
  private:
  float _internal_estimyawrateflfr_radps() const;
  void _internal_set_estimyawrateflfr_radps(float value);
  public:

  // optional float estimVelRearAxleRLRR_mps = 3505;
  bool has_estimvelrearaxlerlrr_mps() const;
  private:
  bool _internal_has_estimvelrearaxlerlrr_mps() const;
  public:
  void clear_estimvelrearaxlerlrr_mps();
  float estimvelrearaxlerlrr_mps() const;
  void set_estimvelrearaxlerlrr_mps(float value);
  private:
  float _internal_estimvelrearaxlerlrr_mps() const;
  void _internal_set_estimvelrearaxlerlrr_mps(float value);
  public:

  // optional float yawRateOffset_radps = 3529;
  bool has_yawrateoffset_radps() const;
  private:
  bool _internal_has_yawrateoffset_radps() const;
  public:
  void clear_yawrateoffset_radps();
  float yawrateoffset_radps() const;
  void set_yawrateoffset_radps(float value);
  private:
  float _internal_yawrateoffset_radps() const;
  void _internal_set_yawrateoffset_radps(float value);
  public:

  // optional float yawAnglePerStepStandstillSteer_rad = 3549;
  bool has_yawangleperstepstandstillsteer_rad() const;
  private:
  bool _internal_has_yawangleperstepstandstillsteer_rad() const;
  public:
  void clear_yawangleperstepstandstillsteer_rad();
  float yawangleperstepstandstillsteer_rad() const;
  void set_yawangleperstepstandstillsteer_rad(float value);
  private:
  float _internal_yawangleperstepstandstillsteer_rad() const;
  void _internal_set_yawangleperstepstandstillsteer_rad(float value);
  public:

  // optional float yawRateOffsetCalibrated_radps = 3810;
  bool has_yawrateoffsetcalibrated_radps() const;
  private:
  bool _internal_has_yawrateoffsetcalibrated_radps() const;
  public:
  void clear_yawrateoffsetcalibrated_radps();
  float yawrateoffsetcalibrated_radps() const;
  void set_yawrateoffsetcalibrated_radps(float value);
  private:
  float _internal_yawrateoffsetcalibrated_radps() const;
  void _internal_set_yawrateoffsetcalibrated_radps(float value);
  public:

  // optional float estimYawRateFLRR_radps = 3927;
  bool has_estimyawrateflrr_radps() const;
  private:
  bool _internal_has_estimyawrateflrr_radps() const;
  public:
  void clear_estimyawrateflrr_radps();
  float estimyawrateflrr_radps() const;
  void set_estimyawrateflrr_radps(float value);
  private:
  float _internal_estimyawrateflrr_radps() const;
  void _internal_set_estimyawrateflrr_radps(float value);
  public:

  // optional float estimVelRearAxleFLRR_mps = 3944;
  bool has_estimvelrearaxleflrr_mps() const;
  private:
  bool _internal_has_estimvelrearaxleflrr_mps() const;
  public:
  void clear_estimvelrearaxleflrr_mps();
  float estimvelrearaxleflrr_mps() const;
  void set_estimvelrearaxleflrr_mps(float value);
  private:
  float _internal_estimvelrearaxleflrr_mps() const;
  void _internal_set_estimvelrearaxleflrr_mps(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > distanceperstepwheel_m_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ticsincrement_4_nu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > debugint_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > debugfloat_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float estimyawratefrrr_radps_;
  float steeringwheelangleoffset_rad_;
  float estimvelrearaxlefrrl_mps_;
  float yawangleperstepyawrate_rad_;
  ::PROTOBUF_NAMESPACE_ID::int32 drivingdirectiongear_nu_;
  float yawangleperstepwhldistrear_rad_;
  float odoaccelbywheel_mps2_;
  float estimvelrearaxleflfr_mps_;
  float yawangleperstepwhldistfront_rad_;
  float estimvelrearaxleflrl_mps_;
  float steeranglefl_;
  float steeranglefr_;
  float estimyawraterlrr_radps_;
  float steeringwheelangleoffsetcalibrated_rad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float distanceperstepra_m_;
  float distancefa_m_;
  float steeranglectr_;
  float distanceperstepfa_m_;
  float yawangleperstepackermann_rad_;
  float distancera_m_;
  float estimyawratefrrl_radps_;
  float estimvelrearaxlefrrr_mps_;
  float estimyawrateflrl_radps_;
  float estimyawrateflfr_radps_;
  float estimvelrearaxlerlrr_mps_;
  float yawrateoffset_radps_;
  float yawangleperstepstandstillsteer_rad_;
  float yawrateoffsetcalibrated_radps_;
  float estimyawrateflrr_radps_;
  float estimvelrearaxleflrr_mps_;
  friend struct ::TableStruct_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto;
};
// -------------------------------------------------------------------

class OdoDebugPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port) */ {
 public:
  OdoDebugPort_array_port();
  virtual ~OdoDebugPort_array_port();

  OdoDebugPort_array_port(const OdoDebugPort_array_port& from);
  OdoDebugPort_array_port(OdoDebugPort_array_port&& from) noexcept
    : OdoDebugPort_array_port() {
    *this = ::std::move(from);
  }

  inline OdoDebugPort_array_port& operator=(const OdoDebugPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdoDebugPort_array_port& operator=(OdoDebugPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdoDebugPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdoDebugPort_array_port* internal_default_instance() {
    return reinterpret_cast<const OdoDebugPort_array_port*>(
               &_OdoDebugPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OdoDebugPort_array_port& a, OdoDebugPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(OdoDebugPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdoDebugPort_array_port* New() const final {
    return CreateMaybeMessage<OdoDebugPort_array_port>(nullptr);
  }

  OdoDebugPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdoDebugPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdoDebugPort_array_port& from);
  void MergeFrom(const OdoDebugPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdoDebugPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto);
    return ::descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 667,
  };
  // repeated .pb.lsm_vedodo.odo_debug_port.OdoDebugPort data = 667;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort >*
      mutable_data();
  private:
  const ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort& _internal_data(int index) const;
  ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* _internal_add_data();
  public:
  const ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort& data(int index) const;
  ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort > data_;
  friend struct ::TableStruct_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OdoDebugPort

// optional uint32 uiVersionNumber = 2124;
inline bool OdoDebugPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void OdoDebugPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OdoDebugPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OdoDebugPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void OdoDebugPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  uiversionnumber_ = value;
}
inline void OdoDebugPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool OdoDebugPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool OdoDebugPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& OdoDebugPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& OdoDebugPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* OdoDebugPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* OdoDebugPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* OdoDebugPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void OdoDebugPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.sSigHeader)
}

// optional float steeringWheelAngleOffset_rad = 35;
inline bool OdoDebugPort::_internal_has_steeringwheelangleoffset_rad() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OdoDebugPort::has_steeringwheelangleoffset_rad() const {
  return _internal_has_steeringwheelangleoffset_rad();
}
inline void OdoDebugPort::clear_steeringwheelangleoffset_rad() {
  steeringwheelangleoffset_rad_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float OdoDebugPort::_internal_steeringwheelangleoffset_rad() const {
  return steeringwheelangleoffset_rad_;
}
inline float OdoDebugPort::steeringwheelangleoffset_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steeringWheelAngleOffset_rad)
  return _internal_steeringwheelangleoffset_rad();
}
inline void OdoDebugPort::_internal_set_steeringwheelangleoffset_rad(float value) {
  _has_bits_[0] |= 0x00000004u;
  steeringwheelangleoffset_rad_ = value;
}
inline void OdoDebugPort::set_steeringwheelangleoffset_rad(float value) {
  _internal_set_steeringwheelangleoffset_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steeringWheelAngleOffset_rad)
}

// optional float steeringWheelAngleOffsetCalibrated_rad = 2088;
inline bool OdoDebugPort::_internal_has_steeringwheelangleoffsetcalibrated_rad() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_steeringwheelangleoffsetcalibrated_rad() const {
  return _internal_has_steeringwheelangleoffsetcalibrated_rad();
}
inline void OdoDebugPort::clear_steeringwheelangleoffsetcalibrated_rad() {
  steeringwheelangleoffsetcalibrated_rad_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float OdoDebugPort::_internal_steeringwheelangleoffsetcalibrated_rad() const {
  return steeringwheelangleoffsetcalibrated_rad_;
}
inline float OdoDebugPort::steeringwheelangleoffsetcalibrated_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steeringWheelAngleOffsetCalibrated_rad)
  return _internal_steeringwheelangleoffsetcalibrated_rad();
}
inline void OdoDebugPort::_internal_set_steeringwheelangleoffsetcalibrated_rad(float value) {
  _has_bits_[0] |= 0x00004000u;
  steeringwheelangleoffsetcalibrated_rad_ = value;
}
inline void OdoDebugPort::set_steeringwheelangleoffsetcalibrated_rad(float value) {
  _internal_set_steeringwheelangleoffsetcalibrated_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steeringWheelAngleOffsetCalibrated_rad)
}

// optional float yawRateOffset_radps = 3529;
inline bool OdoDebugPort::_internal_has_yawrateoffset_radps() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_yawrateoffset_radps() const {
  return _internal_has_yawrateoffset_radps();
}
inline void OdoDebugPort::clear_yawrateoffset_radps() {
  yawrateoffset_radps_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float OdoDebugPort::_internal_yawrateoffset_radps() const {
  return yawrateoffset_radps_;
}
inline float OdoDebugPort::yawrateoffset_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawRateOffset_radps)
  return _internal_yawrateoffset_radps();
}
inline void OdoDebugPort::_internal_set_yawrateoffset_radps(float value) {
  _has_bits_[0] |= 0x08000000u;
  yawrateoffset_radps_ = value;
}
inline void OdoDebugPort::set_yawrateoffset_radps(float value) {
  _internal_set_yawrateoffset_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawRateOffset_radps)
}

// optional float yawRateOffsetCalibrated_radps = 3810;
inline bool OdoDebugPort::_internal_has_yawrateoffsetcalibrated_radps() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_yawrateoffsetcalibrated_radps() const {
  return _internal_has_yawrateoffsetcalibrated_radps();
}
inline void OdoDebugPort::clear_yawrateoffsetcalibrated_radps() {
  yawrateoffsetcalibrated_radps_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float OdoDebugPort::_internal_yawrateoffsetcalibrated_radps() const {
  return yawrateoffsetcalibrated_radps_;
}
inline float OdoDebugPort::yawrateoffsetcalibrated_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawRateOffsetCalibrated_radps)
  return _internal_yawrateoffsetcalibrated_radps();
}
inline void OdoDebugPort::_internal_set_yawrateoffsetcalibrated_radps(float value) {
  _has_bits_[0] |= 0x20000000u;
  yawrateoffsetcalibrated_radps_ = value;
}
inline void OdoDebugPort::set_yawrateoffsetcalibrated_radps(float value) {
  _internal_set_yawrateoffsetcalibrated_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawRateOffsetCalibrated_radps)
}

// optional float distancePerStepRA_m = 2132;
inline bool OdoDebugPort::_internal_has_distanceperstepra_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_distanceperstepra_m() const {
  return _internal_has_distanceperstepra_m();
}
inline void OdoDebugPort::clear_distanceperstepra_m() {
  distanceperstepra_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float OdoDebugPort::_internal_distanceperstepra_m() const {
  return distanceperstepra_m_;
}
inline float OdoDebugPort::distanceperstepra_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepRA_m)
  return _internal_distanceperstepra_m();
}
inline void OdoDebugPort::_internal_set_distanceperstepra_m(float value) {
  _has_bits_[0] |= 0x00010000u;
  distanceperstepra_m_ = value;
}
inline void OdoDebugPort::set_distanceperstepra_m(float value) {
  _internal_set_distanceperstepra_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepRA_m)
}

// optional float distancePerStepFA_m = 2306;
inline bool OdoDebugPort::_internal_has_distanceperstepfa_m() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_distanceperstepfa_m() const {
  return _internal_has_distanceperstepfa_m();
}
inline void OdoDebugPort::clear_distanceperstepfa_m() {
  distanceperstepfa_m_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float OdoDebugPort::_internal_distanceperstepfa_m() const {
  return distanceperstepfa_m_;
}
inline float OdoDebugPort::distanceperstepfa_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepFA_m)
  return _internal_distanceperstepfa_m();
}
inline void OdoDebugPort::_internal_set_distanceperstepfa_m(float value) {
  _has_bits_[0] |= 0x00080000u;
  distanceperstepfa_m_ = value;
}
inline void OdoDebugPort::set_distanceperstepfa_m(float value) {
  _internal_set_distanceperstepfa_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepFA_m)
}

// optional float distanceFA_m = 2177;
inline bool OdoDebugPort::_internal_has_distancefa_m() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_distancefa_m() const {
  return _internal_has_distancefa_m();
}
inline void OdoDebugPort::clear_distancefa_m() {
  distancefa_m_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float OdoDebugPort::_internal_distancefa_m() const {
  return distancefa_m_;
}
inline float OdoDebugPort::distancefa_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distanceFA_m)
  return _internal_distancefa_m();
}
inline void OdoDebugPort::_internal_set_distancefa_m(float value) {
  _has_bits_[0] |= 0x00020000u;
  distancefa_m_ = value;
}
inline void OdoDebugPort::set_distancefa_m(float value) {
  _internal_set_distancefa_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distanceFA_m)
}

// optional float distanceRA_m = 2519;
inline bool OdoDebugPort::_internal_has_distancera_m() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_distancera_m() const {
  return _internal_has_distancera_m();
}
inline void OdoDebugPort::clear_distancera_m() {
  distancera_m_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float OdoDebugPort::_internal_distancera_m() const {
  return distancera_m_;
}
inline float OdoDebugPort::distancera_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distanceRA_m)
  return _internal_distancera_m();
}
inline void OdoDebugPort::_internal_set_distancera_m(float value) {
  _has_bits_[0] |= 0x00200000u;
  distancera_m_ = value;
}
inline void OdoDebugPort::set_distancera_m(float value) {
  _internal_set_distancera_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distanceRA_m)
}

// optional float yawAnglePerStepAckermann_rad = 2424;
inline bool OdoDebugPort::_internal_has_yawangleperstepackermann_rad() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_yawangleperstepackermann_rad() const {
  return _internal_has_yawangleperstepackermann_rad();
}
inline void OdoDebugPort::clear_yawangleperstepackermann_rad() {
  yawangleperstepackermann_rad_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float OdoDebugPort::_internal_yawangleperstepackermann_rad() const {
  return yawangleperstepackermann_rad_;
}
inline float OdoDebugPort::yawangleperstepackermann_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepAckermann_rad)
  return _internal_yawangleperstepackermann_rad();
}
inline void OdoDebugPort::_internal_set_yawangleperstepackermann_rad(float value) {
  _has_bits_[0] |= 0x00100000u;
  yawangleperstepackermann_rad_ = value;
}
inline void OdoDebugPort::set_yawangleperstepackermann_rad(float value) {
  _internal_set_yawangleperstepackermann_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepAckermann_rad)
}

// optional float yawAnglePerStepYawRate_rad = 459;
inline bool OdoDebugPort::_internal_has_yawangleperstepyawrate_rad() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OdoDebugPort::has_yawangleperstepyawrate_rad() const {
  return _internal_has_yawangleperstepyawrate_rad();
}
inline void OdoDebugPort::clear_yawangleperstepyawrate_rad() {
  yawangleperstepyawrate_rad_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float OdoDebugPort::_internal_yawangleperstepyawrate_rad() const {
  return yawangleperstepyawrate_rad_;
}
inline float OdoDebugPort::yawangleperstepyawrate_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepYawRate_rad)
  return _internal_yawangleperstepyawrate_rad();
}
inline void OdoDebugPort::_internal_set_yawangleperstepyawrate_rad(float value) {
  _has_bits_[0] |= 0x00000010u;
  yawangleperstepyawrate_rad_ = value;
}
inline void OdoDebugPort::set_yawangleperstepyawrate_rad(float value) {
  _internal_set_yawangleperstepyawrate_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepYawRate_rad)
}

// optional float yawAnglePerStepStandstillSteer_rad = 3549;
inline bool OdoDebugPort::_internal_has_yawangleperstepstandstillsteer_rad() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_yawangleperstepstandstillsteer_rad() const {
  return _internal_has_yawangleperstepstandstillsteer_rad();
}
inline void OdoDebugPort::clear_yawangleperstepstandstillsteer_rad() {
  yawangleperstepstandstillsteer_rad_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float OdoDebugPort::_internal_yawangleperstepstandstillsteer_rad() const {
  return yawangleperstepstandstillsteer_rad_;
}
inline float OdoDebugPort::yawangleperstepstandstillsteer_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepStandstillSteer_rad)
  return _internal_yawangleperstepstandstillsteer_rad();
}
inline void OdoDebugPort::_internal_set_yawangleperstepstandstillsteer_rad(float value) {
  _has_bits_[0] |= 0x10000000u;
  yawangleperstepstandstillsteer_rad_ = value;
}
inline void OdoDebugPort::set_yawangleperstepstandstillsteer_rad(float value) {
  _internal_set_yawangleperstepstandstillsteer_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepStandstillSteer_rad)
}

// optional float yawAnglePerStepWhlDistFront_rad = 1083;
inline bool OdoDebugPort::_internal_has_yawangleperstepwhldistfront_rad() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OdoDebugPort::has_yawangleperstepwhldistfront_rad() const {
  return _internal_has_yawangleperstepwhldistfront_rad();
}
inline void OdoDebugPort::clear_yawangleperstepwhldistfront_rad() {
  yawangleperstepwhldistfront_rad_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float OdoDebugPort::_internal_yawangleperstepwhldistfront_rad() const {
  return yawangleperstepwhldistfront_rad_;
}
inline float OdoDebugPort::yawangleperstepwhldistfront_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepWhlDistFront_rad)
  return _internal_yawangleperstepwhldistfront_rad();
}
inline void OdoDebugPort::_internal_set_yawangleperstepwhldistfront_rad(float value) {
  _has_bits_[0] |= 0x00000200u;
  yawangleperstepwhldistfront_rad_ = value;
}
inline void OdoDebugPort::set_yawangleperstepwhldistfront_rad(float value) {
  _internal_set_yawangleperstepwhldistfront_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepWhlDistFront_rad)
}

// optional float yawAnglePerStepWhlDistRear_rad = 712;
inline bool OdoDebugPort::_internal_has_yawangleperstepwhldistrear_rad() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OdoDebugPort::has_yawangleperstepwhldistrear_rad() const {
  return _internal_has_yawangleperstepwhldistrear_rad();
}
inline void OdoDebugPort::clear_yawangleperstepwhldistrear_rad() {
  yawangleperstepwhldistrear_rad_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float OdoDebugPort::_internal_yawangleperstepwhldistrear_rad() const {
  return yawangleperstepwhldistrear_rad_;
}
inline float OdoDebugPort::yawangleperstepwhldistrear_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepWhlDistRear_rad)
  return _internal_yawangleperstepwhldistrear_rad();
}
inline void OdoDebugPort::_internal_set_yawangleperstepwhldistrear_rad(float value) {
  _has_bits_[0] |= 0x00000040u;
  yawangleperstepwhldistrear_rad_ = value;
}
inline void OdoDebugPort::set_yawangleperstepwhldistrear_rad(float value) {
  _internal_set_yawangleperstepwhldistrear_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.yawAnglePerStepWhlDistRear_rad)
}

// optional float odoAccelByWheel_mps2 = 844;
inline bool OdoDebugPort::_internal_has_odoaccelbywheel_mps2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OdoDebugPort::has_odoaccelbywheel_mps2() const {
  return _internal_has_odoaccelbywheel_mps2();
}
inline void OdoDebugPort::clear_odoaccelbywheel_mps2() {
  odoaccelbywheel_mps2_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float OdoDebugPort::_internal_odoaccelbywheel_mps2() const {
  return odoaccelbywheel_mps2_;
}
inline float OdoDebugPort::odoaccelbywheel_mps2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.odoAccelByWheel_mps2)
  return _internal_odoaccelbywheel_mps2();
}
inline void OdoDebugPort::_internal_set_odoaccelbywheel_mps2(float value) {
  _has_bits_[0] |= 0x00000080u;
  odoaccelbywheel_mps2_ = value;
}
inline void OdoDebugPort::set_odoaccelbywheel_mps2(float value) {
  _internal_set_odoaccelbywheel_mps2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.odoAccelByWheel_mps2)
}

// repeated float distancePerStepWheel_m = 708;
inline int OdoDebugPort::_internal_distanceperstepwheel_m_size() const {
  return distanceperstepwheel_m_.size();
}
inline int OdoDebugPort::distanceperstepwheel_m_size() const {
  return _internal_distanceperstepwheel_m_size();
}
inline void OdoDebugPort::clear_distanceperstepwheel_m() {
  distanceperstepwheel_m_.Clear();
}
inline float OdoDebugPort::_internal_distanceperstepwheel_m(int index) const {
  return distanceperstepwheel_m_.Get(index);
}
inline float OdoDebugPort::distanceperstepwheel_m(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepWheel_m)
  return _internal_distanceperstepwheel_m(index);
}
inline void OdoDebugPort::set_distanceperstepwheel_m(int index, float value) {
  distanceperstepwheel_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepWheel_m)
}
inline void OdoDebugPort::_internal_add_distanceperstepwheel_m(float value) {
  distanceperstepwheel_m_.Add(value);
}
inline void OdoDebugPort::add_distanceperstepwheel_m(float value) {
  _internal_add_distanceperstepwheel_m(value);
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepWheel_m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdoDebugPort::_internal_distanceperstepwheel_m() const {
  return distanceperstepwheel_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdoDebugPort::distanceperstepwheel_m() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepWheel_m)
  return _internal_distanceperstepwheel_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdoDebugPort::_internal_mutable_distanceperstepwheel_m() {
  return &distanceperstepwheel_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdoDebugPort::mutable_distanceperstepwheel_m() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.distancePerStepWheel_m)
  return _internal_mutable_distanceperstepwheel_m();
}

// repeated sint32 debugInt = 1230;
inline int OdoDebugPort::_internal_debugint_size() const {
  return debugint_.size();
}
inline int OdoDebugPort::debugint_size() const {
  return _internal_debugint_size();
}
inline void OdoDebugPort::clear_debugint() {
  debugint_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OdoDebugPort::_internal_debugint(int index) const {
  return debugint_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OdoDebugPort::debugint(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugInt)
  return _internal_debugint(index);
}
inline void OdoDebugPort::set_debugint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  debugint_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugInt)
}
inline void OdoDebugPort::_internal_add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  debugint_.Add(value);
}
inline void OdoDebugPort::add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_debugint(value);
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugInt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OdoDebugPort::_internal_debugint() const {
  return debugint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OdoDebugPort::debugint() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugInt)
  return _internal_debugint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OdoDebugPort::_internal_mutable_debugint() {
  return &debugint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OdoDebugPort::mutable_debugint() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugInt)
  return _internal_mutable_debugint();
}

// repeated float debugFloat = 2041;
inline int OdoDebugPort::_internal_debugfloat_size() const {
  return debugfloat_.size();
}
inline int OdoDebugPort::debugfloat_size() const {
  return _internal_debugfloat_size();
}
inline void OdoDebugPort::clear_debugfloat() {
  debugfloat_.Clear();
}
inline float OdoDebugPort::_internal_debugfloat(int index) const {
  return debugfloat_.Get(index);
}
inline float OdoDebugPort::debugfloat(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugFloat)
  return _internal_debugfloat(index);
}
inline void OdoDebugPort::set_debugfloat(int index, float value) {
  debugfloat_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugFloat)
}
inline void OdoDebugPort::_internal_add_debugfloat(float value) {
  debugfloat_.Add(value);
}
inline void OdoDebugPort::add_debugfloat(float value) {
  _internal_add_debugfloat(value);
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugFloat)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdoDebugPort::_internal_debugfloat() const {
  return debugfloat_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OdoDebugPort::debugfloat() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugFloat)
  return _internal_debugfloat();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdoDebugPort::_internal_mutable_debugfloat() {
  return &debugfloat_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OdoDebugPort::mutable_debugfloat() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.debugFloat)
  return _internal_mutable_debugfloat();
}

// optional float steerAngleFL = 1414;
inline bool OdoDebugPort::_internal_has_steeranglefl() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool OdoDebugPort::has_steeranglefl() const {
  return _internal_has_steeranglefl();
}
inline void OdoDebugPort::clear_steeranglefl() {
  steeranglefl_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float OdoDebugPort::_internal_steeranglefl() const {
  return steeranglefl_;
}
inline float OdoDebugPort::steeranglefl() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steerAngleFL)
  return _internal_steeranglefl();
}
inline void OdoDebugPort::_internal_set_steeranglefl(float value) {
  _has_bits_[0] |= 0x00000800u;
  steeranglefl_ = value;
}
inline void OdoDebugPort::set_steeranglefl(float value) {
  _internal_set_steeranglefl(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steerAngleFL)
}

// optional float steerAngleFR = 1657;
inline bool OdoDebugPort::_internal_has_steeranglefr() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_steeranglefr() const {
  return _internal_has_steeranglefr();
}
inline void OdoDebugPort::clear_steeranglefr() {
  steeranglefr_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float OdoDebugPort::_internal_steeranglefr() const {
  return steeranglefr_;
}
inline float OdoDebugPort::steeranglefr() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steerAngleFR)
  return _internal_steeranglefr();
}
inline void OdoDebugPort::_internal_set_steeranglefr(float value) {
  _has_bits_[0] |= 0x00001000u;
  steeranglefr_ = value;
}
inline void OdoDebugPort::set_steeranglefr(float value) {
  _internal_set_steeranglefr(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steerAngleFR)
}

// optional float steerAngleCTR = 2258;
inline bool OdoDebugPort::_internal_has_steeranglectr() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_steeranglectr() const {
  return _internal_has_steeranglectr();
}
inline void OdoDebugPort::clear_steeranglectr() {
  steeranglectr_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float OdoDebugPort::_internal_steeranglectr() const {
  return steeranglectr_;
}
inline float OdoDebugPort::steeranglectr() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steerAngleCTR)
  return _internal_steeranglectr();
}
inline void OdoDebugPort::_internal_set_steeranglectr(float value) {
  _has_bits_[0] |= 0x00040000u;
  steeranglectr_ = value;
}
inline void OdoDebugPort::set_steeranglectr(float value) {
  _internal_set_steeranglectr(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.steerAngleCTR)
}

// optional float estimYawRateFLRR_radps = 3927;
inline bool OdoDebugPort::_internal_has_estimyawrateflrr_radps() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimyawrateflrr_radps() const {
  return _internal_has_estimyawrateflrr_radps();
}
inline void OdoDebugPort::clear_estimyawrateflrr_radps() {
  estimyawrateflrr_radps_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float OdoDebugPort::_internal_estimyawrateflrr_radps() const {
  return estimyawrateflrr_radps_;
}
inline float OdoDebugPort::estimyawrateflrr_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFLRR_radps)
  return _internal_estimyawrateflrr_radps();
}
inline void OdoDebugPort::_internal_set_estimyawrateflrr_radps(float value) {
  _has_bits_[0] |= 0x40000000u;
  estimyawrateflrr_radps_ = value;
}
inline void OdoDebugPort::set_estimyawrateflrr_radps(float value) {
  _internal_set_estimyawrateflrr_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFLRR_radps)
}

// optional float estimVelRearAxleFLRR_mps = 3944;
inline bool OdoDebugPort::_internal_has_estimvelrearaxleflrr_mps() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimvelrearaxleflrr_mps() const {
  return _internal_has_estimvelrearaxleflrr_mps();
}
inline void OdoDebugPort::clear_estimvelrearaxleflrr_mps() {
  estimvelrearaxleflrr_mps_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float OdoDebugPort::_internal_estimvelrearaxleflrr_mps() const {
  return estimvelrearaxleflrr_mps_;
}
inline float OdoDebugPort::estimvelrearaxleflrr_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFLRR_mps)
  return _internal_estimvelrearaxleflrr_mps();
}
inline void OdoDebugPort::_internal_set_estimvelrearaxleflrr_mps(float value) {
  _has_bits_[0] |= 0x80000000u;
  estimvelrearaxleflrr_mps_ = value;
}
inline void OdoDebugPort::set_estimvelrearaxleflrr_mps(float value) {
  _internal_set_estimvelrearaxleflrr_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFLRR_mps)
}

// optional float estimYawRateFRRL_radps = 2605;
inline bool OdoDebugPort::_internal_has_estimyawratefrrl_radps() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimyawratefrrl_radps() const {
  return _internal_has_estimyawratefrrl_radps();
}
inline void OdoDebugPort::clear_estimyawratefrrl_radps() {
  estimyawratefrrl_radps_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float OdoDebugPort::_internal_estimyawratefrrl_radps() const {
  return estimyawratefrrl_radps_;
}
inline float OdoDebugPort::estimyawratefrrl_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFRRL_radps)
  return _internal_estimyawratefrrl_radps();
}
inline void OdoDebugPort::_internal_set_estimyawratefrrl_radps(float value) {
  _has_bits_[0] |= 0x00400000u;
  estimyawratefrrl_radps_ = value;
}
inline void OdoDebugPort::set_estimyawratefrrl_radps(float value) {
  _internal_set_estimyawratefrrl_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFRRL_radps)
}

// optional float estimVelRearAxleFRRL_mps = 361;
inline bool OdoDebugPort::_internal_has_estimvelrearaxlefrrl_mps() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimvelrearaxlefrrl_mps() const {
  return _internal_has_estimvelrearaxlefrrl_mps();
}
inline void OdoDebugPort::clear_estimvelrearaxlefrrl_mps() {
  estimvelrearaxlefrrl_mps_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float OdoDebugPort::_internal_estimvelrearaxlefrrl_mps() const {
  return estimvelrearaxlefrrl_mps_;
}
inline float OdoDebugPort::estimvelrearaxlefrrl_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFRRL_mps)
  return _internal_estimvelrearaxlefrrl_mps();
}
inline void OdoDebugPort::_internal_set_estimvelrearaxlefrrl_mps(float value) {
  _has_bits_[0] |= 0x00000008u;
  estimvelrearaxlefrrl_mps_ = value;
}
inline void OdoDebugPort::set_estimvelrearaxlefrrl_mps(float value) {
  _internal_set_estimvelrearaxlefrrl_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFRRL_mps)
}

// optional float estimYawRateFRRR_radps = 4062;
inline bool OdoDebugPort::_internal_has_estimyawratefrrr_radps() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimyawratefrrr_radps() const {
  return _internal_has_estimyawratefrrr_radps();
}
inline void OdoDebugPort::clear_estimyawratefrrr_radps() {
  estimyawratefrrr_radps_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float OdoDebugPort::_internal_estimyawratefrrr_radps() const {
  return estimyawratefrrr_radps_;
}
inline float OdoDebugPort::estimyawratefrrr_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFRRR_radps)
  return _internal_estimyawratefrrr_radps();
}
inline void OdoDebugPort::_internal_set_estimyawratefrrr_radps(float value) {
  _has_bits_[0] |= 0x00000002u;
  estimyawratefrrr_radps_ = value;
}
inline void OdoDebugPort::set_estimyawratefrrr_radps(float value) {
  _internal_set_estimyawratefrrr_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFRRR_radps)
}

// optional float estimVelRearAxleFRRR_mps = 2715;
inline bool OdoDebugPort::_internal_has_estimvelrearaxlefrrr_mps() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimvelrearaxlefrrr_mps() const {
  return _internal_has_estimvelrearaxlefrrr_mps();
}
inline void OdoDebugPort::clear_estimvelrearaxlefrrr_mps() {
  estimvelrearaxlefrrr_mps_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float OdoDebugPort::_internal_estimvelrearaxlefrrr_mps() const {
  return estimvelrearaxlefrrr_mps_;
}
inline float OdoDebugPort::estimvelrearaxlefrrr_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFRRR_mps)
  return _internal_estimvelrearaxlefrrr_mps();
}
inline void OdoDebugPort::_internal_set_estimvelrearaxlefrrr_mps(float value) {
  _has_bits_[0] |= 0x00800000u;
  estimvelrearaxlefrrr_mps_ = value;
}
inline void OdoDebugPort::set_estimvelrearaxlefrrr_mps(float value) {
  _internal_set_estimvelrearaxlefrrr_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFRRR_mps)
}

// optional float estimYawRateFLFR_radps = 3470;
inline bool OdoDebugPort::_internal_has_estimyawrateflfr_radps() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimyawrateflfr_radps() const {
  return _internal_has_estimyawrateflfr_radps();
}
inline void OdoDebugPort::clear_estimyawrateflfr_radps() {
  estimyawrateflfr_radps_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float OdoDebugPort::_internal_estimyawrateflfr_radps() const {
  return estimyawrateflfr_radps_;
}
inline float OdoDebugPort::estimyawrateflfr_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFLFR_radps)
  return _internal_estimyawrateflfr_radps();
}
inline void OdoDebugPort::_internal_set_estimyawrateflfr_radps(float value) {
  _has_bits_[0] |= 0x02000000u;
  estimyawrateflfr_radps_ = value;
}
inline void OdoDebugPort::set_estimyawrateflfr_radps(float value) {
  _internal_set_estimyawrateflfr_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFLFR_radps)
}

// optional float estimVelRearAxleFLFR_mps = 845;
inline bool OdoDebugPort::_internal_has_estimvelrearaxleflfr_mps() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimvelrearaxleflfr_mps() const {
  return _internal_has_estimvelrearaxleflfr_mps();
}
inline void OdoDebugPort::clear_estimvelrearaxleflfr_mps() {
  estimvelrearaxleflfr_mps_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float OdoDebugPort::_internal_estimvelrearaxleflfr_mps() const {
  return estimvelrearaxleflfr_mps_;
}
inline float OdoDebugPort::estimvelrearaxleflfr_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFLFR_mps)
  return _internal_estimvelrearaxleflfr_mps();
}
inline void OdoDebugPort::_internal_set_estimvelrearaxleflfr_mps(float value) {
  _has_bits_[0] |= 0x00000100u;
  estimvelrearaxleflfr_mps_ = value;
}
inline void OdoDebugPort::set_estimvelrearaxleflfr_mps(float value) {
  _internal_set_estimvelrearaxleflfr_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFLFR_mps)
}

// optional float estimYawRateRLRR_radps = 1780;
inline bool OdoDebugPort::_internal_has_estimyawraterlrr_radps() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimyawraterlrr_radps() const {
  return _internal_has_estimyawraterlrr_radps();
}
inline void OdoDebugPort::clear_estimyawraterlrr_radps() {
  estimyawraterlrr_radps_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float OdoDebugPort::_internal_estimyawraterlrr_radps() const {
  return estimyawraterlrr_radps_;
}
inline float OdoDebugPort::estimyawraterlrr_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateRLRR_radps)
  return _internal_estimyawraterlrr_radps();
}
inline void OdoDebugPort::_internal_set_estimyawraterlrr_radps(float value) {
  _has_bits_[0] |= 0x00002000u;
  estimyawraterlrr_radps_ = value;
}
inline void OdoDebugPort::set_estimyawraterlrr_radps(float value) {
  _internal_set_estimyawraterlrr_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateRLRR_radps)
}

// optional float estimVelRearAxleRLRR_mps = 3505;
inline bool OdoDebugPort::_internal_has_estimvelrearaxlerlrr_mps() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimvelrearaxlerlrr_mps() const {
  return _internal_has_estimvelrearaxlerlrr_mps();
}
inline void OdoDebugPort::clear_estimvelrearaxlerlrr_mps() {
  estimvelrearaxlerlrr_mps_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float OdoDebugPort::_internal_estimvelrearaxlerlrr_mps() const {
  return estimvelrearaxlerlrr_mps_;
}
inline float OdoDebugPort::estimvelrearaxlerlrr_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleRLRR_mps)
  return _internal_estimvelrearaxlerlrr_mps();
}
inline void OdoDebugPort::_internal_set_estimvelrearaxlerlrr_mps(float value) {
  _has_bits_[0] |= 0x04000000u;
  estimvelrearaxlerlrr_mps_ = value;
}
inline void OdoDebugPort::set_estimvelrearaxlerlrr_mps(float value) {
  _internal_set_estimvelrearaxlerlrr_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleRLRR_mps)
}

// optional float estimYawRateFLRL_radps = 2724;
inline bool OdoDebugPort::_internal_has_estimyawrateflrl_radps() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimyawrateflrl_radps() const {
  return _internal_has_estimyawrateflrl_radps();
}
inline void OdoDebugPort::clear_estimyawrateflrl_radps() {
  estimyawrateflrl_radps_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float OdoDebugPort::_internal_estimyawrateflrl_radps() const {
  return estimyawrateflrl_radps_;
}
inline float OdoDebugPort::estimyawrateflrl_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFLRL_radps)
  return _internal_estimyawrateflrl_radps();
}
inline void OdoDebugPort::_internal_set_estimyawrateflrl_radps(float value) {
  _has_bits_[0] |= 0x01000000u;
  estimyawrateflrl_radps_ = value;
}
inline void OdoDebugPort::set_estimyawrateflrl_radps(float value) {
  _internal_set_estimyawrateflrl_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimYawRateFLRL_radps)
}

// optional float estimVelRearAxleFLRL_mps = 1178;
inline bool OdoDebugPort::_internal_has_estimvelrearaxleflrl_mps() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OdoDebugPort::has_estimvelrearaxleflrl_mps() const {
  return _internal_has_estimvelrearaxleflrl_mps();
}
inline void OdoDebugPort::clear_estimvelrearaxleflrl_mps() {
  estimvelrearaxleflrl_mps_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float OdoDebugPort::_internal_estimvelrearaxleflrl_mps() const {
  return estimvelrearaxleflrl_mps_;
}
inline float OdoDebugPort::estimvelrearaxleflrl_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFLRL_mps)
  return _internal_estimvelrearaxleflrl_mps();
}
inline void OdoDebugPort::_internal_set_estimvelrearaxleflrl_mps(float value) {
  _has_bits_[0] |= 0x00000400u;
  estimvelrearaxleflrl_mps_ = value;
}
inline void OdoDebugPort::set_estimvelrearaxleflrl_mps(float value) {
  _internal_set_estimvelrearaxleflrl_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.estimVelRearAxleFLRL_mps)
}

// repeated sint32 ticsIncrement_4_nu = 1072;
inline int OdoDebugPort::_internal_ticsincrement_4_nu_size() const {
  return ticsincrement_4_nu_.size();
}
inline int OdoDebugPort::ticsincrement_4_nu_size() const {
  return _internal_ticsincrement_4_nu_size();
}
inline void OdoDebugPort::clear_ticsincrement_4_nu() {
  ticsincrement_4_nu_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OdoDebugPort::_internal_ticsincrement_4_nu(int index) const {
  return ticsincrement_4_nu_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OdoDebugPort::ticsincrement_4_nu(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.ticsIncrement_4_nu)
  return _internal_ticsincrement_4_nu(index);
}
inline void OdoDebugPort::set_ticsincrement_4_nu(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ticsincrement_4_nu_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.ticsIncrement_4_nu)
}
inline void OdoDebugPort::_internal_add_ticsincrement_4_nu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ticsincrement_4_nu_.Add(value);
}
inline void OdoDebugPort::add_ticsincrement_4_nu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ticsincrement_4_nu(value);
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.ticsIncrement_4_nu)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OdoDebugPort::_internal_ticsincrement_4_nu() const {
  return ticsincrement_4_nu_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OdoDebugPort::ticsincrement_4_nu() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.ticsIncrement_4_nu)
  return _internal_ticsincrement_4_nu();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OdoDebugPort::_internal_mutable_ticsincrement_4_nu() {
  return &ticsincrement_4_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OdoDebugPort::mutable_ticsincrement_4_nu() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.ticsIncrement_4_nu)
  return _internal_mutable_ticsincrement_4_nu();
}

// optional sint32 drivingDirectionGear_nu = 597;
inline bool OdoDebugPort::_internal_has_drivingdirectiongear_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OdoDebugPort::has_drivingdirectiongear_nu() const {
  return _internal_has_drivingdirectiongear_nu();
}
inline void OdoDebugPort::clear_drivingdirectiongear_nu() {
  drivingdirectiongear_nu_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OdoDebugPort::_internal_drivingdirectiongear_nu() const {
  return drivingdirectiongear_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OdoDebugPort::drivingdirectiongear_nu() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.drivingDirectionGear_nu)
  return _internal_drivingdirectiongear_nu();
}
inline void OdoDebugPort::_internal_set_drivingdirectiongear_nu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  drivingdirectiongear_nu_ = value;
}
inline void OdoDebugPort::set_drivingdirectiongear_nu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drivingdirectiongear_nu(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_debug_port.OdoDebugPort.drivingDirectionGear_nu)
}

// -------------------------------------------------------------------

// OdoDebugPort_array_port

// repeated .pb.lsm_vedodo.odo_debug_port.OdoDebugPort data = 667;
inline int OdoDebugPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int OdoDebugPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void OdoDebugPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* OdoDebugPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort >*
OdoDebugPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port.data)
  return &data_;
}
inline const ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort& OdoDebugPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort& OdoDebugPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* OdoDebugPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* OdoDebugPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort >&
OdoDebugPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace odo_debug_port
}  // namespace lsm_vedodo
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto
