// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lsm_vedodo/odo_estimation.proto

#include "lsm_vedodo/odo_estimation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fvedodo_2fodo_5festimation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto;
namespace pb {
namespace lsm_vedodo {
namespace odo_estimation {
class OdoEstimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdoEstimation> _instance;
} _OdoEstimation_default_instance_;
class OdoEstimation_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdoEstimation_array_port> _instance;
} _OdoEstimation_array_port_default_instance_;
}  // namespace odo_estimation
}  // namespace lsm_vedodo
}  // namespace pb
static void InitDefaultsscc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lsm_vedodo::odo_estimation::_OdoEstimation_default_instance_;
    new (ptr) ::pb::lsm_vedodo::odo_estimation::OdoEstimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lsm_vedodo::odo_estimation::OdoEstimation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_OdoEstimation_array_port_lsm_5fvedodo_2fodo_5festimation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lsm_vedodo::odo_estimation::_OdoEstimation_array_port_default_instance_;
    new (ptr) ::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdoEstimation_array_port_lsm_5fvedodo_2fodo_5festimation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OdoEstimation_array_port_lsm_5fvedodo_2fodo_5festimation_2eproto}, {
      &scc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lsm_5fvedodo_2fodo_5festimation_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lsm_5fvedodo_2fodo_5festimation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lsm_5fvedodo_2fodo_5festimation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lsm_5fvedodo_2fodo_5festimation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, longivelocity_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, lateralvelocity_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, longiacceleration_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, lateralacceleration_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, verticalacceleration_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, xposition_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, yposition_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, xvelocity_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, yvelocity_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, xpositionvar_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, ypositionvar_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, xypositionvar_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, yxpositionvar_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, rollangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, pitchangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, yawangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, rollanglevar_rad2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, pitchanglevar_rad2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, yawanglevar_rad2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, rollrate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, pitchrate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, yawrate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, steerangfrontaxle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, steerangrearaxle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, wheelanglefr_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, wheelanglefl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, sideslipangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, susppitch_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, susproll_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, suspheight_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, drivendistance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, motionstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation, drivingdirection_nu_),
  24,
  0,
  30,
  17,
  10,
  21,
  1,
  8,
  27,
  16,
  5,
  25,
  19,
  20,
  3,
  29,
  14,
  9,
  33,
  13,
  23,
  22,
  2,
  6,
  28,
  12,
  11,
  26,
  4,
  31,
  15,
  32,
  18,
  7,
  34,
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 40, sizeof(::pb::lsm_vedodo::odo_estimation::OdoEstimation)},
  { 75, 81, sizeof(::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::lsm_vedodo::odo_estimation::_OdoEstimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::lsm_vedodo::odo_estimation::_OdoEstimation_array_port_default_instance_),
};

const char descriptor_table_protodef_lsm_5fvedodo_2fodo_5festimation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037lsm_vedodo/odo_estimation.proto\022\034pb.ls"
  "m_vedodo.odo_estimation\032\027eco/signal_head"
  "er.proto\032\035lsm_vedodo/motion_state.proto\032"
  "\032lsm_vedodo/direction.proto\"\247\010\n\rOdoEstim"
  "ation\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigH"
  "eader\030\211\010 \001(\0132\".pb.eco.signal_header.Sign"
  "alHeader\022\032\n\021longiVelocity_mps\030\213\030 \001(\002\022\034\n\023"
  "lateralVelocity_mps\030\203\014 \001(\002\022\037\n\026longiAccel"
  "eration_mps2\030\315\004 \001(\002\022!\n\030lateralAccelerati"
  "on_mps2\030\302\r \001(\002\022\"\n\031verticalAcceleration_m"
  "ps2\030\350\036 \001(\002\022\024\n\013xPosition_m\030\237\003 \001(\002\022\024\n\013yPos"
  "ition_m\030\326\023 \001(\002\022\026\n\rxVelocity_mps\030\243\013 \001(\002\022\026"
  "\n\ryVelocity_mps\030\300\001 \001(\002\022\030\n\017xPositionVar_m"
  "2\030\275\021 \001(\002\022\030\n\017yPositionVar_m2\030\301\014 \001(\002\022\031\n\020xy"
  "PositionVar_m2\030\336\014 \001(\002\022\031\n\020yxPositionVar_m"
  "2\030\206\001 \001(\002\022\026\n\rrollAngle_rad\030\303\025 \001(\002\022\027\n\016pitc"
  "hAngle_rad\030\215\t \001(\002\022\025\n\014yawAngle_rad\030\266\004 \001(\002"
  "\022\032\n\021rollAngleVar_rad2\030\342\035 \001(\002\022\033\n\022pitchAng"
  "leVar_rad2\030\210\t \001(\002\022\031\n\020yawAngleVar_rad2\030\244\020"
  " \001(\002\022\027\n\016rollRate_radps\030\344\016 \001(\002\022\027\n\017pitchRa"
  "te_radps\030n \001(\002\022\026\n\ryawRate_radps\030\335\002 \001(\002\022\036"
  "\n\025steerAngFrontAxle_rad\030\222\024 \001(\002\022\035\n\024steerA"
  "ngRearAxle_rad\030\324\010 \001(\002\022\031\n\020wheelAngleFR_ra"
  "d\030\326\005 \001(\002\022\031\n\020wheelAngleFL_rad\030\244\022 \001(\002\022\032\n\021s"
  "ideSlipAngle_rad\030\224\001 \001(\002\022\026\n\rsuspPitch_rad"
  "\030\221\030 \001(\002\022\025\n\014suspRoll_rad\030\240\013 \001(\002\022\025\n\014suspHe"
  "ight_m\030\217\032 \001(\002\022\031\n\020drivenDistance_m\030\214\014 \001(\002"
  "\022A\n\017motionStatus_nu\030\213\003 \001(\0162\'.pb.lsm_vedo"
  "do.motion_state.MotionState\022@\n\023drivingDi"
  "rection_nu\030\244\013 \001(\0162\".pb.lsm_vedodo.direct"
  "ion.Direction\"V\n\030OdoEstimation_array_por"
  "t\022:\n\004data\030\246\017 \003(\0132+.pb.lsm_vedodo.odo_est"
  "imation.OdoEstimation"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_deps[3] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_lsm_5fvedodo_2fdirection_2eproto,
  &::descriptor_table_lsm_5fvedodo_2fmotion_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_sccs[2] = {
  &scc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto.base,
  &scc_info_OdoEstimation_array_port_lsm_5fvedodo_2fodo_5festimation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_once;
static bool descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto = {
  &descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_initialized, descriptor_table_protodef_lsm_5fvedodo_2fodo_5festimation_2eproto, "lsm_vedodo/odo_estimation.proto", 1301,
  &descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_once, descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_sccs, descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_lsm_5fvedodo_2fodo_5festimation_2eproto::offsets,
  file_level_metadata_lsm_5fvedodo_2fodo_5festimation_2eproto, 2, file_level_enum_descriptors_lsm_5fvedodo_2fodo_5festimation_2eproto, file_level_service_descriptors_lsm_5fvedodo_2fodo_5festimation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lsm_5fvedodo_2fodo_5festimation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto), true);
namespace pb {
namespace lsm_vedodo {
namespace odo_estimation {

// ===================================================================

void OdoEstimation::InitAsDefaultInstance() {
  ::pb::lsm_vedodo::odo_estimation::_OdoEstimation_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class OdoEstimation::_Internal {
 public:
  using HasBits = decltype(std::declval<OdoEstimation>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const OdoEstimation* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longivelocity_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_lateralvelocity_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_longiacceleration_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lateralacceleration_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_verticalacceleration_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xposition_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_yposition_m(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_xvelocity_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_yvelocity_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_xpositionvar_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ypositionvar_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_xypositionvar_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_yxpositionvar_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rollangle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_pitchangle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_yawangle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rollanglevar_rad2(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_pitchanglevar_rad2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_yawanglevar_rad2(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_rollrate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_pitchrate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yawrate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steerangfrontaxle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_steerangrearaxle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_wheelanglefr_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wheelanglefl_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_sideslipangle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_susppitch_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_susproll_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_suspheight_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_drivendistance_m(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_motionstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_drivingdirection_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
OdoEstimation::_Internal::ssigheader(const OdoEstimation* msg) {
  return *msg->ssigheader_;
}
void OdoEstimation::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OdoEstimation::OdoEstimation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lsm_vedodo.odo_estimation.OdoEstimation)
}
OdoEstimation::OdoEstimation(const OdoEstimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&verticalacceleration_mps2_, &from.verticalacceleration_mps2_,
    static_cast<size_t>(reinterpret_cast<char*>(&drivingdirection_nu_) -
    reinterpret_cast<char*>(&verticalacceleration_mps2_)) + sizeof(drivingdirection_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.lsm_vedodo.odo_estimation.OdoEstimation)
}

void OdoEstimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rollanglevar_rad2_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(rollanglevar_rad2_));
  drivingdirection_nu_ = -1;
}

OdoEstimation::~OdoEstimation() {
  // @@protoc_insertion_point(destructor:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  SharedDtor();
}

void OdoEstimation::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void OdoEstimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdoEstimation& OdoEstimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdoEstimation_lsm_5fvedodo_2fodo_5festimation_2eproto.base);
  return *internal_default_instance();
}


void OdoEstimation::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&verticalacceleration_mps2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&motionstatus_nu_) -
        reinterpret_cast<char*>(&verticalacceleration_mps2_)) + sizeof(motionstatus_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&xposition_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&susproll_rad_) -
        reinterpret_cast<char*>(&xposition_m_)) + sizeof(susproll_rad_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&xvelocity_mps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yawanglevar_rad2_) -
        reinterpret_cast<char*>(&xvelocity_mps_)) + sizeof(yawanglevar_rad2_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&uiversionnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&susppitch_rad_) -
        reinterpret_cast<char*>(&uiversionnumber_)) + sizeof(susppitch_rad_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&suspheight_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rollanglevar_rad2_) -
        reinterpret_cast<char*>(&suspheight_m_)) + sizeof(rollanglevar_rad2_));
    drivingdirection_nu_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OdoEstimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float pitchRate_radps = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_pitchrate_radps(&_has_bits_);
          pitchrate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yxPositionVar_m2 = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_yxpositionvar_m2(&_has_bits_);
          yxpositionvar_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideSlipAngle_rad = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_sideslipangle_rad(&_has_bits_);
          sideslipangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yVelocity_mps = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_yvelocity_mps(&_has_bits_);
          yvelocity_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawRate_radps = 349;
      case 349:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_yawrate_radps(&_has_bits_);
          yawrate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_vedodo.motion_state.MotionState motionStatus_nu = 395;
      case 395:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::lsm_vedodo::motion_state::MotionState_IsValid(val))) {
            _internal_set_motionstatus_nu(static_cast<::pb::lsm_vedodo::motion_state::MotionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(395, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float xPosition_m = 415;
      case 415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_xposition_m(&_has_bits_);
          xposition_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawAngle_rad = 566;
      case 566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_yawangle_rad(&_has_bits_);
          yawangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longiAcceleration_mps2 = 589;
      case 589:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_longiacceleration_mps2(&_has_bits_);
          longiacceleration_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wheelAngleFR_rad = 726;
      case 726:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_wheelanglefr_rad(&_has_bits_);
          wheelanglefr_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steerAngRearAxle_rad = 1108;
      case 1108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_steerangrearaxle_rad(&_has_bits_);
          steerangrearaxle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitchAngleVar_rad2 = 1160;
      case 1160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_pitchanglevar_rad2(&_has_bits_);
          pitchanglevar_rad2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitchAngle_rad = 1165;
      case 1165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_pitchangle_rad(&_has_bits_);
          pitchangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float suspRoll_rad = 1440;
      case 1440:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_susproll_rad(&_has_bits_);
          susproll_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xVelocity_mps = 1443;
      case 1443:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_xvelocity_mps(&_has_bits_);
          xvelocity_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_vedodo.direction.Direction drivingDirection_nu = 1444;
      case 1444:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::lsm_vedodo::direction::Direction_IsValid(val))) {
            _internal_set_drivingdirection_nu(static_cast<::pb::lsm_vedodo::direction::Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1444, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float lateralVelocity_mps = 1539;
      case 1539:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_lateralvelocity_mps(&_has_bits_);
          lateralvelocity_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float drivenDistance_m = 1548;
      case 1548:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_drivendistance_m(&_has_bits_);
          drivendistance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yPositionVar_m2 = 1601;
      case 1601:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ypositionvar_m2(&_has_bits_);
          ypositionvar_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xyPositionVar_m2 = 1630;
      case 1630:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_xypositionvar_m2(&_has_bits_);
          xypositionvar_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lateralAcceleration_mps2 = 1730;
      case 1730:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lateralacceleration_mps2(&_has_bits_);
          lateralacceleration_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rollRate_radps = 1892;
      case 1892:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_rollrate_radps(&_has_bits_);
          rollrate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawAngleVar_rad2 = 2084;
      case 2084:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_yawanglevar_rad2(&_has_bits_);
          yawanglevar_rad2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float xPositionVar_m2 = 2237;
      case 2237:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_xpositionvar_m2(&_has_bits_);
          xpositionvar_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wheelAngleFL_rad = 2340;
      case 2340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_wheelanglefl_rad(&_has_bits_);
          wheelanglefl_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yPosition_m = 2518;
      case 2518:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_yposition_m(&_has_bits_);
          yposition_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steerAngFrontAxle_rad = 2578;
      case 2578:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_steerangfrontaxle_rad(&_has_bits_);
          steerangfrontaxle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rollAngle_rad = 2755;
      case 2755:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_rollangle_rad(&_has_bits_);
          rollangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longiVelocity_mps = 3083;
      case 3083:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_longivelocity_mps(&_has_bits_);
          longivelocity_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float suspPitch_rad = 3089;
      case 3089:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_susppitch_rad(&_has_bits_);
          susppitch_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float suspHeight_m = 3343;
      case 3343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_suspheight_m(&_has_bits_);
          suspheight_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rollAngleVar_rad2 = 3810;
      case 3810:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_rollanglevar_rad2(&_has_bits_);
          rollanglevar_rad2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float verticalAcceleration_mps2 = 3944;
      case 3944:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_verticalacceleration_mps2(&_has_bits_);
          verticalacceleration_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdoEstimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pitchRate_radps = 110;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(110, this->_internal_pitchrate_radps(), target);
  }

  // optional float yxPositionVar_m2 = 134;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(134, this->_internal_yxpositionvar_m2(), target);
  }

  // optional float sideSlipAngle_rad = 148;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(148, this->_internal_sideslipangle_rad(), target);
  }

  // optional float yVelocity_mps = 192;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(192, this->_internal_yvelocity_mps(), target);
  }

  // optional float yawRate_radps = 349;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(349, this->_internal_yawrate_radps(), target);
  }

  // optional .pb.lsm_vedodo.motion_state.MotionState motionStatus_nu = 395;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      395, this->_internal_motionstatus_nu(), target);
  }

  // optional float xPosition_m = 415;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(415, this->_internal_xposition_m(), target);
  }

  // optional float yawAngle_rad = 566;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(566, this->_internal_yawangle_rad(), target);
  }

  // optional float longiAcceleration_mps2 = 589;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(589, this->_internal_longiacceleration_mps2(), target);
  }

  // optional float wheelAngleFR_rad = 726;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(726, this->_internal_wheelanglefr_rad(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float steerAngRearAxle_rad = 1108;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1108, this->_internal_steerangrearaxle_rad(), target);
  }

  // optional float pitchAngleVar_rad2 = 1160;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1160, this->_internal_pitchanglevar_rad2(), target);
  }

  // optional float pitchAngle_rad = 1165;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1165, this->_internal_pitchangle_rad(), target);
  }

  // optional float suspRoll_rad = 1440;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1440, this->_internal_susproll_rad(), target);
  }

  // optional float xVelocity_mps = 1443;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1443, this->_internal_xvelocity_mps(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .pb.lsm_vedodo.direction.Direction drivingDirection_nu = 1444;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1444, this->_internal_drivingdirection_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float lateralVelocity_mps = 1539;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1539, this->_internal_lateralvelocity_mps(), target);
  }

  // optional float drivenDistance_m = 1548;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1548, this->_internal_drivendistance_m(), target);
  }

  // optional float yPositionVar_m2 = 1601;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1601, this->_internal_ypositionvar_m2(), target);
  }

  // optional float xyPositionVar_m2 = 1630;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1630, this->_internal_xypositionvar_m2(), target);
  }

  // optional float lateralAcceleration_mps2 = 1730;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1730, this->_internal_lateralacceleration_mps2(), target);
  }

  // optional float rollRate_radps = 1892;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1892, this->_internal_rollrate_radps(), target);
  }

  // optional float yawAngleVar_rad2 = 2084;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2084, this->_internal_yawanglevar_rad2(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float xPositionVar_m2 = 2237;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2237, this->_internal_xpositionvar_m2(), target);
  }

  // optional float wheelAngleFL_rad = 2340;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2340, this->_internal_wheelanglefl_rad(), target);
  }

  // optional float yPosition_m = 2518;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2518, this->_internal_yposition_m(), target);
  }

  // optional float steerAngFrontAxle_rad = 2578;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2578, this->_internal_steerangfrontaxle_rad(), target);
  }

  // optional float rollAngle_rad = 2755;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2755, this->_internal_rollangle_rad(), target);
  }

  // optional float longiVelocity_mps = 3083;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3083, this->_internal_longivelocity_mps(), target);
  }

  // optional float suspPitch_rad = 3089;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3089, this->_internal_susppitch_rad(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float suspHeight_m = 3343;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3343, this->_internal_suspheight_m(), target);
  }

  // optional float rollAngleVar_rad2 = 3810;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3810, this->_internal_rollanglevar_rad2(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float verticalAcceleration_mps2 = 3944;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3944, this->_internal_verticalacceleration_mps2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  return target;
}

size_t OdoEstimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float verticalAcceleration_mps2 = 3944;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float pitchRate_radps = 110;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float yxPositionVar_m2 = 134;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float sideSlipAngle_rad = 148;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float yVelocity_mps = 192;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float yawRate_radps = 349;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional .pb.lsm_vedodo.motion_state.MotionState motionStatus_nu = 395;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_motionstatus_nu());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float xPosition_m = 415;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float yawAngle_rad = 566;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float longiAcceleration_mps2 = 589;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float wheelAngleFR_rad = 726;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float steerAngRearAxle_rad = 1108;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float pitchAngleVar_rad2 = 1160;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float pitchAngle_rad = 1165;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float suspRoll_rad = 1440;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float xVelocity_mps = 1443;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float lateralVelocity_mps = 1539;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float drivenDistance_m = 1548;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float yPositionVar_m2 = 1601;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float xyPositionVar_m2 = 1630;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float lateralAcceleration_mps2 = 1730;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float rollRate_radps = 1892;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float yawAngleVar_rad2 = 2084;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float xPositionVar_m2 = 2237;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float wheelAngleFL_rad = 2340;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float yPosition_m = 2518;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float steerAngFrontAxle_rad = 2578;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float rollAngle_rad = 2755;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float longiVelocity_mps = 3083;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float suspPitch_rad = 3089;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional float suspHeight_m = 3343;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float rollAngleVar_rad2 = 3810;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional .pb.lsm_vedodo.direction.Direction drivingDirection_nu = 1444;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_drivingdirection_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdoEstimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  GOOGLE_DCHECK_NE(&from, this);
  const OdoEstimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdoEstimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lsm_vedodo.odo_estimation.OdoEstimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lsm_vedodo.odo_estimation.OdoEstimation)
    MergeFrom(*source);
  }
}

void OdoEstimation::MergeFrom(const OdoEstimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      verticalacceleration_mps2_ = from.verticalacceleration_mps2_;
    }
    if (cached_has_bits & 0x00000004u) {
      pitchrate_radps_ = from.pitchrate_radps_;
    }
    if (cached_has_bits & 0x00000008u) {
      yxpositionvar_m2_ = from.yxpositionvar_m2_;
    }
    if (cached_has_bits & 0x00000010u) {
      sideslipangle_rad_ = from.sideslipangle_rad_;
    }
    if (cached_has_bits & 0x00000020u) {
      yvelocity_mps_ = from.yvelocity_mps_;
    }
    if (cached_has_bits & 0x00000040u) {
      yawrate_radps_ = from.yawrate_radps_;
    }
    if (cached_has_bits & 0x00000080u) {
      motionstatus_nu_ = from.motionstatus_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      xposition_m_ = from.xposition_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      yawangle_rad_ = from.yawangle_rad_;
    }
    if (cached_has_bits & 0x00000400u) {
      longiacceleration_mps2_ = from.longiacceleration_mps2_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheelanglefr_rad_ = from.wheelanglefr_rad_;
    }
    if (cached_has_bits & 0x00001000u) {
      steerangrearaxle_rad_ = from.steerangrearaxle_rad_;
    }
    if (cached_has_bits & 0x00002000u) {
      pitchanglevar_rad2_ = from.pitchanglevar_rad2_;
    }
    if (cached_has_bits & 0x00004000u) {
      pitchangle_rad_ = from.pitchangle_rad_;
    }
    if (cached_has_bits & 0x00008000u) {
      susproll_rad_ = from.susproll_rad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      xvelocity_mps_ = from.xvelocity_mps_;
    }
    if (cached_has_bits & 0x00020000u) {
      lateralvelocity_mps_ = from.lateralvelocity_mps_;
    }
    if (cached_has_bits & 0x00040000u) {
      drivendistance_m_ = from.drivendistance_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ypositionvar_m2_ = from.ypositionvar_m2_;
    }
    if (cached_has_bits & 0x00100000u) {
      xypositionvar_m2_ = from.xypositionvar_m2_;
    }
    if (cached_has_bits & 0x00200000u) {
      lateralacceleration_mps2_ = from.lateralacceleration_mps2_;
    }
    if (cached_has_bits & 0x00400000u) {
      rollrate_radps_ = from.rollrate_radps_;
    }
    if (cached_has_bits & 0x00800000u) {
      yawanglevar_rad2_ = from.yawanglevar_rad2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x02000000u) {
      xpositionvar_m2_ = from.xpositionvar_m2_;
    }
    if (cached_has_bits & 0x04000000u) {
      wheelanglefl_rad_ = from.wheelanglefl_rad_;
    }
    if (cached_has_bits & 0x08000000u) {
      yposition_m_ = from.yposition_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      steerangfrontaxle_rad_ = from.steerangfrontaxle_rad_;
    }
    if (cached_has_bits & 0x20000000u) {
      rollangle_rad_ = from.rollangle_rad_;
    }
    if (cached_has_bits & 0x40000000u) {
      longivelocity_mps_ = from.longivelocity_mps_;
    }
    if (cached_has_bits & 0x80000000u) {
      susppitch_rad_ = from.susppitch_rad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      suspheight_m_ = from.suspheight_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      rollanglevar_rad2_ = from.rollanglevar_rad2_;
    }
    if (cached_has_bits & 0x00000004u) {
      drivingdirection_nu_ = from.drivingdirection_nu_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void OdoEstimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdoEstimation::CopyFrom(const OdoEstimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdoEstimation::IsInitialized() const {
  return true;
}

void OdoEstimation::InternalSwap(OdoEstimation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(ssigheader_, other->ssigheader_);
  swap(verticalacceleration_mps2_, other->verticalacceleration_mps2_);
  swap(pitchrate_radps_, other->pitchrate_radps_);
  swap(yxpositionvar_m2_, other->yxpositionvar_m2_);
  swap(sideslipangle_rad_, other->sideslipangle_rad_);
  swap(yvelocity_mps_, other->yvelocity_mps_);
  swap(yawrate_radps_, other->yawrate_radps_);
  swap(motionstatus_nu_, other->motionstatus_nu_);
  swap(xposition_m_, other->xposition_m_);
  swap(yawangle_rad_, other->yawangle_rad_);
  swap(longiacceleration_mps2_, other->longiacceleration_mps2_);
  swap(wheelanglefr_rad_, other->wheelanglefr_rad_);
  swap(steerangrearaxle_rad_, other->steerangrearaxle_rad_);
  swap(pitchanglevar_rad2_, other->pitchanglevar_rad2_);
  swap(pitchangle_rad_, other->pitchangle_rad_);
  swap(susproll_rad_, other->susproll_rad_);
  swap(xvelocity_mps_, other->xvelocity_mps_);
  swap(lateralvelocity_mps_, other->lateralvelocity_mps_);
  swap(drivendistance_m_, other->drivendistance_m_);
  swap(ypositionvar_m2_, other->ypositionvar_m2_);
  swap(xypositionvar_m2_, other->xypositionvar_m2_);
  swap(lateralacceleration_mps2_, other->lateralacceleration_mps2_);
  swap(rollrate_radps_, other->rollrate_radps_);
  swap(yawanglevar_rad2_, other->yawanglevar_rad2_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(xpositionvar_m2_, other->xpositionvar_m2_);
  swap(wheelanglefl_rad_, other->wheelanglefl_rad_);
  swap(yposition_m_, other->yposition_m_);
  swap(steerangfrontaxle_rad_, other->steerangfrontaxle_rad_);
  swap(rollangle_rad_, other->rollangle_rad_);
  swap(longivelocity_mps_, other->longivelocity_mps_);
  swap(susppitch_rad_, other->susppitch_rad_);
  swap(suspheight_m_, other->suspheight_m_);
  swap(rollanglevar_rad2_, other->rollanglevar_rad2_);
  swap(drivingdirection_nu_, other->drivingdirection_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdoEstimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OdoEstimation_array_port::InitAsDefaultInstance() {
}
class OdoEstimation_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<OdoEstimation_array_port>()._has_bits_);
};

OdoEstimation_array_port::OdoEstimation_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
}
OdoEstimation_array_port::OdoEstimation_array_port(const OdoEstimation_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
}

void OdoEstimation_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdoEstimation_array_port_lsm_5fvedodo_2fodo_5festimation_2eproto.base);
}

OdoEstimation_array_port::~OdoEstimation_array_port() {
  // @@protoc_insertion_point(destructor:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  SharedDtor();
}

void OdoEstimation_array_port::SharedDtor() {
}

void OdoEstimation_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdoEstimation_array_port& OdoEstimation_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdoEstimation_array_port_lsm_5fvedodo_2fodo_5festimation_2eproto.base);
  return *internal_default_instance();
}


void OdoEstimation_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OdoEstimation_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.lsm_vedodo.odo_estimation.OdoEstimation data = 1958;
      case 1958:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15666>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdoEstimation_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.lsm_vedodo.odo_estimation.OdoEstimation data = 1958;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1958, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  return target;
}

size_t OdoEstimation_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.lsm_vedodo.odo_estimation.OdoEstimation data = 1958;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdoEstimation_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const OdoEstimation_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdoEstimation_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
    MergeFrom(*source);
  }
}

void OdoEstimation_array_port::MergeFrom(const OdoEstimation_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void OdoEstimation_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdoEstimation_array_port::CopyFrom(const OdoEstimation_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdoEstimation_array_port::IsInitialized() const {
  return true;
}

void OdoEstimation_array_port::InternalSwap(OdoEstimation_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdoEstimation_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace odo_estimation
}  // namespace lsm_vedodo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::lsm_vedodo::odo_estimation::OdoEstimation* Arena::CreateMaybeMessage< ::pb::lsm_vedodo::odo_estimation::OdoEstimation >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lsm_vedodo::odo_estimation::OdoEstimation >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port* Arena::CreateMaybeMessage< ::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
