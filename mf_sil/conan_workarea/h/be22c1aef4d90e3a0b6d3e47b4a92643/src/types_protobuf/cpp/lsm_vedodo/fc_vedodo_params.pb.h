// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lsm_vedodo/fc_vedodo_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto;
namespace pb {
namespace lsm_vedodo {
namespace fc_vedodo_params {
class FC_VEDODO_Params;
class FC_VEDODO_ParamsDefaultTypeInternal;
extern FC_VEDODO_ParamsDefaultTypeInternal _FC_VEDODO_Params_default_instance_;
class FC_VEDODO_Params_array_port;
class FC_VEDODO_Params_array_portDefaultTypeInternal;
extern FC_VEDODO_Params_array_portDefaultTypeInternal _FC_VEDODO_Params_array_port_default_instance_;
}  // namespace fc_vedodo_params
}  // namespace lsm_vedodo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* Arena::CreateMaybeMessage<::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params>(Arena*);
template<> ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port* Arena::CreateMaybeMessage<::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace lsm_vedodo {
namespace fc_vedodo_params {

// ===================================================================

class FC_VEDODO_Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params) */ {
 public:
  FC_VEDODO_Params();
  virtual ~FC_VEDODO_Params();

  FC_VEDODO_Params(const FC_VEDODO_Params& from);
  FC_VEDODO_Params(FC_VEDODO_Params&& from) noexcept
    : FC_VEDODO_Params() {
    *this = ::std::move(from);
  }

  inline FC_VEDODO_Params& operator=(const FC_VEDODO_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_VEDODO_Params& operator=(FC_VEDODO_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_VEDODO_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_VEDODO_Params* internal_default_instance() {
    return reinterpret_cast<const FC_VEDODO_Params*>(
               &_FC_VEDODO_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FC_VEDODO_Params& a, FC_VEDODO_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_VEDODO_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_VEDODO_Params* New() const final {
    return CreateMaybeMessage<FC_VEDODO_Params>(nullptr);
  }

  FC_VEDODO_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_VEDODO_Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_VEDODO_Params& from);
  void MergeFrom(const FC_VEDODO_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_VEDODO_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto);
    return ::descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLSMOIMUMOUNTINGPOSTRANSLATIONMFieldNumber = 555,
    kLSMOSTEERPOLYCTRWHLRADFieldNumber = 2561,
    kLSMOIMUMOUNTINGPOSROTATIONRADFieldNumber = 3066,
    kSSigHeaderFieldNumber = 1033,
    kLSMOREARAXLETOCOR1MFieldNumber = 3822,
    kLSMOMSEMOTIONSTATUSTIMERSFieldNumber = 31,
    kLSMOSIGNALLATENCYSFieldNumber = 135,
    kLSMOREARAXLETOCOR3MFieldNumber = 142,
    kLSMOWHEELBASEMFieldNumber = 536,
    kLSMOMAXWHEELPULSEVALUENUFieldNumber = 647,
    kLSMOYOCMAXSTRWHLVELRADPSFieldNumber = 754,
    kLSMOGYROLINEARERRFACTORFieldNumber = 789,
    kLSMOMAXPOSPHIVALUERADFieldNumber = 876,
    kLSMOMAXPOSYVALUEMFieldNumber = 932,
    kLSMOWSSTRAIGHTTHRESHMPSFieldNumber = 1207,
    kLSMOTRACKFRONTMFieldNumber = 1324,
    kLSMOUSEYAWSTANDSTILLCORRFieldNumber = 1388,
    kLSMODRIVINGDIRECTIONMETHODFieldNumber = 1396,
    kLSMOSAMPLETIMESFieldNumber = 1723,
    kLSMOREARAXLETOCOR2MFieldNumber = 1982,
    kUiVersionNumberFieldNumber = 2124,
    kLSMOUSESTEERWHEELANGFILTFieldNumber = 2140,
    kLSMOMAXPOSXVALUEMFieldNumber = 2183,
    kLSMOTYRECIRCUMFERENCEREMFieldNumber = 2344,
    kLSMOYAWRATESIGNALLATENCYSFieldNumber = 2360,
    kLSMOSIDESLIPANGLEGRADIENTRADS2PMFieldNumber = 2424,
    kLSMOWHEELNUMBEROFTEETHNUFieldNumber = 2447,
    kLSMOTYRECIRCUMFERENCEINESCFieldNumber = 2905,
    kLSMOSTEERANGTOYAWANGNUFieldNumber = 3607,
    kLSMOTRACKREARMFieldNumber = 3690,
    kLSMOTYRECIRCUMFERENCEFRMFieldNumber = 3725,
  };
  // repeated float LSM_O_IMU_MOUNTING_POS_TRANSLATION_M = 555;
  int lsm_o_imu_mounting_pos_translation_m_size() const;
  private:
  int _internal_lsm_o_imu_mounting_pos_translation_m_size() const;
  public:
  void clear_lsm_o_imu_mounting_pos_translation_m();
  private:
  float _internal_lsm_o_imu_mounting_pos_translation_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_lsm_o_imu_mounting_pos_translation_m() const;
  void _internal_add_lsm_o_imu_mounting_pos_translation_m(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_lsm_o_imu_mounting_pos_translation_m();
  public:
  float lsm_o_imu_mounting_pos_translation_m(int index) const;
  void set_lsm_o_imu_mounting_pos_translation_m(int index, float value);
  void add_lsm_o_imu_mounting_pos_translation_m(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lsm_o_imu_mounting_pos_translation_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lsm_o_imu_mounting_pos_translation_m();

  // repeated float LSM_O_STEER_POLY_CTR_WHL_RAD = 2561;
  int lsm_o_steer_poly_ctr_whl_rad_size() const;
  private:
  int _internal_lsm_o_steer_poly_ctr_whl_rad_size() const;
  public:
  void clear_lsm_o_steer_poly_ctr_whl_rad();
  private:
  float _internal_lsm_o_steer_poly_ctr_whl_rad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_lsm_o_steer_poly_ctr_whl_rad() const;
  void _internal_add_lsm_o_steer_poly_ctr_whl_rad(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_lsm_o_steer_poly_ctr_whl_rad();
  public:
  float lsm_o_steer_poly_ctr_whl_rad(int index) const;
  void set_lsm_o_steer_poly_ctr_whl_rad(int index, float value);
  void add_lsm_o_steer_poly_ctr_whl_rad(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lsm_o_steer_poly_ctr_whl_rad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lsm_o_steer_poly_ctr_whl_rad();

  // repeated float LSM_O_IMU_MOUNTING_POS_ROTATION_RAD = 3066;
  int lsm_o_imu_mounting_pos_rotation_rad_size() const;
  private:
  int _internal_lsm_o_imu_mounting_pos_rotation_rad_size() const;
  public:
  void clear_lsm_o_imu_mounting_pos_rotation_rad();
  private:
  float _internal_lsm_o_imu_mounting_pos_rotation_rad(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_lsm_o_imu_mounting_pos_rotation_rad() const;
  void _internal_add_lsm_o_imu_mounting_pos_rotation_rad(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_lsm_o_imu_mounting_pos_rotation_rad();
  public:
  float lsm_o_imu_mounting_pos_rotation_rad(int index) const;
  void set_lsm_o_imu_mounting_pos_rotation_rad(int index, float value);
  void add_lsm_o_imu_mounting_pos_rotation_rad(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lsm_o_imu_mounting_pos_rotation_rad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lsm_o_imu_mounting_pos_rotation_rad();

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float LSM_O_REAR_AXLE_TO_COR_1_M = 3822;
  bool has_lsm_o_rear_axle_to_cor_1_m() const;
  private:
  bool _internal_has_lsm_o_rear_axle_to_cor_1_m() const;
  public:
  void clear_lsm_o_rear_axle_to_cor_1_m();
  float lsm_o_rear_axle_to_cor_1_m() const;
  void set_lsm_o_rear_axle_to_cor_1_m(float value);
  private:
  float _internal_lsm_o_rear_axle_to_cor_1_m() const;
  void _internal_set_lsm_o_rear_axle_to_cor_1_m(float value);
  public:

  // optional float LSM_O_MSE_MOTION_STATUS_TIMER_S = 31;
  bool has_lsm_o_mse_motion_status_timer_s() const;
  private:
  bool _internal_has_lsm_o_mse_motion_status_timer_s() const;
  public:
  void clear_lsm_o_mse_motion_status_timer_s();
  float lsm_o_mse_motion_status_timer_s() const;
  void set_lsm_o_mse_motion_status_timer_s(float value);
  private:
  float _internal_lsm_o_mse_motion_status_timer_s() const;
  void _internal_set_lsm_o_mse_motion_status_timer_s(float value);
  public:

  // optional float LSM_O_SIGNAL_LATENCY_S = 135;
  bool has_lsm_o_signal_latency_s() const;
  private:
  bool _internal_has_lsm_o_signal_latency_s() const;
  public:
  void clear_lsm_o_signal_latency_s();
  float lsm_o_signal_latency_s() const;
  void set_lsm_o_signal_latency_s(float value);
  private:
  float _internal_lsm_o_signal_latency_s() const;
  void _internal_set_lsm_o_signal_latency_s(float value);
  public:

  // optional float LSM_O_REAR_AXLE_TO_COR_3_M = 142;
  bool has_lsm_o_rear_axle_to_cor_3_m() const;
  private:
  bool _internal_has_lsm_o_rear_axle_to_cor_3_m() const;
  public:
  void clear_lsm_o_rear_axle_to_cor_3_m();
  float lsm_o_rear_axle_to_cor_3_m() const;
  void set_lsm_o_rear_axle_to_cor_3_m(float value);
  private:
  float _internal_lsm_o_rear_axle_to_cor_3_m() const;
  void _internal_set_lsm_o_rear_axle_to_cor_3_m(float value);
  public:

  // optional float LSM_O_WHEELBASE_M = 536;
  bool has_lsm_o_wheelbase_m() const;
  private:
  bool _internal_has_lsm_o_wheelbase_m() const;
  public:
  void clear_lsm_o_wheelbase_m();
  float lsm_o_wheelbase_m() const;
  void set_lsm_o_wheelbase_m(float value);
  private:
  float _internal_lsm_o_wheelbase_m() const;
  void _internal_set_lsm_o_wheelbase_m(float value);
  public:

  // optional uint32 LSM_O_MAX_WHEEL_PULSE_VALUE_NU = 647;
  bool has_lsm_o_max_wheel_pulse_value_nu() const;
  private:
  bool _internal_has_lsm_o_max_wheel_pulse_value_nu() const;
  public:
  void clear_lsm_o_max_wheel_pulse_value_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_max_wheel_pulse_value_nu() const;
  void set_lsm_o_max_wheel_pulse_value_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lsm_o_max_wheel_pulse_value_nu() const;
  void _internal_set_lsm_o_max_wheel_pulse_value_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float LSM_O_YOC_MAX_STRWHL_VEL_RADPS = 754;
  bool has_lsm_o_yoc_max_strwhl_vel_radps() const;
  private:
  bool _internal_has_lsm_o_yoc_max_strwhl_vel_radps() const;
  public:
  void clear_lsm_o_yoc_max_strwhl_vel_radps();
  float lsm_o_yoc_max_strwhl_vel_radps() const;
  void set_lsm_o_yoc_max_strwhl_vel_radps(float value);
  private:
  float _internal_lsm_o_yoc_max_strwhl_vel_radps() const;
  void _internal_set_lsm_o_yoc_max_strwhl_vel_radps(float value);
  public:

  // optional float LSM_O_GYRO_LINEAR_ERR_FACTOR = 789;
  bool has_lsm_o_gyro_linear_err_factor() const;
  private:
  bool _internal_has_lsm_o_gyro_linear_err_factor() const;
  public:
  void clear_lsm_o_gyro_linear_err_factor();
  float lsm_o_gyro_linear_err_factor() const;
  void set_lsm_o_gyro_linear_err_factor(float value);
  private:
  float _internal_lsm_o_gyro_linear_err_factor() const;
  void _internal_set_lsm_o_gyro_linear_err_factor(float value);
  public:

  // optional float LSM_O_MAX_POS_PHI_VALUE_RAD = 876;
  bool has_lsm_o_max_pos_phi_value_rad() const;
  private:
  bool _internal_has_lsm_o_max_pos_phi_value_rad() const;
  public:
  void clear_lsm_o_max_pos_phi_value_rad();
  float lsm_o_max_pos_phi_value_rad() const;
  void set_lsm_o_max_pos_phi_value_rad(float value);
  private:
  float _internal_lsm_o_max_pos_phi_value_rad() const;
  void _internal_set_lsm_o_max_pos_phi_value_rad(float value);
  public:

  // optional float LSM_O_MAX_POS_Y_VALUE_M = 932;
  bool has_lsm_o_max_pos_y_value_m() const;
  private:
  bool _internal_has_lsm_o_max_pos_y_value_m() const;
  public:
  void clear_lsm_o_max_pos_y_value_m();
  float lsm_o_max_pos_y_value_m() const;
  void set_lsm_o_max_pos_y_value_m(float value);
  private:
  float _internal_lsm_o_max_pos_y_value_m() const;
  void _internal_set_lsm_o_max_pos_y_value_m(float value);
  public:

  // optional float LSM_O_WS_STRAIGHT_THRESH_MPS = 1207;
  bool has_lsm_o_ws_straight_thresh_mps() const;
  private:
  bool _internal_has_lsm_o_ws_straight_thresh_mps() const;
  public:
  void clear_lsm_o_ws_straight_thresh_mps();
  float lsm_o_ws_straight_thresh_mps() const;
  void set_lsm_o_ws_straight_thresh_mps(float value);
  private:
  float _internal_lsm_o_ws_straight_thresh_mps() const;
  void _internal_set_lsm_o_ws_straight_thresh_mps(float value);
  public:

  // optional float LSM_O_TRACK_FRONT_M = 1324;
  bool has_lsm_o_track_front_m() const;
  private:
  bool _internal_has_lsm_o_track_front_m() const;
  public:
  void clear_lsm_o_track_front_m();
  float lsm_o_track_front_m() const;
  void set_lsm_o_track_front_m(float value);
  private:
  float _internal_lsm_o_track_front_m() const;
  void _internal_set_lsm_o_track_front_m(float value);
  public:

  // optional uint32 LSM_O_USE_YAW_STANDSTILL_CORR = 1388;
  bool has_lsm_o_use_yaw_standstill_corr() const;
  private:
  bool _internal_has_lsm_o_use_yaw_standstill_corr() const;
  public:
  void clear_lsm_o_use_yaw_standstill_corr();
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_use_yaw_standstill_corr() const;
  void set_lsm_o_use_yaw_standstill_corr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lsm_o_use_yaw_standstill_corr() const;
  void _internal_set_lsm_o_use_yaw_standstill_corr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 LSM_O_DRIVING_DIRECTION_METHOD = 1396;
  bool has_lsm_o_driving_direction_method() const;
  private:
  bool _internal_has_lsm_o_driving_direction_method() const;
  public:
  void clear_lsm_o_driving_direction_method();
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_driving_direction_method() const;
  void set_lsm_o_driving_direction_method(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lsm_o_driving_direction_method() const;
  void _internal_set_lsm_o_driving_direction_method(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float LSM_O_SAMPLE_TIME_S = 1723;
  bool has_lsm_o_sample_time_s() const;
  private:
  bool _internal_has_lsm_o_sample_time_s() const;
  public:
  void clear_lsm_o_sample_time_s();
  float lsm_o_sample_time_s() const;
  void set_lsm_o_sample_time_s(float value);
  private:
  float _internal_lsm_o_sample_time_s() const;
  void _internal_set_lsm_o_sample_time_s(float value);
  public:

  // optional float LSM_O_REAR_AXLE_TO_COR_2_M = 1982;
  bool has_lsm_o_rear_axle_to_cor_2_m() const;
  private:
  bool _internal_has_lsm_o_rear_axle_to_cor_2_m() const;
  public:
  void clear_lsm_o_rear_axle_to_cor_2_m();
  float lsm_o_rear_axle_to_cor_2_m() const;
  void set_lsm_o_rear_axle_to_cor_2_m(float value);
  private:
  float _internal_lsm_o_rear_axle_to_cor_2_m() const;
  void _internal_set_lsm_o_rear_axle_to_cor_2_m(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 LSM_O_USE_STEER_WHEEL_ANG_FILT = 2140;
  bool has_lsm_o_use_steer_wheel_ang_filt() const;
  private:
  bool _internal_has_lsm_o_use_steer_wheel_ang_filt() const;
  public:
  void clear_lsm_o_use_steer_wheel_ang_filt();
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_use_steer_wheel_ang_filt() const;
  void set_lsm_o_use_steer_wheel_ang_filt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lsm_o_use_steer_wheel_ang_filt() const;
  void _internal_set_lsm_o_use_steer_wheel_ang_filt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float LSM_O_MAX_POS_X_VALUE_M = 2183;
  bool has_lsm_o_max_pos_x_value_m() const;
  private:
  bool _internal_has_lsm_o_max_pos_x_value_m() const;
  public:
  void clear_lsm_o_max_pos_x_value_m();
  float lsm_o_max_pos_x_value_m() const;
  void set_lsm_o_max_pos_x_value_m(float value);
  private:
  float _internal_lsm_o_max_pos_x_value_m() const;
  void _internal_set_lsm_o_max_pos_x_value_m(float value);
  public:

  // optional float LSM_O_TYRE_CIRCUMFERENCE_RE_M = 2344;
  bool has_lsm_o_tyre_circumference_re_m() const;
  private:
  bool _internal_has_lsm_o_tyre_circumference_re_m() const;
  public:
  void clear_lsm_o_tyre_circumference_re_m();
  float lsm_o_tyre_circumference_re_m() const;
  void set_lsm_o_tyre_circumference_re_m(float value);
  private:
  float _internal_lsm_o_tyre_circumference_re_m() const;
  void _internal_set_lsm_o_tyre_circumference_re_m(float value);
  public:

  // optional float LSM_O_YAW_RATE_SIGNAL_LATENCY_S = 2360;
  bool has_lsm_o_yaw_rate_signal_latency_s() const;
  private:
  bool _internal_has_lsm_o_yaw_rate_signal_latency_s() const;
  public:
  void clear_lsm_o_yaw_rate_signal_latency_s();
  float lsm_o_yaw_rate_signal_latency_s() const;
  void set_lsm_o_yaw_rate_signal_latency_s(float value);
  private:
  float _internal_lsm_o_yaw_rate_signal_latency_s() const;
  void _internal_set_lsm_o_yaw_rate_signal_latency_s(float value);
  public:

  // optional float LSM_O_SIDE_SLIP_ANGLE_GRADIENT_RADS2PM = 2424;
  bool has_lsm_o_side_slip_angle_gradient_rads2pm() const;
  private:
  bool _internal_has_lsm_o_side_slip_angle_gradient_rads2pm() const;
  public:
  void clear_lsm_o_side_slip_angle_gradient_rads2pm();
  float lsm_o_side_slip_angle_gradient_rads2pm() const;
  void set_lsm_o_side_slip_angle_gradient_rads2pm(float value);
  private:
  float _internal_lsm_o_side_slip_angle_gradient_rads2pm() const;
  void _internal_set_lsm_o_side_slip_angle_gradient_rads2pm(float value);
  public:

  // optional uint32 LSM_O_WHEEL_NUMBER_OF_TEETH_NU = 2447;
  bool has_lsm_o_wheel_number_of_teeth_nu() const;
  private:
  bool _internal_has_lsm_o_wheel_number_of_teeth_nu() const;
  public:
  void clear_lsm_o_wheel_number_of_teeth_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_wheel_number_of_teeth_nu() const;
  void set_lsm_o_wheel_number_of_teeth_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lsm_o_wheel_number_of_teeth_nu() const;
  void _internal_set_lsm_o_wheel_number_of_teeth_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float LSM_O_TYRE_CIRCUMFERENCE_IN_ESC = 2905;
  bool has_lsm_o_tyre_circumference_in_esc() const;
  private:
  bool _internal_has_lsm_o_tyre_circumference_in_esc() const;
  public:
  void clear_lsm_o_tyre_circumference_in_esc();
  float lsm_o_tyre_circumference_in_esc() const;
  void set_lsm_o_tyre_circumference_in_esc(float value);
  private:
  float _internal_lsm_o_tyre_circumference_in_esc() const;
  void _internal_set_lsm_o_tyre_circumference_in_esc(float value);
  public:

  // optional float LSM_O_STEER_ANG_TO_YAW_ANG_NU = 3607;
  bool has_lsm_o_steer_ang_to_yaw_ang_nu() const;
  private:
  bool _internal_has_lsm_o_steer_ang_to_yaw_ang_nu() const;
  public:
  void clear_lsm_o_steer_ang_to_yaw_ang_nu();
  float lsm_o_steer_ang_to_yaw_ang_nu() const;
  void set_lsm_o_steer_ang_to_yaw_ang_nu(float value);
  private:
  float _internal_lsm_o_steer_ang_to_yaw_ang_nu() const;
  void _internal_set_lsm_o_steer_ang_to_yaw_ang_nu(float value);
  public:

  // optional float LSM_O_TRACK_REAR_M = 3690;
  bool has_lsm_o_track_rear_m() const;
  private:
  bool _internal_has_lsm_o_track_rear_m() const;
  public:
  void clear_lsm_o_track_rear_m();
  float lsm_o_track_rear_m() const;
  void set_lsm_o_track_rear_m(float value);
  private:
  float _internal_lsm_o_track_rear_m() const;
  void _internal_set_lsm_o_track_rear_m(float value);
  public:

  // optional float LSM_O_TYRE_CIRCUMFERENCE_FR_M = 3725;
  bool has_lsm_o_tyre_circumference_fr_m() const;
  private:
  bool _internal_has_lsm_o_tyre_circumference_fr_m() const;
  public:
  void clear_lsm_o_tyre_circumference_fr_m();
  float lsm_o_tyre_circumference_fr_m() const;
  void set_lsm_o_tyre_circumference_fr_m(float value);
  private:
  float _internal_lsm_o_tyre_circumference_fr_m() const;
  void _internal_set_lsm_o_tyre_circumference_fr_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lsm_o_imu_mounting_pos_translation_m_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lsm_o_steer_poly_ctr_whl_rad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lsm_o_imu_mounting_pos_rotation_rad_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float lsm_o_rear_axle_to_cor_1_m_;
  float lsm_o_mse_motion_status_timer_s_;
  float lsm_o_signal_latency_s_;
  float lsm_o_rear_axle_to_cor_3_m_;
  float lsm_o_wheelbase_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_max_wheel_pulse_value_nu_;
  float lsm_o_yoc_max_strwhl_vel_radps_;
  float lsm_o_gyro_linear_err_factor_;
  float lsm_o_max_pos_phi_value_rad_;
  float lsm_o_max_pos_y_value_m_;
  float lsm_o_ws_straight_thresh_mps_;
  float lsm_o_track_front_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_use_yaw_standstill_corr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_driving_direction_method_;
  float lsm_o_sample_time_s_;
  float lsm_o_rear_axle_to_cor_2_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_use_steer_wheel_ang_filt_;
  float lsm_o_max_pos_x_value_m_;
  float lsm_o_tyre_circumference_re_m_;
  float lsm_o_yaw_rate_signal_latency_s_;
  float lsm_o_side_slip_angle_gradient_rads2pm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lsm_o_wheel_number_of_teeth_nu_;
  float lsm_o_tyre_circumference_in_esc_;
  float lsm_o_steer_ang_to_yaw_ang_nu_;
  float lsm_o_track_rear_m_;
  float lsm_o_tyre_circumference_fr_m_;
  friend struct ::TableStruct_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FC_VEDODO_Params_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port) */ {
 public:
  FC_VEDODO_Params_array_port();
  virtual ~FC_VEDODO_Params_array_port();

  FC_VEDODO_Params_array_port(const FC_VEDODO_Params_array_port& from);
  FC_VEDODO_Params_array_port(FC_VEDODO_Params_array_port&& from) noexcept
    : FC_VEDODO_Params_array_port() {
    *this = ::std::move(from);
  }

  inline FC_VEDODO_Params_array_port& operator=(const FC_VEDODO_Params_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_VEDODO_Params_array_port& operator=(FC_VEDODO_Params_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_VEDODO_Params_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_VEDODO_Params_array_port* internal_default_instance() {
    return reinterpret_cast<const FC_VEDODO_Params_array_port*>(
               &_FC_VEDODO_Params_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FC_VEDODO_Params_array_port& a, FC_VEDODO_Params_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_VEDODO_Params_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_VEDODO_Params_array_port* New() const final {
    return CreateMaybeMessage<FC_VEDODO_Params_array_port>(nullptr);
  }

  FC_VEDODO_Params_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_VEDODO_Params_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_VEDODO_Params_array_port& from);
  void MergeFrom(const FC_VEDODO_Params_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_VEDODO_Params_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto);
    return ::descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1264,
  };
  // repeated .pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params data = 1264;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params >*
      mutable_data();
  private:
  const ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params& _internal_data(int index) const;
  ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* _internal_add_data();
  public:
  const ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params& data(int index) const;
  ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params > data_;
  friend struct ::TableStruct_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FC_VEDODO_Params

// optional uint32 uiVersionNumber = 2124;
inline bool FC_VEDODO_Params::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FC_VEDODO_Params::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FC_VEDODO_Params::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  uiversionnumber_ = value;
}
inline void FC_VEDODO_Params::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FC_VEDODO_Params::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FC_VEDODO_Params::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FC_VEDODO_Params::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FC_VEDODO_Params::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FC_VEDODO_Params::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FC_VEDODO_Params::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FC_VEDODO_Params::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FC_VEDODO_Params::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.sSigHeader)
}

// optional float LSM_O_SAMPLE_TIME_S = 1723;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_sample_time_s() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_sample_time_s() const {
  return _internal_has_lsm_o_sample_time_s();
}
inline void FC_VEDODO_Params::clear_lsm_o_sample_time_s() {
  lsm_o_sample_time_s_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_sample_time_s() const {
  return lsm_o_sample_time_s_;
}
inline float FC_VEDODO_Params::lsm_o_sample_time_s() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_SAMPLE_TIME_S)
  return _internal_lsm_o_sample_time_s();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_sample_time_s(float value) {
  _has_bits_[0] |= 0x00008000u;
  lsm_o_sample_time_s_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_sample_time_s(float value) {
  _internal_set_lsm_o_sample_time_s(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_SAMPLE_TIME_S)
}

// optional float LSM_O_MSE_MOTION_STATUS_TIMER_S = 31;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_mse_motion_status_timer_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_mse_motion_status_timer_s() const {
  return _internal_has_lsm_o_mse_motion_status_timer_s();
}
inline void FC_VEDODO_Params::clear_lsm_o_mse_motion_status_timer_s() {
  lsm_o_mse_motion_status_timer_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_mse_motion_status_timer_s() const {
  return lsm_o_mse_motion_status_timer_s_;
}
inline float FC_VEDODO_Params::lsm_o_mse_motion_status_timer_s() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MSE_MOTION_STATUS_TIMER_S)
  return _internal_lsm_o_mse_motion_status_timer_s();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_mse_motion_status_timer_s(float value) {
  _has_bits_[0] |= 0x00000004u;
  lsm_o_mse_motion_status_timer_s_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_mse_motion_status_timer_s(float value) {
  _internal_set_lsm_o_mse_motion_status_timer_s(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MSE_MOTION_STATUS_TIMER_S)
}

// optional float LSM_O_YOC_MAX_STRWHL_VEL_RADPS = 754;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_yoc_max_strwhl_vel_radps() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_yoc_max_strwhl_vel_radps() const {
  return _internal_has_lsm_o_yoc_max_strwhl_vel_radps();
}
inline void FC_VEDODO_Params::clear_lsm_o_yoc_max_strwhl_vel_radps() {
  lsm_o_yoc_max_strwhl_vel_radps_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_yoc_max_strwhl_vel_radps() const {
  return lsm_o_yoc_max_strwhl_vel_radps_;
}
inline float FC_VEDODO_Params::lsm_o_yoc_max_strwhl_vel_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_YOC_MAX_STRWHL_VEL_RADPS)
  return _internal_lsm_o_yoc_max_strwhl_vel_radps();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_yoc_max_strwhl_vel_radps(float value) {
  _has_bits_[0] |= 0x00000080u;
  lsm_o_yoc_max_strwhl_vel_radps_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_yoc_max_strwhl_vel_radps(float value) {
  _internal_set_lsm_o_yoc_max_strwhl_vel_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_YOC_MAX_STRWHL_VEL_RADPS)
}

// optional uint32 LSM_O_MAX_WHEEL_PULSE_VALUE_NU = 647;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_max_wheel_pulse_value_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_max_wheel_pulse_value_nu() const {
  return _internal_has_lsm_o_max_wheel_pulse_value_nu();
}
inline void FC_VEDODO_Params::clear_lsm_o_max_wheel_pulse_value_nu() {
  lsm_o_max_wheel_pulse_value_nu_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::_internal_lsm_o_max_wheel_pulse_value_nu() const {
  return lsm_o_max_wheel_pulse_value_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::lsm_o_max_wheel_pulse_value_nu() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_WHEEL_PULSE_VALUE_NU)
  return _internal_lsm_o_max_wheel_pulse_value_nu();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_max_wheel_pulse_value_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  lsm_o_max_wheel_pulse_value_nu_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_max_wheel_pulse_value_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lsm_o_max_wheel_pulse_value_nu(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_WHEEL_PULSE_VALUE_NU)
}

// optional float LSM_O_MAX_POS_X_VALUE_M = 2183;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_max_pos_x_value_m() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_max_pos_x_value_m() const {
  return _internal_has_lsm_o_max_pos_x_value_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_max_pos_x_value_m() {
  lsm_o_max_pos_x_value_m_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_max_pos_x_value_m() const {
  return lsm_o_max_pos_x_value_m_;
}
inline float FC_VEDODO_Params::lsm_o_max_pos_x_value_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_POS_X_VALUE_M)
  return _internal_lsm_o_max_pos_x_value_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_max_pos_x_value_m(float value) {
  _has_bits_[0] |= 0x00080000u;
  lsm_o_max_pos_x_value_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_max_pos_x_value_m(float value) {
  _internal_set_lsm_o_max_pos_x_value_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_POS_X_VALUE_M)
}

// optional float LSM_O_MAX_POS_Y_VALUE_M = 932;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_max_pos_y_value_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_max_pos_y_value_m() const {
  return _internal_has_lsm_o_max_pos_y_value_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_max_pos_y_value_m() {
  lsm_o_max_pos_y_value_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_max_pos_y_value_m() const {
  return lsm_o_max_pos_y_value_m_;
}
inline float FC_VEDODO_Params::lsm_o_max_pos_y_value_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_POS_Y_VALUE_M)
  return _internal_lsm_o_max_pos_y_value_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_max_pos_y_value_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  lsm_o_max_pos_y_value_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_max_pos_y_value_m(float value) {
  _internal_set_lsm_o_max_pos_y_value_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_POS_Y_VALUE_M)
}

// optional float LSM_O_MAX_POS_PHI_VALUE_RAD = 876;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_max_pos_phi_value_rad() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_max_pos_phi_value_rad() const {
  return _internal_has_lsm_o_max_pos_phi_value_rad();
}
inline void FC_VEDODO_Params::clear_lsm_o_max_pos_phi_value_rad() {
  lsm_o_max_pos_phi_value_rad_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_max_pos_phi_value_rad() const {
  return lsm_o_max_pos_phi_value_rad_;
}
inline float FC_VEDODO_Params::lsm_o_max_pos_phi_value_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_POS_PHI_VALUE_RAD)
  return _internal_lsm_o_max_pos_phi_value_rad();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_max_pos_phi_value_rad(float value) {
  _has_bits_[0] |= 0x00000200u;
  lsm_o_max_pos_phi_value_rad_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_max_pos_phi_value_rad(float value) {
  _internal_set_lsm_o_max_pos_phi_value_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_MAX_POS_PHI_VALUE_RAD)
}

// optional uint32 LSM_O_USE_STEER_WHEEL_ANG_FILT = 2140;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_use_steer_wheel_ang_filt() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_use_steer_wheel_ang_filt() const {
  return _internal_has_lsm_o_use_steer_wheel_ang_filt();
}
inline void FC_VEDODO_Params::clear_lsm_o_use_steer_wheel_ang_filt() {
  lsm_o_use_steer_wheel_ang_filt_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::_internal_lsm_o_use_steer_wheel_ang_filt() const {
  return lsm_o_use_steer_wheel_ang_filt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::lsm_o_use_steer_wheel_ang_filt() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_USE_STEER_WHEEL_ANG_FILT)
  return _internal_lsm_o_use_steer_wheel_ang_filt();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_use_steer_wheel_ang_filt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  lsm_o_use_steer_wheel_ang_filt_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_use_steer_wheel_ang_filt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lsm_o_use_steer_wheel_ang_filt(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_USE_STEER_WHEEL_ANG_FILT)
}

// optional uint32 LSM_O_USE_YAW_STANDSTILL_CORR = 1388;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_use_yaw_standstill_corr() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_use_yaw_standstill_corr() const {
  return _internal_has_lsm_o_use_yaw_standstill_corr();
}
inline void FC_VEDODO_Params::clear_lsm_o_use_yaw_standstill_corr() {
  lsm_o_use_yaw_standstill_corr_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::_internal_lsm_o_use_yaw_standstill_corr() const {
  return lsm_o_use_yaw_standstill_corr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::lsm_o_use_yaw_standstill_corr() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_USE_YAW_STANDSTILL_CORR)
  return _internal_lsm_o_use_yaw_standstill_corr();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_use_yaw_standstill_corr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  lsm_o_use_yaw_standstill_corr_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_use_yaw_standstill_corr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lsm_o_use_yaw_standstill_corr(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_USE_YAW_STANDSTILL_CORR)
}

// optional uint32 LSM_O_DRIVING_DIRECTION_METHOD = 1396;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_driving_direction_method() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_driving_direction_method() const {
  return _internal_has_lsm_o_driving_direction_method();
}
inline void FC_VEDODO_Params::clear_lsm_o_driving_direction_method() {
  lsm_o_driving_direction_method_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::_internal_lsm_o_driving_direction_method() const {
  return lsm_o_driving_direction_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::lsm_o_driving_direction_method() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_DRIVING_DIRECTION_METHOD)
  return _internal_lsm_o_driving_direction_method();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_driving_direction_method(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  lsm_o_driving_direction_method_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_driving_direction_method(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lsm_o_driving_direction_method(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_DRIVING_DIRECTION_METHOD)
}

// optional float LSM_O_SIGNAL_LATENCY_S = 135;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_signal_latency_s() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_signal_latency_s() const {
  return _internal_has_lsm_o_signal_latency_s();
}
inline void FC_VEDODO_Params::clear_lsm_o_signal_latency_s() {
  lsm_o_signal_latency_s_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_signal_latency_s() const {
  return lsm_o_signal_latency_s_;
}
inline float FC_VEDODO_Params::lsm_o_signal_latency_s() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_SIGNAL_LATENCY_S)
  return _internal_lsm_o_signal_latency_s();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_signal_latency_s(float value) {
  _has_bits_[0] |= 0x00000008u;
  lsm_o_signal_latency_s_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_signal_latency_s(float value) {
  _internal_set_lsm_o_signal_latency_s(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_SIGNAL_LATENCY_S)
}

// optional float LSM_O_WS_STRAIGHT_THRESH_MPS = 1207;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_ws_straight_thresh_mps() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_ws_straight_thresh_mps() const {
  return _internal_has_lsm_o_ws_straight_thresh_mps();
}
inline void FC_VEDODO_Params::clear_lsm_o_ws_straight_thresh_mps() {
  lsm_o_ws_straight_thresh_mps_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_ws_straight_thresh_mps() const {
  return lsm_o_ws_straight_thresh_mps_;
}
inline float FC_VEDODO_Params::lsm_o_ws_straight_thresh_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_WS_STRAIGHT_THRESH_MPS)
  return _internal_lsm_o_ws_straight_thresh_mps();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_ws_straight_thresh_mps(float value) {
  _has_bits_[0] |= 0x00000800u;
  lsm_o_ws_straight_thresh_mps_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_ws_straight_thresh_mps(float value) {
  _internal_set_lsm_o_ws_straight_thresh_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_WS_STRAIGHT_THRESH_MPS)
}

// optional float LSM_O_GYRO_LINEAR_ERR_FACTOR = 789;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_gyro_linear_err_factor() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_gyro_linear_err_factor() const {
  return _internal_has_lsm_o_gyro_linear_err_factor();
}
inline void FC_VEDODO_Params::clear_lsm_o_gyro_linear_err_factor() {
  lsm_o_gyro_linear_err_factor_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_gyro_linear_err_factor() const {
  return lsm_o_gyro_linear_err_factor_;
}
inline float FC_VEDODO_Params::lsm_o_gyro_linear_err_factor() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_GYRO_LINEAR_ERR_FACTOR)
  return _internal_lsm_o_gyro_linear_err_factor();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_gyro_linear_err_factor(float value) {
  _has_bits_[0] |= 0x00000100u;
  lsm_o_gyro_linear_err_factor_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_gyro_linear_err_factor(float value) {
  _internal_set_lsm_o_gyro_linear_err_factor(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_GYRO_LINEAR_ERR_FACTOR)
}

// optional float LSM_O_YAW_RATE_SIGNAL_LATENCY_S = 2360;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_yaw_rate_signal_latency_s() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_yaw_rate_signal_latency_s() const {
  return _internal_has_lsm_o_yaw_rate_signal_latency_s();
}
inline void FC_VEDODO_Params::clear_lsm_o_yaw_rate_signal_latency_s() {
  lsm_o_yaw_rate_signal_latency_s_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_yaw_rate_signal_latency_s() const {
  return lsm_o_yaw_rate_signal_latency_s_;
}
inline float FC_VEDODO_Params::lsm_o_yaw_rate_signal_latency_s() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_YAW_RATE_SIGNAL_LATENCY_S)
  return _internal_lsm_o_yaw_rate_signal_latency_s();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_yaw_rate_signal_latency_s(float value) {
  _has_bits_[0] |= 0x00200000u;
  lsm_o_yaw_rate_signal_latency_s_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_yaw_rate_signal_latency_s(float value) {
  _internal_set_lsm_o_yaw_rate_signal_latency_s(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_YAW_RATE_SIGNAL_LATENCY_S)
}

// optional float LSM_O_WHEELBASE_M = 536;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_wheelbase_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_wheelbase_m() const {
  return _internal_has_lsm_o_wheelbase_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_wheelbase_m() {
  lsm_o_wheelbase_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_wheelbase_m() const {
  return lsm_o_wheelbase_m_;
}
inline float FC_VEDODO_Params::lsm_o_wheelbase_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_WHEELBASE_M)
  return _internal_lsm_o_wheelbase_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_wheelbase_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  lsm_o_wheelbase_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_wheelbase_m(float value) {
  _internal_set_lsm_o_wheelbase_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_WHEELBASE_M)
}

// optional uint32 LSM_O_WHEEL_NUMBER_OF_TEETH_NU = 2447;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_wheel_number_of_teeth_nu() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_wheel_number_of_teeth_nu() const {
  return _internal_has_lsm_o_wheel_number_of_teeth_nu();
}
inline void FC_VEDODO_Params::clear_lsm_o_wheel_number_of_teeth_nu() {
  lsm_o_wheel_number_of_teeth_nu_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::_internal_lsm_o_wheel_number_of_teeth_nu() const {
  return lsm_o_wheel_number_of_teeth_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_VEDODO_Params::lsm_o_wheel_number_of_teeth_nu() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_WHEEL_NUMBER_OF_TEETH_NU)
  return _internal_lsm_o_wheel_number_of_teeth_nu();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_wheel_number_of_teeth_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  lsm_o_wheel_number_of_teeth_nu_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_wheel_number_of_teeth_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lsm_o_wheel_number_of_teeth_nu(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_WHEEL_NUMBER_OF_TEETH_NU)
}

// optional float LSM_O_TYRE_CIRCUMFERENCE_FR_M = 3725;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_tyre_circumference_fr_m() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_tyre_circumference_fr_m() const {
  return _internal_has_lsm_o_tyre_circumference_fr_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_tyre_circumference_fr_m() {
  lsm_o_tyre_circumference_fr_m_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_tyre_circumference_fr_m() const {
  return lsm_o_tyre_circumference_fr_m_;
}
inline float FC_VEDODO_Params::lsm_o_tyre_circumference_fr_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TYRE_CIRCUMFERENCE_FR_M)
  return _internal_lsm_o_tyre_circumference_fr_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_tyre_circumference_fr_m(float value) {
  _has_bits_[0] |= 0x08000000u;
  lsm_o_tyre_circumference_fr_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_tyre_circumference_fr_m(float value) {
  _internal_set_lsm_o_tyre_circumference_fr_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TYRE_CIRCUMFERENCE_FR_M)
}

// optional float LSM_O_TYRE_CIRCUMFERENCE_RE_M = 2344;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_tyre_circumference_re_m() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_tyre_circumference_re_m() const {
  return _internal_has_lsm_o_tyre_circumference_re_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_tyre_circumference_re_m() {
  lsm_o_tyre_circumference_re_m_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_tyre_circumference_re_m() const {
  return lsm_o_tyre_circumference_re_m_;
}
inline float FC_VEDODO_Params::lsm_o_tyre_circumference_re_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TYRE_CIRCUMFERENCE_RE_M)
  return _internal_lsm_o_tyre_circumference_re_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_tyre_circumference_re_m(float value) {
  _has_bits_[0] |= 0x00100000u;
  lsm_o_tyre_circumference_re_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_tyre_circumference_re_m(float value) {
  _internal_set_lsm_o_tyre_circumference_re_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TYRE_CIRCUMFERENCE_RE_M)
}

// optional float LSM_O_TRACK_FRONT_M = 1324;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_track_front_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_track_front_m() const {
  return _internal_has_lsm_o_track_front_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_track_front_m() {
  lsm_o_track_front_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_track_front_m() const {
  return lsm_o_track_front_m_;
}
inline float FC_VEDODO_Params::lsm_o_track_front_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TRACK_FRONT_M)
  return _internal_lsm_o_track_front_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_track_front_m(float value) {
  _has_bits_[0] |= 0x00001000u;
  lsm_o_track_front_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_track_front_m(float value) {
  _internal_set_lsm_o_track_front_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TRACK_FRONT_M)
}

// optional float LSM_O_TRACK_REAR_M = 3690;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_track_rear_m() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_track_rear_m() const {
  return _internal_has_lsm_o_track_rear_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_track_rear_m() {
  lsm_o_track_rear_m_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_track_rear_m() const {
  return lsm_o_track_rear_m_;
}
inline float FC_VEDODO_Params::lsm_o_track_rear_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TRACK_REAR_M)
  return _internal_lsm_o_track_rear_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_track_rear_m(float value) {
  _has_bits_[0] |= 0x04000000u;
  lsm_o_track_rear_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_track_rear_m(float value) {
  _internal_set_lsm_o_track_rear_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TRACK_REAR_M)
}

// optional float LSM_O_STEER_ANG_TO_YAW_ANG_NU = 3607;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_steer_ang_to_yaw_ang_nu() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_steer_ang_to_yaw_ang_nu() const {
  return _internal_has_lsm_o_steer_ang_to_yaw_ang_nu();
}
inline void FC_VEDODO_Params::clear_lsm_o_steer_ang_to_yaw_ang_nu() {
  lsm_o_steer_ang_to_yaw_ang_nu_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_steer_ang_to_yaw_ang_nu() const {
  return lsm_o_steer_ang_to_yaw_ang_nu_;
}
inline float FC_VEDODO_Params::lsm_o_steer_ang_to_yaw_ang_nu() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_STEER_ANG_TO_YAW_ANG_NU)
  return _internal_lsm_o_steer_ang_to_yaw_ang_nu();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_steer_ang_to_yaw_ang_nu(float value) {
  _has_bits_[0] |= 0x02000000u;
  lsm_o_steer_ang_to_yaw_ang_nu_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_steer_ang_to_yaw_ang_nu(float value) {
  _internal_set_lsm_o_steer_ang_to_yaw_ang_nu(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_STEER_ANG_TO_YAW_ANG_NU)
}

// repeated float LSM_O_STEER_POLY_CTR_WHL_RAD = 2561;
inline int FC_VEDODO_Params::_internal_lsm_o_steer_poly_ctr_whl_rad_size() const {
  return lsm_o_steer_poly_ctr_whl_rad_.size();
}
inline int FC_VEDODO_Params::lsm_o_steer_poly_ctr_whl_rad_size() const {
  return _internal_lsm_o_steer_poly_ctr_whl_rad_size();
}
inline void FC_VEDODO_Params::clear_lsm_o_steer_poly_ctr_whl_rad() {
  lsm_o_steer_poly_ctr_whl_rad_.Clear();
}
inline float FC_VEDODO_Params::_internal_lsm_o_steer_poly_ctr_whl_rad(int index) const {
  return lsm_o_steer_poly_ctr_whl_rad_.Get(index);
}
inline float FC_VEDODO_Params::lsm_o_steer_poly_ctr_whl_rad(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_STEER_POLY_CTR_WHL_RAD)
  return _internal_lsm_o_steer_poly_ctr_whl_rad(index);
}
inline void FC_VEDODO_Params::set_lsm_o_steer_poly_ctr_whl_rad(int index, float value) {
  lsm_o_steer_poly_ctr_whl_rad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_STEER_POLY_CTR_WHL_RAD)
}
inline void FC_VEDODO_Params::_internal_add_lsm_o_steer_poly_ctr_whl_rad(float value) {
  lsm_o_steer_poly_ctr_whl_rad_.Add(value);
}
inline void FC_VEDODO_Params::add_lsm_o_steer_poly_ctr_whl_rad(float value) {
  _internal_add_lsm_o_steer_poly_ctr_whl_rad(value);
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_STEER_POLY_CTR_WHL_RAD)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_VEDODO_Params::_internal_lsm_o_steer_poly_ctr_whl_rad() const {
  return lsm_o_steer_poly_ctr_whl_rad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_VEDODO_Params::lsm_o_steer_poly_ctr_whl_rad() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_STEER_POLY_CTR_WHL_RAD)
  return _internal_lsm_o_steer_poly_ctr_whl_rad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_VEDODO_Params::_internal_mutable_lsm_o_steer_poly_ctr_whl_rad() {
  return &lsm_o_steer_poly_ctr_whl_rad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_VEDODO_Params::mutable_lsm_o_steer_poly_ctr_whl_rad() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_STEER_POLY_CTR_WHL_RAD)
  return _internal_mutable_lsm_o_steer_poly_ctr_whl_rad();
}

// optional float LSM_O_TYRE_CIRCUMFERENCE_IN_ESC = 2905;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_tyre_circumference_in_esc() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_tyre_circumference_in_esc() const {
  return _internal_has_lsm_o_tyre_circumference_in_esc();
}
inline void FC_VEDODO_Params::clear_lsm_o_tyre_circumference_in_esc() {
  lsm_o_tyre_circumference_in_esc_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_tyre_circumference_in_esc() const {
  return lsm_o_tyre_circumference_in_esc_;
}
inline float FC_VEDODO_Params::lsm_o_tyre_circumference_in_esc() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TYRE_CIRCUMFERENCE_IN_ESC)
  return _internal_lsm_o_tyre_circumference_in_esc();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_tyre_circumference_in_esc(float value) {
  _has_bits_[0] |= 0x01000000u;
  lsm_o_tyre_circumference_in_esc_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_tyre_circumference_in_esc(float value) {
  _internal_set_lsm_o_tyre_circumference_in_esc(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_TYRE_CIRCUMFERENCE_IN_ESC)
}

// optional float LSM_O_REAR_AXLE_TO_COR_1_M = 3822;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_rear_axle_to_cor_1_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_rear_axle_to_cor_1_m() const {
  return _internal_has_lsm_o_rear_axle_to_cor_1_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_rear_axle_to_cor_1_m() {
  lsm_o_rear_axle_to_cor_1_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_rear_axle_to_cor_1_m() const {
  return lsm_o_rear_axle_to_cor_1_m_;
}
inline float FC_VEDODO_Params::lsm_o_rear_axle_to_cor_1_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_REAR_AXLE_TO_COR_1_M)
  return _internal_lsm_o_rear_axle_to_cor_1_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_rear_axle_to_cor_1_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  lsm_o_rear_axle_to_cor_1_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_rear_axle_to_cor_1_m(float value) {
  _internal_set_lsm_o_rear_axle_to_cor_1_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_REAR_AXLE_TO_COR_1_M)
}

// optional float LSM_O_REAR_AXLE_TO_COR_2_M = 1982;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_rear_axle_to_cor_2_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_rear_axle_to_cor_2_m() const {
  return _internal_has_lsm_o_rear_axle_to_cor_2_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_rear_axle_to_cor_2_m() {
  lsm_o_rear_axle_to_cor_2_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_rear_axle_to_cor_2_m() const {
  return lsm_o_rear_axle_to_cor_2_m_;
}
inline float FC_VEDODO_Params::lsm_o_rear_axle_to_cor_2_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_REAR_AXLE_TO_COR_2_M)
  return _internal_lsm_o_rear_axle_to_cor_2_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_rear_axle_to_cor_2_m(float value) {
  _has_bits_[0] |= 0x00010000u;
  lsm_o_rear_axle_to_cor_2_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_rear_axle_to_cor_2_m(float value) {
  _internal_set_lsm_o_rear_axle_to_cor_2_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_REAR_AXLE_TO_COR_2_M)
}

// optional float LSM_O_REAR_AXLE_TO_COR_3_M = 142;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_rear_axle_to_cor_3_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_rear_axle_to_cor_3_m() const {
  return _internal_has_lsm_o_rear_axle_to_cor_3_m();
}
inline void FC_VEDODO_Params::clear_lsm_o_rear_axle_to_cor_3_m() {
  lsm_o_rear_axle_to_cor_3_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_rear_axle_to_cor_3_m() const {
  return lsm_o_rear_axle_to_cor_3_m_;
}
inline float FC_VEDODO_Params::lsm_o_rear_axle_to_cor_3_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_REAR_AXLE_TO_COR_3_M)
  return _internal_lsm_o_rear_axle_to_cor_3_m();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_rear_axle_to_cor_3_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  lsm_o_rear_axle_to_cor_3_m_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_rear_axle_to_cor_3_m(float value) {
  _internal_set_lsm_o_rear_axle_to_cor_3_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_REAR_AXLE_TO_COR_3_M)
}

// optional float LSM_O_SIDE_SLIP_ANGLE_GRADIENT_RADS2PM = 2424;
inline bool FC_VEDODO_Params::_internal_has_lsm_o_side_slip_angle_gradient_rads2pm() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FC_VEDODO_Params::has_lsm_o_side_slip_angle_gradient_rads2pm() const {
  return _internal_has_lsm_o_side_slip_angle_gradient_rads2pm();
}
inline void FC_VEDODO_Params::clear_lsm_o_side_slip_angle_gradient_rads2pm() {
  lsm_o_side_slip_angle_gradient_rads2pm_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float FC_VEDODO_Params::_internal_lsm_o_side_slip_angle_gradient_rads2pm() const {
  return lsm_o_side_slip_angle_gradient_rads2pm_;
}
inline float FC_VEDODO_Params::lsm_o_side_slip_angle_gradient_rads2pm() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_SIDE_SLIP_ANGLE_GRADIENT_RADS2PM)
  return _internal_lsm_o_side_slip_angle_gradient_rads2pm();
}
inline void FC_VEDODO_Params::_internal_set_lsm_o_side_slip_angle_gradient_rads2pm(float value) {
  _has_bits_[0] |= 0x00400000u;
  lsm_o_side_slip_angle_gradient_rads2pm_ = value;
}
inline void FC_VEDODO_Params::set_lsm_o_side_slip_angle_gradient_rads2pm(float value) {
  _internal_set_lsm_o_side_slip_angle_gradient_rads2pm(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_SIDE_SLIP_ANGLE_GRADIENT_RADS2PM)
}

// repeated float LSM_O_IMU_MOUNTING_POS_TRANSLATION_M = 555;
inline int FC_VEDODO_Params::_internal_lsm_o_imu_mounting_pos_translation_m_size() const {
  return lsm_o_imu_mounting_pos_translation_m_.size();
}
inline int FC_VEDODO_Params::lsm_o_imu_mounting_pos_translation_m_size() const {
  return _internal_lsm_o_imu_mounting_pos_translation_m_size();
}
inline void FC_VEDODO_Params::clear_lsm_o_imu_mounting_pos_translation_m() {
  lsm_o_imu_mounting_pos_translation_m_.Clear();
}
inline float FC_VEDODO_Params::_internal_lsm_o_imu_mounting_pos_translation_m(int index) const {
  return lsm_o_imu_mounting_pos_translation_m_.Get(index);
}
inline float FC_VEDODO_Params::lsm_o_imu_mounting_pos_translation_m(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_TRANSLATION_M)
  return _internal_lsm_o_imu_mounting_pos_translation_m(index);
}
inline void FC_VEDODO_Params::set_lsm_o_imu_mounting_pos_translation_m(int index, float value) {
  lsm_o_imu_mounting_pos_translation_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_TRANSLATION_M)
}
inline void FC_VEDODO_Params::_internal_add_lsm_o_imu_mounting_pos_translation_m(float value) {
  lsm_o_imu_mounting_pos_translation_m_.Add(value);
}
inline void FC_VEDODO_Params::add_lsm_o_imu_mounting_pos_translation_m(float value) {
  _internal_add_lsm_o_imu_mounting_pos_translation_m(value);
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_TRANSLATION_M)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_VEDODO_Params::_internal_lsm_o_imu_mounting_pos_translation_m() const {
  return lsm_o_imu_mounting_pos_translation_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_VEDODO_Params::lsm_o_imu_mounting_pos_translation_m() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_TRANSLATION_M)
  return _internal_lsm_o_imu_mounting_pos_translation_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_VEDODO_Params::_internal_mutable_lsm_o_imu_mounting_pos_translation_m() {
  return &lsm_o_imu_mounting_pos_translation_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_VEDODO_Params::mutable_lsm_o_imu_mounting_pos_translation_m() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_TRANSLATION_M)
  return _internal_mutable_lsm_o_imu_mounting_pos_translation_m();
}

// repeated float LSM_O_IMU_MOUNTING_POS_ROTATION_RAD = 3066;
inline int FC_VEDODO_Params::_internal_lsm_o_imu_mounting_pos_rotation_rad_size() const {
  return lsm_o_imu_mounting_pos_rotation_rad_.size();
}
inline int FC_VEDODO_Params::lsm_o_imu_mounting_pos_rotation_rad_size() const {
  return _internal_lsm_o_imu_mounting_pos_rotation_rad_size();
}
inline void FC_VEDODO_Params::clear_lsm_o_imu_mounting_pos_rotation_rad() {
  lsm_o_imu_mounting_pos_rotation_rad_.Clear();
}
inline float FC_VEDODO_Params::_internal_lsm_o_imu_mounting_pos_rotation_rad(int index) const {
  return lsm_o_imu_mounting_pos_rotation_rad_.Get(index);
}
inline float FC_VEDODO_Params::lsm_o_imu_mounting_pos_rotation_rad(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_ROTATION_RAD)
  return _internal_lsm_o_imu_mounting_pos_rotation_rad(index);
}
inline void FC_VEDODO_Params::set_lsm_o_imu_mounting_pos_rotation_rad(int index, float value) {
  lsm_o_imu_mounting_pos_rotation_rad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_ROTATION_RAD)
}
inline void FC_VEDODO_Params::_internal_add_lsm_o_imu_mounting_pos_rotation_rad(float value) {
  lsm_o_imu_mounting_pos_rotation_rad_.Add(value);
}
inline void FC_VEDODO_Params::add_lsm_o_imu_mounting_pos_rotation_rad(float value) {
  _internal_add_lsm_o_imu_mounting_pos_rotation_rad(value);
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_ROTATION_RAD)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_VEDODO_Params::_internal_lsm_o_imu_mounting_pos_rotation_rad() const {
  return lsm_o_imu_mounting_pos_rotation_rad_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_VEDODO_Params::lsm_o_imu_mounting_pos_rotation_rad() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_ROTATION_RAD)
  return _internal_lsm_o_imu_mounting_pos_rotation_rad();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_VEDODO_Params::_internal_mutable_lsm_o_imu_mounting_pos_rotation_rad() {
  return &lsm_o_imu_mounting_pos_rotation_rad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_VEDODO_Params::mutable_lsm_o_imu_mounting_pos_rotation_rad() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params.LSM_O_IMU_MOUNTING_POS_ROTATION_RAD)
  return _internal_mutable_lsm_o_imu_mounting_pos_rotation_rad();
}

// -------------------------------------------------------------------

// FC_VEDODO_Params_array_port

// repeated .pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params data = 1264;
inline int FC_VEDODO_Params_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FC_VEDODO_Params_array_port::data_size() const {
  return _internal_data_size();
}
inline void FC_VEDODO_Params_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* FC_VEDODO_Params_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params >*
FC_VEDODO_Params_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port.data)
  return &data_;
}
inline const ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params& FC_VEDODO_Params_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params& FC_VEDODO_Params_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port.data)
  return _internal_data(index);
}
inline ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* FC_VEDODO_Params_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* FC_VEDODO_Params_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params >&
FC_VEDODO_Params_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fc_vedodo_params
}  // namespace lsm_vedodo
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto
