// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lsm_vedodo/fc_vedodo_params.proto

#include "lsm_vedodo/fc_vedodo_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto;
namespace pb {
namespace lsm_vedodo {
namespace fc_vedodo_params {
class FC_VEDODO_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_VEDODO_Params> _instance;
} _FC_VEDODO_Params_default_instance_;
class FC_VEDODO_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_VEDODO_Params_array_port> _instance;
} _FC_VEDODO_Params_array_port_default_instance_;
}  // namespace fc_vedodo_params
}  // namespace lsm_vedodo
}  // namespace pb
static void InitDefaultsscc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lsm_vedodo::fc_vedodo_params::_FC_VEDODO_Params_default_instance_;
    new (ptr) ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_VEDODO_Params_array_port_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lsm_vedodo::fc_vedodo_params::_FC_VEDODO_Params_array_port_default_instance_;
    new (ptr) ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_VEDODO_Params_array_port_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_VEDODO_Params_array_port_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto}, {
      &scc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_sample_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_mse_motion_status_timer_s_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_yoc_max_strwhl_vel_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_max_wheel_pulse_value_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_max_pos_x_value_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_max_pos_y_value_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_max_pos_phi_value_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_use_steer_wheel_ang_filt_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_use_yaw_standstill_corr_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_driving_direction_method_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_signal_latency_s_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_ws_straight_thresh_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_gyro_linear_err_factor_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_yaw_rate_signal_latency_s_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_wheelbase_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_wheel_number_of_teeth_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_tyre_circumference_fr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_tyre_circumference_re_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_track_front_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_track_rear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_steer_ang_to_yaw_ang_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_steer_poly_ctr_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_tyre_circumference_in_esc_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_rear_axle_to_cor_1_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_rear_axle_to_cor_2_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_rear_axle_to_cor_3_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_side_slip_angle_gradient_rads2pm_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_imu_mounting_pos_translation_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params, lsm_o_imu_mounting_pos_rotation_rad_),
  17,
  0,
  15,
  2,
  7,
  6,
  19,
  10,
  9,
  18,
  13,
  14,
  3,
  11,
  8,
  21,
  5,
  23,
  27,
  20,
  12,
  26,
  25,
  ~0u,
  24,
  1,
  16,
  4,
  22,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, sizeof(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params)},
  { 67, 73, sizeof(::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::lsm_vedodo::fc_vedodo_params::_FC_VEDODO_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::lsm_vedodo::fc_vedodo_params::_FC_VEDODO_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!lsm_vedodo/fc_vedodo_params.proto\022\036pb."
  "lsm_vedodo.fc_vedodo_params\032\027eco/signal_"
  "header.proto\"\301\t\n\020FC_VEDODO_Params\022\030\n\017uiV"
  "ersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\013"
  "2\".pb.eco.signal_header.SignalHeader\022\034\n\023"
  "LSM_O_SAMPLE_TIME_S\030\273\r \001(\002\022\'\n\037LSM_O_MSE_"
  "MOTION_STATUS_TIMER_S\030\037 \001(\002\022\'\n\036LSM_O_YOC"
  "_MAX_STRWHL_VEL_RADPS\030\362\005 \001(\002\022\'\n\036LSM_O_MA"
  "X_WHEEL_PULSE_VALUE_NU\030\207\005 \001(\r\022 \n\027LSM_O_M"
  "AX_POS_X_VALUE_M\030\207\021 \001(\002\022 \n\027LSM_O_MAX_POS"
  "_Y_VALUE_M\030\244\007 \001(\002\022$\n\033LSM_O_MAX_POS_PHI_V"
  "ALUE_RAD\030\354\006 \001(\002\022\'\n\036LSM_O_USE_STEER_WHEEL"
  "_ANG_FILT\030\334\020 \001(\r\022&\n\035LSM_O_USE_YAW_STANDS"
  "TILL_CORR\030\354\n \001(\r\022\'\n\036LSM_O_DRIVING_DIRECT"
  "ION_METHOD\030\364\n \001(\r\022\037\n\026LSM_O_SIGNAL_LATENC"
  "Y_S\030\207\001 \001(\002\022%\n\034LSM_O_WS_STRAIGHT_THRESH_M"
  "PS\030\267\t \001(\002\022%\n\034LSM_O_GYRO_LINEAR_ERR_FACTO"
  "R\030\225\006 \001(\002\022(\n\037LSM_O_YAW_RATE_SIGNAL_LATENC"
  "Y_S\030\270\022 \001(\002\022\032\n\021LSM_O_WHEELBASE_M\030\230\004 \001(\002\022\'"
  "\n\036LSM_O_WHEEL_NUMBER_OF_TEETH_NU\030\217\023 \001(\r\022"
  "&\n\035LSM_O_TYRE_CIRCUMFERENCE_FR_M\030\215\035 \001(\002\022"
  "&\n\035LSM_O_TYRE_CIRCUMFERENCE_RE_M\030\250\022 \001(\002\022"
  "\034\n\023LSM_O_TRACK_FRONT_M\030\254\n \001(\002\022\033\n\022LSM_O_T"
  "RACK_REAR_M\030\352\034 \001(\002\022&\n\035LSM_O_STEER_ANG_TO"
  "_YAW_ANG_NU\030\227\034 \001(\002\022%\n\034LSM_O_STEER_POLY_C"
  "TR_WHL_RAD\030\201\024 \003(\002\022(\n\037LSM_O_TYRE_CIRCUMFE"
  "RENCE_IN_ESC\030\331\026 \001(\002\022#\n\032LSM_O_REAR_AXLE_T"
  "O_COR_1_M\030\356\035 \001(\002\022#\n\032LSM_O_REAR_AXLE_TO_C"
  "OR_2_M\030\276\017 \001(\002\022#\n\032LSM_O_REAR_AXLE_TO_COR_"
  "3_M\030\216\001 \001(\002\022/\n&LSM_O_SIDE_SLIP_ANGLE_GRAD"
  "IENT_RADS2PM\030\370\022 \001(\002\022-\n$LSM_O_IMU_MOUNTIN"
  "G_POS_TRANSLATION_M\030\253\004 \003(\002\022,\n#LSM_O_IMU_"
  "MOUNTING_POS_ROTATION_RAD\030\372\027 \003(\002\"^\n\033FC_V"
  "EDODO_Params_array_port\022\?\n\004data\030\360\t \003(\01320"
  ".pb.lsm_vedodo.fc_vedodo_params.FC_VEDOD"
  "O_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.base,
  &scc_info_FC_VEDODO_Params_array_port_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_once;
static bool descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto = {
  &descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_initialized, descriptor_table_protodef_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto, "lsm_vedodo/fc_vedodo_params.proto", 1408,
  &descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_once, descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_sccs, descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto::offsets,
  file_level_metadata_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto, 2, file_level_enum_descriptors_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto, file_level_service_descriptors_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto), true);
namespace pb {
namespace lsm_vedodo {
namespace fc_vedodo_params {

// ===================================================================

void FC_VEDODO_Params::InitAsDefaultInstance() {
  ::pb::lsm_vedodo::fc_vedodo_params::_FC_VEDODO_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_VEDODO_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_VEDODO_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_VEDODO_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lsm_o_sample_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lsm_o_mse_motion_status_timer_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lsm_o_yoc_max_strwhl_vel_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lsm_o_max_wheel_pulse_value_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lsm_o_max_pos_x_value_m(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lsm_o_max_pos_y_value_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lsm_o_max_pos_phi_value_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lsm_o_use_steer_wheel_ang_filt(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lsm_o_use_yaw_standstill_corr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lsm_o_driving_direction_method(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lsm_o_signal_latency_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lsm_o_ws_straight_thresh_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lsm_o_gyro_linear_err_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lsm_o_yaw_rate_signal_latency_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_lsm_o_wheelbase_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lsm_o_wheel_number_of_teeth_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_lsm_o_tyre_circumference_fr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_lsm_o_tyre_circumference_re_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lsm_o_track_front_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lsm_o_track_rear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_lsm_o_steer_ang_to_yaw_ang_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_lsm_o_tyre_circumference_in_esc(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_lsm_o_rear_axle_to_cor_1_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lsm_o_rear_axle_to_cor_2_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lsm_o_rear_axle_to_cor_3_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lsm_o_side_slip_angle_gradient_rads2pm(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_VEDODO_Params::_Internal::ssigheader(const FC_VEDODO_Params* msg) {
  return *msg->ssigheader_;
}
void FC_VEDODO_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_VEDODO_Params::FC_VEDODO_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
}
FC_VEDODO_Params::FC_VEDODO_Params(const FC_VEDODO_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lsm_o_imu_mounting_pos_translation_m_(from.lsm_o_imu_mounting_pos_translation_m_),
      lsm_o_steer_poly_ctr_whl_rad_(from.lsm_o_steer_poly_ctr_whl_rad_),
      lsm_o_imu_mounting_pos_rotation_rad_(from.lsm_o_imu_mounting_pos_rotation_rad_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&lsm_o_rear_axle_to_cor_1_m_, &from.lsm_o_rear_axle_to_cor_1_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&lsm_o_tyre_circumference_fr_m_) -
    reinterpret_cast<char*>(&lsm_o_rear_axle_to_cor_1_m_)) + sizeof(lsm_o_tyre_circumference_fr_m_));
  // @@protoc_insertion_point(copy_constructor:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
}

void FC_VEDODO_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lsm_o_tyre_circumference_fr_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(lsm_o_tyre_circumference_fr_m_));
}

FC_VEDODO_Params::~FC_VEDODO_Params() {
  // @@protoc_insertion_point(destructor:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  SharedDtor();
}

void FC_VEDODO_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_VEDODO_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_VEDODO_Params& FC_VEDODO_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_VEDODO_Params_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_VEDODO_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lsm_o_imu_mounting_pos_translation_m_.Clear();
  lsm_o_steer_poly_ctr_whl_rad_.Clear();
  lsm_o_imu_mounting_pos_rotation_rad_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lsm_o_rear_axle_to_cor_1_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lsm_o_yoc_max_strwhl_vel_radps_) -
        reinterpret_cast<char*>(&lsm_o_rear_axle_to_cor_1_m_)) + sizeof(lsm_o_yoc_max_strwhl_vel_radps_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&lsm_o_gyro_linear_err_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lsm_o_sample_time_s_) -
        reinterpret_cast<char*>(&lsm_o_gyro_linear_err_factor_)) + sizeof(lsm_o_sample_time_s_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&lsm_o_rear_axle_to_cor_2_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lsm_o_wheel_number_of_teeth_nu_) -
        reinterpret_cast<char*>(&lsm_o_rear_axle_to_cor_2_m_)) + sizeof(lsm_o_wheel_number_of_teeth_nu_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&lsm_o_tyre_circumference_in_esc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lsm_o_tyre_circumference_fr_m_) -
        reinterpret_cast<char*>(&lsm_o_tyre_circumference_in_esc_)) + sizeof(lsm_o_tyre_circumference_fr_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_VEDODO_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float LSM_O_MSE_MOTION_STATUS_TIMER_S = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_lsm_o_mse_motion_status_timer_s(&has_bits);
          lsm_o_mse_motion_status_timer_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_SIGNAL_LATENCY_S = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_lsm_o_signal_latency_s(&has_bits);
          lsm_o_signal_latency_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_REAR_AXLE_TO_COR_3_M = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_lsm_o_rear_axle_to_cor_3_m(&has_bits);
          lsm_o_rear_axle_to_cor_3_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_WHEELBASE_M = 536;
      case 536:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_lsm_o_wheelbase_m(&has_bits);
          lsm_o_wheelbase_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float LSM_O_IMU_MOUNTING_POS_TRANSLATION_M = 555;
      case 555:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_lsm_o_imu_mounting_pos_translation_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<4445>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_lsm_o_imu_mounting_pos_translation_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 LSM_O_MAX_WHEEL_PULSE_VALUE_NU = 647;
      case 647:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lsm_o_max_wheel_pulse_value_nu(&has_bits);
          lsm_o_max_wheel_pulse_value_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_YOC_MAX_STRWHL_VEL_RADPS = 754;
      case 754:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_lsm_o_yoc_max_strwhl_vel_radps(&has_bits);
          lsm_o_yoc_max_strwhl_vel_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_GYRO_LINEAR_ERR_FACTOR = 789;
      case 789:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_lsm_o_gyro_linear_err_factor(&has_bits);
          lsm_o_gyro_linear_err_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_MAX_POS_PHI_VALUE_RAD = 876;
      case 876:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_lsm_o_max_pos_phi_value_rad(&has_bits);
          lsm_o_max_pos_phi_value_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_MAX_POS_Y_VALUE_M = 932;
      case 932:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_lsm_o_max_pos_y_value_m(&has_bits);
          lsm_o_max_pos_y_value_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_WS_STRAIGHT_THRESH_MPS = 1207;
      case 1207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_lsm_o_ws_straight_thresh_mps(&has_bits);
          lsm_o_ws_straight_thresh_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_TRACK_FRONT_M = 1324;
      case 1324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_lsm_o_track_front_m(&has_bits);
          lsm_o_track_front_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 LSM_O_USE_YAW_STANDSTILL_CORR = 1388;
      case 1388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_lsm_o_use_yaw_standstill_corr(&has_bits);
          lsm_o_use_yaw_standstill_corr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 LSM_O_DRIVING_DIRECTION_METHOD = 1396;
      case 1396:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_lsm_o_driving_direction_method(&has_bits);
          lsm_o_driving_direction_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_SAMPLE_TIME_S = 1723;
      case 1723:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_lsm_o_sample_time_s(&has_bits);
          lsm_o_sample_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_REAR_AXLE_TO_COR_2_M = 1982;
      case 1982:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_lsm_o_rear_axle_to_cor_2_m(&has_bits);
          lsm_o_rear_axle_to_cor_2_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 LSM_O_USE_STEER_WHEEL_ANG_FILT = 2140;
      case 2140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_lsm_o_use_steer_wheel_ang_filt(&has_bits);
          lsm_o_use_steer_wheel_ang_filt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_MAX_POS_X_VALUE_M = 2183;
      case 2183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_lsm_o_max_pos_x_value_m(&has_bits);
          lsm_o_max_pos_x_value_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_TYRE_CIRCUMFERENCE_RE_M = 2344;
      case 2344:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_lsm_o_tyre_circumference_re_m(&has_bits);
          lsm_o_tyre_circumference_re_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_YAW_RATE_SIGNAL_LATENCY_S = 2360;
      case 2360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_lsm_o_yaw_rate_signal_latency_s(&has_bits);
          lsm_o_yaw_rate_signal_latency_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_SIDE_SLIP_ANGLE_GRADIENT_RADS2PM = 2424;
      case 2424:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_lsm_o_side_slip_angle_gradient_rads2pm(&has_bits);
          lsm_o_side_slip_angle_gradient_rads2pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 LSM_O_WHEEL_NUMBER_OF_TEETH_NU = 2447;
      case 2447:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_lsm_o_wheel_number_of_teeth_nu(&has_bits);
          lsm_o_wheel_number_of_teeth_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float LSM_O_STEER_POLY_CTR_WHL_RAD = 2561;
      case 2561:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _internal_add_lsm_o_steer_poly_ctr_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_lsm_o_steer_poly_ctr_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_TYRE_CIRCUMFERENCE_IN_ESC = 2905;
      case 2905:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_lsm_o_tyre_circumference_in_esc(&has_bits);
          lsm_o_tyre_circumference_in_esc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float LSM_O_IMU_MOUNTING_POS_ROTATION_RAD = 3066;
      case 3066:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _internal_add_lsm_o_imu_mounting_pos_rotation_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_lsm_o_imu_mounting_pos_rotation_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_STEER_ANG_TO_YAW_ANG_NU = 3607;
      case 3607:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_lsm_o_steer_ang_to_yaw_ang_nu(&has_bits);
          lsm_o_steer_ang_to_yaw_ang_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_TRACK_REAR_M = 3690;
      case 3690:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_lsm_o_track_rear_m(&has_bits);
          lsm_o_track_rear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_TYRE_CIRCUMFERENCE_FR_M = 3725;
      case 3725:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_lsm_o_tyre_circumference_fr_m(&has_bits);
          lsm_o_tyre_circumference_fr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float LSM_O_REAR_AXLE_TO_COR_1_M = 3822;
      case 3822:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_lsm_o_rear_axle_to_cor_1_m(&has_bits);
          lsm_o_rear_axle_to_cor_1_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_VEDODO_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float LSM_O_MSE_MOTION_STATUS_TIMER_S = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_lsm_o_mse_motion_status_timer_s(), target);
  }

  // optional float LSM_O_SIGNAL_LATENCY_S = 135;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(135, this->_internal_lsm_o_signal_latency_s(), target);
  }

  // optional float LSM_O_REAR_AXLE_TO_COR_3_M = 142;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(142, this->_internal_lsm_o_rear_axle_to_cor_3_m(), target);
  }

  // optional float LSM_O_WHEELBASE_M = 536;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(536, this->_internal_lsm_o_wheelbase_m(), target);
  }

  // repeated float LSM_O_IMU_MOUNTING_POS_TRANSLATION_M = 555;
  for (int i = 0, n = this->_internal_lsm_o_imu_mounting_pos_translation_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(555, this->_internal_lsm_o_imu_mounting_pos_translation_m(i), target);
  }

  // optional uint32 LSM_O_MAX_WHEEL_PULSE_VALUE_NU = 647;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(647, this->_internal_lsm_o_max_wheel_pulse_value_nu(), target);
  }

  // optional float LSM_O_YOC_MAX_STRWHL_VEL_RADPS = 754;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(754, this->_internal_lsm_o_yoc_max_strwhl_vel_radps(), target);
  }

  // optional float LSM_O_GYRO_LINEAR_ERR_FACTOR = 789;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(789, this->_internal_lsm_o_gyro_linear_err_factor(), target);
  }

  // optional float LSM_O_MAX_POS_PHI_VALUE_RAD = 876;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(876, this->_internal_lsm_o_max_pos_phi_value_rad(), target);
  }

  // optional float LSM_O_MAX_POS_Y_VALUE_M = 932;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(932, this->_internal_lsm_o_max_pos_y_value_m(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float LSM_O_WS_STRAIGHT_THRESH_MPS = 1207;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1207, this->_internal_lsm_o_ws_straight_thresh_mps(), target);
  }

  // optional float LSM_O_TRACK_FRONT_M = 1324;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1324, this->_internal_lsm_o_track_front_m(), target);
  }

  // optional uint32 LSM_O_USE_YAW_STANDSTILL_CORR = 1388;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1388, this->_internal_lsm_o_use_yaw_standstill_corr(), target);
  }

  // optional uint32 LSM_O_DRIVING_DIRECTION_METHOD = 1396;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1396, this->_internal_lsm_o_driving_direction_method(), target);
  }

  // optional float LSM_O_SAMPLE_TIME_S = 1723;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1723, this->_internal_lsm_o_sample_time_s(), target);
  }

  // optional float LSM_O_REAR_AXLE_TO_COR_2_M = 1982;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1982, this->_internal_lsm_o_rear_axle_to_cor_2_m(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional uint32 LSM_O_USE_STEER_WHEEL_ANG_FILT = 2140;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2140, this->_internal_lsm_o_use_steer_wheel_ang_filt(), target);
  }

  // optional float LSM_O_MAX_POS_X_VALUE_M = 2183;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2183, this->_internal_lsm_o_max_pos_x_value_m(), target);
  }

  // optional float LSM_O_TYRE_CIRCUMFERENCE_RE_M = 2344;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2344, this->_internal_lsm_o_tyre_circumference_re_m(), target);
  }

  // optional float LSM_O_YAW_RATE_SIGNAL_LATENCY_S = 2360;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2360, this->_internal_lsm_o_yaw_rate_signal_latency_s(), target);
  }

  // optional float LSM_O_SIDE_SLIP_ANGLE_GRADIENT_RADS2PM = 2424;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2424, this->_internal_lsm_o_side_slip_angle_gradient_rads2pm(), target);
  }

  // optional uint32 LSM_O_WHEEL_NUMBER_OF_TEETH_NU = 2447;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2447, this->_internal_lsm_o_wheel_number_of_teeth_nu(), target);
  }

  // repeated float LSM_O_STEER_POLY_CTR_WHL_RAD = 2561;
  for (int i = 0, n = this->_internal_lsm_o_steer_poly_ctr_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2561, this->_internal_lsm_o_steer_poly_ctr_whl_rad(i), target);
  }

  // optional float LSM_O_TYRE_CIRCUMFERENCE_IN_ESC = 2905;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2905, this->_internal_lsm_o_tyre_circumference_in_esc(), target);
  }

  // repeated float LSM_O_IMU_MOUNTING_POS_ROTATION_RAD = 3066;
  for (int i = 0, n = this->_internal_lsm_o_imu_mounting_pos_rotation_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3066, this->_internal_lsm_o_imu_mounting_pos_rotation_rad(i), target);
  }

  // optional float LSM_O_STEER_ANG_TO_YAW_ANG_NU = 3607;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3607, this->_internal_lsm_o_steer_ang_to_yaw_ang_nu(), target);
  }

  // optional float LSM_O_TRACK_REAR_M = 3690;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3690, this->_internal_lsm_o_track_rear_m(), target);
  }

  // optional float LSM_O_TYRE_CIRCUMFERENCE_FR_M = 3725;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3725, this->_internal_lsm_o_tyre_circumference_fr_m(), target);
  }

  // optional float LSM_O_REAR_AXLE_TO_COR_1_M = 3822;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3822, this->_internal_lsm_o_rear_axle_to_cor_1_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  return target;
}

size_t FC_VEDODO_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float LSM_O_IMU_MOUNTING_POS_TRANSLATION_M = 555;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lsm_o_imu_mounting_pos_translation_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lsm_o_imu_mounting_pos_translation_m_size());
    total_size += data_size;
  }

  // repeated float LSM_O_STEER_POLY_CTR_WHL_RAD = 2561;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lsm_o_steer_poly_ctr_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lsm_o_steer_poly_ctr_whl_rad_size());
    total_size += data_size;
  }

  // repeated float LSM_O_IMU_MOUNTING_POS_ROTATION_RAD = 3066;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lsm_o_imu_mounting_pos_rotation_rad_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lsm_o_imu_mounting_pos_rotation_rad_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float LSM_O_REAR_AXLE_TO_COR_1_M = 3822;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float LSM_O_MSE_MOTION_STATUS_TIMER_S = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float LSM_O_SIGNAL_LATENCY_S = 135;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float LSM_O_REAR_AXLE_TO_COR_3_M = 142;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float LSM_O_WHEELBASE_M = 536;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional uint32 LSM_O_MAX_WHEEL_PULSE_VALUE_NU = 647;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lsm_o_max_wheel_pulse_value_nu());
    }

    // optional float LSM_O_YOC_MAX_STRWHL_VEL_RADPS = 754;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float LSM_O_GYRO_LINEAR_ERR_FACTOR = 789;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float LSM_O_MAX_POS_PHI_VALUE_RAD = 876;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float LSM_O_MAX_POS_Y_VALUE_M = 932;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float LSM_O_WS_STRAIGHT_THRESH_MPS = 1207;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float LSM_O_TRACK_FRONT_M = 1324;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional uint32 LSM_O_USE_YAW_STANDSTILL_CORR = 1388;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lsm_o_use_yaw_standstill_corr());
    }

    // optional uint32 LSM_O_DRIVING_DIRECTION_METHOD = 1396;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lsm_o_driving_direction_method());
    }

    // optional float LSM_O_SAMPLE_TIME_S = 1723;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float LSM_O_REAR_AXLE_TO_COR_2_M = 1982;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 LSM_O_USE_STEER_WHEEL_ANG_FILT = 2140;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lsm_o_use_steer_wheel_ang_filt());
    }

    // optional float LSM_O_MAX_POS_X_VALUE_M = 2183;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float LSM_O_TYRE_CIRCUMFERENCE_RE_M = 2344;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float LSM_O_YAW_RATE_SIGNAL_LATENCY_S = 2360;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float LSM_O_SIDE_SLIP_ANGLE_GRADIENT_RADS2PM = 2424;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional uint32 LSM_O_WHEEL_NUMBER_OF_TEETH_NU = 2447;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lsm_o_wheel_number_of_teeth_nu());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional float LSM_O_TYRE_CIRCUMFERENCE_IN_ESC = 2905;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float LSM_O_STEER_ANG_TO_YAW_ANG_NU = 3607;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float LSM_O_TRACK_REAR_M = 3690;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float LSM_O_TYRE_CIRCUMFERENCE_FR_M = 3725;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_VEDODO_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_VEDODO_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_VEDODO_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
    MergeFrom(*source);
  }
}

void FC_VEDODO_Params::MergeFrom(const FC_VEDODO_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lsm_o_imu_mounting_pos_translation_m_.MergeFrom(from.lsm_o_imu_mounting_pos_translation_m_);
  lsm_o_steer_poly_ctr_whl_rad_.MergeFrom(from.lsm_o_steer_poly_ctr_whl_rad_);
  lsm_o_imu_mounting_pos_rotation_rad_.MergeFrom(from.lsm_o_imu_mounting_pos_rotation_rad_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      lsm_o_rear_axle_to_cor_1_m_ = from.lsm_o_rear_axle_to_cor_1_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      lsm_o_mse_motion_status_timer_s_ = from.lsm_o_mse_motion_status_timer_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      lsm_o_signal_latency_s_ = from.lsm_o_signal_latency_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      lsm_o_rear_axle_to_cor_3_m_ = from.lsm_o_rear_axle_to_cor_3_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      lsm_o_wheelbase_m_ = from.lsm_o_wheelbase_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      lsm_o_max_wheel_pulse_value_nu_ = from.lsm_o_max_wheel_pulse_value_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      lsm_o_yoc_max_strwhl_vel_radps_ = from.lsm_o_yoc_max_strwhl_vel_radps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      lsm_o_gyro_linear_err_factor_ = from.lsm_o_gyro_linear_err_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      lsm_o_max_pos_phi_value_rad_ = from.lsm_o_max_pos_phi_value_rad_;
    }
    if (cached_has_bits & 0x00000400u) {
      lsm_o_max_pos_y_value_m_ = from.lsm_o_max_pos_y_value_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      lsm_o_ws_straight_thresh_mps_ = from.lsm_o_ws_straight_thresh_mps_;
    }
    if (cached_has_bits & 0x00001000u) {
      lsm_o_track_front_m_ = from.lsm_o_track_front_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      lsm_o_use_yaw_standstill_corr_ = from.lsm_o_use_yaw_standstill_corr_;
    }
    if (cached_has_bits & 0x00004000u) {
      lsm_o_driving_direction_method_ = from.lsm_o_driving_direction_method_;
    }
    if (cached_has_bits & 0x00008000u) {
      lsm_o_sample_time_s_ = from.lsm_o_sample_time_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      lsm_o_rear_axle_to_cor_2_m_ = from.lsm_o_rear_axle_to_cor_2_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00040000u) {
      lsm_o_use_steer_wheel_ang_filt_ = from.lsm_o_use_steer_wheel_ang_filt_;
    }
    if (cached_has_bits & 0x00080000u) {
      lsm_o_max_pos_x_value_m_ = from.lsm_o_max_pos_x_value_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      lsm_o_tyre_circumference_re_m_ = from.lsm_o_tyre_circumference_re_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      lsm_o_yaw_rate_signal_latency_s_ = from.lsm_o_yaw_rate_signal_latency_s_;
    }
    if (cached_has_bits & 0x00400000u) {
      lsm_o_side_slip_angle_gradient_rads2pm_ = from.lsm_o_side_slip_angle_gradient_rads2pm_;
    }
    if (cached_has_bits & 0x00800000u) {
      lsm_o_wheel_number_of_teeth_nu_ = from.lsm_o_wheel_number_of_teeth_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      lsm_o_tyre_circumference_in_esc_ = from.lsm_o_tyre_circumference_in_esc_;
    }
    if (cached_has_bits & 0x02000000u) {
      lsm_o_steer_ang_to_yaw_ang_nu_ = from.lsm_o_steer_ang_to_yaw_ang_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      lsm_o_track_rear_m_ = from.lsm_o_track_rear_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      lsm_o_tyre_circumference_fr_m_ = from.lsm_o_tyre_circumference_fr_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FC_VEDODO_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_VEDODO_Params::CopyFrom(const FC_VEDODO_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_VEDODO_Params::IsInitialized() const {
  return true;
}

void FC_VEDODO_Params::InternalSwap(FC_VEDODO_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lsm_o_imu_mounting_pos_translation_m_.InternalSwap(&other->lsm_o_imu_mounting_pos_translation_m_);
  lsm_o_steer_poly_ctr_whl_rad_.InternalSwap(&other->lsm_o_steer_poly_ctr_whl_rad_);
  lsm_o_imu_mounting_pos_rotation_rad_.InternalSwap(&other->lsm_o_imu_mounting_pos_rotation_rad_);
  swap(ssigheader_, other->ssigheader_);
  swap(lsm_o_rear_axle_to_cor_1_m_, other->lsm_o_rear_axle_to_cor_1_m_);
  swap(lsm_o_mse_motion_status_timer_s_, other->lsm_o_mse_motion_status_timer_s_);
  swap(lsm_o_signal_latency_s_, other->lsm_o_signal_latency_s_);
  swap(lsm_o_rear_axle_to_cor_3_m_, other->lsm_o_rear_axle_to_cor_3_m_);
  swap(lsm_o_wheelbase_m_, other->lsm_o_wheelbase_m_);
  swap(lsm_o_max_wheel_pulse_value_nu_, other->lsm_o_max_wheel_pulse_value_nu_);
  swap(lsm_o_yoc_max_strwhl_vel_radps_, other->lsm_o_yoc_max_strwhl_vel_radps_);
  swap(lsm_o_gyro_linear_err_factor_, other->lsm_o_gyro_linear_err_factor_);
  swap(lsm_o_max_pos_phi_value_rad_, other->lsm_o_max_pos_phi_value_rad_);
  swap(lsm_o_max_pos_y_value_m_, other->lsm_o_max_pos_y_value_m_);
  swap(lsm_o_ws_straight_thresh_mps_, other->lsm_o_ws_straight_thresh_mps_);
  swap(lsm_o_track_front_m_, other->lsm_o_track_front_m_);
  swap(lsm_o_use_yaw_standstill_corr_, other->lsm_o_use_yaw_standstill_corr_);
  swap(lsm_o_driving_direction_method_, other->lsm_o_driving_direction_method_);
  swap(lsm_o_sample_time_s_, other->lsm_o_sample_time_s_);
  swap(lsm_o_rear_axle_to_cor_2_m_, other->lsm_o_rear_axle_to_cor_2_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(lsm_o_use_steer_wheel_ang_filt_, other->lsm_o_use_steer_wheel_ang_filt_);
  swap(lsm_o_max_pos_x_value_m_, other->lsm_o_max_pos_x_value_m_);
  swap(lsm_o_tyre_circumference_re_m_, other->lsm_o_tyre_circumference_re_m_);
  swap(lsm_o_yaw_rate_signal_latency_s_, other->lsm_o_yaw_rate_signal_latency_s_);
  swap(lsm_o_side_slip_angle_gradient_rads2pm_, other->lsm_o_side_slip_angle_gradient_rads2pm_);
  swap(lsm_o_wheel_number_of_teeth_nu_, other->lsm_o_wheel_number_of_teeth_nu_);
  swap(lsm_o_tyre_circumference_in_esc_, other->lsm_o_tyre_circumference_in_esc_);
  swap(lsm_o_steer_ang_to_yaw_ang_nu_, other->lsm_o_steer_ang_to_yaw_ang_nu_);
  swap(lsm_o_track_rear_m_, other->lsm_o_track_rear_m_);
  swap(lsm_o_tyre_circumference_fr_m_, other->lsm_o_tyre_circumference_fr_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_VEDODO_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_VEDODO_Params_array_port::InitAsDefaultInstance() {
}
class FC_VEDODO_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_VEDODO_Params_array_port>()._has_bits_);
};

FC_VEDODO_Params_array_port::FC_VEDODO_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
}
FC_VEDODO_Params_array_port::FC_VEDODO_Params_array_port(const FC_VEDODO_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
}

void FC_VEDODO_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_VEDODO_Params_array_port_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.base);
}

FC_VEDODO_Params_array_port::~FC_VEDODO_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  SharedDtor();
}

void FC_VEDODO_Params_array_port::SharedDtor() {
}

void FC_VEDODO_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_VEDODO_Params_array_port& FC_VEDODO_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_VEDODO_Params_array_port_lsm_5fvedodo_2ffc_5fvedodo_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_VEDODO_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_VEDODO_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params data = 1264;
      case 1264:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_VEDODO_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params data = 1264;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1264, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  return target;
}

size_t FC_VEDODO_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params data = 1264;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_VEDODO_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_VEDODO_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_VEDODO_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_VEDODO_Params_array_port::MergeFrom(const FC_VEDODO_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_VEDODO_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_VEDODO_Params_array_port::CopyFrom(const FC_VEDODO_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lsm_vedodo.fc_vedodo_params.FC_VEDODO_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_VEDODO_Params_array_port::IsInitialized() const {
  return true;
}

void FC_VEDODO_Params_array_port::InternalSwap(FC_VEDODO_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_VEDODO_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_vedodo_params
}  // namespace lsm_vedodo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params* Arena::CreateMaybeMessage< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port* Arena::CreateMaybeMessage< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lsm_vedodo::fc_vedodo_params::FC_VEDODO_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
