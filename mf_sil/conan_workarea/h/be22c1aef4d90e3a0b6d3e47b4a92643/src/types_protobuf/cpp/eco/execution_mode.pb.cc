// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eco/execution_mode.proto

#include "eco/execution_mode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fcomponent_5fexecution_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentExecutionMode_eco_2fcomponent_5fexecution_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fexecution_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace eco {
namespace execution_mode {
class ExecutionModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutionMode> _instance;
} _ExecutionMode_default_instance_;
class ExecutionMode_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecutionMode_array_port> _instance;
} _ExecutionMode_array_port_default_instance_;
}  // namespace execution_mode
}  // namespace eco
}  // namespace pb
static void InitDefaultsscc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::eco::execution_mode::_ExecutionMode_default_instance_;
    new (ptr) ::pb::eco::execution_mode::ExecutionMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::eco::execution_mode::ExecutionMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_ComponentExecutionMode_eco_2fcomponent_5fexecution_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_ExecutionMode_array_port_eco_2fexecution_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::eco::execution_mode::_ExecutionMode_array_port_default_instance_;
    new (ptr) ::pb::eco::execution_mode::ExecutionMode_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::eco::execution_mode::ExecutionMode_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecutionMode_array_port_eco_2fexecution_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecutionMode_array_port_eco_2fexecution_5fmode_2eproto}, {
      &scc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_eco_2fexecution_5fmode_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_eco_2fexecution_5fmode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_eco_2fexecution_5fmode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_eco_2fexecution_5fmode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::eco::execution_mode::ExecutionMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::execution_mode::ExecutionMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::eco::execution_mode::ExecutionMode, sigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::execution_mode::ExecutionMode, mode_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::eco::execution_mode::ExecutionMode_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::execution_mode::ExecutionMode_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::eco::execution_mode::ExecutionMode_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::eco::execution_mode::ExecutionMode)},
  { 9, 15, sizeof(::pb::eco::execution_mode::ExecutionMode_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::eco::execution_mode::_ExecutionMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::eco::execution_mode::_ExecutionMode_array_port_default_instance_),
};

const char descriptor_table_protodef_eco_2fexecution_5fmode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030eco/execution_mode.proto\022\025pb.eco.execu"
  "tion_mode\032\027eco/signal_header.proto\032\"eco/"
  "component_execution_mode.proto\"\217\001\n\rExecu"
  "tionMode\0226\n\tsigHeader\030\252\013 \001(\0132\".pb.eco.si"
  "gnal_header.SignalHeader\022F\n\004mode\030\267\006 \001(\0132"
  "7.pb.eco.component_execution_mode.Compon"
  "entExecutionMode\"O\n\030ExecutionMode_array_"
  "port\0223\n\004data\030\255\003 \003(\0132$.pb.eco.execution_m"
  "ode.ExecutionMode"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_eco_2fexecution_5fmode_2eproto_deps[2] = {
  &::descriptor_table_eco_2fcomponent_5fexecution_5fmode_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_eco_2fexecution_5fmode_2eproto_sccs[2] = {
  &scc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto.base,
  &scc_info_ExecutionMode_array_port_eco_2fexecution_5fmode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_eco_2fexecution_5fmode_2eproto_once;
static bool descriptor_table_eco_2fexecution_5fmode_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eco_2fexecution_5fmode_2eproto = {
  &descriptor_table_eco_2fexecution_5fmode_2eproto_initialized, descriptor_table_protodef_eco_2fexecution_5fmode_2eproto, "eco/execution_mode.proto", 337,
  &descriptor_table_eco_2fexecution_5fmode_2eproto_once, descriptor_table_eco_2fexecution_5fmode_2eproto_sccs, descriptor_table_eco_2fexecution_5fmode_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_eco_2fexecution_5fmode_2eproto::offsets,
  file_level_metadata_eco_2fexecution_5fmode_2eproto, 2, file_level_enum_descriptors_eco_2fexecution_5fmode_2eproto, file_level_service_descriptors_eco_2fexecution_5fmode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_eco_2fexecution_5fmode_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_eco_2fexecution_5fmode_2eproto), true);
namespace pb {
namespace eco {
namespace execution_mode {

// ===================================================================

void ExecutionMode::InitAsDefaultInstance() {
  ::pb::eco::execution_mode::_ExecutionMode_default_instance_._instance.get_mutable()->sigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::eco::execution_mode::_ExecutionMode_default_instance_._instance.get_mutable()->mode_ = const_cast< ::pb::eco::component_execution_mode::ComponentExecutionMode*>(
      ::pb::eco::component_execution_mode::ComponentExecutionMode::internal_default_instance());
}
class ExecutionMode::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecutionMode>()._has_bits_);
  static const ::pb::eco::signal_header::SignalHeader& sigheader(const ExecutionMode* msg);
  static void set_has_sigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::eco::component_execution_mode::ComponentExecutionMode& mode(const ExecutionMode* msg);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
ExecutionMode::_Internal::sigheader(const ExecutionMode* msg) {
  return *msg->sigheader_;
}
const ::pb::eco::component_execution_mode::ComponentExecutionMode&
ExecutionMode::_Internal::mode(const ExecutionMode* msg) {
  return *msg->mode_;
}
void ExecutionMode::clear_sigheader() {
  if (sigheader_ != nullptr) sigheader_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ExecutionMode::clear_mode() {
  if (mode_ != nullptr) mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ExecutionMode::ExecutionMode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.eco.execution_mode.ExecutionMode)
}
ExecutionMode::ExecutionMode(const ExecutionMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mode()) {
    mode_ = new ::pb::eco::component_execution_mode::ComponentExecutionMode(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from._internal_has_sigheader()) {
    sigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.sigheader_);
  } else {
    sigheader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.eco.execution_mode.ExecutionMode)
}

void ExecutionMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto.base);
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigheader_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(sigheader_));
}

ExecutionMode::~ExecutionMode() {
  // @@protoc_insertion_point(destructor:pb.eco.execution_mode.ExecutionMode)
  SharedDtor();
}

void ExecutionMode::SharedDtor() {
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete sigheader_;
}

void ExecutionMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionMode& ExecutionMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutionMode_eco_2fexecution_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ExecutionMode::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.eco.execution_mode.ExecutionMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mode_ != nullptr);
      mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sigheader_ != nullptr);
      sigheader_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExecutionMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.eco.component_execution_mode.ComponentExecutionMode mode = 823;
      case 823:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
      case 1450:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.eco.execution_mode.ExecutionMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.eco.component_execution_mode.ComponentExecutionMode mode = 823;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        823, _Internal::mode(this), target, stream);
  }

  // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1450, _Internal::sigheader(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.eco.execution_mode.ExecutionMode)
  return target;
}

size_t ExecutionMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.eco.execution_mode.ExecutionMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pb.eco.component_execution_mode.ComponentExecutionMode mode = 823;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_);
    }

    // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sigheader_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.eco.execution_mode.ExecutionMode)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutionMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.eco.execution_mode.ExecutionMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.eco.execution_mode.ExecutionMode)
    MergeFrom(*source);
  }
}

void ExecutionMode::MergeFrom(const ExecutionMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.eco.execution_mode.ExecutionMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mode()->::pb::eco::component_execution_mode::ComponentExecutionMode::MergeFrom(from._internal_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_sigheader());
    }
  }
}

void ExecutionMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.eco.execution_mode.ExecutionMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionMode::CopyFrom(const ExecutionMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.eco.execution_mode.ExecutionMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionMode::IsInitialized() const {
  return true;
}

void ExecutionMode::InternalSwap(ExecutionMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
  swap(sigheader_, other->sigheader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecutionMode_array_port::InitAsDefaultInstance() {
}
class ExecutionMode_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecutionMode_array_port>()._has_bits_);
};

ExecutionMode_array_port::ExecutionMode_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.eco.execution_mode.ExecutionMode_array_port)
}
ExecutionMode_array_port::ExecutionMode_array_port(const ExecutionMode_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.eco.execution_mode.ExecutionMode_array_port)
}

void ExecutionMode_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecutionMode_array_port_eco_2fexecution_5fmode_2eproto.base);
}

ExecutionMode_array_port::~ExecutionMode_array_port() {
  // @@protoc_insertion_point(destructor:pb.eco.execution_mode.ExecutionMode_array_port)
  SharedDtor();
}

void ExecutionMode_array_port::SharedDtor() {
}

void ExecutionMode_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionMode_array_port& ExecutionMode_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecutionMode_array_port_eco_2fexecution_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ExecutionMode_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.eco.execution_mode.ExecutionMode_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExecutionMode_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.eco.execution_mode.ExecutionMode data = 429;
      case 429:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3434>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecutionMode_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.eco.execution_mode.ExecutionMode_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.eco.execution_mode.ExecutionMode data = 429;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(429, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.eco.execution_mode.ExecutionMode_array_port)
  return target;
}

size_t ExecutionMode_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.eco.execution_mode.ExecutionMode_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.eco.execution_mode.ExecutionMode data = 429;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionMode_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.eco.execution_mode.ExecutionMode_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionMode_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecutionMode_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.eco.execution_mode.ExecutionMode_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.eco.execution_mode.ExecutionMode_array_port)
    MergeFrom(*source);
  }
}

void ExecutionMode_array_port::MergeFrom(const ExecutionMode_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.eco.execution_mode.ExecutionMode_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ExecutionMode_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.eco.execution_mode.ExecutionMode_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionMode_array_port::CopyFrom(const ExecutionMode_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.eco.execution_mode.ExecutionMode_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionMode_array_port::IsInitialized() const {
  return true;
}

void ExecutionMode_array_port::InternalSwap(ExecutionMode_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionMode_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace execution_mode
}  // namespace eco
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::eco::execution_mode::ExecutionMode* Arena::CreateMaybeMessage< ::pb::eco::execution_mode::ExecutionMode >(Arena* arena) {
  return Arena::CreateInternal< ::pb::eco::execution_mode::ExecutionMode >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::eco::execution_mode::ExecutionMode_array_port* Arena::CreateMaybeMessage< ::pb::eco::execution_mode::ExecutionMode_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::eco::execution_mode::ExecutionMode_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
