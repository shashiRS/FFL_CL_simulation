// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_point {
class UsProcessingPoint;
class UsProcessingPointDefaultTypeInternal;
extern UsProcessingPointDefaultTypeInternal _UsProcessingPoint_default_instance_;
class UsProcessingPoint_array_port;
class UsProcessingPoint_array_portDefaultTypeInternal;
extern UsProcessingPoint_array_portDefaultTypeInternal _UsProcessingPoint_array_port_default_instance_;
}  // namespace us_processing_point
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_processing::us_processing_point::UsProcessingPoint* Arena::CreateMaybeMessage<::pb::us_processing::us_processing_point::UsProcessingPoint>(Arena*);
template<> ::pb::us_processing::us_processing_point::UsProcessingPoint_array_port* Arena::CreateMaybeMessage<::pb::us_processing::us_processing_point::UsProcessingPoint_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_processing {
namespace us_processing_point {

// ===================================================================

class UsProcessingPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_processing.us_processing_point.UsProcessingPoint) */ {
 public:
  UsProcessingPoint();
  virtual ~UsProcessingPoint();

  UsProcessingPoint(const UsProcessingPoint& from);
  UsProcessingPoint(UsProcessingPoint&& from) noexcept
    : UsProcessingPoint() {
    *this = ::std::move(from);
  }

  inline UsProcessingPoint& operator=(const UsProcessingPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsProcessingPoint& operator=(UsProcessingPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsProcessingPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsProcessingPoint* internal_default_instance() {
    return reinterpret_cast<const UsProcessingPoint*>(
               &_UsProcessingPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsProcessingPoint& a, UsProcessingPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(UsProcessingPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsProcessingPoint* New() const final {
    return CreateMaybeMessage<UsProcessingPoint>(nullptr);
  }

  UsProcessingPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsProcessingPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsProcessingPoint& from);
  void MergeFrom(const UsProcessingPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsProcessingPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_processing.us_processing_point.UsProcessingPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto);
    return ::descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarYpositionMFieldNumber = 79,
    kXPositionMFieldNumber = 415,
    kSensorDirectionFieldNumber = 629,
    kTrackIdFieldNumber = 1297,
    kVarTrackCurvatureFieldNumber = 1550,
    kSensorMaskFieldNumber = 1763,
    kHeightConfidenceFieldNumber = 2006,
    kVarXpositionMFieldNumber = 2054,
    kDirectionFieldNumber = 2157,
    kDirectionVarianceFieldNumber = 2220,
    kYPositionMFieldNumber = 2518,
    kYSensorPosMFieldNumber = 2559,
    kXyPositionCovarMFieldNumber = 2578,
    kXSensorPosMFieldNumber = 2698,
    kProbabilityHighFieldNumber = 2890,
    kRawMeasRangeMFieldNumber = 2913,
    kPointCountInTrackFieldNumber = 3660,
    kTrackCurvatureFieldNumber = 4029,
    kTimestampUsFieldNumber = 3864,
  };
  // optional float varYposition_m = 79;
  bool has_varyposition_m() const;
  private:
  bool _internal_has_varyposition_m() const;
  public:
  void clear_varyposition_m();
  float varyposition_m() const;
  void set_varyposition_m(float value);
  private:
  float _internal_varyposition_m() const;
  void _internal_set_varyposition_m(float value);
  public:

  // optional float xPosition_m = 415;
  bool has_xposition_m() const;
  private:
  bool _internal_has_xposition_m() const;
  public:
  void clear_xposition_m();
  float xposition_m() const;
  void set_xposition_m(float value);
  private:
  float _internal_xposition_m() const;
  void _internal_set_xposition_m(float value);
  public:

  // optional float sensorDirection = 629;
  bool has_sensordirection() const;
  private:
  bool _internal_has_sensordirection() const;
  public:
  void clear_sensordirection();
  float sensordirection() const;
  void set_sensordirection(float value);
  private:
  float _internal_sensordirection() const;
  void _internal_set_sensordirection(float value);
  public:

  // optional uint32 trackId = 1297;
  bool has_trackid() const;
  private:
  bool _internal_has_trackid() const;
  public:
  void clear_trackid();
  ::PROTOBUF_NAMESPACE_ID::uint32 trackid() const;
  void set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trackid() const;
  void _internal_set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float varTrackCurvature = 1550;
  bool has_vartrackcurvature() const;
  private:
  bool _internal_has_vartrackcurvature() const;
  public:
  void clear_vartrackcurvature();
  float vartrackcurvature() const;
  void set_vartrackcurvature(float value);
  private:
  float _internal_vartrackcurvature() const;
  void _internal_set_vartrackcurvature(float value);
  public:

  // optional uint32 sensorMask = 1763;
  bool has_sensormask() const;
  private:
  bool _internal_has_sensormask() const;
  public:
  void clear_sensormask();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensormask() const;
  void set_sensormask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensormask() const;
  void _internal_set_sensormask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float heightConfidence = 2006;
  bool has_heightconfidence() const;
  private:
  bool _internal_has_heightconfidence() const;
  public:
  void clear_heightconfidence();
  float heightconfidence() const;
  void set_heightconfidence(float value);
  private:
  float _internal_heightconfidence() const;
  void _internal_set_heightconfidence(float value);
  public:

  // optional float varXposition_m = 2054;
  bool has_varxposition_m() const;
  private:
  bool _internal_has_varxposition_m() const;
  public:
  void clear_varxposition_m();
  float varxposition_m() const;
  void set_varxposition_m(float value);
  private:
  float _internal_varxposition_m() const;
  void _internal_set_varxposition_m(float value);
  public:

  // optional float direction = 2157;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // optional float directionVariance = 2220;
  bool has_directionvariance() const;
  private:
  bool _internal_has_directionvariance() const;
  public:
  void clear_directionvariance();
  float directionvariance() const;
  void set_directionvariance(float value);
  private:
  float _internal_directionvariance() const;
  void _internal_set_directionvariance(float value);
  public:

  // optional float yPosition_m = 2518;
  bool has_yposition_m() const;
  private:
  bool _internal_has_yposition_m() const;
  public:
  void clear_yposition_m();
  float yposition_m() const;
  void set_yposition_m(float value);
  private:
  float _internal_yposition_m() const;
  void _internal_set_yposition_m(float value);
  public:

  // optional float ySensorPos_m = 2559;
  bool has_ysensorpos_m() const;
  private:
  bool _internal_has_ysensorpos_m() const;
  public:
  void clear_ysensorpos_m();
  float ysensorpos_m() const;
  void set_ysensorpos_m(float value);
  private:
  float _internal_ysensorpos_m() const;
  void _internal_set_ysensorpos_m(float value);
  public:

  // optional float xyPositionCovar_m = 2578;
  bool has_xypositioncovar_m() const;
  private:
  bool _internal_has_xypositioncovar_m() const;
  public:
  void clear_xypositioncovar_m();
  float xypositioncovar_m() const;
  void set_xypositioncovar_m(float value);
  private:
  float _internal_xypositioncovar_m() const;
  void _internal_set_xypositioncovar_m(float value);
  public:

  // optional float xSensorPos_m = 2698;
  bool has_xsensorpos_m() const;
  private:
  bool _internal_has_xsensorpos_m() const;
  public:
  void clear_xsensorpos_m();
  float xsensorpos_m() const;
  void set_xsensorpos_m(float value);
  private:
  float _internal_xsensorpos_m() const;
  void _internal_set_xsensorpos_m(float value);
  public:

  // optional float probabilityHigh = 2890;
  bool has_probabilityhigh() const;
  private:
  bool _internal_has_probabilityhigh() const;
  public:
  void clear_probabilityhigh();
  float probabilityhigh() const;
  void set_probabilityhigh(float value);
  private:
  float _internal_probabilityhigh() const;
  void _internal_set_probabilityhigh(float value);
  public:

  // optional float rawMeasRange_m = 2913;
  bool has_rawmeasrange_m() const;
  private:
  bool _internal_has_rawmeasrange_m() const;
  public:
  void clear_rawmeasrange_m();
  float rawmeasrange_m() const;
  void set_rawmeasrange_m(float value);
  private:
  float _internal_rawmeasrange_m() const;
  void _internal_set_rawmeasrange_m(float value);
  public:

  // optional uint32 pointCountInTrack = 3660;
  bool has_pointcountintrack() const;
  private:
  bool _internal_has_pointcountintrack() const;
  public:
  void clear_pointcountintrack();
  ::PROTOBUF_NAMESPACE_ID::uint32 pointcountintrack() const;
  void set_pointcountintrack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pointcountintrack() const;
  void _internal_set_pointcountintrack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float trackCurvature = 4029;
  bool has_trackcurvature() const;
  private:
  bool _internal_has_trackcurvature() const;
  public:
  void clear_trackcurvature();
  float trackcurvature() const;
  void set_trackcurvature(float value);
  private:
  float _internal_trackcurvature() const;
  void _internal_set_trackcurvature(float value);
  public:

  // optional uint64 timestamp_us = 3864;
  bool has_timestamp_us() const;
  private:
  bool _internal_has_timestamp_us() const;
  public:
  void clear_timestamp_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us() const;
  void set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_us() const;
  void _internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_processing.us_processing_point.UsProcessingPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float varyposition_m_;
  float xposition_m_;
  float sensordirection_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trackid_;
  float vartrackcurvature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensormask_;
  float heightconfidence_;
  float varxposition_m_;
  float direction_;
  float directionvariance_;
  float yposition_m_;
  float ysensorpos_m_;
  float xypositioncovar_m_;
  float xsensorpos_m_;
  float probabilityhigh_;
  float rawmeasrange_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pointcountintrack_;
  float trackcurvature_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us_;
  friend struct ::TableStruct_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class UsProcessingPoint_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_processing.us_processing_point.UsProcessingPoint_array_port) */ {
 public:
  UsProcessingPoint_array_port();
  virtual ~UsProcessingPoint_array_port();

  UsProcessingPoint_array_port(const UsProcessingPoint_array_port& from);
  UsProcessingPoint_array_port(UsProcessingPoint_array_port&& from) noexcept
    : UsProcessingPoint_array_port() {
    *this = ::std::move(from);
  }

  inline UsProcessingPoint_array_port& operator=(const UsProcessingPoint_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsProcessingPoint_array_port& operator=(UsProcessingPoint_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsProcessingPoint_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsProcessingPoint_array_port* internal_default_instance() {
    return reinterpret_cast<const UsProcessingPoint_array_port*>(
               &_UsProcessingPoint_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsProcessingPoint_array_port& a, UsProcessingPoint_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsProcessingPoint_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsProcessingPoint_array_port* New() const final {
    return CreateMaybeMessage<UsProcessingPoint_array_port>(nullptr);
  }

  UsProcessingPoint_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsProcessingPoint_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsProcessingPoint_array_port& from);
  void MergeFrom(const UsProcessingPoint_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsProcessingPoint_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_processing.us_processing_point.UsProcessingPoint_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto);
    return ::descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3930,
  };
  // repeated .pb.us_processing.us_processing_point.UsProcessingPoint data = 3930;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_processing::us_processing_point::UsProcessingPoint* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_point::UsProcessingPoint >*
      mutable_data();
  private:
  const ::pb::us_processing::us_processing_point::UsProcessingPoint& _internal_data(int index) const;
  ::pb::us_processing::us_processing_point::UsProcessingPoint* _internal_add_data();
  public:
  const ::pb::us_processing::us_processing_point::UsProcessingPoint& data(int index) const;
  ::pb::us_processing::us_processing_point::UsProcessingPoint* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_point::UsProcessingPoint >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_point::UsProcessingPoint > data_;
  friend struct ::TableStruct_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsProcessingPoint

// optional uint64 timestamp_us = 3864;
inline bool UsProcessingPoint::_internal_has_timestamp_us() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_timestamp_us() const {
  return _internal_has_timestamp_us();
}
inline void UsProcessingPoint::clear_timestamp_us() {
  timestamp_us_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UsProcessingPoint::_internal_timestamp_us() const {
  return timestamp_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UsProcessingPoint::timestamp_us() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.timestamp_us)
  return _internal_timestamp_us();
}
inline void UsProcessingPoint::_internal_set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  timestamp_us_ = value;
}
inline void UsProcessingPoint::set_timestamp_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_us(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.timestamp_us)
}

// optional float xPosition_m = 415;
inline bool UsProcessingPoint::_internal_has_xposition_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_xposition_m() const {
  return _internal_has_xposition_m();
}
inline void UsProcessingPoint::clear_xposition_m() {
  xposition_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float UsProcessingPoint::_internal_xposition_m() const {
  return xposition_m_;
}
inline float UsProcessingPoint::xposition_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.xPosition_m)
  return _internal_xposition_m();
}
inline void UsProcessingPoint::_internal_set_xposition_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  xposition_m_ = value;
}
inline void UsProcessingPoint::set_xposition_m(float value) {
  _internal_set_xposition_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.xPosition_m)
}

// optional float yPosition_m = 2518;
inline bool UsProcessingPoint::_internal_has_yposition_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_yposition_m() const {
  return _internal_has_yposition_m();
}
inline void UsProcessingPoint::clear_yposition_m() {
  yposition_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float UsProcessingPoint::_internal_yposition_m() const {
  return yposition_m_;
}
inline float UsProcessingPoint::yposition_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.yPosition_m)
  return _internal_yposition_m();
}
inline void UsProcessingPoint::_internal_set_yposition_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  yposition_m_ = value;
}
inline void UsProcessingPoint::set_yposition_m(float value) {
  _internal_set_yposition_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.yPosition_m)
}

// optional float varXposition_m = 2054;
inline bool UsProcessingPoint::_internal_has_varxposition_m() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_varxposition_m() const {
  return _internal_has_varxposition_m();
}
inline void UsProcessingPoint::clear_varxposition_m() {
  varxposition_m_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float UsProcessingPoint::_internal_varxposition_m() const {
  return varxposition_m_;
}
inline float UsProcessingPoint::varxposition_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.varXposition_m)
  return _internal_varxposition_m();
}
inline void UsProcessingPoint::_internal_set_varxposition_m(float value) {
  _has_bits_[0] |= 0x00000080u;
  varxposition_m_ = value;
}
inline void UsProcessingPoint::set_varxposition_m(float value) {
  _internal_set_varxposition_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.varXposition_m)
}

// optional float varYposition_m = 79;
inline bool UsProcessingPoint::_internal_has_varyposition_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_varyposition_m() const {
  return _internal_has_varyposition_m();
}
inline void UsProcessingPoint::clear_varyposition_m() {
  varyposition_m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float UsProcessingPoint::_internal_varyposition_m() const {
  return varyposition_m_;
}
inline float UsProcessingPoint::varyposition_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.varYposition_m)
  return _internal_varyposition_m();
}
inline void UsProcessingPoint::_internal_set_varyposition_m(float value) {
  _has_bits_[0] |= 0x00000001u;
  varyposition_m_ = value;
}
inline void UsProcessingPoint::set_varyposition_m(float value) {
  _internal_set_varyposition_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.varYposition_m)
}

// optional float xyPositionCovar_m = 2578;
inline bool UsProcessingPoint::_internal_has_xypositioncovar_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_xypositioncovar_m() const {
  return _internal_has_xypositioncovar_m();
}
inline void UsProcessingPoint::clear_xypositioncovar_m() {
  xypositioncovar_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float UsProcessingPoint::_internal_xypositioncovar_m() const {
  return xypositioncovar_m_;
}
inline float UsProcessingPoint::xypositioncovar_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.xyPositionCovar_m)
  return _internal_xypositioncovar_m();
}
inline void UsProcessingPoint::_internal_set_xypositioncovar_m(float value) {
  _has_bits_[0] |= 0x00001000u;
  xypositioncovar_m_ = value;
}
inline void UsProcessingPoint::set_xypositioncovar_m(float value) {
  _internal_set_xypositioncovar_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.xyPositionCovar_m)
}

// optional float direction = 2157;
inline bool UsProcessingPoint::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_direction() const {
  return _internal_has_direction();
}
inline void UsProcessingPoint::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float UsProcessingPoint::_internal_direction() const {
  return direction_;
}
inline float UsProcessingPoint::direction() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.direction)
  return _internal_direction();
}
inline void UsProcessingPoint::_internal_set_direction(float value) {
  _has_bits_[0] |= 0x00000100u;
  direction_ = value;
}
inline void UsProcessingPoint::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.direction)
}

// optional float directionVariance = 2220;
inline bool UsProcessingPoint::_internal_has_directionvariance() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_directionvariance() const {
  return _internal_has_directionvariance();
}
inline void UsProcessingPoint::clear_directionvariance() {
  directionvariance_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float UsProcessingPoint::_internal_directionvariance() const {
  return directionvariance_;
}
inline float UsProcessingPoint::directionvariance() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.directionVariance)
  return _internal_directionvariance();
}
inline void UsProcessingPoint::_internal_set_directionvariance(float value) {
  _has_bits_[0] |= 0x00000200u;
  directionvariance_ = value;
}
inline void UsProcessingPoint::set_directionvariance(float value) {
  _internal_set_directionvariance(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.directionVariance)
}

// optional float trackCurvature = 4029;
inline bool UsProcessingPoint::_internal_has_trackcurvature() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_trackcurvature() const {
  return _internal_has_trackcurvature();
}
inline void UsProcessingPoint::clear_trackcurvature() {
  trackcurvature_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float UsProcessingPoint::_internal_trackcurvature() const {
  return trackcurvature_;
}
inline float UsProcessingPoint::trackcurvature() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.trackCurvature)
  return _internal_trackcurvature();
}
inline void UsProcessingPoint::_internal_set_trackcurvature(float value) {
  _has_bits_[0] |= 0x00020000u;
  trackcurvature_ = value;
}
inline void UsProcessingPoint::set_trackcurvature(float value) {
  _internal_set_trackcurvature(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.trackCurvature)
}

// optional float varTrackCurvature = 1550;
inline bool UsProcessingPoint::_internal_has_vartrackcurvature() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_vartrackcurvature() const {
  return _internal_has_vartrackcurvature();
}
inline void UsProcessingPoint::clear_vartrackcurvature() {
  vartrackcurvature_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float UsProcessingPoint::_internal_vartrackcurvature() const {
  return vartrackcurvature_;
}
inline float UsProcessingPoint::vartrackcurvature() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.varTrackCurvature)
  return _internal_vartrackcurvature();
}
inline void UsProcessingPoint::_internal_set_vartrackcurvature(float value) {
  _has_bits_[0] |= 0x00000010u;
  vartrackcurvature_ = value;
}
inline void UsProcessingPoint::set_vartrackcurvature(float value) {
  _internal_set_vartrackcurvature(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.varTrackCurvature)
}

// optional float probabilityHigh = 2890;
inline bool UsProcessingPoint::_internal_has_probabilityhigh() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_probabilityhigh() const {
  return _internal_has_probabilityhigh();
}
inline void UsProcessingPoint::clear_probabilityhigh() {
  probabilityhigh_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float UsProcessingPoint::_internal_probabilityhigh() const {
  return probabilityhigh_;
}
inline float UsProcessingPoint::probabilityhigh() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.probabilityHigh)
  return _internal_probabilityhigh();
}
inline void UsProcessingPoint::_internal_set_probabilityhigh(float value) {
  _has_bits_[0] |= 0x00004000u;
  probabilityhigh_ = value;
}
inline void UsProcessingPoint::set_probabilityhigh(float value) {
  _internal_set_probabilityhigh(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.probabilityHigh)
}

// optional float heightConfidence = 2006;
inline bool UsProcessingPoint::_internal_has_heightconfidence() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_heightconfidence() const {
  return _internal_has_heightconfidence();
}
inline void UsProcessingPoint::clear_heightconfidence() {
  heightconfidence_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float UsProcessingPoint::_internal_heightconfidence() const {
  return heightconfidence_;
}
inline float UsProcessingPoint::heightconfidence() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.heightConfidence)
  return _internal_heightconfidence();
}
inline void UsProcessingPoint::_internal_set_heightconfidence(float value) {
  _has_bits_[0] |= 0x00000040u;
  heightconfidence_ = value;
}
inline void UsProcessingPoint::set_heightconfidence(float value) {
  _internal_set_heightconfidence(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.heightConfidence)
}

// optional float xSensorPos_m = 2698;
inline bool UsProcessingPoint::_internal_has_xsensorpos_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_xsensorpos_m() const {
  return _internal_has_xsensorpos_m();
}
inline void UsProcessingPoint::clear_xsensorpos_m() {
  xsensorpos_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float UsProcessingPoint::_internal_xsensorpos_m() const {
  return xsensorpos_m_;
}
inline float UsProcessingPoint::xsensorpos_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.xSensorPos_m)
  return _internal_xsensorpos_m();
}
inline void UsProcessingPoint::_internal_set_xsensorpos_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  xsensorpos_m_ = value;
}
inline void UsProcessingPoint::set_xsensorpos_m(float value) {
  _internal_set_xsensorpos_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.xSensorPos_m)
}

// optional float ySensorPos_m = 2559;
inline bool UsProcessingPoint::_internal_has_ysensorpos_m() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_ysensorpos_m() const {
  return _internal_has_ysensorpos_m();
}
inline void UsProcessingPoint::clear_ysensorpos_m() {
  ysensorpos_m_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float UsProcessingPoint::_internal_ysensorpos_m() const {
  return ysensorpos_m_;
}
inline float UsProcessingPoint::ysensorpos_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.ySensorPos_m)
  return _internal_ysensorpos_m();
}
inline void UsProcessingPoint::_internal_set_ysensorpos_m(float value) {
  _has_bits_[0] |= 0x00000800u;
  ysensorpos_m_ = value;
}
inline void UsProcessingPoint::set_ysensorpos_m(float value) {
  _internal_set_ysensorpos_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.ySensorPos_m)
}

// optional float sensorDirection = 629;
inline bool UsProcessingPoint::_internal_has_sensordirection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_sensordirection() const {
  return _internal_has_sensordirection();
}
inline void UsProcessingPoint::clear_sensordirection() {
  sensordirection_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float UsProcessingPoint::_internal_sensordirection() const {
  return sensordirection_;
}
inline float UsProcessingPoint::sensordirection() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.sensorDirection)
  return _internal_sensordirection();
}
inline void UsProcessingPoint::_internal_set_sensordirection(float value) {
  _has_bits_[0] |= 0x00000004u;
  sensordirection_ = value;
}
inline void UsProcessingPoint::set_sensordirection(float value) {
  _internal_set_sensordirection(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.sensorDirection)
}

// optional uint32 sensorMask = 1763;
inline bool UsProcessingPoint::_internal_has_sensormask() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_sensormask() const {
  return _internal_has_sensormask();
}
inline void UsProcessingPoint::clear_sensormask() {
  sensormask_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingPoint::_internal_sensormask() const {
  return sensormask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingPoint::sensormask() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.sensorMask)
  return _internal_sensormask();
}
inline void UsProcessingPoint::_internal_set_sensormask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  sensormask_ = value;
}
inline void UsProcessingPoint::set_sensormask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensormask(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.sensorMask)
}

// optional float rawMeasRange_m = 2913;
inline bool UsProcessingPoint::_internal_has_rawmeasrange_m() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_rawmeasrange_m() const {
  return _internal_has_rawmeasrange_m();
}
inline void UsProcessingPoint::clear_rawmeasrange_m() {
  rawmeasrange_m_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float UsProcessingPoint::_internal_rawmeasrange_m() const {
  return rawmeasrange_m_;
}
inline float UsProcessingPoint::rawmeasrange_m() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.rawMeasRange_m)
  return _internal_rawmeasrange_m();
}
inline void UsProcessingPoint::_internal_set_rawmeasrange_m(float value) {
  _has_bits_[0] |= 0x00008000u;
  rawmeasrange_m_ = value;
}
inline void UsProcessingPoint::set_rawmeasrange_m(float value) {
  _internal_set_rawmeasrange_m(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.rawMeasRange_m)
}

// optional uint32 trackId = 1297;
inline bool UsProcessingPoint::_internal_has_trackid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_trackid() const {
  return _internal_has_trackid();
}
inline void UsProcessingPoint::clear_trackid() {
  trackid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingPoint::_internal_trackid() const {
  return trackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingPoint::trackid() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.trackId)
  return _internal_trackid();
}
inline void UsProcessingPoint::_internal_set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  trackid_ = value;
}
inline void UsProcessingPoint::set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trackid(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.trackId)
}

// optional uint32 pointCountInTrack = 3660;
inline bool UsProcessingPoint::_internal_has_pointcountintrack() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UsProcessingPoint::has_pointcountintrack() const {
  return _internal_has_pointcountintrack();
}
inline void UsProcessingPoint::clear_pointcountintrack() {
  pointcountintrack_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingPoint::_internal_pointcountintrack() const {
  return pointcountintrack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingPoint::pointcountintrack() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint.pointCountInTrack)
  return _internal_pointcountintrack();
}
inline void UsProcessingPoint::_internal_set_pointcountintrack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  pointcountintrack_ = value;
}
inline void UsProcessingPoint::set_pointcountintrack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pointcountintrack(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_point.UsProcessingPoint.pointCountInTrack)
}

// -------------------------------------------------------------------

// UsProcessingPoint_array_port

// repeated .pb.us_processing.us_processing_point.UsProcessingPoint data = 3930;
inline int UsProcessingPoint_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsProcessingPoint_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsProcessingPoint_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_processing::us_processing_point::UsProcessingPoint* UsProcessingPoint_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_processing.us_processing_point.UsProcessingPoint_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_point::UsProcessingPoint >*
UsProcessingPoint_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_processing.us_processing_point.UsProcessingPoint_array_port.data)
  return &data_;
}
inline const ::pb::us_processing::us_processing_point::UsProcessingPoint& UsProcessingPoint_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_processing::us_processing_point::UsProcessingPoint& UsProcessingPoint_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_point.UsProcessingPoint_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_processing::us_processing_point::UsProcessingPoint* UsProcessingPoint_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_processing::us_processing_point::UsProcessingPoint* UsProcessingPoint_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_processing.us_processing_point.UsProcessingPoint_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_point::UsProcessingPoint >&
UsProcessingPoint_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_processing.us_processing_point.UsProcessingPoint_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_processing_point
}  // namespace us_processing
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto
