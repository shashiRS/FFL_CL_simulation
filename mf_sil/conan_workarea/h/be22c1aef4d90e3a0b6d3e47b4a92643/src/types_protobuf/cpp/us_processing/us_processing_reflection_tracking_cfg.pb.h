// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_reflection_tracking_cfg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_reflection_tracking_cfg {
class UsProcessingReflectionTrackingCfg;
class UsProcessingReflectionTrackingCfgDefaultTypeInternal;
extern UsProcessingReflectionTrackingCfgDefaultTypeInternal _UsProcessingReflectionTrackingCfg_default_instance_;
class UsProcessingReflectionTrackingCfg_array_port;
class UsProcessingReflectionTrackingCfg_array_portDefaultTypeInternal;
extern UsProcessingReflectionTrackingCfg_array_portDefaultTypeInternal _UsProcessingReflectionTrackingCfg_array_port_default_instance_;
}  // namespace us_processing_reflection_tracking_cfg
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* Arena::CreateMaybeMessage<::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg>(Arena*);
template<> ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port* Arena::CreateMaybeMessage<::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_processing {
namespace us_processing_reflection_tracking_cfg {

// ===================================================================

class UsProcessingReflectionTrackingCfg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg) */ {
 public:
  UsProcessingReflectionTrackingCfg();
  virtual ~UsProcessingReflectionTrackingCfg();

  UsProcessingReflectionTrackingCfg(const UsProcessingReflectionTrackingCfg& from);
  UsProcessingReflectionTrackingCfg(UsProcessingReflectionTrackingCfg&& from) noexcept
    : UsProcessingReflectionTrackingCfg() {
    *this = ::std::move(from);
  }

  inline UsProcessingReflectionTrackingCfg& operator=(const UsProcessingReflectionTrackingCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsProcessingReflectionTrackingCfg& operator=(UsProcessingReflectionTrackingCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsProcessingReflectionTrackingCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsProcessingReflectionTrackingCfg* internal_default_instance() {
    return reinterpret_cast<const UsProcessingReflectionTrackingCfg*>(
               &_UsProcessingReflectionTrackingCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsProcessingReflectionTrackingCfg& a, UsProcessingReflectionTrackingCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(UsProcessingReflectionTrackingCfg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsProcessingReflectionTrackingCfg* New() const final {
    return CreateMaybeMessage<UsProcessingReflectionTrackingCfg>(nullptr);
  }

  UsProcessingReflectionTrackingCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsProcessingReflectionTrackingCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsProcessingReflectionTrackingCfg& from);
  void MergeFrom(const UsProcessingReflectionTrackingCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsProcessingReflectionTrackingCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto);
    return ::descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStableTrackerMeasurementNumberFieldNumber = 4064,
    kConvexSaturationIncrementLimitFieldNumber = 528,
    kMultiplicityMaxRadiusFieldNumber = 549,
    kMeasurementDistanceUncertaintyFieldNumber = 908,
    kMultiplicityMaxDistanceSinceLastUpdateFieldNumber = 1114,
    kHalfLifeTimeFieldNumber = 1071,
    kFovDeviationFieldNumber = 1602,
    kRftrOutputFilterConvexSaturationLimitFieldNumber = 1642,
    kConvexSaturationIncrementMultiplicatorFieldNumber = 2021,
    kRftrOutputFilterRadiusAngleSigmaFieldNumber = 2299,
    kConvexSaturationMaximumIncrementFieldNumber = 2370,
    kSingleTrackerRelaxRangeFieldNumber = 2744,
    kHalfLifeTimeMultiplicatorFieldNumber = 2846,
    kUnbindTrackerDirSigmaIncreaseFieldNumber = 2979,
    kTripleTrackerRelaxDirSigmaFieldNumber = 3188,
    kMeasurementUncertaintyModifierMaxFieldNumber = 3615,
    kMultiplicityFractionAcceptanceFieldNumber = 3805,
    kMeasurementUncertaintyMultplierFieldNumber = 3979,
    kDualTrackerRelaxDirSigmaFieldNumber = 3993,
    kSingleTrackerRelaxDirSigmaFieldNumber = 4005,
  };
  // optional uint32 stableTrackerMeasurementNumber = 4064;
  bool has_stabletrackermeasurementnumber() const;
  private:
  bool _internal_has_stabletrackermeasurementnumber() const;
  public:
  void clear_stabletrackermeasurementnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 stabletrackermeasurementnumber() const;
  void set_stabletrackermeasurementnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stabletrackermeasurementnumber() const;
  void _internal_set_stabletrackermeasurementnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float convexSaturationIncrementLimit = 528;
  bool has_convexsaturationincrementlimit() const;
  private:
  bool _internal_has_convexsaturationincrementlimit() const;
  public:
  void clear_convexsaturationincrementlimit();
  float convexsaturationincrementlimit() const;
  void set_convexsaturationincrementlimit(float value);
  private:
  float _internal_convexsaturationincrementlimit() const;
  void _internal_set_convexsaturationincrementlimit(float value);
  public:

  // optional float multiplicityMaxRadius = 549;
  bool has_multiplicitymaxradius() const;
  private:
  bool _internal_has_multiplicitymaxradius() const;
  public:
  void clear_multiplicitymaxradius();
  float multiplicitymaxradius() const;
  void set_multiplicitymaxradius(float value);
  private:
  float _internal_multiplicitymaxradius() const;
  void _internal_set_multiplicitymaxradius(float value);
  public:

  // optional float measurementDistanceUncertainty = 908;
  bool has_measurementdistanceuncertainty() const;
  private:
  bool _internal_has_measurementdistanceuncertainty() const;
  public:
  void clear_measurementdistanceuncertainty();
  float measurementdistanceuncertainty() const;
  void set_measurementdistanceuncertainty(float value);
  private:
  float _internal_measurementdistanceuncertainty() const;
  void _internal_set_measurementdistanceuncertainty(float value);
  public:

  // optional float multiplicityMaxDistanceSinceLastUpdate = 1114;
  bool has_multiplicitymaxdistancesincelastupdate() const;
  private:
  bool _internal_has_multiplicitymaxdistancesincelastupdate() const;
  public:
  void clear_multiplicitymaxdistancesincelastupdate();
  float multiplicitymaxdistancesincelastupdate() const;
  void set_multiplicitymaxdistancesincelastupdate(float value);
  private:
  float _internal_multiplicitymaxdistancesincelastupdate() const;
  void _internal_set_multiplicitymaxdistancesincelastupdate(float value);
  public:

  // optional uint64 halfLifeTime = 1071;
  bool has_halflifetime() const;
  private:
  bool _internal_has_halflifetime() const;
  public:
  void clear_halflifetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 halflifetime() const;
  void set_halflifetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_halflifetime() const;
  void _internal_set_halflifetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float fovDeviation = 1602;
  bool has_fovdeviation() const;
  private:
  bool _internal_has_fovdeviation() const;
  public:
  void clear_fovdeviation();
  float fovdeviation() const;
  void set_fovdeviation(float value);
  private:
  float _internal_fovdeviation() const;
  void _internal_set_fovdeviation(float value);
  public:

  // optional float rftrOutputFilterConvexSaturationLimit = 1642;
  bool has_rftroutputfilterconvexsaturationlimit() const;
  private:
  bool _internal_has_rftroutputfilterconvexsaturationlimit() const;
  public:
  void clear_rftroutputfilterconvexsaturationlimit();
  float rftroutputfilterconvexsaturationlimit() const;
  void set_rftroutputfilterconvexsaturationlimit(float value);
  private:
  float _internal_rftroutputfilterconvexsaturationlimit() const;
  void _internal_set_rftroutputfilterconvexsaturationlimit(float value);
  public:

  // optional float convexSaturationIncrementMultiplicator = 2021;
  bool has_convexsaturationincrementmultiplicator() const;
  private:
  bool _internal_has_convexsaturationincrementmultiplicator() const;
  public:
  void clear_convexsaturationincrementmultiplicator();
  float convexsaturationincrementmultiplicator() const;
  void set_convexsaturationincrementmultiplicator(float value);
  private:
  float _internal_convexsaturationincrementmultiplicator() const;
  void _internal_set_convexsaturationincrementmultiplicator(float value);
  public:

  // optional float rftrOutputFilterRadiusAngleSigma = 2299;
  bool has_rftroutputfilterradiusanglesigma() const;
  private:
  bool _internal_has_rftroutputfilterradiusanglesigma() const;
  public:
  void clear_rftroutputfilterradiusanglesigma();
  float rftroutputfilterradiusanglesigma() const;
  void set_rftroutputfilterradiusanglesigma(float value);
  private:
  float _internal_rftroutputfilterradiusanglesigma() const;
  void _internal_set_rftroutputfilterradiusanglesigma(float value);
  public:

  // optional float convexSaturationMaximumIncrement = 2370;
  bool has_convexsaturationmaximumincrement() const;
  private:
  bool _internal_has_convexsaturationmaximumincrement() const;
  public:
  void clear_convexsaturationmaximumincrement();
  float convexsaturationmaximumincrement() const;
  void set_convexsaturationmaximumincrement(float value);
  private:
  float _internal_convexsaturationmaximumincrement() const;
  void _internal_set_convexsaturationmaximumincrement(float value);
  public:

  // optional float singleTrackerRelaxRange = 2744;
  bool has_singletrackerrelaxrange() const;
  private:
  bool _internal_has_singletrackerrelaxrange() const;
  public:
  void clear_singletrackerrelaxrange();
  float singletrackerrelaxrange() const;
  void set_singletrackerrelaxrange(float value);
  private:
  float _internal_singletrackerrelaxrange() const;
  void _internal_set_singletrackerrelaxrange(float value);
  public:

  // optional float halfLifeTimeMultiplicator = 2846;
  bool has_halflifetimemultiplicator() const;
  private:
  bool _internal_has_halflifetimemultiplicator() const;
  public:
  void clear_halflifetimemultiplicator();
  float halflifetimemultiplicator() const;
  void set_halflifetimemultiplicator(float value);
  private:
  float _internal_halflifetimemultiplicator() const;
  void _internal_set_halflifetimemultiplicator(float value);
  public:

  // optional float unbindTrackerDirSigmaIncrease = 2979;
  bool has_unbindtrackerdirsigmaincrease() const;
  private:
  bool _internal_has_unbindtrackerdirsigmaincrease() const;
  public:
  void clear_unbindtrackerdirsigmaincrease();
  float unbindtrackerdirsigmaincrease() const;
  void set_unbindtrackerdirsigmaincrease(float value);
  private:
  float _internal_unbindtrackerdirsigmaincrease() const;
  void _internal_set_unbindtrackerdirsigmaincrease(float value);
  public:

  // optional float tripleTrackerRelaxDirSigma = 3188;
  bool has_tripletrackerrelaxdirsigma() const;
  private:
  bool _internal_has_tripletrackerrelaxdirsigma() const;
  public:
  void clear_tripletrackerrelaxdirsigma();
  float tripletrackerrelaxdirsigma() const;
  void set_tripletrackerrelaxdirsigma(float value);
  private:
  float _internal_tripletrackerrelaxdirsigma() const;
  void _internal_set_tripletrackerrelaxdirsigma(float value);
  public:

  // optional float measurementUncertaintyModifierMax = 3615;
  bool has_measurementuncertaintymodifiermax() const;
  private:
  bool _internal_has_measurementuncertaintymodifiermax() const;
  public:
  void clear_measurementuncertaintymodifiermax();
  float measurementuncertaintymodifiermax() const;
  void set_measurementuncertaintymodifiermax(float value);
  private:
  float _internal_measurementuncertaintymodifiermax() const;
  void _internal_set_measurementuncertaintymodifiermax(float value);
  public:

  // optional float multiplicityFractionAcceptance = 3805;
  bool has_multiplicityfractionacceptance() const;
  private:
  bool _internal_has_multiplicityfractionacceptance() const;
  public:
  void clear_multiplicityfractionacceptance();
  float multiplicityfractionacceptance() const;
  void set_multiplicityfractionacceptance(float value);
  private:
  float _internal_multiplicityfractionacceptance() const;
  void _internal_set_multiplicityfractionacceptance(float value);
  public:

  // optional float measurementUncertaintyMultplier = 3979;
  bool has_measurementuncertaintymultplier() const;
  private:
  bool _internal_has_measurementuncertaintymultplier() const;
  public:
  void clear_measurementuncertaintymultplier();
  float measurementuncertaintymultplier() const;
  void set_measurementuncertaintymultplier(float value);
  private:
  float _internal_measurementuncertaintymultplier() const;
  void _internal_set_measurementuncertaintymultplier(float value);
  public:

  // optional float dualTrackerRelaxDirSigma = 3993;
  bool has_dualtrackerrelaxdirsigma() const;
  private:
  bool _internal_has_dualtrackerrelaxdirsigma() const;
  public:
  void clear_dualtrackerrelaxdirsigma();
  float dualtrackerrelaxdirsigma() const;
  void set_dualtrackerrelaxdirsigma(float value);
  private:
  float _internal_dualtrackerrelaxdirsigma() const;
  void _internal_set_dualtrackerrelaxdirsigma(float value);
  public:

  // optional float singleTrackerRelaxDirSigma = 4005;
  bool has_singletrackerrelaxdirsigma() const;
  private:
  bool _internal_has_singletrackerrelaxdirsigma() const;
  public:
  void clear_singletrackerrelaxdirsigma();
  float singletrackerrelaxdirsigma() const;
  void set_singletrackerrelaxdirsigma(float value);
  private:
  float _internal_singletrackerrelaxdirsigma() const;
  void _internal_set_singletrackerrelaxdirsigma(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stabletrackermeasurementnumber_;
  float convexsaturationincrementlimit_;
  float multiplicitymaxradius_;
  float measurementdistanceuncertainty_;
  float multiplicitymaxdistancesincelastupdate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 halflifetime_;
  float fovdeviation_;
  float rftroutputfilterconvexsaturationlimit_;
  float convexsaturationincrementmultiplicator_;
  float rftroutputfilterradiusanglesigma_;
  float convexsaturationmaximumincrement_;
  float singletrackerrelaxrange_;
  float halflifetimemultiplicator_;
  float unbindtrackerdirsigmaincrease_;
  float tripletrackerrelaxdirsigma_;
  float measurementuncertaintymodifiermax_;
  float multiplicityfractionacceptance_;
  float measurementuncertaintymultplier_;
  float dualtrackerrelaxdirsigma_;
  float singletrackerrelaxdirsigma_;
  friend struct ::TableStruct_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto;
};
// -------------------------------------------------------------------

class UsProcessingReflectionTrackingCfg_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port) */ {
 public:
  UsProcessingReflectionTrackingCfg_array_port();
  virtual ~UsProcessingReflectionTrackingCfg_array_port();

  UsProcessingReflectionTrackingCfg_array_port(const UsProcessingReflectionTrackingCfg_array_port& from);
  UsProcessingReflectionTrackingCfg_array_port(UsProcessingReflectionTrackingCfg_array_port&& from) noexcept
    : UsProcessingReflectionTrackingCfg_array_port() {
    *this = ::std::move(from);
  }

  inline UsProcessingReflectionTrackingCfg_array_port& operator=(const UsProcessingReflectionTrackingCfg_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsProcessingReflectionTrackingCfg_array_port& operator=(UsProcessingReflectionTrackingCfg_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsProcessingReflectionTrackingCfg_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsProcessingReflectionTrackingCfg_array_port* internal_default_instance() {
    return reinterpret_cast<const UsProcessingReflectionTrackingCfg_array_port*>(
               &_UsProcessingReflectionTrackingCfg_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsProcessingReflectionTrackingCfg_array_port& a, UsProcessingReflectionTrackingCfg_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsProcessingReflectionTrackingCfg_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsProcessingReflectionTrackingCfg_array_port* New() const final {
    return CreateMaybeMessage<UsProcessingReflectionTrackingCfg_array_port>(nullptr);
  }

  UsProcessingReflectionTrackingCfg_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsProcessingReflectionTrackingCfg_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsProcessingReflectionTrackingCfg_array_port& from);
  void MergeFrom(const UsProcessingReflectionTrackingCfg_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsProcessingReflectionTrackingCfg_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto);
    return ::descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 822,
  };
  // repeated .pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg data = 822;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg >*
      mutable_data();
  private:
  const ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg& _internal_data(int index) const;
  ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* _internal_add_data();
  public:
  const ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg& data(int index) const;
  ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg > data_;
  friend struct ::TableStruct_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsProcessingReflectionTrackingCfg

// optional float fovDeviation = 1602;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_fovdeviation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_fovdeviation() const {
  return _internal_has_fovdeviation();
}
inline void UsProcessingReflectionTrackingCfg::clear_fovdeviation() {
  fovdeviation_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_fovdeviation() const {
  return fovdeviation_;
}
inline float UsProcessingReflectionTrackingCfg::fovdeviation() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.fovDeviation)
  return _internal_fovdeviation();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_fovdeviation(float value) {
  _has_bits_[0] |= 0x00000040u;
  fovdeviation_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_fovdeviation(float value) {
  _internal_set_fovdeviation(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.fovDeviation)
}

// optional float measurementDistanceUncertainty = 908;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_measurementdistanceuncertainty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_measurementdistanceuncertainty() const {
  return _internal_has_measurementdistanceuncertainty();
}
inline void UsProcessingReflectionTrackingCfg::clear_measurementdistanceuncertainty() {
  measurementdistanceuncertainty_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_measurementdistanceuncertainty() const {
  return measurementdistanceuncertainty_;
}
inline float UsProcessingReflectionTrackingCfg::measurementdistanceuncertainty() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.measurementDistanceUncertainty)
  return _internal_measurementdistanceuncertainty();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_measurementdistanceuncertainty(float value) {
  _has_bits_[0] |= 0x00000008u;
  measurementdistanceuncertainty_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_measurementdistanceuncertainty(float value) {
  _internal_set_measurementdistanceuncertainty(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.measurementDistanceUncertainty)
}

// optional uint64 halfLifeTime = 1071;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_halflifetime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_halflifetime() const {
  return _internal_has_halflifetime();
}
inline void UsProcessingReflectionTrackingCfg::clear_halflifetime() {
  halflifetime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UsProcessingReflectionTrackingCfg::_internal_halflifetime() const {
  return halflifetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UsProcessingReflectionTrackingCfg::halflifetime() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.halfLifeTime)
  return _internal_halflifetime();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_halflifetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  halflifetime_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_halflifetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_halflifetime(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.halfLifeTime)
}

// optional float halfLifeTimeMultiplicator = 2846;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_halflifetimemultiplicator() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_halflifetimemultiplicator() const {
  return _internal_has_halflifetimemultiplicator();
}
inline void UsProcessingReflectionTrackingCfg::clear_halflifetimemultiplicator() {
  halflifetimemultiplicator_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_halflifetimemultiplicator() const {
  return halflifetimemultiplicator_;
}
inline float UsProcessingReflectionTrackingCfg::halflifetimemultiplicator() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.halfLifeTimeMultiplicator)
  return _internal_halflifetimemultiplicator();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_halflifetimemultiplicator(float value) {
  _has_bits_[0] |= 0x00001000u;
  halflifetimemultiplicator_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_halflifetimemultiplicator(float value) {
  _internal_set_halflifetimemultiplicator(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.halfLifeTimeMultiplicator)
}

// optional float unbindTrackerDirSigmaIncrease = 2979;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_unbindtrackerdirsigmaincrease() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_unbindtrackerdirsigmaincrease() const {
  return _internal_has_unbindtrackerdirsigmaincrease();
}
inline void UsProcessingReflectionTrackingCfg::clear_unbindtrackerdirsigmaincrease() {
  unbindtrackerdirsigmaincrease_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_unbindtrackerdirsigmaincrease() const {
  return unbindtrackerdirsigmaincrease_;
}
inline float UsProcessingReflectionTrackingCfg::unbindtrackerdirsigmaincrease() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.unbindTrackerDirSigmaIncrease)
  return _internal_unbindtrackerdirsigmaincrease();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_unbindtrackerdirsigmaincrease(float value) {
  _has_bits_[0] |= 0x00002000u;
  unbindtrackerdirsigmaincrease_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_unbindtrackerdirsigmaincrease(float value) {
  _internal_set_unbindtrackerdirsigmaincrease(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.unbindTrackerDirSigmaIncrease)
}

// optional float singleTrackerRelaxDirSigma = 4005;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_singletrackerrelaxdirsigma() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_singletrackerrelaxdirsigma() const {
  return _internal_has_singletrackerrelaxdirsigma();
}
inline void UsProcessingReflectionTrackingCfg::clear_singletrackerrelaxdirsigma() {
  singletrackerrelaxdirsigma_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_singletrackerrelaxdirsigma() const {
  return singletrackerrelaxdirsigma_;
}
inline float UsProcessingReflectionTrackingCfg::singletrackerrelaxdirsigma() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.singleTrackerRelaxDirSigma)
  return _internal_singletrackerrelaxdirsigma();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_singletrackerrelaxdirsigma(float value) {
  _has_bits_[0] |= 0x00080000u;
  singletrackerrelaxdirsigma_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_singletrackerrelaxdirsigma(float value) {
  _internal_set_singletrackerrelaxdirsigma(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.singleTrackerRelaxDirSigma)
}

// optional float singleTrackerRelaxRange = 2744;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_singletrackerrelaxrange() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_singletrackerrelaxrange() const {
  return _internal_has_singletrackerrelaxrange();
}
inline void UsProcessingReflectionTrackingCfg::clear_singletrackerrelaxrange() {
  singletrackerrelaxrange_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_singletrackerrelaxrange() const {
  return singletrackerrelaxrange_;
}
inline float UsProcessingReflectionTrackingCfg::singletrackerrelaxrange() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.singleTrackerRelaxRange)
  return _internal_singletrackerrelaxrange();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_singletrackerrelaxrange(float value) {
  _has_bits_[0] |= 0x00000800u;
  singletrackerrelaxrange_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_singletrackerrelaxrange(float value) {
  _internal_set_singletrackerrelaxrange(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.singleTrackerRelaxRange)
}

// optional float dualTrackerRelaxDirSigma = 3993;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_dualtrackerrelaxdirsigma() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_dualtrackerrelaxdirsigma() const {
  return _internal_has_dualtrackerrelaxdirsigma();
}
inline void UsProcessingReflectionTrackingCfg::clear_dualtrackerrelaxdirsigma() {
  dualtrackerrelaxdirsigma_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_dualtrackerrelaxdirsigma() const {
  return dualtrackerrelaxdirsigma_;
}
inline float UsProcessingReflectionTrackingCfg::dualtrackerrelaxdirsigma() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.dualTrackerRelaxDirSigma)
  return _internal_dualtrackerrelaxdirsigma();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_dualtrackerrelaxdirsigma(float value) {
  _has_bits_[0] |= 0x00040000u;
  dualtrackerrelaxdirsigma_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_dualtrackerrelaxdirsigma(float value) {
  _internal_set_dualtrackerrelaxdirsigma(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.dualTrackerRelaxDirSigma)
}

// optional float tripleTrackerRelaxDirSigma = 3188;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_tripletrackerrelaxdirsigma() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_tripletrackerrelaxdirsigma() const {
  return _internal_has_tripletrackerrelaxdirsigma();
}
inline void UsProcessingReflectionTrackingCfg::clear_tripletrackerrelaxdirsigma() {
  tripletrackerrelaxdirsigma_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_tripletrackerrelaxdirsigma() const {
  return tripletrackerrelaxdirsigma_;
}
inline float UsProcessingReflectionTrackingCfg::tripletrackerrelaxdirsigma() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.tripleTrackerRelaxDirSigma)
  return _internal_tripletrackerrelaxdirsigma();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_tripletrackerrelaxdirsigma(float value) {
  _has_bits_[0] |= 0x00004000u;
  tripletrackerrelaxdirsigma_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_tripletrackerrelaxdirsigma(float value) {
  _internal_set_tripletrackerrelaxdirsigma(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.tripleTrackerRelaxDirSigma)
}

// optional float convexSaturationMaximumIncrement = 2370;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_convexsaturationmaximumincrement() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_convexsaturationmaximumincrement() const {
  return _internal_has_convexsaturationmaximumincrement();
}
inline void UsProcessingReflectionTrackingCfg::clear_convexsaturationmaximumincrement() {
  convexsaturationmaximumincrement_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_convexsaturationmaximumincrement() const {
  return convexsaturationmaximumincrement_;
}
inline float UsProcessingReflectionTrackingCfg::convexsaturationmaximumincrement() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.convexSaturationMaximumIncrement)
  return _internal_convexsaturationmaximumincrement();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_convexsaturationmaximumincrement(float value) {
  _has_bits_[0] |= 0x00000400u;
  convexsaturationmaximumincrement_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_convexsaturationmaximumincrement(float value) {
  _internal_set_convexsaturationmaximumincrement(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.convexSaturationMaximumIncrement)
}

// optional float convexSaturationIncrementLimit = 528;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_convexsaturationincrementlimit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_convexsaturationincrementlimit() const {
  return _internal_has_convexsaturationincrementlimit();
}
inline void UsProcessingReflectionTrackingCfg::clear_convexsaturationincrementlimit() {
  convexsaturationincrementlimit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_convexsaturationincrementlimit() const {
  return convexsaturationincrementlimit_;
}
inline float UsProcessingReflectionTrackingCfg::convexsaturationincrementlimit() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.convexSaturationIncrementLimit)
  return _internal_convexsaturationincrementlimit();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_convexsaturationincrementlimit(float value) {
  _has_bits_[0] |= 0x00000002u;
  convexsaturationincrementlimit_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_convexsaturationincrementlimit(float value) {
  _internal_set_convexsaturationincrementlimit(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.convexSaturationIncrementLimit)
}

// optional float convexSaturationIncrementMultiplicator = 2021;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_convexsaturationincrementmultiplicator() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_convexsaturationincrementmultiplicator() const {
  return _internal_has_convexsaturationincrementmultiplicator();
}
inline void UsProcessingReflectionTrackingCfg::clear_convexsaturationincrementmultiplicator() {
  convexsaturationincrementmultiplicator_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_convexsaturationincrementmultiplicator() const {
  return convexsaturationincrementmultiplicator_;
}
inline float UsProcessingReflectionTrackingCfg::convexsaturationincrementmultiplicator() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.convexSaturationIncrementMultiplicator)
  return _internal_convexsaturationincrementmultiplicator();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_convexsaturationincrementmultiplicator(float value) {
  _has_bits_[0] |= 0x00000100u;
  convexsaturationincrementmultiplicator_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_convexsaturationincrementmultiplicator(float value) {
  _internal_set_convexsaturationincrementmultiplicator(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.convexSaturationIncrementMultiplicator)
}

// optional float rftrOutputFilterRadiusAngleSigma = 2299;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_rftroutputfilterradiusanglesigma() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_rftroutputfilterradiusanglesigma() const {
  return _internal_has_rftroutputfilterradiusanglesigma();
}
inline void UsProcessingReflectionTrackingCfg::clear_rftroutputfilterradiusanglesigma() {
  rftroutputfilterradiusanglesigma_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_rftroutputfilterradiusanglesigma() const {
  return rftroutputfilterradiusanglesigma_;
}
inline float UsProcessingReflectionTrackingCfg::rftroutputfilterradiusanglesigma() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.rftrOutputFilterRadiusAngleSigma)
  return _internal_rftroutputfilterradiusanglesigma();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_rftroutputfilterradiusanglesigma(float value) {
  _has_bits_[0] |= 0x00000200u;
  rftroutputfilterradiusanglesigma_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_rftroutputfilterradiusanglesigma(float value) {
  _internal_set_rftroutputfilterradiusanglesigma(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.rftrOutputFilterRadiusAngleSigma)
}

// optional float rftrOutputFilterConvexSaturationLimit = 1642;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_rftroutputfilterconvexsaturationlimit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_rftroutputfilterconvexsaturationlimit() const {
  return _internal_has_rftroutputfilterconvexsaturationlimit();
}
inline void UsProcessingReflectionTrackingCfg::clear_rftroutputfilterconvexsaturationlimit() {
  rftroutputfilterconvexsaturationlimit_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_rftroutputfilterconvexsaturationlimit() const {
  return rftroutputfilterconvexsaturationlimit_;
}
inline float UsProcessingReflectionTrackingCfg::rftroutputfilterconvexsaturationlimit() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.rftrOutputFilterConvexSaturationLimit)
  return _internal_rftroutputfilterconvexsaturationlimit();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_rftroutputfilterconvexsaturationlimit(float value) {
  _has_bits_[0] |= 0x00000080u;
  rftroutputfilterconvexsaturationlimit_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_rftroutputfilterconvexsaturationlimit(float value) {
  _internal_set_rftroutputfilterconvexsaturationlimit(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.rftrOutputFilterConvexSaturationLimit)
}

// optional float multiplicityFractionAcceptance = 3805;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_multiplicityfractionacceptance() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_multiplicityfractionacceptance() const {
  return _internal_has_multiplicityfractionacceptance();
}
inline void UsProcessingReflectionTrackingCfg::clear_multiplicityfractionacceptance() {
  multiplicityfractionacceptance_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_multiplicityfractionacceptance() const {
  return multiplicityfractionacceptance_;
}
inline float UsProcessingReflectionTrackingCfg::multiplicityfractionacceptance() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.multiplicityFractionAcceptance)
  return _internal_multiplicityfractionacceptance();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_multiplicityfractionacceptance(float value) {
  _has_bits_[0] |= 0x00010000u;
  multiplicityfractionacceptance_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_multiplicityfractionacceptance(float value) {
  _internal_set_multiplicityfractionacceptance(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.multiplicityFractionAcceptance)
}

// optional float multiplicityMaxRadius = 549;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_multiplicitymaxradius() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_multiplicitymaxradius() const {
  return _internal_has_multiplicitymaxradius();
}
inline void UsProcessingReflectionTrackingCfg::clear_multiplicitymaxradius() {
  multiplicitymaxradius_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_multiplicitymaxradius() const {
  return multiplicitymaxradius_;
}
inline float UsProcessingReflectionTrackingCfg::multiplicitymaxradius() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.multiplicityMaxRadius)
  return _internal_multiplicitymaxradius();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_multiplicitymaxradius(float value) {
  _has_bits_[0] |= 0x00000004u;
  multiplicitymaxradius_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_multiplicitymaxradius(float value) {
  _internal_set_multiplicitymaxradius(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.multiplicityMaxRadius)
}

// optional float multiplicityMaxDistanceSinceLastUpdate = 1114;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_multiplicitymaxdistancesincelastupdate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_multiplicitymaxdistancesincelastupdate() const {
  return _internal_has_multiplicitymaxdistancesincelastupdate();
}
inline void UsProcessingReflectionTrackingCfg::clear_multiplicitymaxdistancesincelastupdate() {
  multiplicitymaxdistancesincelastupdate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_multiplicitymaxdistancesincelastupdate() const {
  return multiplicitymaxdistancesincelastupdate_;
}
inline float UsProcessingReflectionTrackingCfg::multiplicitymaxdistancesincelastupdate() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.multiplicityMaxDistanceSinceLastUpdate)
  return _internal_multiplicitymaxdistancesincelastupdate();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_multiplicitymaxdistancesincelastupdate(float value) {
  _has_bits_[0] |= 0x00000010u;
  multiplicitymaxdistancesincelastupdate_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_multiplicitymaxdistancesincelastupdate(float value) {
  _internal_set_multiplicitymaxdistancesincelastupdate(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.multiplicityMaxDistanceSinceLastUpdate)
}

// optional float measurementUncertaintyModifierMax = 3615;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_measurementuncertaintymodifiermax() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_measurementuncertaintymodifiermax() const {
  return _internal_has_measurementuncertaintymodifiermax();
}
inline void UsProcessingReflectionTrackingCfg::clear_measurementuncertaintymodifiermax() {
  measurementuncertaintymodifiermax_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_measurementuncertaintymodifiermax() const {
  return measurementuncertaintymodifiermax_;
}
inline float UsProcessingReflectionTrackingCfg::measurementuncertaintymodifiermax() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.measurementUncertaintyModifierMax)
  return _internal_measurementuncertaintymodifiermax();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_measurementuncertaintymodifiermax(float value) {
  _has_bits_[0] |= 0x00008000u;
  measurementuncertaintymodifiermax_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_measurementuncertaintymodifiermax(float value) {
  _internal_set_measurementuncertaintymodifiermax(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.measurementUncertaintyModifierMax)
}

// optional float measurementUncertaintyMultplier = 3979;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_measurementuncertaintymultplier() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_measurementuncertaintymultplier() const {
  return _internal_has_measurementuncertaintymultplier();
}
inline void UsProcessingReflectionTrackingCfg::clear_measurementuncertaintymultplier() {
  measurementuncertaintymultplier_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float UsProcessingReflectionTrackingCfg::_internal_measurementuncertaintymultplier() const {
  return measurementuncertaintymultplier_;
}
inline float UsProcessingReflectionTrackingCfg::measurementuncertaintymultplier() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.measurementUncertaintyMultplier)
  return _internal_measurementuncertaintymultplier();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_measurementuncertaintymultplier(float value) {
  _has_bits_[0] |= 0x00020000u;
  measurementuncertaintymultplier_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_measurementuncertaintymultplier(float value) {
  _internal_set_measurementuncertaintymultplier(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.measurementUncertaintyMultplier)
}

// optional uint32 stableTrackerMeasurementNumber = 4064;
inline bool UsProcessingReflectionTrackingCfg::_internal_has_stabletrackermeasurementnumber() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsProcessingReflectionTrackingCfg::has_stabletrackermeasurementnumber() const {
  return _internal_has_stabletrackermeasurementnumber();
}
inline void UsProcessingReflectionTrackingCfg::clear_stabletrackermeasurementnumber() {
  stabletrackermeasurementnumber_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingReflectionTrackingCfg::_internal_stabletrackermeasurementnumber() const {
  return stabletrackermeasurementnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsProcessingReflectionTrackingCfg::stabletrackermeasurementnumber() const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.stableTrackerMeasurementNumber)
  return _internal_stabletrackermeasurementnumber();
}
inline void UsProcessingReflectionTrackingCfg::_internal_set_stabletrackermeasurementnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  stabletrackermeasurementnumber_ = value;
}
inline void UsProcessingReflectionTrackingCfg::set_stabletrackermeasurementnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stabletrackermeasurementnumber(value);
  // @@protoc_insertion_point(field_set:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg.stableTrackerMeasurementNumber)
}

// -------------------------------------------------------------------

// UsProcessingReflectionTrackingCfg_array_port

// repeated .pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg data = 822;
inline int UsProcessingReflectionTrackingCfg_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsProcessingReflectionTrackingCfg_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsProcessingReflectionTrackingCfg_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* UsProcessingReflectionTrackingCfg_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg >*
UsProcessingReflectionTrackingCfg_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port.data)
  return &data_;
}
inline const ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg& UsProcessingReflectionTrackingCfg_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg& UsProcessingReflectionTrackingCfg_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* UsProcessingReflectionTrackingCfg_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* UsProcessingReflectionTrackingCfg_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg >&
UsProcessingReflectionTrackingCfg_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_processing_reflection_tracking_cfg
}  // namespace us_processing
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto
