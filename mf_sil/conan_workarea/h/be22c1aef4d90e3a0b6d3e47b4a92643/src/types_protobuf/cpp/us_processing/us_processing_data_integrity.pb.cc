// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_data_integrity.proto

#include "us_processing/us_processing_data_integrity.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_data_integrity {
class UsProcessingDataIntegrityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingDataIntegrity> _instance;
} _UsProcessingDataIntegrity_default_instance_;
class UsProcessingDataIntegrity_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingDataIntegrity_array_port> _instance;
} _UsProcessingDataIntegrity_array_port_default_instance_;
}  // namespace us_processing_data_integrity
}  // namespace us_processing
}  // namespace pb
static void InitDefaultsscc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_data_integrity::_UsProcessingDataIntegrity_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_UsProcessingDataIntegrity_array_port_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_data_integrity::_UsProcessingDataIntegrity_array_port_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingDataIntegrity_array_port_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsProcessingDataIntegrity_array_port_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto}, {
      &scc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, sensorrunningmode_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, filtdist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, rawechocount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, inputvelocity_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, inputtemperature_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity, isinputcommok_),
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  4,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity)},
  { 21, 27, sizeof(::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_data_integrity::_UsProcessingDataIntegrity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_data_integrity::_UsProcessingDataIntegrity_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0us_processing/us_processing_data_integ"
  "rity.proto\022-pb.us_processing.us_processi"
  "ng_data_integrity\032\027eco/signal_header.pro"
  "to\0325us_processing/us_processing_sensor_r"
  "unning_mode.proto\"\324\002\n\031UsProcessingDataIn"
  "tegrity\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSi"
  "gHeader\030\211\010 \001(\0132\".pb.eco.signal_header.Si"
  "gnalHeader\022m\n\021sensorRunningMode\030\322\003 \003(\0162Q"
  ".pb.us_processing.us_processing_sensor_r"
  "unning_mode.UsProcessingSensorRunningMod"
  "e\022\023\n\nfiltDist_m\030\357\013 \003(\002\022\025\n\014rawEchoCount\030\343"
  "\014 \003(\r\022\026\n\rinputVelocity\030\307\034 \001(\002\022\031\n\020inputTe"
  "mperature\030\213\022 \001(\002\022\026\n\risInputCommOk\030\245\014 \001(\010"
  "\"\177\n$UsProcessingDataIntegrity_array_port"
  "\022W\n\004data\030\206\025 \003(\0132H.pb.us_processing.us_pr"
  "ocessing_data_integrity.UsProcessingData"
  "Integrity"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_deps[2] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5frunning_5fmode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_sccs[2] = {
  &scc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto.base,
  &scc_info_UsProcessingDataIntegrity_array_port_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_once;
static bool descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto = {
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_initialized, descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto, "us_processing/us_processing_data_integrity.proto", 649,
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_once, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_sccs, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto::offsets,
  file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto, 2, file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto, file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto), true);
namespace pb {
namespace us_processing {
namespace us_processing_data_integrity {

// ===================================================================

void UsProcessingDataIntegrity::InitAsDefaultInstance() {
  ::pb::us_processing::us_processing_data_integrity::_UsProcessingDataIntegrity_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class UsProcessingDataIntegrity::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingDataIntegrity>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const UsProcessingDataIntegrity* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inputvelocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inputtemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isinputcommok(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
UsProcessingDataIntegrity::_Internal::ssigheader(const UsProcessingDataIntegrity* msg) {
  return *msg->ssigheader_;
}
void UsProcessingDataIntegrity::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UsProcessingDataIntegrity::UsProcessingDataIntegrity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
}
UsProcessingDataIntegrity::UsProcessingDataIntegrity(const UsProcessingDataIntegrity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensorrunningmode_(from.sensorrunningmode_),
      filtdist_m_(from.filtdist_m_),
      rawechocount_(from.rawechocount_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&isinputcommok_, &from.isinputcommok_,
    static_cast<size_t>(reinterpret_cast<char*>(&inputvelocity_) -
    reinterpret_cast<char*>(&isinputcommok_)) + sizeof(inputvelocity_));
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
}

void UsProcessingDataIntegrity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inputvelocity_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(inputvelocity_));
}

UsProcessingDataIntegrity::~UsProcessingDataIntegrity() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  SharedDtor();
}

void UsProcessingDataIntegrity::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void UsProcessingDataIntegrity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingDataIntegrity& UsProcessingDataIntegrity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingDataIntegrity_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingDataIntegrity::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensorrunningmode_.Clear();
  filtdist_m_.Clear();
  rawechocount_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&isinputcommok_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inputvelocity_) -
        reinterpret_cast<char*>(&isinputcommok_)) + sizeof(inputvelocity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingDataIntegrity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_processing.us_processing_sensor_running_mode.UsProcessingSensorRunningMode sensorRunningMode = 466;
      case 466:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::pb::us_processing::us_processing_sensor_running_mode::UsProcessingSensorRunningMode_IsValid(val))) {
              _internal_add_sensorrunningmode(static_cast<::pb::us_processing::us_processing_sensor_running_mode::UsProcessingSensorRunningMode>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(466, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3728>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_sensorrunningmode(), ptr, ctx, ::pb::us_processing::us_processing_sensor_running_mode::UsProcessingSensorRunningMode_IsValid, &_internal_metadata_, 466);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float filtDist_m = 1519;
      case 1519:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_filtdist_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<12157>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_filtdist_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isInputCommOk = 1573;
      case 1573:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_isinputcommok(&has_bits);
          isinputcommok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rawEchoCount = 1635;
      case 1635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_rawechocount(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13080>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rawechocount(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float inputTemperature = 2315;
      case 2315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_inputtemperature(&has_bits);
          inputtemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inputVelocity = 3655;
      case 3655:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_inputvelocity(&has_bits);
          inputvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingDataIntegrity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_sensor_running_mode.UsProcessingSensorRunningMode sensorRunningMode = 466;
  for (int i = 0, n = this->_internal_sensorrunningmode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        466, this->_internal_sensorrunningmode(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated float filtDist_m = 1519;
  for (int i = 0, n = this->_internal_filtdist_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1519, this->_internal_filtdist_m(i), target);
  }

  // optional bool isInputCommOk = 1573;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1573, this->_internal_isinputcommok(), target);
  }

  // repeated uint32 rawEchoCount = 1635;
  for (int i = 0, n = this->_internal_rawechocount_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1635, this->_internal_rawechocount(i), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float inputTemperature = 2315;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2315, this->_internal_inputtemperature(), target);
  }

  // optional float inputVelocity = 3655;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3655, this->_internal_inputvelocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  return target;
}

size_t UsProcessingDataIntegrity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_sensor_running_mode.UsProcessingSensorRunningMode sensorRunningMode = 466;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_sensorrunningmode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_sensorrunningmode(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated float filtDist_m = 1519;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_filtdist_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_filtdist_m_size());
    total_size += data_size;
  }

  // repeated uint32 rawEchoCount = 1635;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rawechocount_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rawechocount_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional bool isInputCommOk = 1573;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float inputTemperature = 2315;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float inputVelocity = 3655;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingDataIntegrity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingDataIntegrity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingDataIntegrity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
    MergeFrom(*source);
  }
}

void UsProcessingDataIntegrity::MergeFrom(const UsProcessingDataIntegrity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensorrunningmode_.MergeFrom(from.sensorrunningmode_);
  filtdist_m_.MergeFrom(from.filtdist_m_);
  rawechocount_.MergeFrom(from.rawechocount_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      isinputcommok_ = from.isinputcommok_;
    }
    if (cached_has_bits & 0x00000004u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      inputtemperature_ = from.inputtemperature_;
    }
    if (cached_has_bits & 0x00000010u) {
      inputvelocity_ = from.inputvelocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsProcessingDataIntegrity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingDataIntegrity::CopyFrom(const UsProcessingDataIntegrity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingDataIntegrity::IsInitialized() const {
  return true;
}

void UsProcessingDataIntegrity::InternalSwap(UsProcessingDataIntegrity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensorrunningmode_.InternalSwap(&other->sensorrunningmode_);
  filtdist_m_.InternalSwap(&other->filtdist_m_);
  rawechocount_.InternalSwap(&other->rawechocount_);
  swap(ssigheader_, other->ssigheader_);
  swap(isinputcommok_, other->isinputcommok_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(inputtemperature_, other->inputtemperature_);
  swap(inputvelocity_, other->inputvelocity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingDataIntegrity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsProcessingDataIntegrity_array_port::InitAsDefaultInstance() {
}
class UsProcessingDataIntegrity_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingDataIntegrity_array_port>()._has_bits_);
};

UsProcessingDataIntegrity_array_port::UsProcessingDataIntegrity_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
}
UsProcessingDataIntegrity_array_port::UsProcessingDataIntegrity_array_port(const UsProcessingDataIntegrity_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
}

void UsProcessingDataIntegrity_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsProcessingDataIntegrity_array_port_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto.base);
}

UsProcessingDataIntegrity_array_port::~UsProcessingDataIntegrity_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  SharedDtor();
}

void UsProcessingDataIntegrity_array_port::SharedDtor() {
}

void UsProcessingDataIntegrity_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingDataIntegrity_array_port& UsProcessingDataIntegrity_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingDataIntegrity_array_port_us_5fprocessing_2fus_5fprocessing_5fdata_5fintegrity_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingDataIntegrity_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingDataIntegrity_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity data = 2694;
      case 2694:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingDataIntegrity_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity data = 2694;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2694, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  return target;
}

size_t UsProcessingDataIntegrity_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity data = 2694;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingDataIntegrity_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingDataIntegrity_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingDataIntegrity_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
    MergeFrom(*source);
  }
}

void UsProcessingDataIntegrity_array_port::MergeFrom(const UsProcessingDataIntegrity_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsProcessingDataIntegrity_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingDataIntegrity_array_port::CopyFrom(const UsProcessingDataIntegrity_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_data_integrity.UsProcessingDataIntegrity_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingDataIntegrity_array_port::IsInitialized() const {
  return true;
}

void UsProcessingDataIntegrity_array_port::InternalSwap(UsProcessingDataIntegrity_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingDataIntegrity_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_processing_data_integrity
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_data_integrity::UsProcessingDataIntegrity_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
