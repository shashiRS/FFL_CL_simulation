// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_neighboring_filter_cfg.proto

#include "us_processing/us_processing_neighboring_filter_cfg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingNeighboringFilterCfg_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_neighboring_filter_cfg {
class UsProcessingNeighboringFilterCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingNeighboringFilterCfg> _instance;
} _UsProcessingNeighboringFilterCfg_default_instance_;
class UsProcessingNeighboringFilterCfg_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingNeighboringFilterCfg_array_port> _instance;
} _UsProcessingNeighboringFilterCfg_array_port_default_instance_;
}  // namespace us_processing_neighboring_filter_cfg
}  // namespace us_processing
}  // namespace pb
static void InitDefaultsscc_info_UsProcessingNeighboringFilterCfg_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_neighboring_filter_cfg::_UsProcessingNeighboringFilterCfg_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingNeighboringFilterCfg_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsProcessingNeighboringFilterCfg_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto}, {}};

static void InitDefaultsscc_info_UsProcessingNeighboringFilterCfg_array_port_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_neighboring_filter_cfg::_UsProcessingNeighboringFilterCfg_array_port_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingNeighboringFilterCfg_array_port_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsProcessingNeighboringFilterCfg_array_port_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto}, {
      &scc_info_UsProcessingNeighboringFilterCfg_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, keep_distance_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, neighbor_region_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, keep_cycles_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, keep_buffer_length_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, neighbor_count_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, neighbor_count_threshold_only_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, neighbor_paths_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, use_absolute_distance_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg, weight_neighbors_by_dir_variance_),
  5,
  8,
  0,
  7,
  1,
  2,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg)},
  { 23, 29, sizeof(::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_neighboring_filter_cfg::_UsProcessingNeighboringFilterCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_neighboring_filter_cfg::_UsProcessingNeighboringFilterCfg_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8us_processing/us_processing_neighborin"
  "g_filter_cfg.proto\0225pb.us_processing.us_"
  "processing_neighboring_filter_cfg\"\311\002\n Us"
  "ProcessingNeighboringFilterCfg\022\026\n\rkeep_d"
  "istance\030\240\024 \001(\002\022\"\n\031neighbor_region_thresh"
  "old\030\204\032 \001(\002\022\023\n\013keep_cycles\030Y \001(\r\022\033\n\022keep_"
  "buffer_length\030\243\031 \001(\r\022!\n\030neighbor_count_t"
  "hreshold\030\240\002 \001(\r\022&\n\035neighbor_count_thresh"
  "old_only\030\311\010 \001(\r\022!\n\030neighbor_paths_thresh"
  "old\030\343\026 \001(\r\022\036\n\025use_absolute_distance\030\232\036 \001"
  "(\010\022)\n weight_neighbors_by_dir_variance\030\360"
  "\001 \001(\010\"\225\001\n+UsProcessingNeighboringFilterC"
  "fg_array_port\022f\n\004data\030\250\034 \003(\0132W.pb.us_pro"
  "cessing.us_processing_neighboring_filter"
  "_cfg.UsProcessingNeighboringFilterCfg"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_sccs[2] = {
  &scc_info_UsProcessingNeighboringFilterCfg_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto.base,
  &scc_info_UsProcessingNeighboringFilterCfg_array_port_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_once;
static bool descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto = {
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_initialized, descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto, "us_processing/us_processing_neighboring_filter_cfg.proto", 597,
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_once, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_sccs, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto::offsets,
  file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto, 2, file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto, file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto), true);
namespace pb {
namespace us_processing {
namespace us_processing_neighboring_filter_cfg {

// ===================================================================

void UsProcessingNeighboringFilterCfg::InitAsDefaultInstance() {
}
class UsProcessingNeighboringFilterCfg::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingNeighboringFilterCfg>()._has_bits_);
  static void set_has_keep_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_neighbor_region_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_keep_cycles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keep_buffer_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_neighbor_count_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_neighbor_count_threshold_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_neighbor_paths_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_absolute_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_neighbors_by_dir_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

UsProcessingNeighboringFilterCfg::UsProcessingNeighboringFilterCfg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
}
UsProcessingNeighboringFilterCfg::UsProcessingNeighboringFilterCfg(const UsProcessingNeighboringFilterCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&keep_cycles_, &from.keep_cycles_,
    static_cast<size_t>(reinterpret_cast<char*>(&neighbor_region_threshold_) -
    reinterpret_cast<char*>(&keep_cycles_)) + sizeof(neighbor_region_threshold_));
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
}

void UsProcessingNeighboringFilterCfg::SharedCtor() {
  ::memset(&keep_cycles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neighbor_region_threshold_) -
      reinterpret_cast<char*>(&keep_cycles_)) + sizeof(neighbor_region_threshold_));
}

UsProcessingNeighboringFilterCfg::~UsProcessingNeighboringFilterCfg() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  SharedDtor();
}

void UsProcessingNeighboringFilterCfg::SharedDtor() {
}

void UsProcessingNeighboringFilterCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingNeighboringFilterCfg& UsProcessingNeighboringFilterCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingNeighboringFilterCfg_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingNeighboringFilterCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&keep_cycles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keep_buffer_length_) -
        reinterpret_cast<char*>(&keep_cycles_)) + sizeof(keep_buffer_length_));
  }
  neighbor_region_threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingNeighboringFilterCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 keep_cycles = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_keep_cycles(&has_bits);
          keep_cycles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool weight_neighbors_by_dir_variance = 240;
      case 240:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_weight_neighbors_by_dir_variance(&has_bits);
          weight_neighbors_by_dir_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 neighbor_count_threshold = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_neighbor_count_threshold(&has_bits);
          neighbor_count_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 neighbor_count_threshold_only = 1097;
      case 1097:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_neighbor_count_threshold_only(&has_bits);
          neighbor_count_threshold_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float keep_distance = 2592;
      case 2592:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_keep_distance(&has_bits);
          keep_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 neighbor_paths_threshold = 2915;
      case 2915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_neighbor_paths_threshold(&has_bits);
          neighbor_paths_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 keep_buffer_length = 3235;
      case 3235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_keep_buffer_length(&has_bits);
          keep_buffer_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float neighbor_region_threshold = 3332;
      case 3332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_neighbor_region_threshold(&has_bits);
          neighbor_region_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_absolute_distance = 3866;
      case 3866:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_use_absolute_distance(&has_bits);
          use_absolute_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingNeighboringFilterCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 keep_cycles = 89;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(89, this->_internal_keep_cycles(), target);
  }

  // optional bool weight_neighbors_by_dir_variance = 240;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(240, this->_internal_weight_neighbors_by_dir_variance(), target);
  }

  // optional uint32 neighbor_count_threshold = 288;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(288, this->_internal_neighbor_count_threshold(), target);
  }

  // optional uint32 neighbor_count_threshold_only = 1097;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1097, this->_internal_neighbor_count_threshold_only(), target);
  }

  // optional float keep_distance = 2592;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2592, this->_internal_keep_distance(), target);
  }

  // optional uint32 neighbor_paths_threshold = 2915;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2915, this->_internal_neighbor_paths_threshold(), target);
  }

  // optional uint32 keep_buffer_length = 3235;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3235, this->_internal_keep_buffer_length(), target);
  }

  // optional float neighbor_region_threshold = 3332;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3332, this->_internal_neighbor_region_threshold(), target);
  }

  // optional bool use_absolute_distance = 3866;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3866, this->_internal_use_absolute_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  return target;
}

size_t UsProcessingNeighboringFilterCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 keep_cycles = 89;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_keep_cycles());
    }

    // optional uint32 neighbor_count_threshold = 288;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_neighbor_count_threshold());
    }

    // optional uint32 neighbor_count_threshold_only = 1097;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_neighbor_count_threshold_only());
    }

    // optional bool use_absolute_distance = 3866;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool weight_neighbors_by_dir_variance = 240;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional float keep_distance = 2592;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional uint32 neighbor_paths_threshold = 2915;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_neighbor_paths_threshold());
    }

    // optional uint32 keep_buffer_length = 3235;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_keep_buffer_length());
    }

  }
  // optional float neighbor_region_threshold = 3332;
  if (cached_has_bits & 0x00000100u) {
    total_size += 3 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingNeighboringFilterCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingNeighboringFilterCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingNeighboringFilterCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
    MergeFrom(*source);
  }
}

void UsProcessingNeighboringFilterCfg::MergeFrom(const UsProcessingNeighboringFilterCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      keep_cycles_ = from.keep_cycles_;
    }
    if (cached_has_bits & 0x00000002u) {
      neighbor_count_threshold_ = from.neighbor_count_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      neighbor_count_threshold_only_ = from.neighbor_count_threshold_only_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_absolute_distance_ = from.use_absolute_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_neighbors_by_dir_variance_ = from.weight_neighbors_by_dir_variance_;
    }
    if (cached_has_bits & 0x00000020u) {
      keep_distance_ = from.keep_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      neighbor_paths_threshold_ = from.neighbor_paths_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      keep_buffer_length_ = from.keep_buffer_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_neighbor_region_threshold(from._internal_neighbor_region_threshold());
  }
}

void UsProcessingNeighboringFilterCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingNeighboringFilterCfg::CopyFrom(const UsProcessingNeighboringFilterCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingNeighboringFilterCfg::IsInitialized() const {
  return true;
}

void UsProcessingNeighboringFilterCfg::InternalSwap(UsProcessingNeighboringFilterCfg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(keep_cycles_, other->keep_cycles_);
  swap(neighbor_count_threshold_, other->neighbor_count_threshold_);
  swap(neighbor_count_threshold_only_, other->neighbor_count_threshold_only_);
  swap(use_absolute_distance_, other->use_absolute_distance_);
  swap(weight_neighbors_by_dir_variance_, other->weight_neighbors_by_dir_variance_);
  swap(keep_distance_, other->keep_distance_);
  swap(neighbor_paths_threshold_, other->neighbor_paths_threshold_);
  swap(keep_buffer_length_, other->keep_buffer_length_);
  swap(neighbor_region_threshold_, other->neighbor_region_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingNeighboringFilterCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsProcessingNeighboringFilterCfg_array_port::InitAsDefaultInstance() {
}
class UsProcessingNeighboringFilterCfg_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingNeighboringFilterCfg_array_port>()._has_bits_);
};

UsProcessingNeighboringFilterCfg_array_port::UsProcessingNeighboringFilterCfg_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
}
UsProcessingNeighboringFilterCfg_array_port::UsProcessingNeighboringFilterCfg_array_port(const UsProcessingNeighboringFilterCfg_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
}

void UsProcessingNeighboringFilterCfg_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsProcessingNeighboringFilterCfg_array_port_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto.base);
}

UsProcessingNeighboringFilterCfg_array_port::~UsProcessingNeighboringFilterCfg_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  SharedDtor();
}

void UsProcessingNeighboringFilterCfg_array_port::SharedDtor() {
}

void UsProcessingNeighboringFilterCfg_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingNeighboringFilterCfg_array_port& UsProcessingNeighboringFilterCfg_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingNeighboringFilterCfg_array_port_us_5fprocessing_2fus_5fprocessing_5fneighboring_5ffilter_5fcfg_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingNeighboringFilterCfg_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingNeighboringFilterCfg_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg data = 3624;
      case 3624:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingNeighboringFilterCfg_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg data = 3624;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3624, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  return target;
}

size_t UsProcessingNeighboringFilterCfg_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg data = 3624;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingNeighboringFilterCfg_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingNeighboringFilterCfg_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingNeighboringFilterCfg_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
    MergeFrom(*source);
  }
}

void UsProcessingNeighboringFilterCfg_array_port::MergeFrom(const UsProcessingNeighboringFilterCfg_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsProcessingNeighboringFilterCfg_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingNeighboringFilterCfg_array_port::CopyFrom(const UsProcessingNeighboringFilterCfg_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_neighboring_filter_cfg.UsProcessingNeighboringFilterCfg_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingNeighboringFilterCfg_array_port::IsInitialized() const {
  return true;
}

void UsProcessingNeighboringFilterCfg_array_port::InternalSwap(UsProcessingNeighboringFilterCfg_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingNeighboringFilterCfg_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_processing_neighboring_filter_cfg
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_neighboring_filter_cfg::UsProcessingNeighboringFilterCfg_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
