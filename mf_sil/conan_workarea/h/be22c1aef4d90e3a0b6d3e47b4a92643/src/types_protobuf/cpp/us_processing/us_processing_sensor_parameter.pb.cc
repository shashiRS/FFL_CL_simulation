// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_sensor_parameter.proto

#include "us_processing/us_processing_sensor_parameter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingSensorParameter_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_sensor_parameter {
class UsProcessingSensorParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingSensorParameter> _instance;
} _UsProcessingSensorParameter_default_instance_;
class UsProcessingSensorParameter_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingSensorParameter_array_port> _instance;
} _UsProcessingSensorParameter_array_port_default_instance_;
}  // namespace us_processing_sensor_parameter
}  // namespace us_processing
}  // namespace pb
static void InitDefaultsscc_info_UsProcessingSensorParameter_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_sensor_parameter::_UsProcessingSensorParameter_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingSensorParameter_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsProcessingSensorParameter_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto}, {}};

static void InitDefaultsscc_info_UsProcessingSensorParameter_array_port_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_sensor_parameter::_UsProcessingSensorParameter_array_port_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingSensorParameter_array_port_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsProcessingSensorParameter_array_port_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto}, {
      &scc_info_UsProcessingSensorParameter_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, posx_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, posy_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, posz_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, horrot_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, verrot_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter, associatedtx_),
  0,
  1,
  4,
  3,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter)},
  { 17, 23, sizeof(::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_sensor_parameter::_UsProcessingSensorParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_sensor_parameter::_UsProcessingSensorParameter_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2us_processing/us_processing_sensor_par"
  "ameter.proto\022/pb.us_processing.us_proces"
  "sing_sensor_parameter\"\221\001\n\033UsProcessingSe"
  "nsorParameter\022\017\n\006posX_m\030\237\002 \001(\002\022\017\n\006posY_m"
  "\030\257\014 \001(\002\022\017\n\006posZ_m\030\377\036 \001(\002\022\023\n\nhorRot_deg\030\310"
  "\032 \001(\002\022\023\n\nverRot_deg\030\262\037 \001(\002\022\025\n\014associated"
  "Tx\030\323\017 \001(\r\"\205\001\n&UsProcessingSensorParamete"
  "r_array_port\022[\n\004data\030\364\033 \003(\0132L.pb.us_proc"
  "essing.us_processing_sensor_parameter.Us"
  "ProcessingSensorParameter"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_sccs[2] = {
  &scc_info_UsProcessingSensorParameter_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto.base,
  &scc_info_UsProcessingSensorParameter_array_port_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_once;
static bool descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto = {
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_initialized, descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto, "us_processing/us_processing_sensor_parameter.proto", 385,
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_once, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_sccs, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto::offsets,
  file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto, 2, file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto, file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto), true);
namespace pb {
namespace us_processing {
namespace us_processing_sensor_parameter {

// ===================================================================

void UsProcessingSensorParameter::InitAsDefaultInstance() {
}
class UsProcessingSensorParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingSensorParameter>()._has_bits_);
  static void set_has_posx_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posy_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posz_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horrot_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_verrot_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_associatedtx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UsProcessingSensorParameter::UsProcessingSensorParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
}
UsProcessingSensorParameter::UsProcessingSensorParameter(const UsProcessingSensorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posx_m_, &from.posx_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&verrot_deg_) -
    reinterpret_cast<char*>(&posx_m_)) + sizeof(verrot_deg_));
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
}

void UsProcessingSensorParameter::SharedCtor() {
  ::memset(&posx_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verrot_deg_) -
      reinterpret_cast<char*>(&posx_m_)) + sizeof(verrot_deg_));
}

UsProcessingSensorParameter::~UsProcessingSensorParameter() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  SharedDtor();
}

void UsProcessingSensorParameter::SharedDtor() {
}

void UsProcessingSensorParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingSensorParameter& UsProcessingSensorParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingSensorParameter_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingSensorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&posx_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verrot_deg_) -
        reinterpret_cast<char*>(&posx_m_)) + sizeof(verrot_deg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingSensorParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float posX_m = 287;
      case 287:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_posx_m(&has_bits);
          posx_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float posY_m = 1583;
      case 1583:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_posy_m(&has_bits);
          posy_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 associatedTx = 2003;
      case 2003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_associatedtx(&has_bits);
          associatedtx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float horRot_deg = 3400;
      case 3400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_horrot_deg(&has_bits);
          horrot_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float posZ_m = 3967;
      case 3967:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_posz_m(&has_bits);
          posz_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float verRot_deg = 4018;
      case 4018:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_verrot_deg(&has_bits);
          verrot_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingSensorParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float posX_m = 287;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(287, this->_internal_posx_m(), target);
  }

  // optional float posY_m = 1583;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1583, this->_internal_posy_m(), target);
  }

  // optional uint32 associatedTx = 2003;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2003, this->_internal_associatedtx(), target);
  }

  // optional float horRot_deg = 3400;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3400, this->_internal_horrot_deg(), target);
  }

  // optional float posZ_m = 3967;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3967, this->_internal_posz_m(), target);
  }

  // optional float verRot_deg = 4018;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4018, this->_internal_verrot_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  return target;
}

size_t UsProcessingSensorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float posX_m = 287;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float posY_m = 1583;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 associatedTx = 2003;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_associatedtx());
    }

    // optional float horRot_deg = 3400;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float posZ_m = 3967;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float verRot_deg = 4018;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingSensorParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingSensorParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingSensorParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
    MergeFrom(*source);
  }
}

void UsProcessingSensorParameter::MergeFrom(const UsProcessingSensorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      posx_m_ = from.posx_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      posy_m_ = from.posy_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      associatedtx_ = from.associatedtx_;
    }
    if (cached_has_bits & 0x00000008u) {
      horrot_deg_ = from.horrot_deg_;
    }
    if (cached_has_bits & 0x00000010u) {
      posz_m_ = from.posz_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      verrot_deg_ = from.verrot_deg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsProcessingSensorParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingSensorParameter::CopyFrom(const UsProcessingSensorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingSensorParameter::IsInitialized() const {
  return true;
}

void UsProcessingSensorParameter::InternalSwap(UsProcessingSensorParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(posx_m_, other->posx_m_);
  swap(posy_m_, other->posy_m_);
  swap(associatedtx_, other->associatedtx_);
  swap(horrot_deg_, other->horrot_deg_);
  swap(posz_m_, other->posz_m_);
  swap(verrot_deg_, other->verrot_deg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingSensorParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsProcessingSensorParameter_array_port::InitAsDefaultInstance() {
}
class UsProcessingSensorParameter_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingSensorParameter_array_port>()._has_bits_);
};

UsProcessingSensorParameter_array_port::UsProcessingSensorParameter_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
}
UsProcessingSensorParameter_array_port::UsProcessingSensorParameter_array_port(const UsProcessingSensorParameter_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
}

void UsProcessingSensorParameter_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsProcessingSensorParameter_array_port_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto.base);
}

UsProcessingSensorParameter_array_port::~UsProcessingSensorParameter_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  SharedDtor();
}

void UsProcessingSensorParameter_array_port::SharedDtor() {
}

void UsProcessingSensorParameter_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingSensorParameter_array_port& UsProcessingSensorParameter_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingSensorParameter_array_port_us_5fprocessing_2fus_5fprocessing_5fsensor_5fparameter_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingSensorParameter_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingSensorParameter_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter data = 3572;
      case 3572:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingSensorParameter_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter data = 3572;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3572, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  return target;
}

size_t UsProcessingSensorParameter_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter data = 3572;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingSensorParameter_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingSensorParameter_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingSensorParameter_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
    MergeFrom(*source);
  }
}

void UsProcessingSensorParameter_array_port::MergeFrom(const UsProcessingSensorParameter_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsProcessingSensorParameter_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingSensorParameter_array_port::CopyFrom(const UsProcessingSensorParameter_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_sensor_parameter.UsProcessingSensorParameter_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingSensorParameter_array_port::IsInitialized() const {
  return true;
}

void UsProcessingSensorParameter_array_port::InternalSwap(UsProcessingSensorParameter_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingSensorParameter_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_processing_sensor_parameter
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_sensor_parameter::UsProcessingSensorParameter_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
