// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_common/ap_common_types_consts.proto

#include "ap_common/ap_common_types_consts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AP_COMMON_TYPES_Consts_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto;
namespace pb {
namespace ap_common {
namespace ap_common_types_consts {
class AP_COMMON_TYPES_ConstsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AP_COMMON_TYPES_Consts> _instance;
} _AP_COMMON_TYPES_Consts_default_instance_;
class AP_COMMON_TYPES_Consts_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AP_COMMON_TYPES_Consts_array_port> _instance;
} _AP_COMMON_TYPES_Consts_array_port_default_instance_;
}  // namespace ap_common_types_consts
}  // namespace ap_common
}  // namespace pb
static void InitDefaultsscc_info_AP_COMMON_TYPES_Consts_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::ap_common_types_consts::_AP_COMMON_TYPES_Consts_default_instance_;
    new (ptr) ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AP_COMMON_TYPES_Consts_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AP_COMMON_TYPES_Consts_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto}, {}};

static void InitDefaultsscc_info_AP_COMMON_TYPES_Consts_array_port_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::ap_common_types_consts::_AP_COMMON_TYPES_Consts_array_port_default_instance_;
    new (ptr) ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AP_COMMON_TYPES_Consts_array_port_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AP_COMMON_TYPES_Consts_array_port_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto}, {
      &scc_info_AP_COMMON_TYPES_Consts_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_static_obj_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_sensor_types_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_pts_static_poly_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_dyn_objects_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_pts_for_dyn_poly_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_p_space_markings_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_num_points_per_parking_line_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_poses_prev_path_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_lane_boundaries_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_lane_bound_pts_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_lanes_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_us_sensors_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_parking_boxes_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_external_poses_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_sv_cams_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_p_box_vertices_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_p_box_delimiters_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_virtual_lines_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_num_tapos_inflated_obj_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_target_poses_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, coll_g_max_num_dyn_objects_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, coll_g_max_num_static_obj_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_g_max_num_pts_in_virtual_line_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_v_mirror_shape_max_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_v_hitch_shape_max_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_v_wheel_shape_max_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_v_vehicle_shape_max_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts, ap_v_num_wheels_nu_),
  5,
  19,
  21,
  18,
  3,
  1,
  13,
  9,
  15,
  6,
  2,
  4,
  23,
  25,
  24,
  14,
  26,
  8,
  22,
  16,
  27,
  12,
  0,
  7,
  11,
  10,
  20,
  17,
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 33, sizeof(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts)},
  { 61, 67, sizeof(::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::ap_common_types_consts::_AP_COMMON_TYPES_Consts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::ap_common_types_consts::_AP_COMMON_TYPES_Consts_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&ap_common/ap_common_types_consts.proto"
  "\022#pb.ap_common.ap_common_types_consts\"\366\010"
  "\n\026AP_COMMON_TYPES_Consts\022#\n\032AP_G_MAX_NUM"
  "_STATIC_OBJ_NU\030\351\t \001(\r\022%\n\034AP_G_MAX_NUM_SE"
  "NSOR_TYPES_NU\030\351\027 \001(\r\022(\n\037AP_G_MAX_NUM_PTS"
  "_STATIC_POLY_NU\030\241\033 \001(\r\022$\n\033AP_G_MAX_NUM_D"
  "YN_OBJECTS_NU\030\200\027 \001(\r\022)\n AP_G_MAX_NUM_PTS"
  "_FOR_DYN_POLY_NU\030\324\t \001(\r\022)\n AP_G_MAX_NUM_"
  "P_SPACE_MARKINGS_NU\030\330\006 \001(\r\022,\n#AP_G_NUM_P"
  "OINTS_PER_PARKING_LINE_NU\030\317\022 \001(\r\022(\n\037AP_G"
  "_MAX_NUM_POSES_PREV_PATH_NU\030\245\020 \001(\r\022(\n\037AP"
  "_G_MAX_NUM_LANE_BOUNDARIES_NU\030\375\022 \001(\r\022\'\n\036"
  "AP_G_MAX_NUM_LANE_BOUND_PTS_NU\030\366\t \001(\r\022\036\n"
  "\025AP_G_MAX_NUM_LANES_NU\030\251\010 \001(\r\022#\n\032AP_G_MA"
  "X_NUM_US_SENSORS_NU\030\341\t \001(\r\022&\n\035AP_G_MAX_N"
  "UM_PARKING_BOXES_NU\030\263\034 \001(\r\022\'\n\036AP_G_MAX_N"
  "UM_EXTERNAL_POSES_NU\030\247\036 \001(\r\022 \n\027AP_G_MAX_"
  "NUM_SV_CAMS_NU\030\235\036 \001(\r\022\'\n\036AP_G_MAX_NUM_P_"
  "BOX_VERTICES_NU\030\323\022 \001(\r\022+\n AP_G_MAX_NUM_P"
  "_BOX_DELIMITERS_NU\030\255\361\363\001 \001(\r\022&\n\035AP_G_MAX_"
  "NUM_VIRTUAL_LINES_NU\030\341\017 \001(\r\022\'\n\036AP_G_NUM_"
  "TAPOS_INFLATED_OBJ_NU\030\263\033 \001(\r\022%\n\034AP_G_MAX"
  "_NUM_TARGET_POSES_NU\030\315\024 \001(\r\022(\n\035COLL_G_MA"
  "X_NUM_DYN_OBJECTS_NU\030\223\376\212\004 \001(\r\022%\n\034COLL_G_"
  "MAX_NUM_STATIC_OBJ_NU\030\216\022 \001(\r\022,\n#AP_G_MAX"
  "_NUM_PTS_IN_VIRTUAL_LINE_NU\030\270\003 \001(\r\022&\n\035AP"
  "_V_MIRROR_SHAPE_MAX_SIZE_NU\030\226\014 \001(\r\022%\n\034AP"
  "_V_HITCH_SHAPE_MAX_SIZE_NU\030\213\021 \001(\r\022%\n\034AP_"
  "V_WHEEL_SHAPE_MAX_SIZE_NU\030\200\021 \001(\r\022\'\n\036AP_V"
  "_VEHICLE_SHAPE_MAX_SIZE_NU\030\322\031 \001(\r\022\033\n\022AP_"
  "V_NUM_WHEELS_NU\030\211\026 \001(\r\"o\n!AP_COMMON_TYPE"
  "S_Consts_array_port\022J\n\004data\030\230\t \003(\0132;.pb."
  "ap_common.ap_common_types_consts.AP_COMM"
  "ON_TYPES_Consts"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_sccs[2] = {
  &scc_info_AP_COMMON_TYPES_Consts_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto.base,
  &scc_info_AP_COMMON_TYPES_Consts_array_port_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_once;
static bool descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto = {
  &descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_initialized, descriptor_table_protodef_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto, "ap_common/ap_common_types_consts.proto", 1335,
  &descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_once, descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_sccs, descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto::offsets,
  file_level_metadata_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto, 2, file_level_enum_descriptors_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto, file_level_service_descriptors_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto), true);
namespace pb {
namespace ap_common {
namespace ap_common_types_consts {

// ===================================================================

void AP_COMMON_TYPES_Consts::InitAsDefaultInstance() {
}
class AP_COMMON_TYPES_Consts::_Internal {
 public:
  using HasBits = decltype(std::declval<AP_COMMON_TYPES_Consts>()._has_bits_);
  static void set_has_ap_g_max_num_static_obj_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_g_max_num_sensor_types_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ap_g_max_num_pts_static_poly_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ap_g_max_num_dyn_objects_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ap_g_max_num_pts_for_dyn_poly_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_g_max_num_p_space_markings_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ap_g_num_points_per_parking_line_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ap_g_max_num_poses_prev_path_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ap_g_max_num_lane_boundaries_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ap_g_max_num_lane_bound_pts_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_g_max_num_lanes_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_g_max_num_us_sensors_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_g_max_num_parking_boxes_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ap_g_max_num_external_poses_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ap_g_max_num_sv_cams_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ap_g_max_num_p_box_vertices_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_g_max_num_p_box_delimiters_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ap_g_max_num_virtual_lines_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_g_num_tapos_inflated_obj_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ap_g_max_num_target_poses_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_coll_g_max_num_dyn_objects_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_coll_g_max_num_static_obj_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ap_g_max_num_pts_in_virtual_line_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_v_mirror_shape_max_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_v_hitch_shape_max_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ap_v_wheel_shape_max_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ap_v_vehicle_shape_max_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ap_v_num_wheels_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

AP_COMMON_TYPES_Consts::AP_COMMON_TYPES_Consts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
}
AP_COMMON_TYPES_Consts::AP_COMMON_TYPES_Consts(const AP_COMMON_TYPES_Consts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ap_g_max_num_pts_in_virtual_line_nu_, &from.ap_g_max_num_pts_in_virtual_line_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&coll_g_max_num_dyn_objects_nu_) -
    reinterpret_cast<char*>(&ap_g_max_num_pts_in_virtual_line_nu_)) + sizeof(coll_g_max_num_dyn_objects_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
}

void AP_COMMON_TYPES_Consts::SharedCtor() {
  ::memset(&ap_g_max_num_pts_in_virtual_line_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coll_g_max_num_dyn_objects_nu_) -
      reinterpret_cast<char*>(&ap_g_max_num_pts_in_virtual_line_nu_)) + sizeof(coll_g_max_num_dyn_objects_nu_));
}

AP_COMMON_TYPES_Consts::~AP_COMMON_TYPES_Consts() {
  // @@protoc_insertion_point(destructor:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  SharedDtor();
}

void AP_COMMON_TYPES_Consts::SharedDtor() {
}

void AP_COMMON_TYPES_Consts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AP_COMMON_TYPES_Consts& AP_COMMON_TYPES_Consts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AP_COMMON_TYPES_Consts_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void AP_COMMON_TYPES_Consts::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_g_max_num_pts_in_virtual_line_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_v_mirror_shape_max_size_nu_) -
        reinterpret_cast<char*>(&ap_g_max_num_pts_in_virtual_line_nu_)) + sizeof(ap_v_mirror_shape_max_size_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_g_max_num_virtual_lines_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_max_num_lane_boundaries_nu_) -
        reinterpret_cast<char*>(&ap_g_max_num_virtual_lines_nu_)) + sizeof(ap_g_max_num_lane_boundaries_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_g_max_num_target_poses_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_max_num_parking_boxes_nu_) -
        reinterpret_cast<char*>(&ap_g_max_num_target_poses_nu_)) + sizeof(ap_g_max_num_parking_boxes_nu_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&ap_g_max_num_sv_cams_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coll_g_max_num_dyn_objects_nu_) -
        reinterpret_cast<char*>(&ap_g_max_num_sv_cams_nu_)) + sizeof(coll_g_max_num_dyn_objects_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AP_COMMON_TYPES_Consts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 AP_G_MAX_NUM_PTS_IN_VIRTUAL_LINE_NU = 440;
      case 440:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ap_g_max_num_pts_in_virtual_line_nu(&has_bits);
          ap_g_max_num_pts_in_virtual_line_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_P_SPACE_MARKINGS_NU = 856;
      case 856:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ap_g_max_num_p_space_markings_nu(&has_bits);
          ap_g_max_num_p_space_markings_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_LANES_NU = 1065;
      case 1065:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ap_g_max_num_lanes_nu(&has_bits);
          ap_g_max_num_lanes_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_PTS_FOR_DYN_POLY_NU = 1236;
      case 1236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_ap_g_max_num_pts_for_dyn_poly_nu(&has_bits);
          ap_g_max_num_pts_for_dyn_poly_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_US_SENSORS_NU = 1249;
      case 1249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ap_g_max_num_us_sensors_nu(&has_bits);
          ap_g_max_num_us_sensors_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_STATIC_OBJ_NU = 1257;
      case 1257:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ap_g_max_num_static_obj_nu(&has_bits);
          ap_g_max_num_static_obj_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_LANE_BOUND_PTS_NU = 1270;
      case 1270:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_ap_g_max_num_lane_bound_pts_nu(&has_bits);
          ap_g_max_num_lane_bound_pts_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_MIRROR_SHAPE_MAX_SIZE_NU = 1558;
      case 1558:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_ap_v_mirror_shape_max_size_nu(&has_bits);
          ap_v_mirror_shape_max_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_VIRTUAL_LINES_NU = 2017;
      case 2017:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ap_g_max_num_virtual_lines_nu(&has_bits);
          ap_g_max_num_virtual_lines_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_POSES_PREV_PATH_NU = 2085;
      case 2085:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ap_g_max_num_poses_prev_path_nu(&has_bits);
          ap_g_max_num_poses_prev_path_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_WHEEL_SHAPE_MAX_SIZE_NU = 2176;
      case 2176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_ap_v_wheel_shape_max_size_nu(&has_bits);
          ap_v_wheel_shape_max_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_HITCH_SHAPE_MAX_SIZE_NU = 2187;
      case 2187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ap_v_hitch_shape_max_size_nu(&has_bits);
          ap_v_hitch_shape_max_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 COLL_G_MAX_NUM_STATIC_OBJ_NU = 2318;
      case 2318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_coll_g_max_num_static_obj_nu(&has_bits);
          coll_g_max_num_static_obj_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_NUM_POINTS_PER_PARKING_LINE_NU = 2383;
      case 2383:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ap_g_num_points_per_parking_line_nu(&has_bits);
          ap_g_num_points_per_parking_line_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_P_BOX_VERTICES_NU = 2387;
      case 2387:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ap_g_max_num_p_box_vertices_nu(&has_bits);
          ap_g_max_num_p_box_vertices_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_LANE_BOUNDARIES_NU = 2429;
      case 2429:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_ap_g_max_num_lane_boundaries_nu(&has_bits);
          ap_g_max_num_lane_boundaries_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_TARGET_POSES_NU = 2637;
      case 2637:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ap_g_max_num_target_poses_nu(&has_bits);
          ap_g_max_num_target_poses_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_NUM_WHEELS_NU = 2825;
      case 2825:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ap_v_num_wheels_nu(&has_bits);
          ap_v_num_wheels_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_DYN_OBJECTS_NU = 2944;
      case 2944:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_ap_g_max_num_dyn_objects_nu(&has_bits);
          ap_g_max_num_dyn_objects_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_SENSOR_TYPES_NU = 3049;
      case 3049:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ap_g_max_num_sensor_types_nu(&has_bits);
          ap_g_max_num_sensor_types_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_VEHICLE_SHAPE_MAX_SIZE_NU = 3282;
      case 3282:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_ap_v_vehicle_shape_max_size_nu(&has_bits);
          ap_v_vehicle_shape_max_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_PTS_STATIC_POLY_NU = 3489;
      case 3489:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ap_g_max_num_pts_static_poly_nu(&has_bits);
          ap_g_max_num_pts_static_poly_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_NUM_TAPOS_INFLATED_OBJ_NU = 3507;
      case 3507:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ap_g_num_tapos_inflated_obj_nu(&has_bits);
          ap_g_num_tapos_inflated_obj_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_PARKING_BOXES_NU = 3635;
      case 3635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ap_g_max_num_parking_boxes_nu(&has_bits);
          ap_g_max_num_parking_boxes_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_SV_CAMS_NU = 3869;
      case 3869:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_ap_g_max_num_sv_cams_nu(&has_bits);
          ap_g_max_num_sv_cams_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_EXTERNAL_POSES_NU = 3879;
      case 3879:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ap_g_max_num_external_poses_nu(&has_bits);
          ap_g_max_num_external_poses_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_G_MAX_NUM_P_BOX_DELIMITERS_NU = 3995821;
      case 3995821:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ap_g_max_num_p_box_delimiters_nu(&has_bits);
          ap_g_max_num_p_box_delimiters_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 COLL_G_MAX_NUM_DYN_OBJECTS_NU = 8568595;
      case 8568595:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_coll_g_max_num_dyn_objects_nu(&has_bits);
          coll_g_max_num_dyn_objects_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AP_COMMON_TYPES_Consts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 AP_G_MAX_NUM_PTS_IN_VIRTUAL_LINE_NU = 440;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(440, this->_internal_ap_g_max_num_pts_in_virtual_line_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_P_SPACE_MARKINGS_NU = 856;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(856, this->_internal_ap_g_max_num_p_space_markings_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_LANES_NU = 1065;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1065, this->_internal_ap_g_max_num_lanes_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_PTS_FOR_DYN_POLY_NU = 1236;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1236, this->_internal_ap_g_max_num_pts_for_dyn_poly_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_US_SENSORS_NU = 1249;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1249, this->_internal_ap_g_max_num_us_sensors_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_STATIC_OBJ_NU = 1257;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1257, this->_internal_ap_g_max_num_static_obj_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_LANE_BOUND_PTS_NU = 1270;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1270, this->_internal_ap_g_max_num_lane_bound_pts_nu(), target);
  }

  // optional uint32 AP_V_MIRROR_SHAPE_MAX_SIZE_NU = 1558;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1558, this->_internal_ap_v_mirror_shape_max_size_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_VIRTUAL_LINES_NU = 2017;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2017, this->_internal_ap_g_max_num_virtual_lines_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_POSES_PREV_PATH_NU = 2085;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2085, this->_internal_ap_g_max_num_poses_prev_path_nu(), target);
  }

  // optional uint32 AP_V_WHEEL_SHAPE_MAX_SIZE_NU = 2176;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2176, this->_internal_ap_v_wheel_shape_max_size_nu(), target);
  }

  // optional uint32 AP_V_HITCH_SHAPE_MAX_SIZE_NU = 2187;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2187, this->_internal_ap_v_hitch_shape_max_size_nu(), target);
  }

  // optional uint32 COLL_G_MAX_NUM_STATIC_OBJ_NU = 2318;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2318, this->_internal_coll_g_max_num_static_obj_nu(), target);
  }

  // optional uint32 AP_G_NUM_POINTS_PER_PARKING_LINE_NU = 2383;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2383, this->_internal_ap_g_num_points_per_parking_line_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_P_BOX_VERTICES_NU = 2387;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2387, this->_internal_ap_g_max_num_p_box_vertices_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_LANE_BOUNDARIES_NU = 2429;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2429, this->_internal_ap_g_max_num_lane_boundaries_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_TARGET_POSES_NU = 2637;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2637, this->_internal_ap_g_max_num_target_poses_nu(), target);
  }

  // optional uint32 AP_V_NUM_WHEELS_NU = 2825;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2825, this->_internal_ap_v_num_wheels_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_DYN_OBJECTS_NU = 2944;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2944, this->_internal_ap_g_max_num_dyn_objects_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_SENSOR_TYPES_NU = 3049;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3049, this->_internal_ap_g_max_num_sensor_types_nu(), target);
  }

  // optional uint32 AP_V_VEHICLE_SHAPE_MAX_SIZE_NU = 3282;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3282, this->_internal_ap_v_vehicle_shape_max_size_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_PTS_STATIC_POLY_NU = 3489;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3489, this->_internal_ap_g_max_num_pts_static_poly_nu(), target);
  }

  // optional uint32 AP_G_NUM_TAPOS_INFLATED_OBJ_NU = 3507;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3507, this->_internal_ap_g_num_tapos_inflated_obj_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_PARKING_BOXES_NU = 3635;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3635, this->_internal_ap_g_max_num_parking_boxes_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_SV_CAMS_NU = 3869;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3869, this->_internal_ap_g_max_num_sv_cams_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_EXTERNAL_POSES_NU = 3879;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3879, this->_internal_ap_g_max_num_external_poses_nu(), target);
  }

  // optional uint32 AP_G_MAX_NUM_P_BOX_DELIMITERS_NU = 3995821;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3995821, this->_internal_ap_g_max_num_p_box_delimiters_nu(), target);
  }

  // optional uint32 COLL_G_MAX_NUM_DYN_OBJECTS_NU = 8568595;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8568595, this->_internal_coll_g_max_num_dyn_objects_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  return target;
}

size_t AP_COMMON_TYPES_Consts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 AP_G_MAX_NUM_PTS_IN_VIRTUAL_LINE_NU = 440;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_pts_in_virtual_line_nu());
    }

    // optional uint32 AP_G_MAX_NUM_P_SPACE_MARKINGS_NU = 856;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_p_space_markings_nu());
    }

    // optional uint32 AP_G_MAX_NUM_LANES_NU = 1065;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_lanes_nu());
    }

    // optional uint32 AP_G_MAX_NUM_PTS_FOR_DYN_POLY_NU = 1236;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_pts_for_dyn_poly_nu());
    }

    // optional uint32 AP_G_MAX_NUM_US_SENSORS_NU = 1249;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_us_sensors_nu());
    }

    // optional uint32 AP_G_MAX_NUM_STATIC_OBJ_NU = 1257;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_static_obj_nu());
    }

    // optional uint32 AP_G_MAX_NUM_LANE_BOUND_PTS_NU = 1270;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_lane_bound_pts_nu());
    }

    // optional uint32 AP_V_MIRROR_SHAPE_MAX_SIZE_NU = 1558;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_mirror_shape_max_size_nu());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 AP_G_MAX_NUM_VIRTUAL_LINES_NU = 2017;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_virtual_lines_nu());
    }

    // optional uint32 AP_G_MAX_NUM_POSES_PREV_PATH_NU = 2085;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_poses_prev_path_nu());
    }

    // optional uint32 AP_V_WHEEL_SHAPE_MAX_SIZE_NU = 2176;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_wheel_shape_max_size_nu());
    }

    // optional uint32 AP_V_HITCH_SHAPE_MAX_SIZE_NU = 2187;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_hitch_shape_max_size_nu());
    }

    // optional uint32 COLL_G_MAX_NUM_STATIC_OBJ_NU = 2318;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coll_g_max_num_static_obj_nu());
    }

    // optional uint32 AP_G_NUM_POINTS_PER_PARKING_LINE_NU = 2383;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_num_points_per_parking_line_nu());
    }

    // optional uint32 AP_G_MAX_NUM_P_BOX_VERTICES_NU = 2387;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_p_box_vertices_nu());
    }

    // optional uint32 AP_G_MAX_NUM_LANE_BOUNDARIES_NU = 2429;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_lane_boundaries_nu());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 AP_G_MAX_NUM_TARGET_POSES_NU = 2637;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_target_poses_nu());
    }

    // optional uint32 AP_V_NUM_WHEELS_NU = 2825;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_num_wheels_nu());
    }

    // optional uint32 AP_G_MAX_NUM_DYN_OBJECTS_NU = 2944;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_dyn_objects_nu());
    }

    // optional uint32 AP_G_MAX_NUM_SENSOR_TYPES_NU = 3049;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_sensor_types_nu());
    }

    // optional uint32 AP_V_VEHICLE_SHAPE_MAX_SIZE_NU = 3282;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_vehicle_shape_max_size_nu());
    }

    // optional uint32 AP_G_MAX_NUM_PTS_STATIC_POLY_NU = 3489;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_pts_static_poly_nu());
    }

    // optional uint32 AP_G_NUM_TAPOS_INFLATED_OBJ_NU = 3507;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_num_tapos_inflated_obj_nu());
    }

    // optional uint32 AP_G_MAX_NUM_PARKING_BOXES_NU = 3635;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_parking_boxes_nu());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional uint32 AP_G_MAX_NUM_SV_CAMS_NU = 3869;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_sv_cams_nu());
    }

    // optional uint32 AP_G_MAX_NUM_EXTERNAL_POSES_NU = 3879;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_external_poses_nu());
    }

    // optional uint32 AP_G_MAX_NUM_P_BOX_DELIMITERS_NU = 3995821;
    if (cached_has_bits & 0x04000000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_g_max_num_p_box_delimiters_nu());
    }

    // optional uint32 COLL_G_MAX_NUM_DYN_OBJECTS_NU = 8568595;
    if (cached_has_bits & 0x08000000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coll_g_max_num_dyn_objects_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AP_COMMON_TYPES_Consts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  const AP_COMMON_TYPES_Consts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AP_COMMON_TYPES_Consts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
    MergeFrom(*source);
  }
}

void AP_COMMON_TYPES_Consts::MergeFrom(const AP_COMMON_TYPES_Consts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_g_max_num_pts_in_virtual_line_nu_ = from.ap_g_max_num_pts_in_virtual_line_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_g_max_num_p_space_markings_nu_ = from.ap_g_max_num_p_space_markings_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_g_max_num_lanes_nu_ = from.ap_g_max_num_lanes_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_g_max_num_pts_for_dyn_poly_nu_ = from.ap_g_max_num_pts_for_dyn_poly_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_g_max_num_us_sensors_nu_ = from.ap_g_max_num_us_sensors_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_g_max_num_static_obj_nu_ = from.ap_g_max_num_static_obj_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_g_max_num_lane_bound_pts_nu_ = from.ap_g_max_num_lane_bound_pts_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_v_mirror_shape_max_size_nu_ = from.ap_v_mirror_shape_max_size_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_g_max_num_virtual_lines_nu_ = from.ap_g_max_num_virtual_lines_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_g_max_num_poses_prev_path_nu_ = from.ap_g_max_num_poses_prev_path_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_v_wheel_shape_max_size_nu_ = from.ap_v_wheel_shape_max_size_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_v_hitch_shape_max_size_nu_ = from.ap_v_hitch_shape_max_size_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      coll_g_max_num_static_obj_nu_ = from.coll_g_max_num_static_obj_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_g_num_points_per_parking_line_nu_ = from.ap_g_num_points_per_parking_line_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_g_max_num_p_box_vertices_nu_ = from.ap_g_max_num_p_box_vertices_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_g_max_num_lane_boundaries_nu_ = from.ap_g_max_num_lane_boundaries_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_g_max_num_target_poses_nu_ = from.ap_g_max_num_target_poses_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_v_num_wheels_nu_ = from.ap_v_num_wheels_nu_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_g_max_num_dyn_objects_nu_ = from.ap_g_max_num_dyn_objects_nu_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_g_max_num_sensor_types_nu_ = from.ap_g_max_num_sensor_types_nu_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_v_vehicle_shape_max_size_nu_ = from.ap_v_vehicle_shape_max_size_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_g_max_num_pts_static_poly_nu_ = from.ap_g_max_num_pts_static_poly_nu_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_g_num_tapos_inflated_obj_nu_ = from.ap_g_num_tapos_inflated_obj_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_g_max_num_parking_boxes_nu_ = from.ap_g_max_num_parking_boxes_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_g_max_num_sv_cams_nu_ = from.ap_g_max_num_sv_cams_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_g_max_num_external_poses_nu_ = from.ap_g_max_num_external_poses_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_g_max_num_p_box_delimiters_nu_ = from.ap_g_max_num_p_box_delimiters_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      coll_g_max_num_dyn_objects_nu_ = from.coll_g_max_num_dyn_objects_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AP_COMMON_TYPES_Consts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AP_COMMON_TYPES_Consts::CopyFrom(const AP_COMMON_TYPES_Consts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AP_COMMON_TYPES_Consts::IsInitialized() const {
  return true;
}

void AP_COMMON_TYPES_Consts::InternalSwap(AP_COMMON_TYPES_Consts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ap_g_max_num_pts_in_virtual_line_nu_, other->ap_g_max_num_pts_in_virtual_line_nu_);
  swap(ap_g_max_num_p_space_markings_nu_, other->ap_g_max_num_p_space_markings_nu_);
  swap(ap_g_max_num_lanes_nu_, other->ap_g_max_num_lanes_nu_);
  swap(ap_g_max_num_pts_for_dyn_poly_nu_, other->ap_g_max_num_pts_for_dyn_poly_nu_);
  swap(ap_g_max_num_us_sensors_nu_, other->ap_g_max_num_us_sensors_nu_);
  swap(ap_g_max_num_static_obj_nu_, other->ap_g_max_num_static_obj_nu_);
  swap(ap_g_max_num_lane_bound_pts_nu_, other->ap_g_max_num_lane_bound_pts_nu_);
  swap(ap_v_mirror_shape_max_size_nu_, other->ap_v_mirror_shape_max_size_nu_);
  swap(ap_g_max_num_virtual_lines_nu_, other->ap_g_max_num_virtual_lines_nu_);
  swap(ap_g_max_num_poses_prev_path_nu_, other->ap_g_max_num_poses_prev_path_nu_);
  swap(ap_v_wheel_shape_max_size_nu_, other->ap_v_wheel_shape_max_size_nu_);
  swap(ap_v_hitch_shape_max_size_nu_, other->ap_v_hitch_shape_max_size_nu_);
  swap(coll_g_max_num_static_obj_nu_, other->coll_g_max_num_static_obj_nu_);
  swap(ap_g_num_points_per_parking_line_nu_, other->ap_g_num_points_per_parking_line_nu_);
  swap(ap_g_max_num_p_box_vertices_nu_, other->ap_g_max_num_p_box_vertices_nu_);
  swap(ap_g_max_num_lane_boundaries_nu_, other->ap_g_max_num_lane_boundaries_nu_);
  swap(ap_g_max_num_target_poses_nu_, other->ap_g_max_num_target_poses_nu_);
  swap(ap_v_num_wheels_nu_, other->ap_v_num_wheels_nu_);
  swap(ap_g_max_num_dyn_objects_nu_, other->ap_g_max_num_dyn_objects_nu_);
  swap(ap_g_max_num_sensor_types_nu_, other->ap_g_max_num_sensor_types_nu_);
  swap(ap_v_vehicle_shape_max_size_nu_, other->ap_v_vehicle_shape_max_size_nu_);
  swap(ap_g_max_num_pts_static_poly_nu_, other->ap_g_max_num_pts_static_poly_nu_);
  swap(ap_g_num_tapos_inflated_obj_nu_, other->ap_g_num_tapos_inflated_obj_nu_);
  swap(ap_g_max_num_parking_boxes_nu_, other->ap_g_max_num_parking_boxes_nu_);
  swap(ap_g_max_num_sv_cams_nu_, other->ap_g_max_num_sv_cams_nu_);
  swap(ap_g_max_num_external_poses_nu_, other->ap_g_max_num_external_poses_nu_);
  swap(ap_g_max_num_p_box_delimiters_nu_, other->ap_g_max_num_p_box_delimiters_nu_);
  swap(coll_g_max_num_dyn_objects_nu_, other->coll_g_max_num_dyn_objects_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AP_COMMON_TYPES_Consts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AP_COMMON_TYPES_Consts_array_port::InitAsDefaultInstance() {
}
class AP_COMMON_TYPES_Consts_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<AP_COMMON_TYPES_Consts_array_port>()._has_bits_);
};

AP_COMMON_TYPES_Consts_array_port::AP_COMMON_TYPES_Consts_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
}
AP_COMMON_TYPES_Consts_array_port::AP_COMMON_TYPES_Consts_array_port(const AP_COMMON_TYPES_Consts_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
}

void AP_COMMON_TYPES_Consts_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AP_COMMON_TYPES_Consts_array_port_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto.base);
}

AP_COMMON_TYPES_Consts_array_port::~AP_COMMON_TYPES_Consts_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  SharedDtor();
}

void AP_COMMON_TYPES_Consts_array_port::SharedDtor() {
}

void AP_COMMON_TYPES_Consts_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AP_COMMON_TYPES_Consts_array_port& AP_COMMON_TYPES_Consts_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AP_COMMON_TYPES_Consts_array_port_ap_5fcommon_2fap_5fcommon_5ftypes_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void AP_COMMON_TYPES_Consts_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AP_COMMON_TYPES_Consts_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts data = 1176;
      case 1176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9410>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AP_COMMON_TYPES_Consts_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts data = 1176;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1176, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  return target;
}

size_t AP_COMMON_TYPES_Consts_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts data = 1176;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AP_COMMON_TYPES_Consts_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const AP_COMMON_TYPES_Consts_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AP_COMMON_TYPES_Consts_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
    MergeFrom(*source);
  }
}

void AP_COMMON_TYPES_Consts_array_port::MergeFrom(const AP_COMMON_TYPES_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void AP_COMMON_TYPES_Consts_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AP_COMMON_TYPES_Consts_array_port::CopyFrom(const AP_COMMON_TYPES_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.ap_common_types_consts.AP_COMMON_TYPES_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AP_COMMON_TYPES_Consts_array_port::IsInitialized() const {
  return true;
}

void AP_COMMON_TYPES_Consts_array_port::InternalSwap(AP_COMMON_TYPES_Consts_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AP_COMMON_TYPES_Consts_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ap_common_types_consts
}  // namespace ap_common
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts* Arena::CreateMaybeMessage< ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port* Arena::CreateMaybeMessage< ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::ap_common_types_consts::AP_COMMON_TYPES_Consts_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
