// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_common/fc_parksm_sys_func_params.proto

#include "ap_common/fc_parksm_sys_func_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_common {
namespace fc_parksm_sys_func_params {
class FC_PARKSM_Sys_Func_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_PARKSM_Sys_Func_Params> _instance;
} _FC_PARKSM_Sys_Func_Params_default_instance_;
class FC_PARKSM_Sys_Func_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_PARKSM_Sys_Func_Params_array_port> _instance;
} _FC_PARKSM_Sys_Func_Params_array_port_default_instance_;
}  // namespace fc_parksm_sys_func_params
}  // namespace ap_common
}  // namespace pb
static void InitDefaultsscc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::fc_parksm_sys_func_params::_FC_PARKSM_Sys_Func_Params_default_instance_;
    new (ptr) ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_PARKSM_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::fc_parksm_sys_func_params::_FC_PARKSM_Sys_Func_Params_array_port_default_instance_;
    new (ptr) ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_PARKSM_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_PARKSM_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto}, {
      &scc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_esc_time_thresh_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_max_rem_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_max_idle_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_rolled_dist_in_thresh_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_rolled_dist_out_thresh_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_v_scanning_thresh_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_v_start_avg_thresh_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_eba_time_thresh_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_rcta_time_thresh_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_tcs_time_thresh_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_abs_time_thresh_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_ebd_time_thresh_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_throttle_thresh_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_max_handover_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_steering_torque_thresh_nm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_max_rm_drive_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_perc_hmi_dist_bar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params, ap_g_rolled_dist_ra_thresh_m_),
  10,
  0,
  15,
  4,
  3,
  18,
  12,
  5,
  6,
  13,
  16,
  19,
  11,
  1,
  2,
  14,
  17,
  8,
  7,
  9,
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params)},
  { 45, 51, sizeof(::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::fc_parksm_sys_func_params::_FC_PARKSM_Sys_Func_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::fc_parksm_sys_func_params::_FC_PARKSM_Sys_Func_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)ap_common/fc_parksm_sys_func_params.pr"
  "oto\022&pb.ap_common.fc_parksm_sys_func_par"
  "ams\032\027eco/signal_header.proto\"\351\005\n\031FC_PARK"
  "SM_Sys_Func_Params\022\030\n\017uiVersionNumber\030\314\020"
  " \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.eco.signa"
  "l_header.SignalHeader\022\037\n\026AP_G_ESC_TIME_T"
  "HRESH_S\030\212\030 \001(\002\022\034\n\023AP_G_MAX_REM_DIST_M\030\252\006"
  " \001(\002\022\035\n\024AP_G_MAX_IDLE_TIME_S\030\374\003 \001(\002\022%\n\034A"
  "P_G_ROLLED_DIST_IN_THRESH_M\030\252\036 \001(\002\022&\n\035AP"
  "_G_ROLLED_DIST_OUT_THRESH_M\030\353\025 \001(\002\022#\n\032AP"
  "_G_V_SCANNING_THRESH_MPS\030\216\t \001(\002\022$\n\033AP_G_"
  "V_START_AVG_THRESH_MPS\030\235\t \001(\002\022\037\n\026AP_G_EB"
  "A_TIME_THRESH_S\030\375\025 \001(\002\022 \n\027AP_G_RCTA_TIME"
  "_THRESH_S\030\324\030 \001(\002\022\037\n\026AP_G_TCS_TIME_THRESH"
  "_S\030\351\036 \001(\002\022\037\n\026AP_G_ABS_TIME_THRESH_S\030\246\024 \001"
  "(\002\022\037\n\026AP_G_EBD_TIME_THRESH_S\030\263\037 \001(\002\022\"\n\031A"
  "P_G_THROTTLE_THRESH_PERC\030\375\001 \001(\002\022!\n\030AP_G_"
  "MAX_HANDOVER_TIME_S\030\356\027 \001(\002\022\'\n\036AP_G_STEER"
  "ING_TORQUE_THRESH_NM\030\310\033 \001(\002\022!\n\030AP_G_MAX_"
  "RM_DRIVE_DIST_M\030\270\r \001(\002\022!\n\030AP_G_PERC_HMI_"
  "DIST_BAR_M\030\266\r \001(\002\022%\n\034AP_G_ROLLED_DIST_RA"
  "_THRESH_M\030\322\r \001(\002\"x\n$FC_PARKSM_Sys_Func_P"
  "arams_array_port\022P\n\004data\030\274\002 \003(\0132A.pb.ap_"
  "common.fc_parksm_sys_func_params.FC_PARK"
  "SM_Sys_Func_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto.base,
  &scc_info_FC_PARKSM_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_once;
static bool descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto = {
  &descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_initialized, descriptor_table_protodef_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto, "ap_common/fc_parksm_sys_func_params.proto", 978,
  &descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_once, descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_sccs, descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto::offsets,
  file_level_metadata_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto, 2, file_level_enum_descriptors_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto, file_level_service_descriptors_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto), true);
namespace pb {
namespace ap_common {
namespace fc_parksm_sys_func_params {

// ===================================================================

void FC_PARKSM_Sys_Func_Params::InitAsDefaultInstance() {
  ::pb::ap_common::fc_parksm_sys_func_params::_FC_PARKSM_Sys_Func_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_PARKSM_Sys_Func_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_PARKSM_Sys_Func_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_PARKSM_Sys_Func_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_g_esc_time_thresh_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ap_g_max_rem_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_g_max_idle_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_g_rolled_dist_in_thresh_m(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ap_g_rolled_dist_out_thresh_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ap_g_v_scanning_thresh_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_g_v_start_avg_thresh_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_g_eba_time_thresh_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ap_g_rcta_time_thresh_s(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ap_g_tcs_time_thresh_s(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ap_g_abs_time_thresh_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ap_g_ebd_time_thresh_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ap_g_throttle_thresh_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_g_max_handover_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_g_steering_torque_thresh_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ap_g_max_rm_drive_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_g_perc_hmi_dist_bar_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_g_rolled_dist_ra_thresh_m(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_PARKSM_Sys_Func_Params::_Internal::ssigheader(const FC_PARKSM_Sys_Func_Params* msg) {
  return *msg->ssigheader_;
}
void FC_PARKSM_Sys_Func_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_PARKSM_Sys_Func_Params::FC_PARKSM_Sys_Func_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
}
FC_PARKSM_Sys_Func_Params::FC_PARKSM_Sys_Func_Params(const FC_PARKSM_Sys_Func_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&ap_g_ebd_time_thresh_s_, &from.ap_g_ebd_time_thresh_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_g_tcs_time_thresh_s_) -
    reinterpret_cast<char*>(&ap_g_ebd_time_thresh_s_)) + sizeof(ap_g_tcs_time_thresh_s_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
}

void FC_PARKSM_Sys_Func_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_g_tcs_time_thresh_s_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(ap_g_tcs_time_thresh_s_));
}

FC_PARKSM_Sys_Func_Params::~FC_PARKSM_Sys_Func_Params() {
  // @@protoc_insertion_point(destructor:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  SharedDtor();
}

void FC_PARKSM_Sys_Func_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_PARKSM_Sys_Func_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_PARKSM_Sys_Func_Params& FC_PARKSM_Sys_Func_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_PARKSM_Sys_Func_Params_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_PARKSM_Sys_Func_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ap_g_ebd_time_thresh_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_perc_hmi_dist_bar_m_) -
        reinterpret_cast<char*>(&ap_g_ebd_time_thresh_s_)) + sizeof(ap_g_perc_hmi_dist_bar_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_g_max_rm_drive_dist_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_esc_time_thresh_s_) -
        reinterpret_cast<char*>(&ap_g_max_rm_drive_dist_m_)) + sizeof(ap_g_esc_time_thresh_s_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&ap_g_rcta_time_thresh_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_tcs_time_thresh_s_) -
        reinterpret_cast<char*>(&ap_g_rcta_time_thresh_s_)) + sizeof(ap_g_tcs_time_thresh_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_PARKSM_Sys_Func_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float AP_G_THROTTLE_THRESH_PERC = 253;
      case 253:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_throttle_thresh_perc(&has_bits);
          ap_g_throttle_thresh_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_IDLE_TIME_S = 508;
      case 508:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_g_max_idle_time_s(&has_bits);
          ap_g_max_idle_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_REM_DIST_M = 810;
      case 810:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_g_max_rem_dist_m(&has_bits);
          ap_g_max_rem_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_V_SCANNING_THRESH_MPS = 1166;
      case 1166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_g_v_scanning_thresh_mps(&has_bits);
          ap_g_v_scanning_thresh_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_V_START_AVG_THRESH_MPS = 1181;
      case 1181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_v_start_avg_thresh_mps(&has_bits);
          ap_g_v_start_avg_thresh_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PERC_HMI_DIST_BAR_M = 1718;
      case 1718:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_g_perc_hmi_dist_bar_m(&has_bits);
          ap_g_perc_hmi_dist_bar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_RM_DRIVE_DIST_M = 1720;
      case 1720:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_g_max_rm_drive_dist_m(&has_bits);
          ap_g_max_rm_drive_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_ROLLED_DIST_RA_THRESH_M = 1746;
      case 1746:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_g_rolled_dist_ra_thresh_m(&has_bits);
          ap_g_rolled_dist_ra_thresh_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_ABS_TIME_THRESH_S = 2598;
      case 2598:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_g_abs_time_thresh_s(&has_bits);
          ap_g_abs_time_thresh_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_ROLLED_DIST_OUT_THRESH_M = 2795;
      case 2795:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_g_rolled_dist_out_thresh_m(&has_bits);
          ap_g_rolled_dist_out_thresh_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_EBA_TIME_THRESH_S = 2813;
      case 2813:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_eba_time_thresh_s(&has_bits);
          ap_g_eba_time_thresh_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_HANDOVER_TIME_S = 3054;
      case 3054:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_g_max_handover_time_s(&has_bits);
          ap_g_max_handover_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_ESC_TIME_THRESH_S = 3082;
      case 3082:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_g_esc_time_thresh_s(&has_bits);
          ap_g_esc_time_thresh_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_RCTA_TIME_THRESH_S = 3156;
      case 3156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_g_rcta_time_thresh_s(&has_bits);
          ap_g_rcta_time_thresh_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_STEERING_TORQUE_THRESH_NM = 3528;
      case 3528:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_g_steering_torque_thresh_nm(&has_bits);
          ap_g_steering_torque_thresh_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_ROLLED_DIST_IN_THRESH_M = 3882;
      case 3882:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_g_rolled_dist_in_thresh_m(&has_bits);
          ap_g_rolled_dist_in_thresh_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_TCS_TIME_THRESH_S = 3945;
      case 3945:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_g_tcs_time_thresh_s(&has_bits);
          ap_g_tcs_time_thresh_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_EBD_TIME_THRESH_S = 4019;
      case 4019:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_g_ebd_time_thresh_s(&has_bits);
          ap_g_ebd_time_thresh_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_PARKSM_Sys_Func_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float AP_G_THROTTLE_THRESH_PERC = 253;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(253, this->_internal_ap_g_throttle_thresh_perc(), target);
  }

  // optional float AP_G_MAX_IDLE_TIME_S = 508;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(508, this->_internal_ap_g_max_idle_time_s(), target);
  }

  // optional float AP_G_MAX_REM_DIST_M = 810;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(810, this->_internal_ap_g_max_rem_dist_m(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float AP_G_V_SCANNING_THRESH_MPS = 1166;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1166, this->_internal_ap_g_v_scanning_thresh_mps(), target);
  }

  // optional float AP_G_V_START_AVG_THRESH_MPS = 1181;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1181, this->_internal_ap_g_v_start_avg_thresh_mps(), target);
  }

  // optional float AP_G_PERC_HMI_DIST_BAR_M = 1718;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1718, this->_internal_ap_g_perc_hmi_dist_bar_m(), target);
  }

  // optional float AP_G_MAX_RM_DRIVE_DIST_M = 1720;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1720, this->_internal_ap_g_max_rm_drive_dist_m(), target);
  }

  // optional float AP_G_ROLLED_DIST_RA_THRESH_M = 1746;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1746, this->_internal_ap_g_rolled_dist_ra_thresh_m(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float AP_G_ABS_TIME_THRESH_S = 2598;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2598, this->_internal_ap_g_abs_time_thresh_s(), target);
  }

  // optional float AP_G_ROLLED_DIST_OUT_THRESH_M = 2795;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2795, this->_internal_ap_g_rolled_dist_out_thresh_m(), target);
  }

  // optional float AP_G_EBA_TIME_THRESH_S = 2813;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2813, this->_internal_ap_g_eba_time_thresh_s(), target);
  }

  // optional float AP_G_MAX_HANDOVER_TIME_S = 3054;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3054, this->_internal_ap_g_max_handover_time_s(), target);
  }

  // optional float AP_G_ESC_TIME_THRESH_S = 3082;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3082, this->_internal_ap_g_esc_time_thresh_s(), target);
  }

  // optional float AP_G_RCTA_TIME_THRESH_S = 3156;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3156, this->_internal_ap_g_rcta_time_thresh_s(), target);
  }

  // optional float AP_G_STEERING_TORQUE_THRESH_NM = 3528;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3528, this->_internal_ap_g_steering_torque_thresh_nm(), target);
  }

  // optional float AP_G_ROLLED_DIST_IN_THRESH_M = 3882;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3882, this->_internal_ap_g_rolled_dist_in_thresh_m(), target);
  }

  // optional float AP_G_TCS_TIME_THRESH_S = 3945;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3945, this->_internal_ap_g_tcs_time_thresh_s(), target);
  }

  // optional float AP_G_EBD_TIME_THRESH_S = 4019;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4019, this->_internal_ap_g_ebd_time_thresh_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  return target;
}

size_t FC_PARKSM_Sys_Func_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float AP_G_EBD_TIME_THRESH_S = 4019;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_THROTTLE_THRESH_PERC = 253;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_MAX_IDLE_TIME_S = 508;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_MAX_REM_DIST_M = 810;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_V_SCANNING_THRESH_MPS = 1166;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_V_START_AVG_THRESH_MPS = 1181;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PERC_HMI_DIST_BAR_M = 1718;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_G_MAX_RM_DRIVE_DIST_M = 1720;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_ROLLED_DIST_RA_THRESH_M = 1746;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float AP_G_ABS_TIME_THRESH_S = 2598;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_ROLLED_DIST_OUT_THRESH_M = 2795;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_EBA_TIME_THRESH_S = 2813;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_MAX_HANDOVER_TIME_S = 3054;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_ESC_TIME_THRESH_S = 3082;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float AP_G_RCTA_TIME_THRESH_S = 3156;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_STEERING_TORQUE_THRESH_NM = 3528;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_ROLLED_DIST_IN_THRESH_M = 3882;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_TCS_TIME_THRESH_S = 3945;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_PARKSM_Sys_Func_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_PARKSM_Sys_Func_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_PARKSM_Sys_Func_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
    MergeFrom(*source);
  }
}

void FC_PARKSM_Sys_Func_Params::MergeFrom(const FC_PARKSM_Sys_Func_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      ap_g_ebd_time_thresh_s_ = from.ap_g_ebd_time_thresh_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_g_throttle_thresh_perc_ = from.ap_g_throttle_thresh_perc_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_g_max_idle_time_s_ = from.ap_g_max_idle_time_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_g_max_rem_dist_m_ = from.ap_g_max_rem_dist_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_g_v_scanning_thresh_mps_ = from.ap_g_v_scanning_thresh_mps_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_g_v_start_avg_thresh_mps_ = from.ap_g_v_start_avg_thresh_mps_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_g_perc_hmi_dist_bar_m_ = from.ap_g_perc_hmi_dist_bar_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_g_max_rm_drive_dist_m_ = from.ap_g_max_rm_drive_dist_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_g_rolled_dist_ra_thresh_m_ = from.ap_g_rolled_dist_ra_thresh_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_g_abs_time_thresh_s_ = from.ap_g_abs_time_thresh_s_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_g_rolled_dist_out_thresh_m_ = from.ap_g_rolled_dist_out_thresh_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_g_eba_time_thresh_s_ = from.ap_g_eba_time_thresh_s_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_g_max_handover_time_s_ = from.ap_g_max_handover_time_s_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_g_esc_time_thresh_s_ = from.ap_g_esc_time_thresh_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_g_rcta_time_thresh_s_ = from.ap_g_rcta_time_thresh_s_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_g_steering_torque_thresh_nm_ = from.ap_g_steering_torque_thresh_nm_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_g_rolled_dist_in_thresh_m_ = from.ap_g_rolled_dist_in_thresh_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_g_tcs_time_thresh_s_ = from.ap_g_tcs_time_thresh_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FC_PARKSM_Sys_Func_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_PARKSM_Sys_Func_Params::CopyFrom(const FC_PARKSM_Sys_Func_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_PARKSM_Sys_Func_Params::IsInitialized() const {
  return true;
}

void FC_PARKSM_Sys_Func_Params::InternalSwap(FC_PARKSM_Sys_Func_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(ap_g_ebd_time_thresh_s_, other->ap_g_ebd_time_thresh_s_);
  swap(ap_g_throttle_thresh_perc_, other->ap_g_throttle_thresh_perc_);
  swap(ap_g_max_idle_time_s_, other->ap_g_max_idle_time_s_);
  swap(ap_g_max_rem_dist_m_, other->ap_g_max_rem_dist_m_);
  swap(ap_g_v_scanning_thresh_mps_, other->ap_g_v_scanning_thresh_mps_);
  swap(ap_g_v_start_avg_thresh_mps_, other->ap_g_v_start_avg_thresh_mps_);
  swap(ap_g_perc_hmi_dist_bar_m_, other->ap_g_perc_hmi_dist_bar_m_);
  swap(ap_g_max_rm_drive_dist_m_, other->ap_g_max_rm_drive_dist_m_);
  swap(ap_g_rolled_dist_ra_thresh_m_, other->ap_g_rolled_dist_ra_thresh_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ap_g_abs_time_thresh_s_, other->ap_g_abs_time_thresh_s_);
  swap(ap_g_rolled_dist_out_thresh_m_, other->ap_g_rolled_dist_out_thresh_m_);
  swap(ap_g_eba_time_thresh_s_, other->ap_g_eba_time_thresh_s_);
  swap(ap_g_max_handover_time_s_, other->ap_g_max_handover_time_s_);
  swap(ap_g_esc_time_thresh_s_, other->ap_g_esc_time_thresh_s_);
  swap(ap_g_rcta_time_thresh_s_, other->ap_g_rcta_time_thresh_s_);
  swap(ap_g_steering_torque_thresh_nm_, other->ap_g_steering_torque_thresh_nm_);
  swap(ap_g_rolled_dist_in_thresh_m_, other->ap_g_rolled_dist_in_thresh_m_);
  swap(ap_g_tcs_time_thresh_s_, other->ap_g_tcs_time_thresh_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_PARKSM_Sys_Func_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_PARKSM_Sys_Func_Params_array_port::InitAsDefaultInstance() {
}
class FC_PARKSM_Sys_Func_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_PARKSM_Sys_Func_Params_array_port>()._has_bits_);
};

FC_PARKSM_Sys_Func_Params_array_port::FC_PARKSM_Sys_Func_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
}
FC_PARKSM_Sys_Func_Params_array_port::FC_PARKSM_Sys_Func_Params_array_port(const FC_PARKSM_Sys_Func_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
}

void FC_PARKSM_Sys_Func_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_PARKSM_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto.base);
}

FC_PARKSM_Sys_Func_Params_array_port::~FC_PARKSM_Sys_Func_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  SharedDtor();
}

void FC_PARKSM_Sys_Func_Params_array_port::SharedDtor() {
}

void FC_PARKSM_Sys_Func_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_PARKSM_Sys_Func_Params_array_port& FC_PARKSM_Sys_Func_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_PARKSM_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5fparksm_5fsys_5ffunc_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_PARKSM_Sys_Func_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_PARKSM_Sys_Func_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params data = 316;
      case 316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2530>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_PARKSM_Sys_Func_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params data = 316;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(316, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  return target;
}

size_t FC_PARKSM_Sys_Func_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params data = 316;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_PARKSM_Sys_Func_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_PARKSM_Sys_Func_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_PARKSM_Sys_Func_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_PARKSM_Sys_Func_Params_array_port::MergeFrom(const FC_PARKSM_Sys_Func_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_PARKSM_Sys_Func_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_PARKSM_Sys_Func_Params_array_port::CopyFrom(const FC_PARKSM_Sys_Func_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.fc_parksm_sys_func_params.FC_PARKSM_Sys_Func_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_PARKSM_Sys_Func_Params_array_port::IsInitialized() const {
  return true;
}

void FC_PARKSM_Sys_Func_Params_array_port::InternalSwap(FC_PARKSM_Sys_Func_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_PARKSM_Sys_Func_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_parksm_sys_func_params
}  // namespace ap_common
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params* Arena::CreateMaybeMessage< ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port* Arena::CreateMaybeMessage< ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::fc_parksm_sys_func_params::FC_PARKSM_Sys_Func_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
