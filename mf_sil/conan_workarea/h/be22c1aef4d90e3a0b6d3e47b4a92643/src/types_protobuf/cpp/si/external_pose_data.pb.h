// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/external_pose_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_si_2fexternal_5fpose_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_si_2fexternal_5fpose_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lsm_geoml/pose_pod.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_si_2fexternal_5fpose_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_si_2fexternal_5fpose_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fexternal_5fpose_5fdata_2eproto;
namespace pb {
namespace si {
namespace external_pose_data {
class ExternalPoseData;
class ExternalPoseDataDefaultTypeInternal;
extern ExternalPoseDataDefaultTypeInternal _ExternalPoseData_default_instance_;
class ExternalPoseData_array_port;
class ExternalPoseData_array_portDefaultTypeInternal;
extern ExternalPoseData_array_portDefaultTypeInternal _ExternalPoseData_array_port_default_instance_;
}  // namespace external_pose_data
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::si::external_pose_data::ExternalPoseData* Arena::CreateMaybeMessage<::pb::si::external_pose_data::ExternalPoseData>(Arena*);
template<> ::pb::si::external_pose_data::ExternalPoseData_array_port* Arena::CreateMaybeMessage<::pb::si::external_pose_data::ExternalPoseData_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace si {
namespace external_pose_data {

// ===================================================================

class ExternalPoseData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.si.external_pose_data.ExternalPoseData) */ {
 public:
  ExternalPoseData();
  virtual ~ExternalPoseData();

  ExternalPoseData(const ExternalPoseData& from);
  ExternalPoseData(ExternalPoseData&& from) noexcept
    : ExternalPoseData() {
    *this = ::std::move(from);
  }

  inline ExternalPoseData& operator=(const ExternalPoseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalPoseData& operator=(ExternalPoseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternalPoseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalPoseData* internal_default_instance() {
    return reinterpret_cast<const ExternalPoseData*>(
               &_ExternalPoseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExternalPoseData& a, ExternalPoseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalPoseData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalPoseData* New() const final {
    return CreateMaybeMessage<ExternalPoseData>(nullptr);
  }

  ExternalPoseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalPoseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternalPoseData& from);
  void MergeFrom(const ExternalPoseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalPoseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.si.external_pose_data.ExternalPoseData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_si_2fexternal_5fpose_5fdata_2eproto);
    return ::descriptor_table_si_2fexternal_5fpose_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalTargetPoseMFieldNumber = 472,
    kCurvature1PmFieldNumber = 1547,
    kRelatedParkingBoxIdFieldNumber = 1205,
    kIsParkingPoseFieldNumber = 1154,
    kIsForwardDrivingFieldNumber = 1323,
  };
  // optional .pb.lsm_geoml.pose_pod.Pose_POD externalTargetPose_m = 472;
  bool has_externaltargetpose_m() const;
  private:
  bool _internal_has_externaltargetpose_m() const;
  public:
  void clear_externaltargetpose_m();
  const ::pb::lsm_geoml::pose_pod::Pose_POD& externaltargetpose_m() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* release_externaltargetpose_m();
  ::pb::lsm_geoml::pose_pod::Pose_POD* mutable_externaltargetpose_m();
  void set_allocated_externaltargetpose_m(::pb::lsm_geoml::pose_pod::Pose_POD* externaltargetpose_m);
  private:
  const ::pb::lsm_geoml::pose_pod::Pose_POD& _internal_externaltargetpose_m() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* _internal_mutable_externaltargetpose_m();
  public:

  // optional float curvature_1pm = 1547;
  bool has_curvature_1pm() const;
  private:
  bool _internal_has_curvature_1pm() const;
  public:
  void clear_curvature_1pm();
  float curvature_1pm() const;
  void set_curvature_1pm(float value);
  private:
  float _internal_curvature_1pm() const;
  void _internal_set_curvature_1pm(float value);
  public:

  // optional uint32 relatedParkingBoxId = 1205;
  bool has_relatedparkingboxid() const;
  private:
  bool _internal_has_relatedparkingboxid() const;
  public:
  void clear_relatedparkingboxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 relatedparkingboxid() const;
  void set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_relatedparkingboxid() const;
  void _internal_set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isParkingPose = 1154;
  bool has_isparkingpose() const;
  private:
  bool _internal_has_isparkingpose() const;
  public:
  void clear_isparkingpose();
  bool isparkingpose() const;
  void set_isparkingpose(bool value);
  private:
  bool _internal_isparkingpose() const;
  void _internal_set_isparkingpose(bool value);
  public:

  // optional bool isForwardDriving = 1323;
  bool has_isforwarddriving() const;
  private:
  bool _internal_has_isforwarddriving() const;
  public:
  void clear_isforwarddriving();
  bool isforwarddriving() const;
  void set_isforwarddriving(bool value);
  private:
  bool _internal_isforwarddriving() const;
  void _internal_set_isforwarddriving(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.si.external_pose_data.ExternalPoseData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::lsm_geoml::pose_pod::Pose_POD* externaltargetpose_m_;
  float curvature_1pm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relatedparkingboxid_;
  bool isparkingpose_;
  bool isforwarddriving_;
  friend struct ::TableStruct_si_2fexternal_5fpose_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ExternalPoseData_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.si.external_pose_data.ExternalPoseData_array_port) */ {
 public:
  ExternalPoseData_array_port();
  virtual ~ExternalPoseData_array_port();

  ExternalPoseData_array_port(const ExternalPoseData_array_port& from);
  ExternalPoseData_array_port(ExternalPoseData_array_port&& from) noexcept
    : ExternalPoseData_array_port() {
    *this = ::std::move(from);
  }

  inline ExternalPoseData_array_port& operator=(const ExternalPoseData_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalPoseData_array_port& operator=(ExternalPoseData_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternalPoseData_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalPoseData_array_port* internal_default_instance() {
    return reinterpret_cast<const ExternalPoseData_array_port*>(
               &_ExternalPoseData_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExternalPoseData_array_port& a, ExternalPoseData_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalPoseData_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalPoseData_array_port* New() const final {
    return CreateMaybeMessage<ExternalPoseData_array_port>(nullptr);
  }

  ExternalPoseData_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalPoseData_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternalPoseData_array_port& from);
  void MergeFrom(const ExternalPoseData_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalPoseData_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.si.external_pose_data.ExternalPoseData_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_si_2fexternal_5fpose_5fdata_2eproto);
    return ::descriptor_table_si_2fexternal_5fpose_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3077,
  };
  // repeated .pb.si.external_pose_data.ExternalPoseData data = 3077;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::si::external_pose_data::ExternalPoseData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::external_pose_data::ExternalPoseData >*
      mutable_data();
  private:
  const ::pb::si::external_pose_data::ExternalPoseData& _internal_data(int index) const;
  ::pb::si::external_pose_data::ExternalPoseData* _internal_add_data();
  public:
  const ::pb::si::external_pose_data::ExternalPoseData& data(int index) const;
  ::pb::si::external_pose_data::ExternalPoseData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::external_pose_data::ExternalPoseData >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.si.external_pose_data.ExternalPoseData_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::external_pose_data::ExternalPoseData > data_;
  friend struct ::TableStruct_si_2fexternal_5fpose_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExternalPoseData

// optional .pb.lsm_geoml.pose_pod.Pose_POD externalTargetPose_m = 472;
inline bool ExternalPoseData::_internal_has_externaltargetpose_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || externaltargetpose_m_ != nullptr);
  return value;
}
inline bool ExternalPoseData::has_externaltargetpose_m() const {
  return _internal_has_externaltargetpose_m();
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ExternalPoseData::_internal_externaltargetpose_m() const {
  const ::pb::lsm_geoml::pose_pod::Pose_POD* p = externaltargetpose_m_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      &::pb::lsm_geoml::pose_pod::_Pose_POD_default_instance_);
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ExternalPoseData::externaltargetpose_m() const {
  // @@protoc_insertion_point(field_get:pb.si.external_pose_data.ExternalPoseData.externalTargetPose_m)
  return _internal_externaltargetpose_m();
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ExternalPoseData::release_externaltargetpose_m() {
  // @@protoc_insertion_point(field_release:pb.si.external_pose_data.ExternalPoseData.externalTargetPose_m)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::lsm_geoml::pose_pod::Pose_POD* temp = externaltargetpose_m_;
  externaltargetpose_m_ = nullptr;
  return temp;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ExternalPoseData::_internal_mutable_externaltargetpose_m() {
  _has_bits_[0] |= 0x00000001u;
  if (externaltargetpose_m_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lsm_geoml::pose_pod::Pose_POD>(GetArenaNoVirtual());
    externaltargetpose_m_ = p;
  }
  return externaltargetpose_m_;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ExternalPoseData::mutable_externaltargetpose_m() {
  // @@protoc_insertion_point(field_mutable:pb.si.external_pose_data.ExternalPoseData.externalTargetPose_m)
  return _internal_mutable_externaltargetpose_m();
}
inline void ExternalPoseData::set_allocated_externaltargetpose_m(::pb::lsm_geoml::pose_pod::Pose_POD* externaltargetpose_m) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(externaltargetpose_m_);
  }
  if (externaltargetpose_m) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      externaltargetpose_m = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, externaltargetpose_m, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  externaltargetpose_m_ = externaltargetpose_m;
  // @@protoc_insertion_point(field_set_allocated:pb.si.external_pose_data.ExternalPoseData.externalTargetPose_m)
}

// optional float curvature_1pm = 1547;
inline bool ExternalPoseData::_internal_has_curvature_1pm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExternalPoseData::has_curvature_1pm() const {
  return _internal_has_curvature_1pm();
}
inline void ExternalPoseData::clear_curvature_1pm() {
  curvature_1pm_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ExternalPoseData::_internal_curvature_1pm() const {
  return curvature_1pm_;
}
inline float ExternalPoseData::curvature_1pm() const {
  // @@protoc_insertion_point(field_get:pb.si.external_pose_data.ExternalPoseData.curvature_1pm)
  return _internal_curvature_1pm();
}
inline void ExternalPoseData::_internal_set_curvature_1pm(float value) {
  _has_bits_[0] |= 0x00000002u;
  curvature_1pm_ = value;
}
inline void ExternalPoseData::set_curvature_1pm(float value) {
  _internal_set_curvature_1pm(value);
  // @@protoc_insertion_point(field_set:pb.si.external_pose_data.ExternalPoseData.curvature_1pm)
}

// optional uint32 relatedParkingBoxId = 1205;
inline bool ExternalPoseData::_internal_has_relatedparkingboxid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExternalPoseData::has_relatedparkingboxid() const {
  return _internal_has_relatedparkingboxid();
}
inline void ExternalPoseData::clear_relatedparkingboxid() {
  relatedparkingboxid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalPoseData::_internal_relatedparkingboxid() const {
  return relatedparkingboxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternalPoseData::relatedparkingboxid() const {
  // @@protoc_insertion_point(field_get:pb.si.external_pose_data.ExternalPoseData.relatedParkingBoxId)
  return _internal_relatedparkingboxid();
}
inline void ExternalPoseData::_internal_set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  relatedparkingboxid_ = value;
}
inline void ExternalPoseData::set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_relatedparkingboxid(value);
  // @@protoc_insertion_point(field_set:pb.si.external_pose_data.ExternalPoseData.relatedParkingBoxId)
}

// optional bool isParkingPose = 1154;
inline bool ExternalPoseData::_internal_has_isparkingpose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExternalPoseData::has_isparkingpose() const {
  return _internal_has_isparkingpose();
}
inline void ExternalPoseData::clear_isparkingpose() {
  isparkingpose_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ExternalPoseData::_internal_isparkingpose() const {
  return isparkingpose_;
}
inline bool ExternalPoseData::isparkingpose() const {
  // @@protoc_insertion_point(field_get:pb.si.external_pose_data.ExternalPoseData.isParkingPose)
  return _internal_isparkingpose();
}
inline void ExternalPoseData::_internal_set_isparkingpose(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isparkingpose_ = value;
}
inline void ExternalPoseData::set_isparkingpose(bool value) {
  _internal_set_isparkingpose(value);
  // @@protoc_insertion_point(field_set:pb.si.external_pose_data.ExternalPoseData.isParkingPose)
}

// optional bool isForwardDriving = 1323;
inline bool ExternalPoseData::_internal_has_isforwarddriving() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExternalPoseData::has_isforwarddriving() const {
  return _internal_has_isforwarddriving();
}
inline void ExternalPoseData::clear_isforwarddriving() {
  isforwarddriving_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ExternalPoseData::_internal_isforwarddriving() const {
  return isforwarddriving_;
}
inline bool ExternalPoseData::isforwarddriving() const {
  // @@protoc_insertion_point(field_get:pb.si.external_pose_data.ExternalPoseData.isForwardDriving)
  return _internal_isforwarddriving();
}
inline void ExternalPoseData::_internal_set_isforwarddriving(bool value) {
  _has_bits_[0] |= 0x00000010u;
  isforwarddriving_ = value;
}
inline void ExternalPoseData::set_isforwarddriving(bool value) {
  _internal_set_isforwarddriving(value);
  // @@protoc_insertion_point(field_set:pb.si.external_pose_data.ExternalPoseData.isForwardDriving)
}

// -------------------------------------------------------------------

// ExternalPoseData_array_port

// repeated .pb.si.external_pose_data.ExternalPoseData data = 3077;
inline int ExternalPoseData_array_port::_internal_data_size() const {
  return data_.size();
}
inline int ExternalPoseData_array_port::data_size() const {
  return _internal_data_size();
}
inline void ExternalPoseData_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::si::external_pose_data::ExternalPoseData* ExternalPoseData_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.si.external_pose_data.ExternalPoseData_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::external_pose_data::ExternalPoseData >*
ExternalPoseData_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.si.external_pose_data.ExternalPoseData_array_port.data)
  return &data_;
}
inline const ::pb::si::external_pose_data::ExternalPoseData& ExternalPoseData_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::si::external_pose_data::ExternalPoseData& ExternalPoseData_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.si.external_pose_data.ExternalPoseData_array_port.data)
  return _internal_data(index);
}
inline ::pb::si::external_pose_data::ExternalPoseData* ExternalPoseData_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::si::external_pose_data::ExternalPoseData* ExternalPoseData_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.si.external_pose_data.ExternalPoseData_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::external_pose_data::ExternalPoseData >&
ExternalPoseData_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.si.external_pose_data.ExternalPoseData_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace external_pose_data
}  // namespace si
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_si_2fexternal_5fpose_5fdata_2eproto
