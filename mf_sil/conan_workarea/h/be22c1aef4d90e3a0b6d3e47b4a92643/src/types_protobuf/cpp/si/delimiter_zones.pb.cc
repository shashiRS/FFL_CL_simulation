// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/delimiter_zones.proto

#include "si/delimiter_zones.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_si_2fdelimiter_5fzones_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fquadrilateral_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadrilateralSerializable_si_2fquadrilateral_5fserializable_2eproto;
namespace pb {
namespace si {
namespace delimiter_zones {
class DelimiterZonesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelimiterZones> _instance;
} _DelimiterZones_default_instance_;
class DelimiterZones_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelimiterZones_array_port> _instance;
} _DelimiterZones_array_port_default_instance_;
}  // namespace delimiter_zones
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::delimiter_zones::_DelimiterZones_default_instance_;
    new (ptr) ::pb::si::delimiter_zones::DelimiterZones();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::delimiter_zones::DelimiterZones::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto}, {
      &scc_info_QuadrilateralSerializable_si_2fquadrilateral_5fserializable_2eproto.base,}};

static void InitDefaultsscc_info_DelimiterZones_array_port_si_2fdelimiter_5fzones_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::delimiter_zones::_DelimiterZones_array_port_default_instance_;
    new (ptr) ::pb::si::delimiter_zones::DelimiterZones_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::delimiter_zones::DelimiterZones_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DelimiterZones_array_port_si_2fdelimiter_5fzones_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DelimiterZones_array_port_si_2fdelimiter_5fzones_2eproto}, {
      &scc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fdelimiter_5fzones_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fdelimiter_5fzones_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fdelimiter_5fzones_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fdelimiter_5fzones_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, curbzone_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, roadzone_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, leftzone_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, rightzone_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, insidezone_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, all_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones, slotid_nu_),
  5,
  2,
  1,
  0,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::delimiter_zones::DelimiterZones_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::pb::si::delimiter_zones::DelimiterZones)},
  { 19, 25, sizeof(::pb::si::delimiter_zones::DelimiterZones_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::delimiter_zones::_DelimiterZones_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::delimiter_zones::_DelimiterZones_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fdelimiter_5fzones_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030si/delimiter_zones.proto\022\025pb.si.delimi"
  "ter_zones\032#si/quadrilateral_serializable"
  ".proto\"\202\004\n\016DelimiterZones\022N\n\010curbZone\030\305\033"
  " \001(\0132;.pb.si.quadrilateral_serializable."
  "QuadrilateralSerializable\022N\n\010roadZone\030\366\024"
  " \001(\0132;.pb.si.quadrilateral_serializable."
  "QuadrilateralSerializable\022N\n\010leftZone\030\206\r"
  " \001(\0132;.pb.si.quadrilateral_serializable."
  "QuadrilateralSerializable\022O\n\trightZone\030\230"
  "\003 \001(\0132;.pb.si.quadrilateral_serializable"
  ".QuadrilateralSerializable\022P\n\ninsideZone"
  "\030\347\025 \001(\0132;.pb.si.quadrilateral_serializab"
  "le.QuadrilateralSerializable\022I\n\003all\030\277\026 \001"
  "(\0132;.pb.si.quadrilateral_serializable.Qu"
  "adrilateralSerializable\022\022\n\tslotId_nu\030\333\033 "
  "\001(\r\"Q\n\031DelimiterZones_array_port\0224\n\004data"
  "\030\356\036 \003(\0132%.pb.si.delimiter_zones.Delimite"
  "rZones"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fdelimiter_5fzones_2eproto_deps[1] = {
  &::descriptor_table_si_2fquadrilateral_5fserializable_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fdelimiter_5fzones_2eproto_sccs[2] = {
  &scc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto.base,
  &scc_info_DelimiterZones_array_port_si_2fdelimiter_5fzones_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fdelimiter_5fzones_2eproto_once;
static bool descriptor_table_si_2fdelimiter_5fzones_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fdelimiter_5fzones_2eproto = {
  &descriptor_table_si_2fdelimiter_5fzones_2eproto_initialized, descriptor_table_protodef_si_2fdelimiter_5fzones_2eproto, "si/delimiter_zones.proto", 686,
  &descriptor_table_si_2fdelimiter_5fzones_2eproto_once, descriptor_table_si_2fdelimiter_5fzones_2eproto_sccs, descriptor_table_si_2fdelimiter_5fzones_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_si_2fdelimiter_5fzones_2eproto::offsets,
  file_level_metadata_si_2fdelimiter_5fzones_2eproto, 2, file_level_enum_descriptors_si_2fdelimiter_5fzones_2eproto, file_level_service_descriptors_si_2fdelimiter_5fzones_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fdelimiter_5fzones_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fdelimiter_5fzones_2eproto), true);
namespace pb {
namespace si {
namespace delimiter_zones {

// ===================================================================

void DelimiterZones::InitAsDefaultInstance() {
  ::pb::si::delimiter_zones::_DelimiterZones_default_instance_._instance.get_mutable()->curbzone_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::delimiter_zones::_DelimiterZones_default_instance_._instance.get_mutable()->roadzone_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::delimiter_zones::_DelimiterZones_default_instance_._instance.get_mutable()->leftzone_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::delimiter_zones::_DelimiterZones_default_instance_._instance.get_mutable()->rightzone_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::delimiter_zones::_DelimiterZones_default_instance_._instance.get_mutable()->insidezone_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::delimiter_zones::_DelimiterZones_default_instance_._instance.get_mutable()->all_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
}
class DelimiterZones::_Internal {
 public:
  using HasBits = decltype(std::declval<DelimiterZones>()._has_bits_);
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& curbzone(const DelimiterZones* msg);
  static void set_has_curbzone(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& roadzone(const DelimiterZones* msg);
  static void set_has_roadzone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& leftzone(const DelimiterZones* msg);
  static void set_has_leftzone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& rightzone(const DelimiterZones* msg);
  static void set_has_rightzone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& insidezone(const DelimiterZones* msg);
  static void set_has_insidezone(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& all(const DelimiterZones* msg);
  static void set_has_all(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_slotid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
DelimiterZones::_Internal::curbzone(const DelimiterZones* msg) {
  return *msg->curbzone_;
}
const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
DelimiterZones::_Internal::roadzone(const DelimiterZones* msg) {
  return *msg->roadzone_;
}
const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
DelimiterZones::_Internal::leftzone(const DelimiterZones* msg) {
  return *msg->leftzone_;
}
const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
DelimiterZones::_Internal::rightzone(const DelimiterZones* msg) {
  return *msg->rightzone_;
}
const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
DelimiterZones::_Internal::insidezone(const DelimiterZones* msg) {
  return *msg->insidezone_;
}
const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
DelimiterZones::_Internal::all(const DelimiterZones* msg) {
  return *msg->all_;
}
void DelimiterZones::clear_curbzone() {
  if (curbzone_ != nullptr) curbzone_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void DelimiterZones::clear_roadzone() {
  if (roadzone_ != nullptr) roadzone_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void DelimiterZones::clear_leftzone() {
  if (leftzone_ != nullptr) leftzone_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DelimiterZones::clear_rightzone() {
  if (rightzone_ != nullptr) rightzone_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DelimiterZones::clear_insidezone() {
  if (insidezone_ != nullptr) insidezone_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void DelimiterZones::clear_all() {
  if (all_ != nullptr) all_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
DelimiterZones::DelimiterZones()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.delimiter_zones.DelimiterZones)
}
DelimiterZones::DelimiterZones(const DelimiterZones& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rightzone()) {
    rightzone_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.rightzone_);
  } else {
    rightzone_ = nullptr;
  }
  if (from._internal_has_leftzone()) {
    leftzone_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.leftzone_);
  } else {
    leftzone_ = nullptr;
  }
  if (from._internal_has_roadzone()) {
    roadzone_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.roadzone_);
  } else {
    roadzone_ = nullptr;
  }
  if (from._internal_has_insidezone()) {
    insidezone_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.insidezone_);
  } else {
    insidezone_ = nullptr;
  }
  if (from._internal_has_all()) {
    all_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.all_);
  } else {
    all_ = nullptr;
  }
  if (from._internal_has_curbzone()) {
    curbzone_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.curbzone_);
  } else {
    curbzone_ = nullptr;
  }
  slotid_nu_ = from.slotid_nu_;
  // @@protoc_insertion_point(copy_constructor:pb.si.delimiter_zones.DelimiterZones)
}

void DelimiterZones::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto.base);
  ::memset(&rightzone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slotid_nu_) -
      reinterpret_cast<char*>(&rightzone_)) + sizeof(slotid_nu_));
}

DelimiterZones::~DelimiterZones() {
  // @@protoc_insertion_point(destructor:pb.si.delimiter_zones.DelimiterZones)
  SharedDtor();
}

void DelimiterZones::SharedDtor() {
  if (this != internal_default_instance()) delete rightzone_;
  if (this != internal_default_instance()) delete leftzone_;
  if (this != internal_default_instance()) delete roadzone_;
  if (this != internal_default_instance()) delete insidezone_;
  if (this != internal_default_instance()) delete all_;
  if (this != internal_default_instance()) delete curbzone_;
}

void DelimiterZones::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelimiterZones& DelimiterZones::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelimiterZones_si_2fdelimiter_5fzones_2eproto.base);
  return *internal_default_instance();
}


void DelimiterZones::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.delimiter_zones.DelimiterZones)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rightzone_ != nullptr);
      rightzone_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(leftzone_ != nullptr);
      leftzone_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(roadzone_ != nullptr);
      roadzone_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(insidezone_ != nullptr);
      insidezone_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(all_ != nullptr);
      all_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(curbzone_ != nullptr);
      curbzone_->Clear();
    }
  }
  slotid_nu_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DelimiterZones::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable rightZone = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightzone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable leftZone = 1670;
      case 1670:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_leftzone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roadZone = 2678;
      case 2678:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_roadzone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable insideZone = 2791;
      case 2791:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_insidezone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable all = 2879;
      case 2879:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable curbZone = 3525;
      case 3525:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_curbzone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slotId_nu = 3547;
      case 3547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_slotid_nu(&has_bits);
          slotid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelimiterZones::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.delimiter_zones.DelimiterZones)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable rightZone = 408;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        408, _Internal::rightzone(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable leftZone = 1670;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1670, _Internal::leftzone(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roadZone = 2678;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2678, _Internal::roadzone(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable insideZone = 2791;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2791, _Internal::insidezone(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable all = 2879;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2879, _Internal::all(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable curbZone = 3525;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3525, _Internal::curbzone(this), target, stream);
  }

  // optional uint32 slotId_nu = 3547;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3547, this->_internal_slotid_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.delimiter_zones.DelimiterZones)
  return target;
}

size_t DelimiterZones::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.delimiter_zones.DelimiterZones)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable rightZone = 408;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rightzone_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable leftZone = 1670;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leftzone_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roadZone = 2678;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roadzone_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable insideZone = 2791;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insidezone_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable all = 2879;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable curbZone = 3525;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curbzone_);
    }

    // optional uint32 slotId_nu = 3547;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slotid_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelimiterZones::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.delimiter_zones.DelimiterZones)
  GOOGLE_DCHECK_NE(&from, this);
  const DelimiterZones* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelimiterZones>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.delimiter_zones.DelimiterZones)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.delimiter_zones.DelimiterZones)
    MergeFrom(*source);
  }
}

void DelimiterZones::MergeFrom(const DelimiterZones& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.delimiter_zones.DelimiterZones)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rightzone()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_rightzone());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_leftzone()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_leftzone());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_roadzone()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_roadzone());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_insidezone()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_insidezone());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_all()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_all());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_curbzone()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_curbzone());
    }
    if (cached_has_bits & 0x00000040u) {
      slotid_nu_ = from.slotid_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelimiterZones::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.delimiter_zones.DelimiterZones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelimiterZones::CopyFrom(const DelimiterZones& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.delimiter_zones.DelimiterZones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelimiterZones::IsInitialized() const {
  return true;
}

void DelimiterZones::InternalSwap(DelimiterZones* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rightzone_, other->rightzone_);
  swap(leftzone_, other->leftzone_);
  swap(roadzone_, other->roadzone_);
  swap(insidezone_, other->insidezone_);
  swap(all_, other->all_);
  swap(curbzone_, other->curbzone_);
  swap(slotid_nu_, other->slotid_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelimiterZones::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelimiterZones_array_port::InitAsDefaultInstance() {
}
class DelimiterZones_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<DelimiterZones_array_port>()._has_bits_);
};

DelimiterZones_array_port::DelimiterZones_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.delimiter_zones.DelimiterZones_array_port)
}
DelimiterZones_array_port::DelimiterZones_array_port(const DelimiterZones_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.delimiter_zones.DelimiterZones_array_port)
}

void DelimiterZones_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelimiterZones_array_port_si_2fdelimiter_5fzones_2eproto.base);
}

DelimiterZones_array_port::~DelimiterZones_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.delimiter_zones.DelimiterZones_array_port)
  SharedDtor();
}

void DelimiterZones_array_port::SharedDtor() {
}

void DelimiterZones_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelimiterZones_array_port& DelimiterZones_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelimiterZones_array_port_si_2fdelimiter_5fzones_2eproto.base);
  return *internal_default_instance();
}


void DelimiterZones_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.delimiter_zones.DelimiterZones_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DelimiterZones_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.delimiter_zones.DelimiterZones data = 3950;
      case 3950:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelimiterZones_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.delimiter_zones.DelimiterZones_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.delimiter_zones.DelimiterZones data = 3950;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3950, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.delimiter_zones.DelimiterZones_array_port)
  return target;
}

size_t DelimiterZones_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.delimiter_zones.DelimiterZones_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.delimiter_zones.DelimiterZones data = 3950;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelimiterZones_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.delimiter_zones.DelimiterZones_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const DelimiterZones_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelimiterZones_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.delimiter_zones.DelimiterZones_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.delimiter_zones.DelimiterZones_array_port)
    MergeFrom(*source);
  }
}

void DelimiterZones_array_port::MergeFrom(const DelimiterZones_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.delimiter_zones.DelimiterZones_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void DelimiterZones_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.delimiter_zones.DelimiterZones_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelimiterZones_array_port::CopyFrom(const DelimiterZones_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.delimiter_zones.DelimiterZones_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelimiterZones_array_port::IsInitialized() const {
  return true;
}

void DelimiterZones_array_port::InternalSwap(DelimiterZones_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelimiterZones_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace delimiter_zones
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::delimiter_zones::DelimiterZones* Arena::CreateMaybeMessage< ::pb::si::delimiter_zones::DelimiterZones >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::delimiter_zones::DelimiterZones >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::delimiter_zones::DelimiterZones_array_port* Arena::CreateMaybeMessage< ::pb::si::delimiter_zones::DelimiterZones_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::delimiter_zones::DelimiterZones_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
