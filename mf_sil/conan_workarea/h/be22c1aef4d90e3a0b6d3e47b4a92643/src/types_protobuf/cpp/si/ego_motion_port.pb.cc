// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/ego_motion_port.proto

#include "si/ego_motion_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fego_5fmotion_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto;
namespace pb {
namespace si {
namespace ego_motion_port {
class EgoMotionPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EgoMotionPort> _instance;
} _EgoMotionPort_default_instance_;
class EgoMotionPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EgoMotionPort_array_port> _instance;
} _EgoMotionPort_array_port_default_instance_;
}  // namespace ego_motion_port
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::ego_motion_port::_EgoMotionPort_default_instance_;
    new (ptr) ::pb::si::ego_motion_port::EgoMotionPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::ego_motion_port::EgoMotionPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_EgoMotionPort_array_port_si_2fego_5fmotion_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::ego_motion_port::_EgoMotionPort_array_port_default_instance_;
    new (ptr) ::pb::si::ego_motion_port::EgoMotionPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::ego_motion_port::EgoMotionPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EgoMotionPort_array_port_si_2fego_5fmotion_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EgoMotionPort_array_port_si_2fego_5fmotion_5fport_2eproto}, {
      &scc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fego_5fmotion_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fego_5fmotion_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fego_5fmotion_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fego_5fmotion_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, motionstate_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, pitch_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, roll_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, vel_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, yawrate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, accel_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, drivendistance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, frontwheelangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort, rearwheelangle_rad_),
  9,
  0,
  2,
  10,
  8,
  4,
  3,
  1,
  7,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::ego_motion_port::EgoMotionPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::pb::si::ego_motion_port::EgoMotionPort)},
  { 27, 33, sizeof(::pb::si::ego_motion_port::EgoMotionPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::ego_motion_port::_EgoMotionPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::ego_motion_port::_EgoMotionPort_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fego_5fmotion_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030si/ego_motion_port.proto\022\025pb.si.ego_mo"
  "tion_port\032\027eco/signal_header.proto\032\027si/s"
  "imotion_state.proto\"\334\002\n\rEgoMotionPort\022\030\n"
  "\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010"
  " \001(\0132\".pb.eco.signal_header.SignalHeader"
  "\022<\n\016motionState_nu\030\312\002 \001(\0162#.pb.si.simoti"
  "on_state.SIMotionState\022\022\n\tpitch_rad\030\301\037 \001"
  "(\002\022\021\n\010roll_rad\030\231\020 \001(\002\022\020\n\007vel_mps\030\332\003 \001(\002\022"
  "\026\n\ryawRate_radps\030\335\002 \001(\002\022\023\n\naccel_mps2\030\364\001"
  " \001(\002\022\031\n\020drivenDistance_m\030\214\014 \001(\002\022\034\n\023front"
  "WheelAngle_rad\030\260\007 \001(\002\022\033\n\022rearWheelAngle_"
  "rad\030\263\n \001(\002\"O\n\030EgoMotionPort_array_port\0223"
  "\n\004data\030\314\017 \003(\0132$.pb.si.ego_motion_port.Eg"
  "oMotionPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fego_5fmotion_5fport_2eproto_deps[2] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_si_2fsimotion_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fego_5fmotion_5fport_2eproto_sccs[2] = {
  &scc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto.base,
  &scc_info_EgoMotionPort_array_port_si_2fego_5fmotion_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fego_5fmotion_5fport_2eproto_once;
static bool descriptor_table_si_2fego_5fmotion_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fego_5fmotion_5fport_2eproto = {
  &descriptor_table_si_2fego_5fmotion_5fport_2eproto_initialized, descriptor_table_protodef_si_2fego_5fmotion_5fport_2eproto, "si/ego_motion_port.proto", 531,
  &descriptor_table_si_2fego_5fmotion_5fport_2eproto_once, descriptor_table_si_2fego_5fmotion_5fport_2eproto_sccs, descriptor_table_si_2fego_5fmotion_5fport_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_si_2fego_5fmotion_5fport_2eproto::offsets,
  file_level_metadata_si_2fego_5fmotion_5fport_2eproto, 2, file_level_enum_descriptors_si_2fego_5fmotion_5fport_2eproto, file_level_service_descriptors_si_2fego_5fmotion_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fego_5fmotion_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fego_5fmotion_5fport_2eproto), true);
namespace pb {
namespace si {
namespace ego_motion_port {

// ===================================================================

void EgoMotionPort::InitAsDefaultInstance() {
  ::pb::si::ego_motion_port::_EgoMotionPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class EgoMotionPort::_Internal {
 public:
  using HasBits = decltype(std::declval<EgoMotionPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const EgoMotionPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motionstate_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pitch_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_roll_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vel_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_yawrate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_accel_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drivendistance_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frontwheelangle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rearwheelangle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
EgoMotionPort::_Internal::ssigheader(const EgoMotionPort* msg) {
  return *msg->ssigheader_;
}
void EgoMotionPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EgoMotionPort::EgoMotionPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.ego_motion_port.EgoMotionPort)
}
EgoMotionPort::EgoMotionPort(const EgoMotionPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&accel_mps2_, &from.accel_mps2_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_rad_) -
    reinterpret_cast<char*>(&accel_mps2_)) + sizeof(pitch_rad_));
  // @@protoc_insertion_point(copy_constructor:pb.si.ego_motion_port.EgoMotionPort)
}

void EgoMotionPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_rad_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(pitch_rad_));
}

EgoMotionPort::~EgoMotionPort() {
  // @@protoc_insertion_point(destructor:pb.si.ego_motion_port.EgoMotionPort)
  SharedDtor();
}

void EgoMotionPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void EgoMotionPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EgoMotionPort& EgoMotionPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EgoMotionPort_si_2fego_5fmotion_5fport_2eproto.base);
  return *internal_default_instance();
}


void EgoMotionPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.ego_motion_port.EgoMotionPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accel_mps2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drivendistance_m_) -
        reinterpret_cast<char*>(&accel_mps2_)) + sizeof(drivendistance_m_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&roll_rad_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitch_rad_) -
        reinterpret_cast<char*>(&roll_rad_)) + sizeof(pitch_rad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EgoMotionPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float accel_mps2 = 244;
      case 244:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_accel_mps2(&has_bits);
          accel_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.simotion_state.SIMotionState motionState_nu = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::si::simotion_state::SIMotionState_IsValid(val))) {
            _internal_set_motionstate_nu(static_cast<::pb::si::simotion_state::SIMotionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(330, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float yawRate_radps = 349;
      case 349:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_yawrate_radps(&has_bits);
          yawrate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vel_mps = 474;
      case 474:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_vel_mps(&has_bits);
          vel_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frontWheelAngle_rad = 944;
      case 944:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_frontwheelangle_rad(&has_bits);
          frontwheelangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rearWheelAngle_rad = 1331;
      case 1331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_rearwheelangle_rad(&has_bits);
          rearwheelangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float drivenDistance_m = 1548;
      case 1548:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_drivendistance_m(&has_bits);
          drivendistance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roll_rad = 2073;
      case 2073:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_roll_rad(&has_bits);
          roll_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pitch_rad = 4033;
      case 4033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pitch_rad(&has_bits);
          pitch_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EgoMotionPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.ego_motion_port.EgoMotionPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float accel_mps2 = 244;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(244, this->_internal_accel_mps2(), target);
  }

  // optional .pb.si.simotion_state.SIMotionState motionState_nu = 330;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      330, this->_internal_motionstate_nu(), target);
  }

  // optional float yawRate_radps = 349;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(349, this->_internal_yawrate_radps(), target);
  }

  // optional float vel_mps = 474;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(474, this->_internal_vel_mps(), target);
  }

  // optional float frontWheelAngle_rad = 944;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(944, this->_internal_frontwheelangle_rad(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float rearWheelAngle_rad = 1331;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1331, this->_internal_rearwheelangle_rad(), target);
  }

  // optional float drivenDistance_m = 1548;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1548, this->_internal_drivendistance_m(), target);
  }

  // optional float roll_rad = 2073;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2073, this->_internal_roll_rad(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float pitch_rad = 4033;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4033, this->_internal_pitch_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.ego_motion_port.EgoMotionPort)
  return target;
}

size_t EgoMotionPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.ego_motion_port.EgoMotionPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float accel_mps2 = 244;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional .pb.si.simotion_state.SIMotionState motionState_nu = 330;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_motionstate_nu());
    }

    // optional float yawRate_radps = 349;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float vel_mps = 474;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float frontWheelAngle_rad = 944;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float rearWheelAngle_rad = 1331;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float drivenDistance_m = 1548;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float roll_rad = 2073;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float pitch_rad = 4033;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoMotionPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.ego_motion_port.EgoMotionPort)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoMotionPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EgoMotionPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.ego_motion_port.EgoMotionPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.ego_motion_port.EgoMotionPort)
    MergeFrom(*source);
  }
}

void EgoMotionPort::MergeFrom(const EgoMotionPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.ego_motion_port.EgoMotionPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      accel_mps2_ = from.accel_mps2_;
    }
    if (cached_has_bits & 0x00000004u) {
      motionstate_nu_ = from.motionstate_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      yawrate_radps_ = from.yawrate_radps_;
    }
    if (cached_has_bits & 0x00000010u) {
      vel_mps_ = from.vel_mps_;
    }
    if (cached_has_bits & 0x00000020u) {
      frontwheelangle_rad_ = from.frontwheelangle_rad_;
    }
    if (cached_has_bits & 0x00000040u) {
      rearwheelangle_rad_ = from.rearwheelangle_rad_;
    }
    if (cached_has_bits & 0x00000080u) {
      drivendistance_m_ = from.drivendistance_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      roll_rad_ = from.roll_rad_;
    }
    if (cached_has_bits & 0x00000200u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000400u) {
      pitch_rad_ = from.pitch_rad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EgoMotionPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.ego_motion_port.EgoMotionPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoMotionPort::CopyFrom(const EgoMotionPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.ego_motion_port.EgoMotionPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoMotionPort::IsInitialized() const {
  return true;
}

void EgoMotionPort::InternalSwap(EgoMotionPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(accel_mps2_, other->accel_mps2_);
  swap(motionstate_nu_, other->motionstate_nu_);
  swap(yawrate_radps_, other->yawrate_radps_);
  swap(vel_mps_, other->vel_mps_);
  swap(frontwheelangle_rad_, other->frontwheelangle_rad_);
  swap(rearwheelangle_rad_, other->rearwheelangle_rad_);
  swap(drivendistance_m_, other->drivendistance_m_);
  swap(roll_rad_, other->roll_rad_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(pitch_rad_, other->pitch_rad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EgoMotionPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EgoMotionPort_array_port::InitAsDefaultInstance() {
}
class EgoMotionPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<EgoMotionPort_array_port>()._has_bits_);
};

EgoMotionPort_array_port::EgoMotionPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.ego_motion_port.EgoMotionPort_array_port)
}
EgoMotionPort_array_port::EgoMotionPort_array_port(const EgoMotionPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.ego_motion_port.EgoMotionPort_array_port)
}

void EgoMotionPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EgoMotionPort_array_port_si_2fego_5fmotion_5fport_2eproto.base);
}

EgoMotionPort_array_port::~EgoMotionPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.ego_motion_port.EgoMotionPort_array_port)
  SharedDtor();
}

void EgoMotionPort_array_port::SharedDtor() {
}

void EgoMotionPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EgoMotionPort_array_port& EgoMotionPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EgoMotionPort_array_port_si_2fego_5fmotion_5fport_2eproto.base);
  return *internal_default_instance();
}


void EgoMotionPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.ego_motion_port.EgoMotionPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EgoMotionPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.ego_motion_port.EgoMotionPort data = 1996;
      case 1996:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15970>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EgoMotionPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.ego_motion_port.EgoMotionPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.ego_motion_port.EgoMotionPort data = 1996;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1996, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.ego_motion_port.EgoMotionPort_array_port)
  return target;
}

size_t EgoMotionPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.ego_motion_port.EgoMotionPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.ego_motion_port.EgoMotionPort data = 1996;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoMotionPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.ego_motion_port.EgoMotionPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoMotionPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EgoMotionPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.ego_motion_port.EgoMotionPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.ego_motion_port.EgoMotionPort_array_port)
    MergeFrom(*source);
  }
}

void EgoMotionPort_array_port::MergeFrom(const EgoMotionPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.ego_motion_port.EgoMotionPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void EgoMotionPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.ego_motion_port.EgoMotionPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoMotionPort_array_port::CopyFrom(const EgoMotionPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.ego_motion_port.EgoMotionPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoMotionPort_array_port::IsInitialized() const {
  return true;
}

void EgoMotionPort_array_port::InternalSwap(EgoMotionPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EgoMotionPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ego_motion_port
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::ego_motion_port::EgoMotionPort* Arena::CreateMaybeMessage< ::pb::si::ego_motion_port::EgoMotionPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::ego_motion_port::EgoMotionPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::ego_motion_port::EgoMotionPort_array_port* Arena::CreateMaybeMessage< ::pb::si::ego_motion_port::EgoMotionPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::ego_motion_port::EgoMotionPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
