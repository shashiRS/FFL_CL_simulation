// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/slot_cost_fun_data_per_opt_phase.proto

#include "si/slot_cost_fun_data_per_opt_phase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_si_2fquadrilateral_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadrilateralSerializable_si_2fquadrilateral_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fvirtual_5fline_5findex_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualLineIndexSerializable_si_2fvirtual_5fline_5findex_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fvirtual_5fline_5fserializable_5farray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VirtualLineSerializableArray_si_2fvirtual_5fline_5fserializable_5farray_2eproto;
namespace pb {
namespace si {
namespace slot_cost_fun_data_per_opt_phase {
class SlotCostFunDataPerOptPhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlotCostFunDataPerOptPhase> _instance;
} _SlotCostFunDataPerOptPhase_default_instance_;
class SlotCostFunDataPerOptPhase_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlotCostFunDataPerOptPhase_array_port> _instance;
} _SlotCostFunDataPerOptPhase_array_port_default_instance_;
}  // namespace slot_cost_fun_data_per_opt_phase
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_default_instance_;
    new (ptr) ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto}, {
      &scc_info_QuadrilateralSerializable_si_2fquadrilateral_5fserializable_2eproto.base,
      &scc_info_VirtualLineSerializableArray_si_2fvirtual_5fline_5fserializable_5farray_2eproto.base,
      &scc_info_VirtualLineIndexSerializable_si_2fvirtual_5fline_5findex_5fserializable_2eproto.base,}};

static void InitDefaultsscc_info_SlotCostFunDataPerOptPhase_array_port_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_array_port_default_instance_;
    new (ptr) ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SlotCostFunDataPerOptPhase_array_port_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SlotCostFunDataPerOptPhase_array_port_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto}, {
      &scc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, roileft_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, roiright_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, roicurb_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, virtuallines_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, bestvlindices_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, curbalignment_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, curbalignmentperf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, closestfl_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, closestfr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, pullperformfront_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, opening_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, openingperf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, sidealignmenterror_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, sidealignmentperf_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, wingalignmenterror_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, wingalignmentperf_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase, overallperf_m_),
  2,
  0,
  1,
  4,
  3,
  15,
  6,
  10,
  16,
  7,
  14,
  8,
  11,
  5,
  9,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase)},
  { 39, 45, sizeof(::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)si/slot_cost_fun_data_per_opt_phase.pr"
  "oto\022&pb.si.slot_cost_fun_data_per_opt_ph"
  "ase\032#si/quadrilateral_serializable.proto"
  "\032(si/virtual_line_serializable_array.pro"
  "to\032(si/virtual_line_index_serializable.p"
  "roto\"\212\006\n\032SlotCostFunDataPerOptPhase\022M\n\007r"
  "oiLeft\030\313\021 \001(\0132;.pb.si.quadrilateral_seri"
  "alizable.QuadrilateralSerializable\022M\n\010ro"
  "iRight\030} \001(\0132;.pb.si.quadrilateral_seria"
  "lizable.QuadrilateralSerializable\022M\n\007roi"
  "Curb\030\206\004 \001(\0132;.pb.si.quadrilateral_serial"
  "izable.QuadrilateralSerializable\022Z\n\014virt"
  "ualLines\030\276\034 \001(\0132C.pb.si.virtual_line_ser"
  "ializable_array.VirtualLineSerializableA"
  "rray\022[\n\rbestVLIndices\030\270\022 \001(\0132C.pb.si.vir"
  "tual_line_index_serializable.VirtualLine"
  "IndexSerializable\022\032\n\021curbAlignment_deg\030\240"
  "\036 \001(\002\022\035\n\024curbAlignmentPerf_nu\030\375\010 \001(\002\022\024\n\013"
  "closestFL_m\030\246\017 \001(\002\022\024\n\013closestFR_m\030\304\037 \001(\002"
  "\022\034\n\023pullPerformFront_nu\030\266\t \001(\002\022\022\n\topenin"
  "g_m\030\243\035 \001(\002\022\027\n\016openingPerf_nu\030\331\n \001(\002\022\037\n\026s"
  "ideAlignmentError_deg\030\232\027 \001(\002\022\034\n\023sideAlig"
  "nmentPerf_m\030\264\004 \001(\002\022\037\n\026wingAlignmentError"
  "_deg\030\233\014 \001(\002\022\034\n\023wingAlignmentPerf_m\030\226\031 \001("
  "\002\022\026\n\roverallPerf_m\030\211\034 \001(\002\"z\n%SlotCostFun"
  "DataPerOptPhase_array_port\022Q\n\004data\030\325\024 \003("
  "\0132B.pb.si.slot_cost_fun_data_per_opt_pha"
  "se.SlotCostFunDataPerOptPhase"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_deps[3] = {
  &::descriptor_table_si_2fquadrilateral_5fserializable_2eproto,
  &::descriptor_table_si_2fvirtual_5fline_5findex_5fserializable_2eproto,
  &::descriptor_table_si_2fvirtual_5fline_5fserializable_5farray_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_sccs[2] = {
  &scc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.base,
  &scc_info_SlotCostFunDataPerOptPhase_array_port_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_once;
static bool descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto = {
  &descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_initialized, descriptor_table_protodef_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto, "si/slot_cost_fun_data_per_opt_phase.proto", 1109,
  &descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_once, descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_sccs, descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto::offsets,
  file_level_metadata_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto, 2, file_level_enum_descriptors_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto, file_level_service_descriptors_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto), true);
namespace pb {
namespace si {
namespace slot_cost_fun_data_per_opt_phase {

// ===================================================================

void SlotCostFunDataPerOptPhase::InitAsDefaultInstance() {
  ::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_default_instance_._instance.get_mutable()->roileft_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_default_instance_._instance.get_mutable()->roiright_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_default_instance_._instance.get_mutable()->roicurb_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_default_instance_._instance.get_mutable()->virtuallines_ = const_cast< ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray*>(
      ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray::internal_default_instance());
  ::pb::si::slot_cost_fun_data_per_opt_phase::_SlotCostFunDataPerOptPhase_default_instance_._instance.get_mutable()->bestvlindices_ = const_cast< ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable*>(
      ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable::internal_default_instance());
}
class SlotCostFunDataPerOptPhase::_Internal {
 public:
  using HasBits = decltype(std::declval<SlotCostFunDataPerOptPhase>()._has_bits_);
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& roileft(const SlotCostFunDataPerOptPhase* msg);
  static void set_has_roileft(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& roiright(const SlotCostFunDataPerOptPhase* msg);
  static void set_has_roiright(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& roicurb(const SlotCostFunDataPerOptPhase* msg);
  static void set_has_roicurb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray& virtuallines(const SlotCostFunDataPerOptPhase* msg);
  static void set_has_virtuallines(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable& bestvlindices(const SlotCostFunDataPerOptPhase* msg);
  static void set_has_bestvlindices(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_curbalignment_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_curbalignmentperf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_closestfl_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_closestfr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pullperformfront_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_opening_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_openingperf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sidealignmenterror_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sidealignmentperf_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wingalignmenterror_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wingalignmentperf_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_overallperf_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
SlotCostFunDataPerOptPhase::_Internal::roileft(const SlotCostFunDataPerOptPhase* msg) {
  return *msg->roileft_;
}
const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
SlotCostFunDataPerOptPhase::_Internal::roiright(const SlotCostFunDataPerOptPhase* msg) {
  return *msg->roiright_;
}
const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
SlotCostFunDataPerOptPhase::_Internal::roicurb(const SlotCostFunDataPerOptPhase* msg) {
  return *msg->roicurb_;
}
const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray&
SlotCostFunDataPerOptPhase::_Internal::virtuallines(const SlotCostFunDataPerOptPhase* msg) {
  return *msg->virtuallines_;
}
const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable&
SlotCostFunDataPerOptPhase::_Internal::bestvlindices(const SlotCostFunDataPerOptPhase* msg) {
  return *msg->bestvlindices_;
}
void SlotCostFunDataPerOptPhase::clear_roileft() {
  if (roileft_ != nullptr) roileft_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SlotCostFunDataPerOptPhase::clear_roiright() {
  if (roiright_ != nullptr) roiright_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SlotCostFunDataPerOptPhase::clear_roicurb() {
  if (roicurb_ != nullptr) roicurb_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SlotCostFunDataPerOptPhase::clear_virtuallines() {
  if (virtuallines_ != nullptr) virtuallines_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SlotCostFunDataPerOptPhase::clear_bestvlindices() {
  if (bestvlindices_ != nullptr) bestvlindices_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SlotCostFunDataPerOptPhase::SlotCostFunDataPerOptPhase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
}
SlotCostFunDataPerOptPhase::SlotCostFunDataPerOptPhase(const SlotCostFunDataPerOptPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_roiright()) {
    roiright_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.roiright_);
  } else {
    roiright_ = nullptr;
  }
  if (from._internal_has_roicurb()) {
    roicurb_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.roicurb_);
  } else {
    roicurb_ = nullptr;
  }
  if (from._internal_has_roileft()) {
    roileft_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.roileft_);
  } else {
    roileft_ = nullptr;
  }
  if (from._internal_has_bestvlindices()) {
    bestvlindices_ = new ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable(*from.bestvlindices_);
  } else {
    bestvlindices_ = nullptr;
  }
  if (from._internal_has_virtuallines()) {
    virtuallines_ = new ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray(*from.virtuallines_);
  } else {
    virtuallines_ = nullptr;
  }
  ::memcpy(&sidealignmentperf_m_, &from.sidealignmentperf_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&closestfr_m_) -
    reinterpret_cast<char*>(&sidealignmentperf_m_)) + sizeof(closestfr_m_));
  // @@protoc_insertion_point(copy_constructor:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
}

void SlotCostFunDataPerOptPhase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.base);
  ::memset(&roiright_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closestfr_m_) -
      reinterpret_cast<char*>(&roiright_)) + sizeof(closestfr_m_));
}

SlotCostFunDataPerOptPhase::~SlotCostFunDataPerOptPhase() {
  // @@protoc_insertion_point(destructor:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  SharedDtor();
}

void SlotCostFunDataPerOptPhase::SharedDtor() {
  if (this != internal_default_instance()) delete roiright_;
  if (this != internal_default_instance()) delete roicurb_;
  if (this != internal_default_instance()) delete roileft_;
  if (this != internal_default_instance()) delete bestvlindices_;
  if (this != internal_default_instance()) delete virtuallines_;
}

void SlotCostFunDataPerOptPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlotCostFunDataPerOptPhase& SlotCostFunDataPerOptPhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlotCostFunDataPerOptPhase_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.base);
  return *internal_default_instance();
}


void SlotCostFunDataPerOptPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(roiright_ != nullptr);
      roiright_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(roicurb_ != nullptr);
      roicurb_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(roileft_ != nullptr);
      roileft_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bestvlindices_ != nullptr);
      bestvlindices_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(virtuallines_ != nullptr);
      virtuallines_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&sidealignmentperf_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pullperformfront_nu_) -
        reinterpret_cast<char*>(&sidealignmentperf_m_)) + sizeof(pullperformfront_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&openingperf_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curbalignment_deg_) -
        reinterpret_cast<char*>(&openingperf_nu_)) + sizeof(curbalignment_deg_));
  }
  closestfr_m_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SlotCostFunDataPerOptPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiRight = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_roiright(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiCurb = 518;
      case 518:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_roicurb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sideAlignmentPerf_m = 564;
      case 564:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_sidealignmentperf_m(&has_bits);
          sidealignmentperf_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float curbAlignmentPerf_nu = 1149;
      case 1149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_curbalignmentperf_nu(&has_bits);
          curbalignmentperf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pullPerformFront_nu = 1206;
      case 1206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_pullperformfront_nu(&has_bits);
          pullperformfront_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float openingPerf_nu = 1369;
      case 1369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_openingperf_nu(&has_bits);
          openingperf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wingAlignmentError_deg = 1563;
      case 1563:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_wingalignmenterror_deg(&has_bits);
          wingalignmenterror_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float closestFL_m = 1958;
      case 1958:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_closestfl_m(&has_bits);
          closestfl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiLeft = 2251;
      case 2251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_roileft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.virtual_line_index_serializable.VirtualLineIndexSerializable bestVLIndices = 2360;
      case 2360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_bestvlindices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sideAlignmentError_deg = 2970;
      case 2970:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_sidealignmenterror_deg(&has_bits);
          sidealignmenterror_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wingAlignmentPerf_m = 3222;
      case 3222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_wingalignmentperf_m(&has_bits);
          wingalignmentperf_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overallPerf_m = 3593;
      case 3593:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_overallperf_m(&has_bits);
          overallperf_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.virtual_line_serializable_array.VirtualLineSerializableArray virtualLines = 3646;
      case 3646:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtuallines(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float opening_m = 3747;
      case 3747:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_opening_m(&has_bits);
          opening_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float curbAlignment_deg = 3872;
      case 3872:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_curbalignment_deg(&has_bits);
          curbalignment_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float closestFR_m = 4036;
      case 4036:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_closestfr_m(&has_bits);
          closestfr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlotCostFunDataPerOptPhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiRight = 125;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        125, _Internal::roiright(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiCurb = 518;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        518, _Internal::roicurb(this), target, stream);
  }

  // optional float sideAlignmentPerf_m = 564;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(564, this->_internal_sidealignmentperf_m(), target);
  }

  // optional float curbAlignmentPerf_nu = 1149;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1149, this->_internal_curbalignmentperf_nu(), target);
  }

  // optional float pullPerformFront_nu = 1206;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1206, this->_internal_pullperformfront_nu(), target);
  }

  // optional float openingPerf_nu = 1369;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1369, this->_internal_openingperf_nu(), target);
  }

  // optional float wingAlignmentError_deg = 1563;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1563, this->_internal_wingalignmenterror_deg(), target);
  }

  // optional float closestFL_m = 1958;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1958, this->_internal_closestfl_m(), target);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiLeft = 2251;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2251, _Internal::roileft(this), target, stream);
  }

  // optional .pb.si.virtual_line_index_serializable.VirtualLineIndexSerializable bestVLIndices = 2360;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2360, _Internal::bestvlindices(this), target, stream);
  }

  // optional float sideAlignmentError_deg = 2970;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2970, this->_internal_sidealignmenterror_deg(), target);
  }

  // optional float wingAlignmentPerf_m = 3222;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3222, this->_internal_wingalignmentperf_m(), target);
  }

  // optional float overallPerf_m = 3593;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3593, this->_internal_overallperf_m(), target);
  }

  // optional .pb.si.virtual_line_serializable_array.VirtualLineSerializableArray virtualLines = 3646;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3646, _Internal::virtuallines(this), target, stream);
  }

  // optional float opening_m = 3747;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3747, this->_internal_opening_m(), target);
  }

  // optional float curbAlignment_deg = 3872;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3872, this->_internal_curbalignment_deg(), target);
  }

  // optional float closestFR_m = 4036;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4036, this->_internal_closestfr_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  return target;
}

size_t SlotCostFunDataPerOptPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiRight = 125;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roiright_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiCurb = 518;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roicurb_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiLeft = 2251;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roileft_);
    }

    // optional .pb.si.virtual_line_index_serializable.VirtualLineIndexSerializable bestVLIndices = 2360;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bestvlindices_);
    }

    // optional .pb.si.virtual_line_serializable_array.VirtualLineSerializableArray virtualLines = 3646;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtuallines_);
    }

    // optional float sideAlignmentPerf_m = 564;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float curbAlignmentPerf_nu = 1149;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float pullPerformFront_nu = 1206;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float openingPerf_nu = 1369;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float wingAlignmentError_deg = 1563;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float closestFL_m = 1958;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float sideAlignmentError_deg = 2970;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float wingAlignmentPerf_m = 3222;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float overallPerf_m = 3593;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float opening_m = 3747;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float curbAlignment_deg = 3872;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  // optional float closestFR_m = 4036;
  if (cached_has_bits & 0x00010000u) {
    total_size += 3 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlotCostFunDataPerOptPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const SlotCostFunDataPerOptPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlotCostFunDataPerOptPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
    MergeFrom(*source);
  }
}

void SlotCostFunDataPerOptPhase::MergeFrom(const SlotCostFunDataPerOptPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_roiright()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_roiright());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_roicurb()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_roicurb());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_roileft()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_roileft());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_bestvlindices()->::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable::MergeFrom(from._internal_bestvlindices());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_virtuallines()->::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray::MergeFrom(from._internal_virtuallines());
    }
    if (cached_has_bits & 0x00000020u) {
      sidealignmentperf_m_ = from.sidealignmentperf_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      curbalignmentperf_nu_ = from.curbalignmentperf_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      pullperformfront_nu_ = from.pullperformfront_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      openingperf_nu_ = from.openingperf_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      wingalignmenterror_deg_ = from.wingalignmenterror_deg_;
    }
    if (cached_has_bits & 0x00000400u) {
      closestfl_m_ = from.closestfl_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      sidealignmenterror_deg_ = from.sidealignmenterror_deg_;
    }
    if (cached_has_bits & 0x00001000u) {
      wingalignmentperf_m_ = from.wingalignmentperf_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      overallperf_m_ = from.overallperf_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      opening_m_ = from.opening_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      curbalignment_deg_ = from.curbalignment_deg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_closestfr_m(from._internal_closestfr_m());
  }
}

void SlotCostFunDataPerOptPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotCostFunDataPerOptPhase::CopyFrom(const SlotCostFunDataPerOptPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotCostFunDataPerOptPhase::IsInitialized() const {
  return true;
}

void SlotCostFunDataPerOptPhase::InternalSwap(SlotCostFunDataPerOptPhase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roiright_, other->roiright_);
  swap(roicurb_, other->roicurb_);
  swap(roileft_, other->roileft_);
  swap(bestvlindices_, other->bestvlindices_);
  swap(virtuallines_, other->virtuallines_);
  swap(sidealignmentperf_m_, other->sidealignmentperf_m_);
  swap(curbalignmentperf_nu_, other->curbalignmentperf_nu_);
  swap(pullperformfront_nu_, other->pullperformfront_nu_);
  swap(openingperf_nu_, other->openingperf_nu_);
  swap(wingalignmenterror_deg_, other->wingalignmenterror_deg_);
  swap(closestfl_m_, other->closestfl_m_);
  swap(sidealignmenterror_deg_, other->sidealignmenterror_deg_);
  swap(wingalignmentperf_m_, other->wingalignmentperf_m_);
  swap(overallperf_m_, other->overallperf_m_);
  swap(opening_m_, other->opening_m_);
  swap(curbalignment_deg_, other->curbalignment_deg_);
  swap(closestfr_m_, other->closestfr_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlotCostFunDataPerOptPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SlotCostFunDataPerOptPhase_array_port::InitAsDefaultInstance() {
}
class SlotCostFunDataPerOptPhase_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<SlotCostFunDataPerOptPhase_array_port>()._has_bits_);
};

SlotCostFunDataPerOptPhase_array_port::SlotCostFunDataPerOptPhase_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
}
SlotCostFunDataPerOptPhase_array_port::SlotCostFunDataPerOptPhase_array_port(const SlotCostFunDataPerOptPhase_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
}

void SlotCostFunDataPerOptPhase_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SlotCostFunDataPerOptPhase_array_port_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.base);
}

SlotCostFunDataPerOptPhase_array_port::~SlotCostFunDataPerOptPhase_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  SharedDtor();
}

void SlotCostFunDataPerOptPhase_array_port::SharedDtor() {
}

void SlotCostFunDataPerOptPhase_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlotCostFunDataPerOptPhase_array_port& SlotCostFunDataPerOptPhase_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlotCostFunDataPerOptPhase_array_port_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.base);
  return *internal_default_instance();
}


void SlotCostFunDataPerOptPhase_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SlotCostFunDataPerOptPhase_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase data = 2645;
      case 2645:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlotCostFunDataPerOptPhase_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase data = 2645;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2645, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  return target;
}

size_t SlotCostFunDataPerOptPhase_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase data = 2645;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlotCostFunDataPerOptPhase_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const SlotCostFunDataPerOptPhase_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlotCostFunDataPerOptPhase_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
    MergeFrom(*source);
  }
}

void SlotCostFunDataPerOptPhase_array_port::MergeFrom(const SlotCostFunDataPerOptPhase_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SlotCostFunDataPerOptPhase_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotCostFunDataPerOptPhase_array_port::CopyFrom(const SlotCostFunDataPerOptPhase_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotCostFunDataPerOptPhase_array_port::IsInitialized() const {
  return true;
}

void SlotCostFunDataPerOptPhase_array_port::InternalSwap(SlotCostFunDataPerOptPhase_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlotCostFunDataPerOptPhase_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace slot_cost_fun_data_per_opt_phase
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* Arena::CreateMaybeMessage< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port* Arena::CreateMaybeMessage< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
