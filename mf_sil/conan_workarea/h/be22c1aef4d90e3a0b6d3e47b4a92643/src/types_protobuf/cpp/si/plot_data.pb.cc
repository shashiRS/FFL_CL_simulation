// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/plot_data.proto

#include "si/plot_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_si_2fcore_5fplot_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_CorePlotData_si_2fcore_5fplot_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fhigh_5fplot_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2flow_5fplot_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LowPlotData_si_2flow_5fplot_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fplot_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlotData_si_2fplot_5fdata_2eproto;
namespace pb {
namespace si {
namespace plot_data {
class PlotDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlotData> _instance;
} _PlotData_default_instance_;
class PlotData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlotData_array_port> _instance;
} _PlotData_array_port_default_instance_;
}  // namespace plot_data
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_PlotData_si_2fplot_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::plot_data::_PlotData_default_instance_;
    new (ptr) ::pb::si::plot_data::PlotData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::plot_data::PlotData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlotData_si_2fplot_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlotData_si_2fplot_5fdata_2eproto}, {
      &scc_info_CorePlotData_si_2fcore_5fplot_5fdata_2eproto.base,
      &scc_info_LowPlotData_si_2flow_5fplot_5fdata_2eproto.base,
      &scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_PlotData_array_port_si_2fplot_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::plot_data::_PlotData_array_port_default_instance_;
    new (ptr) ::pb::si::plot_data::PlotData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::plot_data::PlotData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlotData_array_port_si_2fplot_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlotData_array_port_si_2fplot_5fdata_2eproto}, {
      &scc_info_PlotData_si_2fplot_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fplot_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fplot_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fplot_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fplot_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData, core_),
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData, low_),
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData, high_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::plot_data::PlotData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::pb::si::plot_data::PlotData)},
  { 11, 17, sizeof(::pb::si::plot_data::PlotData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::plot_data::_PlotData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::plot_data::_PlotData_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fplot_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022si/plot_data.proto\022\017pb.si.plot_data\032\027s"
  "i/core_plot_data.proto\032\026si/low_plot_data"
  ".proto\032\027si/high_plot_data.proto\"\240\001\n\010Plot"
  "Data\0221\n\004core\030\262\016 \001(\0132\".pb.si.core_plot_da"
  "ta.CorePlotData\022.\n\003low\030\357\027 \001(\0132 .pb.si.lo"
  "w_plot_data.LowPlotData\0221\n\004high\030\264\026 \001(\0132\""
  ".pb.si.high_plot_data.HighPlotData\"\?\n\023Pl"
  "otData_array_port\022(\n\004data\030\322\001 \003(\0132\031.pb.si"
  ".plot_data.PlotData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fplot_5fdata_2eproto_deps[3] = {
  &::descriptor_table_si_2fcore_5fplot_5fdata_2eproto,
  &::descriptor_table_si_2fhigh_5fplot_5fdata_2eproto,
  &::descriptor_table_si_2flow_5fplot_5fdata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fplot_5fdata_2eproto_sccs[2] = {
  &scc_info_PlotData_si_2fplot_5fdata_2eproto.base,
  &scc_info_PlotData_array_port_si_2fplot_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fplot_5fdata_2eproto_once;
static bool descriptor_table_si_2fplot_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fplot_5fdata_2eproto = {
  &descriptor_table_si_2fplot_5fdata_2eproto_initialized, descriptor_table_protodef_si_2fplot_5fdata_2eproto, "si/plot_data.proto", 339,
  &descriptor_table_si_2fplot_5fdata_2eproto_once, descriptor_table_si_2fplot_5fdata_2eproto_sccs, descriptor_table_si_2fplot_5fdata_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_si_2fplot_5fdata_2eproto::offsets,
  file_level_metadata_si_2fplot_5fdata_2eproto, 2, file_level_enum_descriptors_si_2fplot_5fdata_2eproto, file_level_service_descriptors_si_2fplot_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fplot_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fplot_5fdata_2eproto), true);
namespace pb {
namespace si {
namespace plot_data {

// ===================================================================

void PlotData::InitAsDefaultInstance() {
  ::pb::si::plot_data::_PlotData_default_instance_._instance.get_mutable()->core_ = const_cast< ::pb::si::core_plot_data::CorePlotData*>(
      ::pb::si::core_plot_data::CorePlotData::internal_default_instance());
  ::pb::si::plot_data::_PlotData_default_instance_._instance.get_mutable()->low_ = const_cast< ::pb::si::low_plot_data::LowPlotData*>(
      ::pb::si::low_plot_data::LowPlotData::internal_default_instance());
  ::pb::si::plot_data::_PlotData_default_instance_._instance.get_mutable()->high_ = const_cast< ::pb::si::high_plot_data::HighPlotData*>(
      ::pb::si::high_plot_data::HighPlotData::internal_default_instance());
}
class PlotData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlotData>()._has_bits_);
  static const ::pb::si::core_plot_data::CorePlotData& core(const PlotData* msg);
  static void set_has_core(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::si::low_plot_data::LowPlotData& low(const PlotData* msg);
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::si::high_plot_data::HighPlotData& high(const PlotData* msg);
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::si::core_plot_data::CorePlotData&
PlotData::_Internal::core(const PlotData* msg) {
  return *msg->core_;
}
const ::pb::si::low_plot_data::LowPlotData&
PlotData::_Internal::low(const PlotData* msg) {
  return *msg->low_;
}
const ::pb::si::high_plot_data::HighPlotData&
PlotData::_Internal::high(const PlotData* msg) {
  return *msg->high_;
}
void PlotData::clear_core() {
  if (core_ != nullptr) core_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PlotData::clear_low() {
  if (low_ != nullptr) low_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PlotData::clear_high() {
  if (high_ != nullptr) high_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PlotData::PlotData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.plot_data.PlotData)
}
PlotData::PlotData(const PlotData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_core()) {
    core_ = new ::pb::si::core_plot_data::CorePlotData(*from.core_);
  } else {
    core_ = nullptr;
  }
  if (from._internal_has_high()) {
    high_ = new ::pb::si::high_plot_data::HighPlotData(*from.high_);
  } else {
    high_ = nullptr;
  }
  if (from._internal_has_low()) {
    low_ = new ::pb::si::low_plot_data::LowPlotData(*from.low_);
  } else {
    low_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.si.plot_data.PlotData)
}

void PlotData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlotData_si_2fplot_5fdata_2eproto.base);
  ::memset(&core_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&core_)) + sizeof(low_));
}

PlotData::~PlotData() {
  // @@protoc_insertion_point(destructor:pb.si.plot_data.PlotData)
  SharedDtor();
}

void PlotData::SharedDtor() {
  if (this != internal_default_instance()) delete core_;
  if (this != internal_default_instance()) delete high_;
  if (this != internal_default_instance()) delete low_;
}

void PlotData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlotData& PlotData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlotData_si_2fplot_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlotData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.plot_data.PlotData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(core_ != nullptr);
      core_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(high_ != nullptr);
      high_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(low_ != nullptr);
      low_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlotData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.si.core_plot_data.CorePlotData core = 1842;
      case 1842:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_core(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.high_plot_data.HighPlotData high = 2868;
      case 2868:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_high(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.low_plot_data.LowPlotData low = 3055;
      case 3055:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_low(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlotData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.plot_data.PlotData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.si.core_plot_data.CorePlotData core = 1842;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1842, _Internal::core(this), target, stream);
  }

  // optional .pb.si.high_plot_data.HighPlotData high = 2868;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2868, _Internal::high(this), target, stream);
  }

  // optional .pb.si.low_plot_data.LowPlotData low = 3055;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3055, _Internal::low(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.plot_data.PlotData)
  return target;
}

size_t PlotData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.plot_data.PlotData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pb.si.core_plot_data.CorePlotData core = 1842;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *core_);
    }

    // optional .pb.si.high_plot_data.HighPlotData high = 2868;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *high_);
    }

    // optional .pb.si.low_plot_data.LowPlotData low = 3055;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlotData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.plot_data.PlotData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlotData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlotData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.plot_data.PlotData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.plot_data.PlotData)
    MergeFrom(*source);
  }
}

void PlotData::MergeFrom(const PlotData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.plot_data.PlotData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_core()->::pb::si::core_plot_data::CorePlotData::MergeFrom(from._internal_core());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_high()->::pb::si::high_plot_data::HighPlotData::MergeFrom(from._internal_high());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_low()->::pb::si::low_plot_data::LowPlotData::MergeFrom(from._internal_low());
    }
  }
}

void PlotData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.plot_data.PlotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlotData::CopyFrom(const PlotData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.plot_data.PlotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlotData::IsInitialized() const {
  return true;
}

void PlotData::InternalSwap(PlotData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(core_, other->core_);
  swap(high_, other->high_);
  swap(low_, other->low_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlotData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlotData_array_port::InitAsDefaultInstance() {
}
class PlotData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<PlotData_array_port>()._has_bits_);
};

PlotData_array_port::PlotData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.plot_data.PlotData_array_port)
}
PlotData_array_port::PlotData_array_port(const PlotData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.plot_data.PlotData_array_port)
}

void PlotData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlotData_array_port_si_2fplot_5fdata_2eproto.base);
}

PlotData_array_port::~PlotData_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.plot_data.PlotData_array_port)
  SharedDtor();
}

void PlotData_array_port::SharedDtor() {
}

void PlotData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlotData_array_port& PlotData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlotData_array_port_si_2fplot_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PlotData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.plot_data.PlotData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlotData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.plot_data.PlotData data = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1682>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlotData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.plot_data.PlotData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.plot_data.PlotData data = 210;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(210, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.plot_data.PlotData_array_port)
  return target;
}

size_t PlotData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.plot_data.PlotData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.plot_data.PlotData data = 210;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlotData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.plot_data.PlotData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const PlotData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlotData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.plot_data.PlotData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.plot_data.PlotData_array_port)
    MergeFrom(*source);
  }
}

void PlotData_array_port::MergeFrom(const PlotData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.plot_data.PlotData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void PlotData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.plot_data.PlotData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlotData_array_port::CopyFrom(const PlotData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.plot_data.PlotData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlotData_array_port::IsInitialized() const {
  return true;
}

void PlotData_array_port::InternalSwap(PlotData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlotData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plot_data
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::plot_data::PlotData* Arena::CreateMaybeMessage< ::pb::si::plot_data::PlotData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::plot_data::PlotData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::plot_data::PlotData_array_port* Arena::CreateMaybeMessage< ::pb::si::plot_data::PlotData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::plot_data::PlotData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
