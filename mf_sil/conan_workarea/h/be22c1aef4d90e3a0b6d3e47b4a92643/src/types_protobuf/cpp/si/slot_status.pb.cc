// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/slot_status.proto

#include "si/slot_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace si {
namespace slot_status {
}  // namespace slot_status
}  // namespace si
}  // namespace pb
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_si_2fslot_5fstatus_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_si_2fslot_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fslot_5fstatus_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fslot_5fstatus_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_si_2fslot_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024si/slot_status.proto\022\021pb.si.slot_statu"
  "s*\330\007\n\nSlotStatus\022\013\n\007UNKNOWN\020\000\022\t\n\005VALID\020\001"
  "\022\023\n\017INVALID_OPENING\020\002\022\022\n\016INVALID_WINDOW\020"
  "\003\022\027\n\023NOT_MATCHING_WINDOW\020\004\022\026\n\022SLOT_ALREA"
  "DY_KNOWN\020\005\0220\n,SLOT_INVALIDATED_BY_OVERLA"
  "P_WITH_HIGHER_PRIO\020\006\022 \n\034SIDE_OR_CURB_OBJ"
  "ECTS_MISSING\020\007\022$\n TOO_MANY_ITERATIONS_IN"
  "_SHRINKING\020\010\022\037\n\033NO_VALID_SHIFT_VECTOR_FO"
  "UND\020\t\022\"\n\036SLOT_TOO_SMALL_AFTER_SHRINKING\020"
  "\n\022\027\n\023SLOT_INVALID_BY_DEF\020\013\022\036\n\032SLOT_PARAL"
  "LEL_WINDOW_VALID\020\014\022 \n\034SLOT_PARALLEL_WIND"
  "OW_INVALID\020\r\022\032\n\026SLOT_PERP_WINDOW_VALID\020\016"
  "\022\034\n\030SLOT_PERP_WINDOW_INVALID\020\017\022\034\n\030SLOT_G"
  "ARAGE_WINDOW_VALID\020\020\022\036\n\032SLOT_GARAGE_WIND"
  "OW_INVALID\020\021\022\034\n\030SLOT_ANGLED_WINDOW_VALID"
  "\020\022\022\036\n\032SLOT_ANGLED_WINDOW_INVALID\020\023\022\030\n\024SL"
  "OT_NOT_RECTANGULAR\020\024\022\032\n\026SLOT_OPENING_TOO"
  "_SHORT\020\025\022\031\n\025SLOT_OPENING_TOO_LONG\020\026\022\030\n\024S"
  "LOT_DEPTH_TOO_SHORT\020\027\022\027\n\023SLOT_DEPTH_TOO_"
  "LONG\020\030\022#\n\037SLOT_ORIENTATION_OVER_THRESHOL"
  "D\020\031\022\032\n\026SIDE_DELIMITER_INVALID\020\032\022\033\n\027SI_LO"
  "W_MINI_EM_OVERFLOW\020\033\022\034\n\030SLOT_NOT_OVERLAP"
  "PING_EGO\020\034\022\030\n\024SLOT_ROTATED_TOO_FAR\020\035\022\"\n\036"
  "SLOT_NOT_VALIDATED_BY_CNN_SLOT\020\036\022#\n\037SLOT"
  "_IS_INVALIDATED_BY_CNN_SLOT\020\037\022%\n!SLOT_EX"
  "TENDED_BEYOND_LINE_TOO_FAR\020 "
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fslot_5fstatus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fslot_5fstatus_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fslot_5fstatus_2eproto_once;
static bool descriptor_table_si_2fslot_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fslot_5fstatus_2eproto = {
  &descriptor_table_si_2fslot_5fstatus_2eproto_initialized, descriptor_table_protodef_si_2fslot_5fstatus_2eproto, "si/slot_status.proto", 1028,
  &descriptor_table_si_2fslot_5fstatus_2eproto_once, descriptor_table_si_2fslot_5fstatus_2eproto_sccs, descriptor_table_si_2fslot_5fstatus_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_si_2fslot_5fstatus_2eproto::offsets,
  file_level_metadata_si_2fslot_5fstatus_2eproto, 0, file_level_enum_descriptors_si_2fslot_5fstatus_2eproto, file_level_service_descriptors_si_2fslot_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fslot_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fslot_5fstatus_2eproto), true);
namespace pb {
namespace si {
namespace slot_status {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlotStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_si_2fslot_5fstatus_2eproto);
  return file_level_enum_descriptors_si_2fslot_5fstatus_2eproto[0];
}
bool SlotStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace slot_status
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
