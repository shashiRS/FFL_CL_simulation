// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/cnn_based_parking_slot.proto

#include "si/cnn_based_parking_slot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_si_2fcnn_5fbased_5fparking_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fparking_5fscenario_5fconfidence_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParkingScenarioConfidence_si_2fparking_5fscenario_5fconfidence_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fquadrilateral_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadrilateralSerializable_si_2fquadrilateral_5fserializable_2eproto;
namespace pb {
namespace si {
namespace cnn_based_parking_slot {
class CnnBasedParkingSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CnnBasedParkingSlot> _instance;
} _CnnBasedParkingSlot_default_instance_;
class CnnBasedParkingSlot_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CnnBasedParkingSlot_array_port> _instance;
} _CnnBasedParkingSlot_array_port_default_instance_;
}  // namespace cnn_based_parking_slot
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::cnn_based_parking_slot::_CnnBasedParkingSlot_default_instance_;
    new (ptr) ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto}, {
      &scc_info_QuadrilateralSerializable_si_2fquadrilateral_5fserializable_2eproto.base,
      &scc_info_ParkingScenarioConfidence_si_2fparking_5fscenario_5fconfidence_2eproto.base,}};

static void InitDefaultsscc_info_CnnBasedParkingSlot_array_port_si_2fcnn_5fbased_5fparking_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::cnn_based_parking_slot::_CnnBasedParkingSlot_array_port_default_instance_;
    new (ptr) ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CnnBasedParkingSlot_array_port_si_2fcnn_5fbased_5fparking_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CnnBasedParkingSlot_array_port_si_2fcnn_5fbased_5fparking_5fslot_2eproto}, {
      &scc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fcnn_5fbased_5fparking_5fslot_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fcnn_5fbased_5fparking_5fslot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fcnn_5fbased_5fparking_5fslot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fcnn_5fbased_5fparking_5fslot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot, slotid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot, slotshape_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot, existenceprob_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot, parkingscenarioconfidence_perc_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot)},
  { 13, 19, sizeof(::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::cnn_based_parking_slot::_CnnBasedParkingSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::cnn_based_parking_slot::_CnnBasedParkingSlot_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fcnn_5fbased_5fparking_5fslot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037si/cnn_based_parking_slot.proto\022\034pb.si"
  ".cnn_based_parking_slot\032#si/quadrilatera"
  "l_serializable.proto\032$si/parking_scenari"
  "o_confidence.proto\"\200\002\n\023CnnBasedParkingSl"
  "ot\022\022\n\tslotId_nu\030\333\033 \001(\r\022Q\n\013slotShape_m\030\227\027"
  " \001(\0132;.pb.si.quadrilateral_serializable."
  "QuadrilateralSerializable\022\033\n\022existencePr"
  "ob_perc\030\370\022 \001(\r\022e\n\036parkingScenarioConfide"
  "nce_perc\030\264\004 \001(\0132<.pb.si.parking_scenario"
  "_confidence.ParkingScenarioConfidence\"b\n"
  "\036CnnBasedParkingSlot_array_port\022@\n\004data\030"
  "\334\033 \003(\01321.pb.si.cnn_based_parking_slot.Cn"
  "nBasedParkingSlot"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_deps[2] = {
  &::descriptor_table_si_2fparking_5fscenario_5fconfidence_2eproto,
  &::descriptor_table_si_2fquadrilateral_5fserializable_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_sccs[2] = {
  &scc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto.base,
  &scc_info_CnnBasedParkingSlot_array_port_si_2fcnn_5fbased_5fparking_5fslot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_once;
static bool descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto = {
  &descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_initialized, descriptor_table_protodef_si_2fcnn_5fbased_5fparking_5fslot_2eproto, "si/cnn_based_parking_slot.proto", 497,
  &descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_once, descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_sccs, descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_si_2fcnn_5fbased_5fparking_5fslot_2eproto::offsets,
  file_level_metadata_si_2fcnn_5fbased_5fparking_5fslot_2eproto, 2, file_level_enum_descriptors_si_2fcnn_5fbased_5fparking_5fslot_2eproto, file_level_service_descriptors_si_2fcnn_5fbased_5fparking_5fslot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fcnn_5fbased_5fparking_5fslot_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_2eproto), true);
namespace pb {
namespace si {
namespace cnn_based_parking_slot {

// ===================================================================

void CnnBasedParkingSlot::InitAsDefaultInstance() {
  ::pb::si::cnn_based_parking_slot::_CnnBasedParkingSlot_default_instance_._instance.get_mutable()->slotshape_m_ = const_cast< ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      ::pb::si::quadrilateral_serializable::QuadrilateralSerializable::internal_default_instance());
  ::pb::si::cnn_based_parking_slot::_CnnBasedParkingSlot_default_instance_._instance.get_mutable()->parkingscenarioconfidence_perc_ = const_cast< ::pb::si::parking_scenario_confidence::ParkingScenarioConfidence*>(
      ::pb::si::parking_scenario_confidence::ParkingScenarioConfidence::internal_default_instance());
}
class CnnBasedParkingSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CnnBasedParkingSlot>()._has_bits_);
  static void set_has_slotid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& slotshape_m(const CnnBasedParkingSlot* msg);
  static void set_has_slotshape_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_existenceprob_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::si::parking_scenario_confidence::ParkingScenarioConfidence& parkingscenarioconfidence_perc(const CnnBasedParkingSlot* msg);
  static void set_has_parkingscenarioconfidence_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable&
CnnBasedParkingSlot::_Internal::slotshape_m(const CnnBasedParkingSlot* msg) {
  return *msg->slotshape_m_;
}
const ::pb::si::parking_scenario_confidence::ParkingScenarioConfidence&
CnnBasedParkingSlot::_Internal::parkingscenarioconfidence_perc(const CnnBasedParkingSlot* msg) {
  return *msg->parkingscenarioconfidence_perc_;
}
void CnnBasedParkingSlot::clear_slotshape_m() {
  if (slotshape_m_ != nullptr) slotshape_m_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CnnBasedParkingSlot::clear_parkingscenarioconfidence_perc() {
  if (parkingscenarioconfidence_perc_ != nullptr) parkingscenarioconfidence_perc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CnnBasedParkingSlot::CnnBasedParkingSlot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
}
CnnBasedParkingSlot::CnnBasedParkingSlot(const CnnBasedParkingSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_parkingscenarioconfidence_perc()) {
    parkingscenarioconfidence_perc_ = new ::pb::si::parking_scenario_confidence::ParkingScenarioConfidence(*from.parkingscenarioconfidence_perc_);
  } else {
    parkingscenarioconfidence_perc_ = nullptr;
  }
  if (from._internal_has_slotshape_m()) {
    slotshape_m_ = new ::pb::si::quadrilateral_serializable::QuadrilateralSerializable(*from.slotshape_m_);
  } else {
    slotshape_m_ = nullptr;
  }
  ::memcpy(&existenceprob_perc_, &from.existenceprob_perc_,
    static_cast<size_t>(reinterpret_cast<char*>(&slotid_nu_) -
    reinterpret_cast<char*>(&existenceprob_perc_)) + sizeof(slotid_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
}

void CnnBasedParkingSlot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto.base);
  ::memset(&parkingscenarioconfidence_perc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slotid_nu_) -
      reinterpret_cast<char*>(&parkingscenarioconfidence_perc_)) + sizeof(slotid_nu_));
}

CnnBasedParkingSlot::~CnnBasedParkingSlot() {
  // @@protoc_insertion_point(destructor:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  SharedDtor();
}

void CnnBasedParkingSlot::SharedDtor() {
  if (this != internal_default_instance()) delete parkingscenarioconfidence_perc_;
  if (this != internal_default_instance()) delete slotshape_m_;
}

void CnnBasedParkingSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CnnBasedParkingSlot& CnnBasedParkingSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CnnBasedParkingSlot_si_2fcnn_5fbased_5fparking_5fslot_2eproto.base);
  return *internal_default_instance();
}


void CnnBasedParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(parkingscenarioconfidence_perc_ != nullptr);
      parkingscenarioconfidence_perc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slotshape_m_ != nullptr);
      slotshape_m_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&existenceprob_perc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotid_nu_) -
        reinterpret_cast<char*>(&existenceprob_perc_)) + sizeof(slotid_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CnnBasedParkingSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.si.parking_scenario_confidence.ParkingScenarioConfidence parkingScenarioConfidence_perc = 564;
      case 564:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_parkingscenarioconfidence_perc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 existenceProb_perc = 2424;
      case 2424:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_existenceprob_perc(&has_bits);
          existenceprob_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable slotShape_m = 2967;
      case 2967:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_slotshape_m(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slotId_nu = 3547;
      case 3547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_slotid_nu(&has_bits);
          slotid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CnnBasedParkingSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.si.parking_scenario_confidence.ParkingScenarioConfidence parkingScenarioConfidence_perc = 564;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        564, _Internal::parkingscenarioconfidence_perc(this), target, stream);
  }

  // optional uint32 existenceProb_perc = 2424;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2424, this->_internal_existenceprob_perc(), target);
  }

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable slotShape_m = 2967;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2967, _Internal::slotshape_m(this), target, stream);
  }

  // optional uint32 slotId_nu = 3547;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3547, this->_internal_slotid_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  return target;
}

size_t CnnBasedParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pb.si.parking_scenario_confidence.ParkingScenarioConfidence parkingScenarioConfidence_perc = 564;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parkingscenarioconfidence_perc_);
    }

    // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable slotShape_m = 2967;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slotshape_m_);
    }

    // optional uint32 existenceProb_perc = 2424;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_existenceprob_perc());
    }

    // optional uint32 slotId_nu = 3547;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slotid_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CnnBasedParkingSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CnnBasedParkingSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CnnBasedParkingSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
    MergeFrom(*source);
  }
}

void CnnBasedParkingSlot::MergeFrom(const CnnBasedParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_parkingscenarioconfidence_perc()->::pb::si::parking_scenario_confidence::ParkingScenarioConfidence::MergeFrom(from._internal_parkingscenarioconfidence_perc());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slotshape_m()->::pb::si::quadrilateral_serializable::QuadrilateralSerializable::MergeFrom(from._internal_slotshape_m());
    }
    if (cached_has_bits & 0x00000004u) {
      existenceprob_perc_ = from.existenceprob_perc_;
    }
    if (cached_has_bits & 0x00000008u) {
      slotid_nu_ = from.slotid_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CnnBasedParkingSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CnnBasedParkingSlot::CopyFrom(const CnnBasedParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CnnBasedParkingSlot::IsInitialized() const {
  return true;
}

void CnnBasedParkingSlot::InternalSwap(CnnBasedParkingSlot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parkingscenarioconfidence_perc_, other->parkingscenarioconfidence_perc_);
  swap(slotshape_m_, other->slotshape_m_);
  swap(existenceprob_perc_, other->existenceprob_perc_);
  swap(slotid_nu_, other->slotid_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CnnBasedParkingSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CnnBasedParkingSlot_array_port::InitAsDefaultInstance() {
}
class CnnBasedParkingSlot_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<CnnBasedParkingSlot_array_port>()._has_bits_);
};

CnnBasedParkingSlot_array_port::CnnBasedParkingSlot_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
}
CnnBasedParkingSlot_array_port::CnnBasedParkingSlot_array_port(const CnnBasedParkingSlot_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
}

void CnnBasedParkingSlot_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CnnBasedParkingSlot_array_port_si_2fcnn_5fbased_5fparking_5fslot_2eproto.base);
}

CnnBasedParkingSlot_array_port::~CnnBasedParkingSlot_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  SharedDtor();
}

void CnnBasedParkingSlot_array_port::SharedDtor() {
}

void CnnBasedParkingSlot_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CnnBasedParkingSlot_array_port& CnnBasedParkingSlot_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CnnBasedParkingSlot_array_port_si_2fcnn_5fbased_5fparking_5fslot_2eproto.base);
  return *internal_default_instance();
}


void CnnBasedParkingSlot_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CnnBasedParkingSlot_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.cnn_based_parking_slot.CnnBasedParkingSlot data = 3548;
      case 3548:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CnnBasedParkingSlot_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.cnn_based_parking_slot.CnnBasedParkingSlot data = 3548;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3548, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  return target;
}

size_t CnnBasedParkingSlot_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.cnn_based_parking_slot.CnnBasedParkingSlot data = 3548;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CnnBasedParkingSlot_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const CnnBasedParkingSlot_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CnnBasedParkingSlot_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
    MergeFrom(*source);
  }
}

void CnnBasedParkingSlot_array_port::MergeFrom(const CnnBasedParkingSlot_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void CnnBasedParkingSlot_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CnnBasedParkingSlot_array_port::CopyFrom(const CnnBasedParkingSlot_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.cnn_based_parking_slot.CnnBasedParkingSlot_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CnnBasedParkingSlot_array_port::IsInitialized() const {
  return true;
}

void CnnBasedParkingSlot_array_port::InternalSwap(CnnBasedParkingSlot_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CnnBasedParkingSlot_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cnn_based_parking_slot
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot* Arena::CreateMaybeMessage< ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port* Arena::CreateMaybeMessage< ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::cnn_based_parking_slot::CnnBasedParkingSlot_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
