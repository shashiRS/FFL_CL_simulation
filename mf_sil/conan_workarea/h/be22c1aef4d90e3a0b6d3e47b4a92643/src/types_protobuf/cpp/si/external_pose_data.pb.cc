// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/external_pose_data.proto

#include "si/external_pose_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fgeoml_2fpose_5fpod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fexternal_5fpose_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto;
namespace pb {
namespace si {
namespace external_pose_data {
class ExternalPoseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternalPoseData> _instance;
} _ExternalPoseData_default_instance_;
class ExternalPoseData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternalPoseData_array_port> _instance;
} _ExternalPoseData_array_port_default_instance_;
}  // namespace external_pose_data
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::external_pose_data::_ExternalPoseData_default_instance_;
    new (ptr) ::pb::si::external_pose_data::ExternalPoseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::external_pose_data::ExternalPoseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto}, {
      &scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto.base,}};

static void InitDefaultsscc_info_ExternalPoseData_array_port_si_2fexternal_5fpose_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::external_pose_data::_ExternalPoseData_array_port_default_instance_;
    new (ptr) ::pb::si::external_pose_data::ExternalPoseData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::external_pose_data::ExternalPoseData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExternalPoseData_array_port_si_2fexternal_5fpose_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExternalPoseData_array_port_si_2fexternal_5fpose_5fdata_2eproto}, {
      &scc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fexternal_5fpose_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fexternal_5fpose_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fexternal_5fpose_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fexternal_5fpose_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData, externaltargetpose_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData, curvature_1pm_),
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData, relatedparkingboxid_),
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData, isparkingpose_),
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData, isforwarddriving_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::external_pose_data::ExternalPoseData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::pb::si::external_pose_data::ExternalPoseData)},
  { 15, 21, sizeof(::pb::si::external_pose_data::ExternalPoseData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::external_pose_data::_ExternalPoseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::external_pose_data::_ExternalPoseData_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fexternal_5fpose_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033si/external_pose_data.proto\022\030pb.si.ext"
  "ernal_pose_data\032\030lsm_geoml/pose_pod.prot"
  "o\"\273\001\n\020ExternalPoseData\022>\n\024externalTarget"
  "Pose_m\030\330\003 \001(\0132\037.pb.lsm_geoml.pose_pod.Po"
  "se_POD\022\026\n\rcurvature_1pm\030\213\014 \001(\002\022\034\n\023relate"
  "dParkingBoxId\030\265\t \001(\r\022\026\n\risParkingPose\030\202\t"
  " \001(\010\022\031\n\020isForwardDriving\030\253\n \001(\010\"X\n\033Exter"
  "nalPoseData_array_port\0229\n\004data\030\205\030 \003(\0132*."
  "pb.si.external_pose_data.ExternalPoseDat"
  "a"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_deps[1] = {
  &::descriptor_table_lsm_5fgeoml_2fpose_5fpod_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_sccs[2] = {
  &scc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto.base,
  &scc_info_ExternalPoseData_array_port_si_2fexternal_5fpose_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_once;
static bool descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fexternal_5fpose_5fdata_2eproto = {
  &descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_initialized, descriptor_table_protodef_si_2fexternal_5fpose_5fdata_2eproto, "si/external_pose_data.proto", 361,
  &descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_once, descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_sccs, descriptor_table_si_2fexternal_5fpose_5fdata_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_si_2fexternal_5fpose_5fdata_2eproto::offsets,
  file_level_metadata_si_2fexternal_5fpose_5fdata_2eproto, 2, file_level_enum_descriptors_si_2fexternal_5fpose_5fdata_2eproto, file_level_service_descriptors_si_2fexternal_5fpose_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fexternal_5fpose_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fexternal_5fpose_5fdata_2eproto), true);
namespace pb {
namespace si {
namespace external_pose_data {

// ===================================================================

void ExternalPoseData::InitAsDefaultInstance() {
  ::pb::si::external_pose_data::_ExternalPoseData_default_instance_._instance.get_mutable()->externaltargetpose_m_ = const_cast< ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      ::pb::lsm_geoml::pose_pod::Pose_POD::internal_default_instance());
}
class ExternalPoseData::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalPoseData>()._has_bits_);
  static const ::pb::lsm_geoml::pose_pod::Pose_POD& externaltargetpose_m(const ExternalPoseData* msg);
  static void set_has_externaltargetpose_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_curvature_1pm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relatedparkingboxid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isparkingpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isforwarddriving(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::pb::lsm_geoml::pose_pod::Pose_POD&
ExternalPoseData::_Internal::externaltargetpose_m(const ExternalPoseData* msg) {
  return *msg->externaltargetpose_m_;
}
void ExternalPoseData::clear_externaltargetpose_m() {
  if (externaltargetpose_m_ != nullptr) externaltargetpose_m_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ExternalPoseData::ExternalPoseData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.external_pose_data.ExternalPoseData)
}
ExternalPoseData::ExternalPoseData(const ExternalPoseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_externaltargetpose_m()) {
    externaltargetpose_m_ = new ::pb::lsm_geoml::pose_pod::Pose_POD(*from.externaltargetpose_m_);
  } else {
    externaltargetpose_m_ = nullptr;
  }
  ::memcpy(&curvature_1pm_, &from.curvature_1pm_,
    static_cast<size_t>(reinterpret_cast<char*>(&isforwarddriving_) -
    reinterpret_cast<char*>(&curvature_1pm_)) + sizeof(isforwarddriving_));
  // @@protoc_insertion_point(copy_constructor:pb.si.external_pose_data.ExternalPoseData)
}

void ExternalPoseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto.base);
  ::memset(&externaltargetpose_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isforwarddriving_) -
      reinterpret_cast<char*>(&externaltargetpose_m_)) + sizeof(isforwarddriving_));
}

ExternalPoseData::~ExternalPoseData() {
  // @@protoc_insertion_point(destructor:pb.si.external_pose_data.ExternalPoseData)
  SharedDtor();
}

void ExternalPoseData::SharedDtor() {
  if (this != internal_default_instance()) delete externaltargetpose_m_;
}

void ExternalPoseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalPoseData& ExternalPoseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternalPoseData_si_2fexternal_5fpose_5fdata_2eproto.base);
  return *internal_default_instance();
}


void ExternalPoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.external_pose_data.ExternalPoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(externaltargetpose_m_ != nullptr);
    externaltargetpose_m_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&curvature_1pm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isforwarddriving_) -
        reinterpret_cast<char*>(&curvature_1pm_)) + sizeof(isforwarddriving_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExternalPoseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.lsm_geoml.pose_pod.Pose_POD externalTargetPose_m = 472;
      case 472:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_externaltargetpose_m(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isParkingPose = 1154;
      case 1154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isparkingpose(&has_bits);
          isparkingpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relatedParkingBoxId = 1205;
      case 1205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_relatedparkingboxid(&has_bits);
          relatedparkingboxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isForwardDriving = 1323;
      case 1323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_isforwarddriving(&has_bits);
          isforwarddriving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float curvature_1pm = 1547;
      case 1547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_curvature_1pm(&has_bits);
          curvature_1pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternalPoseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.external_pose_data.ExternalPoseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.lsm_geoml.pose_pod.Pose_POD externalTargetPose_m = 472;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        472, _Internal::externaltargetpose_m(this), target, stream);
  }

  // optional bool isParkingPose = 1154;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1154, this->_internal_isparkingpose(), target);
  }

  // optional uint32 relatedParkingBoxId = 1205;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1205, this->_internal_relatedparkingboxid(), target);
  }

  // optional bool isForwardDriving = 1323;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1323, this->_internal_isforwarddriving(), target);
  }

  // optional float curvature_1pm = 1547;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1547, this->_internal_curvature_1pm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.external_pose_data.ExternalPoseData)
  return target;
}

size_t ExternalPoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.external_pose_data.ExternalPoseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .pb.lsm_geoml.pose_pod.Pose_POD externalTargetPose_m = 472;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *externaltargetpose_m_);
    }

    // optional float curvature_1pm = 1547;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 relatedParkingBoxId = 1205;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relatedparkingboxid());
    }

    // optional bool isParkingPose = 1154;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool isForwardDriving = 1323;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalPoseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.external_pose_data.ExternalPoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalPoseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternalPoseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.external_pose_data.ExternalPoseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.external_pose_data.ExternalPoseData)
    MergeFrom(*source);
  }
}

void ExternalPoseData::MergeFrom(const ExternalPoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.external_pose_data.ExternalPoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_externaltargetpose_m()->::pb::lsm_geoml::pose_pod::Pose_POD::MergeFrom(from._internal_externaltargetpose_m());
    }
    if (cached_has_bits & 0x00000002u) {
      curvature_1pm_ = from.curvature_1pm_;
    }
    if (cached_has_bits & 0x00000004u) {
      relatedparkingboxid_ = from.relatedparkingboxid_;
    }
    if (cached_has_bits & 0x00000008u) {
      isparkingpose_ = from.isparkingpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      isforwarddriving_ = from.isforwarddriving_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExternalPoseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.external_pose_data.ExternalPoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalPoseData::CopyFrom(const ExternalPoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.external_pose_data.ExternalPoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalPoseData::IsInitialized() const {
  return true;
}

void ExternalPoseData::InternalSwap(ExternalPoseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(externaltargetpose_m_, other->externaltargetpose_m_);
  swap(curvature_1pm_, other->curvature_1pm_);
  swap(relatedparkingboxid_, other->relatedparkingboxid_);
  swap(isparkingpose_, other->isparkingpose_);
  swap(isforwarddriving_, other->isforwarddriving_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalPoseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExternalPoseData_array_port::InitAsDefaultInstance() {
}
class ExternalPoseData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalPoseData_array_port>()._has_bits_);
};

ExternalPoseData_array_port::ExternalPoseData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.external_pose_data.ExternalPoseData_array_port)
}
ExternalPoseData_array_port::ExternalPoseData_array_port(const ExternalPoseData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.external_pose_data.ExternalPoseData_array_port)
}

void ExternalPoseData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExternalPoseData_array_port_si_2fexternal_5fpose_5fdata_2eproto.base);
}

ExternalPoseData_array_port::~ExternalPoseData_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.external_pose_data.ExternalPoseData_array_port)
  SharedDtor();
}

void ExternalPoseData_array_port::SharedDtor() {
}

void ExternalPoseData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalPoseData_array_port& ExternalPoseData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternalPoseData_array_port_si_2fexternal_5fpose_5fdata_2eproto.base);
  return *internal_default_instance();
}


void ExternalPoseData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.external_pose_data.ExternalPoseData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExternalPoseData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.external_pose_data.ExternalPoseData data = 3077;
      case 3077:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternalPoseData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.external_pose_data.ExternalPoseData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.external_pose_data.ExternalPoseData data = 3077;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3077, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.external_pose_data.ExternalPoseData_array_port)
  return target;
}

size_t ExternalPoseData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.external_pose_data.ExternalPoseData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.external_pose_data.ExternalPoseData data = 3077;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalPoseData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.external_pose_data.ExternalPoseData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalPoseData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternalPoseData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.external_pose_data.ExternalPoseData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.external_pose_data.ExternalPoseData_array_port)
    MergeFrom(*source);
  }
}

void ExternalPoseData_array_port::MergeFrom(const ExternalPoseData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.external_pose_data.ExternalPoseData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ExternalPoseData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.external_pose_data.ExternalPoseData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalPoseData_array_port::CopyFrom(const ExternalPoseData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.external_pose_data.ExternalPoseData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalPoseData_array_port::IsInitialized() const {
  return true;
}

void ExternalPoseData_array_port::InternalSwap(ExternalPoseData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalPoseData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace external_pose_data
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::external_pose_data::ExternalPoseData* Arena::CreateMaybeMessage< ::pb::si::external_pose_data::ExternalPoseData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::external_pose_data::ExternalPoseData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::external_pose_data::ExternalPoseData_array_port* Arena::CreateMaybeMessage< ::pb::si::external_pose_data::ExternalPoseData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::external_pose_data::ExternalPoseData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
