// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_detection_list.proto

#include "us_drv/us_drv_detection_list.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvDetection_us_5fdrv_2fus_5fdrv_5fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_detection_list {
class UsDrvDetectionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDetectionList> _instance;
} _UsDrvDetectionList_default_instance_;
class UsDrvDetectionList_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDetectionList_array_port> _instance;
} _UsDrvDetectionList_array_port_default_instance_;
}  // namespace us_drv_detection_list
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_detection_list::_UsDrvDetectionList_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_UsDrvDetection_us_5fdrv_2fus_5fdrv_5fdetection_2eproto.base,}};

static void InitDefaultsscc_info_UsDrvDetectionList_array_port_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_detection_list::_UsDrvDetectionList_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvDetectionList_array_port_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvDetectionList_array_port_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto}, {
      &scc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList, sensorstate_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList, numdetections_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList, detections_),
  2,
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList)},
  { 15, 21, sizeof(::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_detection_list::_UsDrvDetectionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_detection_list::_UsDrvDetectionList_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"us_drv/us_drv_detection_list.proto\022\037pb"
  ".us_drv.us_drv_detection_list\032\027eco/signa"
  "l_header.proto\032 us_drv/us_drv_sensor_sta"
  "te.proto\032\035us_drv/us_drv_detection.proto\""
  "\206\002\n\022UsDrvDetectionList\022\030\n\017uiVersionNumbe"
  "r\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.eco.s"
  "ignal_header.SignalHeader\022E\n\013sensorState"
  "\030\277\030 \003(\0162/.pb.us_drv.us_drv_sensor_state."
  "UsDrvSensorState\022\025\n\rnumDetections\030\023 \001(\r\022"
  "\?\n\ndetections\030\336\017 \003(\0132*.pb.us_drv.us_drv_"
  "detection.UsDrvDetection\"c\n\035UsDrvDetecti"
  "onList_array_port\022B\n\004data\030\343\033 \003(\01323.pb.us"
  "_drv.us_drv_detection_list.UsDrvDetectio"
  "nList"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_deps[3] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_2eproto,
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_sccs[2] = {
  &scc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto.base,
  &scc_info_UsDrvDetectionList_array_port_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto, "us_drv/us_drv_detection_list.proto", 525,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_detection_list {

// ===================================================================

void UsDrvDetectionList::InitAsDefaultInstance() {
  ::pb::us_drv::us_drv_detection_list::_UsDrvDetectionList_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class UsDrvDetectionList::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDetectionList>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const UsDrvDetectionList* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numdetections(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
UsDrvDetectionList::_Internal::ssigheader(const UsDrvDetectionList* msg) {
  return *msg->ssigheader_;
}
void UsDrvDetectionList::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UsDrvDetectionList::clear_detections() {
  detections_.Clear();
}
UsDrvDetectionList::UsDrvDetectionList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
}
UsDrvDetectionList::UsDrvDetectionList(const UsDrvDetectionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      detections_(from.detections_),
      sensorstate_(from.sensorstate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&numdetections_, &from.numdetections_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiversionnumber_) -
    reinterpret_cast<char*>(&numdetections_)) + sizeof(uiversionnumber_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
}

void UsDrvDetectionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiversionnumber_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(uiversionnumber_));
}

UsDrvDetectionList::~UsDrvDetectionList() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  SharedDtor();
}

void UsDrvDetectionList::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void UsDrvDetectionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDetectionList& UsDrvDetectionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDetectionList_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDetectionList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  sensorstate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&numdetections_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uiversionnumber_) -
        reinterpret_cast<char*>(&numdetections_)) + sizeof(uiversionnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDetectionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 numDetections = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_numdetections(&has_bits);
          numdetections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.us_drv.us_drv_detection.UsDrvDetection detections = 2014;
      case 2014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.us_drv.us_drv_sensor_state.UsDrvSensorState sensorState = 3135;
      case 3135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_sensor_state::UsDrvSensorState_IsValid(val))) {
            _internal_add_sensorstate(static_cast<::pb::us_drv::us_drv_sensor_state::UsDrvSensorState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3135, val, mutable_unknown_fields());
          }
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_sensorstate(), ptr, ctx, ::pb::us_drv::us_drv_sensor_state::UsDrvSensorState_IsValid, &_internal_metadata_, 3135);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDetectionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 numDetections = 19;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_numdetections(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated .pb.us_drv.us_drv_detection.UsDrvDetection detections = 2014;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2014, this->_internal_detections(i), target, stream);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // repeated .pb.us_drv.us_drv_sensor_state.UsDrvSensorState sensorState = 3135;
  for (int i = 0, n = this->_internal_sensorstate_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3135, this->_internal_sensorstate(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  return target;
}

size_t UsDrvDetectionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_detection.UsDrvDetection detections = 2014;
  total_size += 2UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.us_drv.us_drv_sensor_state.UsDrvSensorState sensorState = 3135;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_sensorstate_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_sensorstate(static_cast<int>(i)));
    }
    total_size += (3UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional uint32 numDetections = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numdetections());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDetectionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDetectionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDetectionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
    MergeFrom(*source);
  }
}

void UsDrvDetectionList::MergeFrom(const UsDrvDetectionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  sensorstate_.MergeFrom(from.sensorstate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      numdetections_ = from.numdetections_;
    }
    if (cached_has_bits & 0x00000004u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvDetectionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDetectionList::CopyFrom(const UsDrvDetectionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDetectionList::IsInitialized() const {
  return true;
}

void UsDrvDetectionList::InternalSwap(UsDrvDetectionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  detections_.InternalSwap(&other->detections_);
  sensorstate_.InternalSwap(&other->sensorstate_);
  swap(ssigheader_, other->ssigheader_);
  swap(numdetections_, other->numdetections_);
  swap(uiversionnumber_, other->uiversionnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDetectionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvDetectionList_array_port::InitAsDefaultInstance() {
}
class UsDrvDetectionList_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDetectionList_array_port>()._has_bits_);
};

UsDrvDetectionList_array_port::UsDrvDetectionList_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
}
UsDrvDetectionList_array_port::UsDrvDetectionList_array_port(const UsDrvDetectionList_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
}

void UsDrvDetectionList_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvDetectionList_array_port_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto.base);
}

UsDrvDetectionList_array_port::~UsDrvDetectionList_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  SharedDtor();
}

void UsDrvDetectionList_array_port::SharedDtor() {
}

void UsDrvDetectionList_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDetectionList_array_port& UsDrvDetectionList_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDetectionList_array_port_us_5fdrv_2fus_5fdrv_5fdetection_5flist_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDetectionList_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDetectionList_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_detection_list.UsDrvDetectionList data = 3555;
      case 3555:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDetectionList_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_detection_list.UsDrvDetectionList data = 3555;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3555, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  return target;
}

size_t UsDrvDetectionList_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_detection_list.UsDrvDetectionList data = 3555;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDetectionList_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDetectionList_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDetectionList_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
    MergeFrom(*source);
  }
}

void UsDrvDetectionList_array_port::MergeFrom(const UsDrvDetectionList_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvDetectionList_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDetectionList_array_port::CopyFrom(const UsDrvDetectionList_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_detection_list.UsDrvDetectionList_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDetectionList_array_port::IsInitialized() const {
  return true;
}

void UsDrvDetectionList_array_port::InternalSwap(UsDrvDetectionList_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDetectionList_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_detection_list
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_detection_list::UsDrvDetectionList_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
