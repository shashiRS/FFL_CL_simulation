// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_sensor_errors.proto

#include "us_drv/us_drv_sensor_errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_sensor_errors {
class UsDrvSensorErrorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSensorErrors> _instance;
} _UsDrvSensorErrors_default_instance_;
class UsDrvSensorErrors_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSensorErrors_array_port> _instance;
} _UsDrvSensorErrors_array_port_default_instance_;
}  // namespace us_drv_sensor_errors
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sensor_errors::_UsDrvSensorErrors_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto}, {
      &scc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.base,
      &scc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.base,}};

static void InitDefaultsscc_info_UsDrvSensorErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sensor_errors::_UsDrvSensorErrors_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvSensorErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvSensorErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto}, {
      &scc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors, sensordiagerrors_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors, sensorswerrors_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors)},
  { 9, 15, sizeof(::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sensor_errors::_UsDrvSensorErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sensor_errors::_UsDrvSensorErrors_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!us_drv/us_drv_sensor_errors.proto\022\036pb."
  "us_drv.us_drv_sensor_errors\032&us_drv/us_d"
  "rv_sensor_diag_errors.proto\032$us_drv/us_d"
  "rv_sensor_sw_errors.proto\"\273\001\n\021UsDrvSenso"
  "rErrors\022U\n\020sensorDiagErrors\030\333\037 \001(\0132:.pb."
  "us_drv.us_drv_sensor_diag_errors.UsDrvSe"
  "nsorDiagErrors\022O\n\016sensorSwErrors\030\263\032 \001(\0132"
  "6.pb.us_drv.us_drv_sensor_sw_errors.UsDr"
  "vSensorSwErrors\"`\n\034UsDrvSensorErrors_arr"
  "ay_port\022@\n\004data\030\274\n \003(\01321.pb.us_drv.us_dr"
  "v_sensor_errors.UsDrvSensorErrors"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_deps[2] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto,
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_sccs[2] = {
  &scc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto.base,
  &scc_info_UsDrvSensorErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto, "us_drv/us_drv_sensor_errors.proto", 433,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_sensor_errors {

// ===================================================================

void UsDrvSensorErrors::InitAsDefaultInstance() {
  ::pb::us_drv::us_drv_sensor_errors::_UsDrvSensorErrors_default_instance_._instance.get_mutable()->sensordiagerrors_ = const_cast< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors*>(
      ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors::internal_default_instance());
  ::pb::us_drv::us_drv_sensor_errors::_UsDrvSensorErrors_default_instance_._instance.get_mutable()->sensorswerrors_ = const_cast< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors*>(
      ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors::internal_default_instance());
}
class UsDrvSensorErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSensorErrors>()._has_bits_);
  static const ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors& sensordiagerrors(const UsDrvSensorErrors* msg);
  static void set_has_sensordiagerrors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors& sensorswerrors(const UsDrvSensorErrors* msg);
  static void set_has_sensorswerrors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors&
UsDrvSensorErrors::_Internal::sensordiagerrors(const UsDrvSensorErrors* msg) {
  return *msg->sensordiagerrors_;
}
const ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors&
UsDrvSensorErrors::_Internal::sensorswerrors(const UsDrvSensorErrors* msg) {
  return *msg->sensorswerrors_;
}
void UsDrvSensorErrors::clear_sensordiagerrors() {
  if (sensordiagerrors_ != nullptr) sensordiagerrors_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UsDrvSensorErrors::clear_sensorswerrors() {
  if (sensorswerrors_ != nullptr) sensorswerrors_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UsDrvSensorErrors::UsDrvSensorErrors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
}
UsDrvSensorErrors::UsDrvSensorErrors(const UsDrvSensorErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sensorswerrors()) {
    sensorswerrors_ = new ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors(*from.sensorswerrors_);
  } else {
    sensorswerrors_ = nullptr;
  }
  if (from._internal_has_sensordiagerrors()) {
    sensordiagerrors_ = new ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors(*from.sensordiagerrors_);
  } else {
    sensordiagerrors_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
}

void UsDrvSensorErrors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto.base);
  ::memset(&sensorswerrors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensordiagerrors_) -
      reinterpret_cast<char*>(&sensorswerrors_)) + sizeof(sensordiagerrors_));
}

UsDrvSensorErrors::~UsDrvSensorErrors() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  SharedDtor();
}

void UsDrvSensorErrors::SharedDtor() {
  if (this != internal_default_instance()) delete sensorswerrors_;
  if (this != internal_default_instance()) delete sensordiagerrors_;
}

void UsDrvSensorErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSensorErrors& UsDrvSensorErrors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSensorErrors_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSensorErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sensorswerrors_ != nullptr);
      sensorswerrors_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sensordiagerrors_ != nullptr);
      sensordiagerrors_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSensorErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors sensorSwErrors = 3379;
      case 3379:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensorswerrors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors sensorDiagErrors = 4059;
      case 4059:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensordiagerrors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSensorErrors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors sensorSwErrors = 3379;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3379, _Internal::sensorswerrors(this), target, stream);
  }

  // optional .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors sensorDiagErrors = 4059;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4059, _Internal::sensordiagerrors(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  return target;
}

size_t UsDrvSensorErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors sensorSwErrors = 3379;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensorswerrors_);
    }

    // optional .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors sensorDiagErrors = 4059;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensordiagerrors_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSensorErrors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSensorErrors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSensorErrors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
    MergeFrom(*source);
  }
}

void UsDrvSensorErrors::MergeFrom(const UsDrvSensorErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sensorswerrors()->::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors::MergeFrom(from._internal_sensorswerrors());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sensordiagerrors()->::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors::MergeFrom(from._internal_sensordiagerrors());
    }
  }
}

void UsDrvSensorErrors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSensorErrors::CopyFrom(const UsDrvSensorErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSensorErrors::IsInitialized() const {
  return true;
}

void UsDrvSensorErrors::InternalSwap(UsDrvSensorErrors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sensorswerrors_, other->sensorswerrors_);
  swap(sensordiagerrors_, other->sensordiagerrors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSensorErrors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvSensorErrors_array_port::InitAsDefaultInstance() {
}
class UsDrvSensorErrors_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSensorErrors_array_port>()._has_bits_);
};

UsDrvSensorErrors_array_port::UsDrvSensorErrors_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
}
UsDrvSensorErrors_array_port::UsDrvSensorErrors_array_port(const UsDrvSensorErrors_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
}

void UsDrvSensorErrors_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvSensorErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto.base);
}

UsDrvSensorErrors_array_port::~UsDrvSensorErrors_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  SharedDtor();
}

void UsDrvSensorErrors_array_port::SharedDtor() {
}

void UsDrvSensorErrors_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSensorErrors_array_port& UsDrvSensorErrors_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSensorErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSensorErrors_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSensorErrors_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors data = 1340;
      case 1340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10722>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSensorErrors_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors data = 1340;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1340, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  return target;
}

size_t UsDrvSensorErrors_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors data = 1340;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSensorErrors_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSensorErrors_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSensorErrors_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
    MergeFrom(*source);
  }
}

void UsDrvSensorErrors_array_port::MergeFrom(const UsDrvSensorErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvSensorErrors_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSensorErrors_array_port::CopyFrom(const UsDrvSensorErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sensor_errors.UsDrvSensorErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSensorErrors_array_port::IsInitialized() const {
  return true;
}

void UsDrvSensorErrors_array_port::InternalSwap(UsDrvSensorErrors_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSensorErrors_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_sensor_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sensor_errors::UsDrvSensorErrors_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
