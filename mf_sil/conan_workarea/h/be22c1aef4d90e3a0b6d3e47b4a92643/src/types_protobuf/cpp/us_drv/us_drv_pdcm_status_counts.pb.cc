// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_pdcm_status_counts.proto

#include "us_drv/us_drv_pdcm_status_counts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_pdcm_status_counts {
class UsDrvPdcmStatusCountsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvPdcmStatusCounts> _instance;
} _UsDrvPdcmStatusCounts_default_instance_;
class UsDrvPdcmStatusCounts_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvPdcmStatusCounts_array_port> _instance;
} _UsDrvPdcmStatusCounts_array_port_default_instance_;
}  // namespace us_drv_pdcm_status_counts
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_pdcm_status_counts::_UsDrvPdcmStatusCounts_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto}, {}};

static void InitDefaultsscc_info_UsDrvPdcmStatusCounts_array_port_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_pdcm_status_counts::_UsDrvPdcmStatusCounts_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvPdcmStatusCounts_array_port_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvPdcmStatusCounts_array_port_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto}, {
      &scc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, dataok_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, overwritten_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, pdcmerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, outofsync_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, lengtherror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, timingerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, timeouterror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts, crcerror_),
  1,
  0,
  6,
  4,
  5,
  7,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts)},
  { 21, 27, sizeof(::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_pdcm_status_counts::_UsDrvPdcmStatusCounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_pdcm_status_counts::_UsDrvPdcmStatusCounts_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&us_drv/us_drv_pdcm_status_counts.proto"
  "\022#pb.us_drv.us_drv_pdcm_status_counts\"\274\001"
  "\n\025UsDrvPdcmStatusCounts\022\017\n\006dataOk\030\357\002 \001(\r"
  "\022\024\n\013overWritten\030\346\001 \001(\r\022\022\n\tpdcmError\030\234\034 \001"
  "(\r\022\022\n\toutOfSync\030\352\023 \001(\r\022\024\n\013lengthError\030\326\031"
  " \001(\r\022\024\n\013timingError\030\370\034 \001(\r\022\025\n\014timeoutErr"
  "or\030\251\006 \001(\r\022\021\n\010crcError\030\314\013 \001(\r\"m\n UsDrvPdc"
  "mStatusCounts_array_port\022I\n\004data\030\361\025 \003(\0132"
  ":.pb.us_drv.us_drv_pdcm_status_counts.Us"
  "DrvPdcmStatusCounts"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_sccs[2] = {
  &scc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto.base,
  &scc_info_UsDrvPdcmStatusCounts_array_port_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto, "us_drv/us_drv_pdcm_status_counts.proto", 379,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_pdcm_status_counts {

// ===================================================================

void UsDrvPdcmStatusCounts::InitAsDefaultInstance() {
}
class UsDrvPdcmStatusCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvPdcmStatusCounts>()._has_bits_);
  static void set_has_dataok(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overwritten(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pdcmerror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_outofsync(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lengtherror(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timingerror(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timeouterror(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crcerror(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UsDrvPdcmStatusCounts::UsDrvPdcmStatusCounts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
}
UsDrvPdcmStatusCounts::UsDrvPdcmStatusCounts(const UsDrvPdcmStatusCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&overwritten_, &from.overwritten_,
    static_cast<size_t>(reinterpret_cast<char*>(&timingerror_) -
    reinterpret_cast<char*>(&overwritten_)) + sizeof(timingerror_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
}

void UsDrvPdcmStatusCounts::SharedCtor() {
  ::memset(&overwritten_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timingerror_) -
      reinterpret_cast<char*>(&overwritten_)) + sizeof(timingerror_));
}

UsDrvPdcmStatusCounts::~UsDrvPdcmStatusCounts() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  SharedDtor();
}

void UsDrvPdcmStatusCounts::SharedDtor() {
}

void UsDrvPdcmStatusCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvPdcmStatusCounts& UsDrvPdcmStatusCounts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto.base);
  return *internal_default_instance();
}


void UsDrvPdcmStatusCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&overwritten_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timingerror_) -
        reinterpret_cast<char*>(&overwritten_)) + sizeof(timingerror_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvPdcmStatusCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 overWritten = 230;
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_overwritten(&has_bits);
          overwritten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dataOk = 367;
      case 367:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dataok(&has_bits);
          dataok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeoutError = 809;
      case 809:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeouterror(&has_bits);
          timeouterror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crcError = 1484;
      case 1484:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_crcerror(&has_bits);
          crcerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 outOfSync = 2538;
      case 2538:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_outofsync(&has_bits);
          outofsync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lengthError = 3286;
      case 3286:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_lengtherror(&has_bits);
          lengtherror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmError = 3612;
      case 3612:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_pdcmerror(&has_bits);
          pdcmerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timingError = 3704;
      case 3704:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_timingerror(&has_bits);
          timingerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvPdcmStatusCounts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 overWritten = 230;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(230, this->_internal_overwritten(), target);
  }

  // optional uint32 dataOk = 367;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(367, this->_internal_dataok(), target);
  }

  // optional uint32 timeoutError = 809;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(809, this->_internal_timeouterror(), target);
  }

  // optional uint32 crcError = 1484;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1484, this->_internal_crcerror(), target);
  }

  // optional uint32 outOfSync = 2538;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2538, this->_internal_outofsync(), target);
  }

  // optional uint32 lengthError = 3286;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3286, this->_internal_lengtherror(), target);
  }

  // optional uint32 pdcmError = 3612;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3612, this->_internal_pdcmerror(), target);
  }

  // optional uint32 timingError = 3704;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3704, this->_internal_timingerror(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  return target;
}

size_t UsDrvPdcmStatusCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 overWritten = 230;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_overwritten());
    }

    // optional uint32 dataOk = 367;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dataok());
    }

    // optional uint32 timeoutError = 809;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeouterror());
    }

    // optional uint32 crcError = 1484;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crcerror());
    }

    // optional uint32 outOfSync = 2538;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outofsync());
    }

    // optional uint32 lengthError = 3286;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lengtherror());
    }

    // optional uint32 pdcmError = 3612;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmerror());
    }

    // optional uint32 timingError = 3704;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timingerror());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvPdcmStatusCounts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvPdcmStatusCounts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvPdcmStatusCounts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
    MergeFrom(*source);
  }
}

void UsDrvPdcmStatusCounts::MergeFrom(const UsDrvPdcmStatusCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      overwritten_ = from.overwritten_;
    }
    if (cached_has_bits & 0x00000002u) {
      dataok_ = from.dataok_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeouterror_ = from.timeouterror_;
    }
    if (cached_has_bits & 0x00000008u) {
      crcerror_ = from.crcerror_;
    }
    if (cached_has_bits & 0x00000010u) {
      outofsync_ = from.outofsync_;
    }
    if (cached_has_bits & 0x00000020u) {
      lengtherror_ = from.lengtherror_;
    }
    if (cached_has_bits & 0x00000040u) {
      pdcmerror_ = from.pdcmerror_;
    }
    if (cached_has_bits & 0x00000080u) {
      timingerror_ = from.timingerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvPdcmStatusCounts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvPdcmStatusCounts::CopyFrom(const UsDrvPdcmStatusCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvPdcmStatusCounts::IsInitialized() const {
  return true;
}

void UsDrvPdcmStatusCounts::InternalSwap(UsDrvPdcmStatusCounts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(overwritten_, other->overwritten_);
  swap(dataok_, other->dataok_);
  swap(timeouterror_, other->timeouterror_);
  swap(crcerror_, other->crcerror_);
  swap(outofsync_, other->outofsync_);
  swap(lengtherror_, other->lengtherror_);
  swap(pdcmerror_, other->pdcmerror_);
  swap(timingerror_, other->timingerror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvPdcmStatusCounts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvPdcmStatusCounts_array_port::InitAsDefaultInstance() {
}
class UsDrvPdcmStatusCounts_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvPdcmStatusCounts_array_port>()._has_bits_);
};

UsDrvPdcmStatusCounts_array_port::UsDrvPdcmStatusCounts_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
}
UsDrvPdcmStatusCounts_array_port::UsDrvPdcmStatusCounts_array_port(const UsDrvPdcmStatusCounts_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
}

void UsDrvPdcmStatusCounts_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvPdcmStatusCounts_array_port_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto.base);
}

UsDrvPdcmStatusCounts_array_port::~UsDrvPdcmStatusCounts_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  SharedDtor();
}

void UsDrvPdcmStatusCounts_array_port::SharedDtor() {
}

void UsDrvPdcmStatusCounts_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvPdcmStatusCounts_array_port& UsDrvPdcmStatusCounts_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvPdcmStatusCounts_array_port_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto.base);
  return *internal_default_instance();
}


void UsDrvPdcmStatusCounts_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvPdcmStatusCounts_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts data = 2801;
      case 2801:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvPdcmStatusCounts_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts data = 2801;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2801, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  return target;
}

size_t UsDrvPdcmStatusCounts_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts data = 2801;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvPdcmStatusCounts_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvPdcmStatusCounts_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvPdcmStatusCounts_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
    MergeFrom(*source);
  }
}

void UsDrvPdcmStatusCounts_array_port::MergeFrom(const UsDrvPdcmStatusCounts_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvPdcmStatusCounts_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvPdcmStatusCounts_array_port::CopyFrom(const UsDrvPdcmStatusCounts_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvPdcmStatusCounts_array_port::IsInitialized() const {
  return true;
}

void UsDrvPdcmStatusCounts_array_port::InternalSwap(UsDrvPdcmStatusCounts_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvPdcmStatusCounts_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_pdcm_status_counts
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
