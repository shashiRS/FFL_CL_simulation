// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_runtime_sensor_configuration.proto

#include "us_drv/us_drv_runtime_sensor_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvRuntimeSensorConfiguration_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_runtime_sensor_configuration {
class UsDrvRuntimeSensorConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvRuntimeSensorConfiguration> _instance;
} _UsDrvRuntimeSensorConfiguration_default_instance_;
class UsDrvRuntimeSensorConfiguration_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvRuntimeSensorConfiguration_array_port> _instance;
} _UsDrvRuntimeSensorConfiguration_array_port_default_instance_;
}  // namespace us_drv_runtime_sensor_configuration
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvRuntimeSensorConfiguration_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_runtime_sensor_configuration::_UsDrvRuntimeSensorConfiguration_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvRuntimeSensorConfiguration_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsDrvRuntimeSensorConfiguration_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto}, {}};

static void InitDefaultsscc_info_UsDrvRuntimeSensorConfiguration_array_port_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_runtime_sensor_configuration::_UsDrvRuntimeSensorConfiguration_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvRuntimeSensorConfiguration_array_port_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvRuntimeSensorConfiguration_array_port_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto}, {
      &scc_info_UsDrvRuntimeSensorConfiguration_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, state_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, stochasticcodes_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, firingschemes_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, fircoefficientset_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, receivegain_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, advancedpathconfiguration_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, aatgconfiguration1_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, aatgconfiguration2_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, adaptivethresholdgeneration_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, swversionmajor_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, swversionminor_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, hwversionmajor_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, hwversionminor_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration, serialnumber_),
  6,
  ~0u,
  ~0u,
  4,
  2,
  11,
  10,
  9,
  3,
  1,
  8,
  0,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration)},
  { 33, 39, sizeof(::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_runtime_sensor_configuration::_UsDrvRuntimeSensorConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_runtime_sensor_configuration::_UsDrvRuntimeSensorConfiguration_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0us_drv/us_drv_runtime_sensor_configura"
  "tion.proto\022-pb.us_drv.us_drv_runtime_sen"
  "sor_configuration\032\037us_drv/us_drv_sensor_"
  "mode.proto\"\306\003\n\037UsDrvRuntimeSensorConfigu"
  "ration\022=\n\005state\030\366\030 \001(\0162-.pb.us_drv.us_dr"
  "v_sensor_mode.UsDrvSensorMode\022\033\n\022stochas"
  "ticCodes_ms\030\251\001 \003(\r\022\026\n\rfiringSchemes\030\237\003 \003"
  "(\r\022\032\n\021firCoefficientSet\030\314\022 \001(\r\022\024\n\013receiv"
  "eGain\030\342\016 \001(\r\022\"\n\031advancedPathConfiguratio"
  "n\030\363\033 \001(\r\022\033\n\022aatgConfiguration1\030\354\032 \001(\r\022\033\n"
  "\022aatgConfiguration2\030\217\032 \001(\r\022$\n\033adaptiveTh"
  "resholdGeneration\030\345\021 \001(\r\022\027\n\016swVersionMaj"
  "or\030\255\013 \001(\r\022\027\n\016swVersionMinor\030\256\031 \001(\r\022\027\n\016hw"
  "VersionMajor\030\222\013 \001(\r\022\027\n\016hwVersionMinor\030\221\031"
  " \001(\r\022\025\n\014serialNumber\030\273\027 \001(\r\"\213\001\n*UsDrvRun"
  "timeSensorConfiguration_array_port\022]\n\004da"
  "ta\030\346\017 \003(\0132N.pb.us_drv.us_drv_runtime_sen"
  "sor_configuration.UsDrvRuntimeSensorConf"
  "iguration"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_deps[1] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fmode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_sccs[2] = {
  &scc_info_UsDrvRuntimeSensorConfiguration_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto.base,
  &scc_info_UsDrvRuntimeSensorConfiguration_array_port_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto, "us_drv/us_drv_runtime_sensor_configuration.proto", 729,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_runtime_sensor_configuration {

// ===================================================================

void UsDrvRuntimeSensorConfiguration::InitAsDefaultInstance() {
}
class UsDrvRuntimeSensorConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvRuntimeSensorConfiguration>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fircoefficientset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_receivegain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_advancedpathconfiguration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_aatgconfiguration1(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_aatgconfiguration2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_adaptivethresholdgeneration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_swversionmajor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_swversionminor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hwversionmajor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hwversionminor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_serialnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

UsDrvRuntimeSensorConfiguration::UsDrvRuntimeSensorConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
}
UsDrvRuntimeSensorConfiguration::UsDrvRuntimeSensorConfiguration(const UsDrvRuntimeSensorConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stochasticcodes_ms_(from.stochasticcodes_ms_),
      firingschemes_(from.firingschemes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hwversionmajor_, &from.hwversionmajor_,
    static_cast<size_t>(reinterpret_cast<char*>(&advancedpathconfiguration_) -
    reinterpret_cast<char*>(&hwversionmajor_)) + sizeof(advancedpathconfiguration_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
}

void UsDrvRuntimeSensorConfiguration::SharedCtor() {
  ::memset(&hwversionmajor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&advancedpathconfiguration_) -
      reinterpret_cast<char*>(&hwversionmajor_)) + sizeof(advancedpathconfiguration_));
}

UsDrvRuntimeSensorConfiguration::~UsDrvRuntimeSensorConfiguration() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  SharedDtor();
}

void UsDrvRuntimeSensorConfiguration::SharedDtor() {
}

void UsDrvRuntimeSensorConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvRuntimeSensorConfiguration& UsDrvRuntimeSensorConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvRuntimeSensorConfiguration_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void UsDrvRuntimeSensorConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stochasticcodes_ms_.Clear();
  firingschemes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hwversionmajor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hwversionminor_) -
        reinterpret_cast<char*>(&hwversionmajor_)) + sizeof(hwversionminor_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&swversionminor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&advancedpathconfiguration_) -
        reinterpret_cast<char*>(&swversionminor_)) + sizeof(advancedpathconfiguration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvRuntimeSensorConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 stochasticCodes_ms = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_stochasticcodes_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1352>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stochasticcodes_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 firingSchemes = 415;
      case 415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_firingschemes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3320>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_firingschemes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hwVersionMajor = 1426;
      case 1426:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_hwversionmajor(&has_bits);
          hwversionmajor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 swVersionMajor = 1453;
      case 1453:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_swversionmajor(&has_bits);
          swversionmajor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 receiveGain = 1890;
      case 1890:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_receivegain(&has_bits);
          receivegain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 adaptiveThresholdGeneration = 2277;
      case 2277:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_adaptivethresholdgeneration(&has_bits);
          adaptivethresholdgeneration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 firCoefficientSet = 2380;
      case 2380:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_fircoefficientset(&has_bits);
          fircoefficientset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 serialNumber = 3003;
      case 3003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_serialnumber(&has_bits);
          serialnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_sensor_mode.UsDrvSensorMode state = 3190;
      case 3190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_sensor_mode::UsDrvSensorMode_IsValid(val))) {
            _internal_set_state(static_cast<::pb::us_drv::us_drv_sensor_mode::UsDrvSensorMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3190, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 hwVersionMinor = 3217;
      case 3217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_hwversionminor(&has_bits);
          hwversionminor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 swVersionMinor = 3246;
      case 3246:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_swversionminor(&has_bits);
          swversionminor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 aatgConfiguration2 = 3343;
      case 3343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_aatgconfiguration2(&has_bits);
          aatgconfiguration2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 aatgConfiguration1 = 3436;
      case 3436:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_aatgconfiguration1(&has_bits);
          aatgconfiguration1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 advancedPathConfiguration = 3571;
      case 3571:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_advancedpathconfiguration(&has_bits);
          advancedpathconfiguration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvRuntimeSensorConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 stochasticCodes_ms = 169;
  for (int i = 0, n = this->_internal_stochasticcodes_ms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(169, this->_internal_stochasticcodes_ms(i), target);
  }

  // repeated uint32 firingSchemes = 415;
  for (int i = 0, n = this->_internal_firingschemes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(415, this->_internal_firingschemes(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 hwVersionMajor = 1426;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1426, this->_internal_hwversionmajor(), target);
  }

  // optional uint32 swVersionMajor = 1453;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1453, this->_internal_swversionmajor(), target);
  }

  // optional uint32 receiveGain = 1890;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1890, this->_internal_receivegain(), target);
  }

  // optional uint32 adaptiveThresholdGeneration = 2277;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2277, this->_internal_adaptivethresholdgeneration(), target);
  }

  // optional uint32 firCoefficientSet = 2380;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2380, this->_internal_fircoefficientset(), target);
  }

  // optional uint32 serialNumber = 3003;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3003, this->_internal_serialnumber(), target);
  }

  // optional .pb.us_drv.us_drv_sensor_mode.UsDrvSensorMode state = 3190;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3190, this->_internal_state(), target);
  }

  // optional uint32 hwVersionMinor = 3217;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3217, this->_internal_hwversionminor(), target);
  }

  // optional uint32 swVersionMinor = 3246;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3246, this->_internal_swversionminor(), target);
  }

  // optional uint32 aatgConfiguration2 = 3343;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3343, this->_internal_aatgconfiguration2(), target);
  }

  // optional uint32 aatgConfiguration1 = 3436;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3436, this->_internal_aatgconfiguration1(), target);
  }

  // optional uint32 advancedPathConfiguration = 3571;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3571, this->_internal_advancedpathconfiguration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  return target;
}

size_t UsDrvRuntimeSensorConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 stochasticCodes_ms = 169;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stochasticcodes_ms_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stochasticcodes_ms_size());
    total_size += data_size;
  }

  // repeated uint32 firingSchemes = 415;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->firingschemes_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_firingschemes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hwVersionMajor = 1426;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hwversionmajor());
    }

    // optional uint32 swVersionMajor = 1453;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_swversionmajor());
    }

    // optional uint32 receiveGain = 1890;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_receivegain());
    }

    // optional uint32 adaptiveThresholdGeneration = 2277;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_adaptivethresholdgeneration());
    }

    // optional uint32 firCoefficientSet = 2380;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fircoefficientset());
    }

    // optional uint32 serialNumber = 3003;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_serialnumber());
    }

    // optional .pb.us_drv.us_drv_sensor_mode.UsDrvSensorMode state = 3190;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 hwVersionMinor = 3217;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hwversionminor());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 swVersionMinor = 3246;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_swversionminor());
    }

    // optional uint32 aatgConfiguration2 = 3343;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aatgconfiguration2());
    }

    // optional uint32 aatgConfiguration1 = 3436;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aatgconfiguration1());
    }

    // optional uint32 advancedPathConfiguration = 3571;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_advancedpathconfiguration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvRuntimeSensorConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvRuntimeSensorConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvRuntimeSensorConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
    MergeFrom(*source);
  }
}

void UsDrvRuntimeSensorConfiguration::MergeFrom(const UsDrvRuntimeSensorConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stochasticcodes_ms_.MergeFrom(from.stochasticcodes_ms_);
  firingschemes_.MergeFrom(from.firingschemes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hwversionmajor_ = from.hwversionmajor_;
    }
    if (cached_has_bits & 0x00000002u) {
      swversionmajor_ = from.swversionmajor_;
    }
    if (cached_has_bits & 0x00000004u) {
      receivegain_ = from.receivegain_;
    }
    if (cached_has_bits & 0x00000008u) {
      adaptivethresholdgeneration_ = from.adaptivethresholdgeneration_;
    }
    if (cached_has_bits & 0x00000010u) {
      fircoefficientset_ = from.fircoefficientset_;
    }
    if (cached_has_bits & 0x00000020u) {
      serialnumber_ = from.serialnumber_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      hwversionminor_ = from.hwversionminor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      swversionminor_ = from.swversionminor_;
    }
    if (cached_has_bits & 0x00000200u) {
      aatgconfiguration2_ = from.aatgconfiguration2_;
    }
    if (cached_has_bits & 0x00000400u) {
      aatgconfiguration1_ = from.aatgconfiguration1_;
    }
    if (cached_has_bits & 0x00000800u) {
      advancedpathconfiguration_ = from.advancedpathconfiguration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvRuntimeSensorConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvRuntimeSensorConfiguration::CopyFrom(const UsDrvRuntimeSensorConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvRuntimeSensorConfiguration::IsInitialized() const {
  return true;
}

void UsDrvRuntimeSensorConfiguration::InternalSwap(UsDrvRuntimeSensorConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stochasticcodes_ms_.InternalSwap(&other->stochasticcodes_ms_);
  firingschemes_.InternalSwap(&other->firingschemes_);
  swap(hwversionmajor_, other->hwversionmajor_);
  swap(swversionmajor_, other->swversionmajor_);
  swap(receivegain_, other->receivegain_);
  swap(adaptivethresholdgeneration_, other->adaptivethresholdgeneration_);
  swap(fircoefficientset_, other->fircoefficientset_);
  swap(serialnumber_, other->serialnumber_);
  swap(state_, other->state_);
  swap(hwversionminor_, other->hwversionminor_);
  swap(swversionminor_, other->swversionminor_);
  swap(aatgconfiguration2_, other->aatgconfiguration2_);
  swap(aatgconfiguration1_, other->aatgconfiguration1_);
  swap(advancedpathconfiguration_, other->advancedpathconfiguration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvRuntimeSensorConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvRuntimeSensorConfiguration_array_port::InitAsDefaultInstance() {
}
class UsDrvRuntimeSensorConfiguration_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvRuntimeSensorConfiguration_array_port>()._has_bits_);
};

UsDrvRuntimeSensorConfiguration_array_port::UsDrvRuntimeSensorConfiguration_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
}
UsDrvRuntimeSensorConfiguration_array_port::UsDrvRuntimeSensorConfiguration_array_port(const UsDrvRuntimeSensorConfiguration_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
}

void UsDrvRuntimeSensorConfiguration_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvRuntimeSensorConfiguration_array_port_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto.base);
}

UsDrvRuntimeSensorConfiguration_array_port::~UsDrvRuntimeSensorConfiguration_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  SharedDtor();
}

void UsDrvRuntimeSensorConfiguration_array_port::SharedDtor() {
}

void UsDrvRuntimeSensorConfiguration_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvRuntimeSensorConfiguration_array_port& UsDrvRuntimeSensorConfiguration_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvRuntimeSensorConfiguration_array_port_us_5fdrv_2fus_5fdrv_5fruntime_5fsensor_5fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void UsDrvRuntimeSensorConfiguration_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvRuntimeSensorConfiguration_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration data = 2022;
      case 2022:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16178>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvRuntimeSensorConfiguration_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration data = 2022;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2022, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  return target;
}

size_t UsDrvRuntimeSensorConfiguration_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration data = 2022;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvRuntimeSensorConfiguration_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvRuntimeSensorConfiguration_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvRuntimeSensorConfiguration_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
    MergeFrom(*source);
  }
}

void UsDrvRuntimeSensorConfiguration_array_port::MergeFrom(const UsDrvRuntimeSensorConfiguration_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvRuntimeSensorConfiguration_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvRuntimeSensorConfiguration_array_port::CopyFrom(const UsDrvRuntimeSensorConfiguration_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_runtime_sensor_configuration.UsDrvRuntimeSensorConfiguration_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvRuntimeSensorConfiguration_array_port::IsInitialized() const {
  return true;
}

void UsDrvRuntimeSensorConfiguration_array_port::InternalSwap(UsDrvRuntimeSensorConfiguration_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvRuntimeSensorConfiguration_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_runtime_sensor_configuration
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_runtime_sensor_configuration::UsDrvRuntimeSensorConfiguration_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
