// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_sw_errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "us_drv/us_drv_error_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_sw_errors {
class UsDrvSwErrors;
class UsDrvSwErrorsDefaultTypeInternal;
extern UsDrvSwErrorsDefaultTypeInternal _UsDrvSwErrors_default_instance_;
class UsDrvSwErrors_array_port;
class UsDrvSwErrors_array_portDefaultTypeInternal;
extern UsDrvSwErrors_array_portDefaultTypeInternal _UsDrvSwErrors_array_port_default_instance_;
}  // namespace us_drv_sw_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors>(Arena*);
template<> ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_drv {
namespace us_drv_sw_errors {

// ===================================================================

class UsDrvSwErrors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors) */ {
 public:
  UsDrvSwErrors();
  virtual ~UsDrvSwErrors();

  UsDrvSwErrors(const UsDrvSwErrors& from);
  UsDrvSwErrors(UsDrvSwErrors&& from) noexcept
    : UsDrvSwErrors() {
    *this = ::std::move(from);
  }

  inline UsDrvSwErrors& operator=(const UsDrvSwErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvSwErrors& operator=(UsDrvSwErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvSwErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvSwErrors* internal_default_instance() {
    return reinterpret_cast<const UsDrvSwErrors*>(
               &_UsDrvSwErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsDrvSwErrors& a, UsDrvSwErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvSwErrors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvSwErrors* New() const final {
    return CreateMaybeMessage<UsDrvSwErrors>(nullptr);
  }

  UsDrvSwErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvSwErrors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvSwErrors& from);
  void MergeFrom(const UsDrvSwErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvSwErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_sw_errors.UsDrvSwErrors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputPortNullDetailsFieldNumber = 3984,
    kConfigurationInvalidDetailsFieldNumber = 52,
    kInputPortInvalidFieldNumber = 552,
    kConfigurationNullFieldNumber = 1072,
    kInputPortFreezedDetailsFieldNumber = 1129,
    kOutputPortNullFieldNumber = 1236,
    kOutputPortNullDetailsFieldNumber = 1268,
    kUsDriverNotReadyFieldNumber = 1360,
    kInputPortNullFieldNumber = 1416,
    kSpiDriverIncompatibleFieldNumber = 1479,
    kInputPortInvalidDetailsFieldNumber = 1782,
    kSpiDriverOpFailureFieldNumber = 2151,
    kSpiDriverOpFailureDetailsFieldNumber = 2263,
    kConfigurationInvalidFieldNumber = 2534,
    kInputPortFreezedFieldNumber = 3441,
    kUsDriverNotReadyDetailsFieldNumber = 3579,
    kSpiDriverNullFieldNumber = 3816,
  };
  // optional uint32 inputPortNullDetails = 3984;
  bool has_inputportnulldetails() const;
  private:
  bool _internal_has_inputportnulldetails() const;
  public:
  void clear_inputportnulldetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 inputportnulldetails() const;
  void set_inputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inputportnulldetails() const;
  void _internal_set_inputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 configurationInvalidDetails = 52;
  bool has_configurationinvaliddetails() const;
  private:
  bool _internal_has_configurationinvaliddetails() const;
  public:
  void clear_configurationinvaliddetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 configurationinvaliddetails() const;
  void set_configurationinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_configurationinvaliddetails() const;
  void _internal_set_configurationinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortInvalid = 552;
  bool has_inputportinvalid() const;
  private:
  bool _internal_has_inputportinvalid() const;
  public:
  void clear_inputportinvalid();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus inputportinvalid() const;
  void set_inputportinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_inputportinvalid() const;
  void _internal_set_inputportinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationNull = 1072;
  bool has_configurationnull() const;
  private:
  bool _internal_has_configurationnull() const;
  public:
  void clear_configurationnull();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus configurationnull() const;
  void set_configurationnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_configurationnull() const;
  void _internal_set_configurationnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 inputPortFreezedDetails = 1129;
  bool has_inputportfreezeddetails() const;
  private:
  bool _internal_has_inputportfreezeddetails() const;
  public:
  void clear_inputportfreezeddetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 inputportfreezeddetails() const;
  void set_inputportfreezeddetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inputportfreezeddetails() const;
  void _internal_set_inputportfreezeddetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus outputPortNull = 1236;
  bool has_outputportnull() const;
  private:
  bool _internal_has_outputportnull() const;
  public:
  void clear_outputportnull();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus outputportnull() const;
  void set_outputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_outputportnull() const;
  void _internal_set_outputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 outputPortNullDetails = 1268;
  bool has_outputportnulldetails() const;
  private:
  bool _internal_has_outputportnulldetails() const;
  public:
  void clear_outputportnulldetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 outputportnulldetails() const;
  void set_outputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outputportnulldetails() const;
  void _internal_set_outputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus usDriverNotReady = 1360;
  bool has_usdrivernotready() const;
  private:
  bool _internal_has_usdrivernotready() const;
  public:
  void clear_usdrivernotready();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus usdrivernotready() const;
  void set_usdrivernotready(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_usdrivernotready() const;
  void _internal_set_usdrivernotready(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortNull = 1416;
  bool has_inputportnull() const;
  private:
  bool _internal_has_inputportnull() const;
  public:
  void clear_inputportnull();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus inputportnull() const;
  void set_inputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_inputportnull() const;
  void _internal_set_inputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverIncompatible = 1479;
  bool has_spidriverincompatible() const;
  private:
  bool _internal_has_spidriverincompatible() const;
  public:
  void clear_spidriverincompatible();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus spidriverincompatible() const;
  void set_spidriverincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_spidriverincompatible() const;
  void _internal_set_spidriverincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 inputPortInvalidDetails = 1782;
  bool has_inputportinvaliddetails() const;
  private:
  bool _internal_has_inputportinvaliddetails() const;
  public:
  void clear_inputportinvaliddetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 inputportinvaliddetails() const;
  void set_inputportinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inputportinvaliddetails() const;
  void _internal_set_inputportinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverOpFailure = 2151;
  bool has_spidriveropfailure() const;
  private:
  bool _internal_has_spidriveropfailure() const;
  public:
  void clear_spidriveropfailure();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus spidriveropfailure() const;
  void set_spidriveropfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_spidriveropfailure() const;
  void _internal_set_spidriveropfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 spiDriverOpFailureDetails = 2263;
  bool has_spidriveropfailuredetails() const;
  private:
  bool _internal_has_spidriveropfailuredetails() const;
  public:
  void clear_spidriveropfailuredetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 spidriveropfailuredetails() const;
  void set_spidriveropfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spidriveropfailuredetails() const;
  void _internal_set_spidriveropfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationInvalid = 2534;
  bool has_configurationinvalid() const;
  private:
  bool _internal_has_configurationinvalid() const;
  public:
  void clear_configurationinvalid();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus configurationinvalid() const;
  void set_configurationinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_configurationinvalid() const;
  void _internal_set_configurationinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortFreezed = 3441;
  bool has_inputportfreezed() const;
  private:
  bool _internal_has_inputportfreezed() const;
  public:
  void clear_inputportfreezed();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus inputportfreezed() const;
  void set_inputportfreezed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_inputportfreezed() const;
  void _internal_set_inputportfreezed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 usDriverNotReadyDetails = 3579;
  bool has_usdrivernotreadydetails() const;
  private:
  bool _internal_has_usdrivernotreadydetails() const;
  public:
  void clear_usdrivernotreadydetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 usdrivernotreadydetails() const;
  void set_usdrivernotreadydetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usdrivernotreadydetails() const;
  void _internal_set_usdrivernotreadydetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverNull = 3816;
  bool has_spidrivernull() const;
  private:
  bool _internal_has_spidrivernull() const;
  public:
  void clear_spidrivernull();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus spidrivernull() const;
  void set_spidrivernull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_spidrivernull() const;
  void _internal_set_spidrivernull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inputportnulldetails_;
  ::PROTOBUF_NAMESPACE_ID::uint32 configurationinvaliddetails_;
  int inputportinvalid_;
  int configurationnull_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inputportfreezeddetails_;
  int outputportnull_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputportnulldetails_;
  int usdrivernotready_;
  int inputportnull_;
  int spidriverincompatible_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inputportinvaliddetails_;
  int spidriveropfailure_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spidriveropfailuredetails_;
  int configurationinvalid_;
  int inputportfreezed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usdrivernotreadydetails_;
  int spidrivernull_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto;
};
// -------------------------------------------------------------------

class UsDrvSwErrors_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port) */ {
 public:
  UsDrvSwErrors_array_port();
  virtual ~UsDrvSwErrors_array_port();

  UsDrvSwErrors_array_port(const UsDrvSwErrors_array_port& from);
  UsDrvSwErrors_array_port(UsDrvSwErrors_array_port&& from) noexcept
    : UsDrvSwErrors_array_port() {
    *this = ::std::move(from);
  }

  inline UsDrvSwErrors_array_port& operator=(const UsDrvSwErrors_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvSwErrors_array_port& operator=(UsDrvSwErrors_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvSwErrors_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvSwErrors_array_port* internal_default_instance() {
    return reinterpret_cast<const UsDrvSwErrors_array_port*>(
               &_UsDrvSwErrors_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsDrvSwErrors_array_port& a, UsDrvSwErrors_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvSwErrors_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvSwErrors_array_port* New() const final {
    return CreateMaybeMessage<UsDrvSwErrors_array_port>(nullptr);
  }

  UsDrvSwErrors_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvSwErrors_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvSwErrors_array_port& from);
  void MergeFrom(const UsDrvSwErrors_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvSwErrors_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2939,
  };
  // repeated .pb.us_drv.us_drv_sw_errors.UsDrvSwErrors data = 2939;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors >*
      mutable_data();
  private:
  const ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors& _internal_data(int index) const;
  ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* _internal_add_data();
  public:
  const ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors& data(int index) const;
  ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors > data_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsDrvSwErrors

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus usDriverNotReady = 1360;
inline bool UsDrvSwErrors::_internal_has_usdrivernotready() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_usdrivernotready() const {
  return _internal_has_usdrivernotready();
}
inline void UsDrvSwErrors::clear_usdrivernotready() {
  usdrivernotready_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_usdrivernotready() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(usdrivernotready_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::usdrivernotready() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.usDriverNotReady)
  return _internal_usdrivernotready();
}
inline void UsDrvSwErrors::_internal_set_usdrivernotready(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  usdrivernotready_ = value;
}
inline void UsDrvSwErrors::set_usdrivernotready(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_usdrivernotready(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.usDriverNotReady)
}

// optional uint32 usDriverNotReadyDetails = 3579;
inline bool UsDrvSwErrors::_internal_has_usdrivernotreadydetails() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_usdrivernotreadydetails() const {
  return _internal_has_usdrivernotreadydetails();
}
inline void UsDrvSwErrors::clear_usdrivernotreadydetails() {
  usdrivernotreadydetails_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::_internal_usdrivernotreadydetails() const {
  return usdrivernotreadydetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::usdrivernotreadydetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.usDriverNotReadyDetails)
  return _internal_usdrivernotreadydetails();
}
inline void UsDrvSwErrors::_internal_set_usdrivernotreadydetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  usdrivernotreadydetails_ = value;
}
inline void UsDrvSwErrors::set_usdrivernotreadydetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usdrivernotreadydetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.usDriverNotReadyDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverOpFailure = 2151;
inline bool UsDrvSwErrors::_internal_has_spidriveropfailure() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_spidriveropfailure() const {
  return _internal_has_spidriveropfailure();
}
inline void UsDrvSwErrors::clear_spidriveropfailure() {
  spidriveropfailure_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_spidriveropfailure() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(spidriveropfailure_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::spidriveropfailure() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverOpFailure)
  return _internal_spidriveropfailure();
}
inline void UsDrvSwErrors::_internal_set_spidriveropfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  spidriveropfailure_ = value;
}
inline void UsDrvSwErrors::set_spidriveropfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_spidriveropfailure(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverOpFailure)
}

// optional uint32 spiDriverOpFailureDetails = 2263;
inline bool UsDrvSwErrors::_internal_has_spidriveropfailuredetails() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_spidriveropfailuredetails() const {
  return _internal_has_spidriveropfailuredetails();
}
inline void UsDrvSwErrors::clear_spidriveropfailuredetails() {
  spidriveropfailuredetails_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::_internal_spidriveropfailuredetails() const {
  return spidriveropfailuredetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::spidriveropfailuredetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverOpFailureDetails)
  return _internal_spidriveropfailuredetails();
}
inline void UsDrvSwErrors::_internal_set_spidriveropfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  spidriveropfailuredetails_ = value;
}
inline void UsDrvSwErrors::set_spidriveropfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spidriveropfailuredetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverOpFailureDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortNull = 1416;
inline bool UsDrvSwErrors::_internal_has_inputportnull() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_inputportnull() const {
  return _internal_has_inputportnull();
}
inline void UsDrvSwErrors::clear_inputportnull() {
  inputportnull_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_inputportnull() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(inputportnull_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::inputportnull() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortNull)
  return _internal_inputportnull();
}
inline void UsDrvSwErrors::_internal_set_inputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  inputportnull_ = value;
}
inline void UsDrvSwErrors::set_inputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_inputportnull(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortNull)
}

// optional uint32 inputPortNullDetails = 3984;
inline bool UsDrvSwErrors::_internal_has_inputportnulldetails() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_inputportnulldetails() const {
  return _internal_has_inputportnulldetails();
}
inline void UsDrvSwErrors::clear_inputportnulldetails() {
  inputportnulldetails_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::_internal_inputportnulldetails() const {
  return inputportnulldetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::inputportnulldetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortNullDetails)
  return _internal_inputportnulldetails();
}
inline void UsDrvSwErrors::_internal_set_inputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  inputportnulldetails_ = value;
}
inline void UsDrvSwErrors::set_inputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inputportnulldetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortNullDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortInvalid = 552;
inline bool UsDrvSwErrors::_internal_has_inputportinvalid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_inputportinvalid() const {
  return _internal_has_inputportinvalid();
}
inline void UsDrvSwErrors::clear_inputportinvalid() {
  inputportinvalid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_inputportinvalid() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(inputportinvalid_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::inputportinvalid() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortInvalid)
  return _internal_inputportinvalid();
}
inline void UsDrvSwErrors::_internal_set_inputportinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  inputportinvalid_ = value;
}
inline void UsDrvSwErrors::set_inputportinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_inputportinvalid(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortInvalid)
}

// optional uint32 inputPortInvalidDetails = 1782;
inline bool UsDrvSwErrors::_internal_has_inputportinvaliddetails() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_inputportinvaliddetails() const {
  return _internal_has_inputportinvaliddetails();
}
inline void UsDrvSwErrors::clear_inputportinvaliddetails() {
  inputportinvaliddetails_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::_internal_inputportinvaliddetails() const {
  return inputportinvaliddetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::inputportinvaliddetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortInvalidDetails)
  return _internal_inputportinvaliddetails();
}
inline void UsDrvSwErrors::_internal_set_inputportinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  inputportinvaliddetails_ = value;
}
inline void UsDrvSwErrors::set_inputportinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inputportinvaliddetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortInvalidDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortFreezed = 3441;
inline bool UsDrvSwErrors::_internal_has_inputportfreezed() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_inputportfreezed() const {
  return _internal_has_inputportfreezed();
}
inline void UsDrvSwErrors::clear_inputportfreezed() {
  inputportfreezed_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_inputportfreezed() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(inputportfreezed_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::inputportfreezed() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortFreezed)
  return _internal_inputportfreezed();
}
inline void UsDrvSwErrors::_internal_set_inputportfreezed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  inputportfreezed_ = value;
}
inline void UsDrvSwErrors::set_inputportfreezed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_inputportfreezed(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortFreezed)
}

// optional uint32 inputPortFreezedDetails = 1129;
inline bool UsDrvSwErrors::_internal_has_inputportfreezeddetails() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_inputportfreezeddetails() const {
  return _internal_has_inputportfreezeddetails();
}
inline void UsDrvSwErrors::clear_inputportfreezeddetails() {
  inputportfreezeddetails_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::_internal_inputportfreezeddetails() const {
  return inputportfreezeddetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::inputportfreezeddetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortFreezedDetails)
  return _internal_inputportfreezeddetails();
}
inline void UsDrvSwErrors::_internal_set_inputportfreezeddetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  inputportfreezeddetails_ = value;
}
inline void UsDrvSwErrors::set_inputportfreezeddetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inputportfreezeddetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.inputPortFreezedDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus outputPortNull = 1236;
inline bool UsDrvSwErrors::_internal_has_outputportnull() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_outputportnull() const {
  return _internal_has_outputportnull();
}
inline void UsDrvSwErrors::clear_outputportnull() {
  outputportnull_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_outputportnull() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(outputportnull_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::outputportnull() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.outputPortNull)
  return _internal_outputportnull();
}
inline void UsDrvSwErrors::_internal_set_outputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  outputportnull_ = value;
}
inline void UsDrvSwErrors::set_outputportnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_outputportnull(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.outputPortNull)
}

// optional uint32 outputPortNullDetails = 1268;
inline bool UsDrvSwErrors::_internal_has_outputportnulldetails() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_outputportnulldetails() const {
  return _internal_has_outputportnulldetails();
}
inline void UsDrvSwErrors::clear_outputportnulldetails() {
  outputportnulldetails_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::_internal_outputportnulldetails() const {
  return outputportnulldetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::outputportnulldetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.outputPortNullDetails)
  return _internal_outputportnulldetails();
}
inline void UsDrvSwErrors::_internal_set_outputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  outputportnulldetails_ = value;
}
inline void UsDrvSwErrors::set_outputportnulldetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outputportnulldetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.outputPortNullDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationNull = 1072;
inline bool UsDrvSwErrors::_internal_has_configurationnull() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_configurationnull() const {
  return _internal_has_configurationnull();
}
inline void UsDrvSwErrors::clear_configurationnull() {
  configurationnull_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_configurationnull() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(configurationnull_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::configurationnull() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.configurationNull)
  return _internal_configurationnull();
}
inline void UsDrvSwErrors::_internal_set_configurationnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  configurationnull_ = value;
}
inline void UsDrvSwErrors::set_configurationnull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_configurationnull(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.configurationNull)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationInvalid = 2534;
inline bool UsDrvSwErrors::_internal_has_configurationinvalid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_configurationinvalid() const {
  return _internal_has_configurationinvalid();
}
inline void UsDrvSwErrors::clear_configurationinvalid() {
  configurationinvalid_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_configurationinvalid() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(configurationinvalid_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::configurationinvalid() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.configurationInvalid)
  return _internal_configurationinvalid();
}
inline void UsDrvSwErrors::_internal_set_configurationinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  configurationinvalid_ = value;
}
inline void UsDrvSwErrors::set_configurationinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_configurationinvalid(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.configurationInvalid)
}

// optional uint32 configurationInvalidDetails = 52;
inline bool UsDrvSwErrors::_internal_has_configurationinvaliddetails() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_configurationinvaliddetails() const {
  return _internal_has_configurationinvaliddetails();
}
inline void UsDrvSwErrors::clear_configurationinvaliddetails() {
  configurationinvaliddetails_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::_internal_configurationinvaliddetails() const {
  return configurationinvaliddetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSwErrors::configurationinvaliddetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.configurationInvalidDetails)
  return _internal_configurationinvaliddetails();
}
inline void UsDrvSwErrors::_internal_set_configurationinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  configurationinvaliddetails_ = value;
}
inline void UsDrvSwErrors::set_configurationinvaliddetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_configurationinvaliddetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.configurationInvalidDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverNull = 3816;
inline bool UsDrvSwErrors::_internal_has_spidrivernull() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_spidrivernull() const {
  return _internal_has_spidrivernull();
}
inline void UsDrvSwErrors::clear_spidrivernull() {
  spidrivernull_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_spidrivernull() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(spidrivernull_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::spidrivernull() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverNull)
  return _internal_spidrivernull();
}
inline void UsDrvSwErrors::_internal_set_spidrivernull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  spidrivernull_ = value;
}
inline void UsDrvSwErrors::set_spidrivernull(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_spidrivernull(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverNull)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverIncompatible = 1479;
inline bool UsDrvSwErrors::_internal_has_spidriverincompatible() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UsDrvSwErrors::has_spidriverincompatible() const {
  return _internal_has_spidriverincompatible();
}
inline void UsDrvSwErrors::clear_spidriverincompatible() {
  spidriverincompatible_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::_internal_spidriverincompatible() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(spidriverincompatible_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSwErrors::spidriverincompatible() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverIncompatible)
  return _internal_spidriverincompatible();
}
inline void UsDrvSwErrors::_internal_set_spidriverincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  spidriverincompatible_ = value;
}
inline void UsDrvSwErrors::set_spidriverincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_spidriverincompatible(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors.spiDriverIncompatible)
}

// -------------------------------------------------------------------

// UsDrvSwErrors_array_port

// repeated .pb.us_drv.us_drv_sw_errors.UsDrvSwErrors data = 2939;
inline int UsDrvSwErrors_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsDrvSwErrors_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsDrvSwErrors_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* UsDrvSwErrors_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors >*
UsDrvSwErrors_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port.data)
  return &data_;
}
inline const ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors& UsDrvSwErrors_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors& UsDrvSwErrors_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* UsDrvSwErrors_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* UsDrvSwErrors_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors >&
UsDrvSwErrors_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_drv_sw_errors
}  // namespace us_drv
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto
