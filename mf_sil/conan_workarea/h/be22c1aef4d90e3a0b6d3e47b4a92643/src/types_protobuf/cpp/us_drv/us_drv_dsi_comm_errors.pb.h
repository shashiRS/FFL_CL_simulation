// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_dsi_comm_errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "us_drv/us_drv_error_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_dsi_comm_errors {
class UsDrvDsiCommErrors;
class UsDrvDsiCommErrorsDefaultTypeInternal;
extern UsDrvDsiCommErrorsDefaultTypeInternal _UsDrvDsiCommErrors_default_instance_;
class UsDrvDsiCommErrors_array_port;
class UsDrvDsiCommErrors_array_portDefaultTypeInternal;
extern UsDrvDsiCommErrors_array_portDefaultTypeInternal _UsDrvDsiCommErrors_array_port_default_instance_;
}  // namespace us_drv_dsi_comm_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors>(Arena*);
template<> ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_drv {
namespace us_drv_dsi_comm_errors {

// ===================================================================

class UsDrvDsiCommErrors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors) */ {
 public:
  UsDrvDsiCommErrors();
  virtual ~UsDrvDsiCommErrors();

  UsDrvDsiCommErrors(const UsDrvDsiCommErrors& from);
  UsDrvDsiCommErrors(UsDrvDsiCommErrors&& from) noexcept
    : UsDrvDsiCommErrors() {
    *this = ::std::move(from);
  }

  inline UsDrvDsiCommErrors& operator=(const UsDrvDsiCommErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvDsiCommErrors& operator=(UsDrvDsiCommErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvDsiCommErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvDsiCommErrors* internal_default_instance() {
    return reinterpret_cast<const UsDrvDsiCommErrors*>(
               &_UsDrvDsiCommErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsDrvDsiCommErrors& a, UsDrvDsiCommErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvDsiCommErrors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvDsiCommErrors* New() const final {
    return CreateMaybeMessage<UsDrvDsiCommErrors>(nullptr);
  }

  UsDrvDsiCommErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvDsiCommErrors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvDsiCommErrors& from);
  void MergeFrom(const UsDrvDsiCommErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvDsiCommErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoverWrongSensorCountFieldNumber = 3766,
    kDsiCrcBistFailedFieldNumber = 149,
    kDiscoverWrongSensorCountDetailsFieldNumber = 735,
    kDsiUndervoltageFieldNumber = 1448,
    kDsiCmdOverrunFieldNumber = 3254,
  };
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus discoverWrongSensorCount = 3766;
  bool has_discoverwrongsensorcount() const;
  private:
  bool _internal_has_discoverwrongsensorcount() const;
  public:
  void clear_discoverwrongsensorcount();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus discoverwrongsensorcount() const;
  void set_discoverwrongsensorcount(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_discoverwrongsensorcount() const;
  void _internal_set_discoverwrongsensorcount(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCrcBistFailed = 149;
  bool has_dsicrcbistfailed() const;
  private:
  bool _internal_has_dsicrcbistfailed() const;
  public:
  void clear_dsicrcbistfailed();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus dsicrcbistfailed() const;
  void set_dsicrcbistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_dsicrcbistfailed() const;
  void _internal_set_dsicrcbistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 discoverWrongSensorCountDetails = 735;
  bool has_discoverwrongsensorcountdetails() const;
  private:
  bool _internal_has_discoverwrongsensorcountdetails() const;
  public:
  void clear_discoverwrongsensorcountdetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 discoverwrongsensorcountdetails() const;
  void set_discoverwrongsensorcountdetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_discoverwrongsensorcountdetails() const;
  void _internal_set_discoverwrongsensorcountdetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiUndervoltage = 1448;
  bool has_dsiundervoltage() const;
  private:
  bool _internal_has_dsiundervoltage() const;
  public:
  void clear_dsiundervoltage();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus dsiundervoltage() const;
  void set_dsiundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_dsiundervoltage() const;
  void _internal_set_dsiundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCmdOverrun = 3254;
  bool has_dsicmdoverrun() const;
  private:
  bool _internal_has_dsicmdoverrun() const;
  public:
  void clear_dsicmdoverrun();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus dsicmdoverrun() const;
  void set_dsicmdoverrun(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_dsicmdoverrun() const;
  void _internal_set_dsicmdoverrun(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int discoverwrongsensorcount_;
  int dsicrcbistfailed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 discoverwrongsensorcountdetails_;
  int dsiundervoltage_;
  int dsicmdoverrun_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto;
};
// -------------------------------------------------------------------

class UsDrvDsiCommErrors_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port) */ {
 public:
  UsDrvDsiCommErrors_array_port();
  virtual ~UsDrvDsiCommErrors_array_port();

  UsDrvDsiCommErrors_array_port(const UsDrvDsiCommErrors_array_port& from);
  UsDrvDsiCommErrors_array_port(UsDrvDsiCommErrors_array_port&& from) noexcept
    : UsDrvDsiCommErrors_array_port() {
    *this = ::std::move(from);
  }

  inline UsDrvDsiCommErrors_array_port& operator=(const UsDrvDsiCommErrors_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvDsiCommErrors_array_port& operator=(UsDrvDsiCommErrors_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvDsiCommErrors_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvDsiCommErrors_array_port* internal_default_instance() {
    return reinterpret_cast<const UsDrvDsiCommErrors_array_port*>(
               &_UsDrvDsiCommErrors_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsDrvDsiCommErrors_array_port& a, UsDrvDsiCommErrors_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvDsiCommErrors_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvDsiCommErrors_array_port* New() const final {
    return CreateMaybeMessage<UsDrvDsiCommErrors_array_port>(nullptr);
  }

  UsDrvDsiCommErrors_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvDsiCommErrors_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvDsiCommErrors_array_port& from);
  void MergeFrom(const UsDrvDsiCommErrors_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvDsiCommErrors_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1939,
  };
  // repeated .pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors data = 1939;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors >*
      mutable_data();
  private:
  const ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors& _internal_data(int index) const;
  ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* _internal_add_data();
  public:
  const ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors& data(int index) const;
  ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors > data_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsDrvDsiCommErrors

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus discoverWrongSensorCount = 3766;
inline bool UsDrvDsiCommErrors::_internal_has_discoverwrongsensorcount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsDrvDsiCommErrors::has_discoverwrongsensorcount() const {
  return _internal_has_discoverwrongsensorcount();
}
inline void UsDrvDsiCommErrors::clear_discoverwrongsensorcount() {
  discoverwrongsensorcount_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::_internal_discoverwrongsensorcount() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(discoverwrongsensorcount_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::discoverwrongsensorcount() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.discoverWrongSensorCount)
  return _internal_discoverwrongsensorcount();
}
inline void UsDrvDsiCommErrors::_internal_set_discoverwrongsensorcount(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  discoverwrongsensorcount_ = value;
}
inline void UsDrvDsiCommErrors::set_discoverwrongsensorcount(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_discoverwrongsensorcount(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.discoverWrongSensorCount)
}

// optional uint32 discoverWrongSensorCountDetails = 735;
inline bool UsDrvDsiCommErrors::_internal_has_discoverwrongsensorcountdetails() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsDrvDsiCommErrors::has_discoverwrongsensorcountdetails() const {
  return _internal_has_discoverwrongsensorcountdetails();
}
inline void UsDrvDsiCommErrors::clear_discoverwrongsensorcountdetails() {
  discoverwrongsensorcountdetails_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDsiCommErrors::_internal_discoverwrongsensorcountdetails() const {
  return discoverwrongsensorcountdetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDsiCommErrors::discoverwrongsensorcountdetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.discoverWrongSensorCountDetails)
  return _internal_discoverwrongsensorcountdetails();
}
inline void UsDrvDsiCommErrors::_internal_set_discoverwrongsensorcountdetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  discoverwrongsensorcountdetails_ = value;
}
inline void UsDrvDsiCommErrors::set_discoverwrongsensorcountdetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_discoverwrongsensorcountdetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.discoverWrongSensorCountDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiUndervoltage = 1448;
inline bool UsDrvDsiCommErrors::_internal_has_dsiundervoltage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsDrvDsiCommErrors::has_dsiundervoltage() const {
  return _internal_has_dsiundervoltage();
}
inline void UsDrvDsiCommErrors::clear_dsiundervoltage() {
  dsiundervoltage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::_internal_dsiundervoltage() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(dsiundervoltage_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::dsiundervoltage() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.dsiUndervoltage)
  return _internal_dsiundervoltage();
}
inline void UsDrvDsiCommErrors::_internal_set_dsiundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  dsiundervoltage_ = value;
}
inline void UsDrvDsiCommErrors::set_dsiundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_dsiundervoltage(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.dsiUndervoltage)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCmdOverrun = 3254;
inline bool UsDrvDsiCommErrors::_internal_has_dsicmdoverrun() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsDrvDsiCommErrors::has_dsicmdoverrun() const {
  return _internal_has_dsicmdoverrun();
}
inline void UsDrvDsiCommErrors::clear_dsicmdoverrun() {
  dsicmdoverrun_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::_internal_dsicmdoverrun() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(dsicmdoverrun_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::dsicmdoverrun() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.dsiCmdOverrun)
  return _internal_dsicmdoverrun();
}
inline void UsDrvDsiCommErrors::_internal_set_dsicmdoverrun(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dsicmdoverrun_ = value;
}
inline void UsDrvDsiCommErrors::set_dsicmdoverrun(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_dsicmdoverrun(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.dsiCmdOverrun)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCrcBistFailed = 149;
inline bool UsDrvDsiCommErrors::_internal_has_dsicrcbistfailed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsDrvDsiCommErrors::has_dsicrcbistfailed() const {
  return _internal_has_dsicrcbistfailed();
}
inline void UsDrvDsiCommErrors::clear_dsicrcbistfailed() {
  dsicrcbistfailed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::_internal_dsicrcbistfailed() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(dsicrcbistfailed_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvDsiCommErrors::dsicrcbistfailed() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.dsiCrcBistFailed)
  return _internal_dsicrcbistfailed();
}
inline void UsDrvDsiCommErrors::_internal_set_dsicrcbistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  dsicrcbistfailed_ = value;
}
inline void UsDrvDsiCommErrors::set_dsicrcbistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_dsicrcbistfailed(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors.dsiCrcBistFailed)
}

// -------------------------------------------------------------------

// UsDrvDsiCommErrors_array_port

// repeated .pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors data = 1939;
inline int UsDrvDsiCommErrors_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsDrvDsiCommErrors_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsDrvDsiCommErrors_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* UsDrvDsiCommErrors_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors >*
UsDrvDsiCommErrors_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port.data)
  return &data_;
}
inline const ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors& UsDrvDsiCommErrors_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors& UsDrvDsiCommErrors_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* UsDrvDsiCommErrors_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* UsDrvDsiCommErrors_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors >&
UsDrvDsiCommErrors_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_drv_dsi_comm_errors
}  // namespace us_drv
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto
