// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_debug_port_bus.proto

#include "us_drv/us_drv_debug_port_bus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fcrm_5fstatus_5fcounts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvCrmStatusCounts_us_5fdrv_2fus_5fdrv_5fcrm_5fstatus_5fcounts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_debug_port_bus {
class UsDrvDebugPortBusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDebugPortBus> _instance;
} _UsDrvDebugPortBus_default_instance_;
class UsDrvDebugPortBus_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDebugPortBus_array_port> _instance;
} _UsDrvDebugPortBus_array_port_default_instance_;
}  // namespace us_drv_debug_port_bus
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_debug_port_bus::_UsDrvDebugPortBus_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto}, {
      &scc_info_UsDrvCrmStatusCounts_us_5fdrv_2fus_5fdrv_5fcrm_5fstatus_5fcounts_2eproto.base,
      &scc_info_UsDrvPdcmStatusCounts_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto.base,}};

static void InitDefaultsscc_info_UsDrvDebugPortBus_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_debug_port_bus::_UsDrvDebugPortBus_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvDebugPortBus_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvDebugPortBus_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto}, {
      &scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, crmcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, crmerrorcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, crmstatuscounts_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, pdcmcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, pdcmerrorcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, pdcmsizemismatchcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus, pdcmstatuscounts_),
  2,
  5,
  1,
  4,
  3,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus)},
  { 19, 25, sizeof(::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_debug_port_bus::_UsDrvDebugPortBus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_debug_port_bus::_UsDrvDebugPortBus_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"us_drv/us_drv_debug_port_bus.proto\022\037pb"
  ".us_drv.us_drv_debug_port_bus\032%us_drv/us"
  "_drv_crm_status_counts.proto\032&us_drv/us_"
  "drv_pdcm_status_counts.proto\"\266\002\n\021UsDrvDe"
  "bugPortBus\022\021\n\010crmCount\030\254\031 \001(\r\022\026\n\rcrmErro"
  "rCount\030\233\025 \001(\r\022R\n\017crmStatusCounts\030\271\014 \001(\0132"
  "8.pb.us_drv.us_drv_crm_status_counts.UsD"
  "rvCrmStatusCounts\022\022\n\tpdcmCount\030\337\017 \001(\r\022\027\n"
  "\016pdcmErrorCount\030\251\013 \001(\r\022\036\n\025pdcmSizeMismat"
  "chCount\030\373\025 \001(\r\022U\n\020pdcmStatusCounts\030\334\004 \001("
  "\0132:.pb.us_drv.us_drv_pdcm_status_counts."
  "UsDrvPdcmStatusCounts\"a\n\034UsDrvDebugPortB"
  "us_array_port\022A\n\004data\030\307\035 \003(\01322.pb.us_drv"
  ".us_drv_debug_port_bus.UsDrvDebugPortBus"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_deps[2] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fstatus_5fcounts_2eproto,
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fpdcm_5fstatus_5fcounts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_sccs[2] = {
  &scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base,
  &scc_info_UsDrvDebugPortBus_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto, "us_drv/us_drv_debug_port_bus.proto", 560,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_debug_port_bus {

// ===================================================================

void UsDrvDebugPortBus::InitAsDefaultInstance() {
  ::pb::us_drv::us_drv_debug_port_bus::_UsDrvDebugPortBus_default_instance_._instance.get_mutable()->crmstatuscounts_ = const_cast< ::pb::us_drv::us_drv_crm_status_counts::UsDrvCrmStatusCounts*>(
      ::pb::us_drv::us_drv_crm_status_counts::UsDrvCrmStatusCounts::internal_default_instance());
  ::pb::us_drv::us_drv_debug_port_bus::_UsDrvDebugPortBus_default_instance_._instance.get_mutable()->pdcmstatuscounts_ = const_cast< ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts*>(
      ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts::internal_default_instance());
}
class UsDrvDebugPortBus::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDebugPortBus>()._has_bits_);
  static void set_has_crmcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crmerrorcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::us_drv::us_drv_crm_status_counts::UsDrvCrmStatusCounts& crmstatuscounts(const UsDrvDebugPortBus* msg);
  static void set_has_crmstatuscounts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pdcmcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pdcmerrorcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pdcmsizemismatchcount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts& pdcmstatuscounts(const UsDrvDebugPortBus* msg);
  static void set_has_pdcmstatuscounts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb::us_drv::us_drv_crm_status_counts::UsDrvCrmStatusCounts&
UsDrvDebugPortBus::_Internal::crmstatuscounts(const UsDrvDebugPortBus* msg) {
  return *msg->crmstatuscounts_;
}
const ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts&
UsDrvDebugPortBus::_Internal::pdcmstatuscounts(const UsDrvDebugPortBus* msg) {
  return *msg->pdcmstatuscounts_;
}
void UsDrvDebugPortBus::clear_crmstatuscounts() {
  if (crmstatuscounts_ != nullptr) crmstatuscounts_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void UsDrvDebugPortBus::clear_pdcmstatuscounts() {
  if (pdcmstatuscounts_ != nullptr) pdcmstatuscounts_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UsDrvDebugPortBus::UsDrvDebugPortBus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
}
UsDrvDebugPortBus::UsDrvDebugPortBus(const UsDrvDebugPortBus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pdcmstatuscounts()) {
    pdcmstatuscounts_ = new ::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts(*from.pdcmstatuscounts_);
  } else {
    pdcmstatuscounts_ = nullptr;
  }
  if (from._internal_has_crmstatuscounts()) {
    crmstatuscounts_ = new ::pb::us_drv::us_drv_crm_status_counts::UsDrvCrmStatusCounts(*from.crmstatuscounts_);
  } else {
    crmstatuscounts_ = nullptr;
  }
  ::memcpy(&crmcount_, &from.crmcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdcmsizemismatchcount_) -
    reinterpret_cast<char*>(&crmcount_)) + sizeof(pdcmsizemismatchcount_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
}

void UsDrvDebugPortBus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base);
  ::memset(&pdcmstatuscounts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdcmsizemismatchcount_) -
      reinterpret_cast<char*>(&pdcmstatuscounts_)) + sizeof(pdcmsizemismatchcount_));
}

UsDrvDebugPortBus::~UsDrvDebugPortBus() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  SharedDtor();
}

void UsDrvDebugPortBus::SharedDtor() {
  if (this != internal_default_instance()) delete pdcmstatuscounts_;
  if (this != internal_default_instance()) delete crmstatuscounts_;
}

void UsDrvDebugPortBus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDebugPortBus& UsDrvDebugPortBus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDebugPortBus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pdcmstatuscounts_ != nullptr);
      pdcmstatuscounts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crmstatuscounts_ != nullptr);
      crmstatuscounts_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&crmcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdcmsizemismatchcount_) -
        reinterpret_cast<char*>(&crmcount_)) + sizeof(pdcmsizemismatchcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDebugPortBus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts pdcmStatusCounts = 604;
      case 604:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_pdcmstatuscounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmErrorCount = 1449;
      case 1449:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pdcmerrorcount(&has_bits);
          pdcmerrorcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_crm_status_counts.UsDrvCrmStatusCounts crmStatusCounts = 1593;
      case 1593:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_crmstatuscounts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmCount = 2015;
      case 2015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_pdcmcount(&has_bits);
          pdcmcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crmErrorCount = 2715;
      case 2715:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_crmerrorcount(&has_bits);
          crmerrorcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmSizeMismatchCount = 2811;
      case 2811:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_pdcmsizemismatchcount(&has_bits);
          pdcmsizemismatchcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crmCount = 3244;
      case 3244:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_crmcount(&has_bits);
          crmcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDebugPortBus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts pdcmStatusCounts = 604;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        604, _Internal::pdcmstatuscounts(this), target, stream);
  }

  // optional uint32 pdcmErrorCount = 1449;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1449, this->_internal_pdcmerrorcount(), target);
  }

  // optional .pb.us_drv.us_drv_crm_status_counts.UsDrvCrmStatusCounts crmStatusCounts = 1593;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1593, _Internal::crmstatuscounts(this), target, stream);
  }

  // optional uint32 pdcmCount = 2015;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2015, this->_internal_pdcmcount(), target);
  }

  // optional uint32 crmErrorCount = 2715;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2715, this->_internal_crmerrorcount(), target);
  }

  // optional uint32 pdcmSizeMismatchCount = 2811;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2811, this->_internal_pdcmsizemismatchcount(), target);
  }

  // optional uint32 crmCount = 3244;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3244, this->_internal_crmcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  return target;
}

size_t UsDrvDebugPortBus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .pb.us_drv.us_drv_pdcm_status_counts.UsDrvPdcmStatusCounts pdcmStatusCounts = 604;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pdcmstatuscounts_);
    }

    // optional .pb.us_drv.us_drv_crm_status_counts.UsDrvCrmStatusCounts crmStatusCounts = 1593;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crmstatuscounts_);
    }

    // optional uint32 crmCount = 3244;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crmcount());
    }

    // optional uint32 pdcmErrorCount = 1449;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmerrorcount());
    }

    // optional uint32 pdcmCount = 2015;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmcount());
    }

    // optional uint32 crmErrorCount = 2715;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crmerrorcount());
    }

    // optional uint32 pdcmSizeMismatchCount = 2811;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmsizemismatchcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDebugPortBus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDebugPortBus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDebugPortBus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
    MergeFrom(*source);
  }
}

void UsDrvDebugPortBus::MergeFrom(const UsDrvDebugPortBus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pdcmstatuscounts()->::pb::us_drv::us_drv_pdcm_status_counts::UsDrvPdcmStatusCounts::MergeFrom(from._internal_pdcmstatuscounts());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_crmstatuscounts()->::pb::us_drv::us_drv_crm_status_counts::UsDrvCrmStatusCounts::MergeFrom(from._internal_crmstatuscounts());
    }
    if (cached_has_bits & 0x00000004u) {
      crmcount_ = from.crmcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      pdcmerrorcount_ = from.pdcmerrorcount_;
    }
    if (cached_has_bits & 0x00000010u) {
      pdcmcount_ = from.pdcmcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      crmerrorcount_ = from.crmerrorcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      pdcmsizemismatchcount_ = from.pdcmsizemismatchcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvDebugPortBus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDebugPortBus::CopyFrom(const UsDrvDebugPortBus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDebugPortBus::IsInitialized() const {
  return true;
}

void UsDrvDebugPortBus::InternalSwap(UsDrvDebugPortBus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pdcmstatuscounts_, other->pdcmstatuscounts_);
  swap(crmstatuscounts_, other->crmstatuscounts_);
  swap(crmcount_, other->crmcount_);
  swap(pdcmerrorcount_, other->pdcmerrorcount_);
  swap(pdcmcount_, other->pdcmcount_);
  swap(crmerrorcount_, other->crmerrorcount_);
  swap(pdcmsizemismatchcount_, other->pdcmsizemismatchcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDebugPortBus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvDebugPortBus_array_port::InitAsDefaultInstance() {
}
class UsDrvDebugPortBus_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDebugPortBus_array_port>()._has_bits_);
};

UsDrvDebugPortBus_array_port::UsDrvDebugPortBus_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
}
UsDrvDebugPortBus_array_port::UsDrvDebugPortBus_array_port(const UsDrvDebugPortBus_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
}

void UsDrvDebugPortBus_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvDebugPortBus_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base);
}

UsDrvDebugPortBus_array_port::~UsDrvDebugPortBus_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  SharedDtor();
}

void UsDrvDebugPortBus_array_port::SharedDtor() {
}

void UsDrvDebugPortBus_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDebugPortBus_array_port& UsDrvDebugPortBus_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDebugPortBus_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDebugPortBus_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDebugPortBus_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus data = 3783;
      case 3783:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDebugPortBus_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus data = 3783;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3783, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  return target;
}

size_t UsDrvDebugPortBus_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus data = 3783;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDebugPortBus_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDebugPortBus_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDebugPortBus_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
    MergeFrom(*source);
  }
}

void UsDrvDebugPortBus_array_port::MergeFrom(const UsDrvDebugPortBus_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvDebugPortBus_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDebugPortBus_array_port::CopyFrom(const UsDrvDebugPortBus_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDebugPortBus_array_port::IsInitialized() const {
  return true;
}

void UsDrvDebugPortBus_array_port::InternalSwap(UsDrvDebugPortBus_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDebugPortBus_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_debug_port_bus
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
