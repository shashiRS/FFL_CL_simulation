// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_asic_status_errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "us_drv/us_drv_error_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_asic_status_errors {
class UsDrvAsicStatusErrors;
class UsDrvAsicStatusErrorsDefaultTypeInternal;
extern UsDrvAsicStatusErrorsDefaultTypeInternal _UsDrvAsicStatusErrors_default_instance_;
class UsDrvAsicStatusErrors_array_port;
class UsDrvAsicStatusErrors_array_portDefaultTypeInternal;
extern UsDrvAsicStatusErrors_array_portDefaultTypeInternal _UsDrvAsicStatusErrors_array_port_default_instance_;
}  // namespace us_drv_asic_status_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors>(Arena*);
template<> ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors_array_port* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_drv {
namespace us_drv_asic_status_errors {

// ===================================================================

class UsDrvAsicStatusErrors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors) */ {
 public:
  UsDrvAsicStatusErrors();
  virtual ~UsDrvAsicStatusErrors();

  UsDrvAsicStatusErrors(const UsDrvAsicStatusErrors& from);
  UsDrvAsicStatusErrors(UsDrvAsicStatusErrors&& from) noexcept
    : UsDrvAsicStatusErrors() {
    *this = ::std::move(from);
  }

  inline UsDrvAsicStatusErrors& operator=(const UsDrvAsicStatusErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvAsicStatusErrors& operator=(UsDrvAsicStatusErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvAsicStatusErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvAsicStatusErrors* internal_default_instance() {
    return reinterpret_cast<const UsDrvAsicStatusErrors*>(
               &_UsDrvAsicStatusErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsDrvAsicStatusErrors& a, UsDrvAsicStatusErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvAsicStatusErrors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvAsicStatusErrors* New() const final {
    return CreateMaybeMessage<UsDrvAsicStatusErrors>(nullptr);
  }

  UsDrvAsicStatusErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvAsicStatusErrors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvAsicStatusErrors& from);
  void MergeFrom(const UsDrvAsicStatusErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvAsicStatusErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClkrefFailureFieldNumber = 138,
    kOverTemperatureFieldNumber = 535,
    kAsicInitFailureDetailsFieldNumber = 1316,
    kRamBistFailedFieldNumber = 1881,
    kAsicInitFailureFieldNumber = 1997,
    kAsicInitTimeoutFieldNumber = 2115,
    kAsicCommTimeoutFieldNumber = 3433,
    kVccUnderVoltageFieldNumber = 3942,
  };
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus clkrefFailure = 138;
  bool has_clkreffailure() const;
  private:
  bool _internal_has_clkreffailure() const;
  public:
  void clear_clkreffailure();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus clkreffailure() const;
  void set_clkreffailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_clkreffailure() const;
  void _internal_set_clkreffailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus overTemperature = 535;
  bool has_overtemperature() const;
  private:
  bool _internal_has_overtemperature() const;
  public:
  void clear_overtemperature();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus overtemperature() const;
  void set_overtemperature(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_overtemperature() const;
  void _internal_set_overtemperature(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 asicInitFailureDetails = 1316;
  bool has_asicinitfailuredetails() const;
  private:
  bool _internal_has_asicinitfailuredetails() const;
  public:
  void clear_asicinitfailuredetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 asicinitfailuredetails() const;
  void set_asicinitfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asicinitfailuredetails() const;
  void _internal_set_asicinitfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ramBistFailed = 1881;
  bool has_rambistfailed() const;
  private:
  bool _internal_has_rambistfailed() const;
  public:
  void clear_rambistfailed();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus rambistfailed() const;
  void set_rambistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_rambistfailed() const;
  void _internal_set_rambistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus asicInitFailure = 1997;
  bool has_asicinitfailure() const;
  private:
  bool _internal_has_asicinitfailure() const;
  public:
  void clear_asicinitfailure();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus asicinitfailure() const;
  void set_asicinitfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_asicinitfailure() const;
  void _internal_set_asicinitfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus asicInitTimeout = 2115;
  bool has_asicinittimeout() const;
  private:
  bool _internal_has_asicinittimeout() const;
  public:
  void clear_asicinittimeout();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus asicinittimeout() const;
  void set_asicinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_asicinittimeout() const;
  void _internal_set_asicinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus asicCommTimeout = 3433;
  bool has_asiccommtimeout() const;
  private:
  bool _internal_has_asiccommtimeout() const;
  public:
  void clear_asiccommtimeout();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus asiccommtimeout() const;
  void set_asiccommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_asiccommtimeout() const;
  void _internal_set_asiccommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vccUnderVoltage = 3942;
  bool has_vccundervoltage() const;
  private:
  bool _internal_has_vccundervoltage() const;
  public:
  void clear_vccundervoltage();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus vccundervoltage() const;
  void set_vccundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_vccundervoltage() const;
  void _internal_set_vccundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int clkreffailure_;
  int overtemperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asicinitfailuredetails_;
  int rambistfailed_;
  int asicinitfailure_;
  int asicinittimeout_;
  int asiccommtimeout_;
  int vccundervoltage_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto;
};
// -------------------------------------------------------------------

class UsDrvAsicStatusErrors_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port) */ {
 public:
  UsDrvAsicStatusErrors_array_port();
  virtual ~UsDrvAsicStatusErrors_array_port();

  UsDrvAsicStatusErrors_array_port(const UsDrvAsicStatusErrors_array_port& from);
  UsDrvAsicStatusErrors_array_port(UsDrvAsicStatusErrors_array_port&& from) noexcept
    : UsDrvAsicStatusErrors_array_port() {
    *this = ::std::move(from);
  }

  inline UsDrvAsicStatusErrors_array_port& operator=(const UsDrvAsicStatusErrors_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvAsicStatusErrors_array_port& operator=(UsDrvAsicStatusErrors_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvAsicStatusErrors_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvAsicStatusErrors_array_port* internal_default_instance() {
    return reinterpret_cast<const UsDrvAsicStatusErrors_array_port*>(
               &_UsDrvAsicStatusErrors_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsDrvAsicStatusErrors_array_port& a, UsDrvAsicStatusErrors_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvAsicStatusErrors_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvAsicStatusErrors_array_port* New() const final {
    return CreateMaybeMessage<UsDrvAsicStatusErrors_array_port>(nullptr);
  }

  UsDrvAsicStatusErrors_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvAsicStatusErrors_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvAsicStatusErrors_array_port& from);
  void MergeFrom(const UsDrvAsicStatusErrors_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvAsicStatusErrors_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1398,
  };
  // repeated .pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors data = 1398;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors >*
      mutable_data();
  private:
  const ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors& _internal_data(int index) const;
  ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors* _internal_add_data();
  public:
  const ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors& data(int index) const;
  ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors > data_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsDrvAsicStatusErrors

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus asicInitFailure = 1997;
inline bool UsDrvAsicStatusErrors::_internal_has_asicinitfailure() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_asicinitfailure() const {
  return _internal_has_asicinitfailure();
}
inline void UsDrvAsicStatusErrors::clear_asicinitfailure() {
  asicinitfailure_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::_internal_asicinitfailure() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(asicinitfailure_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::asicinitfailure() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicInitFailure)
  return _internal_asicinitfailure();
}
inline void UsDrvAsicStatusErrors::_internal_set_asicinitfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  asicinitfailure_ = value;
}
inline void UsDrvAsicStatusErrors::set_asicinitfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_asicinitfailure(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicInitFailure)
}

// optional uint32 asicInitFailureDetails = 1316;
inline bool UsDrvAsicStatusErrors::_internal_has_asicinitfailuredetails() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_asicinitfailuredetails() const {
  return _internal_has_asicinitfailuredetails();
}
inline void UsDrvAsicStatusErrors::clear_asicinitfailuredetails() {
  asicinitfailuredetails_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvAsicStatusErrors::_internal_asicinitfailuredetails() const {
  return asicinitfailuredetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvAsicStatusErrors::asicinitfailuredetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicInitFailureDetails)
  return _internal_asicinitfailuredetails();
}
inline void UsDrvAsicStatusErrors::_internal_set_asicinitfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  asicinitfailuredetails_ = value;
}
inline void UsDrvAsicStatusErrors::set_asicinitfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asicinitfailuredetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicInitFailureDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus asicInitTimeout = 2115;
inline bool UsDrvAsicStatusErrors::_internal_has_asicinittimeout() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_asicinittimeout() const {
  return _internal_has_asicinittimeout();
}
inline void UsDrvAsicStatusErrors::clear_asicinittimeout() {
  asicinittimeout_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::_internal_asicinittimeout() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(asicinittimeout_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::asicinittimeout() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicInitTimeout)
  return _internal_asicinittimeout();
}
inline void UsDrvAsicStatusErrors::_internal_set_asicinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  asicinittimeout_ = value;
}
inline void UsDrvAsicStatusErrors::set_asicinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_asicinittimeout(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicInitTimeout)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus asicCommTimeout = 3433;
inline bool UsDrvAsicStatusErrors::_internal_has_asiccommtimeout() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_asiccommtimeout() const {
  return _internal_has_asiccommtimeout();
}
inline void UsDrvAsicStatusErrors::clear_asiccommtimeout() {
  asiccommtimeout_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::_internal_asiccommtimeout() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(asiccommtimeout_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::asiccommtimeout() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicCommTimeout)
  return _internal_asiccommtimeout();
}
inline void UsDrvAsicStatusErrors::_internal_set_asiccommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  asiccommtimeout_ = value;
}
inline void UsDrvAsicStatusErrors::set_asiccommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_asiccommtimeout(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.asicCommTimeout)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ramBistFailed = 1881;
inline bool UsDrvAsicStatusErrors::_internal_has_rambistfailed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_rambistfailed() const {
  return _internal_has_rambistfailed();
}
inline void UsDrvAsicStatusErrors::clear_rambistfailed() {
  rambistfailed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::_internal_rambistfailed() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(rambistfailed_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::rambistfailed() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.ramBistFailed)
  return _internal_rambistfailed();
}
inline void UsDrvAsicStatusErrors::_internal_set_rambistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  rambistfailed_ = value;
}
inline void UsDrvAsicStatusErrors::set_rambistfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_rambistfailed(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.ramBistFailed)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus overTemperature = 535;
inline bool UsDrvAsicStatusErrors::_internal_has_overtemperature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_overtemperature() const {
  return _internal_has_overtemperature();
}
inline void UsDrvAsicStatusErrors::clear_overtemperature() {
  overtemperature_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::_internal_overtemperature() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(overtemperature_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::overtemperature() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.overTemperature)
  return _internal_overtemperature();
}
inline void UsDrvAsicStatusErrors::_internal_set_overtemperature(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  overtemperature_ = value;
}
inline void UsDrvAsicStatusErrors::set_overtemperature(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_overtemperature(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.overTemperature)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vccUnderVoltage = 3942;
inline bool UsDrvAsicStatusErrors::_internal_has_vccundervoltage() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_vccundervoltage() const {
  return _internal_has_vccundervoltage();
}
inline void UsDrvAsicStatusErrors::clear_vccundervoltage() {
  vccundervoltage_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::_internal_vccundervoltage() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(vccundervoltage_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::vccundervoltage() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.vccUnderVoltage)
  return _internal_vccundervoltage();
}
inline void UsDrvAsicStatusErrors::_internal_set_vccundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  vccundervoltage_ = value;
}
inline void UsDrvAsicStatusErrors::set_vccundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_vccundervoltage(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.vccUnderVoltage)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus clkrefFailure = 138;
inline bool UsDrvAsicStatusErrors::_internal_has_clkreffailure() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsDrvAsicStatusErrors::has_clkreffailure() const {
  return _internal_has_clkreffailure();
}
inline void UsDrvAsicStatusErrors::clear_clkreffailure() {
  clkreffailure_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::_internal_clkreffailure() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(clkreffailure_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvAsicStatusErrors::clkreffailure() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.clkrefFailure)
  return _internal_clkreffailure();
}
inline void UsDrvAsicStatusErrors::_internal_set_clkreffailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  clkreffailure_ = value;
}
inline void UsDrvAsicStatusErrors::set_clkreffailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_clkreffailure(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors.clkrefFailure)
}

// -------------------------------------------------------------------

// UsDrvAsicStatusErrors_array_port

// repeated .pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors data = 1398;
inline int UsDrvAsicStatusErrors_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsDrvAsicStatusErrors_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsDrvAsicStatusErrors_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors* UsDrvAsicStatusErrors_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors >*
UsDrvAsicStatusErrors_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port.data)
  return &data_;
}
inline const ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors& UsDrvAsicStatusErrors_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors& UsDrvAsicStatusErrors_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors* UsDrvAsicStatusErrors_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors* UsDrvAsicStatusErrors_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_asic_status_errors::UsDrvAsicStatusErrors >&
UsDrvAsicStatusErrors_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_asic_status_errors.UsDrvAsicStatusErrors_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_drv_asic_status_errors
}  // namespace us_drv
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fasic_5fstatus_5ferrors_2eproto
