// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_sensor_sw_errors.proto

#include "us_drv/us_drv_sensor_sw_errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_sensor_sw_errors {
class UsDrvSensorSwErrorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSensorSwErrors> _instance;
} _UsDrvSensorSwErrors_default_instance_;
class UsDrvSensorSwErrors_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSensorSwErrors_array_port> _instance;
} _UsDrvSensorSwErrors_array_port_default_instance_;
}  // namespace us_drv_sensor_sw_errors
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sensor_sw_errors::_UsDrvSensorSwErrors_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto}, {}};

static void InitDefaultsscc_info_UsDrvSensorSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sensor_sw_errors::_UsDrvSensorSwErrors_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvSensorSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvSensorSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto}, {
      &scc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorinittimeout_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorinittimeoutdetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorfwversionincompatible_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorhwversionincompatible_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorinitfiringschemesendfail_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorinitreceivingschemesendfail_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorinitbuserror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorinitscodeincorrect_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, sensorpdcmcommtimeout_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors, unexpectedmeasmoderecfg_),
  9,
  5,
  0,
  3,
  8,
  2,
  1,
  4,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors)},
  { 25, 31, sizeof(::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sensor_sw_errors::_UsDrvSensorSwErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sensor_sw_errors::_UsDrvSensorSwErrors_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$us_drv/us_drv_sensor_sw_errors.proto\022!"
  "pb.us_drv.us_drv_sensor_sw_errors\032 us_dr"
  "v/us_drv_error_status.proto\"\257\006\n\023UsDrvSen"
  "sorSwErrors\022K\n\021sensorInitTimeout\030\370\030 \001(\0162"
  "/.pb.us_drv.us_drv_error_status.UsDrvErr"
  "orStatus\022!\n\030sensorInitTimeoutDetails\030\332\013 "
  "\001(\r\022T\n\033sensorFwVersionIncompatible\030j \001(\016"
  "2/.pb.us_drv.us_drv_error_status.UsDrvEr"
  "rorStatus\022U\n\033sensorHwVersionIncompatible"
  "\030\352\006 \001(\0162/.pb.us_drv.us_drv_error_status."
  "UsDrvErrorStatus\022X\n\036sensorInitFiringSche"
  "meSendFail\030\353\023 \001(\0162/.pb.us_drv.us_drv_err"
  "or_status.UsDrvErrorStatus\022[\n!sensorInit"
  "ReceivingSchemeSendFail\030\270\006 \001(\0162/.pb.us_d"
  "rv.us_drv_error_status.UsDrvErrorStatus\022"
  "L\n\022sensorInitBusError\030\377\003 \001(\0162/.pb.us_drv"
  ".us_drv_error_status.UsDrvErrorStatus\022R\n"
  "\030sensorInitScodeIncorrect\030\213\n \001(\0162/.pb.us"
  "_drv.us_drv_error_status.UsDrvErrorStatu"
  "s\022O\n\025sensorPdcmCommTimeout\030\252\020 \001(\0162/.pb.u"
  "s_drv.us_drv_error_status.UsDrvErrorStat"
  "us\022Q\n\027unexpectedMeasModeRecfg\030\247\020 \001(\0162/.p"
  "b.us_drv.us_drv_error_status.UsDrvErrorS"
  "tatus\"g\n\036UsDrvSensorSwErrors_array_port\022"
  "E\n\004data\030\351\007 \003(\01326.pb.us_drv.us_drv_sensor"
  "_sw_errors.UsDrvSensorSwErrors"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_deps[1] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5ferror_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_sccs[2] = {
  &scc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.base,
  &scc_info_UsDrvSensorSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto, "us_drv/us_drv_sensor_sw_errors.proto", 1030,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_sensor_sw_errors {

// ===================================================================

void UsDrvSensorSwErrors::InitAsDefaultInstance() {
}
class UsDrvSensorSwErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSensorSwErrors>()._has_bits_);
  static void set_has_sensorinittimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sensorinittimeoutdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sensorfwversionincompatible(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensorhwversionincompatible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sensorinitfiringschemesendfail(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sensorinitreceivingschemesendfail(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sensorinitbuserror(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sensorinitscodeincorrect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sensorpdcmcommtimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unexpectedmeasmoderecfg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

UsDrvSensorSwErrors::UsDrvSensorSwErrors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
}
UsDrvSensorSwErrors::UsDrvSensorSwErrors(const UsDrvSensorSwErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensorfwversionincompatible_, &from.sensorfwversionincompatible_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensorinittimeout_) -
    reinterpret_cast<char*>(&sensorfwversionincompatible_)) + sizeof(sensorinittimeout_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
}

void UsDrvSensorSwErrors::SharedCtor() {
  ::memset(&sensorfwversionincompatible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensorinittimeout_) -
      reinterpret_cast<char*>(&sensorfwversionincompatible_)) + sizeof(sensorinittimeout_));
}

UsDrvSensorSwErrors::~UsDrvSensorSwErrors() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  SharedDtor();
}

void UsDrvSensorSwErrors::SharedDtor() {
}

void UsDrvSensorSwErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSensorSwErrors& UsDrvSensorSwErrors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSensorSwErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSensorSwErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&sensorfwversionincompatible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sensorpdcmcommtimeout_) -
        reinterpret_cast<char*>(&sensorfwversionincompatible_)) + sizeof(sensorpdcmcommtimeout_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&sensorinitfiringschemesendfail_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sensorinittimeout_) -
        reinterpret_cast<char*>(&sensorinitfiringschemesendfail_)) + sizeof(sensorinittimeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSensorSwErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorFwVersionIncompatible = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorfwversionincompatible(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(106, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitBusError = 511;
      case 511:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorinitbuserror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(511, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitReceivingSchemeSendFail = 824;
      case 824:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorinitreceivingschemesendfail(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(824, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorHwVersionIncompatible = 874;
      case 874:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorhwversionincompatible(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(874, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitScodeIncorrect = 1291;
      case 1291:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorinitscodeincorrect(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1291, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 sensorInitTimeoutDetails = 1498;
      case 1498:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_sensorinittimeoutdetails(&has_bits);
          sensorinittimeoutdetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus unexpectedMeasModeRecfg = 2087;
      case 2087:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_unexpectedmeasmoderecfg(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2087, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorPdcmCommTimeout = 2090;
      case 2090:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorpdcmcommtimeout(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2090, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitFiringSchemeSendFail = 2539;
      case 2539:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorinitfiringschemesendfail(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2539, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitTimeout = 3192;
      case 3192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_sensorinittimeout(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3192, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSensorSwErrors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorFwVersionIncompatible = 106;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      106, this->_internal_sensorfwversionincompatible(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitBusError = 511;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      511, this->_internal_sensorinitbuserror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitReceivingSchemeSendFail = 824;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      824, this->_internal_sensorinitreceivingschemesendfail(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorHwVersionIncompatible = 874;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      874, this->_internal_sensorhwversionincompatible(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitScodeIncorrect = 1291;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1291, this->_internal_sensorinitscodeincorrect(), target);
  }

  // optional uint32 sensorInitTimeoutDetails = 1498;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1498, this->_internal_sensorinittimeoutdetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus unexpectedMeasModeRecfg = 2087;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2087, this->_internal_unexpectedmeasmoderecfg(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorPdcmCommTimeout = 2090;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2090, this->_internal_sensorpdcmcommtimeout(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitFiringSchemeSendFail = 2539;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2539, this->_internal_sensorinitfiringschemesendfail(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitTimeout = 3192;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3192, this->_internal_sensorinittimeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  return target;
}

size_t UsDrvSensorSwErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorFwVersionIncompatible = 106;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorfwversionincompatible());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitBusError = 511;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorinitbuserror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitReceivingSchemeSendFail = 824;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorinitreceivingschemesendfail());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorHwVersionIncompatible = 874;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorhwversionincompatible());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitScodeIncorrect = 1291;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorinitscodeincorrect());
    }

    // optional uint32 sensorInitTimeoutDetails = 1498;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sensorinittimeoutdetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus unexpectedMeasModeRecfg = 2087;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unexpectedmeasmoderecfg());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorPdcmCommTimeout = 2090;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorpdcmcommtimeout());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitFiringSchemeSendFail = 2539;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorinitfiringschemesendfail());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitTimeout = 3192;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensorinittimeout());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSensorSwErrors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSensorSwErrors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSensorSwErrors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
    MergeFrom(*source);
  }
}

void UsDrvSensorSwErrors::MergeFrom(const UsDrvSensorSwErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      sensorfwversionincompatible_ = from.sensorfwversionincompatible_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensorinitbuserror_ = from.sensorinitbuserror_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensorinitreceivingschemesendfail_ = from.sensorinitreceivingschemesendfail_;
    }
    if (cached_has_bits & 0x00000008u) {
      sensorhwversionincompatible_ = from.sensorhwversionincompatible_;
    }
    if (cached_has_bits & 0x00000010u) {
      sensorinitscodeincorrect_ = from.sensorinitscodeincorrect_;
    }
    if (cached_has_bits & 0x00000020u) {
      sensorinittimeoutdetails_ = from.sensorinittimeoutdetails_;
    }
    if (cached_has_bits & 0x00000040u) {
      unexpectedmeasmoderecfg_ = from.unexpectedmeasmoderecfg_;
    }
    if (cached_has_bits & 0x00000080u) {
      sensorpdcmcommtimeout_ = from.sensorpdcmcommtimeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      sensorinitfiringschemesendfail_ = from.sensorinitfiringschemesendfail_;
    }
    if (cached_has_bits & 0x00000200u) {
      sensorinittimeout_ = from.sensorinittimeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvSensorSwErrors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSensorSwErrors::CopyFrom(const UsDrvSensorSwErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSensorSwErrors::IsInitialized() const {
  return true;
}

void UsDrvSensorSwErrors::InternalSwap(UsDrvSensorSwErrors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sensorfwversionincompatible_, other->sensorfwversionincompatible_);
  swap(sensorinitbuserror_, other->sensorinitbuserror_);
  swap(sensorinitreceivingschemesendfail_, other->sensorinitreceivingschemesendfail_);
  swap(sensorhwversionincompatible_, other->sensorhwversionincompatible_);
  swap(sensorinitscodeincorrect_, other->sensorinitscodeincorrect_);
  swap(sensorinittimeoutdetails_, other->sensorinittimeoutdetails_);
  swap(unexpectedmeasmoderecfg_, other->unexpectedmeasmoderecfg_);
  swap(sensorpdcmcommtimeout_, other->sensorpdcmcommtimeout_);
  swap(sensorinitfiringschemesendfail_, other->sensorinitfiringschemesendfail_);
  swap(sensorinittimeout_, other->sensorinittimeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSensorSwErrors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvSensorSwErrors_array_port::InitAsDefaultInstance() {
}
class UsDrvSensorSwErrors_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSensorSwErrors_array_port>()._has_bits_);
};

UsDrvSensorSwErrors_array_port::UsDrvSensorSwErrors_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
}
UsDrvSensorSwErrors_array_port::UsDrvSensorSwErrors_array_port(const UsDrvSensorSwErrors_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
}

void UsDrvSensorSwErrors_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvSensorSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.base);
}

UsDrvSensorSwErrors_array_port::~UsDrvSensorSwErrors_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  SharedDtor();
}

void UsDrvSensorSwErrors_array_port::SharedDtor() {
}

void UsDrvSensorSwErrors_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSensorSwErrors_array_port& UsDrvSensorSwErrors_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSensorSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSensorSwErrors_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSensorSwErrors_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors data = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSensorSwErrors_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors data = 1001;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  return target;
}

size_t UsDrvSensorSwErrors_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors data = 1001;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSensorSwErrors_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSensorSwErrors_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSensorSwErrors_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
    MergeFrom(*source);
  }
}

void UsDrvSensorSwErrors_array_port::MergeFrom(const UsDrvSensorSwErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvSensorSwErrors_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSensorSwErrors_array_port::CopyFrom(const UsDrvSensorSwErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSensorSwErrors_array_port::IsInitialized() const {
  return true;
}

void UsDrvSensorSwErrors_array_port::InternalSwap(UsDrvSensorSwErrors_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSensorSwErrors_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_sensor_sw_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
