// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/config_brake_t.proto

#include "mf_lsca/config_brake_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cml_2fvec2_5fdf_5fpod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2Df_POD_cml_2fvec2_5fdf_5fpod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fbrake_5fset_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_brakeSet_t_mf_5flsca_2fbrake_5fset_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fbrake_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto;
namespace pb {
namespace mf_lsca {
namespace config_brake_t {
class configBrake_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configBrake_t> _instance;
} _configBrake_t_default_instance_;
class configBrake_t_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configBrake_t_array_port> _instance;
} _configBrake_t_array_port_default_instance_;
}  // namespace config_brake_t
}  // namespace mf_lsca
}  // namespace pb
static void InitDefaultsscc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::config_brake_t::_configBrake_t_default_instance_;
    new (ptr) ::pb::mf_lsca::config_brake_t::configBrake_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::config_brake_t::configBrake_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto}, {
      &scc_info_brakeSet_t_mf_5flsca_2fbrake_5fset_5ft_2eproto.base,
      &scc_info_Vec2Df_POD_cml_2fvec2_5fdf_5fpod_2eproto.base,}};

static void InitDefaultsscc_info_configBrake_t_array_port_mf_5flsca_2fconfig_5fbrake_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::config_brake_t::_configBrake_t_array_port_default_instance_;
    new (ptr) ::pb::mf_lsca::config_brake_t::configBrake_t_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::config_brake_t::configBrake_t_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_configBrake_t_array_port_mf_5flsca_2fconfig_5fbrake_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_configBrake_t_array_port_mf_5flsca_2fconfig_5fbrake_5ft_2eproto}, {
      &scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5flsca_2fconfig_5fbrake_5ft_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5flsca_2fconfig_5fbrake_5ft_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5flsca_2fconfig_5fbrake_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5flsca_2fconfig_5fbrake_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, brakemodel_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, bodyadjustmentactualsize_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, bodyadjustment_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectedmirrorshapeleftactualsize_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectedmirrorshapeleft_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectedmirrorshaperightactualsize_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectedmirrorshaperight_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, enlargementfront_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, enlargementrear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, enlargementside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, warntime_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, loweractivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, upperactivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, lowerdeactivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, upperdeactivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, loweractivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, upperactivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, lowerdeactivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, upperdeactivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, maximumoverridedistance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, autocontinueoverridedistance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, margindelay_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, standstilltime_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, ignoretrailerx_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, rimprotectionspeed_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, rimprotectionangle_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, mintriggercountstaticbrake_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, minheightconfidence_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, minclassconfidence_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, minstaticobjectprobability_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectbody_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectwheel_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectrim_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protectmirror_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, protecthitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, comfortinmanual_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, autocontinue_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, warnhigh_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, warnlow_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, enablebrakelow_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, enablebrakehigh_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, drivingtubeenabled_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, checkdoors_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, checkdriverseatbelt_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, checktrunk_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, forwardbrakeenablediftrunkopen_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, checkhood_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, checkpedaloverridegas_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, checkpedaloverridebrake_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t, checkdriverseatoccupied_nu_),
  0,
  28,
  ~0u,
  39,
  ~0u,
  16,
  ~0u,
  46,
  18,
  4,
  2,
  30,
  1,
  14,
  29,
  40,
  41,
  12,
  3,
  6,
  13,
  7,
  44,
  45,
  19,
  5,
  42,
  17,
  15,
  43,
  8,
  9,
  10,
  11,
  35,
  36,
  37,
  38,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  31,
  32,
  33,
  34,
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_brake_t::configBrake_t_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 55, sizeof(::pb::mf_lsca::config_brake_t::configBrake_t)},
  { 105, 111, sizeof(::pb::mf_lsca::config_brake_t::configBrake_t_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::config_brake_t::_configBrake_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::config_brake_t::_configBrake_t_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5flsca_2fconfig_5fbrake_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034mf_lsca/config_brake_t.proto\022\031pb.mf_ls"
  "ca.config_brake_t\032\031mf_lsca/brake_set_t.p"
  "roto\032\025cml/vec2_df_pod.proto\"\204\016\n\rconfigBr"
  "ake_t\0227\n\nbrakeModel\030\205\r \001(\0132\".pb.mf_lsca."
  "brake_set_t.brakeSet_t\022$\n\033bodyAdjustment"
  "ActualSize_nu\030\366\r \001(\r\0227\n\016bodyAdjustment\030\243"
  "\005 \003(\0132\036.pb.cml.vec2_df_pod.Vec2Df_POD\022.\n"
  "%protectedMirrorShapeLeftActualSize_nu\030\225"
  "\024 \001(\r\022A\n\030protectedMirrorShapeLeft\030\367\t \003(\013"
  "2\036.pb.cml.vec2_df_pod.Vec2Df_POD\022/\n&prot"
  "ectedMirrorShapeRightActualSize_nu\030\231\010 \001("
  "\r\022B\n\031protectedMirrorShapeRight\030\361\033 \003(\0132\036."
  "pb.cml.vec2_df_pod.Vec2Df_POD\022\033\n\022enlarge"
  "mentFront_m\030\232\034 \001(\002\022\032\n\021enlargementRear_m\030"
  "\273\n \001(\002\022\032\n\021enlargementSide_m\030\206\002 \001(\002\022\023\n\nwa"
  "rnTime_s\030\252\001 \001(\002\022(\n\037lowerActivationSpeedF"
  "orwards_ms\030\302\016 \001(\002\022(\n\037upperActivationSpee"
  "dForwards_ms\030\232\037 \001(\002\022*\n!lowerDeactivation"
  "SpeedForwards_ms\030\365\006 \001(\002\022*\n!upperDeactiva"
  "tionSpeedForwards_ms\030\375\r \001(\002\022)\n lowerActi"
  "vationSpeedBackwards_ms\030\250\024 \001(\002\022)\n upperA"
  "ctivationSpeedBackwards_ms\030\354\024 \001(\002\022+\n\"low"
  "erDeactivationSpeedBackwards_ms\030\273\006 \001(\002\022+"
  "\n\"upperDeactivationSpeedBackwards_ms\030\343\001 "
  "\001(\002\022\"\n\031maximumOverrideDistance_m\030\343\004 \001(\002\022"
  "\'\n\036autoContinueOverrideDistance_m\030\310\006 \001(\002"
  "\022\026\n\rmarginDelay_s\030\227\005 \001(\002\022\031\n\020standStillTi"
  "me_s\030\202\032 \001(\002\022\031\n\020ignoreTrailerX_m\030\264\033 \001(\002\022\037"
  "\n\026rimProtectionSpeed_mps\030\253\013 \001(\002\022\037\n\026rimPr"
  "otectionAngle_deg\030\345\002 \001(\002\022&\n\035minTriggerCo"
  "untStaticBrake_nu\030\200\027 \001(\r\022!\n\030minHeightCon"
  "fidence_perc\030\221\n \001(\r\022 \n\027minClassConfidenc"
  "e_perc\030\221\010 \001(\r\022(\n\037minStaticObjectProbabil"
  "ity_perc\030\255\031 \001(\r\022\027\n\016protectBody_nu\030\304\007 \001(\010"
  "\022\030\n\017protectWheel_nu\030\215\006 \001(\010\022\025\n\rprotectRim"
  "_nu\030\005 \001(\010\022\031\n\020protectMirror_nu\030\355\007 \001(\010\022\030\n\017"
  "protectHitch_nu\030\312\016 \001(\010\022\033\n\022comfortInManua"
  "l_nu\030\316\025 \001(\010\022\030\n\017autoContinue_nu\030\264\016 \001(\010\022\024\n"
  "\013warnHigh_nu\030\277\026 \001(\010\022\023\n\nwarnLow_nu\030\230\004 \001(\010"
  "\022\032\n\021enableBrakeLow_nu\030\353\007 \001(\010\022\033\n\022enableBr"
  "akeHigh_nu\030\247\027 \001(\010\022\036\n\025drivingTubeEnabled_"
  "nu\030\323\017 \001(\010\022\026\n\rcheckDoors_nu\030\223\025 \001(\010\022\037\n\026che"
  "ckDriverSeatbelt_nu\030\215\r \001(\010\022\026\n\rcheckTrunk"
  "_nu\030\305\017 \001(\010\022*\n!forwardBrakeEnabledIfTrunk"
  "Open_nu\030\270\002 \001(\010\022\025\n\014checkHood_nu\030\350\002 \001(\010\022!\n"
  "\030checkPedalOverrideGas_nu\030\255\025 \001(\010\022#\n\032chec"
  "kPedalOverrideBrake_nu\030\226\031 \001(\010\022#\n\032checkDr"
  "iverSeatOccupied_nu\030\321\027 \001(\010\"S\n\030configBrak"
  "e_t_array_port\0227\n\004data\030\344\036 \003(\0132(.pb.mf_ls"
  "ca.config_brake_t.configBrake_t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_deps[2] = {
  &::descriptor_table_cml_2fvec2_5fdf_5fpod_2eproto,
  &::descriptor_table_mf_5flsca_2fbrake_5fset_5ft_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_sccs[2] = {
  &scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base,
  &scc_info_configBrake_t_array_port_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_once;
static bool descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto = {
  &descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_initialized, descriptor_table_protodef_mf_5flsca_2fconfig_5fbrake_5ft_2eproto, "mf_lsca/config_brake_t.proto", 1991,
  &descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_once, descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_sccs, descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_mf_5flsca_2fconfig_5fbrake_5ft_2eproto::offsets,
  file_level_metadata_mf_5flsca_2fconfig_5fbrake_5ft_2eproto, 2, file_level_enum_descriptors_mf_5flsca_2fconfig_5fbrake_5ft_2eproto, file_level_service_descriptors_mf_5flsca_2fconfig_5fbrake_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5flsca_2fconfig_5fbrake_5ft_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto), true);
namespace pb {
namespace mf_lsca {
namespace config_brake_t {

// ===================================================================

void configBrake_t::InitAsDefaultInstance() {
  ::pb::mf_lsca::config_brake_t::_configBrake_t_default_instance_._instance.get_mutable()->brakemodel_ = const_cast< ::pb::mf_lsca::brake_set_t::brakeSet_t*>(
      ::pb::mf_lsca::brake_set_t::brakeSet_t::internal_default_instance());
}
class configBrake_t::_Internal {
 public:
  using HasBits = decltype(std::declval<configBrake_t>()._has_bits_);
  static const ::pb::mf_lsca::brake_set_t::brakeSet_t& brakemodel(const configBrake_t* msg);
  static void set_has_brakemodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bodyadjustmentactualsize_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_protectedmirrorshapeleftactualsize_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_protectedmirrorshaperightactualsize_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enlargementfront_m(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_enlargementrear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enlargementside_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_warntime_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_loweractivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_upperactivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lowerdeactivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_upperdeactivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_loweractivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_upperactivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_lowerdeactivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_upperdeactivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maximumoverridedistance_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_autocontinueoverridedistance_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_margindelay_s(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_standstilltime_s(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_ignoretrailerx_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_rimprotectionspeed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_rimprotectionangle_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mintriggercountstaticbrake_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_minheightconfidence_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_minclassconfidence_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_minstaticobjectprobability_perc(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_protectbody_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_protectwheel_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_protectrim_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_protectmirror_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_protecthitch_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_comfortinmanual_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_autocontinue_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_warnhigh_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_warnlow_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_enablebrakelow_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_enablebrakehigh_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_drivingtubeenabled_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_checkdoors_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_checkdriverseatbelt_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_checktrunk_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_forwardbrakeenablediftrunkopen_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_checkhood_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_checkpedaloverridegas_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_checkpedaloverridebrake_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_checkdriverseatoccupied_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::pb::mf_lsca::brake_set_t::brakeSet_t&
configBrake_t::_Internal::brakemodel(const configBrake_t* msg) {
  return *msg->brakemodel_;
}
void configBrake_t::clear_brakemodel() {
  if (brakemodel_ != nullptr) brakemodel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void configBrake_t::clear_bodyadjustment() {
  bodyadjustment_.Clear();
}
void configBrake_t::clear_protectedmirrorshapeleft() {
  protectedmirrorshapeleft_.Clear();
}
void configBrake_t::clear_protectedmirrorshaperight() {
  protectedmirrorshaperight_.Clear();
}
configBrake_t::configBrake_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.config_brake_t.configBrake_t)
}
configBrake_t::configBrake_t(const configBrake_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bodyadjustment_(from.bodyadjustment_),
      protectedmirrorshapeleft_(from.protectedmirrorshapeleft_),
      protectedmirrorshaperight_(from.protectedmirrorshaperight_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_brakemodel()) {
    brakemodel_ = new ::pb::mf_lsca::brake_set_t::brakeSet_t(*from.brakemodel_);
  } else {
    brakemodel_ = nullptr;
  }
  ::memcpy(&upperactivationspeedforwards_ms_, &from.upperactivationspeedforwards_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&enlargementfront_m_) -
    reinterpret_cast<char*>(&upperactivationspeedforwards_ms_)) + sizeof(enlargementfront_m_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.config_brake_t.configBrake_t)
}

void configBrake_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base);
  ::memset(&brakemodel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enlargementfront_m_) -
      reinterpret_cast<char*>(&brakemodel_)) + sizeof(enlargementfront_m_));
}

configBrake_t::~configBrake_t() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.config_brake_t.configBrake_t)
  SharedDtor();
}

void configBrake_t::SharedDtor() {
  if (this != internal_default_instance()) delete brakemodel_;
}

void configBrake_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configBrake_t& configBrake_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base);
  return *internal_default_instance();
}


void configBrake_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.config_brake_t.configBrake_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodyadjustment_.Clear();
  protectedmirrorshapeleft_.Clear();
  protectedmirrorshaperight_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(brakemodel_ != nullptr);
    brakemodel_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&upperactivationspeedforwards_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&margindelay_s_) -
        reinterpret_cast<char*>(&upperactivationspeedforwards_ms_)) + sizeof(margindelay_s_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&protectbody_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minclassconfidence_perc_) -
        reinterpret_cast<char*>(&protectbody_nu_)) + sizeof(minclassconfidence_perc_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&protectedmirrorshaperightactualsize_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drivingtubeenabled_nu_) -
        reinterpret_cast<char*>(&protectedmirrorshaperightactualsize_nu_)) + sizeof(drivingtubeenabled_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&checkdoors_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checkhood_nu_) -
        reinterpret_cast<char*>(&checkdoors_nu_)) + sizeof(checkhood_nu_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&checkpedaloverridegas_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protectedmirrorshapeleftactualsize_nu_) -
        reinterpret_cast<char*>(&checkpedaloverridegas_nu_)) + sizeof(protectedmirrorshapeleftactualsize_nu_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&loweractivationspeedbackwards_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enlargementfront_m_) -
        reinterpret_cast<char*>(&loweractivationspeedbackwards_ms_)) + sizeof(enlargementfront_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* configBrake_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool protectRim_nu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_protectrim_nu(&_has_bits_);
          protectrim_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float warnTime_s = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_warntime_s(&_has_bits_);
          warntime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float upperDeactivationSpeedBackwards_ms = 227;
      case 227:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_upperdeactivationspeedbackwards_ms(&_has_bits_);
          upperdeactivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float enlargementSide_m = 262;
      case 262:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_enlargementside_m(&_has_bits_);
          enlargementside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool forwardBrakeEnabledIfTrunkOpen_nu = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_forwardbrakeenablediftrunkopen_nu(&_has_bits_);
          forwardbrakeenablediftrunkopen_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rimProtectionAngle_deg = 357;
      case 357:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rimprotectionangle_deg(&_has_bits_);
          rimprotectionangle_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool checkHood_nu = 360;
      case 360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_checkhood_nu(&_has_bits_);
          checkhood_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool warnLow_nu = 536;
      case 536:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_warnlow_nu(&_has_bits_);
          warnlow_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float maximumOverrideDistance_m = 611;
      case 611:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_maximumoverridedistance_m(&_has_bits_);
          maximumoverridedistance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float marginDelay_s = 663;
      case 663:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_margindelay_s(&_has_bits_);
          margindelay_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .pb.cml.vec2_df_pod.Vec2Df_POD bodyAdjustment = 675;
      case 675:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodyadjustment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<5402>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool protectWheel_nu = 781;
      case 781:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_protectwheel_nu(&_has_bits_);
          protectwheel_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lowerDeactivationSpeedBackwards_ms = 827;
      case 827:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_lowerdeactivationspeedbackwards_ms(&_has_bits_);
          lowerdeactivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float autoContinueOverrideDistance_m = 840;
      case 840:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_autocontinueoverridedistance_m(&_has_bits_);
          autocontinueoverridedistance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lowerDeactivationSpeedForwards_ms = 885;
      case 885:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_lowerdeactivationspeedforwards_ms(&_has_bits_);
          lowerdeactivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool protectBody_nu = 964;
      case 964:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_protectbody_nu(&_has_bits_);
          protectbody_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableBrakeLow_nu = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_enablebrakelow_nu(&_has_bits_);
          enablebrakelow_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool protectMirror_nu = 1005;
      case 1005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_protectmirror_nu(&_has_bits_);
          protectmirror_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minClassConfidence_perc = 1041;
      case 1041:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_minclassconfidence_perc(&_has_bits_);
          minclassconfidence_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 protectedMirrorShapeRightActualSize_nu = 1049;
      case 1049:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_protectedmirrorshaperightactualsize_nu(&_has_bits_);
          protectedmirrorshaperightactualsize_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeLeft = 1271;
      case 1271:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_protectedmirrorshapeleft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 minHeightConfidence_perc = 1297;
      case 1297:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_minheightconfidence_perc(&_has_bits_);
          minheightconfidence_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float enlargementRear_m = 1339;
      case 1339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_enlargementrear_m(&_has_bits_);
          enlargementrear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rimProtectionSpeed_mps = 1451;
      case 1451:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_rimprotectionspeed_mps(&_has_bits_);
          rimprotectionspeed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.brake_set_t.brakeSet_t brakeModel = 1669;
      case 1669:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_brakemodel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkDriverSeatbelt_nu = 1677;
      case 1677:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_checkdriverseatbelt_nu(&_has_bits_);
          checkdriverseatbelt_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodyAdjustmentActualSize_nu = 1782;
      case 1782:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_bodyadjustmentactualsize_nu(&_has_bits_);
          bodyadjustmentactualsize_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float upperDeactivationSpeedForwards_ms = 1789;
      case 1789:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_upperdeactivationspeedforwards_ms(&_has_bits_);
          upperdeactivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool autoContinue_nu = 1844;
      case 1844:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_autocontinue_nu(&_has_bits_);
          autocontinue_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lowerActivationSpeedForwards_ms = 1858;
      case 1858:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_loweractivationspeedforwards_ms(&_has_bits_);
          loweractivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool protectHitch_nu = 1866;
      case 1866:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_protecthitch_nu(&_has_bits_);
          protecthitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkTrunk_nu = 1989;
      case 1989:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_checktrunk_nu(&_has_bits_);
          checktrunk_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drivingTubeEnabled_nu = 2003;
      case 2003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_drivingtubeenabled_nu(&_has_bits_);
          drivingtubeenabled_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 protectedMirrorShapeLeftActualSize_nu = 2581;
      case 2581:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_protectedmirrorshapeleftactualsize_nu(&_has_bits_);
          protectedmirrorshapeleftactualsize_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lowerActivationSpeedBackwards_ms = 2600;
      case 2600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_loweractivationspeedbackwards_ms(&_has_bits_);
          loweractivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float upperActivationSpeedBackwards_ms = 2668;
      case 2668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_upperactivationspeedbackwards_ms(&_has_bits_);
          upperactivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool checkDoors_nu = 2707;
      case 2707:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_checkdoors_nu(&_has_bits_);
          checkdoors_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkPedalOverrideGas_nu = 2733;
      case 2733:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_checkpedaloverridegas_nu(&_has_bits_);
          checkpedaloverridegas_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool comfortInManual_nu = 2766;
      case 2766:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_comfortinmanual_nu(&_has_bits_);
          comfortinmanual_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool warnHigh_nu = 2879;
      case 2879:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_warnhigh_nu(&_has_bits_);
          warnhigh_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minTriggerCountStaticBrake_nu = 2944;
      case 2944:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_mintriggercountstaticbrake_nu(&_has_bits_);
          mintriggercountstaticbrake_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableBrakeHigh_nu = 2983;
      case 2983:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enablebrakehigh_nu(&_has_bits_);
          enablebrakehigh_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkDriverSeatOccupied_nu = 3025;
      case 3025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_checkdriverseatoccupied_nu(&_has_bits_);
          checkdriverseatoccupied_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkPedalOverrideBrake_nu = 3222;
      case 3222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_checkpedaloverridebrake_nu(&_has_bits_);
          checkpedaloverridebrake_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minStaticObjectProbability_perc = 3245;
      case 3245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_minstaticobjectprobability_perc(&_has_bits_);
          minstaticobjectprobability_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float standStillTime_s = 3330;
      case 3330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_standstilltime_s(&_has_bits_);
          standstilltime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ignoreTrailerX_m = 3508;
      case 3508:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ignoretrailerx_m(&_has_bits_);
          ignoretrailerx_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeRight = 3569;
      case 3569:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_add_protectedmirrorshaperight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float enlargementFront_m = 3610;
      case 3610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_enlargementfront_m(&_has_bits_);
          enlargementfront_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float upperActivationSpeedForwards_ms = 3994;
      case 3994:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_upperactivationspeedforwards_ms(&_has_bits_);
          upperactivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configBrake_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.config_brake_t.configBrake_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool protectRim_nu = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_protectrim_nu(), target);
  }

  // optional float warnTime_s = 170;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(170, this->_internal_warntime_s(), target);
  }

  // optional float upperDeactivationSpeedBackwards_ms = 227;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(227, this->_internal_upperdeactivationspeedbackwards_ms(), target);
  }

  // optional float enlargementSide_m = 262;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(262, this->_internal_enlargementside_m(), target);
  }

  // optional bool forwardBrakeEnabledIfTrunkOpen_nu = 312;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(312, this->_internal_forwardbrakeenablediftrunkopen_nu(), target);
  }

  // optional float rimProtectionAngle_deg = 357;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(357, this->_internal_rimprotectionangle_deg(), target);
  }

  // optional bool checkHood_nu = 360;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(360, this->_internal_checkhood_nu(), target);
  }

  // optional bool warnLow_nu = 536;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(536, this->_internal_warnlow_nu(), target);
  }

  // optional float maximumOverrideDistance_m = 611;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(611, this->_internal_maximumoverridedistance_m(), target);
  }

  // optional float marginDelay_s = 663;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(663, this->_internal_margindelay_s(), target);
  }

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD bodyAdjustment = 675;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bodyadjustment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(675, this->_internal_bodyadjustment(i), target, stream);
  }

  // optional bool protectWheel_nu = 781;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(781, this->_internal_protectwheel_nu(), target);
  }

  // optional float lowerDeactivationSpeedBackwards_ms = 827;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(827, this->_internal_lowerdeactivationspeedbackwards_ms(), target);
  }

  // optional float autoContinueOverrideDistance_m = 840;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(840, this->_internal_autocontinueoverridedistance_m(), target);
  }

  // optional float lowerDeactivationSpeedForwards_ms = 885;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(885, this->_internal_lowerdeactivationspeedforwards_ms(), target);
  }

  // optional bool protectBody_nu = 964;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(964, this->_internal_protectbody_nu(), target);
  }

  // optional bool enableBrakeLow_nu = 1003;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1003, this->_internal_enablebrakelow_nu(), target);
  }

  // optional bool protectMirror_nu = 1005;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1005, this->_internal_protectmirror_nu(), target);
  }

  // optional uint32 minClassConfidence_perc = 1041;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1041, this->_internal_minclassconfidence_perc(), target);
  }

  // optional uint32 protectedMirrorShapeRightActualSize_nu = 1049;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1049, this->_internal_protectedmirrorshaperightactualsize_nu(), target);
  }

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeLeft = 1271;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protectedmirrorshapeleft_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1271, this->_internal_protectedmirrorshapeleft(i), target, stream);
  }

  // optional uint32 minHeightConfidence_perc = 1297;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1297, this->_internal_minheightconfidence_perc(), target);
  }

  // optional float enlargementRear_m = 1339;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1339, this->_internal_enlargementrear_m(), target);
  }

  // optional float rimProtectionSpeed_mps = 1451;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1451, this->_internal_rimprotectionspeed_mps(), target);
  }

  // optional .pb.mf_lsca.brake_set_t.brakeSet_t brakeModel = 1669;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1669, _Internal::brakemodel(this), target, stream);
  }

  // optional bool checkDriverSeatbelt_nu = 1677;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1677, this->_internal_checkdriverseatbelt_nu(), target);
  }

  // optional uint32 bodyAdjustmentActualSize_nu = 1782;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1782, this->_internal_bodyadjustmentactualsize_nu(), target);
  }

  // optional float upperDeactivationSpeedForwards_ms = 1789;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1789, this->_internal_upperdeactivationspeedforwards_ms(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool autoContinue_nu = 1844;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1844, this->_internal_autocontinue_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float lowerActivationSpeedForwards_ms = 1858;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1858, this->_internal_loweractivationspeedforwards_ms(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool protectHitch_nu = 1866;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1866, this->_internal_protecthitch_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool checkTrunk_nu = 1989;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1989, this->_internal_checktrunk_nu(), target);
  }

  // optional bool drivingTubeEnabled_nu = 2003;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2003, this->_internal_drivingtubeenabled_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 protectedMirrorShapeLeftActualSize_nu = 2581;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2581, this->_internal_protectedmirrorshapeleftactualsize_nu(), target);
  }

  // optional float lowerActivationSpeedBackwards_ms = 2600;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2600, this->_internal_loweractivationspeedbackwards_ms(), target);
  }

  // optional float upperActivationSpeedBackwards_ms = 2668;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2668, this->_internal_upperactivationspeedbackwards_ms(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool checkDoors_nu = 2707;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2707, this->_internal_checkdoors_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool checkPedalOverrideGas_nu = 2733;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2733, this->_internal_checkpedaloverridegas_nu(), target);
  }

  // optional bool comfortInManual_nu = 2766;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2766, this->_internal_comfortinmanual_nu(), target);
  }

  // optional bool warnHigh_nu = 2879;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2879, this->_internal_warnhigh_nu(), target);
  }

  // optional uint32 minTriggerCountStaticBrake_nu = 2944;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2944, this->_internal_mintriggercountstaticbrake_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool enableBrakeHigh_nu = 2983;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2983, this->_internal_enablebrakehigh_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool checkDriverSeatOccupied_nu = 3025;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3025, this->_internal_checkdriverseatoccupied_nu(), target);
  }

  // optional bool checkPedalOverrideBrake_nu = 3222;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3222, this->_internal_checkpedaloverridebrake_nu(), target);
  }

  // optional uint32 minStaticObjectProbability_perc = 3245;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3245, this->_internal_minstaticobjectprobability_perc(), target);
  }

  // optional float standStillTime_s = 3330;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3330, this->_internal_standstilltime_s(), target);
  }

  // optional float ignoreTrailerX_m = 3508;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3508, this->_internal_ignoretrailerx_m(), target);
  }

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeRight = 3569;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_protectedmirrorshaperight_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3569, this->_internal_protectedmirrorshaperight(i), target, stream);
  }

  // optional float enlargementFront_m = 3610;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3610, this->_internal_enlargementfront_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float upperActivationSpeedForwards_ms = 3994;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3994, this->_internal_upperactivationspeedforwards_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.config_brake_t.configBrake_t)
  return target;
}

size_t configBrake_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.config_brake_t.configBrake_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD bodyAdjustment = 675;
  total_size += 2UL * this->_internal_bodyadjustment_size();
  for (const auto& msg : this->bodyadjustment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeLeft = 1271;
  total_size += 2UL * this->_internal_protectedmirrorshapeleft_size();
  for (const auto& msg : this->protectedmirrorshapeleft_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeRight = 3569;
  total_size += 3UL * this->_internal_protectedmirrorshaperight_size();
  for (const auto& msg : this->protectedmirrorshaperight_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.mf_lsca.brake_set_t.brakeSet_t brakeModel = 1669;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brakemodel_);
    }

    // optional float upperActivationSpeedForwards_ms = 3994;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float warnTime_s = 170;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float upperDeactivationSpeedBackwards_ms = 227;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float enlargementSide_m = 262;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float rimProtectionAngle_deg = 357;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float maximumOverrideDistance_m = 611;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float marginDelay_s = 663;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool protectBody_nu = 964;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool protectWheel_nu = 781;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool protectRim_nu = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool protectMirror_nu = 1005;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional float lowerDeactivationSpeedBackwards_ms = 827;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float autoContinueOverrideDistance_m = 840;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float lowerDeactivationSpeedForwards_ms = 885;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional uint32 minClassConfidence_perc = 1041;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minclassconfidence_perc());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 protectedMirrorShapeRightActualSize_nu = 1049;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protectedmirrorshaperightactualsize_nu());
    }

    // optional uint32 minHeightConfidence_perc = 1297;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minheightconfidence_perc());
    }

    // optional float enlargementRear_m = 1339;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float rimProtectionSpeed_mps = 1451;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional bool warnLow_nu = 536;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool enableBrakeLow_nu = 1003;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool enableBrakeHigh_nu = 2983;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool drivingTubeEnabled_nu = 2003;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool checkDoors_nu = 2707;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool checkDriverSeatbelt_nu = 1677;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool checkTrunk_nu = 1989;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool forwardBrakeEnabledIfTrunkOpen_nu = 312;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 bodyAdjustmentActualSize_nu = 1782;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodyadjustmentactualsize_nu());
    }

    // optional float upperDeactivationSpeedForwards_ms = 1789;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float lowerActivationSpeedForwards_ms = 1858;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional bool checkHood_nu = 360;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool checkPedalOverrideGas_nu = 2733;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional bool checkPedalOverrideBrake_nu = 3222;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool checkDriverSeatOccupied_nu = 3025;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional bool protectHitch_nu = 1866;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool comfortInManual_nu = 2766;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool autoContinue_nu = 1844;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool warnHigh_nu = 2879;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional uint32 protectedMirrorShapeLeftActualSize_nu = 2581;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protectedmirrorshapeleftactualsize_nu());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float lowerActivationSpeedBackwards_ms = 2600;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float upperActivationSpeedBackwards_ms = 2668;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional uint32 minTriggerCountStaticBrake_nu = 2944;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mintriggercountstaticbrake_nu());
    }

    // optional uint32 minStaticObjectProbability_perc = 3245;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minstaticobjectprobability_perc());
    }

    // optional float standStillTime_s = 3330;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float ignoreTrailerX_m = 3508;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float enlargementFront_m = 3610;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configBrake_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.config_brake_t.configBrake_t)
  GOOGLE_DCHECK_NE(&from, this);
  const configBrake_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configBrake_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.config_brake_t.configBrake_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.config_brake_t.configBrake_t)
    MergeFrom(*source);
  }
}

void configBrake_t::MergeFrom(const configBrake_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.config_brake_t.configBrake_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodyadjustment_.MergeFrom(from.bodyadjustment_);
  protectedmirrorshapeleft_.MergeFrom(from.protectedmirrorshapeleft_);
  protectedmirrorshaperight_.MergeFrom(from.protectedmirrorshaperight_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_brakemodel()->::pb::mf_lsca::brake_set_t::brakeSet_t::MergeFrom(from._internal_brakemodel());
    }
    if (cached_has_bits & 0x00000002u) {
      upperactivationspeedforwards_ms_ = from.upperactivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      warntime_s_ = from.warntime_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      upperdeactivationspeedbackwards_ms_ = from.upperdeactivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      enlargementside_m_ = from.enlargementside_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      rimprotectionangle_deg_ = from.rimprotectionangle_deg_;
    }
    if (cached_has_bits & 0x00000040u) {
      maximumoverridedistance_m_ = from.maximumoverridedistance_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      margindelay_s_ = from.margindelay_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      protectbody_nu_ = from.protectbody_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      protectwheel_nu_ = from.protectwheel_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      protectrim_nu_ = from.protectrim_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      protectmirror_nu_ = from.protectmirror_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      lowerdeactivationspeedbackwards_ms_ = from.lowerdeactivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      autocontinueoverridedistance_m_ = from.autocontinueoverridedistance_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      lowerdeactivationspeedforwards_ms_ = from.lowerdeactivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      minclassconfidence_perc_ = from.minclassconfidence_perc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      protectedmirrorshaperightactualsize_nu_ = from.protectedmirrorshaperightactualsize_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      minheightconfidence_perc_ = from.minheightconfidence_perc_;
    }
    if (cached_has_bits & 0x00040000u) {
      enlargementrear_m_ = from.enlargementrear_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      rimprotectionspeed_mps_ = from.rimprotectionspeed_mps_;
    }
    if (cached_has_bits & 0x00100000u) {
      warnlow_nu_ = from.warnlow_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      enablebrakelow_nu_ = from.enablebrakelow_nu_;
    }
    if (cached_has_bits & 0x00400000u) {
      enablebrakehigh_nu_ = from.enablebrakehigh_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      drivingtubeenabled_nu_ = from.drivingtubeenabled_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      checkdoors_nu_ = from.checkdoors_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      checkdriverseatbelt_nu_ = from.checkdriverseatbelt_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      checktrunk_nu_ = from.checktrunk_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      forwardbrakeenablediftrunkopen_nu_ = from.forwardbrakeenablediftrunkopen_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      bodyadjustmentactualsize_nu_ = from.bodyadjustmentactualsize_nu_;
    }
    if (cached_has_bits & 0x20000000u) {
      upperdeactivationspeedforwards_ms_ = from.upperdeactivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x40000000u) {
      loweractivationspeedforwards_ms_ = from.loweractivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x80000000u) {
      checkhood_nu_ = from.checkhood_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      checkpedaloverridegas_nu_ = from.checkpedaloverridegas_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      checkpedaloverridebrake_nu_ = from.checkpedaloverridebrake_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      checkdriverseatoccupied_nu_ = from.checkdriverseatoccupied_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      protecthitch_nu_ = from.protecthitch_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      comfortinmanual_nu_ = from.comfortinmanual_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      autocontinue_nu_ = from.autocontinue_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      warnhigh_nu_ = from.warnhigh_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      protectedmirrorshapeleftactualsize_nu_ = from.protectedmirrorshapeleftactualsize_nu_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      loweractivationspeedbackwards_ms_ = from.loweractivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      upperactivationspeedbackwards_ms_ = from.upperactivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      mintriggercountstaticbrake_nu_ = from.mintriggercountstaticbrake_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      minstaticobjectprobability_perc_ = from.minstaticobjectprobability_perc_;
    }
    if (cached_has_bits & 0x00001000u) {
      standstilltime_s_ = from.standstilltime_s_;
    }
    if (cached_has_bits & 0x00002000u) {
      ignoretrailerx_m_ = from.ignoretrailerx_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      enlargementfront_m_ = from.enlargementfront_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void configBrake_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.config_brake_t.configBrake_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configBrake_t::CopyFrom(const configBrake_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.config_brake_t.configBrake_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configBrake_t::IsInitialized() const {
  return true;
}

void configBrake_t::InternalSwap(configBrake_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  bodyadjustment_.InternalSwap(&other->bodyadjustment_);
  protectedmirrorshapeleft_.InternalSwap(&other->protectedmirrorshapeleft_);
  protectedmirrorshaperight_.InternalSwap(&other->protectedmirrorshaperight_);
  swap(brakemodel_, other->brakemodel_);
  swap(upperactivationspeedforwards_ms_, other->upperactivationspeedforwards_ms_);
  swap(warntime_s_, other->warntime_s_);
  swap(upperdeactivationspeedbackwards_ms_, other->upperdeactivationspeedbackwards_ms_);
  swap(enlargementside_m_, other->enlargementside_m_);
  swap(rimprotectionangle_deg_, other->rimprotectionangle_deg_);
  swap(maximumoverridedistance_m_, other->maximumoverridedistance_m_);
  swap(margindelay_s_, other->margindelay_s_);
  swap(protectbody_nu_, other->protectbody_nu_);
  swap(protectwheel_nu_, other->protectwheel_nu_);
  swap(protectrim_nu_, other->protectrim_nu_);
  swap(protectmirror_nu_, other->protectmirror_nu_);
  swap(lowerdeactivationspeedbackwards_ms_, other->lowerdeactivationspeedbackwards_ms_);
  swap(autocontinueoverridedistance_m_, other->autocontinueoverridedistance_m_);
  swap(lowerdeactivationspeedforwards_ms_, other->lowerdeactivationspeedforwards_ms_);
  swap(minclassconfidence_perc_, other->minclassconfidence_perc_);
  swap(protectedmirrorshaperightactualsize_nu_, other->protectedmirrorshaperightactualsize_nu_);
  swap(minheightconfidence_perc_, other->minheightconfidence_perc_);
  swap(enlargementrear_m_, other->enlargementrear_m_);
  swap(rimprotectionspeed_mps_, other->rimprotectionspeed_mps_);
  swap(warnlow_nu_, other->warnlow_nu_);
  swap(enablebrakelow_nu_, other->enablebrakelow_nu_);
  swap(enablebrakehigh_nu_, other->enablebrakehigh_nu_);
  swap(drivingtubeenabled_nu_, other->drivingtubeenabled_nu_);
  swap(checkdoors_nu_, other->checkdoors_nu_);
  swap(checkdriverseatbelt_nu_, other->checkdriverseatbelt_nu_);
  swap(checktrunk_nu_, other->checktrunk_nu_);
  swap(forwardbrakeenablediftrunkopen_nu_, other->forwardbrakeenablediftrunkopen_nu_);
  swap(bodyadjustmentactualsize_nu_, other->bodyadjustmentactualsize_nu_);
  swap(upperdeactivationspeedforwards_ms_, other->upperdeactivationspeedforwards_ms_);
  swap(loweractivationspeedforwards_ms_, other->loweractivationspeedforwards_ms_);
  swap(checkhood_nu_, other->checkhood_nu_);
  swap(checkpedaloverridegas_nu_, other->checkpedaloverridegas_nu_);
  swap(checkpedaloverridebrake_nu_, other->checkpedaloverridebrake_nu_);
  swap(checkdriverseatoccupied_nu_, other->checkdriverseatoccupied_nu_);
  swap(protecthitch_nu_, other->protecthitch_nu_);
  swap(comfortinmanual_nu_, other->comfortinmanual_nu_);
  swap(autocontinue_nu_, other->autocontinue_nu_);
  swap(warnhigh_nu_, other->warnhigh_nu_);
  swap(protectedmirrorshapeleftactualsize_nu_, other->protectedmirrorshapeleftactualsize_nu_);
  swap(loweractivationspeedbackwards_ms_, other->loweractivationspeedbackwards_ms_);
  swap(upperactivationspeedbackwards_ms_, other->upperactivationspeedbackwards_ms_);
  swap(mintriggercountstaticbrake_nu_, other->mintriggercountstaticbrake_nu_);
  swap(minstaticobjectprobability_perc_, other->minstaticobjectprobability_perc_);
  swap(standstilltime_s_, other->standstilltime_s_);
  swap(ignoretrailerx_m_, other->ignoretrailerx_m_);
  swap(enlargementfront_m_, other->enlargementfront_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata configBrake_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void configBrake_t_array_port::InitAsDefaultInstance() {
}
class configBrake_t_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<configBrake_t_array_port>()._has_bits_);
};

configBrake_t_array_port::configBrake_t_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
}
configBrake_t_array_port::configBrake_t_array_port(const configBrake_t_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
}

void configBrake_t_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configBrake_t_array_port_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base);
}

configBrake_t_array_port::~configBrake_t_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  SharedDtor();
}

void configBrake_t_array_port::SharedDtor() {
}

void configBrake_t_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configBrake_t_array_port& configBrake_t_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configBrake_t_array_port_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base);
  return *internal_default_instance();
}


void configBrake_t_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* configBrake_t_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_lsca.config_brake_t.configBrake_t data = 3940;
      case 3940:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configBrake_t_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.config_brake_t.configBrake_t data = 3940;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3940, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  return target;
}

size_t configBrake_t_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.config_brake_t.configBrake_t data = 3940;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configBrake_t_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const configBrake_t_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configBrake_t_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
    MergeFrom(*source);
  }
}

void configBrake_t_array_port::MergeFrom(const configBrake_t_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void configBrake_t_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configBrake_t_array_port::CopyFrom(const configBrake_t_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configBrake_t_array_port::IsInitialized() const {
  return true;
}

void configBrake_t_array_port::InternalSwap(configBrake_t_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata configBrake_t_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config_brake_t
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::config_brake_t::configBrake_t* Arena::CreateMaybeMessage< ::pb::mf_lsca::config_brake_t::configBrake_t >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::config_brake_t::configBrake_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::config_brake_t::configBrake_t_array_port* Arena::CreateMaybeMessage< ::pb::mf_lsca::config_brake_t::configBrake_t_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::config_brake_t::configBrake_t_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
