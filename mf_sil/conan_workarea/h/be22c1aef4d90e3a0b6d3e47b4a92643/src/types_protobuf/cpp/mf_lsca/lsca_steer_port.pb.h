// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/lsca_steer_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2flsca_5fsteer_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2flsca_5fsteer_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "mf_lsca/lsca_steer_mode.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2flsca_5fsteer_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5flsca_2flsca_5fsteer_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2flsca_5fsteer_5fport_2eproto;
namespace pb {
namespace mf_lsca {
namespace lsca_steer_port {
class LscaSteerPort;
class LscaSteerPortDefaultTypeInternal;
extern LscaSteerPortDefaultTypeInternal _LscaSteerPort_default_instance_;
class LscaSteerPort_array_port;
class LscaSteerPort_array_portDefaultTypeInternal;
extern LscaSteerPort_array_portDefaultTypeInternal _LscaSteerPort_array_port_default_instance_;
}  // namespace lsca_steer_port
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_lsca::lsca_steer_port::LscaSteerPort* Arena::CreateMaybeMessage<::pb::mf_lsca::lsca_steer_port::LscaSteerPort>(Arena*);
template<> ::pb::mf_lsca::lsca_steer_port::LscaSteerPort_array_port* Arena::CreateMaybeMessage<::pb::mf_lsca::lsca_steer_port::LscaSteerPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_lsca {
namespace lsca_steer_port {

// ===================================================================

class LscaSteerPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.lsca_steer_port.LscaSteerPort) */ {
 public:
  LscaSteerPort();
  virtual ~LscaSteerPort();

  LscaSteerPort(const LscaSteerPort& from);
  LscaSteerPort(LscaSteerPort&& from) noexcept
    : LscaSteerPort() {
    *this = ::std::move(from);
  }

  inline LscaSteerPort& operator=(const LscaSteerPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline LscaSteerPort& operator=(LscaSteerPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LscaSteerPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LscaSteerPort* internal_default_instance() {
    return reinterpret_cast<const LscaSteerPort*>(
               &_LscaSteerPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LscaSteerPort& a, LscaSteerPort& b) {
    a.Swap(&b);
  }
  inline void Swap(LscaSteerPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LscaSteerPort* New() const final {
    return CreateMaybeMessage<LscaSteerPort>(nullptr);
  }

  LscaSteerPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LscaSteerPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LscaSteerPort& from);
  void MergeFrom(const LscaSteerPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LscaSteerPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.lsca_steer_port.LscaSteerPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2flsca_5fsteer_5fport_2eproto);
    return ::descriptor_table_mf_5flsca_2flsca_5fsteer_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kRequestModeFieldNumber = 3392987,
    kRequestTorqueNmFieldNumber = 566,
    kUiVersionNumberFieldNumber = 2124,
    kRequestAngleFrontRadFieldNumber = 3034,
    kRequestAngleRearRadFieldNumber = 3935,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.mf_lsca.lsca_steer_mode.LSCA_STEER_MODE requestMode = 3392987;
  bool has_requestmode() const;
  private:
  bool _internal_has_requestmode() const;
  public:
  void clear_requestmode();
  ::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE requestmode() const;
  void set_requestmode(::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE value);
  private:
  ::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE _internal_requestmode() const;
  void _internal_set_requestmode(::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE value);
  public:

  // optional float requestTorque_Nm = 566;
  bool has_requesttorque_nm() const;
  private:
  bool _internal_has_requesttorque_nm() const;
  public:
  void clear_requesttorque_nm();
  float requesttorque_nm() const;
  void set_requesttorque_nm(float value);
  private:
  float _internal_requesttorque_nm() const;
  void _internal_set_requesttorque_nm(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float requestAngleFront_rad = 3034;
  bool has_requestanglefront_rad() const;
  private:
  bool _internal_has_requestanglefront_rad() const;
  public:
  void clear_requestanglefront_rad();
  float requestanglefront_rad() const;
  void set_requestanglefront_rad(float value);
  private:
  float _internal_requestanglefront_rad() const;
  void _internal_set_requestanglefront_rad(float value);
  public:

  // optional float requestAngleRear_rad = 3935;
  bool has_requestanglerear_rad() const;
  private:
  bool _internal_has_requestanglerear_rad() const;
  public:
  void clear_requestanglerear_rad();
  float requestanglerear_rad() const;
  void set_requestanglerear_rad(float value);
  private:
  float _internal_requestanglerear_rad() const;
  void _internal_set_requestanglerear_rad(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.lsca_steer_port.LscaSteerPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  int requestmode_;
  float requesttorque_nm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float requestanglefront_rad_;
  float requestanglerear_rad_;
  friend struct ::TableStruct_mf_5flsca_2flsca_5fsteer_5fport_2eproto;
};
// -------------------------------------------------------------------

class LscaSteerPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port) */ {
 public:
  LscaSteerPort_array_port();
  virtual ~LscaSteerPort_array_port();

  LscaSteerPort_array_port(const LscaSteerPort_array_port& from);
  LscaSteerPort_array_port(LscaSteerPort_array_port&& from) noexcept
    : LscaSteerPort_array_port() {
    *this = ::std::move(from);
  }

  inline LscaSteerPort_array_port& operator=(const LscaSteerPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline LscaSteerPort_array_port& operator=(LscaSteerPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LscaSteerPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LscaSteerPort_array_port* internal_default_instance() {
    return reinterpret_cast<const LscaSteerPort_array_port*>(
               &_LscaSteerPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LscaSteerPort_array_port& a, LscaSteerPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(LscaSteerPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LscaSteerPort_array_port* New() const final {
    return CreateMaybeMessage<LscaSteerPort_array_port>(nullptr);
  }

  LscaSteerPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LscaSteerPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LscaSteerPort_array_port& from);
  void MergeFrom(const LscaSteerPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LscaSteerPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2flsca_5fsteer_5fport_2eproto);
    return ::descriptor_table_mf_5flsca_2flsca_5fsteer_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 275,
  };
  // repeated .pb.mf_lsca.lsca_steer_port.LscaSteerPort data = 275;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_lsca::lsca_steer_port::LscaSteerPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_steer_port::LscaSteerPort >*
      mutable_data();
  private:
  const ::pb::mf_lsca::lsca_steer_port::LscaSteerPort& _internal_data(int index) const;
  ::pb::mf_lsca::lsca_steer_port::LscaSteerPort* _internal_add_data();
  public:
  const ::pb::mf_lsca::lsca_steer_port::LscaSteerPort& data(int index) const;
  ::pb::mf_lsca::lsca_steer_port::LscaSteerPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_steer_port::LscaSteerPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_steer_port::LscaSteerPort > data_;
  friend struct ::TableStruct_mf_5flsca_2flsca_5fsteer_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LscaSteerPort

// optional uint32 uiVersionNumber = 2124;
inline bool LscaSteerPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LscaSteerPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void LscaSteerPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LscaSteerPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LscaSteerPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_steer_port.LscaSteerPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void LscaSteerPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uiversionnumber_ = value;
}
inline void LscaSteerPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_steer_port.LscaSteerPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool LscaSteerPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool LscaSteerPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& LscaSteerPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& LscaSteerPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_steer_port.LscaSteerPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* LscaSteerPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_lsca.lsca_steer_port.LscaSteerPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* LscaSteerPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* LscaSteerPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.lsca_steer_port.LscaSteerPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void LscaSteerPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_lsca.lsca_steer_port.LscaSteerPort.sSigHeader)
}

// optional float requestTorque_Nm = 566;
inline bool LscaSteerPort::_internal_has_requesttorque_nm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LscaSteerPort::has_requesttorque_nm() const {
  return _internal_has_requesttorque_nm();
}
inline void LscaSteerPort::clear_requesttorque_nm() {
  requesttorque_nm_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LscaSteerPort::_internal_requesttorque_nm() const {
  return requesttorque_nm_;
}
inline float LscaSteerPort::requesttorque_nm() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestTorque_Nm)
  return _internal_requesttorque_nm();
}
inline void LscaSteerPort::_internal_set_requesttorque_nm(float value) {
  _has_bits_[0] |= 0x00000004u;
  requesttorque_nm_ = value;
}
inline void LscaSteerPort::set_requesttorque_nm(float value) {
  _internal_set_requesttorque_nm(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestTorque_Nm)
}

// optional float requestAngleFront_rad = 3034;
inline bool LscaSteerPort::_internal_has_requestanglefront_rad() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LscaSteerPort::has_requestanglefront_rad() const {
  return _internal_has_requestanglefront_rad();
}
inline void LscaSteerPort::clear_requestanglefront_rad() {
  requestanglefront_rad_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float LscaSteerPort::_internal_requestanglefront_rad() const {
  return requestanglefront_rad_;
}
inline float LscaSteerPort::requestanglefront_rad() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestAngleFront_rad)
  return _internal_requestanglefront_rad();
}
inline void LscaSteerPort::_internal_set_requestanglefront_rad(float value) {
  _has_bits_[0] |= 0x00000010u;
  requestanglefront_rad_ = value;
}
inline void LscaSteerPort::set_requestanglefront_rad(float value) {
  _internal_set_requestanglefront_rad(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestAngleFront_rad)
}

// optional float requestAngleRear_rad = 3935;
inline bool LscaSteerPort::_internal_has_requestanglerear_rad() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LscaSteerPort::has_requestanglerear_rad() const {
  return _internal_has_requestanglerear_rad();
}
inline void LscaSteerPort::clear_requestanglerear_rad() {
  requestanglerear_rad_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float LscaSteerPort::_internal_requestanglerear_rad() const {
  return requestanglerear_rad_;
}
inline float LscaSteerPort::requestanglerear_rad() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestAngleRear_rad)
  return _internal_requestanglerear_rad();
}
inline void LscaSteerPort::_internal_set_requestanglerear_rad(float value) {
  _has_bits_[0] |= 0x00000020u;
  requestanglerear_rad_ = value;
}
inline void LscaSteerPort::set_requestanglerear_rad(float value) {
  _internal_set_requestanglerear_rad(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestAngleRear_rad)
}

// optional .pb.mf_lsca.lsca_steer_mode.LSCA_STEER_MODE requestMode = 3392987;
inline bool LscaSteerPort::_internal_has_requestmode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LscaSteerPort::has_requestmode() const {
  return _internal_has_requestmode();
}
inline void LscaSteerPort::clear_requestmode() {
  requestmode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE LscaSteerPort::_internal_requestmode() const {
  return static_cast< ::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE >(requestmode_);
}
inline ::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE LscaSteerPort::requestmode() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestMode)
  return _internal_requestmode();
}
inline void LscaSteerPort::_internal_set_requestmode(::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE value) {
  assert(::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  requestmode_ = value;
}
inline void LscaSteerPort::set_requestmode(::pb::mf_lsca::lsca_steer_mode::LSCA_STEER_MODE value) {
  _internal_set_requestmode(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_steer_port.LscaSteerPort.requestMode)
}

// -------------------------------------------------------------------

// LscaSteerPort_array_port

// repeated .pb.mf_lsca.lsca_steer_port.LscaSteerPort data = 275;
inline int LscaSteerPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int LscaSteerPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void LscaSteerPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_lsca::lsca_steer_port::LscaSteerPort* LscaSteerPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_steer_port::LscaSteerPort >*
LscaSteerPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port.data)
  return &data_;
}
inline const ::pb::mf_lsca::lsca_steer_port::LscaSteerPort& LscaSteerPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_lsca::lsca_steer_port::LscaSteerPort& LscaSteerPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_lsca::lsca_steer_port::LscaSteerPort* LscaSteerPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_lsca::lsca_steer_port::LscaSteerPort* LscaSteerPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_steer_port::LscaSteerPort >&
LscaSteerPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_lsca.lsca_steer_port.LscaSteerPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lsca_steer_port
}  // namespace mf_lsca
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2flsca_5fsteer_5fport_2eproto
