// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/config_steer_t.proto

#include "mf_lsca/config_steer_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cml_2fvec2_5fdf_5fpod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2Df_POD_cml_2fvec2_5fdf_5fpod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fsteer_5fpropose_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configSteerPropose_t_mf_5flsca_2fconfig_5fsteer_5fpropose_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fsteer_5fresist_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configSteerResist_t_mf_5flsca_2fconfig_5fsteer_5fresist_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fsteer_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto;
namespace pb {
namespace mf_lsca {
namespace config_steer_t {
class configSteer_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configSteer_t> _instance;
} _configSteer_t_default_instance_;
class configSteer_t_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configSteer_t_array_port> _instance;
} _configSteer_t_array_port_default_instance_;
}  // namespace config_steer_t
}  // namespace mf_lsca
}  // namespace pb
static void InitDefaultsscc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_;
    new (ptr) ::pb::mf_lsca::config_steer_t::configSteer_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::config_steer_t::configSteer_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto}, {
      &scc_info_configSteerPropose_t_mf_5flsca_2fconfig_5fsteer_5fpropose_5ft_2eproto.base,
      &scc_info_Vec2Df_POD_cml_2fvec2_5fdf_5fpod_2eproto.base,
      &scc_info_configSteerResist_t_mf_5flsca_2fconfig_5fsteer_5fresist_5ft_2eproto.base,}};

static void InitDefaultsscc_info_configSteer_t_array_port_mf_5flsca_2fconfig_5fsteer_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::config_steer_t::_configSteer_t_array_port_default_instance_;
    new (ptr) ::pb::mf_lsca::config_steer_t::configSteer_t_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::config_steer_t::configSteer_t_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_configSteer_t_array_port_mf_5flsca_2fconfig_5fsteer_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_configSteer_t_array_port_mf_5flsca_2fconfig_5fsteer_5ft_2eproto}, {
      &scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5flsca_2fconfig_5fsteer_5ft_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5flsca_2fconfig_5fsteer_5ft_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5flsca_2fconfig_5fsteer_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5flsca_2fconfig_5fsteer_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, proposaldata_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, maxsteeringanglelimits_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, maxsteeringangledelta_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, maxsteeringtorquelimits_nm_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, maxsteeringtorquedelta_nms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, resistancedata_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roilengthoffset_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roilength_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roiwidthoffset_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roiwidth_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roitravelleddistoffsetprop_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roitravelleddistoffsetresist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roitravelleddistprop_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, roitravelleddistresist_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, enlargementfront_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, enlargementrear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, enlargementside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, immediateoverridetorque_nm_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, timebasedoverridetorque_nm_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, overridetime_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, overridedistance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, loweractivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, upperactivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, lowerdeactivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, upperdeactivationspeedforwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, loweractivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, upperactivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, lowerdeactivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, upperdeactivationspeedbackwards_ms_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, rearsteerangleratio_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, minstaticobjectprobability_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, mindynamicobjectprobability_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, stopinterventioniferror_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, checkdoors_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, checkdriverseatbelt_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, checktrunk_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, checkseat_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t, torqueinterfaceactive_nu_),
  4,
  0,
  5,
  1,
  3,
  2,
  31,
  20,
  34,
  10,
  30,
  8,
  19,
  13,
  35,
  14,
  7,
  15,
  33,
  9,
  37,
  17,
  36,
  12,
  16,
  28,
  29,
  11,
  6,
  18,
  32,
  21,
  24,
  25,
  26,
  27,
  22,
  23,
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::config_steer_t::configSteer_t_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 43, sizeof(::pb::mf_lsca::config_steer_t::configSteer_t)},
  { 81, 87, sizeof(::pb::mf_lsca::config_steer_t::configSteer_t_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::config_steer_t::_configSteer_t_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5flsca_2fconfig_5fsteer_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034mf_lsca/config_steer_t.proto\022\031pb.mf_ls"
  "ca.config_steer_t\032$mf_lsca/config_steer_"
  "propose_t.proto\032\025cml/vec2_df_pod.proto\032#"
  "mf_lsca/config_steer_resist_t.proto\"\216\014\n\r"
  "configSteer_t\022N\n\014proposalData\030\326\034 \001(\01327.p"
  "b.mf_lsca.config_steer_propose_t.configS"
  "teerPropose_t\022C\n\032maxSteeringAngleLimits_"
  "deg\030\320\002 \001(\0132\036.pb.cml.vec2_df_pod.Vec2Df_P"
  "OD\022B\n\031maxSteeringAngleDelta_deg\030\223\037 \001(\0132\036"
  ".pb.cml.vec2_df_pod.Vec2Df_POD\022C\n\032maxSte"
  "eringTorqueLimits_Nm\030\236\016 \001(\0132\036.pb.cml.vec"
  "2_df_pod.Vec2Df_POD\022C\n\032maxSteeringTorque"
  "Delta_Nms\030\230\021 \001(\0132\036.pb.cml.vec2_df_pod.Ve"
  "c2Df_POD\022N\n\016resistanceData\030\224\017 \001(\01325.pb.m"
  "f_lsca.config_steer_resist_t.configSteer"
  "Resist_t\022\032\n\021roiLengthOffset_m\030\347\030 \001(\002\022\024\n\013"
  "roiLength_s\030\274\021 \001(\002\022\031\n\020roiWidthOffset_m\030\226"
  "\033 \001(\002\022\023\n\nroiWidth_s\030\303\005 \001(\002\022%\n\034roiTravell"
  "edDistOffsetProp_m\030\366\025 \001(\002\022\'\n\036roiTravelle"
  "dDistOffsetResist_m\030\227\005 \001(\002\022\037\n\026roiTravell"
  "edDistProp_s\030\330\017 \001(\002\022!\n\030roiTravelledDistR"
  "esist_s\030\367\t \001(\002\022\033\n\022enlargementFront_m\030\232\034 "
  "\001(\002\022\032\n\021enlargementRear_m\030\273\n \001(\002\022\032\n\021enlar"
  "gementSide_m\030\206\002 \001(\002\022#\n\032immediateOverride"
  "Torque_Nm\030\375\013 \001(\002\022#\n\032timeBasedOverrideTor"
  "que_Nm\030\260\032 \001(\002\022\027\n\016overrideTime_s\030\260\005 \001(\002\022\035"
  "\n\022overrideDistance_m\030\364\364\321\001 \001(\002\022(\n\037lowerAc"
  "tivationSpeedForwards_ms\030\302\016 \001(\002\022(\n\037upper"
  "ActivationSpeedForwards_ms\030\232\037 \001(\002\022*\n!low"
  "erDeactivationSpeedForwards_ms\030\365\006 \001(\002\022*\n"
  "!upperDeactivationSpeedForwards_ms\030\375\r \001("
  "\002\022)\n lowerActivationSpeedBackwards_ms\030\250\024"
  " \001(\002\022)\n upperActivationSpeedBackwards_ms"
  "\030\354\024 \001(\002\022+\n\"lowerDeactivationSpeedBackwar"
  "ds_ms\030\273\006 \001(\002\022+\n\"upperDeactivationSpeedBa"
  "ckwards_ms\030\343\001 \001(\002\022\034\n\023rearSteerAngleRatio"
  "\030\223\017 \001(\002\022(\n\037minStaticObjectProbability_pe"
  "rc\030\255\031 \001(\r\022)\n minDynamicObjectProbability"
  "_perc\030\210\023 \001(\r\022#\n\032stopInterventionIfError_"
  "nu\030\217\036 \001(\010\022\026\n\rcheckDoors_nu\030\223\025 \001(\010\022\037\n\026che"
  "ckDriverSeatbelt_nu\030\215\r \001(\010\022\026\n\rcheckTrunk"
  "_nu\030\305\017 \001(\010\022\025\n\014checkSeat_nu\030\261\036 \001(\010\022!\n\030tor"
  "queInterfaceActive_nu\030\334\010 \001(\010\"S\n\030configSt"
  "eer_t_array_port\0227\n\004data\030\272\035 \003(\0132(.pb.mf_"
  "lsca.config_steer_t.configSteer_t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_deps[3] = {
  &::descriptor_table_cml_2fvec2_5fdf_5fpod_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fsteer_5fpropose_5ft_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fsteer_5fresist_5ft_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_sccs[2] = {
  &scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base,
  &scc_info_configSteer_t_array_port_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_once;
static bool descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto = {
  &descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_initialized, descriptor_table_protodef_mf_5flsca_2fconfig_5fsteer_5ft_2eproto, "mf_lsca/config_steer_t.proto", 1793,
  &descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_once, descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_sccs, descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_mf_5flsca_2fconfig_5fsteer_5ft_2eproto::offsets,
  file_level_metadata_mf_5flsca_2fconfig_5fsteer_5ft_2eproto, 2, file_level_enum_descriptors_mf_5flsca_2fconfig_5fsteer_5ft_2eproto, file_level_service_descriptors_mf_5flsca_2fconfig_5fsteer_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5flsca_2fconfig_5fsteer_5ft_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto), true);
namespace pb {
namespace mf_lsca {
namespace config_steer_t {

// ===================================================================

void configSteer_t::InitAsDefaultInstance() {
  ::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_._instance.get_mutable()->proposaldata_ = const_cast< ::pb::mf_lsca::config_steer_propose_t::configSteerPropose_t*>(
      ::pb::mf_lsca::config_steer_propose_t::configSteerPropose_t::internal_default_instance());
  ::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_._instance.get_mutable()->maxsteeringanglelimits_deg_ = const_cast< ::pb::cml::vec2_df_pod::Vec2Df_POD*>(
      ::pb::cml::vec2_df_pod::Vec2Df_POD::internal_default_instance());
  ::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_._instance.get_mutable()->maxsteeringangledelta_deg_ = const_cast< ::pb::cml::vec2_df_pod::Vec2Df_POD*>(
      ::pb::cml::vec2_df_pod::Vec2Df_POD::internal_default_instance());
  ::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_._instance.get_mutable()->maxsteeringtorquelimits_nm_ = const_cast< ::pb::cml::vec2_df_pod::Vec2Df_POD*>(
      ::pb::cml::vec2_df_pod::Vec2Df_POD::internal_default_instance());
  ::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_._instance.get_mutable()->maxsteeringtorquedelta_nms_ = const_cast< ::pb::cml::vec2_df_pod::Vec2Df_POD*>(
      ::pb::cml::vec2_df_pod::Vec2Df_POD::internal_default_instance());
  ::pb::mf_lsca::config_steer_t::_configSteer_t_default_instance_._instance.get_mutable()->resistancedata_ = const_cast< ::pb::mf_lsca::config_steer_resist_t::configSteerResist_t*>(
      ::pb::mf_lsca::config_steer_resist_t::configSteerResist_t::internal_default_instance());
}
class configSteer_t::_Internal {
 public:
  using HasBits = decltype(std::declval<configSteer_t>()._has_bits_);
  static const ::pb::mf_lsca::config_steer_propose_t::configSteerPropose_t& proposaldata(const configSteer_t* msg);
  static void set_has_proposaldata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::cml::vec2_df_pod::Vec2Df_POD& maxsteeringanglelimits_deg(const configSteer_t* msg);
  static void set_has_maxsteeringanglelimits_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::cml::vec2_df_pod::Vec2Df_POD& maxsteeringangledelta_deg(const configSteer_t* msg);
  static void set_has_maxsteeringangledelta_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::cml::vec2_df_pod::Vec2Df_POD& maxsteeringtorquelimits_nm(const configSteer_t* msg);
  static void set_has_maxsteeringtorquelimits_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::cml::vec2_df_pod::Vec2Df_POD& maxsteeringtorquedelta_nms(const configSteer_t* msg);
  static void set_has_maxsteeringtorquedelta_nms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::mf_lsca::config_steer_resist_t::configSteerResist_t& resistancedata(const configSteer_t* msg);
  static void set_has_resistancedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roilengthoffset_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_roilength_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_roiwidthoffset_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_roiwidth_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_roitravelleddistoffsetprop_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_roitravelleddistoffsetresist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_roitravelleddistprop_s(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_roitravelleddistresist_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_enlargementfront_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_enlargementrear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_enlargementside_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_immediateoverridetorque_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_timebasedoverridetorque_nm(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_overridetime_s(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_overridedistance_m(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_loweractivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_upperactivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_lowerdeactivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_upperdeactivationspeedforwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_loweractivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_upperactivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_lowerdeactivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_upperdeactivationspeedbackwards_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rearsteerangleratio(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_minstaticobjectprobability_perc(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_mindynamicobjectprobability_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_stopinterventioniferror_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_checkdoors_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_checkdriverseatbelt_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_checktrunk_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_checkseat_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_torqueinterfaceactive_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::pb::mf_lsca::config_steer_propose_t::configSteerPropose_t&
configSteer_t::_Internal::proposaldata(const configSteer_t* msg) {
  return *msg->proposaldata_;
}
const ::pb::cml::vec2_df_pod::Vec2Df_POD&
configSteer_t::_Internal::maxsteeringanglelimits_deg(const configSteer_t* msg) {
  return *msg->maxsteeringanglelimits_deg_;
}
const ::pb::cml::vec2_df_pod::Vec2Df_POD&
configSteer_t::_Internal::maxsteeringangledelta_deg(const configSteer_t* msg) {
  return *msg->maxsteeringangledelta_deg_;
}
const ::pb::cml::vec2_df_pod::Vec2Df_POD&
configSteer_t::_Internal::maxsteeringtorquelimits_nm(const configSteer_t* msg) {
  return *msg->maxsteeringtorquelimits_nm_;
}
const ::pb::cml::vec2_df_pod::Vec2Df_POD&
configSteer_t::_Internal::maxsteeringtorquedelta_nms(const configSteer_t* msg) {
  return *msg->maxsteeringtorquedelta_nms_;
}
const ::pb::mf_lsca::config_steer_resist_t::configSteerResist_t&
configSteer_t::_Internal::resistancedata(const configSteer_t* msg) {
  return *msg->resistancedata_;
}
void configSteer_t::clear_proposaldata() {
  if (proposaldata_ != nullptr) proposaldata_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void configSteer_t::clear_maxsteeringanglelimits_deg() {
  if (maxsteeringanglelimits_deg_ != nullptr) maxsteeringanglelimits_deg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void configSteer_t::clear_maxsteeringangledelta_deg() {
  if (maxsteeringangledelta_deg_ != nullptr) maxsteeringangledelta_deg_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void configSteer_t::clear_maxsteeringtorquelimits_nm() {
  if (maxsteeringtorquelimits_nm_ != nullptr) maxsteeringtorquelimits_nm_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void configSteer_t::clear_maxsteeringtorquedelta_nms() {
  if (maxsteeringtorquedelta_nms_ != nullptr) maxsteeringtorquedelta_nms_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void configSteer_t::clear_resistancedata() {
  if (resistancedata_ != nullptr) resistancedata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
configSteer_t::configSteer_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.config_steer_t.configSteer_t)
}
configSteer_t::configSteer_t(const configSteer_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_maxsteeringanglelimits_deg()) {
    maxsteeringanglelimits_deg_ = new ::pb::cml::vec2_df_pod::Vec2Df_POD(*from.maxsteeringanglelimits_deg_);
  } else {
    maxsteeringanglelimits_deg_ = nullptr;
  }
  if (from._internal_has_maxsteeringtorquelimits_nm()) {
    maxsteeringtorquelimits_nm_ = new ::pb::cml::vec2_df_pod::Vec2Df_POD(*from.maxsteeringtorquelimits_nm_);
  } else {
    maxsteeringtorquelimits_nm_ = nullptr;
  }
  if (from._internal_has_resistancedata()) {
    resistancedata_ = new ::pb::mf_lsca::config_steer_resist_t::configSteerResist_t(*from.resistancedata_);
  } else {
    resistancedata_ = nullptr;
  }
  if (from._internal_has_maxsteeringtorquedelta_nms()) {
    maxsteeringtorquedelta_nms_ = new ::pb::cml::vec2_df_pod::Vec2Df_POD(*from.maxsteeringtorquedelta_nms_);
  } else {
    maxsteeringtorquedelta_nms_ = nullptr;
  }
  if (from._internal_has_proposaldata()) {
    proposaldata_ = new ::pb::mf_lsca::config_steer_propose_t::configSteerPropose_t(*from.proposaldata_);
  } else {
    proposaldata_ = nullptr;
  }
  if (from._internal_has_maxsteeringangledelta_deg()) {
    maxsteeringangledelta_deg_ = new ::pb::cml::vec2_df_pod::Vec2Df_POD(*from.maxsteeringangledelta_deg_);
  } else {
    maxsteeringangledelta_deg_ = nullptr;
  }
  ::memcpy(&upperdeactivationspeedbackwards_ms_, &from.upperdeactivationspeedbackwards_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&overridedistance_m_) -
    reinterpret_cast<char*>(&upperdeactivationspeedbackwards_ms_)) + sizeof(overridedistance_m_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.config_steer_t.configSteer_t)
}

void configSteer_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base);
  ::memset(&maxsteeringanglelimits_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overridedistance_m_) -
      reinterpret_cast<char*>(&maxsteeringanglelimits_deg_)) + sizeof(overridedistance_m_));
}

configSteer_t::~configSteer_t() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.config_steer_t.configSteer_t)
  SharedDtor();
}

void configSteer_t::SharedDtor() {
  if (this != internal_default_instance()) delete maxsteeringanglelimits_deg_;
  if (this != internal_default_instance()) delete maxsteeringtorquelimits_nm_;
  if (this != internal_default_instance()) delete resistancedata_;
  if (this != internal_default_instance()) delete maxsteeringtorquedelta_nms_;
  if (this != internal_default_instance()) delete proposaldata_;
  if (this != internal_default_instance()) delete maxsteeringangledelta_deg_;
}

void configSteer_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configSteer_t& configSteer_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base);
  return *internal_default_instance();
}


void configSteer_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.config_steer_t.configSteer_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(maxsteeringanglelimits_deg_ != nullptr);
      maxsteeringanglelimits_deg_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(maxsteeringtorquelimits_nm_ != nullptr);
      maxsteeringtorquelimits_nm_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resistancedata_ != nullptr);
      resistancedata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(maxsteeringtorquedelta_nms_ != nullptr);
      maxsteeringtorquedelta_nms_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(proposaldata_ != nullptr);
      proposaldata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(maxsteeringangledelta_deg_ != nullptr);
      maxsteeringangledelta_deg_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&upperdeactivationspeedbackwards_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enlargementside_m_) -
        reinterpret_cast<char*>(&upperdeactivationspeedbackwards_ms_)) + sizeof(enlargementside_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&roitravelleddistoffsetresist_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&immediateoverridetorque_nm_) -
        reinterpret_cast<char*>(&roitravelleddistoffsetresist_m_)) + sizeof(immediateoverridetorque_nm_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&upperdeactivationspeedforwards_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torqueinterfaceactive_nu_) -
        reinterpret_cast<char*>(&upperdeactivationspeedforwards_ms_)) + sizeof(torqueinterfaceactive_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&stopinterventioniferror_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roilengthoffset_m_) -
        reinterpret_cast<char*>(&stopinterventioniferror_nu_)) + sizeof(roilengthoffset_m_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&minstaticobjectprobability_perc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overridedistance_m_) -
        reinterpret_cast<char*>(&minstaticobjectprobability_perc_)) + sizeof(overridedistance_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* configSteer_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float upperDeactivationSpeedBackwards_ms = 227;
      case 227:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_upperdeactivationspeedbackwards_ms(&_has_bits_);
          upperdeactivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float enlargementSide_m = 262;
      case 262:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_enlargementside_m(&_has_bits_);
          enlargementside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringAngleLimits_deg = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxsteeringanglelimits_deg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float roiTravelledDistOffsetResist_m = 663;
      case 663:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_roitravelleddistoffsetresist_m(&_has_bits_);
          roitravelleddistoffsetresist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overrideTime_s = 688;
      case 688:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_overridetime_s(&_has_bits_);
          overridetime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roiWidth_s = 707;
      case 707:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_roiwidth_s(&_has_bits_);
          roiwidth_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lowerDeactivationSpeedBackwards_ms = 827;
      case 827:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_lowerdeactivationspeedbackwards_ms(&_has_bits_);
          lowerdeactivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lowerDeactivationSpeedForwards_ms = 885;
      case 885:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_lowerdeactivationspeedforwards_ms(&_has_bits_);
          lowerdeactivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool torqueInterfaceActive_nu = 1116;
      case 1116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_torqueinterfaceactive_nu(&_has_bits_);
          torqueinterfaceactive_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float roiTravelledDistResist_s = 1271;
      case 1271:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_roitravelleddistresist_s(&_has_bits_);
          roitravelleddistresist_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float enlargementRear_m = 1339;
      case 1339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_enlargementrear_m(&_has_bits_);
          enlargementrear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float immediateOverrideTorque_Nm = 1533;
      case 1533:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_immediateoverridetorque_nm(&_has_bits_);
          immediateoverridetorque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool checkDriverSeatbelt_nu = 1677;
      case 1677:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_checkdriverseatbelt_nu(&_has_bits_);
          checkdriverseatbelt_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float upperDeactivationSpeedForwards_ms = 1789;
      case 1789:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_upperdeactivationspeedforwards_ms(&_has_bits_);
          upperdeactivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringTorqueLimits_Nm = 1822;
      case 1822:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxsteeringtorquelimits_nm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lowerActivationSpeedForwards_ms = 1858;
      case 1858:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_loweractivationspeedforwards_ms(&_has_bits_);
          loweractivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rearSteerAngleRatio = 1939;
      case 1939:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_rearsteerangleratio(&_has_bits_);
          rearsteerangleratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.config_steer_resist_t.configSteerResist_t resistanceData = 1940;
      case 1940:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_resistancedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkTrunk_nu = 1989;
      case 1989:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_checktrunk_nu(&_has_bits_);
          checktrunk_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float roiTravelledDistProp_s = 2008;
      case 2008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_roitravelleddistprop_s(&_has_bits_);
          roitravelleddistprop_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringTorqueDelta_Nms = 2200;
      case 2200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxsteeringtorquedelta_nms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float roiLength_s = 2236;
      case 2236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_roilength_s(&_has_bits_);
          roilength_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 minDynamicObjectProbability_perc = 2440;
      case 2440:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mindynamicobjectprobability_perc(&_has_bits_);
          mindynamicobjectprobability_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lowerActivationSpeedBackwards_ms = 2600;
      case 2600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_loweractivationspeedbackwards_ms(&_has_bits_);
          loweractivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float upperActivationSpeedBackwards_ms = 2668;
      case 2668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_upperactivationspeedbackwards_ms(&_has_bits_);
          upperactivationspeedbackwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool checkDoors_nu = 2707;
      case 2707:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_checkdoors_nu(&_has_bits_);
          checkdoors_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float roiTravelledDistOffsetProp_m = 2806;
      case 2806:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_roitravelleddistoffsetprop_m(&_has_bits_);
          roitravelleddistoffsetprop_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roiLengthOffset_m = 3175;
      case 3175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_roilengthoffset_m(&_has_bits_);
          roilengthoffset_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 minStaticObjectProbability_perc = 3245;
      case 3245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_minstaticobjectprobability_perc(&_has_bits_);
          minstaticobjectprobability_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float timeBasedOverrideTorque_Nm = 3376;
      case 3376:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_timebasedoverridetorque_nm(&_has_bits_);
          timebasedoverridetorque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roiWidthOffset_m = 3478;
      case 3478:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_roiwidthoffset_m(&_has_bits_);
          roiwidthoffset_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float enlargementFront_m = 3610;
      case 3610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_enlargementfront_m(&_has_bits_);
          enlargementfront_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.config_steer_propose_t.configSteerPropose_t proposalData = 3670;
      case 3670:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposaldata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stopInterventionIfError_nu = 3855;
      case 3855:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_stopinterventioniferror_nu(&_has_bits_);
          stopinterventioniferror_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool checkSeat_nu = 3889;
      case 3889:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_checkseat_nu(&_has_bits_);
          checkseat_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringAngleDelta_deg = 3987;
      case 3987:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxsteeringangledelta_deg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float upperActivationSpeedForwards_ms = 3994;
      case 3994:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_upperactivationspeedforwards_ms(&_has_bits_);
          upperactivationspeedforwards_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overrideDistance_m = 3439220;
      case 3439220:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_overridedistance_m(&_has_bits_);
          overridedistance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configSteer_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.config_steer_t.configSteer_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float upperDeactivationSpeedBackwards_ms = 227;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(227, this->_internal_upperdeactivationspeedbackwards_ms(), target);
  }

  // optional float enlargementSide_m = 262;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(262, this->_internal_enlargementside_m(), target);
  }

  // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringAngleLimits_deg = 336;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        336, _Internal::maxsteeringanglelimits_deg(this), target, stream);
  }

  // optional float roiTravelledDistOffsetResist_m = 663;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(663, this->_internal_roitravelleddistoffsetresist_m(), target);
  }

  // optional float overrideTime_s = 688;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(688, this->_internal_overridetime_s(), target);
  }

  // optional float roiWidth_s = 707;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(707, this->_internal_roiwidth_s(), target);
  }

  // optional float lowerDeactivationSpeedBackwards_ms = 827;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(827, this->_internal_lowerdeactivationspeedbackwards_ms(), target);
  }

  // optional float lowerDeactivationSpeedForwards_ms = 885;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(885, this->_internal_lowerdeactivationspeedforwards_ms(), target);
  }

  // optional bool torqueInterfaceActive_nu = 1116;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1116, this->_internal_torqueinterfaceactive_nu(), target);
  }

  // optional float roiTravelledDistResist_s = 1271;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1271, this->_internal_roitravelleddistresist_s(), target);
  }

  // optional float enlargementRear_m = 1339;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1339, this->_internal_enlargementrear_m(), target);
  }

  // optional float immediateOverrideTorque_Nm = 1533;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1533, this->_internal_immediateoverridetorque_nm(), target);
  }

  // optional bool checkDriverSeatbelt_nu = 1677;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1677, this->_internal_checkdriverseatbelt_nu(), target);
  }

  // optional float upperDeactivationSpeedForwards_ms = 1789;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1789, this->_internal_upperdeactivationspeedforwards_ms(), target);
  }

  // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringTorqueLimits_Nm = 1822;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1822, _Internal::maxsteeringtorquelimits_nm(this), target, stream);
  }

  // optional float lowerActivationSpeedForwards_ms = 1858;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1858, this->_internal_loweractivationspeedforwards_ms(), target);
  }

  // optional float rearSteerAngleRatio = 1939;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1939, this->_internal_rearsteerangleratio(), target);
  }

  // optional .pb.mf_lsca.config_steer_resist_t.configSteerResist_t resistanceData = 1940;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1940, _Internal::resistancedata(this), target, stream);
  }

  // optional bool checkTrunk_nu = 1989;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1989, this->_internal_checktrunk_nu(), target);
  }

  // optional float roiTravelledDistProp_s = 2008;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2008, this->_internal_roitravelleddistprop_s(), target);
  }

  // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringTorqueDelta_Nms = 2200;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2200, _Internal::maxsteeringtorquedelta_nms(this), target, stream);
  }

  // optional float roiLength_s = 2236;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2236, this->_internal_roilength_s(), target);
  }

  // optional uint32 minDynamicObjectProbability_perc = 2440;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2440, this->_internal_mindynamicobjectprobability_perc(), target);
  }

  // optional float lowerActivationSpeedBackwards_ms = 2600;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2600, this->_internal_loweractivationspeedbackwards_ms(), target);
  }

  // optional float upperActivationSpeedBackwards_ms = 2668;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2668, this->_internal_upperactivationspeedbackwards_ms(), target);
  }

  // optional bool checkDoors_nu = 2707;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2707, this->_internal_checkdoors_nu(), target);
  }

  // optional float roiTravelledDistOffsetProp_m = 2806;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2806, this->_internal_roitravelleddistoffsetprop_m(), target);
  }

  // optional float roiLengthOffset_m = 3175;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3175, this->_internal_roilengthoffset_m(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 minStaticObjectProbability_perc = 3245;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3245, this->_internal_minstaticobjectprobability_perc(), target);
  }

  // optional float timeBasedOverrideTorque_Nm = 3376;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3376, this->_internal_timebasedoverridetorque_nm(), target);
  }

  // optional float roiWidthOffset_m = 3478;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3478, this->_internal_roiwidthoffset_m(), target);
  }

  // optional float enlargementFront_m = 3610;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3610, this->_internal_enlargementfront_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.mf_lsca.config_steer_propose_t.configSteerPropose_t proposalData = 3670;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3670, _Internal::proposaldata(this), target, stream);
  }

  // optional bool stopInterventionIfError_nu = 3855;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3855, this->_internal_stopinterventioniferror_nu(), target);
  }

  // optional bool checkSeat_nu = 3889;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3889, this->_internal_checkseat_nu(), target);
  }

  // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringAngleDelta_deg = 3987;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3987, _Internal::maxsteeringangledelta_deg(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float upperActivationSpeedForwards_ms = 3994;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3994, this->_internal_upperactivationspeedforwards_ms(), target);
  }

  // optional float overrideDistance_m = 3439220;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3439220, this->_internal_overridedistance_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.config_steer_t.configSteer_t)
  return target;
}

size_t configSteer_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.config_steer_t.configSteer_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringAngleLimits_deg = 336;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxsteeringanglelimits_deg_);
    }

    // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringTorqueLimits_Nm = 1822;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxsteeringtorquelimits_nm_);
    }

    // optional .pb.mf_lsca.config_steer_resist_t.configSteerResist_t resistanceData = 1940;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resistancedata_);
    }

    // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringTorqueDelta_Nms = 2200;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxsteeringtorquedelta_nms_);
    }

    // optional .pb.mf_lsca.config_steer_propose_t.configSteerPropose_t proposalData = 3670;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proposaldata_);
    }

    // optional .pb.cml.vec2_df_pod.Vec2Df_POD maxSteeringAngleDelta_deg = 3987;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxsteeringangledelta_deg_);
    }

    // optional float upperDeactivationSpeedBackwards_ms = 227;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float enlargementSide_m = 262;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float roiTravelledDistOffsetResist_m = 663;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float overrideTime_s = 688;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float roiWidth_s = 707;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float lowerDeactivationSpeedBackwards_ms = 827;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float lowerDeactivationSpeedForwards_ms = 885;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float roiTravelledDistResist_s = 1271;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float enlargementRear_m = 1339;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float immediateOverrideTorque_Nm = 1533;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float upperDeactivationSpeedForwards_ms = 1789;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float lowerActivationSpeedForwards_ms = 1858;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float rearSteerAngleRatio = 1939;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float roiTravelledDistProp_s = 2008;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float roiLength_s = 2236;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional uint32 minDynamicObjectProbability_perc = 2440;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mindynamicobjectprobability_perc());
    }

    // optional bool checkSeat_nu = 3889;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool torqueInterfaceActive_nu = 1116;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool stopInterventionIfError_nu = 3855;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool checkDoors_nu = 2707;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional bool checkDriverSeatbelt_nu = 1677;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool checkTrunk_nu = 1989;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional float lowerActivationSpeedBackwards_ms = 2600;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float upperActivationSpeedBackwards_ms = 2668;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float roiTravelledDistOffsetProp_m = 2806;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float roiLengthOffset_m = 3175;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 minStaticObjectProbability_perc = 3245;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minstaticobjectprobability_perc());
    }

    // optional float timeBasedOverrideTorque_Nm = 3376;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float roiWidthOffset_m = 3478;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float enlargementFront_m = 3610;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float upperActivationSpeedForwards_ms = 3994;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float overrideDistance_m = 3439220;
    if (cached_has_bits & 0x00000020u) {
      total_size += 4 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configSteer_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.config_steer_t.configSteer_t)
  GOOGLE_DCHECK_NE(&from, this);
  const configSteer_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configSteer_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.config_steer_t.configSteer_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.config_steer_t.configSteer_t)
    MergeFrom(*source);
  }
}

void configSteer_t::MergeFrom(const configSteer_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.config_steer_t.configSteer_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_maxsteeringanglelimits_deg()->::pb::cml::vec2_df_pod::Vec2Df_POD::MergeFrom(from._internal_maxsteeringanglelimits_deg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_maxsteeringtorquelimits_nm()->::pb::cml::vec2_df_pod::Vec2Df_POD::MergeFrom(from._internal_maxsteeringtorquelimits_nm());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resistancedata()->::pb::mf_lsca::config_steer_resist_t::configSteerResist_t::MergeFrom(from._internal_resistancedata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_maxsteeringtorquedelta_nms()->::pb::cml::vec2_df_pod::Vec2Df_POD::MergeFrom(from._internal_maxsteeringtorquedelta_nms());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_proposaldata()->::pb::mf_lsca::config_steer_propose_t::configSteerPropose_t::MergeFrom(from._internal_proposaldata());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_maxsteeringangledelta_deg()->::pb::cml::vec2_df_pod::Vec2Df_POD::MergeFrom(from._internal_maxsteeringangledelta_deg());
    }
    if (cached_has_bits & 0x00000040u) {
      upperdeactivationspeedbackwards_ms_ = from.upperdeactivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      enlargementside_m_ = from.enlargementside_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      roitravelleddistoffsetresist_m_ = from.roitravelleddistoffsetresist_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      overridetime_s_ = from.overridetime_s_;
    }
    if (cached_has_bits & 0x00000400u) {
      roiwidth_s_ = from.roiwidth_s_;
    }
    if (cached_has_bits & 0x00000800u) {
      lowerdeactivationspeedbackwards_ms_ = from.lowerdeactivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x00001000u) {
      lowerdeactivationspeedforwards_ms_ = from.lowerdeactivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      roitravelleddistresist_s_ = from.roitravelleddistresist_s_;
    }
    if (cached_has_bits & 0x00004000u) {
      enlargementrear_m_ = from.enlargementrear_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      immediateoverridetorque_nm_ = from.immediateoverridetorque_nm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      upperdeactivationspeedforwards_ms_ = from.upperdeactivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x00020000u) {
      loweractivationspeedforwards_ms_ = from.loweractivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x00040000u) {
      rearsteerangleratio_ = from.rearsteerangleratio_;
    }
    if (cached_has_bits & 0x00080000u) {
      roitravelleddistprop_s_ = from.roitravelleddistprop_s_;
    }
    if (cached_has_bits & 0x00100000u) {
      roilength_s_ = from.roilength_s_;
    }
    if (cached_has_bits & 0x00200000u) {
      mindynamicobjectprobability_perc_ = from.mindynamicobjectprobability_perc_;
    }
    if (cached_has_bits & 0x00400000u) {
      checkseat_nu_ = from.checkseat_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      torqueinterfaceactive_nu_ = from.torqueinterfaceactive_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      stopinterventioniferror_nu_ = from.stopinterventioniferror_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      checkdoors_nu_ = from.checkdoors_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      checkdriverseatbelt_nu_ = from.checkdriverseatbelt_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      checktrunk_nu_ = from.checktrunk_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      loweractivationspeedbackwards_ms_ = from.loweractivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x20000000u) {
      upperactivationspeedbackwards_ms_ = from.upperactivationspeedbackwards_ms_;
    }
    if (cached_has_bits & 0x40000000u) {
      roitravelleddistoffsetprop_m_ = from.roitravelleddistoffsetprop_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      roilengthoffset_m_ = from.roilengthoffset_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      minstaticobjectprobability_perc_ = from.minstaticobjectprobability_perc_;
    }
    if (cached_has_bits & 0x00000002u) {
      timebasedoverridetorque_nm_ = from.timebasedoverridetorque_nm_;
    }
    if (cached_has_bits & 0x00000004u) {
      roiwidthoffset_m_ = from.roiwidthoffset_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      enlargementfront_m_ = from.enlargementfront_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      upperactivationspeedforwards_ms_ = from.upperactivationspeedforwards_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      overridedistance_m_ = from.overridedistance_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void configSteer_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.config_steer_t.configSteer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configSteer_t::CopyFrom(const configSteer_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.config_steer_t.configSteer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configSteer_t::IsInitialized() const {
  return true;
}

void configSteer_t::InternalSwap(configSteer_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(maxsteeringanglelimits_deg_, other->maxsteeringanglelimits_deg_);
  swap(maxsteeringtorquelimits_nm_, other->maxsteeringtorquelimits_nm_);
  swap(resistancedata_, other->resistancedata_);
  swap(maxsteeringtorquedelta_nms_, other->maxsteeringtorquedelta_nms_);
  swap(proposaldata_, other->proposaldata_);
  swap(maxsteeringangledelta_deg_, other->maxsteeringangledelta_deg_);
  swap(upperdeactivationspeedbackwards_ms_, other->upperdeactivationspeedbackwards_ms_);
  swap(enlargementside_m_, other->enlargementside_m_);
  swap(roitravelleddistoffsetresist_m_, other->roitravelleddistoffsetresist_m_);
  swap(overridetime_s_, other->overridetime_s_);
  swap(roiwidth_s_, other->roiwidth_s_);
  swap(lowerdeactivationspeedbackwards_ms_, other->lowerdeactivationspeedbackwards_ms_);
  swap(lowerdeactivationspeedforwards_ms_, other->lowerdeactivationspeedforwards_ms_);
  swap(roitravelleddistresist_s_, other->roitravelleddistresist_s_);
  swap(enlargementrear_m_, other->enlargementrear_m_);
  swap(immediateoverridetorque_nm_, other->immediateoverridetorque_nm_);
  swap(upperdeactivationspeedforwards_ms_, other->upperdeactivationspeedforwards_ms_);
  swap(loweractivationspeedforwards_ms_, other->loweractivationspeedforwards_ms_);
  swap(rearsteerangleratio_, other->rearsteerangleratio_);
  swap(roitravelleddistprop_s_, other->roitravelleddistprop_s_);
  swap(roilength_s_, other->roilength_s_);
  swap(mindynamicobjectprobability_perc_, other->mindynamicobjectprobability_perc_);
  swap(checkseat_nu_, other->checkseat_nu_);
  swap(torqueinterfaceactive_nu_, other->torqueinterfaceactive_nu_);
  swap(stopinterventioniferror_nu_, other->stopinterventioniferror_nu_);
  swap(checkdoors_nu_, other->checkdoors_nu_);
  swap(checkdriverseatbelt_nu_, other->checkdriverseatbelt_nu_);
  swap(checktrunk_nu_, other->checktrunk_nu_);
  swap(loweractivationspeedbackwards_ms_, other->loweractivationspeedbackwards_ms_);
  swap(upperactivationspeedbackwards_ms_, other->upperactivationspeedbackwards_ms_);
  swap(roitravelleddistoffsetprop_m_, other->roitravelleddistoffsetprop_m_);
  swap(roilengthoffset_m_, other->roilengthoffset_m_);
  swap(minstaticobjectprobability_perc_, other->minstaticobjectprobability_perc_);
  swap(timebasedoverridetorque_nm_, other->timebasedoverridetorque_nm_);
  swap(roiwidthoffset_m_, other->roiwidthoffset_m_);
  swap(enlargementfront_m_, other->enlargementfront_m_);
  swap(upperactivationspeedforwards_ms_, other->upperactivationspeedforwards_ms_);
  swap(overridedistance_m_, other->overridedistance_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata configSteer_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void configSteer_t_array_port::InitAsDefaultInstance() {
}
class configSteer_t_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<configSteer_t_array_port>()._has_bits_);
};

configSteer_t_array_port::configSteer_t_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
}
configSteer_t_array_port::configSteer_t_array_port(const configSteer_t_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
}

void configSteer_t_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configSteer_t_array_port_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base);
}

configSteer_t_array_port::~configSteer_t_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  SharedDtor();
}

void configSteer_t_array_port::SharedDtor() {
}

void configSteer_t_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configSteer_t_array_port& configSteer_t_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configSteer_t_array_port_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base);
  return *internal_default_instance();
}


void configSteer_t_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* configSteer_t_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_lsca.config_steer_t.configSteer_t data = 3770;
      case 3770:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* configSteer_t_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.config_steer_t.configSteer_t data = 3770;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3770, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  return target;
}

size_t configSteer_t_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.config_steer_t.configSteer_t data = 3770;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configSteer_t_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const configSteer_t_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configSteer_t_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
    MergeFrom(*source);
  }
}

void configSteer_t_array_port::MergeFrom(const configSteer_t_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void configSteer_t_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configSteer_t_array_port::CopyFrom(const configSteer_t_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.config_steer_t.configSteer_t_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configSteer_t_array_port::IsInitialized() const {
  return true;
}

void configSteer_t_array_port::InternalSwap(configSteer_t_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata configSteer_t_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config_steer_t
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::config_steer_t::configSteer_t* Arena::CreateMaybeMessage< ::pb::mf_lsca::config_steer_t::configSteer_t >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::config_steer_t::configSteer_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::config_steer_t::configSteer_t_array_port* Arena::CreateMaybeMessage< ::pb::mf_lsca::config_steer_t::configSteer_t_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::config_steer_t::configSteer_t_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
