// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/config_brake_t.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2fconfig_5fbrake_5ft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2fconfig_5fbrake_5ft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mf_lsca/brake_set_t.pb.h"
#include "cml/vec2_df_pod.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fbrake_5ft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5flsca_2fconfig_5fbrake_5ft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto;
namespace pb {
namespace mf_lsca {
namespace config_brake_t {
class configBrake_t;
class configBrake_tDefaultTypeInternal;
extern configBrake_tDefaultTypeInternal _configBrake_t_default_instance_;
class configBrake_t_array_port;
class configBrake_t_array_portDefaultTypeInternal;
extern configBrake_t_array_portDefaultTypeInternal _configBrake_t_array_port_default_instance_;
}  // namespace config_brake_t
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_lsca::config_brake_t::configBrake_t* Arena::CreateMaybeMessage<::pb::mf_lsca::config_brake_t::configBrake_t>(Arena*);
template<> ::pb::mf_lsca::config_brake_t::configBrake_t_array_port* Arena::CreateMaybeMessage<::pb::mf_lsca::config_brake_t::configBrake_t_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_lsca {
namespace config_brake_t {

// ===================================================================

class configBrake_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.config_brake_t.configBrake_t) */ {
 public:
  configBrake_t();
  virtual ~configBrake_t();

  configBrake_t(const configBrake_t& from);
  configBrake_t(configBrake_t&& from) noexcept
    : configBrake_t() {
    *this = ::std::move(from);
  }

  inline configBrake_t& operator=(const configBrake_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline configBrake_t& operator=(configBrake_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const configBrake_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const configBrake_t* internal_default_instance() {
    return reinterpret_cast<const configBrake_t*>(
               &_configBrake_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(configBrake_t& a, configBrake_t& b) {
    a.Swap(&b);
  }
  inline void Swap(configBrake_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline configBrake_t* New() const final {
    return CreateMaybeMessage<configBrake_t>(nullptr);
  }

  configBrake_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<configBrake_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const configBrake_t& from);
  void MergeFrom(const configBrake_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(configBrake_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.config_brake_t.configBrake_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto);
    return ::descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyAdjustmentFieldNumber = 675,
    kProtectedMirrorShapeLeftFieldNumber = 1271,
    kProtectedMirrorShapeRightFieldNumber = 3569,
    kBrakeModelFieldNumber = 1669,
    kUpperActivationSpeedForwardsMsFieldNumber = 3994,
    kWarnTimeSFieldNumber = 170,
    kUpperDeactivationSpeedBackwardsMsFieldNumber = 227,
    kEnlargementSideMFieldNumber = 262,
    kRimProtectionAngleDegFieldNumber = 357,
    kMaximumOverrideDistanceMFieldNumber = 611,
    kMarginDelaySFieldNumber = 663,
    kProtectBodyNuFieldNumber = 964,
    kProtectWheelNuFieldNumber = 781,
    kProtectRimNuFieldNumber = 5,
    kProtectMirrorNuFieldNumber = 1005,
    kLowerDeactivationSpeedBackwardsMsFieldNumber = 827,
    kAutoContinueOverrideDistanceMFieldNumber = 840,
    kLowerDeactivationSpeedForwardsMsFieldNumber = 885,
    kMinClassConfidencePercFieldNumber = 1041,
    kProtectedMirrorShapeRightActualSizeNuFieldNumber = 1049,
    kMinHeightConfidencePercFieldNumber = 1297,
    kEnlargementRearMFieldNumber = 1339,
    kRimProtectionSpeedMpsFieldNumber = 1451,
    kWarnLowNuFieldNumber = 536,
    kEnableBrakeLowNuFieldNumber = 1003,
    kEnableBrakeHighNuFieldNumber = 2983,
    kDrivingTubeEnabledNuFieldNumber = 2003,
    kCheckDoorsNuFieldNumber = 2707,
    kCheckDriverSeatbeltNuFieldNumber = 1677,
    kCheckTrunkNuFieldNumber = 1989,
    kForwardBrakeEnabledIfTrunkOpenNuFieldNumber = 312,
    kBodyAdjustmentActualSizeNuFieldNumber = 1782,
    kUpperDeactivationSpeedForwardsMsFieldNumber = 1789,
    kLowerActivationSpeedForwardsMsFieldNumber = 1858,
    kCheckHoodNuFieldNumber = 360,
    kCheckPedalOverrideGasNuFieldNumber = 2733,
    kCheckPedalOverrideBrakeNuFieldNumber = 3222,
    kCheckDriverSeatOccupiedNuFieldNumber = 3025,
    kProtectHitchNuFieldNumber = 1866,
    kComfortInManualNuFieldNumber = 2766,
    kAutoContinueNuFieldNumber = 1844,
    kWarnHighNuFieldNumber = 2879,
    kProtectedMirrorShapeLeftActualSizeNuFieldNumber = 2581,
    kLowerActivationSpeedBackwardsMsFieldNumber = 2600,
    kUpperActivationSpeedBackwardsMsFieldNumber = 2668,
    kMinTriggerCountStaticBrakeNuFieldNumber = 2944,
    kMinStaticObjectProbabilityPercFieldNumber = 3245,
    kStandStillTimeSFieldNumber = 3330,
    kIgnoreTrailerXMFieldNumber = 3508,
    kEnlargementFrontMFieldNumber = 3610,
  };
  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD bodyAdjustment = 675;
  int bodyadjustment_size() const;
  private:
  int _internal_bodyadjustment_size() const;
  public:
  void clear_bodyadjustment();
  ::pb::cml::vec2_df_pod::Vec2Df_POD* mutable_bodyadjustment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >*
      mutable_bodyadjustment();
  private:
  const ::pb::cml::vec2_df_pod::Vec2Df_POD& _internal_bodyadjustment(int index) const;
  ::pb::cml::vec2_df_pod::Vec2Df_POD* _internal_add_bodyadjustment();
  public:
  const ::pb::cml::vec2_df_pod::Vec2Df_POD& bodyadjustment(int index) const;
  ::pb::cml::vec2_df_pod::Vec2Df_POD* add_bodyadjustment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >&
      bodyadjustment() const;

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeLeft = 1271;
  int protectedmirrorshapeleft_size() const;
  private:
  int _internal_protectedmirrorshapeleft_size() const;
  public:
  void clear_protectedmirrorshapeleft();
  ::pb::cml::vec2_df_pod::Vec2Df_POD* mutable_protectedmirrorshapeleft(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >*
      mutable_protectedmirrorshapeleft();
  private:
  const ::pb::cml::vec2_df_pod::Vec2Df_POD& _internal_protectedmirrorshapeleft(int index) const;
  ::pb::cml::vec2_df_pod::Vec2Df_POD* _internal_add_protectedmirrorshapeleft();
  public:
  const ::pb::cml::vec2_df_pod::Vec2Df_POD& protectedmirrorshapeleft(int index) const;
  ::pb::cml::vec2_df_pod::Vec2Df_POD* add_protectedmirrorshapeleft();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >&
      protectedmirrorshapeleft() const;

  // repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeRight = 3569;
  int protectedmirrorshaperight_size() const;
  private:
  int _internal_protectedmirrorshaperight_size() const;
  public:
  void clear_protectedmirrorshaperight();
  ::pb::cml::vec2_df_pod::Vec2Df_POD* mutable_protectedmirrorshaperight(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >*
      mutable_protectedmirrorshaperight();
  private:
  const ::pb::cml::vec2_df_pod::Vec2Df_POD& _internal_protectedmirrorshaperight(int index) const;
  ::pb::cml::vec2_df_pod::Vec2Df_POD* _internal_add_protectedmirrorshaperight();
  public:
  const ::pb::cml::vec2_df_pod::Vec2Df_POD& protectedmirrorshaperight(int index) const;
  ::pb::cml::vec2_df_pod::Vec2Df_POD* add_protectedmirrorshaperight();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >&
      protectedmirrorshaperight() const;

  // optional .pb.mf_lsca.brake_set_t.brakeSet_t brakeModel = 1669;
  bool has_brakemodel() const;
  private:
  bool _internal_has_brakemodel() const;
  public:
  void clear_brakemodel();
  const ::pb::mf_lsca::brake_set_t::brakeSet_t& brakemodel() const;
  ::pb::mf_lsca::brake_set_t::brakeSet_t* release_brakemodel();
  ::pb::mf_lsca::brake_set_t::brakeSet_t* mutable_brakemodel();
  void set_allocated_brakemodel(::pb::mf_lsca::brake_set_t::brakeSet_t* brakemodel);
  private:
  const ::pb::mf_lsca::brake_set_t::brakeSet_t& _internal_brakemodel() const;
  ::pb::mf_lsca::brake_set_t::brakeSet_t* _internal_mutable_brakemodel();
  public:

  // optional float upperActivationSpeedForwards_ms = 3994;
  bool has_upperactivationspeedforwards_ms() const;
  private:
  bool _internal_has_upperactivationspeedforwards_ms() const;
  public:
  void clear_upperactivationspeedforwards_ms();
  float upperactivationspeedforwards_ms() const;
  void set_upperactivationspeedforwards_ms(float value);
  private:
  float _internal_upperactivationspeedforwards_ms() const;
  void _internal_set_upperactivationspeedforwards_ms(float value);
  public:

  // optional float warnTime_s = 170;
  bool has_warntime_s() const;
  private:
  bool _internal_has_warntime_s() const;
  public:
  void clear_warntime_s();
  float warntime_s() const;
  void set_warntime_s(float value);
  private:
  float _internal_warntime_s() const;
  void _internal_set_warntime_s(float value);
  public:

  // optional float upperDeactivationSpeedBackwards_ms = 227;
  bool has_upperdeactivationspeedbackwards_ms() const;
  private:
  bool _internal_has_upperdeactivationspeedbackwards_ms() const;
  public:
  void clear_upperdeactivationspeedbackwards_ms();
  float upperdeactivationspeedbackwards_ms() const;
  void set_upperdeactivationspeedbackwards_ms(float value);
  private:
  float _internal_upperdeactivationspeedbackwards_ms() const;
  void _internal_set_upperdeactivationspeedbackwards_ms(float value);
  public:

  // optional float enlargementSide_m = 262;
  bool has_enlargementside_m() const;
  private:
  bool _internal_has_enlargementside_m() const;
  public:
  void clear_enlargementside_m();
  float enlargementside_m() const;
  void set_enlargementside_m(float value);
  private:
  float _internal_enlargementside_m() const;
  void _internal_set_enlargementside_m(float value);
  public:

  // optional float rimProtectionAngle_deg = 357;
  bool has_rimprotectionangle_deg() const;
  private:
  bool _internal_has_rimprotectionangle_deg() const;
  public:
  void clear_rimprotectionangle_deg();
  float rimprotectionangle_deg() const;
  void set_rimprotectionangle_deg(float value);
  private:
  float _internal_rimprotectionangle_deg() const;
  void _internal_set_rimprotectionangle_deg(float value);
  public:

  // optional float maximumOverrideDistance_m = 611;
  bool has_maximumoverridedistance_m() const;
  private:
  bool _internal_has_maximumoverridedistance_m() const;
  public:
  void clear_maximumoverridedistance_m();
  float maximumoverridedistance_m() const;
  void set_maximumoverridedistance_m(float value);
  private:
  float _internal_maximumoverridedistance_m() const;
  void _internal_set_maximumoverridedistance_m(float value);
  public:

  // optional float marginDelay_s = 663;
  bool has_margindelay_s() const;
  private:
  bool _internal_has_margindelay_s() const;
  public:
  void clear_margindelay_s();
  float margindelay_s() const;
  void set_margindelay_s(float value);
  private:
  float _internal_margindelay_s() const;
  void _internal_set_margindelay_s(float value);
  public:

  // optional bool protectBody_nu = 964;
  bool has_protectbody_nu() const;
  private:
  bool _internal_has_protectbody_nu() const;
  public:
  void clear_protectbody_nu();
  bool protectbody_nu() const;
  void set_protectbody_nu(bool value);
  private:
  bool _internal_protectbody_nu() const;
  void _internal_set_protectbody_nu(bool value);
  public:

  // optional bool protectWheel_nu = 781;
  bool has_protectwheel_nu() const;
  private:
  bool _internal_has_protectwheel_nu() const;
  public:
  void clear_protectwheel_nu();
  bool protectwheel_nu() const;
  void set_protectwheel_nu(bool value);
  private:
  bool _internal_protectwheel_nu() const;
  void _internal_set_protectwheel_nu(bool value);
  public:

  // optional bool protectRim_nu = 5;
  bool has_protectrim_nu() const;
  private:
  bool _internal_has_protectrim_nu() const;
  public:
  void clear_protectrim_nu();
  bool protectrim_nu() const;
  void set_protectrim_nu(bool value);
  private:
  bool _internal_protectrim_nu() const;
  void _internal_set_protectrim_nu(bool value);
  public:

  // optional bool protectMirror_nu = 1005;
  bool has_protectmirror_nu() const;
  private:
  bool _internal_has_protectmirror_nu() const;
  public:
  void clear_protectmirror_nu();
  bool protectmirror_nu() const;
  void set_protectmirror_nu(bool value);
  private:
  bool _internal_protectmirror_nu() const;
  void _internal_set_protectmirror_nu(bool value);
  public:

  // optional float lowerDeactivationSpeedBackwards_ms = 827;
  bool has_lowerdeactivationspeedbackwards_ms() const;
  private:
  bool _internal_has_lowerdeactivationspeedbackwards_ms() const;
  public:
  void clear_lowerdeactivationspeedbackwards_ms();
  float lowerdeactivationspeedbackwards_ms() const;
  void set_lowerdeactivationspeedbackwards_ms(float value);
  private:
  float _internal_lowerdeactivationspeedbackwards_ms() const;
  void _internal_set_lowerdeactivationspeedbackwards_ms(float value);
  public:

  // optional float autoContinueOverrideDistance_m = 840;
  bool has_autocontinueoverridedistance_m() const;
  private:
  bool _internal_has_autocontinueoverridedistance_m() const;
  public:
  void clear_autocontinueoverridedistance_m();
  float autocontinueoverridedistance_m() const;
  void set_autocontinueoverridedistance_m(float value);
  private:
  float _internal_autocontinueoverridedistance_m() const;
  void _internal_set_autocontinueoverridedistance_m(float value);
  public:

  // optional float lowerDeactivationSpeedForwards_ms = 885;
  bool has_lowerdeactivationspeedforwards_ms() const;
  private:
  bool _internal_has_lowerdeactivationspeedforwards_ms() const;
  public:
  void clear_lowerdeactivationspeedforwards_ms();
  float lowerdeactivationspeedforwards_ms() const;
  void set_lowerdeactivationspeedforwards_ms(float value);
  private:
  float _internal_lowerdeactivationspeedforwards_ms() const;
  void _internal_set_lowerdeactivationspeedforwards_ms(float value);
  public:

  // optional uint32 minClassConfidence_perc = 1041;
  bool has_minclassconfidence_perc() const;
  private:
  bool _internal_has_minclassconfidence_perc() const;
  public:
  void clear_minclassconfidence_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 minclassconfidence_perc() const;
  void set_minclassconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minclassconfidence_perc() const;
  void _internal_set_minclassconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 protectedMirrorShapeRightActualSize_nu = 1049;
  bool has_protectedmirrorshaperightactualsize_nu() const;
  private:
  bool _internal_has_protectedmirrorshaperightactualsize_nu() const;
  public:
  void clear_protectedmirrorshaperightactualsize_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 protectedmirrorshaperightactualsize_nu() const;
  void set_protectedmirrorshaperightactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protectedmirrorshaperightactualsize_nu() const;
  void _internal_set_protectedmirrorshaperightactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minHeightConfidence_perc = 1297;
  bool has_minheightconfidence_perc() const;
  private:
  bool _internal_has_minheightconfidence_perc() const;
  public:
  void clear_minheightconfidence_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 minheightconfidence_perc() const;
  void set_minheightconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minheightconfidence_perc() const;
  void _internal_set_minheightconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float enlargementRear_m = 1339;
  bool has_enlargementrear_m() const;
  private:
  bool _internal_has_enlargementrear_m() const;
  public:
  void clear_enlargementrear_m();
  float enlargementrear_m() const;
  void set_enlargementrear_m(float value);
  private:
  float _internal_enlargementrear_m() const;
  void _internal_set_enlargementrear_m(float value);
  public:

  // optional float rimProtectionSpeed_mps = 1451;
  bool has_rimprotectionspeed_mps() const;
  private:
  bool _internal_has_rimprotectionspeed_mps() const;
  public:
  void clear_rimprotectionspeed_mps();
  float rimprotectionspeed_mps() const;
  void set_rimprotectionspeed_mps(float value);
  private:
  float _internal_rimprotectionspeed_mps() const;
  void _internal_set_rimprotectionspeed_mps(float value);
  public:

  // optional bool warnLow_nu = 536;
  bool has_warnlow_nu() const;
  private:
  bool _internal_has_warnlow_nu() const;
  public:
  void clear_warnlow_nu();
  bool warnlow_nu() const;
  void set_warnlow_nu(bool value);
  private:
  bool _internal_warnlow_nu() const;
  void _internal_set_warnlow_nu(bool value);
  public:

  // optional bool enableBrakeLow_nu = 1003;
  bool has_enablebrakelow_nu() const;
  private:
  bool _internal_has_enablebrakelow_nu() const;
  public:
  void clear_enablebrakelow_nu();
  bool enablebrakelow_nu() const;
  void set_enablebrakelow_nu(bool value);
  private:
  bool _internal_enablebrakelow_nu() const;
  void _internal_set_enablebrakelow_nu(bool value);
  public:

  // optional bool enableBrakeHigh_nu = 2983;
  bool has_enablebrakehigh_nu() const;
  private:
  bool _internal_has_enablebrakehigh_nu() const;
  public:
  void clear_enablebrakehigh_nu();
  bool enablebrakehigh_nu() const;
  void set_enablebrakehigh_nu(bool value);
  private:
  bool _internal_enablebrakehigh_nu() const;
  void _internal_set_enablebrakehigh_nu(bool value);
  public:

  // optional bool drivingTubeEnabled_nu = 2003;
  bool has_drivingtubeenabled_nu() const;
  private:
  bool _internal_has_drivingtubeenabled_nu() const;
  public:
  void clear_drivingtubeenabled_nu();
  bool drivingtubeenabled_nu() const;
  void set_drivingtubeenabled_nu(bool value);
  private:
  bool _internal_drivingtubeenabled_nu() const;
  void _internal_set_drivingtubeenabled_nu(bool value);
  public:

  // optional bool checkDoors_nu = 2707;
  bool has_checkdoors_nu() const;
  private:
  bool _internal_has_checkdoors_nu() const;
  public:
  void clear_checkdoors_nu();
  bool checkdoors_nu() const;
  void set_checkdoors_nu(bool value);
  private:
  bool _internal_checkdoors_nu() const;
  void _internal_set_checkdoors_nu(bool value);
  public:

  // optional bool checkDriverSeatbelt_nu = 1677;
  bool has_checkdriverseatbelt_nu() const;
  private:
  bool _internal_has_checkdriverseatbelt_nu() const;
  public:
  void clear_checkdriverseatbelt_nu();
  bool checkdriverseatbelt_nu() const;
  void set_checkdriverseatbelt_nu(bool value);
  private:
  bool _internal_checkdriverseatbelt_nu() const;
  void _internal_set_checkdriverseatbelt_nu(bool value);
  public:

  // optional bool checkTrunk_nu = 1989;
  bool has_checktrunk_nu() const;
  private:
  bool _internal_has_checktrunk_nu() const;
  public:
  void clear_checktrunk_nu();
  bool checktrunk_nu() const;
  void set_checktrunk_nu(bool value);
  private:
  bool _internal_checktrunk_nu() const;
  void _internal_set_checktrunk_nu(bool value);
  public:

  // optional bool forwardBrakeEnabledIfTrunkOpen_nu = 312;
  bool has_forwardbrakeenablediftrunkopen_nu() const;
  private:
  bool _internal_has_forwardbrakeenablediftrunkopen_nu() const;
  public:
  void clear_forwardbrakeenablediftrunkopen_nu();
  bool forwardbrakeenablediftrunkopen_nu() const;
  void set_forwardbrakeenablediftrunkopen_nu(bool value);
  private:
  bool _internal_forwardbrakeenablediftrunkopen_nu() const;
  void _internal_set_forwardbrakeenablediftrunkopen_nu(bool value);
  public:

  // optional uint32 bodyAdjustmentActualSize_nu = 1782;
  bool has_bodyadjustmentactualsize_nu() const;
  private:
  bool _internal_has_bodyadjustmentactualsize_nu() const;
  public:
  void clear_bodyadjustmentactualsize_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyadjustmentactualsize_nu() const;
  void set_bodyadjustmentactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodyadjustmentactualsize_nu() const;
  void _internal_set_bodyadjustmentactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float upperDeactivationSpeedForwards_ms = 1789;
  bool has_upperdeactivationspeedforwards_ms() const;
  private:
  bool _internal_has_upperdeactivationspeedforwards_ms() const;
  public:
  void clear_upperdeactivationspeedforwards_ms();
  float upperdeactivationspeedforwards_ms() const;
  void set_upperdeactivationspeedforwards_ms(float value);
  private:
  float _internal_upperdeactivationspeedforwards_ms() const;
  void _internal_set_upperdeactivationspeedforwards_ms(float value);
  public:

  // optional float lowerActivationSpeedForwards_ms = 1858;
  bool has_loweractivationspeedforwards_ms() const;
  private:
  bool _internal_has_loweractivationspeedforwards_ms() const;
  public:
  void clear_loweractivationspeedforwards_ms();
  float loweractivationspeedforwards_ms() const;
  void set_loweractivationspeedforwards_ms(float value);
  private:
  float _internal_loweractivationspeedforwards_ms() const;
  void _internal_set_loweractivationspeedforwards_ms(float value);
  public:

  // optional bool checkHood_nu = 360;
  bool has_checkhood_nu() const;
  private:
  bool _internal_has_checkhood_nu() const;
  public:
  void clear_checkhood_nu();
  bool checkhood_nu() const;
  void set_checkhood_nu(bool value);
  private:
  bool _internal_checkhood_nu() const;
  void _internal_set_checkhood_nu(bool value);
  public:

  // optional bool checkPedalOverrideGas_nu = 2733;
  bool has_checkpedaloverridegas_nu() const;
  private:
  bool _internal_has_checkpedaloverridegas_nu() const;
  public:
  void clear_checkpedaloverridegas_nu();
  bool checkpedaloverridegas_nu() const;
  void set_checkpedaloverridegas_nu(bool value);
  private:
  bool _internal_checkpedaloverridegas_nu() const;
  void _internal_set_checkpedaloverridegas_nu(bool value);
  public:

  // optional bool checkPedalOverrideBrake_nu = 3222;
  bool has_checkpedaloverridebrake_nu() const;
  private:
  bool _internal_has_checkpedaloverridebrake_nu() const;
  public:
  void clear_checkpedaloverridebrake_nu();
  bool checkpedaloverridebrake_nu() const;
  void set_checkpedaloverridebrake_nu(bool value);
  private:
  bool _internal_checkpedaloverridebrake_nu() const;
  void _internal_set_checkpedaloverridebrake_nu(bool value);
  public:

  // optional bool checkDriverSeatOccupied_nu = 3025;
  bool has_checkdriverseatoccupied_nu() const;
  private:
  bool _internal_has_checkdriverseatoccupied_nu() const;
  public:
  void clear_checkdriverseatoccupied_nu();
  bool checkdriverseatoccupied_nu() const;
  void set_checkdriverseatoccupied_nu(bool value);
  private:
  bool _internal_checkdriverseatoccupied_nu() const;
  void _internal_set_checkdriverseatoccupied_nu(bool value);
  public:

  // optional bool protectHitch_nu = 1866;
  bool has_protecthitch_nu() const;
  private:
  bool _internal_has_protecthitch_nu() const;
  public:
  void clear_protecthitch_nu();
  bool protecthitch_nu() const;
  void set_protecthitch_nu(bool value);
  private:
  bool _internal_protecthitch_nu() const;
  void _internal_set_protecthitch_nu(bool value);
  public:

  // optional bool comfortInManual_nu = 2766;
  bool has_comfortinmanual_nu() const;
  private:
  bool _internal_has_comfortinmanual_nu() const;
  public:
  void clear_comfortinmanual_nu();
  bool comfortinmanual_nu() const;
  void set_comfortinmanual_nu(bool value);
  private:
  bool _internal_comfortinmanual_nu() const;
  void _internal_set_comfortinmanual_nu(bool value);
  public:

  // optional bool autoContinue_nu = 1844;
  bool has_autocontinue_nu() const;
  private:
  bool _internal_has_autocontinue_nu() const;
  public:
  void clear_autocontinue_nu();
  bool autocontinue_nu() const;
  void set_autocontinue_nu(bool value);
  private:
  bool _internal_autocontinue_nu() const;
  void _internal_set_autocontinue_nu(bool value);
  public:

  // optional bool warnHigh_nu = 2879;
  bool has_warnhigh_nu() const;
  private:
  bool _internal_has_warnhigh_nu() const;
  public:
  void clear_warnhigh_nu();
  bool warnhigh_nu() const;
  void set_warnhigh_nu(bool value);
  private:
  bool _internal_warnhigh_nu() const;
  void _internal_set_warnhigh_nu(bool value);
  public:

  // optional uint32 protectedMirrorShapeLeftActualSize_nu = 2581;
  bool has_protectedmirrorshapeleftactualsize_nu() const;
  private:
  bool _internal_has_protectedmirrorshapeleftactualsize_nu() const;
  public:
  void clear_protectedmirrorshapeleftactualsize_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 protectedmirrorshapeleftactualsize_nu() const;
  void set_protectedmirrorshapeleftactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protectedmirrorshapeleftactualsize_nu() const;
  void _internal_set_protectedmirrorshapeleftactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float lowerActivationSpeedBackwards_ms = 2600;
  bool has_loweractivationspeedbackwards_ms() const;
  private:
  bool _internal_has_loweractivationspeedbackwards_ms() const;
  public:
  void clear_loweractivationspeedbackwards_ms();
  float loweractivationspeedbackwards_ms() const;
  void set_loweractivationspeedbackwards_ms(float value);
  private:
  float _internal_loweractivationspeedbackwards_ms() const;
  void _internal_set_loweractivationspeedbackwards_ms(float value);
  public:

  // optional float upperActivationSpeedBackwards_ms = 2668;
  bool has_upperactivationspeedbackwards_ms() const;
  private:
  bool _internal_has_upperactivationspeedbackwards_ms() const;
  public:
  void clear_upperactivationspeedbackwards_ms();
  float upperactivationspeedbackwards_ms() const;
  void set_upperactivationspeedbackwards_ms(float value);
  private:
  float _internal_upperactivationspeedbackwards_ms() const;
  void _internal_set_upperactivationspeedbackwards_ms(float value);
  public:

  // optional uint32 minTriggerCountStaticBrake_nu = 2944;
  bool has_mintriggercountstaticbrake_nu() const;
  private:
  bool _internal_has_mintriggercountstaticbrake_nu() const;
  public:
  void clear_mintriggercountstaticbrake_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 mintriggercountstaticbrake_nu() const;
  void set_mintriggercountstaticbrake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mintriggercountstaticbrake_nu() const;
  void _internal_set_mintriggercountstaticbrake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minStaticObjectProbability_perc = 3245;
  bool has_minstaticobjectprobability_perc() const;
  private:
  bool _internal_has_minstaticobjectprobability_perc() const;
  public:
  void clear_minstaticobjectprobability_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 minstaticobjectprobability_perc() const;
  void set_minstaticobjectprobability_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minstaticobjectprobability_perc() const;
  void _internal_set_minstaticobjectprobability_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float standStillTime_s = 3330;
  bool has_standstilltime_s() const;
  private:
  bool _internal_has_standstilltime_s() const;
  public:
  void clear_standstilltime_s();
  float standstilltime_s() const;
  void set_standstilltime_s(float value);
  private:
  float _internal_standstilltime_s() const;
  void _internal_set_standstilltime_s(float value);
  public:

  // optional float ignoreTrailerX_m = 3508;
  bool has_ignoretrailerx_m() const;
  private:
  bool _internal_has_ignoretrailerx_m() const;
  public:
  void clear_ignoretrailerx_m();
  float ignoretrailerx_m() const;
  void set_ignoretrailerx_m(float value);
  private:
  float _internal_ignoretrailerx_m() const;
  void _internal_set_ignoretrailerx_m(float value);
  public:

  // optional float enlargementFront_m = 3610;
  bool has_enlargementfront_m() const;
  private:
  bool _internal_has_enlargementfront_m() const;
  public:
  void clear_enlargementfront_m();
  float enlargementfront_m() const;
  void set_enlargementfront_m(float value);
  private:
  float _internal_enlargementfront_m() const;
  void _internal_set_enlargementfront_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.config_brake_t.configBrake_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD > bodyadjustment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD > protectedmirrorshapeleft_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD > protectedmirrorshaperight_;
  ::pb::mf_lsca::brake_set_t::brakeSet_t* brakemodel_;
  float upperactivationspeedforwards_ms_;
  float warntime_s_;
  float upperdeactivationspeedbackwards_ms_;
  float enlargementside_m_;
  float rimprotectionangle_deg_;
  float maximumoverridedistance_m_;
  float margindelay_s_;
  bool protectbody_nu_;
  bool protectwheel_nu_;
  bool protectrim_nu_;
  bool protectmirror_nu_;
  float lowerdeactivationspeedbackwards_ms_;
  float autocontinueoverridedistance_m_;
  float lowerdeactivationspeedforwards_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minclassconfidence_perc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protectedmirrorshaperightactualsize_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minheightconfidence_perc_;
  float enlargementrear_m_;
  float rimprotectionspeed_mps_;
  bool warnlow_nu_;
  bool enablebrakelow_nu_;
  bool enablebrakehigh_nu_;
  bool drivingtubeenabled_nu_;
  bool checkdoors_nu_;
  bool checkdriverseatbelt_nu_;
  bool checktrunk_nu_;
  bool forwardbrakeenablediftrunkopen_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyadjustmentactualsize_nu_;
  float upperdeactivationspeedforwards_ms_;
  float loweractivationspeedforwards_ms_;
  bool checkhood_nu_;
  bool checkpedaloverridegas_nu_;
  bool checkpedaloverridebrake_nu_;
  bool checkdriverseatoccupied_nu_;
  bool protecthitch_nu_;
  bool comfortinmanual_nu_;
  bool autocontinue_nu_;
  bool warnhigh_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protectedmirrorshapeleftactualsize_nu_;
  float loweractivationspeedbackwards_ms_;
  float upperactivationspeedbackwards_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mintriggercountstaticbrake_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minstaticobjectprobability_perc_;
  float standstilltime_s_;
  float ignoretrailerx_m_;
  float enlargementfront_m_;
  friend struct ::TableStruct_mf_5flsca_2fconfig_5fbrake_5ft_2eproto;
};
// -------------------------------------------------------------------

class configBrake_t_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.config_brake_t.configBrake_t_array_port) */ {
 public:
  configBrake_t_array_port();
  virtual ~configBrake_t_array_port();

  configBrake_t_array_port(const configBrake_t_array_port& from);
  configBrake_t_array_port(configBrake_t_array_port&& from) noexcept
    : configBrake_t_array_port() {
    *this = ::std::move(from);
  }

  inline configBrake_t_array_port& operator=(const configBrake_t_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline configBrake_t_array_port& operator=(configBrake_t_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const configBrake_t_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const configBrake_t_array_port* internal_default_instance() {
    return reinterpret_cast<const configBrake_t_array_port*>(
               &_configBrake_t_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(configBrake_t_array_port& a, configBrake_t_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(configBrake_t_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline configBrake_t_array_port* New() const final {
    return CreateMaybeMessage<configBrake_t_array_port>(nullptr);
  }

  configBrake_t_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<configBrake_t_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const configBrake_t_array_port& from);
  void MergeFrom(const configBrake_t_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(configBrake_t_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.config_brake_t.configBrake_t_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto);
    return ::descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3940,
  };
  // repeated .pb.mf_lsca.config_brake_t.configBrake_t data = 3940;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_lsca::config_brake_t::configBrake_t* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::config_brake_t::configBrake_t >*
      mutable_data();
  private:
  const ::pb::mf_lsca::config_brake_t::configBrake_t& _internal_data(int index) const;
  ::pb::mf_lsca::config_brake_t::configBrake_t* _internal_add_data();
  public:
  const ::pb::mf_lsca::config_brake_t::configBrake_t& data(int index) const;
  ::pb::mf_lsca::config_brake_t::configBrake_t* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::config_brake_t::configBrake_t >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.config_brake_t.configBrake_t_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::config_brake_t::configBrake_t > data_;
  friend struct ::TableStruct_mf_5flsca_2fconfig_5fbrake_5ft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// configBrake_t

// optional .pb.mf_lsca.brake_set_t.brakeSet_t brakeModel = 1669;
inline bool configBrake_t::_internal_has_brakemodel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || brakemodel_ != nullptr);
  return value;
}
inline bool configBrake_t::has_brakemodel() const {
  return _internal_has_brakemodel();
}
inline const ::pb::mf_lsca::brake_set_t::brakeSet_t& configBrake_t::_internal_brakemodel() const {
  const ::pb::mf_lsca::brake_set_t::brakeSet_t* p = brakemodel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_lsca::brake_set_t::brakeSet_t*>(
      &::pb::mf_lsca::brake_set_t::_brakeSet_t_default_instance_);
}
inline const ::pb::mf_lsca::brake_set_t::brakeSet_t& configBrake_t::brakemodel() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.brakeModel)
  return _internal_brakemodel();
}
inline ::pb::mf_lsca::brake_set_t::brakeSet_t* configBrake_t::release_brakemodel() {
  // @@protoc_insertion_point(field_release:pb.mf_lsca.config_brake_t.configBrake_t.brakeModel)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::mf_lsca::brake_set_t::brakeSet_t* temp = brakemodel_;
  brakemodel_ = nullptr;
  return temp;
}
inline ::pb::mf_lsca::brake_set_t::brakeSet_t* configBrake_t::_internal_mutable_brakemodel() {
  _has_bits_[0] |= 0x00000001u;
  if (brakemodel_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_lsca::brake_set_t::brakeSet_t>(GetArenaNoVirtual());
    brakemodel_ = p;
  }
  return brakemodel_;
}
inline ::pb::mf_lsca::brake_set_t::brakeSet_t* configBrake_t::mutable_brakemodel() {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.config_brake_t.configBrake_t.brakeModel)
  return _internal_mutable_brakemodel();
}
inline void configBrake_t::set_allocated_brakemodel(::pb::mf_lsca::brake_set_t::brakeSet_t* brakemodel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brakemodel_);
  }
  if (brakemodel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brakemodel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brakemodel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  brakemodel_ = brakemodel;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_lsca.config_brake_t.configBrake_t.brakeModel)
}

// optional uint32 bodyAdjustmentActualSize_nu = 1782;
inline bool configBrake_t::_internal_has_bodyadjustmentactualsize_nu() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool configBrake_t::has_bodyadjustmentactualsize_nu() const {
  return _internal_has_bodyadjustmentactualsize_nu();
}
inline void configBrake_t::clear_bodyadjustmentactualsize_nu() {
  bodyadjustmentactualsize_nu_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::_internal_bodyadjustmentactualsize_nu() const {
  return bodyadjustmentactualsize_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::bodyadjustmentactualsize_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.bodyAdjustmentActualSize_nu)
  return _internal_bodyadjustmentactualsize_nu();
}
inline void configBrake_t::_internal_set_bodyadjustmentactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  bodyadjustmentactualsize_nu_ = value;
}
inline void configBrake_t::set_bodyadjustmentactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodyadjustmentactualsize_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.bodyAdjustmentActualSize_nu)
}

// repeated .pb.cml.vec2_df_pod.Vec2Df_POD bodyAdjustment = 675;
inline int configBrake_t::_internal_bodyadjustment_size() const {
  return bodyadjustment_.size();
}
inline int configBrake_t::bodyadjustment_size() const {
  return _internal_bodyadjustment_size();
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::mutable_bodyadjustment(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.config_brake_t.configBrake_t.bodyAdjustment)
  return bodyadjustment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >*
configBrake_t::mutable_bodyadjustment() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lsca.config_brake_t.configBrake_t.bodyAdjustment)
  return &bodyadjustment_;
}
inline const ::pb::cml::vec2_df_pod::Vec2Df_POD& configBrake_t::_internal_bodyadjustment(int index) const {
  return bodyadjustment_.Get(index);
}
inline const ::pb::cml::vec2_df_pod::Vec2Df_POD& configBrake_t::bodyadjustment(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.bodyAdjustment)
  return _internal_bodyadjustment(index);
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::_internal_add_bodyadjustment() {
  return bodyadjustment_.Add();
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::add_bodyadjustment() {
  // @@protoc_insertion_point(field_add:pb.mf_lsca.config_brake_t.configBrake_t.bodyAdjustment)
  return _internal_add_bodyadjustment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >&
configBrake_t::bodyadjustment() const {
  // @@protoc_insertion_point(field_list:pb.mf_lsca.config_brake_t.configBrake_t.bodyAdjustment)
  return bodyadjustment_;
}

// optional uint32 protectedMirrorShapeLeftActualSize_nu = 2581;
inline bool configBrake_t::_internal_has_protectedmirrorshapeleftactualsize_nu() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool configBrake_t::has_protectedmirrorshapeleftactualsize_nu() const {
  return _internal_has_protectedmirrorshapeleftactualsize_nu();
}
inline void configBrake_t::clear_protectedmirrorshapeleftactualsize_nu() {
  protectedmirrorshapeleftactualsize_nu_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::_internal_protectedmirrorshapeleftactualsize_nu() const {
  return protectedmirrorshapeleftactualsize_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::protectedmirrorshapeleftactualsize_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeLeftActualSize_nu)
  return _internal_protectedmirrorshapeleftactualsize_nu();
}
inline void configBrake_t::_internal_set_protectedmirrorshapeleftactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  protectedmirrorshapeleftactualsize_nu_ = value;
}
inline void configBrake_t::set_protectedmirrorshapeleftactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protectedmirrorshapeleftactualsize_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeLeftActualSize_nu)
}

// repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeLeft = 1271;
inline int configBrake_t::_internal_protectedmirrorshapeleft_size() const {
  return protectedmirrorshapeleft_.size();
}
inline int configBrake_t::protectedmirrorshapeleft_size() const {
  return _internal_protectedmirrorshapeleft_size();
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::mutable_protectedmirrorshapeleft(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeLeft)
  return protectedmirrorshapeleft_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >*
configBrake_t::mutable_protectedmirrorshapeleft() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeLeft)
  return &protectedmirrorshapeleft_;
}
inline const ::pb::cml::vec2_df_pod::Vec2Df_POD& configBrake_t::_internal_protectedmirrorshapeleft(int index) const {
  return protectedmirrorshapeleft_.Get(index);
}
inline const ::pb::cml::vec2_df_pod::Vec2Df_POD& configBrake_t::protectedmirrorshapeleft(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeLeft)
  return _internal_protectedmirrorshapeleft(index);
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::_internal_add_protectedmirrorshapeleft() {
  return protectedmirrorshapeleft_.Add();
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::add_protectedmirrorshapeleft() {
  // @@protoc_insertion_point(field_add:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeLeft)
  return _internal_add_protectedmirrorshapeleft();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >&
configBrake_t::protectedmirrorshapeleft() const {
  // @@protoc_insertion_point(field_list:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeLeft)
  return protectedmirrorshapeleft_;
}

// optional uint32 protectedMirrorShapeRightActualSize_nu = 1049;
inline bool configBrake_t::_internal_has_protectedmirrorshaperightactualsize_nu() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool configBrake_t::has_protectedmirrorshaperightactualsize_nu() const {
  return _internal_has_protectedmirrorshaperightactualsize_nu();
}
inline void configBrake_t::clear_protectedmirrorshaperightactualsize_nu() {
  protectedmirrorshaperightactualsize_nu_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::_internal_protectedmirrorshaperightactualsize_nu() const {
  return protectedmirrorshaperightactualsize_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::protectedmirrorshaperightactualsize_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeRightActualSize_nu)
  return _internal_protectedmirrorshaperightactualsize_nu();
}
inline void configBrake_t::_internal_set_protectedmirrorshaperightactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  protectedmirrorshaperightactualsize_nu_ = value;
}
inline void configBrake_t::set_protectedmirrorshaperightactualsize_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protectedmirrorshaperightactualsize_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeRightActualSize_nu)
}

// repeated .pb.cml.vec2_df_pod.Vec2Df_POD protectedMirrorShapeRight = 3569;
inline int configBrake_t::_internal_protectedmirrorshaperight_size() const {
  return protectedmirrorshaperight_.size();
}
inline int configBrake_t::protectedmirrorshaperight_size() const {
  return _internal_protectedmirrorshaperight_size();
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::mutable_protectedmirrorshaperight(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeRight)
  return protectedmirrorshaperight_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >*
configBrake_t::mutable_protectedmirrorshaperight() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeRight)
  return &protectedmirrorshaperight_;
}
inline const ::pb::cml::vec2_df_pod::Vec2Df_POD& configBrake_t::_internal_protectedmirrorshaperight(int index) const {
  return protectedmirrorshaperight_.Get(index);
}
inline const ::pb::cml::vec2_df_pod::Vec2Df_POD& configBrake_t::protectedmirrorshaperight(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeRight)
  return _internal_protectedmirrorshaperight(index);
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::_internal_add_protectedmirrorshaperight() {
  return protectedmirrorshaperight_.Add();
}
inline ::pb::cml::vec2_df_pod::Vec2Df_POD* configBrake_t::add_protectedmirrorshaperight() {
  // @@protoc_insertion_point(field_add:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeRight)
  return _internal_add_protectedmirrorshaperight();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cml::vec2_df_pod::Vec2Df_POD >&
configBrake_t::protectedmirrorshaperight() const {
  // @@protoc_insertion_point(field_list:pb.mf_lsca.config_brake_t.configBrake_t.protectedMirrorShapeRight)
  return protectedmirrorshaperight_;
}

// optional float enlargementFront_m = 3610;
inline bool configBrake_t::_internal_has_enlargementfront_m() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool configBrake_t::has_enlargementfront_m() const {
  return _internal_has_enlargementfront_m();
}
inline void configBrake_t::clear_enlargementfront_m() {
  enlargementfront_m_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline float configBrake_t::_internal_enlargementfront_m() const {
  return enlargementfront_m_;
}
inline float configBrake_t::enlargementfront_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.enlargementFront_m)
  return _internal_enlargementfront_m();
}
inline void configBrake_t::_internal_set_enlargementfront_m(float value) {
  _has_bits_[1] |= 0x00004000u;
  enlargementfront_m_ = value;
}
inline void configBrake_t::set_enlargementfront_m(float value) {
  _internal_set_enlargementfront_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.enlargementFront_m)
}

// optional float enlargementRear_m = 1339;
inline bool configBrake_t::_internal_has_enlargementrear_m() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool configBrake_t::has_enlargementrear_m() const {
  return _internal_has_enlargementrear_m();
}
inline void configBrake_t::clear_enlargementrear_m() {
  enlargementrear_m_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float configBrake_t::_internal_enlargementrear_m() const {
  return enlargementrear_m_;
}
inline float configBrake_t::enlargementrear_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.enlargementRear_m)
  return _internal_enlargementrear_m();
}
inline void configBrake_t::_internal_set_enlargementrear_m(float value) {
  _has_bits_[0] |= 0x00040000u;
  enlargementrear_m_ = value;
}
inline void configBrake_t::set_enlargementrear_m(float value) {
  _internal_set_enlargementrear_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.enlargementRear_m)
}

// optional float enlargementSide_m = 262;
inline bool configBrake_t::_internal_has_enlargementside_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool configBrake_t::has_enlargementside_m() const {
  return _internal_has_enlargementside_m();
}
inline void configBrake_t::clear_enlargementside_m() {
  enlargementside_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float configBrake_t::_internal_enlargementside_m() const {
  return enlargementside_m_;
}
inline float configBrake_t::enlargementside_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.enlargementSide_m)
  return _internal_enlargementside_m();
}
inline void configBrake_t::_internal_set_enlargementside_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  enlargementside_m_ = value;
}
inline void configBrake_t::set_enlargementside_m(float value) {
  _internal_set_enlargementside_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.enlargementSide_m)
}

// optional float warnTime_s = 170;
inline bool configBrake_t::_internal_has_warntime_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool configBrake_t::has_warntime_s() const {
  return _internal_has_warntime_s();
}
inline void configBrake_t::clear_warntime_s() {
  warntime_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float configBrake_t::_internal_warntime_s() const {
  return warntime_s_;
}
inline float configBrake_t::warntime_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.warnTime_s)
  return _internal_warntime_s();
}
inline void configBrake_t::_internal_set_warntime_s(float value) {
  _has_bits_[0] |= 0x00000004u;
  warntime_s_ = value;
}
inline void configBrake_t::set_warntime_s(float value) {
  _internal_set_warntime_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.warnTime_s)
}

// optional float lowerActivationSpeedForwards_ms = 1858;
inline bool configBrake_t::_internal_has_loweractivationspeedforwards_ms() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool configBrake_t::has_loweractivationspeedforwards_ms() const {
  return _internal_has_loweractivationspeedforwards_ms();
}
inline void configBrake_t::clear_loweractivationspeedforwards_ms() {
  loweractivationspeedforwards_ms_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float configBrake_t::_internal_loweractivationspeedforwards_ms() const {
  return loweractivationspeedforwards_ms_;
}
inline float configBrake_t::loweractivationspeedforwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.lowerActivationSpeedForwards_ms)
  return _internal_loweractivationspeedforwards_ms();
}
inline void configBrake_t::_internal_set_loweractivationspeedforwards_ms(float value) {
  _has_bits_[0] |= 0x40000000u;
  loweractivationspeedforwards_ms_ = value;
}
inline void configBrake_t::set_loweractivationspeedforwards_ms(float value) {
  _internal_set_loweractivationspeedforwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.lowerActivationSpeedForwards_ms)
}

// optional float upperActivationSpeedForwards_ms = 3994;
inline bool configBrake_t::_internal_has_upperactivationspeedforwards_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool configBrake_t::has_upperactivationspeedforwards_ms() const {
  return _internal_has_upperactivationspeedforwards_ms();
}
inline void configBrake_t::clear_upperactivationspeedforwards_ms() {
  upperactivationspeedforwards_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float configBrake_t::_internal_upperactivationspeedforwards_ms() const {
  return upperactivationspeedforwards_ms_;
}
inline float configBrake_t::upperactivationspeedforwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.upperActivationSpeedForwards_ms)
  return _internal_upperactivationspeedforwards_ms();
}
inline void configBrake_t::_internal_set_upperactivationspeedforwards_ms(float value) {
  _has_bits_[0] |= 0x00000002u;
  upperactivationspeedforwards_ms_ = value;
}
inline void configBrake_t::set_upperactivationspeedforwards_ms(float value) {
  _internal_set_upperactivationspeedforwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.upperActivationSpeedForwards_ms)
}

// optional float lowerDeactivationSpeedForwards_ms = 885;
inline bool configBrake_t::_internal_has_lowerdeactivationspeedforwards_ms() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool configBrake_t::has_lowerdeactivationspeedforwards_ms() const {
  return _internal_has_lowerdeactivationspeedforwards_ms();
}
inline void configBrake_t::clear_lowerdeactivationspeedforwards_ms() {
  lowerdeactivationspeedforwards_ms_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float configBrake_t::_internal_lowerdeactivationspeedforwards_ms() const {
  return lowerdeactivationspeedforwards_ms_;
}
inline float configBrake_t::lowerdeactivationspeedforwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.lowerDeactivationSpeedForwards_ms)
  return _internal_lowerdeactivationspeedforwards_ms();
}
inline void configBrake_t::_internal_set_lowerdeactivationspeedforwards_ms(float value) {
  _has_bits_[0] |= 0x00004000u;
  lowerdeactivationspeedforwards_ms_ = value;
}
inline void configBrake_t::set_lowerdeactivationspeedforwards_ms(float value) {
  _internal_set_lowerdeactivationspeedforwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.lowerDeactivationSpeedForwards_ms)
}

// optional float upperDeactivationSpeedForwards_ms = 1789;
inline bool configBrake_t::_internal_has_upperdeactivationspeedforwards_ms() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool configBrake_t::has_upperdeactivationspeedforwards_ms() const {
  return _internal_has_upperdeactivationspeedforwards_ms();
}
inline void configBrake_t::clear_upperdeactivationspeedforwards_ms() {
  upperdeactivationspeedforwards_ms_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float configBrake_t::_internal_upperdeactivationspeedforwards_ms() const {
  return upperdeactivationspeedforwards_ms_;
}
inline float configBrake_t::upperdeactivationspeedforwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.upperDeactivationSpeedForwards_ms)
  return _internal_upperdeactivationspeedforwards_ms();
}
inline void configBrake_t::_internal_set_upperdeactivationspeedforwards_ms(float value) {
  _has_bits_[0] |= 0x20000000u;
  upperdeactivationspeedforwards_ms_ = value;
}
inline void configBrake_t::set_upperdeactivationspeedforwards_ms(float value) {
  _internal_set_upperdeactivationspeedforwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.upperDeactivationSpeedForwards_ms)
}

// optional float lowerActivationSpeedBackwards_ms = 2600;
inline bool configBrake_t::_internal_has_loweractivationspeedbackwards_ms() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool configBrake_t::has_loweractivationspeedbackwards_ms() const {
  return _internal_has_loweractivationspeedbackwards_ms();
}
inline void configBrake_t::clear_loweractivationspeedbackwards_ms() {
  loweractivationspeedbackwards_ms_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float configBrake_t::_internal_loweractivationspeedbackwards_ms() const {
  return loweractivationspeedbackwards_ms_;
}
inline float configBrake_t::loweractivationspeedbackwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.lowerActivationSpeedBackwards_ms)
  return _internal_loweractivationspeedbackwards_ms();
}
inline void configBrake_t::_internal_set_loweractivationspeedbackwards_ms(float value) {
  _has_bits_[1] |= 0x00000100u;
  loweractivationspeedbackwards_ms_ = value;
}
inline void configBrake_t::set_loweractivationspeedbackwards_ms(float value) {
  _internal_set_loweractivationspeedbackwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.lowerActivationSpeedBackwards_ms)
}

// optional float upperActivationSpeedBackwards_ms = 2668;
inline bool configBrake_t::_internal_has_upperactivationspeedbackwards_ms() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool configBrake_t::has_upperactivationspeedbackwards_ms() const {
  return _internal_has_upperactivationspeedbackwards_ms();
}
inline void configBrake_t::clear_upperactivationspeedbackwards_ms() {
  upperactivationspeedbackwards_ms_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float configBrake_t::_internal_upperactivationspeedbackwards_ms() const {
  return upperactivationspeedbackwards_ms_;
}
inline float configBrake_t::upperactivationspeedbackwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.upperActivationSpeedBackwards_ms)
  return _internal_upperactivationspeedbackwards_ms();
}
inline void configBrake_t::_internal_set_upperactivationspeedbackwards_ms(float value) {
  _has_bits_[1] |= 0x00000200u;
  upperactivationspeedbackwards_ms_ = value;
}
inline void configBrake_t::set_upperactivationspeedbackwards_ms(float value) {
  _internal_set_upperactivationspeedbackwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.upperActivationSpeedBackwards_ms)
}

// optional float lowerDeactivationSpeedBackwards_ms = 827;
inline bool configBrake_t::_internal_has_lowerdeactivationspeedbackwards_ms() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool configBrake_t::has_lowerdeactivationspeedbackwards_ms() const {
  return _internal_has_lowerdeactivationspeedbackwards_ms();
}
inline void configBrake_t::clear_lowerdeactivationspeedbackwards_ms() {
  lowerdeactivationspeedbackwards_ms_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float configBrake_t::_internal_lowerdeactivationspeedbackwards_ms() const {
  return lowerdeactivationspeedbackwards_ms_;
}
inline float configBrake_t::lowerdeactivationspeedbackwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.lowerDeactivationSpeedBackwards_ms)
  return _internal_lowerdeactivationspeedbackwards_ms();
}
inline void configBrake_t::_internal_set_lowerdeactivationspeedbackwards_ms(float value) {
  _has_bits_[0] |= 0x00001000u;
  lowerdeactivationspeedbackwards_ms_ = value;
}
inline void configBrake_t::set_lowerdeactivationspeedbackwards_ms(float value) {
  _internal_set_lowerdeactivationspeedbackwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.lowerDeactivationSpeedBackwards_ms)
}

// optional float upperDeactivationSpeedBackwards_ms = 227;
inline bool configBrake_t::_internal_has_upperdeactivationspeedbackwards_ms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool configBrake_t::has_upperdeactivationspeedbackwards_ms() const {
  return _internal_has_upperdeactivationspeedbackwards_ms();
}
inline void configBrake_t::clear_upperdeactivationspeedbackwards_ms() {
  upperdeactivationspeedbackwards_ms_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float configBrake_t::_internal_upperdeactivationspeedbackwards_ms() const {
  return upperdeactivationspeedbackwards_ms_;
}
inline float configBrake_t::upperdeactivationspeedbackwards_ms() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.upperDeactivationSpeedBackwards_ms)
  return _internal_upperdeactivationspeedbackwards_ms();
}
inline void configBrake_t::_internal_set_upperdeactivationspeedbackwards_ms(float value) {
  _has_bits_[0] |= 0x00000008u;
  upperdeactivationspeedbackwards_ms_ = value;
}
inline void configBrake_t::set_upperdeactivationspeedbackwards_ms(float value) {
  _internal_set_upperdeactivationspeedbackwards_ms(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.upperDeactivationSpeedBackwards_ms)
}

// optional float maximumOverrideDistance_m = 611;
inline bool configBrake_t::_internal_has_maximumoverridedistance_m() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool configBrake_t::has_maximumoverridedistance_m() const {
  return _internal_has_maximumoverridedistance_m();
}
inline void configBrake_t::clear_maximumoverridedistance_m() {
  maximumoverridedistance_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float configBrake_t::_internal_maximumoverridedistance_m() const {
  return maximumoverridedistance_m_;
}
inline float configBrake_t::maximumoverridedistance_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.maximumOverrideDistance_m)
  return _internal_maximumoverridedistance_m();
}
inline void configBrake_t::_internal_set_maximumoverridedistance_m(float value) {
  _has_bits_[0] |= 0x00000040u;
  maximumoverridedistance_m_ = value;
}
inline void configBrake_t::set_maximumoverridedistance_m(float value) {
  _internal_set_maximumoverridedistance_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.maximumOverrideDistance_m)
}

// optional float autoContinueOverrideDistance_m = 840;
inline bool configBrake_t::_internal_has_autocontinueoverridedistance_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool configBrake_t::has_autocontinueoverridedistance_m() const {
  return _internal_has_autocontinueoverridedistance_m();
}
inline void configBrake_t::clear_autocontinueoverridedistance_m() {
  autocontinueoverridedistance_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float configBrake_t::_internal_autocontinueoverridedistance_m() const {
  return autocontinueoverridedistance_m_;
}
inline float configBrake_t::autocontinueoverridedistance_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.autoContinueOverrideDistance_m)
  return _internal_autocontinueoverridedistance_m();
}
inline void configBrake_t::_internal_set_autocontinueoverridedistance_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  autocontinueoverridedistance_m_ = value;
}
inline void configBrake_t::set_autocontinueoverridedistance_m(float value) {
  _internal_set_autocontinueoverridedistance_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.autoContinueOverrideDistance_m)
}

// optional float marginDelay_s = 663;
inline bool configBrake_t::_internal_has_margindelay_s() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool configBrake_t::has_margindelay_s() const {
  return _internal_has_margindelay_s();
}
inline void configBrake_t::clear_margindelay_s() {
  margindelay_s_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float configBrake_t::_internal_margindelay_s() const {
  return margindelay_s_;
}
inline float configBrake_t::margindelay_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.marginDelay_s)
  return _internal_margindelay_s();
}
inline void configBrake_t::_internal_set_margindelay_s(float value) {
  _has_bits_[0] |= 0x00000080u;
  margindelay_s_ = value;
}
inline void configBrake_t::set_margindelay_s(float value) {
  _internal_set_margindelay_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.marginDelay_s)
}

// optional float standStillTime_s = 3330;
inline bool configBrake_t::_internal_has_standstilltime_s() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool configBrake_t::has_standstilltime_s() const {
  return _internal_has_standstilltime_s();
}
inline void configBrake_t::clear_standstilltime_s() {
  standstilltime_s_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline float configBrake_t::_internal_standstilltime_s() const {
  return standstilltime_s_;
}
inline float configBrake_t::standstilltime_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.standStillTime_s)
  return _internal_standstilltime_s();
}
inline void configBrake_t::_internal_set_standstilltime_s(float value) {
  _has_bits_[1] |= 0x00001000u;
  standstilltime_s_ = value;
}
inline void configBrake_t::set_standstilltime_s(float value) {
  _internal_set_standstilltime_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.standStillTime_s)
}

// optional float ignoreTrailerX_m = 3508;
inline bool configBrake_t::_internal_has_ignoretrailerx_m() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool configBrake_t::has_ignoretrailerx_m() const {
  return _internal_has_ignoretrailerx_m();
}
inline void configBrake_t::clear_ignoretrailerx_m() {
  ignoretrailerx_m_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline float configBrake_t::_internal_ignoretrailerx_m() const {
  return ignoretrailerx_m_;
}
inline float configBrake_t::ignoretrailerx_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.ignoreTrailerX_m)
  return _internal_ignoretrailerx_m();
}
inline void configBrake_t::_internal_set_ignoretrailerx_m(float value) {
  _has_bits_[1] |= 0x00002000u;
  ignoretrailerx_m_ = value;
}
inline void configBrake_t::set_ignoretrailerx_m(float value) {
  _internal_set_ignoretrailerx_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.ignoreTrailerX_m)
}

// optional float rimProtectionSpeed_mps = 1451;
inline bool configBrake_t::_internal_has_rimprotectionspeed_mps() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool configBrake_t::has_rimprotectionspeed_mps() const {
  return _internal_has_rimprotectionspeed_mps();
}
inline void configBrake_t::clear_rimprotectionspeed_mps() {
  rimprotectionspeed_mps_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float configBrake_t::_internal_rimprotectionspeed_mps() const {
  return rimprotectionspeed_mps_;
}
inline float configBrake_t::rimprotectionspeed_mps() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.rimProtectionSpeed_mps)
  return _internal_rimprotectionspeed_mps();
}
inline void configBrake_t::_internal_set_rimprotectionspeed_mps(float value) {
  _has_bits_[0] |= 0x00080000u;
  rimprotectionspeed_mps_ = value;
}
inline void configBrake_t::set_rimprotectionspeed_mps(float value) {
  _internal_set_rimprotectionspeed_mps(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.rimProtectionSpeed_mps)
}

// optional float rimProtectionAngle_deg = 357;
inline bool configBrake_t::_internal_has_rimprotectionangle_deg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool configBrake_t::has_rimprotectionangle_deg() const {
  return _internal_has_rimprotectionangle_deg();
}
inline void configBrake_t::clear_rimprotectionangle_deg() {
  rimprotectionangle_deg_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float configBrake_t::_internal_rimprotectionangle_deg() const {
  return rimprotectionangle_deg_;
}
inline float configBrake_t::rimprotectionangle_deg() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.rimProtectionAngle_deg)
  return _internal_rimprotectionangle_deg();
}
inline void configBrake_t::_internal_set_rimprotectionangle_deg(float value) {
  _has_bits_[0] |= 0x00000020u;
  rimprotectionangle_deg_ = value;
}
inline void configBrake_t::set_rimprotectionangle_deg(float value) {
  _internal_set_rimprotectionangle_deg(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.rimProtectionAngle_deg)
}

// optional uint32 minTriggerCountStaticBrake_nu = 2944;
inline bool configBrake_t::_internal_has_mintriggercountstaticbrake_nu() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool configBrake_t::has_mintriggercountstaticbrake_nu() const {
  return _internal_has_mintriggercountstaticbrake_nu();
}
inline void configBrake_t::clear_mintriggercountstaticbrake_nu() {
  mintriggercountstaticbrake_nu_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::_internal_mintriggercountstaticbrake_nu() const {
  return mintriggercountstaticbrake_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::mintriggercountstaticbrake_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.minTriggerCountStaticBrake_nu)
  return _internal_mintriggercountstaticbrake_nu();
}
inline void configBrake_t::_internal_set_mintriggercountstaticbrake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  mintriggercountstaticbrake_nu_ = value;
}
inline void configBrake_t::set_mintriggercountstaticbrake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mintriggercountstaticbrake_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.minTriggerCountStaticBrake_nu)
}

// optional uint32 minHeightConfidence_perc = 1297;
inline bool configBrake_t::_internal_has_minheightconfidence_perc() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool configBrake_t::has_minheightconfidence_perc() const {
  return _internal_has_minheightconfidence_perc();
}
inline void configBrake_t::clear_minheightconfidence_perc() {
  minheightconfidence_perc_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::_internal_minheightconfidence_perc() const {
  return minheightconfidence_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::minheightconfidence_perc() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.minHeightConfidence_perc)
  return _internal_minheightconfidence_perc();
}
inline void configBrake_t::_internal_set_minheightconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  minheightconfidence_perc_ = value;
}
inline void configBrake_t::set_minheightconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minheightconfidence_perc(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.minHeightConfidence_perc)
}

// optional uint32 minClassConfidence_perc = 1041;
inline bool configBrake_t::_internal_has_minclassconfidence_perc() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool configBrake_t::has_minclassconfidence_perc() const {
  return _internal_has_minclassconfidence_perc();
}
inline void configBrake_t::clear_minclassconfidence_perc() {
  minclassconfidence_perc_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::_internal_minclassconfidence_perc() const {
  return minclassconfidence_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::minclassconfidence_perc() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.minClassConfidence_perc)
  return _internal_minclassconfidence_perc();
}
inline void configBrake_t::_internal_set_minclassconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  minclassconfidence_perc_ = value;
}
inline void configBrake_t::set_minclassconfidence_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minclassconfidence_perc(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.minClassConfidence_perc)
}

// optional uint32 minStaticObjectProbability_perc = 3245;
inline bool configBrake_t::_internal_has_minstaticobjectprobability_perc() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool configBrake_t::has_minstaticobjectprobability_perc() const {
  return _internal_has_minstaticobjectprobability_perc();
}
inline void configBrake_t::clear_minstaticobjectprobability_perc() {
  minstaticobjectprobability_perc_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::_internal_minstaticobjectprobability_perc() const {
  return minstaticobjectprobability_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configBrake_t::minstaticobjectprobability_perc() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.minStaticObjectProbability_perc)
  return _internal_minstaticobjectprobability_perc();
}
inline void configBrake_t::_internal_set_minstaticobjectprobability_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  minstaticobjectprobability_perc_ = value;
}
inline void configBrake_t::set_minstaticobjectprobability_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minstaticobjectprobability_perc(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.minStaticObjectProbability_perc)
}

// optional bool protectBody_nu = 964;
inline bool configBrake_t::_internal_has_protectbody_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool configBrake_t::has_protectbody_nu() const {
  return _internal_has_protectbody_nu();
}
inline void configBrake_t::clear_protectbody_nu() {
  protectbody_nu_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool configBrake_t::_internal_protectbody_nu() const {
  return protectbody_nu_;
}
inline bool configBrake_t::protectbody_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectBody_nu)
  return _internal_protectbody_nu();
}
inline void configBrake_t::_internal_set_protectbody_nu(bool value) {
  _has_bits_[0] |= 0x00000100u;
  protectbody_nu_ = value;
}
inline void configBrake_t::set_protectbody_nu(bool value) {
  _internal_set_protectbody_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.protectBody_nu)
}

// optional bool protectWheel_nu = 781;
inline bool configBrake_t::_internal_has_protectwheel_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool configBrake_t::has_protectwheel_nu() const {
  return _internal_has_protectwheel_nu();
}
inline void configBrake_t::clear_protectwheel_nu() {
  protectwheel_nu_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool configBrake_t::_internal_protectwheel_nu() const {
  return protectwheel_nu_;
}
inline bool configBrake_t::protectwheel_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectWheel_nu)
  return _internal_protectwheel_nu();
}
inline void configBrake_t::_internal_set_protectwheel_nu(bool value) {
  _has_bits_[0] |= 0x00000200u;
  protectwheel_nu_ = value;
}
inline void configBrake_t::set_protectwheel_nu(bool value) {
  _internal_set_protectwheel_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.protectWheel_nu)
}

// optional bool protectRim_nu = 5;
inline bool configBrake_t::_internal_has_protectrim_nu() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool configBrake_t::has_protectrim_nu() const {
  return _internal_has_protectrim_nu();
}
inline void configBrake_t::clear_protectrim_nu() {
  protectrim_nu_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool configBrake_t::_internal_protectrim_nu() const {
  return protectrim_nu_;
}
inline bool configBrake_t::protectrim_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectRim_nu)
  return _internal_protectrim_nu();
}
inline void configBrake_t::_internal_set_protectrim_nu(bool value) {
  _has_bits_[0] |= 0x00000400u;
  protectrim_nu_ = value;
}
inline void configBrake_t::set_protectrim_nu(bool value) {
  _internal_set_protectrim_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.protectRim_nu)
}

// optional bool protectMirror_nu = 1005;
inline bool configBrake_t::_internal_has_protectmirror_nu() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool configBrake_t::has_protectmirror_nu() const {
  return _internal_has_protectmirror_nu();
}
inline void configBrake_t::clear_protectmirror_nu() {
  protectmirror_nu_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool configBrake_t::_internal_protectmirror_nu() const {
  return protectmirror_nu_;
}
inline bool configBrake_t::protectmirror_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectMirror_nu)
  return _internal_protectmirror_nu();
}
inline void configBrake_t::_internal_set_protectmirror_nu(bool value) {
  _has_bits_[0] |= 0x00000800u;
  protectmirror_nu_ = value;
}
inline void configBrake_t::set_protectmirror_nu(bool value) {
  _internal_set_protectmirror_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.protectMirror_nu)
}

// optional bool protectHitch_nu = 1866;
inline bool configBrake_t::_internal_has_protecthitch_nu() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool configBrake_t::has_protecthitch_nu() const {
  return _internal_has_protecthitch_nu();
}
inline void configBrake_t::clear_protecthitch_nu() {
  protecthitch_nu_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool configBrake_t::_internal_protecthitch_nu() const {
  return protecthitch_nu_;
}
inline bool configBrake_t::protecthitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.protectHitch_nu)
  return _internal_protecthitch_nu();
}
inline void configBrake_t::_internal_set_protecthitch_nu(bool value) {
  _has_bits_[1] |= 0x00000008u;
  protecthitch_nu_ = value;
}
inline void configBrake_t::set_protecthitch_nu(bool value) {
  _internal_set_protecthitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.protectHitch_nu)
}

// optional bool comfortInManual_nu = 2766;
inline bool configBrake_t::_internal_has_comfortinmanual_nu() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool configBrake_t::has_comfortinmanual_nu() const {
  return _internal_has_comfortinmanual_nu();
}
inline void configBrake_t::clear_comfortinmanual_nu() {
  comfortinmanual_nu_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool configBrake_t::_internal_comfortinmanual_nu() const {
  return comfortinmanual_nu_;
}
inline bool configBrake_t::comfortinmanual_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.comfortInManual_nu)
  return _internal_comfortinmanual_nu();
}
inline void configBrake_t::_internal_set_comfortinmanual_nu(bool value) {
  _has_bits_[1] |= 0x00000010u;
  comfortinmanual_nu_ = value;
}
inline void configBrake_t::set_comfortinmanual_nu(bool value) {
  _internal_set_comfortinmanual_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.comfortInManual_nu)
}

// optional bool autoContinue_nu = 1844;
inline bool configBrake_t::_internal_has_autocontinue_nu() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool configBrake_t::has_autocontinue_nu() const {
  return _internal_has_autocontinue_nu();
}
inline void configBrake_t::clear_autocontinue_nu() {
  autocontinue_nu_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool configBrake_t::_internal_autocontinue_nu() const {
  return autocontinue_nu_;
}
inline bool configBrake_t::autocontinue_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.autoContinue_nu)
  return _internal_autocontinue_nu();
}
inline void configBrake_t::_internal_set_autocontinue_nu(bool value) {
  _has_bits_[1] |= 0x00000020u;
  autocontinue_nu_ = value;
}
inline void configBrake_t::set_autocontinue_nu(bool value) {
  _internal_set_autocontinue_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.autoContinue_nu)
}

// optional bool warnHigh_nu = 2879;
inline bool configBrake_t::_internal_has_warnhigh_nu() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool configBrake_t::has_warnhigh_nu() const {
  return _internal_has_warnhigh_nu();
}
inline void configBrake_t::clear_warnhigh_nu() {
  warnhigh_nu_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool configBrake_t::_internal_warnhigh_nu() const {
  return warnhigh_nu_;
}
inline bool configBrake_t::warnhigh_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.warnHigh_nu)
  return _internal_warnhigh_nu();
}
inline void configBrake_t::_internal_set_warnhigh_nu(bool value) {
  _has_bits_[1] |= 0x00000040u;
  warnhigh_nu_ = value;
}
inline void configBrake_t::set_warnhigh_nu(bool value) {
  _internal_set_warnhigh_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.warnHigh_nu)
}

// optional bool warnLow_nu = 536;
inline bool configBrake_t::_internal_has_warnlow_nu() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool configBrake_t::has_warnlow_nu() const {
  return _internal_has_warnlow_nu();
}
inline void configBrake_t::clear_warnlow_nu() {
  warnlow_nu_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool configBrake_t::_internal_warnlow_nu() const {
  return warnlow_nu_;
}
inline bool configBrake_t::warnlow_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.warnLow_nu)
  return _internal_warnlow_nu();
}
inline void configBrake_t::_internal_set_warnlow_nu(bool value) {
  _has_bits_[0] |= 0x00100000u;
  warnlow_nu_ = value;
}
inline void configBrake_t::set_warnlow_nu(bool value) {
  _internal_set_warnlow_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.warnLow_nu)
}

// optional bool enableBrakeLow_nu = 1003;
inline bool configBrake_t::_internal_has_enablebrakelow_nu() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool configBrake_t::has_enablebrakelow_nu() const {
  return _internal_has_enablebrakelow_nu();
}
inline void configBrake_t::clear_enablebrakelow_nu() {
  enablebrakelow_nu_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool configBrake_t::_internal_enablebrakelow_nu() const {
  return enablebrakelow_nu_;
}
inline bool configBrake_t::enablebrakelow_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.enableBrakeLow_nu)
  return _internal_enablebrakelow_nu();
}
inline void configBrake_t::_internal_set_enablebrakelow_nu(bool value) {
  _has_bits_[0] |= 0x00200000u;
  enablebrakelow_nu_ = value;
}
inline void configBrake_t::set_enablebrakelow_nu(bool value) {
  _internal_set_enablebrakelow_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.enableBrakeLow_nu)
}

// optional bool enableBrakeHigh_nu = 2983;
inline bool configBrake_t::_internal_has_enablebrakehigh_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool configBrake_t::has_enablebrakehigh_nu() const {
  return _internal_has_enablebrakehigh_nu();
}
inline void configBrake_t::clear_enablebrakehigh_nu() {
  enablebrakehigh_nu_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool configBrake_t::_internal_enablebrakehigh_nu() const {
  return enablebrakehigh_nu_;
}
inline bool configBrake_t::enablebrakehigh_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.enableBrakeHigh_nu)
  return _internal_enablebrakehigh_nu();
}
inline void configBrake_t::_internal_set_enablebrakehigh_nu(bool value) {
  _has_bits_[0] |= 0x00400000u;
  enablebrakehigh_nu_ = value;
}
inline void configBrake_t::set_enablebrakehigh_nu(bool value) {
  _internal_set_enablebrakehigh_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.enableBrakeHigh_nu)
}

// optional bool drivingTubeEnabled_nu = 2003;
inline bool configBrake_t::_internal_has_drivingtubeenabled_nu() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool configBrake_t::has_drivingtubeenabled_nu() const {
  return _internal_has_drivingtubeenabled_nu();
}
inline void configBrake_t::clear_drivingtubeenabled_nu() {
  drivingtubeenabled_nu_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool configBrake_t::_internal_drivingtubeenabled_nu() const {
  return drivingtubeenabled_nu_;
}
inline bool configBrake_t::drivingtubeenabled_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.drivingTubeEnabled_nu)
  return _internal_drivingtubeenabled_nu();
}
inline void configBrake_t::_internal_set_drivingtubeenabled_nu(bool value) {
  _has_bits_[0] |= 0x00800000u;
  drivingtubeenabled_nu_ = value;
}
inline void configBrake_t::set_drivingtubeenabled_nu(bool value) {
  _internal_set_drivingtubeenabled_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.drivingTubeEnabled_nu)
}

// optional bool checkDoors_nu = 2707;
inline bool configBrake_t::_internal_has_checkdoors_nu() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool configBrake_t::has_checkdoors_nu() const {
  return _internal_has_checkdoors_nu();
}
inline void configBrake_t::clear_checkdoors_nu() {
  checkdoors_nu_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool configBrake_t::_internal_checkdoors_nu() const {
  return checkdoors_nu_;
}
inline bool configBrake_t::checkdoors_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.checkDoors_nu)
  return _internal_checkdoors_nu();
}
inline void configBrake_t::_internal_set_checkdoors_nu(bool value) {
  _has_bits_[0] |= 0x01000000u;
  checkdoors_nu_ = value;
}
inline void configBrake_t::set_checkdoors_nu(bool value) {
  _internal_set_checkdoors_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.checkDoors_nu)
}

// optional bool checkDriverSeatbelt_nu = 1677;
inline bool configBrake_t::_internal_has_checkdriverseatbelt_nu() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool configBrake_t::has_checkdriverseatbelt_nu() const {
  return _internal_has_checkdriverseatbelt_nu();
}
inline void configBrake_t::clear_checkdriverseatbelt_nu() {
  checkdriverseatbelt_nu_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool configBrake_t::_internal_checkdriverseatbelt_nu() const {
  return checkdriverseatbelt_nu_;
}
inline bool configBrake_t::checkdriverseatbelt_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.checkDriverSeatbelt_nu)
  return _internal_checkdriverseatbelt_nu();
}
inline void configBrake_t::_internal_set_checkdriverseatbelt_nu(bool value) {
  _has_bits_[0] |= 0x02000000u;
  checkdriverseatbelt_nu_ = value;
}
inline void configBrake_t::set_checkdriverseatbelt_nu(bool value) {
  _internal_set_checkdriverseatbelt_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.checkDriverSeatbelt_nu)
}

// optional bool checkTrunk_nu = 1989;
inline bool configBrake_t::_internal_has_checktrunk_nu() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool configBrake_t::has_checktrunk_nu() const {
  return _internal_has_checktrunk_nu();
}
inline void configBrake_t::clear_checktrunk_nu() {
  checktrunk_nu_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool configBrake_t::_internal_checktrunk_nu() const {
  return checktrunk_nu_;
}
inline bool configBrake_t::checktrunk_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.checkTrunk_nu)
  return _internal_checktrunk_nu();
}
inline void configBrake_t::_internal_set_checktrunk_nu(bool value) {
  _has_bits_[0] |= 0x04000000u;
  checktrunk_nu_ = value;
}
inline void configBrake_t::set_checktrunk_nu(bool value) {
  _internal_set_checktrunk_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.checkTrunk_nu)
}

// optional bool forwardBrakeEnabledIfTrunkOpen_nu = 312;
inline bool configBrake_t::_internal_has_forwardbrakeenablediftrunkopen_nu() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool configBrake_t::has_forwardbrakeenablediftrunkopen_nu() const {
  return _internal_has_forwardbrakeenablediftrunkopen_nu();
}
inline void configBrake_t::clear_forwardbrakeenablediftrunkopen_nu() {
  forwardbrakeenablediftrunkopen_nu_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool configBrake_t::_internal_forwardbrakeenablediftrunkopen_nu() const {
  return forwardbrakeenablediftrunkopen_nu_;
}
inline bool configBrake_t::forwardbrakeenablediftrunkopen_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.forwardBrakeEnabledIfTrunkOpen_nu)
  return _internal_forwardbrakeenablediftrunkopen_nu();
}
inline void configBrake_t::_internal_set_forwardbrakeenablediftrunkopen_nu(bool value) {
  _has_bits_[0] |= 0x08000000u;
  forwardbrakeenablediftrunkopen_nu_ = value;
}
inline void configBrake_t::set_forwardbrakeenablediftrunkopen_nu(bool value) {
  _internal_set_forwardbrakeenablediftrunkopen_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.forwardBrakeEnabledIfTrunkOpen_nu)
}

// optional bool checkHood_nu = 360;
inline bool configBrake_t::_internal_has_checkhood_nu() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool configBrake_t::has_checkhood_nu() const {
  return _internal_has_checkhood_nu();
}
inline void configBrake_t::clear_checkhood_nu() {
  checkhood_nu_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool configBrake_t::_internal_checkhood_nu() const {
  return checkhood_nu_;
}
inline bool configBrake_t::checkhood_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.checkHood_nu)
  return _internal_checkhood_nu();
}
inline void configBrake_t::_internal_set_checkhood_nu(bool value) {
  _has_bits_[0] |= 0x80000000u;
  checkhood_nu_ = value;
}
inline void configBrake_t::set_checkhood_nu(bool value) {
  _internal_set_checkhood_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.checkHood_nu)
}

// optional bool checkPedalOverrideGas_nu = 2733;
inline bool configBrake_t::_internal_has_checkpedaloverridegas_nu() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool configBrake_t::has_checkpedaloverridegas_nu() const {
  return _internal_has_checkpedaloverridegas_nu();
}
inline void configBrake_t::clear_checkpedaloverridegas_nu() {
  checkpedaloverridegas_nu_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool configBrake_t::_internal_checkpedaloverridegas_nu() const {
  return checkpedaloverridegas_nu_;
}
inline bool configBrake_t::checkpedaloverridegas_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.checkPedalOverrideGas_nu)
  return _internal_checkpedaloverridegas_nu();
}
inline void configBrake_t::_internal_set_checkpedaloverridegas_nu(bool value) {
  _has_bits_[1] |= 0x00000001u;
  checkpedaloverridegas_nu_ = value;
}
inline void configBrake_t::set_checkpedaloverridegas_nu(bool value) {
  _internal_set_checkpedaloverridegas_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.checkPedalOverrideGas_nu)
}

// optional bool checkPedalOverrideBrake_nu = 3222;
inline bool configBrake_t::_internal_has_checkpedaloverridebrake_nu() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool configBrake_t::has_checkpedaloverridebrake_nu() const {
  return _internal_has_checkpedaloverridebrake_nu();
}
inline void configBrake_t::clear_checkpedaloverridebrake_nu() {
  checkpedaloverridebrake_nu_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool configBrake_t::_internal_checkpedaloverridebrake_nu() const {
  return checkpedaloverridebrake_nu_;
}
inline bool configBrake_t::checkpedaloverridebrake_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.checkPedalOverrideBrake_nu)
  return _internal_checkpedaloverridebrake_nu();
}
inline void configBrake_t::_internal_set_checkpedaloverridebrake_nu(bool value) {
  _has_bits_[1] |= 0x00000002u;
  checkpedaloverridebrake_nu_ = value;
}
inline void configBrake_t::set_checkpedaloverridebrake_nu(bool value) {
  _internal_set_checkpedaloverridebrake_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.checkPedalOverrideBrake_nu)
}

// optional bool checkDriverSeatOccupied_nu = 3025;
inline bool configBrake_t::_internal_has_checkdriverseatoccupied_nu() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool configBrake_t::has_checkdriverseatoccupied_nu() const {
  return _internal_has_checkdriverseatoccupied_nu();
}
inline void configBrake_t::clear_checkdriverseatoccupied_nu() {
  checkdriverseatoccupied_nu_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool configBrake_t::_internal_checkdriverseatoccupied_nu() const {
  return checkdriverseatoccupied_nu_;
}
inline bool configBrake_t::checkdriverseatoccupied_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t.checkDriverSeatOccupied_nu)
  return _internal_checkdriverseatoccupied_nu();
}
inline void configBrake_t::_internal_set_checkdriverseatoccupied_nu(bool value) {
  _has_bits_[1] |= 0x00000004u;
  checkdriverseatoccupied_nu_ = value;
}
inline void configBrake_t::set_checkdriverseatoccupied_nu(bool value) {
  _internal_set_checkdriverseatoccupied_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.config_brake_t.configBrake_t.checkDriverSeatOccupied_nu)
}

// -------------------------------------------------------------------

// configBrake_t_array_port

// repeated .pb.mf_lsca.config_brake_t.configBrake_t data = 3940;
inline int configBrake_t_array_port::_internal_data_size() const {
  return data_.size();
}
inline int configBrake_t_array_port::data_size() const {
  return _internal_data_size();
}
inline void configBrake_t_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_lsca::config_brake_t::configBrake_t* configBrake_t_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.config_brake_t.configBrake_t_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::config_brake_t::configBrake_t >*
configBrake_t_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lsca.config_brake_t.configBrake_t_array_port.data)
  return &data_;
}
inline const ::pb::mf_lsca::config_brake_t::configBrake_t& configBrake_t_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_lsca::config_brake_t::configBrake_t& configBrake_t_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.config_brake_t.configBrake_t_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_lsca::config_brake_t::configBrake_t* configBrake_t_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_lsca::config_brake_t::configBrake_t* configBrake_t_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_lsca.config_brake_t.configBrake_t_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::config_brake_t::configBrake_t >&
configBrake_t_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_lsca.config_brake_t.configBrake_t_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config_brake_t
}  // namespace mf_lsca
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2fconfig_5fbrake_5ft_2eproto
