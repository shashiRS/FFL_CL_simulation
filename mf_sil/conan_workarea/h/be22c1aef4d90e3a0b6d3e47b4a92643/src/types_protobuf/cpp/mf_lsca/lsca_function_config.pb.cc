// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/lsca_function_config.proto

#include "mf_lsca/lsca_function_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fapplication_5ffeatures_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configApplicationFeatures_t_mf_5flsca_2fconfig_5fapplication_5ffeatures_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fbrake_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fdeveloper_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configDeveloper_t_mf_5flsca_2fconfig_5fdeveloper_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fgeneral_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_configGeneral_t_mf_5flsca_2fconfig_5fgeneral_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fpmp_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_configPmp_t_mf_5flsca_2fconfig_5fpmp_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fconfig_5fsteer_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto;
namespace pb {
namespace mf_lsca {
namespace lsca_function_config {
class LscaFunctionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LscaFunctionConfig> _instance;
} _LscaFunctionConfig_default_instance_;
class LscaFunctionConfig_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LscaFunctionConfig_array_port> _instance;
} _LscaFunctionConfig_array_port_default_instance_;
}  // namespace lsca_function_config
}  // namespace mf_lsca
}  // namespace pb
static void InitDefaultsscc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_;
    new (ptr) ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_configGeneral_t_mf_5flsca_2fconfig_5fgeneral_5ft_2eproto.base,
      &scc_info_configBrake_t_mf_5flsca_2fconfig_5fbrake_5ft_2eproto.base,
      &scc_info_configPmp_t_mf_5flsca_2fconfig_5fpmp_5ft_2eproto.base,
      &scc_info_configSteer_t_mf_5flsca_2fconfig_5fsteer_5ft_2eproto.base,
      &scc_info_configApplicationFeatures_t_mf_5flsca_2fconfig_5fapplication_5ffeatures_5ft_2eproto.base,
      &scc_info_configDeveloper_t_mf_5flsca_2fconfig_5fdeveloper_5ft_2eproto.base,}};

static void InitDefaultsscc_info_LscaFunctionConfig_array_port_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_array_port_default_instance_;
    new (ptr) ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LscaFunctionConfig_array_port_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LscaFunctionConfig_array_port_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto}, {
      &scc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, general_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, functionbrake_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, functionpmp_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, functionsteer_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, applicationfeatures_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig, developer_),
  7,
  2,
  6,
  4,
  3,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig)},
  { 21, 27, sizeof(::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"mf_lsca/lsca_function_config.proto\022\037pb"
  ".mf_lsca.lsca_function_config\032\027eco/signa"
  "l_header.proto\032\036mf_lsca/config_general_t"
  ".proto\032\034mf_lsca/config_brake_t.proto\032\032mf"
  "_lsca/config_pmp_t.proto\032\034mf_lsca/config"
  "_steer_t.proto\032+mf_lsca/config_applicati"
  "on_features_t.proto\032 mf_lsca/config_deve"
  "loper_t.proto\"\222\004\n\022LscaFunctionConfig\022\030\n\017"
  "uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 "
  "\001(\0132\".pb.eco.signal_header.SignalHeader\022"
  ">\n\007general\030\207\034 \001(\0132,.pb.mf_lsca.config_ge"
  "neral_t.configGeneral_t\022@\n\rfunctionBrake"
  "\030\343\013 \001(\0132(.pb.mf_lsca.config_brake_t.conf"
  "igBrake_t\022:\n\013functionPmp\030\214\n \001(\0132$.pb.mf_"
  "lsca.config_pmp_t.configPmp_t\022@\n\rfunctio"
  "nSteer\030\215\032 \001(\0132(.pb.mf_lsca.config_steer_"
  "t.configSteer_t\022c\n\023applicationFeatures\030\243"
  "\002 \001(\0132E.pb.mf_lsca.config_application_fe"
  "atures_t.configApplicationFeatures_t\022D\n\t"
  "developer\030\234\006 \001(\01320.pb.mf_lsca.config_dev"
  "eloper_t.configDeveloper_t\"c\n\035LscaFuncti"
  "onConfig_array_port\022B\n\004data\030\324\033 \003(\01323.pb."
  "mf_lsca.lsca_function_config.LscaFunctio"
  "nConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_deps[7] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fapplication_5ffeatures_5ft_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fbrake_5ft_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fdeveloper_5ft_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fgeneral_5ft_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fpmp_5ft_2eproto,
  &::descriptor_table_mf_5flsca_2fconfig_5fsteer_5ft_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_sccs[2] = {
  &scc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto.base,
  &scc_info_LscaFunctionConfig_array_port_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_once;
static bool descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto = {
  &descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_initialized, descriptor_table_protodef_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto, "mf_lsca/lsca_function_config.proto", 927,
  &descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_once, descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_sccs, descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto::offsets,
  file_level_metadata_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto, 2, file_level_enum_descriptors_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto, file_level_service_descriptors_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto), true);
namespace pb {
namespace mf_lsca {
namespace lsca_function_config {

// ===================================================================

void LscaFunctionConfig::InitAsDefaultInstance() {
  ::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_._instance.get_mutable()->general_ = const_cast< ::pb::mf_lsca::config_general_t::configGeneral_t*>(
      ::pb::mf_lsca::config_general_t::configGeneral_t::internal_default_instance());
  ::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_._instance.get_mutable()->functionbrake_ = const_cast< ::pb::mf_lsca::config_brake_t::configBrake_t*>(
      ::pb::mf_lsca::config_brake_t::configBrake_t::internal_default_instance());
  ::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_._instance.get_mutable()->functionpmp_ = const_cast< ::pb::mf_lsca::config_pmp_t::configPmp_t*>(
      ::pb::mf_lsca::config_pmp_t::configPmp_t::internal_default_instance());
  ::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_._instance.get_mutable()->functionsteer_ = const_cast< ::pb::mf_lsca::config_steer_t::configSteer_t*>(
      ::pb::mf_lsca::config_steer_t::configSteer_t::internal_default_instance());
  ::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_._instance.get_mutable()->applicationfeatures_ = const_cast< ::pb::mf_lsca::config_application_features_t::configApplicationFeatures_t*>(
      ::pb::mf_lsca::config_application_features_t::configApplicationFeatures_t::internal_default_instance());
  ::pb::mf_lsca::lsca_function_config::_LscaFunctionConfig_default_instance_._instance.get_mutable()->developer_ = const_cast< ::pb::mf_lsca::config_developer_t::configDeveloper_t*>(
      ::pb::mf_lsca::config_developer_t::configDeveloper_t::internal_default_instance());
}
class LscaFunctionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LscaFunctionConfig>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const LscaFunctionConfig* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::mf_lsca::config_general_t::configGeneral_t& general(const LscaFunctionConfig* msg);
  static void set_has_general(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::mf_lsca::config_brake_t::configBrake_t& functionbrake(const LscaFunctionConfig* msg);
  static void set_has_functionbrake(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::mf_lsca::config_pmp_t::configPmp_t& functionpmp(const LscaFunctionConfig* msg);
  static void set_has_functionpmp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::mf_lsca::config_steer_t::configSteer_t& functionsteer(const LscaFunctionConfig* msg);
  static void set_has_functionsteer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::mf_lsca::config_application_features_t::configApplicationFeatures_t& applicationfeatures(const LscaFunctionConfig* msg);
  static void set_has_applicationfeatures(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::mf_lsca::config_developer_t::configDeveloper_t& developer(const LscaFunctionConfig* msg);
  static void set_has_developer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
LscaFunctionConfig::_Internal::ssigheader(const LscaFunctionConfig* msg) {
  return *msg->ssigheader_;
}
const ::pb::mf_lsca::config_general_t::configGeneral_t&
LscaFunctionConfig::_Internal::general(const LscaFunctionConfig* msg) {
  return *msg->general_;
}
const ::pb::mf_lsca::config_brake_t::configBrake_t&
LscaFunctionConfig::_Internal::functionbrake(const LscaFunctionConfig* msg) {
  return *msg->functionbrake_;
}
const ::pb::mf_lsca::config_pmp_t::configPmp_t&
LscaFunctionConfig::_Internal::functionpmp(const LscaFunctionConfig* msg) {
  return *msg->functionpmp_;
}
const ::pb::mf_lsca::config_steer_t::configSteer_t&
LscaFunctionConfig::_Internal::functionsteer(const LscaFunctionConfig* msg) {
  return *msg->functionsteer_;
}
const ::pb::mf_lsca::config_application_features_t::configApplicationFeatures_t&
LscaFunctionConfig::_Internal::applicationfeatures(const LscaFunctionConfig* msg) {
  return *msg->applicationfeatures_;
}
const ::pb::mf_lsca::config_developer_t::configDeveloper_t&
LscaFunctionConfig::_Internal::developer(const LscaFunctionConfig* msg) {
  return *msg->developer_;
}
void LscaFunctionConfig::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LscaFunctionConfig::clear_general() {
  if (general_ != nullptr) general_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void LscaFunctionConfig::clear_functionbrake() {
  if (functionbrake_ != nullptr) functionbrake_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LscaFunctionConfig::clear_functionpmp() {
  if (functionpmp_ != nullptr) functionpmp_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LscaFunctionConfig::clear_functionsteer() {
  if (functionsteer_ != nullptr) functionsteer_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void LscaFunctionConfig::clear_applicationfeatures() {
  if (applicationfeatures_ != nullptr) applicationfeatures_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LscaFunctionConfig::clear_developer() {
  if (developer_ != nullptr) developer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LscaFunctionConfig::LscaFunctionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
}
LscaFunctionConfig::LscaFunctionConfig(const LscaFunctionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_applicationfeatures()) {
    applicationfeatures_ = new ::pb::mf_lsca::config_application_features_t::configApplicationFeatures_t(*from.applicationfeatures_);
  } else {
    applicationfeatures_ = nullptr;
  }
  if (from._internal_has_developer()) {
    developer_ = new ::pb::mf_lsca::config_developer_t::configDeveloper_t(*from.developer_);
  } else {
    developer_ = nullptr;
  }
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_functionpmp()) {
    functionpmp_ = new ::pb::mf_lsca::config_pmp_t::configPmp_t(*from.functionpmp_);
  } else {
    functionpmp_ = nullptr;
  }
  if (from._internal_has_functionbrake()) {
    functionbrake_ = new ::pb::mf_lsca::config_brake_t::configBrake_t(*from.functionbrake_);
  } else {
    functionbrake_ = nullptr;
  }
  if (from._internal_has_functionsteer()) {
    functionsteer_ = new ::pb::mf_lsca::config_steer_t::configSteer_t(*from.functionsteer_);
  } else {
    functionsteer_ = nullptr;
  }
  if (from._internal_has_general()) {
    general_ = new ::pb::mf_lsca::config_general_t::configGeneral_t(*from.general_);
  } else {
    general_ = nullptr;
  }
  uiversionnumber_ = from.uiversionnumber_;
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
}

void LscaFunctionConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto.base);
  ::memset(&applicationfeatures_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiversionnumber_) -
      reinterpret_cast<char*>(&applicationfeatures_)) + sizeof(uiversionnumber_));
}

LscaFunctionConfig::~LscaFunctionConfig() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  SharedDtor();
}

void LscaFunctionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete applicationfeatures_;
  if (this != internal_default_instance()) delete developer_;
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete functionpmp_;
  if (this != internal_default_instance()) delete functionbrake_;
  if (this != internal_default_instance()) delete functionsteer_;
  if (this != internal_default_instance()) delete general_;
}

void LscaFunctionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LscaFunctionConfig& LscaFunctionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LscaFunctionConfig_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LscaFunctionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicationfeatures_ != nullptr);
      applicationfeatures_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(developer_ != nullptr);
      developer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(functionpmp_ != nullptr);
      functionpmp_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(functionbrake_ != nullptr);
      functionbrake_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(functionsteer_ != nullptr);
      functionsteer_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(general_ != nullptr);
      general_->Clear();
    }
  }
  uiversionnumber_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LscaFunctionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.mf_lsca.config_application_features_t.configApplicationFeatures_t applicationFeatures = 291;
      case 291:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicationfeatures(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.config_developer_t.configDeveloper_t developer = 796;
      case 796:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_developer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.config_pmp_t.configPmp_t functionPmp = 1292;
      case 1292:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionpmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.config_brake_t.configBrake_t functionBrake = 1507;
      case 1507:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionbrake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.config_steer_t.configSteer_t functionSteer = 3341;
      case 3341:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_functionsteer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.config_general_t.configGeneral_t general = 3591;
      case 3591:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_general(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LscaFunctionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.mf_lsca.config_application_features_t.configApplicationFeatures_t applicationFeatures = 291;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        291, _Internal::applicationfeatures(this), target, stream);
  }

  // optional .pb.mf_lsca.config_developer_t.configDeveloper_t developer = 796;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        796, _Internal::developer(this), target, stream);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional .pb.mf_lsca.config_pmp_t.configPmp_t functionPmp = 1292;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1292, _Internal::functionpmp(this), target, stream);
  }

  // optional .pb.mf_lsca.config_brake_t.configBrake_t functionBrake = 1507;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1507, _Internal::functionbrake(this), target, stream);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional .pb.mf_lsca.config_steer_t.configSteer_t functionSteer = 3341;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3341, _Internal::functionsteer(this), target, stream);
  }

  // optional .pb.mf_lsca.config_general_t.configGeneral_t general = 3591;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3591, _Internal::general(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  return target;
}

size_t LscaFunctionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.mf_lsca.config_application_features_t.configApplicationFeatures_t applicationFeatures = 291;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicationfeatures_);
    }

    // optional .pb.mf_lsca.config_developer_t.configDeveloper_t developer = 796;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *developer_);
    }

    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.mf_lsca.config_pmp_t.configPmp_t functionPmp = 1292;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *functionpmp_);
    }

    // optional .pb.mf_lsca.config_brake_t.configBrake_t functionBrake = 1507;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *functionbrake_);
    }

    // optional .pb.mf_lsca.config_steer_t.configSteer_t functionSteer = 3341;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *functionsteer_);
    }

    // optional .pb.mf_lsca.config_general_t.configGeneral_t general = 3591;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *general_);
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LscaFunctionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LscaFunctionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LscaFunctionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
    MergeFrom(*source);
  }
}

void LscaFunctionConfig::MergeFrom(const LscaFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicationfeatures()->::pb::mf_lsca::config_application_features_t::configApplicationFeatures_t::MergeFrom(from._internal_applicationfeatures());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_developer()->::pb::mf_lsca::config_developer_t::configDeveloper_t::MergeFrom(from._internal_developer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_functionpmp()->::pb::mf_lsca::config_pmp_t::configPmp_t::MergeFrom(from._internal_functionpmp());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_functionbrake()->::pb::mf_lsca::config_brake_t::configBrake_t::MergeFrom(from._internal_functionbrake());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_functionsteer()->::pb::mf_lsca::config_steer_t::configSteer_t::MergeFrom(from._internal_functionsteer());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_general()->::pb::mf_lsca::config_general_t::configGeneral_t::MergeFrom(from._internal_general());
    }
    if (cached_has_bits & 0x00000080u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LscaFunctionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LscaFunctionConfig::CopyFrom(const LscaFunctionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LscaFunctionConfig::IsInitialized() const {
  return true;
}

void LscaFunctionConfig::InternalSwap(LscaFunctionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(applicationfeatures_, other->applicationfeatures_);
  swap(developer_, other->developer_);
  swap(ssigheader_, other->ssigheader_);
  swap(functionpmp_, other->functionpmp_);
  swap(functionbrake_, other->functionbrake_);
  swap(functionsteer_, other->functionsteer_);
  swap(general_, other->general_);
  swap(uiversionnumber_, other->uiversionnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LscaFunctionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LscaFunctionConfig_array_port::InitAsDefaultInstance() {
}
class LscaFunctionConfig_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<LscaFunctionConfig_array_port>()._has_bits_);
};

LscaFunctionConfig_array_port::LscaFunctionConfig_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
}
LscaFunctionConfig_array_port::LscaFunctionConfig_array_port(const LscaFunctionConfig_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
}

void LscaFunctionConfig_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LscaFunctionConfig_array_port_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto.base);
}

LscaFunctionConfig_array_port::~LscaFunctionConfig_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  SharedDtor();
}

void LscaFunctionConfig_array_port::SharedDtor() {
}

void LscaFunctionConfig_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LscaFunctionConfig_array_port& LscaFunctionConfig_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LscaFunctionConfig_array_port_mf_5flsca_2flsca_5ffunction_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LscaFunctionConfig_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LscaFunctionConfig_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_lsca.lsca_function_config.LscaFunctionConfig data = 3540;
      case 3540:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LscaFunctionConfig_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.lsca_function_config.LscaFunctionConfig data = 3540;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3540, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  return target;
}

size_t LscaFunctionConfig_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.lsca_function_config.LscaFunctionConfig data = 3540;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LscaFunctionConfig_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const LscaFunctionConfig_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LscaFunctionConfig_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
    MergeFrom(*source);
  }
}

void LscaFunctionConfig_array_port::MergeFrom(const LscaFunctionConfig_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void LscaFunctionConfig_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LscaFunctionConfig_array_port::CopyFrom(const LscaFunctionConfig_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.lsca_function_config.LscaFunctionConfig_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LscaFunctionConfig_array_port::IsInitialized() const {
  return true;
}

void LscaFunctionConfig_array_port::InternalSwap(LscaFunctionConfig_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LscaFunctionConfig_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lsca_function_config
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig* Arena::CreateMaybeMessage< ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port* Arena::CreateMaybeMessage< ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::lsca_function_config::LscaFunctionConfig_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
