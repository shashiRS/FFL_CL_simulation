// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/lsca_hmiport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2flsca_5fhmiport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2flsca_5fhmiport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "mf_lsca/lsca_warning_status.pb.h"
#include "mf_lsca/lsca_tube_marking.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2flsca_5fhmiport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5flsca_2flsca_5fhmiport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto;
namespace pb {
namespace mf_lsca {
namespace lsca_hmiport {
class LscaHMIPort;
class LscaHMIPortDefaultTypeInternal;
extern LscaHMIPortDefaultTypeInternal _LscaHMIPort_default_instance_;
class LscaHMIPort_array_port;
class LscaHMIPort_array_portDefaultTypeInternal;
extern LscaHMIPort_array_portDefaultTypeInternal _LscaHMIPort_array_port_default_instance_;
}  // namespace lsca_hmiport
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* Arena::CreateMaybeMessage<::pb::mf_lsca::lsca_hmiport::LscaHMIPort>(Arena*);
template<> ::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port* Arena::CreateMaybeMessage<::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_lsca {
namespace lsca_hmiport {

// ===================================================================

class LscaHMIPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.lsca_hmiport.LscaHMIPort) */ {
 public:
  LscaHMIPort();
  virtual ~LscaHMIPort();

  LscaHMIPort(const LscaHMIPort& from);
  LscaHMIPort(LscaHMIPort&& from) noexcept
    : LscaHMIPort() {
    *this = ::std::move(from);
  }

  inline LscaHMIPort& operator=(const LscaHMIPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline LscaHMIPort& operator=(LscaHMIPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LscaHMIPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LscaHMIPort* internal_default_instance() {
    return reinterpret_cast<const LscaHMIPort*>(
               &_LscaHMIPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LscaHMIPort& a, LscaHMIPort& b) {
    a.Swap(&b);
  }
  inline void Swap(LscaHMIPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LscaHMIPort* New() const final {
    return CreateMaybeMessage<LscaHMIPort>(nullptr);
  }

  LscaHMIPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LscaHMIPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LscaHMIPort& from);
  void MergeFrom(const LscaHMIPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LscaHMIPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.lsca_hmiport.LscaHMIPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto);
    return ::descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kWarningTubeFieldNumber = 3872,
    kCriticalObjectBrakeIDNuFieldNumber = 3,
    kWarningBodyFieldNumber = 1130,
    kWarningWheelFieldNumber = 1354,
    kWarningObjectFieldNumber = 1885,
    kUiVersionNumberFieldNumber = 2124,
    kActivateBrakeInterventionScreenNuFieldNumber = 2488,
    kEnforceHMIConfirmationNuFieldNumber = 1562,
    kRctraAlertLeftNuFieldNumber = 3894,
    kRctraAlertRightNuFieldNumber = 749,
    kDoorProtFLNuFieldNumber = 3633,
    kDoorProtFRNuFieldNumber = 1996,
    kDoorProtBLNuFieldNumber = 1847,
    kDoorProtBRNuFieldNumber = 3786,
    kDoorProtTrunkNuFieldNumber = 3162,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.mf_lsca.lsca_tube_marking.LSCA_TUBE_MARKING warningTube = 3872;
  bool has_warningtube() const;
  private:
  bool _internal_has_warningtube() const;
  public:
  void clear_warningtube();
  ::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING warningtube() const;
  void set_warningtube(::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING value);
  private:
  ::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING _internal_warningtube() const;
  void _internal_set_warningtube(::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING value);
  public:

  // optional uint32 criticalObjectBrakeID_nu = 3;
  bool has_criticalobjectbrakeid_nu() const;
  private:
  bool _internal_has_criticalobjectbrakeid_nu() const;
  public:
  void clear_criticalobjectbrakeid_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 criticalobjectbrakeid_nu() const;
  void set_criticalobjectbrakeid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_criticalobjectbrakeid_nu() const;
  void _internal_set_criticalobjectbrakeid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningBody = 1130;
  bool has_warningbody() const;
  private:
  bool _internal_has_warningbody() const;
  public:
  void clear_warningbody();
  ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS warningbody() const;
  void set_warningbody(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value);
  private:
  ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS _internal_warningbody() const;
  void _internal_set_warningbody(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value);
  public:

  // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningWheel = 1354;
  bool has_warningwheel() const;
  private:
  bool _internal_has_warningwheel() const;
  public:
  void clear_warningwheel();
  ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS warningwheel() const;
  void set_warningwheel(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value);
  private:
  ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS _internal_warningwheel() const;
  void _internal_set_warningwheel(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value);
  public:

  // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningObject = 1885;
  bool has_warningobject() const;
  private:
  bool _internal_has_warningobject() const;
  public:
  void clear_warningobject();
  ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS warningobject() const;
  void set_warningobject(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value);
  private:
  ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS _internal_warningobject() const;
  void _internal_set_warningobject(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool activateBrakeInterventionScreen_nu = 2488;
  bool has_activatebrakeinterventionscreen_nu() const;
  private:
  bool _internal_has_activatebrakeinterventionscreen_nu() const;
  public:
  void clear_activatebrakeinterventionscreen_nu();
  bool activatebrakeinterventionscreen_nu() const;
  void set_activatebrakeinterventionscreen_nu(bool value);
  private:
  bool _internal_activatebrakeinterventionscreen_nu() const;
  void _internal_set_activatebrakeinterventionscreen_nu(bool value);
  public:

  // optional bool enforceHMIConfirmation_nu = 1562;
  bool has_enforcehmiconfirmation_nu() const;
  private:
  bool _internal_has_enforcehmiconfirmation_nu() const;
  public:
  void clear_enforcehmiconfirmation_nu();
  bool enforcehmiconfirmation_nu() const;
  void set_enforcehmiconfirmation_nu(bool value);
  private:
  bool _internal_enforcehmiconfirmation_nu() const;
  void _internal_set_enforcehmiconfirmation_nu(bool value);
  public:

  // optional bool RctraAlertLeft_nu = 3894;
  bool has_rctraalertleft_nu() const;
  private:
  bool _internal_has_rctraalertleft_nu() const;
  public:
  void clear_rctraalertleft_nu();
  bool rctraalertleft_nu() const;
  void set_rctraalertleft_nu(bool value);
  private:
  bool _internal_rctraalertleft_nu() const;
  void _internal_set_rctraalertleft_nu(bool value);
  public:

  // optional bool RctraAlertRight_nu = 749;
  bool has_rctraalertright_nu() const;
  private:
  bool _internal_has_rctraalertright_nu() const;
  public:
  void clear_rctraalertright_nu();
  bool rctraalertright_nu() const;
  void set_rctraalertright_nu(bool value);
  private:
  bool _internal_rctraalertright_nu() const;
  void _internal_set_rctraalertright_nu(bool value);
  public:

  // optional bool DoorProtFL_nu = 3633;
  bool has_doorprotfl_nu() const;
  private:
  bool _internal_has_doorprotfl_nu() const;
  public:
  void clear_doorprotfl_nu();
  bool doorprotfl_nu() const;
  void set_doorprotfl_nu(bool value);
  private:
  bool _internal_doorprotfl_nu() const;
  void _internal_set_doorprotfl_nu(bool value);
  public:

  // optional bool DoorProtFR_nu = 1996;
  bool has_doorprotfr_nu() const;
  private:
  bool _internal_has_doorprotfr_nu() const;
  public:
  void clear_doorprotfr_nu();
  bool doorprotfr_nu() const;
  void set_doorprotfr_nu(bool value);
  private:
  bool _internal_doorprotfr_nu() const;
  void _internal_set_doorprotfr_nu(bool value);
  public:

  // optional bool DoorProtBL_nu = 1847;
  bool has_doorprotbl_nu() const;
  private:
  bool _internal_has_doorprotbl_nu() const;
  public:
  void clear_doorprotbl_nu();
  bool doorprotbl_nu() const;
  void set_doorprotbl_nu(bool value);
  private:
  bool _internal_doorprotbl_nu() const;
  void _internal_set_doorprotbl_nu(bool value);
  public:

  // optional bool DoorProtBR_nu = 3786;
  bool has_doorprotbr_nu() const;
  private:
  bool _internal_has_doorprotbr_nu() const;
  public:
  void clear_doorprotbr_nu();
  bool doorprotbr_nu() const;
  void set_doorprotbr_nu(bool value);
  private:
  bool _internal_doorprotbr_nu() const;
  void _internal_set_doorprotbr_nu(bool value);
  public:

  // optional bool DoorProtTrunk_nu = 3162;
  bool has_doorprottrunk_nu() const;
  private:
  bool _internal_has_doorprottrunk_nu() const;
  public:
  void clear_doorprottrunk_nu();
  bool doorprottrunk_nu() const;
  void set_doorprottrunk_nu(bool value);
  private:
  bool _internal_doorprottrunk_nu() const;
  void _internal_set_doorprottrunk_nu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  int warningtube_;
  ::PROTOBUF_NAMESPACE_ID::uint32 criticalobjectbrakeid_nu_;
  int warningbody_;
  int warningwheel_;
  int warningobject_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  bool activatebrakeinterventionscreen_nu_;
  bool enforcehmiconfirmation_nu_;
  bool rctraalertleft_nu_;
  bool rctraalertright_nu_;
  bool doorprotfl_nu_;
  bool doorprotfr_nu_;
  bool doorprotbl_nu_;
  bool doorprotbr_nu_;
  bool doorprottrunk_nu_;
  friend struct ::TableStruct_mf_5flsca_2flsca_5fhmiport_2eproto;
};
// -------------------------------------------------------------------

class LscaHMIPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port) */ {
 public:
  LscaHMIPort_array_port();
  virtual ~LscaHMIPort_array_port();

  LscaHMIPort_array_port(const LscaHMIPort_array_port& from);
  LscaHMIPort_array_port(LscaHMIPort_array_port&& from) noexcept
    : LscaHMIPort_array_port() {
    *this = ::std::move(from);
  }

  inline LscaHMIPort_array_port& operator=(const LscaHMIPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline LscaHMIPort_array_port& operator=(LscaHMIPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LscaHMIPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LscaHMIPort_array_port* internal_default_instance() {
    return reinterpret_cast<const LscaHMIPort_array_port*>(
               &_LscaHMIPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LscaHMIPort_array_port& a, LscaHMIPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(LscaHMIPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LscaHMIPort_array_port* New() const final {
    return CreateMaybeMessage<LscaHMIPort_array_port>(nullptr);
  }

  LscaHMIPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LscaHMIPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LscaHMIPort_array_port& from);
  void MergeFrom(const LscaHMIPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LscaHMIPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto);
    return ::descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1025,
  };
  // repeated .pb.mf_lsca.lsca_hmiport.LscaHMIPort data = 1025;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort >*
      mutable_data();
  private:
  const ::pb::mf_lsca::lsca_hmiport::LscaHMIPort& _internal_data(int index) const;
  ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* _internal_add_data();
  public:
  const ::pb::mf_lsca::lsca_hmiport::LscaHMIPort& data(int index) const;
  ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort > data_;
  friend struct ::TableStruct_mf_5flsca_2flsca_5fhmiport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LscaHMIPort

// optional uint32 uiVersionNumber = 2124;
inline bool LscaHMIPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LscaHMIPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void LscaHMIPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LscaHMIPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LscaHMIPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void LscaHMIPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  uiversionnumber_ = value;
}
inline void LscaHMIPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool LscaHMIPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool LscaHMIPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& LscaHMIPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& LscaHMIPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* LscaHMIPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_lsca.lsca_hmiport.LscaHMIPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* LscaHMIPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* LscaHMIPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.lsca_hmiport.LscaHMIPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void LscaHMIPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_lsca.lsca_hmiport.LscaHMIPort.sSigHeader)
}

// optional bool activateBrakeInterventionScreen_nu = 2488;
inline bool LscaHMIPort::_internal_has_activatebrakeinterventionscreen_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LscaHMIPort::has_activatebrakeinterventionscreen_nu() const {
  return _internal_has_activatebrakeinterventionscreen_nu();
}
inline void LscaHMIPort::clear_activatebrakeinterventionscreen_nu() {
  activatebrakeinterventionscreen_nu_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool LscaHMIPort::_internal_activatebrakeinterventionscreen_nu() const {
  return activatebrakeinterventionscreen_nu_;
}
inline bool LscaHMIPort::activatebrakeinterventionscreen_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.activateBrakeInterventionScreen_nu)
  return _internal_activatebrakeinterventionscreen_nu();
}
inline void LscaHMIPort::_internal_set_activatebrakeinterventionscreen_nu(bool value) {
  _has_bits_[0] |= 0x00000080u;
  activatebrakeinterventionscreen_nu_ = value;
}
inline void LscaHMIPort::set_activatebrakeinterventionscreen_nu(bool value) {
  _internal_set_activatebrakeinterventionscreen_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.activateBrakeInterventionScreen_nu)
}

// optional bool enforceHMIConfirmation_nu = 1562;
inline bool LscaHMIPort::_internal_has_enforcehmiconfirmation_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LscaHMIPort::has_enforcehmiconfirmation_nu() const {
  return _internal_has_enforcehmiconfirmation_nu();
}
inline void LscaHMIPort::clear_enforcehmiconfirmation_nu() {
  enforcehmiconfirmation_nu_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool LscaHMIPort::_internal_enforcehmiconfirmation_nu() const {
  return enforcehmiconfirmation_nu_;
}
inline bool LscaHMIPort::enforcehmiconfirmation_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.enforceHMIConfirmation_nu)
  return _internal_enforcehmiconfirmation_nu();
}
inline void LscaHMIPort::_internal_set_enforcehmiconfirmation_nu(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enforcehmiconfirmation_nu_ = value;
}
inline void LscaHMIPort::set_enforcehmiconfirmation_nu(bool value) {
  _internal_set_enforcehmiconfirmation_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.enforceHMIConfirmation_nu)
}

// optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningBody = 1130;
inline bool LscaHMIPort::_internal_has_warningbody() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LscaHMIPort::has_warningbody() const {
  return _internal_has_warningbody();
}
inline void LscaHMIPort::clear_warningbody() {
  warningbody_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS LscaHMIPort::_internal_warningbody() const {
  return static_cast< ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS >(warningbody_);
}
inline ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS LscaHMIPort::warningbody() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningBody)
  return _internal_warningbody();
}
inline void LscaHMIPort::_internal_set_warningbody(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value) {
  assert(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  warningbody_ = value;
}
inline void LscaHMIPort::set_warningbody(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value) {
  _internal_set_warningbody(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningBody)
}

// optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningWheel = 1354;
inline bool LscaHMIPort::_internal_has_warningwheel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LscaHMIPort::has_warningwheel() const {
  return _internal_has_warningwheel();
}
inline void LscaHMIPort::clear_warningwheel() {
  warningwheel_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS LscaHMIPort::_internal_warningwheel() const {
  return static_cast< ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS >(warningwheel_);
}
inline ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS LscaHMIPort::warningwheel() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningWheel)
  return _internal_warningwheel();
}
inline void LscaHMIPort::_internal_set_warningwheel(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value) {
  assert(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  warningwheel_ = value;
}
inline void LscaHMIPort::set_warningwheel(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value) {
  _internal_set_warningwheel(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningWheel)
}

// optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningObject = 1885;
inline bool LscaHMIPort::_internal_has_warningobject() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LscaHMIPort::has_warningobject() const {
  return _internal_has_warningobject();
}
inline void LscaHMIPort::clear_warningobject() {
  warningobject_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS LscaHMIPort::_internal_warningobject() const {
  return static_cast< ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS >(warningobject_);
}
inline ::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS LscaHMIPort::warningobject() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningObject)
  return _internal_warningobject();
}
inline void LscaHMIPort::_internal_set_warningobject(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value) {
  assert(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  warningobject_ = value;
}
inline void LscaHMIPort::set_warningobject(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS value) {
  _internal_set_warningobject(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningObject)
}

// optional .pb.mf_lsca.lsca_tube_marking.LSCA_TUBE_MARKING warningTube = 3872;
inline bool LscaHMIPort::_internal_has_warningtube() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LscaHMIPort::has_warningtube() const {
  return _internal_has_warningtube();
}
inline void LscaHMIPort::clear_warningtube() {
  warningtube_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING LscaHMIPort::_internal_warningtube() const {
  return static_cast< ::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING >(warningtube_);
}
inline ::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING LscaHMIPort::warningtube() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningTube)
  return _internal_warningtube();
}
inline void LscaHMIPort::_internal_set_warningtube(::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING value) {
  assert(::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  warningtube_ = value;
}
inline void LscaHMIPort::set_warningtube(::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING value) {
  _internal_set_warningtube(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.warningTube)
}

// optional uint32 criticalObjectBrakeID_nu = 3;
inline bool LscaHMIPort::_internal_has_criticalobjectbrakeid_nu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LscaHMIPort::has_criticalobjectbrakeid_nu() const {
  return _internal_has_criticalobjectbrakeid_nu();
}
inline void LscaHMIPort::clear_criticalobjectbrakeid_nu() {
  criticalobjectbrakeid_nu_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LscaHMIPort::_internal_criticalobjectbrakeid_nu() const {
  return criticalobjectbrakeid_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LscaHMIPort::criticalobjectbrakeid_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.criticalObjectBrakeID_nu)
  return _internal_criticalobjectbrakeid_nu();
}
inline void LscaHMIPort::_internal_set_criticalobjectbrakeid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  criticalobjectbrakeid_nu_ = value;
}
inline void LscaHMIPort::set_criticalobjectbrakeid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_criticalobjectbrakeid_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.criticalObjectBrakeID_nu)
}

// optional bool RctraAlertLeft_nu = 3894;
inline bool LscaHMIPort::_internal_has_rctraalertleft_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LscaHMIPort::has_rctraalertleft_nu() const {
  return _internal_has_rctraalertleft_nu();
}
inline void LscaHMIPort::clear_rctraalertleft_nu() {
  rctraalertleft_nu_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool LscaHMIPort::_internal_rctraalertleft_nu() const {
  return rctraalertleft_nu_;
}
inline bool LscaHMIPort::rctraalertleft_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.RctraAlertLeft_nu)
  return _internal_rctraalertleft_nu();
}
inline void LscaHMIPort::_internal_set_rctraalertleft_nu(bool value) {
  _has_bits_[0] |= 0x00000200u;
  rctraalertleft_nu_ = value;
}
inline void LscaHMIPort::set_rctraalertleft_nu(bool value) {
  _internal_set_rctraalertleft_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.RctraAlertLeft_nu)
}

// optional bool RctraAlertRight_nu = 749;
inline bool LscaHMIPort::_internal_has_rctraalertright_nu() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LscaHMIPort::has_rctraalertright_nu() const {
  return _internal_has_rctraalertright_nu();
}
inline void LscaHMIPort::clear_rctraalertright_nu() {
  rctraalertright_nu_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool LscaHMIPort::_internal_rctraalertright_nu() const {
  return rctraalertright_nu_;
}
inline bool LscaHMIPort::rctraalertright_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.RctraAlertRight_nu)
  return _internal_rctraalertright_nu();
}
inline void LscaHMIPort::_internal_set_rctraalertright_nu(bool value) {
  _has_bits_[0] |= 0x00000400u;
  rctraalertright_nu_ = value;
}
inline void LscaHMIPort::set_rctraalertright_nu(bool value) {
  _internal_set_rctraalertright_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.RctraAlertRight_nu)
}

// optional bool DoorProtFL_nu = 3633;
inline bool LscaHMIPort::_internal_has_doorprotfl_nu() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LscaHMIPort::has_doorprotfl_nu() const {
  return _internal_has_doorprotfl_nu();
}
inline void LscaHMIPort::clear_doorprotfl_nu() {
  doorprotfl_nu_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool LscaHMIPort::_internal_doorprotfl_nu() const {
  return doorprotfl_nu_;
}
inline bool LscaHMIPort::doorprotfl_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtFL_nu)
  return _internal_doorprotfl_nu();
}
inline void LscaHMIPort::_internal_set_doorprotfl_nu(bool value) {
  _has_bits_[0] |= 0x00000800u;
  doorprotfl_nu_ = value;
}
inline void LscaHMIPort::set_doorprotfl_nu(bool value) {
  _internal_set_doorprotfl_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtFL_nu)
}

// optional bool DoorProtFR_nu = 1996;
inline bool LscaHMIPort::_internal_has_doorprotfr_nu() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LscaHMIPort::has_doorprotfr_nu() const {
  return _internal_has_doorprotfr_nu();
}
inline void LscaHMIPort::clear_doorprotfr_nu() {
  doorprotfr_nu_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool LscaHMIPort::_internal_doorprotfr_nu() const {
  return doorprotfr_nu_;
}
inline bool LscaHMIPort::doorprotfr_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtFR_nu)
  return _internal_doorprotfr_nu();
}
inline void LscaHMIPort::_internal_set_doorprotfr_nu(bool value) {
  _has_bits_[0] |= 0x00001000u;
  doorprotfr_nu_ = value;
}
inline void LscaHMIPort::set_doorprotfr_nu(bool value) {
  _internal_set_doorprotfr_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtFR_nu)
}

// optional bool DoorProtBL_nu = 1847;
inline bool LscaHMIPort::_internal_has_doorprotbl_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LscaHMIPort::has_doorprotbl_nu() const {
  return _internal_has_doorprotbl_nu();
}
inline void LscaHMIPort::clear_doorprotbl_nu() {
  doorprotbl_nu_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool LscaHMIPort::_internal_doorprotbl_nu() const {
  return doorprotbl_nu_;
}
inline bool LscaHMIPort::doorprotbl_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtBL_nu)
  return _internal_doorprotbl_nu();
}
inline void LscaHMIPort::_internal_set_doorprotbl_nu(bool value) {
  _has_bits_[0] |= 0x00002000u;
  doorprotbl_nu_ = value;
}
inline void LscaHMIPort::set_doorprotbl_nu(bool value) {
  _internal_set_doorprotbl_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtBL_nu)
}

// optional bool DoorProtBR_nu = 3786;
inline bool LscaHMIPort::_internal_has_doorprotbr_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LscaHMIPort::has_doorprotbr_nu() const {
  return _internal_has_doorprotbr_nu();
}
inline void LscaHMIPort::clear_doorprotbr_nu() {
  doorprotbr_nu_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool LscaHMIPort::_internal_doorprotbr_nu() const {
  return doorprotbr_nu_;
}
inline bool LscaHMIPort::doorprotbr_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtBR_nu)
  return _internal_doorprotbr_nu();
}
inline void LscaHMIPort::_internal_set_doorprotbr_nu(bool value) {
  _has_bits_[0] |= 0x00004000u;
  doorprotbr_nu_ = value;
}
inline void LscaHMIPort::set_doorprotbr_nu(bool value) {
  _internal_set_doorprotbr_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtBR_nu)
}

// optional bool DoorProtTrunk_nu = 3162;
inline bool LscaHMIPort::_internal_has_doorprottrunk_nu() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LscaHMIPort::has_doorprottrunk_nu() const {
  return _internal_has_doorprottrunk_nu();
}
inline void LscaHMIPort::clear_doorprottrunk_nu() {
  doorprottrunk_nu_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool LscaHMIPort::_internal_doorprottrunk_nu() const {
  return doorprottrunk_nu_;
}
inline bool LscaHMIPort::doorprottrunk_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtTrunk_nu)
  return _internal_doorprottrunk_nu();
}
inline void LscaHMIPort::_internal_set_doorprottrunk_nu(bool value) {
  _has_bits_[0] |= 0x00008000u;
  doorprottrunk_nu_ = value;
}
inline void LscaHMIPort::set_doorprottrunk_nu(bool value) {
  _internal_set_doorprottrunk_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.lsca_hmiport.LscaHMIPort.DoorProtTrunk_nu)
}

// -------------------------------------------------------------------

// LscaHMIPort_array_port

// repeated .pb.mf_lsca.lsca_hmiport.LscaHMIPort data = 1025;
inline int LscaHMIPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int LscaHMIPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void LscaHMIPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* LscaHMIPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort >*
LscaHMIPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port.data)
  return &data_;
}
inline const ::pb::mf_lsca::lsca_hmiport::LscaHMIPort& LscaHMIPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_lsca::lsca_hmiport::LscaHMIPort& LscaHMIPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* LscaHMIPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* LscaHMIPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort >&
LscaHMIPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lsca_hmiport
}  // namespace mf_lsca
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2flsca_5fhmiport_2eproto
