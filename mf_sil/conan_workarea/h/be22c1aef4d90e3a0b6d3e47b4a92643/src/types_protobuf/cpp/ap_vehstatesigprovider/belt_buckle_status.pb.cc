// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_vehstatesigprovider/belt_buckle_status.proto

#include "ap_vehstatesigprovider/belt_buckle_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeltBuckleStatus_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto;
namespace pb {
namespace ap_vehstatesigprovider {
namespace belt_buckle_status {
class BeltBuckleStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeltBuckleStatus> _instance;
} _BeltBuckleStatus_default_instance_;
class BeltBuckleStatus_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BeltBuckleStatus_array_port> _instance;
} _BeltBuckleStatus_array_port_default_instance_;
}  // namespace belt_buckle_status
}  // namespace ap_vehstatesigprovider
}  // namespace pb
static void InitDefaultsscc_info_BeltBuckleStatus_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_vehstatesigprovider::belt_buckle_status::_BeltBuckleStatus_default_instance_;
    new (ptr) ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BeltBuckleStatus_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BeltBuckleStatus_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_BeltBuckleStatus_array_port_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_vehstatesigprovider::belt_buckle_status::_BeltBuckleStatus_array_port_default_instance_;
    new (ptr) ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BeltBuckleStatus_array_port_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BeltBuckleStatus_array_port_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto}, {
      &scc_info_BeltBuckleStatus_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus, frontpsgr_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus, driver_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus, backrowright_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus, backrowleft_nu_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus)},
  { 13, 19, sizeof(::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_vehstatesigprovider::belt_buckle_status::_BeltBuckleStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_vehstatesigprovider::belt_buckle_status::_BeltBuckleStatus_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/ap_vehstatesigprovider/belt_buckle_sta"
  "tus.proto\022,pb.ap_vehstatesigprovider.bel"
  "t_buckle_status\032(ap_vehstatesigprovider/"
  "belt_buckle.proto\"\274\002\n\020BeltBuckleStatus\022H"
  "\n\014frontPsgr_nu\030\242\037 \001(\01621.pb.ap_vehstatesi"
  "gprovider.belt_buckle.BeltBuckle\022E\n\tdriv"
  "er_nu\030\341\032 \001(\01621.pb.ap_vehstatesigprovider"
  ".belt_buckle.BeltBuckle\022K\n\017backrowRight_"
  "nu\030\215\035 \001(\01621.pb.ap_vehstatesigprovider.be"
  "lt_buckle.BeltBuckle\022J\n\016backrowLeft_nu\030\306"
  "\022 \001(\01621.pb.ap_vehstatesigprovider.belt_b"
  "uckle.BeltBuckle\"l\n\033BeltBuckleStatus_arr"
  "ay_port\022M\n\004data\030\224\032 \003(\0132>.pb.ap_vehstates"
  "igprovider.belt_buckle_status.BeltBuckle"
  "Status"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_deps[1] = {
  &::descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_sccs[2] = {
  &scc_info_BeltBuckleStatus_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto.base,
  &scc_info_BeltBuckleStatus_array_port_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_once;
static bool descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto = {
  &descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_initialized, descriptor_table_protodef_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto, "ap_vehstatesigprovider/belt_buckle_status.proto", 566,
  &descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_once, descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_sccs, descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto::offsets,
  file_level_metadata_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto, 2, file_level_enum_descriptors_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto, file_level_service_descriptors_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto), true);
namespace pb {
namespace ap_vehstatesigprovider {
namespace belt_buckle_status {

// ===================================================================

void BeltBuckleStatus::InitAsDefaultInstance() {
}
class BeltBuckleStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<BeltBuckleStatus>()._has_bits_);
  static void set_has_frontpsgr_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_driver_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_backrowright_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_backrowleft_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BeltBuckleStatus::BeltBuckleStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
}
BeltBuckleStatus::BeltBuckleStatus(const BeltBuckleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&backrowleft_nu_, &from.backrowleft_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&frontpsgr_nu_) -
    reinterpret_cast<char*>(&backrowleft_nu_)) + sizeof(frontpsgr_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
}

void BeltBuckleStatus::SharedCtor() {
  ::memset(&backrowleft_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frontpsgr_nu_) -
      reinterpret_cast<char*>(&backrowleft_nu_)) + sizeof(frontpsgr_nu_));
}

BeltBuckleStatus::~BeltBuckleStatus() {
  // @@protoc_insertion_point(destructor:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  SharedDtor();
}

void BeltBuckleStatus::SharedDtor() {
}

void BeltBuckleStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeltBuckleStatus& BeltBuckleStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeltBuckleStatus_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void BeltBuckleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&backrowleft_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frontpsgr_nu_) -
        reinterpret_cast<char*>(&backrowleft_nu_)) + sizeof(frontpsgr_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BeltBuckleStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle backrowLeft_nu = 2374;
      case 2374:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle_IsValid(val))) {
            _internal_set_backrowleft_nu(static_cast<::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2374, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle driver_nu = 3425;
      case 3425:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle_IsValid(val))) {
            _internal_set_driver_nu(static_cast<::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3425, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle backrowRight_nu = 3725;
      case 3725:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle_IsValid(val))) {
            _internal_set_backrowright_nu(static_cast<::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3725, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle frontPsgr_nu = 4002;
      case 4002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle_IsValid(val))) {
            _internal_set_frontpsgr_nu(static_cast<::pb::ap_vehstatesigprovider::belt_buckle::BeltBuckle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4002, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeltBuckleStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle backrowLeft_nu = 2374;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2374, this->_internal_backrowleft_nu(), target);
  }

  // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle driver_nu = 3425;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3425, this->_internal_driver_nu(), target);
  }

  // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle backrowRight_nu = 3725;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3725, this->_internal_backrowright_nu(), target);
  }

  // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle frontPsgr_nu = 4002;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4002, this->_internal_frontpsgr_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  return target;
}

size_t BeltBuckleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle backrowLeft_nu = 2374;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_backrowleft_nu());
    }

    // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle driver_nu = 3425;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driver_nu());
    }

    // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle backrowRight_nu = 3725;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_backrowright_nu());
    }

    // optional .pb.ap_vehstatesigprovider.belt_buckle.BeltBuckle frontPsgr_nu = 4002;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frontpsgr_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeltBuckleStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BeltBuckleStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeltBuckleStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
    MergeFrom(*source);
  }
}

void BeltBuckleStatus::MergeFrom(const BeltBuckleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      backrowleft_nu_ = from.backrowleft_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      driver_nu_ = from.driver_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      backrowright_nu_ = from.backrowright_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      frontpsgr_nu_ = from.frontpsgr_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeltBuckleStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeltBuckleStatus::CopyFrom(const BeltBuckleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeltBuckleStatus::IsInitialized() const {
  return true;
}

void BeltBuckleStatus::InternalSwap(BeltBuckleStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(backrowleft_nu_, other->backrowleft_nu_);
  swap(driver_nu_, other->driver_nu_);
  swap(backrowright_nu_, other->backrowright_nu_);
  swap(frontpsgr_nu_, other->frontpsgr_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeltBuckleStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BeltBuckleStatus_array_port::InitAsDefaultInstance() {
}
class BeltBuckleStatus_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<BeltBuckleStatus_array_port>()._has_bits_);
};

BeltBuckleStatus_array_port::BeltBuckleStatus_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
}
BeltBuckleStatus_array_port::BeltBuckleStatus_array_port(const BeltBuckleStatus_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
}

void BeltBuckleStatus_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BeltBuckleStatus_array_port_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto.base);
}

BeltBuckleStatus_array_port::~BeltBuckleStatus_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  SharedDtor();
}

void BeltBuckleStatus_array_port::SharedDtor() {
}

void BeltBuckleStatus_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeltBuckleStatus_array_port& BeltBuckleStatus_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BeltBuckleStatus_array_port_ap_5fvehstatesigprovider_2fbelt_5fbuckle_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void BeltBuckleStatus_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BeltBuckleStatus_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus data = 3348;
      case 3348:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BeltBuckleStatus_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus data = 3348;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3348, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  return target;
}

size_t BeltBuckleStatus_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus data = 3348;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeltBuckleStatus_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const BeltBuckleStatus_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BeltBuckleStatus_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
    MergeFrom(*source);
  }
}

void BeltBuckleStatus_array_port::MergeFrom(const BeltBuckleStatus_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void BeltBuckleStatus_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeltBuckleStatus_array_port::CopyFrom(const BeltBuckleStatus_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_vehstatesigprovider.belt_buckle_status.BeltBuckleStatus_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeltBuckleStatus_array_port::IsInitialized() const {
  return true;
}

void BeltBuckleStatus_array_port::InternalSwap(BeltBuckleStatus_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeltBuckleStatus_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace belt_buckle_status
}  // namespace ap_vehstatesigprovider
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus* Arena::CreateMaybeMessage< ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port* Arena::CreateMaybeMessage< ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_vehstatesigprovider::belt_buckle_status::BeltBuckleStatus_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
