// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_vehstatesigprovider/light.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5fvehstatesigprovider_2flight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5fvehstatesigprovider_2flight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5fvehstatesigprovider_2flight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5fvehstatesigprovider_2flight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fvehstatesigprovider_2flight_2eproto;
namespace pb {
namespace ap_vehstatesigprovider {
namespace light {
class Light;
class LightDefaultTypeInternal;
extern LightDefaultTypeInternal _Light_default_instance_;
class Light_array_port;
class Light_array_portDefaultTypeInternal;
extern Light_array_portDefaultTypeInternal _Light_array_port_default_instance_;
}  // namespace light
}  // namespace ap_vehstatesigprovider
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_vehstatesigprovider::light::Light* Arena::CreateMaybeMessage<::pb::ap_vehstatesigprovider::light::Light>(Arena*);
template<> ::pb::ap_vehstatesigprovider::light::Light_array_port* Arena::CreateMaybeMessage<::pb::ap_vehstatesigprovider::light::Light_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_vehstatesigprovider {
namespace light {

// ===================================================================

class Light :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_vehstatesigprovider.light.Light) */ {
 public:
  Light();
  virtual ~Light();

  Light(const Light& from);
  Light(Light&& from) noexcept
    : Light() {
    *this = ::std::move(from);
  }

  inline Light& operator=(const Light& from) {
    CopyFrom(from);
    return *this;
  }
  inline Light& operator=(Light&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Light& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Light* internal_default_instance() {
    return reinterpret_cast<const Light*>(
               &_Light_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Light& a, Light& b) {
    a.Swap(&b);
  }
  inline void Swap(Light* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Light* New() const final {
    return CreateMaybeMessage<Light>(nullptr);
  }

  Light* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Light>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Light& from);
  void MergeFrom(const Light& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Light* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_vehstatesigprovider.light.Light";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fvehstatesigprovider_2flight_2eproto);
    return ::descriptor_table_ap_5fvehstatesigprovider_2flight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionLampOnNuFieldNumber = 1450,
    kReverseLampOnNuFieldNumber = 3660,
    kLowBeamOnNuFieldNumber = 3457,
    kHighBeamOnNuFieldNumber = 2504,
    kIndicatorLeftOnNuFieldNumber = 765,
    kIndicatorRightOnNuFieldNumber = 1010,
    kBrakeLightOnNuFieldNumber = 2087,
    kFrontFogLightOnNuFieldNumber = 2952,
    kRearFogLightOnNuFieldNumber = 1598,
    kDaytimeRunningLightStateOnNuFieldNumber = 1589,
  };
  // optional bool positionLampOn_nu = 1450;
  bool has_positionlampon_nu() const;
  private:
  bool _internal_has_positionlampon_nu() const;
  public:
  void clear_positionlampon_nu();
  bool positionlampon_nu() const;
  void set_positionlampon_nu(bool value);
  private:
  bool _internal_positionlampon_nu() const;
  void _internal_set_positionlampon_nu(bool value);
  public:

  // optional bool reverseLampOn_nu = 3660;
  bool has_reverselampon_nu() const;
  private:
  bool _internal_has_reverselampon_nu() const;
  public:
  void clear_reverselampon_nu();
  bool reverselampon_nu() const;
  void set_reverselampon_nu(bool value);
  private:
  bool _internal_reverselampon_nu() const;
  void _internal_set_reverselampon_nu(bool value);
  public:

  // optional bool lowBeamOn_nu = 3457;
  bool has_lowbeamon_nu() const;
  private:
  bool _internal_has_lowbeamon_nu() const;
  public:
  void clear_lowbeamon_nu();
  bool lowbeamon_nu() const;
  void set_lowbeamon_nu(bool value);
  private:
  bool _internal_lowbeamon_nu() const;
  void _internal_set_lowbeamon_nu(bool value);
  public:

  // optional bool highBeamOn_nu = 2504;
  bool has_highbeamon_nu() const;
  private:
  bool _internal_has_highbeamon_nu() const;
  public:
  void clear_highbeamon_nu();
  bool highbeamon_nu() const;
  void set_highbeamon_nu(bool value);
  private:
  bool _internal_highbeamon_nu() const;
  void _internal_set_highbeamon_nu(bool value);
  public:

  // optional bool indicatorLeftOn_nu = 765;
  bool has_indicatorlefton_nu() const;
  private:
  bool _internal_has_indicatorlefton_nu() const;
  public:
  void clear_indicatorlefton_nu();
  bool indicatorlefton_nu() const;
  void set_indicatorlefton_nu(bool value);
  private:
  bool _internal_indicatorlefton_nu() const;
  void _internal_set_indicatorlefton_nu(bool value);
  public:

  // optional bool indicatorRightOn_nu = 1010;
  bool has_indicatorrighton_nu() const;
  private:
  bool _internal_has_indicatorrighton_nu() const;
  public:
  void clear_indicatorrighton_nu();
  bool indicatorrighton_nu() const;
  void set_indicatorrighton_nu(bool value);
  private:
  bool _internal_indicatorrighton_nu() const;
  void _internal_set_indicatorrighton_nu(bool value);
  public:

  // optional bool brakeLightOn_nu = 2087;
  bool has_brakelighton_nu() const;
  private:
  bool _internal_has_brakelighton_nu() const;
  public:
  void clear_brakelighton_nu();
  bool brakelighton_nu() const;
  void set_brakelighton_nu(bool value);
  private:
  bool _internal_brakelighton_nu() const;
  void _internal_set_brakelighton_nu(bool value);
  public:

  // optional bool frontFogLightOn_nu = 2952;
  bool has_frontfoglighton_nu() const;
  private:
  bool _internal_has_frontfoglighton_nu() const;
  public:
  void clear_frontfoglighton_nu();
  bool frontfoglighton_nu() const;
  void set_frontfoglighton_nu(bool value);
  private:
  bool _internal_frontfoglighton_nu() const;
  void _internal_set_frontfoglighton_nu(bool value);
  public:

  // optional bool rearFogLightOn_nu = 1598;
  bool has_rearfoglighton_nu() const;
  private:
  bool _internal_has_rearfoglighton_nu() const;
  public:
  void clear_rearfoglighton_nu();
  bool rearfoglighton_nu() const;
  void set_rearfoglighton_nu(bool value);
  private:
  bool _internal_rearfoglighton_nu() const;
  void _internal_set_rearfoglighton_nu(bool value);
  public:

  // optional bool daytimeRunningLightStateOn_nu = 1589;
  bool has_daytimerunninglightstateon_nu() const;
  private:
  bool _internal_has_daytimerunninglightstateon_nu() const;
  public:
  void clear_daytimerunninglightstateon_nu();
  bool daytimerunninglightstateon_nu() const;
  void set_daytimerunninglightstateon_nu(bool value);
  private:
  bool _internal_daytimerunninglightstateon_nu() const;
  void _internal_set_daytimerunninglightstateon_nu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_vehstatesigprovider.light.Light)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool positionlampon_nu_;
  bool reverselampon_nu_;
  bool lowbeamon_nu_;
  bool highbeamon_nu_;
  bool indicatorlefton_nu_;
  bool indicatorrighton_nu_;
  bool brakelighton_nu_;
  bool frontfoglighton_nu_;
  bool rearfoglighton_nu_;
  bool daytimerunninglightstateon_nu_;
  friend struct ::TableStruct_ap_5fvehstatesigprovider_2flight_2eproto;
};
// -------------------------------------------------------------------

class Light_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_vehstatesigprovider.light.Light_array_port) */ {
 public:
  Light_array_port();
  virtual ~Light_array_port();

  Light_array_port(const Light_array_port& from);
  Light_array_port(Light_array_port&& from) noexcept
    : Light_array_port() {
    *this = ::std::move(from);
  }

  inline Light_array_port& operator=(const Light_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline Light_array_port& operator=(Light_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Light_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Light_array_port* internal_default_instance() {
    return reinterpret_cast<const Light_array_port*>(
               &_Light_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Light_array_port& a, Light_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(Light_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Light_array_port* New() const final {
    return CreateMaybeMessage<Light_array_port>(nullptr);
  }

  Light_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Light_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Light_array_port& from);
  void MergeFrom(const Light_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Light_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_vehstatesigprovider.light.Light_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fvehstatesigprovider_2flight_2eproto);
    return ::descriptor_table_ap_5fvehstatesigprovider_2flight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3278,
  };
  // repeated .pb.ap_vehstatesigprovider.light.Light data = 3278;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_vehstatesigprovider::light::Light* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_vehstatesigprovider::light::Light >*
      mutable_data();
  private:
  const ::pb::ap_vehstatesigprovider::light::Light& _internal_data(int index) const;
  ::pb::ap_vehstatesigprovider::light::Light* _internal_add_data();
  public:
  const ::pb::ap_vehstatesigprovider::light::Light& data(int index) const;
  ::pb::ap_vehstatesigprovider::light::Light* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_vehstatesigprovider::light::Light >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_vehstatesigprovider.light.Light_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_vehstatesigprovider::light::Light > data_;
  friend struct ::TableStruct_ap_5fvehstatesigprovider_2flight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Light

// optional bool lowBeamOn_nu = 3457;
inline bool Light::_internal_has_lowbeamon_nu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Light::has_lowbeamon_nu() const {
  return _internal_has_lowbeamon_nu();
}
inline void Light::clear_lowbeamon_nu() {
  lowbeamon_nu_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Light::_internal_lowbeamon_nu() const {
  return lowbeamon_nu_;
}
inline bool Light::lowbeamon_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.lowBeamOn_nu)
  return _internal_lowbeamon_nu();
}
inline void Light::_internal_set_lowbeamon_nu(bool value) {
  _has_bits_[0] |= 0x00000004u;
  lowbeamon_nu_ = value;
}
inline void Light::set_lowbeamon_nu(bool value) {
  _internal_set_lowbeamon_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.lowBeamOn_nu)
}

// optional bool highBeamOn_nu = 2504;
inline bool Light::_internal_has_highbeamon_nu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Light::has_highbeamon_nu() const {
  return _internal_has_highbeamon_nu();
}
inline void Light::clear_highbeamon_nu() {
  highbeamon_nu_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Light::_internal_highbeamon_nu() const {
  return highbeamon_nu_;
}
inline bool Light::highbeamon_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.highBeamOn_nu)
  return _internal_highbeamon_nu();
}
inline void Light::_internal_set_highbeamon_nu(bool value) {
  _has_bits_[0] |= 0x00000008u;
  highbeamon_nu_ = value;
}
inline void Light::set_highbeamon_nu(bool value) {
  _internal_set_highbeamon_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.highBeamOn_nu)
}

// optional bool indicatorLeftOn_nu = 765;
inline bool Light::_internal_has_indicatorlefton_nu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Light::has_indicatorlefton_nu() const {
  return _internal_has_indicatorlefton_nu();
}
inline void Light::clear_indicatorlefton_nu() {
  indicatorlefton_nu_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Light::_internal_indicatorlefton_nu() const {
  return indicatorlefton_nu_;
}
inline bool Light::indicatorlefton_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.indicatorLeftOn_nu)
  return _internal_indicatorlefton_nu();
}
inline void Light::_internal_set_indicatorlefton_nu(bool value) {
  _has_bits_[0] |= 0x00000010u;
  indicatorlefton_nu_ = value;
}
inline void Light::set_indicatorlefton_nu(bool value) {
  _internal_set_indicatorlefton_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.indicatorLeftOn_nu)
}

// optional bool indicatorRightOn_nu = 1010;
inline bool Light::_internal_has_indicatorrighton_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Light::has_indicatorrighton_nu() const {
  return _internal_has_indicatorrighton_nu();
}
inline void Light::clear_indicatorrighton_nu() {
  indicatorrighton_nu_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Light::_internal_indicatorrighton_nu() const {
  return indicatorrighton_nu_;
}
inline bool Light::indicatorrighton_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.indicatorRightOn_nu)
  return _internal_indicatorrighton_nu();
}
inline void Light::_internal_set_indicatorrighton_nu(bool value) {
  _has_bits_[0] |= 0x00000020u;
  indicatorrighton_nu_ = value;
}
inline void Light::set_indicatorrighton_nu(bool value) {
  _internal_set_indicatorrighton_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.indicatorRightOn_nu)
}

// optional bool brakeLightOn_nu = 2087;
inline bool Light::_internal_has_brakelighton_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Light::has_brakelighton_nu() const {
  return _internal_has_brakelighton_nu();
}
inline void Light::clear_brakelighton_nu() {
  brakelighton_nu_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Light::_internal_brakelighton_nu() const {
  return brakelighton_nu_;
}
inline bool Light::brakelighton_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.brakeLightOn_nu)
  return _internal_brakelighton_nu();
}
inline void Light::_internal_set_brakelighton_nu(bool value) {
  _has_bits_[0] |= 0x00000040u;
  brakelighton_nu_ = value;
}
inline void Light::set_brakelighton_nu(bool value) {
  _internal_set_brakelighton_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.brakeLightOn_nu)
}

// optional bool frontFogLightOn_nu = 2952;
inline bool Light::_internal_has_frontfoglighton_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Light::has_frontfoglighton_nu() const {
  return _internal_has_frontfoglighton_nu();
}
inline void Light::clear_frontfoglighton_nu() {
  frontfoglighton_nu_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Light::_internal_frontfoglighton_nu() const {
  return frontfoglighton_nu_;
}
inline bool Light::frontfoglighton_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.frontFogLightOn_nu)
  return _internal_frontfoglighton_nu();
}
inline void Light::_internal_set_frontfoglighton_nu(bool value) {
  _has_bits_[0] |= 0x00000080u;
  frontfoglighton_nu_ = value;
}
inline void Light::set_frontfoglighton_nu(bool value) {
  _internal_set_frontfoglighton_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.frontFogLightOn_nu)
}

// optional bool rearFogLightOn_nu = 1598;
inline bool Light::_internal_has_rearfoglighton_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Light::has_rearfoglighton_nu() const {
  return _internal_has_rearfoglighton_nu();
}
inline void Light::clear_rearfoglighton_nu() {
  rearfoglighton_nu_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Light::_internal_rearfoglighton_nu() const {
  return rearfoglighton_nu_;
}
inline bool Light::rearfoglighton_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.rearFogLightOn_nu)
  return _internal_rearfoglighton_nu();
}
inline void Light::_internal_set_rearfoglighton_nu(bool value) {
  _has_bits_[0] |= 0x00000100u;
  rearfoglighton_nu_ = value;
}
inline void Light::set_rearfoglighton_nu(bool value) {
  _internal_set_rearfoglighton_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.rearFogLightOn_nu)
}

// optional bool daytimeRunningLightStateOn_nu = 1589;
inline bool Light::_internal_has_daytimerunninglightstateon_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Light::has_daytimerunninglightstateon_nu() const {
  return _internal_has_daytimerunninglightstateon_nu();
}
inline void Light::clear_daytimerunninglightstateon_nu() {
  daytimerunninglightstateon_nu_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Light::_internal_daytimerunninglightstateon_nu() const {
  return daytimerunninglightstateon_nu_;
}
inline bool Light::daytimerunninglightstateon_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.daytimeRunningLightStateOn_nu)
  return _internal_daytimerunninglightstateon_nu();
}
inline void Light::_internal_set_daytimerunninglightstateon_nu(bool value) {
  _has_bits_[0] |= 0x00000200u;
  daytimerunninglightstateon_nu_ = value;
}
inline void Light::set_daytimerunninglightstateon_nu(bool value) {
  _internal_set_daytimerunninglightstateon_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.daytimeRunningLightStateOn_nu)
}

// optional bool positionLampOn_nu = 1450;
inline bool Light::_internal_has_positionlampon_nu() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Light::has_positionlampon_nu() const {
  return _internal_has_positionlampon_nu();
}
inline void Light::clear_positionlampon_nu() {
  positionlampon_nu_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Light::_internal_positionlampon_nu() const {
  return positionlampon_nu_;
}
inline bool Light::positionlampon_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.positionLampOn_nu)
  return _internal_positionlampon_nu();
}
inline void Light::_internal_set_positionlampon_nu(bool value) {
  _has_bits_[0] |= 0x00000001u;
  positionlampon_nu_ = value;
}
inline void Light::set_positionlampon_nu(bool value) {
  _internal_set_positionlampon_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.positionLampOn_nu)
}

// optional bool reverseLampOn_nu = 3660;
inline bool Light::_internal_has_reverselampon_nu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Light::has_reverselampon_nu() const {
  return _internal_has_reverselampon_nu();
}
inline void Light::clear_reverselampon_nu() {
  reverselampon_nu_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Light::_internal_reverselampon_nu() const {
  return reverselampon_nu_;
}
inline bool Light::reverselampon_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light.reverseLampOn_nu)
  return _internal_reverselampon_nu();
}
inline void Light::_internal_set_reverselampon_nu(bool value) {
  _has_bits_[0] |= 0x00000002u;
  reverselampon_nu_ = value;
}
inline void Light::set_reverselampon_nu(bool value) {
  _internal_set_reverselampon_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_vehstatesigprovider.light.Light.reverseLampOn_nu)
}

// -------------------------------------------------------------------

// Light_array_port

// repeated .pb.ap_vehstatesigprovider.light.Light data = 3278;
inline int Light_array_port::_internal_data_size() const {
  return data_.size();
}
inline int Light_array_port::data_size() const {
  return _internal_data_size();
}
inline void Light_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_vehstatesigprovider::light::Light* Light_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_vehstatesigprovider.light.Light_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_vehstatesigprovider::light::Light >*
Light_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_vehstatesigprovider.light.Light_array_port.data)
  return &data_;
}
inline const ::pb::ap_vehstatesigprovider::light::Light& Light_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_vehstatesigprovider::light::Light& Light_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_vehstatesigprovider.light.Light_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_vehstatesigprovider::light::Light* Light_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_vehstatesigprovider::light::Light* Light_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_vehstatesigprovider.light.Light_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_vehstatesigprovider::light::Light >&
Light_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_vehstatesigprovider.light.Light_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace light
}  // namespace ap_vehstatesigprovider
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5fvehstatesigprovider_2flight_2eproto
