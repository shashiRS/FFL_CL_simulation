// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tce/tce_estimation_port.proto

#include "tce/tce_estimation_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tce_2ftce_5festimation_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto;
namespace pb {
namespace tce {
namespace tce_estimation_port {
class TceEstimationPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TceEstimationPort> _instance;
} _TceEstimationPort_default_instance_;
class TceEstimationPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TceEstimationPort_array_port> _instance;
} _TceEstimationPort_array_port_default_instance_;
}  // namespace tce_estimation_port
}  // namespace tce
}  // namespace pb
static void InitDefaultsscc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::tce::tce_estimation_port::_TceEstimationPort_default_instance_;
    new (ptr) ::pb::tce::tce_estimation_port::TceEstimationPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::tce::tce_estimation_port::TceEstimationPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_TceEstimationPort_array_port_tce_2ftce_5festimation_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::tce::tce_estimation_port::_TceEstimationPort_array_port_default_instance_;
    new (ptr) ::pb::tce::tce_estimation_port::TceEstimationPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::tce::tce_estimation_port::TceEstimationPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TceEstimationPort_array_port_tce_2ftce_5festimation_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TceEstimationPort_array_port_tce_2ftce_5festimation_5fport_2eproto}, {
      &scc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tce_2ftce_5festimation_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tce_2ftce_5festimation_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tce_2ftce_5festimation_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tce_2ftce_5festimation_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircfl_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircstdvfl_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircfr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircstdvfr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircrl_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircstdvrl_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircrr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircstdvrr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, reartrackwidth_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, reartrackwidthstdv_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircflvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircfrvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircrlvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, tirecircrrvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort, reartrackwidthvalid_),
  13,
  0,
  5,
  6,
  15,
  16,
  4,
  7,
  14,
  1,
  3,
  2,
  9,
  10,
  11,
  12,
  8,
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::tce::tce_estimation_port::TceEstimationPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::pb::tce::tce_estimation_port::TceEstimationPort)},
  { 39, 45, sizeof(::pb::tce::tce_estimation_port::TceEstimationPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::tce::tce_estimation_port::_TceEstimationPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::tce::tce_estimation_port::_TceEstimationPort_array_port_default_instance_),
};

const char descriptor_table_protodef_tce_2ftce_5festimation_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035tce/tce_estimation_port.proto\022\032pb.tce."
  "tce_estimation_port\032\027eco/signal_header.p"
  "roto\"\356\003\n\021TceEstimationPort\022\030\n\017uiVersionN"
  "umber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.e"
  "co.signal_header.SignalHeader\022\025\n\014tireCir"
  "cFL_m\030\263\n \001(\002\022\031\n\020tireCircStdvFL_m\030\237\014 \001(\002\022"
  "\025\n\014tireCircFR_m\030\321\032 \001(\002\022\031\n\020tireCircStdvFR"
  "_m\030\375\034 \001(\002\022\025\n\014tireCircRL_m\030\345\010 \001(\002\022\031\n\020tire"
  "CircStdvRL_m\030\311\016 \001(\002\022\025\n\014tireCircRR_m\030\207\030 \001"
  "(\002\022\031\n\020tireCircStdvRR_m\030\253\036 \001(\002\022\031\n\020rearTra"
  "ckWidth_m\030\337\007 \001(\002\022\035\n\024rearTrackWidthStdv_m"
  "\030\205\005 \001(\002\022\030\n\017tireCircFLValid\030\257\001 \001(\010\022\030\n\017tir"
  "eCircFRValid\030\210\025 \001(\010\022\030\n\017tireCircRLValid\030\222"
  "\014 \001(\010\022\030\n\017tireCircRRValid\030\265\030 \001(\010\022\034\n\023rearT"
  "rackWidthValid\030\315\016 \001(\010\"\\\n\034TceEstimationPo"
  "rt_array_port\022<\n\004data\030\223\007 \003(\0132-.pb.tce.tc"
  "e_estimation_port.TceEstimationPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tce_2ftce_5festimation_5fport_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tce_2ftce_5festimation_5fport_2eproto_sccs[2] = {
  &scc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto.base,
  &scc_info_TceEstimationPort_array_port_tce_2ftce_5festimation_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tce_2ftce_5festimation_5fport_2eproto_once;
static bool descriptor_table_tce_2ftce_5festimation_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tce_2ftce_5festimation_5fport_2eproto = {
  &descriptor_table_tce_2ftce_5festimation_5fport_2eproto_initialized, descriptor_table_protodef_tce_2ftce_5festimation_5fport_2eproto, "tce/tce_estimation_port.proto", 675,
  &descriptor_table_tce_2ftce_5festimation_5fport_2eproto_once, descriptor_table_tce_2ftce_5festimation_5fport_2eproto_sccs, descriptor_table_tce_2ftce_5festimation_5fport_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_tce_2ftce_5festimation_5fport_2eproto::offsets,
  file_level_metadata_tce_2ftce_5festimation_5fport_2eproto, 2, file_level_enum_descriptors_tce_2ftce_5festimation_5fport_2eproto, file_level_service_descriptors_tce_2ftce_5festimation_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tce_2ftce_5festimation_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tce_2ftce_5festimation_5fport_2eproto), true);
namespace pb {
namespace tce {
namespace tce_estimation_port {

// ===================================================================

void TceEstimationPort::InitAsDefaultInstance() {
  ::pb::tce::tce_estimation_port::_TceEstimationPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class TceEstimationPort::_Internal {
 public:
  using HasBits = decltype(std::declval<TceEstimationPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const TceEstimationPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tirecircfl_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tirecircstdvfl_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tirecircfr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tirecircstdvfr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tirecircrl_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tirecircstdvrl_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tirecircrr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tirecircstdvrr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reartrackwidth_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reartrackwidthstdv_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tirecircflvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tirecircfrvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tirecircrlvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tirecircrrvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_reartrackwidthvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
TceEstimationPort::_Internal::ssigheader(const TceEstimationPort* msg) {
  return *msg->ssigheader_;
}
void TceEstimationPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TceEstimationPort::TceEstimationPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.tce.tce_estimation_port.TceEstimationPort)
}
TceEstimationPort::TceEstimationPort(const TceEstimationPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&tirecircstdvrr_m_, &from.tirecircstdvrr_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&tirecircstdvfr_m_) -
    reinterpret_cast<char*>(&tirecircstdvrr_m_)) + sizeof(tirecircstdvfr_m_));
  // @@protoc_insertion_point(copy_constructor:pb.tce.tce_estimation_port.TceEstimationPort)
}

void TceEstimationPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tirecircstdvfr_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(tirecircstdvfr_m_));
}

TceEstimationPort::~TceEstimationPort() {
  // @@protoc_insertion_point(destructor:pb.tce.tce_estimation_port.TceEstimationPort)
  SharedDtor();
}

void TceEstimationPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void TceEstimationPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TceEstimationPort& TceEstimationPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TceEstimationPort_tce_2ftce_5festimation_5fport_2eproto.base);
  return *internal_default_instance();
}


void TceEstimationPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.tce.tce_estimation_port.TceEstimationPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&tirecircstdvrr_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tirecircstdvrl_m_) -
        reinterpret_cast<char*>(&tirecircstdvrr_m_)) + sizeof(tirecircstdvrl_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&reartrackwidthvalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tirecircfr_m_) -
        reinterpret_cast<char*>(&reartrackwidthvalid_)) + sizeof(tirecircfr_m_));
  }
  tirecircstdvfr_m_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TceEstimationPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool tireCircFLValid = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tirecircflvalid(&has_bits);
          tirecircflvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rearTrackWidthStdv_m = 645;
      case 645:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_reartrackwidthstdv_m(&has_bits);
          reartrackwidthstdv_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rearTrackWidth_m = 991;
      case 991:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_reartrackwidth_m(&has_bits);
          reartrackwidth_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tireCircRL_m = 1125;
      case 1125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_tirecircrl_m(&has_bits);
          tirecircrl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tireCircFL_m = 1331;
      case 1331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_tirecircfl_m(&has_bits);
          tirecircfl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tireCircRLValid = 1554;
      case 1554:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tirecircrlvalid(&has_bits);
          tirecircrlvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tireCircStdvFL_m = 1567;
      case 1567:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_tirecircstdvfl_m(&has_bits);
          tirecircstdvfl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tireCircStdvRL_m = 1865;
      case 1865:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_tirecircstdvrl_m(&has_bits);
          tirecircstdvrl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool rearTrackWidthValid = 1869;
      case 1869:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_reartrackwidthvalid(&has_bits);
          reartrackwidthvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tireCircFRValid = 2696;
      case 2696:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tirecircfrvalid(&has_bits);
          tirecircfrvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tireCircRR_m = 3079;
      case 3079:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_tirecircrr_m(&has_bits);
          tirecircrr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool tireCircRRValid = 3125;
      case 3125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tirecircrrvalid(&has_bits);
          tirecircrrvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float tireCircFR_m = 3409;
      case 3409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tirecircfr_m(&has_bits);
          tirecircfr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tireCircStdvFR_m = 3709;
      case 3709:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_tirecircstdvfr_m(&has_bits);
          tirecircstdvfr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tireCircStdvRR_m = 3883;
      case 3883:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_tirecircstdvrr_m(&has_bits);
          tirecircstdvrr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TceEstimationPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.tce.tce_estimation_port.TceEstimationPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tireCircFLValid = 175;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(175, this->_internal_tirecircflvalid(), target);
  }

  // optional float rearTrackWidthStdv_m = 645;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(645, this->_internal_reartrackwidthstdv_m(), target);
  }

  // optional float rearTrackWidth_m = 991;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(991, this->_internal_reartrackwidth_m(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float tireCircRL_m = 1125;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1125, this->_internal_tirecircrl_m(), target);
  }

  // optional float tireCircFL_m = 1331;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1331, this->_internal_tirecircfl_m(), target);
  }

  // optional bool tireCircRLValid = 1554;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1554, this->_internal_tirecircrlvalid(), target);
  }

  // optional float tireCircStdvFL_m = 1567;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1567, this->_internal_tirecircstdvfl_m(), target);
  }

  // optional float tireCircStdvRL_m = 1865;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1865, this->_internal_tirecircstdvrl_m(), target);
  }

  // optional bool rearTrackWidthValid = 1869;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1869, this->_internal_reartrackwidthvalid(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool tireCircFRValid = 2696;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2696, this->_internal_tirecircfrvalid(), target);
  }

  // optional float tireCircRR_m = 3079;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3079, this->_internal_tirecircrr_m(), target);
  }

  // optional bool tireCircRRValid = 3125;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3125, this->_internal_tirecircrrvalid(), target);
  }

  // optional float tireCircFR_m = 3409;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3409, this->_internal_tirecircfr_m(), target);
  }

  // optional float tireCircStdvFR_m = 3709;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3709, this->_internal_tirecircstdvfr_m(), target);
  }

  // optional float tireCircStdvRR_m = 3883;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3883, this->_internal_tirecircstdvrr_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.tce.tce_estimation_port.TceEstimationPort)
  return target;
}

size_t TceEstimationPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.tce.tce_estimation_port.TceEstimationPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float tireCircStdvRR_m = 3883;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float rearTrackWidthStdv_m = 645;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float rearTrackWidth_m = 991;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float tireCircRL_m = 1125;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float tireCircFL_m = 1331;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float tireCircStdvFL_m = 1567;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float tireCircStdvRL_m = 1865;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool rearTrackWidthValid = 1869;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tireCircFLValid = 175;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tireCircFRValid = 2696;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool tireCircRLValid = 1554;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tireCircRRValid = 3125;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float tireCircRR_m = 3079;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float tireCircFR_m = 3409;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  // optional float tireCircStdvFR_m = 3709;
  if (cached_has_bits & 0x00010000u) {
    total_size += 3 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TceEstimationPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.tce.tce_estimation_port.TceEstimationPort)
  GOOGLE_DCHECK_NE(&from, this);
  const TceEstimationPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TceEstimationPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.tce.tce_estimation_port.TceEstimationPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.tce.tce_estimation_port.TceEstimationPort)
    MergeFrom(*source);
  }
}

void TceEstimationPort::MergeFrom(const TceEstimationPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.tce.tce_estimation_port.TceEstimationPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      tirecircstdvrr_m_ = from.tirecircstdvrr_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      reartrackwidthstdv_m_ = from.reartrackwidthstdv_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      reartrackwidth_m_ = from.reartrackwidth_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      tirecircrl_m_ = from.tirecircrl_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      tirecircfl_m_ = from.tirecircfl_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      tirecircstdvfl_m_ = from.tirecircstdvfl_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      tirecircstdvrl_m_ = from.tirecircstdvrl_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      reartrackwidthvalid_ = from.reartrackwidthvalid_;
    }
    if (cached_has_bits & 0x00000200u) {
      tirecircflvalid_ = from.tirecircflvalid_;
    }
    if (cached_has_bits & 0x00000400u) {
      tirecircfrvalid_ = from.tirecircfrvalid_;
    }
    if (cached_has_bits & 0x00000800u) {
      tirecircrlvalid_ = from.tirecircrlvalid_;
    }
    if (cached_has_bits & 0x00001000u) {
      tirecircrrvalid_ = from.tirecircrrvalid_;
    }
    if (cached_has_bits & 0x00002000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00004000u) {
      tirecircrr_m_ = from.tirecircrr_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      tirecircfr_m_ = from.tirecircfr_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_tirecircstdvfr_m(from._internal_tirecircstdvfr_m());
  }
}

void TceEstimationPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.tce.tce_estimation_port.TceEstimationPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TceEstimationPort::CopyFrom(const TceEstimationPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.tce.tce_estimation_port.TceEstimationPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TceEstimationPort::IsInitialized() const {
  return true;
}

void TceEstimationPort::InternalSwap(TceEstimationPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(tirecircstdvrr_m_, other->tirecircstdvrr_m_);
  swap(reartrackwidthstdv_m_, other->reartrackwidthstdv_m_);
  swap(reartrackwidth_m_, other->reartrackwidth_m_);
  swap(tirecircrl_m_, other->tirecircrl_m_);
  swap(tirecircfl_m_, other->tirecircfl_m_);
  swap(tirecircstdvfl_m_, other->tirecircstdvfl_m_);
  swap(tirecircstdvrl_m_, other->tirecircstdvrl_m_);
  swap(reartrackwidthvalid_, other->reartrackwidthvalid_);
  swap(tirecircflvalid_, other->tirecircflvalid_);
  swap(tirecircfrvalid_, other->tirecircfrvalid_);
  swap(tirecircrlvalid_, other->tirecircrlvalid_);
  swap(tirecircrrvalid_, other->tirecircrrvalid_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(tirecircrr_m_, other->tirecircrr_m_);
  swap(tirecircfr_m_, other->tirecircfr_m_);
  swap(tirecircstdvfr_m_, other->tirecircstdvfr_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TceEstimationPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TceEstimationPort_array_port::InitAsDefaultInstance() {
}
class TceEstimationPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<TceEstimationPort_array_port>()._has_bits_);
};

TceEstimationPort_array_port::TceEstimationPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
}
TceEstimationPort_array_port::TceEstimationPort_array_port(const TceEstimationPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
}

void TceEstimationPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TceEstimationPort_array_port_tce_2ftce_5festimation_5fport_2eproto.base);
}

TceEstimationPort_array_port::~TceEstimationPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  SharedDtor();
}

void TceEstimationPort_array_port::SharedDtor() {
}

void TceEstimationPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TceEstimationPort_array_port& TceEstimationPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TceEstimationPort_array_port_tce_2ftce_5festimation_5fport_2eproto.base);
  return *internal_default_instance();
}


void TceEstimationPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TceEstimationPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.tce.tce_estimation_port.TceEstimationPort data = 915;
      case 915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<7322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TceEstimationPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.tce.tce_estimation_port.TceEstimationPort data = 915;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(915, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  return target;
}

size_t TceEstimationPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.tce.tce_estimation_port.TceEstimationPort data = 915;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TceEstimationPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const TceEstimationPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TceEstimationPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
    MergeFrom(*source);
  }
}

void TceEstimationPort_array_port::MergeFrom(const TceEstimationPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TceEstimationPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TceEstimationPort_array_port::CopyFrom(const TceEstimationPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TceEstimationPort_array_port::IsInitialized() const {
  return true;
}

void TceEstimationPort_array_port::InternalSwap(TceEstimationPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TceEstimationPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tce_estimation_port
}  // namespace tce
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::tce::tce_estimation_port::TceEstimationPort* Arena::CreateMaybeMessage< ::pb::tce::tce_estimation_port::TceEstimationPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::tce::tce_estimation_port::TceEstimationPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::tce::tce_estimation_port::TceEstimationPort_array_port* Arena::CreateMaybeMessage< ::pb::tce::tce_estimation_port::TceEstimationPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::tce::tce_estimation_port::TceEstimationPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
