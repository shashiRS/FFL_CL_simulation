// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tce/fc_tce_params.proto

#include "tce/fc_tce_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tce_2ffc_5ftce_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto;
namespace pb {
namespace tce {
namespace fc_tce_params {
class FC_TCE_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TCE_Params> _instance;
} _FC_TCE_Params_default_instance_;
class FC_TCE_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TCE_Params_array_port> _instance;
} _FC_TCE_Params_array_port_default_instance_;
}  // namespace fc_tce_params
}  // namespace tce
}  // namespace pb
static void InitDefaultsscc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::tce::fc_tce_params::_FC_TCE_Params_default_instance_;
    new (ptr) ::pb::tce::fc_tce_params::FC_TCE_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::tce::fc_tce_params::FC_TCE_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_TCE_Params_array_port_tce_2ffc_5ftce_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::tce::fc_tce_params::_FC_TCE_Params_array_port_default_instance_;
    new (ptr) ::pb::tce::fc_tce_params::FC_TCE_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::tce::fc_tce_params::FC_TCE_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TCE_Params_array_port_tce_2ffc_5ftce_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TCE_Params_array_port_tce_2ffc_5ftce_5fparams_2eproto}, {
      &scc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tce_2ffc_5ftce_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tce_2ffc_5ftce_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tce_2ffc_5ftce_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tce_2ffc_5ftce_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_sync_buffer_delay_us_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_wheelbase_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_tyre_circumference_fl_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_tyre_circumference_fr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_tyre_circumference_rl_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_tyre_circumference_rr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_track_front_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_track_rear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_min_tyre_circumference_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_max_tyre_circumference_m_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_speed_dependancy_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params, tce_wheel_number_of_teeth_nu_),
  6,
  0,
  5,
  10,
  9,
  2,
  11,
  3,
  7,
  12,
  8,
  1,
  4,
  13,
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::tce::fc_tce_params::FC_TCE_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::pb::tce::fc_tce_params::FC_TCE_Params)},
  { 33, 39, sizeof(::pb::tce::fc_tce_params::FC_TCE_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::tce::fc_tce_params::_FC_TCE_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::tce::fc_tce_params::_FC_TCE_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_tce_2ffc_5ftce_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027tce/fc_tce_params.proto\022\024pb.tce.fc_tce"
  "_params\032\027eco/signal_header.proto\"\203\004\n\rFC_"
  "TCE_Params\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\n"
  "sSigHeader\030\211\010 \001(\0132\".pb.eco.signal_header"
  ".SignalHeader\022!\n\030TCE_SYNC_BUFFER_DELAY_U"
  "S\030\354\n \001(\004\022\030\n\017TCE_WHEELBASE_M\030\321\026 \001(\002\022$\n\033TC"
  "E_TYRE_CIRCUMFERENCE_FL_M\030\260\024 \001(\002\022$\n\033TCE_"
  "TYRE_CIRCUMFERENCE_FR_M\030\322\004 \001(\002\022$\n\033TCE_TY"
  "RE_CIRCUMFERENCE_RL_M\030\346\026 \001(\002\022$\n\033TCE_TYRE"
  "_CIRCUMFERENCE_RR_M\030\204\006 \001(\002\022\032\n\021TCE_TRACK_"
  "FRONT_M\030\346\021 \001(\002\022\031\n\020TCE_TRACK_REAR_M\030\266\031 \001("
  "\002\022%\n\034TCE_MIN_TYRE_CIRCUMFERENCE_M\030\206\023 \001(\002"
  "\022$\n\034TCE_MAX_TYRE_CIRCUMFERENCE_M\030\n \001(\002\022\035"
  "\n\024TCE_SPEED_DEPENDANCY\030\272\016 \001(\002\022\'\n\034TCE_WHE"
  "EL_NUMBER_OF_TEETH_NU\030\335\341\231\006 \001(\r\"N\n\030FC_TCE"
  "_Params_array_port\0222\n\004data\030\246\r \003(\0132#.pb.t"
  "ce.fc_tce_params.FC_TCE_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto.base,
  &scc_info_FC_TCE_Params_array_port_tce_2ffc_5ftce_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_once;
static bool descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tce_2ffc_5ftce_5fparams_2eproto = {
  &descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_initialized, descriptor_table_protodef_tce_2ffc_5ftce_5fparams_2eproto, "tce/fc_tce_params.proto", 670,
  &descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_once, descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_sccs, descriptor_table_tce_2ffc_5ftce_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_tce_2ffc_5ftce_5fparams_2eproto::offsets,
  file_level_metadata_tce_2ffc_5ftce_5fparams_2eproto, 2, file_level_enum_descriptors_tce_2ffc_5ftce_5fparams_2eproto, file_level_service_descriptors_tce_2ffc_5ftce_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tce_2ffc_5ftce_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tce_2ffc_5ftce_5fparams_2eproto), true);
namespace pb {
namespace tce {
namespace fc_tce_params {

// ===================================================================

void FC_TCE_Params::InitAsDefaultInstance() {
  ::pb::tce::fc_tce_params::_FC_TCE_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_TCE_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TCE_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_TCE_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tce_sync_buffer_delay_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tce_wheelbase_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tce_tyre_circumference_fl_m(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tce_tyre_circumference_fr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tce_tyre_circumference_rl_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tce_tyre_circumference_rr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tce_track_front_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tce_track_rear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tce_min_tyre_circumference_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tce_max_tyre_circumference_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tce_speed_dependancy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tce_wheel_number_of_teeth_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_TCE_Params::_Internal::ssigheader(const FC_TCE_Params* msg) {
  return *msg->ssigheader_;
}
void FC_TCE_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_TCE_Params::FC_TCE_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.tce.fc_tce_params.FC_TCE_Params)
}
FC_TCE_Params::FC_TCE_Params(const FC_TCE_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&tce_max_tyre_circumference_m_, &from.tce_max_tyre_circumference_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&tce_wheel_number_of_teeth_nu_) -
    reinterpret_cast<char*>(&tce_max_tyre_circumference_m_)) + sizeof(tce_wheel_number_of_teeth_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.tce.fc_tce_params.FC_TCE_Params)
}

void FC_TCE_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tce_wheel_number_of_teeth_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(tce_wheel_number_of_teeth_nu_));
}

FC_TCE_Params::~FC_TCE_Params() {
  // @@protoc_insertion_point(destructor:pb.tce.fc_tce_params.FC_TCE_Params)
  SharedDtor();
}

void FC_TCE_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_TCE_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TCE_Params& FC_TCE_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TCE_Params_tce_2ffc_5ftce_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TCE_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.tce.fc_tce_params.FC_TCE_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&tce_max_tyre_circumference_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tce_track_front_m_) -
        reinterpret_cast<char*>(&tce_max_tyre_circumference_m_)) + sizeof(tce_track_front_m_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&tce_min_tyre_circumference_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tce_wheel_number_of_teeth_nu_) -
        reinterpret_cast<char*>(&tce_min_tyre_circumference_m_)) + sizeof(tce_wheel_number_of_teeth_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TCE_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float TCE_MAX_TYRE_CIRCUMFERENCE_M = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_tce_max_tyre_circumference_m(&has_bits);
          tce_max_tyre_circumference_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TCE_TYRE_CIRCUMFERENCE_FR_M = 594;
      case 594:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_tce_tyre_circumference_fr_m(&has_bits);
          tce_tyre_circumference_fr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TCE_TYRE_CIRCUMFERENCE_RR_M = 772;
      case 772:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_tce_tyre_circumference_rr_m(&has_bits);
          tce_tyre_circumference_rr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 TCE_SYNC_BUFFER_DELAY_US = 1388;
      case 1388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tce_sync_buffer_delay_us(&has_bits);
          tce_sync_buffer_delay_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TCE_SPEED_DEPENDANCY = 1850;
      case 1850:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_tce_speed_dependancy(&has_bits);
          tce_speed_dependancy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TCE_TRACK_FRONT_M = 2278;
      case 2278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tce_track_front_m(&has_bits);
          tce_track_front_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TCE_MIN_TYRE_CIRCUMFERENCE_M = 2438;
      case 2438:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tce_min_tyre_circumference_m(&has_bits);
          tce_min_tyre_circumference_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TCE_TYRE_CIRCUMFERENCE_FL_M = 2608;
      case 2608:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_tce_tyre_circumference_fl_m(&has_bits);
          tce_tyre_circumference_fl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TCE_WHEELBASE_M = 2897;
      case 2897:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_tce_wheelbase_m(&has_bits);
          tce_wheelbase_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TCE_TYRE_CIRCUMFERENCE_RL_M = 2918;
      case 2918:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_tce_tyre_circumference_rl_m(&has_bits);
          tce_tyre_circumference_rl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TCE_TRACK_REAR_M = 3254;
      case 3254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_tce_track_rear_m(&has_bits);
          tce_track_rear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 TCE_WHEEL_NUMBER_OF_TEETH_NU = 13005021;
      case 13005021:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_tce_wheel_number_of_teeth_nu(&has_bits);
          tce_wheel_number_of_teeth_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TCE_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.tce.fc_tce_params.FC_TCE_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float TCE_MAX_TYRE_CIRCUMFERENCE_M = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_tce_max_tyre_circumference_m(), target);
  }

  // optional float TCE_TYRE_CIRCUMFERENCE_FR_M = 594;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(594, this->_internal_tce_tyre_circumference_fr_m(), target);
  }

  // optional float TCE_TYRE_CIRCUMFERENCE_RR_M = 772;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(772, this->_internal_tce_tyre_circumference_rr_m(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional uint64 TCE_SYNC_BUFFER_DELAY_US = 1388;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1388, this->_internal_tce_sync_buffer_delay_us(), target);
  }

  // optional float TCE_SPEED_DEPENDANCY = 1850;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1850, this->_internal_tce_speed_dependancy(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float TCE_TRACK_FRONT_M = 2278;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2278, this->_internal_tce_track_front_m(), target);
  }

  // optional float TCE_MIN_TYRE_CIRCUMFERENCE_M = 2438;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2438, this->_internal_tce_min_tyre_circumference_m(), target);
  }

  // optional float TCE_TYRE_CIRCUMFERENCE_FL_M = 2608;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2608, this->_internal_tce_tyre_circumference_fl_m(), target);
  }

  // optional float TCE_WHEELBASE_M = 2897;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2897, this->_internal_tce_wheelbase_m(), target);
  }

  // optional float TCE_TYRE_CIRCUMFERENCE_RL_M = 2918;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2918, this->_internal_tce_tyre_circumference_rl_m(), target);
  }

  // optional float TCE_TRACK_REAR_M = 3254;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3254, this->_internal_tce_track_rear_m(), target);
  }

  // optional uint32 TCE_WHEEL_NUMBER_OF_TEETH_NU = 13005021;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13005021, this->_internal_tce_wheel_number_of_teeth_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.tce.fc_tce_params.FC_TCE_Params)
  return target;
}

size_t FC_TCE_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.tce.fc_tce_params.FC_TCE_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float TCE_MAX_TYRE_CIRCUMFERENCE_M = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float TCE_TYRE_CIRCUMFERENCE_FR_M = 594;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float TCE_TYRE_CIRCUMFERENCE_RR_M = 772;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float TCE_SPEED_DEPENDANCY = 1850;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional uint64 TCE_SYNC_BUFFER_DELAY_US = 1388;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tce_sync_buffer_delay_us());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float TCE_TRACK_FRONT_M = 2278;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float TCE_MIN_TYRE_CIRCUMFERENCE_M = 2438;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float TCE_TYRE_CIRCUMFERENCE_FL_M = 2608;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float TCE_WHEELBASE_M = 2897;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float TCE_TYRE_CIRCUMFERENCE_RL_M = 2918;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float TCE_TRACK_REAR_M = 3254;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional uint32 TCE_WHEEL_NUMBER_OF_TEETH_NU = 13005021;
    if (cached_has_bits & 0x00002000u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tce_wheel_number_of_teeth_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TCE_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.tce.fc_tce_params.FC_TCE_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TCE_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TCE_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.tce.fc_tce_params.FC_TCE_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.tce.fc_tce_params.FC_TCE_Params)
    MergeFrom(*source);
  }
}

void FC_TCE_Params::MergeFrom(const FC_TCE_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.tce.fc_tce_params.FC_TCE_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      tce_max_tyre_circumference_m_ = from.tce_max_tyre_circumference_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      tce_tyre_circumference_fr_m_ = from.tce_tyre_circumference_fr_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      tce_tyre_circumference_rr_m_ = from.tce_tyre_circumference_rr_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      tce_speed_dependancy_ = from.tce_speed_dependancy_;
    }
    if (cached_has_bits & 0x00000020u) {
      tce_sync_buffer_delay_us_ = from.tce_sync_buffer_delay_us_;
    }
    if (cached_has_bits & 0x00000040u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      tce_track_front_m_ = from.tce_track_front_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      tce_min_tyre_circumference_m_ = from.tce_min_tyre_circumference_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      tce_tyre_circumference_fl_m_ = from.tce_tyre_circumference_fl_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      tce_wheelbase_m_ = from.tce_wheelbase_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      tce_tyre_circumference_rl_m_ = from.tce_tyre_circumference_rl_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      tce_track_rear_m_ = from.tce_track_rear_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      tce_wheel_number_of_teeth_nu_ = from.tce_wheel_number_of_teeth_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FC_TCE_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.tce.fc_tce_params.FC_TCE_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TCE_Params::CopyFrom(const FC_TCE_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.tce.fc_tce_params.FC_TCE_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TCE_Params::IsInitialized() const {
  return true;
}

void FC_TCE_Params::InternalSwap(FC_TCE_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(tce_max_tyre_circumference_m_, other->tce_max_tyre_circumference_m_);
  swap(tce_tyre_circumference_fr_m_, other->tce_tyre_circumference_fr_m_);
  swap(tce_tyre_circumference_rr_m_, other->tce_tyre_circumference_rr_m_);
  swap(tce_speed_dependancy_, other->tce_speed_dependancy_);
  swap(tce_sync_buffer_delay_us_, other->tce_sync_buffer_delay_us_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(tce_track_front_m_, other->tce_track_front_m_);
  swap(tce_min_tyre_circumference_m_, other->tce_min_tyre_circumference_m_);
  swap(tce_tyre_circumference_fl_m_, other->tce_tyre_circumference_fl_m_);
  swap(tce_wheelbase_m_, other->tce_wheelbase_m_);
  swap(tce_tyre_circumference_rl_m_, other->tce_tyre_circumference_rl_m_);
  swap(tce_track_rear_m_, other->tce_track_rear_m_);
  swap(tce_wheel_number_of_teeth_nu_, other->tce_wheel_number_of_teeth_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TCE_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_TCE_Params_array_port::InitAsDefaultInstance() {
}
class FC_TCE_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TCE_Params_array_port>()._has_bits_);
};

FC_TCE_Params_array_port::FC_TCE_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
}
FC_TCE_Params_array_port::FC_TCE_Params_array_port(const FC_TCE_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
}

void FC_TCE_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TCE_Params_array_port_tce_2ffc_5ftce_5fparams_2eproto.base);
}

FC_TCE_Params_array_port::~FC_TCE_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  SharedDtor();
}

void FC_TCE_Params_array_port::SharedDtor() {
}

void FC_TCE_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TCE_Params_array_port& FC_TCE_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TCE_Params_array_port_tce_2ffc_5ftce_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TCE_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TCE_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.tce.fc_tce_params.FC_TCE_Params data = 1702;
      case 1702:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13618>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TCE_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.tce.fc_tce_params.FC_TCE_Params data = 1702;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1702, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  return target;
}

size_t FC_TCE_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.tce.fc_tce_params.FC_TCE_Params data = 1702;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TCE_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TCE_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TCE_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_TCE_Params_array_port::MergeFrom(const FC_TCE_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_TCE_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TCE_Params_array_port::CopyFrom(const FC_TCE_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.tce.fc_tce_params.FC_TCE_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TCE_Params_array_port::IsInitialized() const {
  return true;
}

void FC_TCE_Params_array_port::InternalSwap(FC_TCE_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TCE_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_tce_params
}  // namespace tce
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::tce::fc_tce_params::FC_TCE_Params* Arena::CreateMaybeMessage< ::pb::tce::fc_tce_params::FC_TCE_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::tce::fc_tce_params::FC_TCE_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::tce::fc_tce_params::FC_TCE_Params_array_port* Arena::CreateMaybeMessage< ::pb::tce::fc_tce_params::FC_TCE_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::tce::fc_tce_params::FC_TCE_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
