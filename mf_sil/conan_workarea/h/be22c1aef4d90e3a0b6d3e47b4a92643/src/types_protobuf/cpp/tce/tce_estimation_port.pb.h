// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tce/tce_estimation_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tce_2ftce_5festimation_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tce_2ftce_5festimation_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tce_2ftce_5festimation_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tce_2ftce_5festimation_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tce_2ftce_5festimation_5fport_2eproto;
namespace pb {
namespace tce {
namespace tce_estimation_port {
class TceEstimationPort;
class TceEstimationPortDefaultTypeInternal;
extern TceEstimationPortDefaultTypeInternal _TceEstimationPort_default_instance_;
class TceEstimationPort_array_port;
class TceEstimationPort_array_portDefaultTypeInternal;
extern TceEstimationPort_array_portDefaultTypeInternal _TceEstimationPort_array_port_default_instance_;
}  // namespace tce_estimation_port
}  // namespace tce
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::tce::tce_estimation_port::TceEstimationPort* Arena::CreateMaybeMessage<::pb::tce::tce_estimation_port::TceEstimationPort>(Arena*);
template<> ::pb::tce::tce_estimation_port::TceEstimationPort_array_port* Arena::CreateMaybeMessage<::pb::tce::tce_estimation_port::TceEstimationPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace tce {
namespace tce_estimation_port {

// ===================================================================

class TceEstimationPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.tce.tce_estimation_port.TceEstimationPort) */ {
 public:
  TceEstimationPort();
  virtual ~TceEstimationPort();

  TceEstimationPort(const TceEstimationPort& from);
  TceEstimationPort(TceEstimationPort&& from) noexcept
    : TceEstimationPort() {
    *this = ::std::move(from);
  }

  inline TceEstimationPort& operator=(const TceEstimationPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline TceEstimationPort& operator=(TceEstimationPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TceEstimationPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TceEstimationPort* internal_default_instance() {
    return reinterpret_cast<const TceEstimationPort*>(
               &_TceEstimationPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TceEstimationPort& a, TceEstimationPort& b) {
    a.Swap(&b);
  }
  inline void Swap(TceEstimationPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TceEstimationPort* New() const final {
    return CreateMaybeMessage<TceEstimationPort>(nullptr);
  }

  TceEstimationPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TceEstimationPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TceEstimationPort& from);
  void MergeFrom(const TceEstimationPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TceEstimationPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.tce.tce_estimation_port.TceEstimationPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tce_2ftce_5festimation_5fport_2eproto);
    return ::descriptor_table_tce_2ftce_5festimation_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kTireCircStdvRRMFieldNumber = 3883,
    kRearTrackWidthStdvMFieldNumber = 645,
    kRearTrackWidthMFieldNumber = 991,
    kTireCircRLMFieldNumber = 1125,
    kTireCircFLMFieldNumber = 1331,
    kTireCircStdvFLMFieldNumber = 1567,
    kTireCircStdvRLMFieldNumber = 1865,
    kRearTrackWidthValidFieldNumber = 1869,
    kTireCircFLValidFieldNumber = 175,
    kTireCircFRValidFieldNumber = 2696,
    kTireCircRLValidFieldNumber = 1554,
    kTireCircRRValidFieldNumber = 3125,
    kUiVersionNumberFieldNumber = 2124,
    kTireCircRRMFieldNumber = 3079,
    kTireCircFRMFieldNumber = 3409,
    kTireCircStdvFRMFieldNumber = 3709,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float tireCircStdvRR_m = 3883;
  bool has_tirecircstdvrr_m() const;
  private:
  bool _internal_has_tirecircstdvrr_m() const;
  public:
  void clear_tirecircstdvrr_m();
  float tirecircstdvrr_m() const;
  void set_tirecircstdvrr_m(float value);
  private:
  float _internal_tirecircstdvrr_m() const;
  void _internal_set_tirecircstdvrr_m(float value);
  public:

  // optional float rearTrackWidthStdv_m = 645;
  bool has_reartrackwidthstdv_m() const;
  private:
  bool _internal_has_reartrackwidthstdv_m() const;
  public:
  void clear_reartrackwidthstdv_m();
  float reartrackwidthstdv_m() const;
  void set_reartrackwidthstdv_m(float value);
  private:
  float _internal_reartrackwidthstdv_m() const;
  void _internal_set_reartrackwidthstdv_m(float value);
  public:

  // optional float rearTrackWidth_m = 991;
  bool has_reartrackwidth_m() const;
  private:
  bool _internal_has_reartrackwidth_m() const;
  public:
  void clear_reartrackwidth_m();
  float reartrackwidth_m() const;
  void set_reartrackwidth_m(float value);
  private:
  float _internal_reartrackwidth_m() const;
  void _internal_set_reartrackwidth_m(float value);
  public:

  // optional float tireCircRL_m = 1125;
  bool has_tirecircrl_m() const;
  private:
  bool _internal_has_tirecircrl_m() const;
  public:
  void clear_tirecircrl_m();
  float tirecircrl_m() const;
  void set_tirecircrl_m(float value);
  private:
  float _internal_tirecircrl_m() const;
  void _internal_set_tirecircrl_m(float value);
  public:

  // optional float tireCircFL_m = 1331;
  bool has_tirecircfl_m() const;
  private:
  bool _internal_has_tirecircfl_m() const;
  public:
  void clear_tirecircfl_m();
  float tirecircfl_m() const;
  void set_tirecircfl_m(float value);
  private:
  float _internal_tirecircfl_m() const;
  void _internal_set_tirecircfl_m(float value);
  public:

  // optional float tireCircStdvFL_m = 1567;
  bool has_tirecircstdvfl_m() const;
  private:
  bool _internal_has_tirecircstdvfl_m() const;
  public:
  void clear_tirecircstdvfl_m();
  float tirecircstdvfl_m() const;
  void set_tirecircstdvfl_m(float value);
  private:
  float _internal_tirecircstdvfl_m() const;
  void _internal_set_tirecircstdvfl_m(float value);
  public:

  // optional float tireCircStdvRL_m = 1865;
  bool has_tirecircstdvrl_m() const;
  private:
  bool _internal_has_tirecircstdvrl_m() const;
  public:
  void clear_tirecircstdvrl_m();
  float tirecircstdvrl_m() const;
  void set_tirecircstdvrl_m(float value);
  private:
  float _internal_tirecircstdvrl_m() const;
  void _internal_set_tirecircstdvrl_m(float value);
  public:

  // optional bool rearTrackWidthValid = 1869;
  bool has_reartrackwidthvalid() const;
  private:
  bool _internal_has_reartrackwidthvalid() const;
  public:
  void clear_reartrackwidthvalid();
  bool reartrackwidthvalid() const;
  void set_reartrackwidthvalid(bool value);
  private:
  bool _internal_reartrackwidthvalid() const;
  void _internal_set_reartrackwidthvalid(bool value);
  public:

  // optional bool tireCircFLValid = 175;
  bool has_tirecircflvalid() const;
  private:
  bool _internal_has_tirecircflvalid() const;
  public:
  void clear_tirecircflvalid();
  bool tirecircflvalid() const;
  void set_tirecircflvalid(bool value);
  private:
  bool _internal_tirecircflvalid() const;
  void _internal_set_tirecircflvalid(bool value);
  public:

  // optional bool tireCircFRValid = 2696;
  bool has_tirecircfrvalid() const;
  private:
  bool _internal_has_tirecircfrvalid() const;
  public:
  void clear_tirecircfrvalid();
  bool tirecircfrvalid() const;
  void set_tirecircfrvalid(bool value);
  private:
  bool _internal_tirecircfrvalid() const;
  void _internal_set_tirecircfrvalid(bool value);
  public:

  // optional bool tireCircRLValid = 1554;
  bool has_tirecircrlvalid() const;
  private:
  bool _internal_has_tirecircrlvalid() const;
  public:
  void clear_tirecircrlvalid();
  bool tirecircrlvalid() const;
  void set_tirecircrlvalid(bool value);
  private:
  bool _internal_tirecircrlvalid() const;
  void _internal_set_tirecircrlvalid(bool value);
  public:

  // optional bool tireCircRRValid = 3125;
  bool has_tirecircrrvalid() const;
  private:
  bool _internal_has_tirecircrrvalid() const;
  public:
  void clear_tirecircrrvalid();
  bool tirecircrrvalid() const;
  void set_tirecircrrvalid(bool value);
  private:
  bool _internal_tirecircrrvalid() const;
  void _internal_set_tirecircrrvalid(bool value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float tireCircRR_m = 3079;
  bool has_tirecircrr_m() const;
  private:
  bool _internal_has_tirecircrr_m() const;
  public:
  void clear_tirecircrr_m();
  float tirecircrr_m() const;
  void set_tirecircrr_m(float value);
  private:
  float _internal_tirecircrr_m() const;
  void _internal_set_tirecircrr_m(float value);
  public:

  // optional float tireCircFR_m = 3409;
  bool has_tirecircfr_m() const;
  private:
  bool _internal_has_tirecircfr_m() const;
  public:
  void clear_tirecircfr_m();
  float tirecircfr_m() const;
  void set_tirecircfr_m(float value);
  private:
  float _internal_tirecircfr_m() const;
  void _internal_set_tirecircfr_m(float value);
  public:

  // optional float tireCircStdvFR_m = 3709;
  bool has_tirecircstdvfr_m() const;
  private:
  bool _internal_has_tirecircstdvfr_m() const;
  public:
  void clear_tirecircstdvfr_m();
  float tirecircstdvfr_m() const;
  void set_tirecircstdvfr_m(float value);
  private:
  float _internal_tirecircstdvfr_m() const;
  void _internal_set_tirecircstdvfr_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.tce.tce_estimation_port.TceEstimationPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float tirecircstdvrr_m_;
  float reartrackwidthstdv_m_;
  float reartrackwidth_m_;
  float tirecircrl_m_;
  float tirecircfl_m_;
  float tirecircstdvfl_m_;
  float tirecircstdvrl_m_;
  bool reartrackwidthvalid_;
  bool tirecircflvalid_;
  bool tirecircfrvalid_;
  bool tirecircrlvalid_;
  bool tirecircrrvalid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float tirecircrr_m_;
  float tirecircfr_m_;
  float tirecircstdvfr_m_;
  friend struct ::TableStruct_tce_2ftce_5festimation_5fport_2eproto;
};
// -------------------------------------------------------------------

class TceEstimationPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.tce.tce_estimation_port.TceEstimationPort_array_port) */ {
 public:
  TceEstimationPort_array_port();
  virtual ~TceEstimationPort_array_port();

  TceEstimationPort_array_port(const TceEstimationPort_array_port& from);
  TceEstimationPort_array_port(TceEstimationPort_array_port&& from) noexcept
    : TceEstimationPort_array_port() {
    *this = ::std::move(from);
  }

  inline TceEstimationPort_array_port& operator=(const TceEstimationPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline TceEstimationPort_array_port& operator=(TceEstimationPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TceEstimationPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TceEstimationPort_array_port* internal_default_instance() {
    return reinterpret_cast<const TceEstimationPort_array_port*>(
               &_TceEstimationPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TceEstimationPort_array_port& a, TceEstimationPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(TceEstimationPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TceEstimationPort_array_port* New() const final {
    return CreateMaybeMessage<TceEstimationPort_array_port>(nullptr);
  }

  TceEstimationPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TceEstimationPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TceEstimationPort_array_port& from);
  void MergeFrom(const TceEstimationPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TceEstimationPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.tce.tce_estimation_port.TceEstimationPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tce_2ftce_5festimation_5fport_2eproto);
    return ::descriptor_table_tce_2ftce_5festimation_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 915,
  };
  // repeated .pb.tce.tce_estimation_port.TceEstimationPort data = 915;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::tce::tce_estimation_port::TceEstimationPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::tce::tce_estimation_port::TceEstimationPort >*
      mutable_data();
  private:
  const ::pb::tce::tce_estimation_port::TceEstimationPort& _internal_data(int index) const;
  ::pb::tce::tce_estimation_port::TceEstimationPort* _internal_add_data();
  public:
  const ::pb::tce::tce_estimation_port::TceEstimationPort& data(int index) const;
  ::pb::tce::tce_estimation_port::TceEstimationPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::tce::tce_estimation_port::TceEstimationPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.tce.tce_estimation_port.TceEstimationPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::tce::tce_estimation_port::TceEstimationPort > data_;
  friend struct ::TableStruct_tce_2ftce_5festimation_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TceEstimationPort

// optional uint32 uiVersionNumber = 2124;
inline bool TceEstimationPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TceEstimationPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void TceEstimationPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TceEstimationPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TceEstimationPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void TceEstimationPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  uiversionnumber_ = value;
}
inline void TceEstimationPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool TceEstimationPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool TceEstimationPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& TceEstimationPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& TceEstimationPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* TceEstimationPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.tce.tce_estimation_port.TceEstimationPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* TceEstimationPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* TceEstimationPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.tce.tce_estimation_port.TceEstimationPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void TceEstimationPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.tce.tce_estimation_port.TceEstimationPort.sSigHeader)
}

// optional float tireCircFL_m = 1331;
inline bool TceEstimationPort::_internal_has_tirecircfl_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircfl_m() const {
  return _internal_has_tirecircfl_m();
}
inline void TceEstimationPort::clear_tirecircfl_m() {
  tirecircfl_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TceEstimationPort::_internal_tirecircfl_m() const {
  return tirecircfl_m_;
}
inline float TceEstimationPort::tirecircfl_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFL_m)
  return _internal_tirecircfl_m();
}
inline void TceEstimationPort::_internal_set_tirecircfl_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  tirecircfl_m_ = value;
}
inline void TceEstimationPort::set_tirecircfl_m(float value) {
  _internal_set_tirecircfl_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFL_m)
}

// optional float tireCircStdvFL_m = 1567;
inline bool TceEstimationPort::_internal_has_tirecircstdvfl_m() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircstdvfl_m() const {
  return _internal_has_tirecircstdvfl_m();
}
inline void TceEstimationPort::clear_tirecircstdvfl_m() {
  tirecircstdvfl_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TceEstimationPort::_internal_tirecircstdvfl_m() const {
  return tirecircstdvfl_m_;
}
inline float TceEstimationPort::tirecircstdvfl_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvFL_m)
  return _internal_tirecircstdvfl_m();
}
inline void TceEstimationPort::_internal_set_tirecircstdvfl_m(float value) {
  _has_bits_[0] |= 0x00000040u;
  tirecircstdvfl_m_ = value;
}
inline void TceEstimationPort::set_tirecircstdvfl_m(float value) {
  _internal_set_tirecircstdvfl_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvFL_m)
}

// optional float tireCircFR_m = 3409;
inline bool TceEstimationPort::_internal_has_tirecircfr_m() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircfr_m() const {
  return _internal_has_tirecircfr_m();
}
inline void TceEstimationPort::clear_tirecircfr_m() {
  tirecircfr_m_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TceEstimationPort::_internal_tirecircfr_m() const {
  return tirecircfr_m_;
}
inline float TceEstimationPort::tirecircfr_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFR_m)
  return _internal_tirecircfr_m();
}
inline void TceEstimationPort::_internal_set_tirecircfr_m(float value) {
  _has_bits_[0] |= 0x00008000u;
  tirecircfr_m_ = value;
}
inline void TceEstimationPort::set_tirecircfr_m(float value) {
  _internal_set_tirecircfr_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFR_m)
}

// optional float tireCircStdvFR_m = 3709;
inline bool TceEstimationPort::_internal_has_tirecircstdvfr_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircstdvfr_m() const {
  return _internal_has_tirecircstdvfr_m();
}
inline void TceEstimationPort::clear_tirecircstdvfr_m() {
  tirecircstdvfr_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TceEstimationPort::_internal_tirecircstdvfr_m() const {
  return tirecircstdvfr_m_;
}
inline float TceEstimationPort::tirecircstdvfr_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvFR_m)
  return _internal_tirecircstdvfr_m();
}
inline void TceEstimationPort::_internal_set_tirecircstdvfr_m(float value) {
  _has_bits_[0] |= 0x00010000u;
  tirecircstdvfr_m_ = value;
}
inline void TceEstimationPort::set_tirecircstdvfr_m(float value) {
  _internal_set_tirecircstdvfr_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvFR_m)
}

// optional float tireCircRL_m = 1125;
inline bool TceEstimationPort::_internal_has_tirecircrl_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircrl_m() const {
  return _internal_has_tirecircrl_m();
}
inline void TceEstimationPort::clear_tirecircrl_m() {
  tirecircrl_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TceEstimationPort::_internal_tirecircrl_m() const {
  return tirecircrl_m_;
}
inline float TceEstimationPort::tirecircrl_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRL_m)
  return _internal_tirecircrl_m();
}
inline void TceEstimationPort::_internal_set_tirecircrl_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  tirecircrl_m_ = value;
}
inline void TceEstimationPort::set_tirecircrl_m(float value) {
  _internal_set_tirecircrl_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRL_m)
}

// optional float tireCircStdvRL_m = 1865;
inline bool TceEstimationPort::_internal_has_tirecircstdvrl_m() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircstdvrl_m() const {
  return _internal_has_tirecircstdvrl_m();
}
inline void TceEstimationPort::clear_tirecircstdvrl_m() {
  tirecircstdvrl_m_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TceEstimationPort::_internal_tirecircstdvrl_m() const {
  return tirecircstdvrl_m_;
}
inline float TceEstimationPort::tirecircstdvrl_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvRL_m)
  return _internal_tirecircstdvrl_m();
}
inline void TceEstimationPort::_internal_set_tirecircstdvrl_m(float value) {
  _has_bits_[0] |= 0x00000080u;
  tirecircstdvrl_m_ = value;
}
inline void TceEstimationPort::set_tirecircstdvrl_m(float value) {
  _internal_set_tirecircstdvrl_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvRL_m)
}

// optional float tireCircRR_m = 3079;
inline bool TceEstimationPort::_internal_has_tirecircrr_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircrr_m() const {
  return _internal_has_tirecircrr_m();
}
inline void TceEstimationPort::clear_tirecircrr_m() {
  tirecircrr_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TceEstimationPort::_internal_tirecircrr_m() const {
  return tirecircrr_m_;
}
inline float TceEstimationPort::tirecircrr_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRR_m)
  return _internal_tirecircrr_m();
}
inline void TceEstimationPort::_internal_set_tirecircrr_m(float value) {
  _has_bits_[0] |= 0x00004000u;
  tirecircrr_m_ = value;
}
inline void TceEstimationPort::set_tirecircrr_m(float value) {
  _internal_set_tirecircrr_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRR_m)
}

// optional float tireCircStdvRR_m = 3883;
inline bool TceEstimationPort::_internal_has_tirecircstdvrr_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircstdvrr_m() const {
  return _internal_has_tirecircstdvrr_m();
}
inline void TceEstimationPort::clear_tirecircstdvrr_m() {
  tirecircstdvrr_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TceEstimationPort::_internal_tirecircstdvrr_m() const {
  return tirecircstdvrr_m_;
}
inline float TceEstimationPort::tirecircstdvrr_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvRR_m)
  return _internal_tirecircstdvrr_m();
}
inline void TceEstimationPort::_internal_set_tirecircstdvrr_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  tirecircstdvrr_m_ = value;
}
inline void TceEstimationPort::set_tirecircstdvrr_m(float value) {
  _internal_set_tirecircstdvrr_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircStdvRR_m)
}

// optional float rearTrackWidth_m = 991;
inline bool TceEstimationPort::_internal_has_reartrackwidth_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TceEstimationPort::has_reartrackwidth_m() const {
  return _internal_has_reartrackwidth_m();
}
inline void TceEstimationPort::clear_reartrackwidth_m() {
  reartrackwidth_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TceEstimationPort::_internal_reartrackwidth_m() const {
  return reartrackwidth_m_;
}
inline float TceEstimationPort::reartrackwidth_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.rearTrackWidth_m)
  return _internal_reartrackwidth_m();
}
inline void TceEstimationPort::_internal_set_reartrackwidth_m(float value) {
  _has_bits_[0] |= 0x00000008u;
  reartrackwidth_m_ = value;
}
inline void TceEstimationPort::set_reartrackwidth_m(float value) {
  _internal_set_reartrackwidth_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.rearTrackWidth_m)
}

// optional float rearTrackWidthStdv_m = 645;
inline bool TceEstimationPort::_internal_has_reartrackwidthstdv_m() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TceEstimationPort::has_reartrackwidthstdv_m() const {
  return _internal_has_reartrackwidthstdv_m();
}
inline void TceEstimationPort::clear_reartrackwidthstdv_m() {
  reartrackwidthstdv_m_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TceEstimationPort::_internal_reartrackwidthstdv_m() const {
  return reartrackwidthstdv_m_;
}
inline float TceEstimationPort::reartrackwidthstdv_m() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.rearTrackWidthStdv_m)
  return _internal_reartrackwidthstdv_m();
}
inline void TceEstimationPort::_internal_set_reartrackwidthstdv_m(float value) {
  _has_bits_[0] |= 0x00000004u;
  reartrackwidthstdv_m_ = value;
}
inline void TceEstimationPort::set_reartrackwidthstdv_m(float value) {
  _internal_set_reartrackwidthstdv_m(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.rearTrackWidthStdv_m)
}

// optional bool tireCircFLValid = 175;
inline bool TceEstimationPort::_internal_has_tirecircflvalid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircflvalid() const {
  return _internal_has_tirecircflvalid();
}
inline void TceEstimationPort::clear_tirecircflvalid() {
  tirecircflvalid_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TceEstimationPort::_internal_tirecircflvalid() const {
  return tirecircflvalid_;
}
inline bool TceEstimationPort::tirecircflvalid() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFLValid)
  return _internal_tirecircflvalid();
}
inline void TceEstimationPort::_internal_set_tirecircflvalid(bool value) {
  _has_bits_[0] |= 0x00000200u;
  tirecircflvalid_ = value;
}
inline void TceEstimationPort::set_tirecircflvalid(bool value) {
  _internal_set_tirecircflvalid(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFLValid)
}

// optional bool tireCircFRValid = 2696;
inline bool TceEstimationPort::_internal_has_tirecircfrvalid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircfrvalid() const {
  return _internal_has_tirecircfrvalid();
}
inline void TceEstimationPort::clear_tirecircfrvalid() {
  tirecircfrvalid_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TceEstimationPort::_internal_tirecircfrvalid() const {
  return tirecircfrvalid_;
}
inline bool TceEstimationPort::tirecircfrvalid() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFRValid)
  return _internal_tirecircfrvalid();
}
inline void TceEstimationPort::_internal_set_tirecircfrvalid(bool value) {
  _has_bits_[0] |= 0x00000400u;
  tirecircfrvalid_ = value;
}
inline void TceEstimationPort::set_tirecircfrvalid(bool value) {
  _internal_set_tirecircfrvalid(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircFRValid)
}

// optional bool tireCircRLValid = 1554;
inline bool TceEstimationPort::_internal_has_tirecircrlvalid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircrlvalid() const {
  return _internal_has_tirecircrlvalid();
}
inline void TceEstimationPort::clear_tirecircrlvalid() {
  tirecircrlvalid_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TceEstimationPort::_internal_tirecircrlvalid() const {
  return tirecircrlvalid_;
}
inline bool TceEstimationPort::tirecircrlvalid() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRLValid)
  return _internal_tirecircrlvalid();
}
inline void TceEstimationPort::_internal_set_tirecircrlvalid(bool value) {
  _has_bits_[0] |= 0x00000800u;
  tirecircrlvalid_ = value;
}
inline void TceEstimationPort::set_tirecircrlvalid(bool value) {
  _internal_set_tirecircrlvalid(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRLValid)
}

// optional bool tireCircRRValid = 3125;
inline bool TceEstimationPort::_internal_has_tirecircrrvalid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TceEstimationPort::has_tirecircrrvalid() const {
  return _internal_has_tirecircrrvalid();
}
inline void TceEstimationPort::clear_tirecircrrvalid() {
  tirecircrrvalid_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TceEstimationPort::_internal_tirecircrrvalid() const {
  return tirecircrrvalid_;
}
inline bool TceEstimationPort::tirecircrrvalid() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRRValid)
  return _internal_tirecircrrvalid();
}
inline void TceEstimationPort::_internal_set_tirecircrrvalid(bool value) {
  _has_bits_[0] |= 0x00001000u;
  tirecircrrvalid_ = value;
}
inline void TceEstimationPort::set_tirecircrrvalid(bool value) {
  _internal_set_tirecircrrvalid(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.tireCircRRValid)
}

// optional bool rearTrackWidthValid = 1869;
inline bool TceEstimationPort::_internal_has_reartrackwidthvalid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TceEstimationPort::has_reartrackwidthvalid() const {
  return _internal_has_reartrackwidthvalid();
}
inline void TceEstimationPort::clear_reartrackwidthvalid() {
  reartrackwidthvalid_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TceEstimationPort::_internal_reartrackwidthvalid() const {
  return reartrackwidthvalid_;
}
inline bool TceEstimationPort::reartrackwidthvalid() const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort.rearTrackWidthValid)
  return _internal_reartrackwidthvalid();
}
inline void TceEstimationPort::_internal_set_reartrackwidthvalid(bool value) {
  _has_bits_[0] |= 0x00000100u;
  reartrackwidthvalid_ = value;
}
inline void TceEstimationPort::set_reartrackwidthvalid(bool value) {
  _internal_set_reartrackwidthvalid(value);
  // @@protoc_insertion_point(field_set:pb.tce.tce_estimation_port.TceEstimationPort.rearTrackWidthValid)
}

// -------------------------------------------------------------------

// TceEstimationPort_array_port

// repeated .pb.tce.tce_estimation_port.TceEstimationPort data = 915;
inline int TceEstimationPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int TceEstimationPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void TceEstimationPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::tce::tce_estimation_port::TceEstimationPort* TceEstimationPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.tce.tce_estimation_port.TceEstimationPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::tce::tce_estimation_port::TceEstimationPort >*
TceEstimationPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.tce.tce_estimation_port.TceEstimationPort_array_port.data)
  return &data_;
}
inline const ::pb::tce::tce_estimation_port::TceEstimationPort& TceEstimationPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::tce::tce_estimation_port::TceEstimationPort& TceEstimationPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.tce.tce_estimation_port.TceEstimationPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::tce::tce_estimation_port::TceEstimationPort* TceEstimationPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::tce::tce_estimation_port::TceEstimationPort* TceEstimationPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.tce.tce_estimation_port.TceEstimationPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::tce::tce_estimation_port::TceEstimationPort >&
TceEstimationPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.tce.tce_estimation_port.TceEstimationPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tce_estimation_port
}  // namespace tce
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tce_2ftce_5festimation_5fport_2eproto
