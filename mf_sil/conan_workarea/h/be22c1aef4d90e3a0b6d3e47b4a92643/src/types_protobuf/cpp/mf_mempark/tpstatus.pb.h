// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/tpstatus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2ftpstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2ftpstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mf_mempark/trained_path.pb.h"
#include "mf_mempark/memorized_parking_status.pb.h"
#include "mf_mempark/training_status.pb.h"
#include "mf_mempark/localization_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2ftpstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmempark_2ftpstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2ftpstatus_2eproto;
namespace pb {
namespace mf_mempark {
namespace tpstatus {
class TPStatus;
class TPStatusDefaultTypeInternal;
extern TPStatusDefaultTypeInternal _TPStatus_default_instance_;
class TPStatus_array_port;
class TPStatus_array_portDefaultTypeInternal;
extern TPStatus_array_portDefaultTypeInternal _TPStatus_array_port_default_instance_;
}  // namespace tpstatus
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_mempark::tpstatus::TPStatus* Arena::CreateMaybeMessage<::pb::mf_mempark::tpstatus::TPStatus>(Arena*);
template<> ::pb::mf_mempark::tpstatus::TPStatus_array_port* Arena::CreateMaybeMessage<::pb::mf_mempark::tpstatus::TPStatus_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_mempark {
namespace tpstatus {

// ===================================================================

class TPStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.tpstatus.TPStatus) */ {
 public:
  TPStatus();
  virtual ~TPStatus();

  TPStatus(const TPStatus& from);
  TPStatus(TPStatus&& from) noexcept
    : TPStatus() {
    *this = ::std::move(from);
  }

  inline TPStatus& operator=(const TPStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPStatus& operator=(TPStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPStatus* internal_default_instance() {
    return reinterpret_cast<const TPStatus*>(
               &_TPStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TPStatus& a, TPStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TPStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPStatus* New() const final {
    return CreateMaybeMessage<TPStatus>(nullptr);
  }

  TPStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPStatus& from);
  void MergeFrom(const TPStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.tpstatus.TPStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2ftpstatus_2eproto);
    return ::descriptor_table_mf_5fmempark_2ftpstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrainedPathsFieldNumber = 2787,
    kTrainingStatusFieldNumber = 612,
    kMemoryParkingStateFieldNumber = 866,
    kLocalizationStatusFieldNumber = 1648,
    kNumberStoredTrainedParkingPathsFieldNumber = 2792,
  };
  // repeated .pb.mf_mempark.trained_path.TrainedPath trainedPaths = 2787;
  int trainedpaths_size() const;
  private:
  int _internal_trainedpaths_size() const;
  public:
  void clear_trainedpaths();
  ::pb::mf_mempark::trained_path::TrainedPath* mutable_trainedpaths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trained_path::TrainedPath >*
      mutable_trainedpaths();
  private:
  const ::pb::mf_mempark::trained_path::TrainedPath& _internal_trainedpaths(int index) const;
  ::pb::mf_mempark::trained_path::TrainedPath* _internal_add_trainedpaths();
  public:
  const ::pb::mf_mempark::trained_path::TrainedPath& trainedpaths(int index) const;
  ::pb::mf_mempark::trained_path::TrainedPath* add_trainedpaths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trained_path::TrainedPath >&
      trainedpaths() const;

  // optional .pb.mf_mempark.training_status.TrainingStatus trainingStatus = 612;
  bool has_trainingstatus() const;
  private:
  bool _internal_has_trainingstatus() const;
  public:
  void clear_trainingstatus();
  ::pb::mf_mempark::training_status::TrainingStatus trainingstatus() const;
  void set_trainingstatus(::pb::mf_mempark::training_status::TrainingStatus value);
  private:
  ::pb::mf_mempark::training_status::TrainingStatus _internal_trainingstatus() const;
  void _internal_set_trainingstatus(::pb::mf_mempark::training_status::TrainingStatus value);
  public:

  // optional .pb.mf_mempark.memorized_parking_status.MemorizedParkingStatus memoryParkingState = 866;
  bool has_memoryparkingstate() const;
  private:
  bool _internal_has_memoryparkingstate() const;
  public:
  void clear_memoryparkingstate();
  ::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus memoryparkingstate() const;
  void set_memoryparkingstate(::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus value);
  private:
  ::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus _internal_memoryparkingstate() const;
  void _internal_set_memoryparkingstate(::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus value);
  public:

  // optional .pb.mf_mempark.localization_status.LocalizationStatus localizationStatus = 1648;
  bool has_localizationstatus() const;
  private:
  bool _internal_has_localizationstatus() const;
  public:
  void clear_localizationstatus();
  ::pb::mf_mempark::localization_status::LocalizationStatus localizationstatus() const;
  void set_localizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value);
  private:
  ::pb::mf_mempark::localization_status::LocalizationStatus _internal_localizationstatus() const;
  void _internal_set_localizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value);
  public:

  // optional uint32 numberStoredTrainedParkingPaths = 2792;
  bool has_numberstoredtrainedparkingpaths() const;
  private:
  bool _internal_has_numberstoredtrainedparkingpaths() const;
  public:
  void clear_numberstoredtrainedparkingpaths();
  ::PROTOBUF_NAMESPACE_ID::uint32 numberstoredtrainedparkingpaths() const;
  void set_numberstoredtrainedparkingpaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numberstoredtrainedparkingpaths() const;
  void _internal_set_numberstoredtrainedparkingpaths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.tpstatus.TPStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trained_path::TrainedPath > trainedpaths_;
  int trainingstatus_;
  int memoryparkingstate_;
  int localizationstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numberstoredtrainedparkingpaths_;
  friend struct ::TableStruct_mf_5fmempark_2ftpstatus_2eproto;
};
// -------------------------------------------------------------------

class TPStatus_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.tpstatus.TPStatus_array_port) */ {
 public:
  TPStatus_array_port();
  virtual ~TPStatus_array_port();

  TPStatus_array_port(const TPStatus_array_port& from);
  TPStatus_array_port(TPStatus_array_port&& from) noexcept
    : TPStatus_array_port() {
    *this = ::std::move(from);
  }

  inline TPStatus_array_port& operator=(const TPStatus_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPStatus_array_port& operator=(TPStatus_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPStatus_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TPStatus_array_port* internal_default_instance() {
    return reinterpret_cast<const TPStatus_array_port*>(
               &_TPStatus_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TPStatus_array_port& a, TPStatus_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(TPStatus_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPStatus_array_port* New() const final {
    return CreateMaybeMessage<TPStatus_array_port>(nullptr);
  }

  TPStatus_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPStatus_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPStatus_array_port& from);
  void MergeFrom(const TPStatus_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPStatus_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.tpstatus.TPStatus_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2ftpstatus_2eproto);
    return ::descriptor_table_mf_5fmempark_2ftpstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 436,
  };
  // repeated .pb.mf_mempark.tpstatus.TPStatus data = 436;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_mempark::tpstatus::TPStatus* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::tpstatus::TPStatus >*
      mutable_data();
  private:
  const ::pb::mf_mempark::tpstatus::TPStatus& _internal_data(int index) const;
  ::pb::mf_mempark::tpstatus::TPStatus* _internal_add_data();
  public:
  const ::pb::mf_mempark::tpstatus::TPStatus& data(int index) const;
  ::pb::mf_mempark::tpstatus::TPStatus* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::tpstatus::TPStatus >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.tpstatus.TPStatus_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::tpstatus::TPStatus > data_;
  friend struct ::TableStruct_mf_5fmempark_2ftpstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TPStatus

// optional uint32 numberStoredTrainedParkingPaths = 2792;
inline bool TPStatus::_internal_has_numberstoredtrainedparkingpaths() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TPStatus::has_numberstoredtrainedparkingpaths() const {
  return _internal_has_numberstoredtrainedparkingpaths();
}
inline void TPStatus::clear_numberstoredtrainedparkingpaths() {
  numberstoredtrainedparkingpaths_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TPStatus::_internal_numberstoredtrainedparkingpaths() const {
  return numberstoredtrainedparkingpaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TPStatus::numberstoredtrainedparkingpaths() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.tpstatus.TPStatus.numberStoredTrainedParkingPaths)
  return _internal_numberstoredtrainedparkingpaths();
}
inline void TPStatus::_internal_set_numberstoredtrainedparkingpaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  numberstoredtrainedparkingpaths_ = value;
}
inline void TPStatus::set_numberstoredtrainedparkingpaths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numberstoredtrainedparkingpaths(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.tpstatus.TPStatus.numberStoredTrainedParkingPaths)
}

// repeated .pb.mf_mempark.trained_path.TrainedPath trainedPaths = 2787;
inline int TPStatus::_internal_trainedpaths_size() const {
  return trainedpaths_.size();
}
inline int TPStatus::trainedpaths_size() const {
  return _internal_trainedpaths_size();
}
inline ::pb::mf_mempark::trained_path::TrainedPath* TPStatus::mutable_trainedpaths(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.tpstatus.TPStatus.trainedPaths)
  return trainedpaths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trained_path::TrainedPath >*
TPStatus::mutable_trainedpaths() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.tpstatus.TPStatus.trainedPaths)
  return &trainedpaths_;
}
inline const ::pb::mf_mempark::trained_path::TrainedPath& TPStatus::_internal_trainedpaths(int index) const {
  return trainedpaths_.Get(index);
}
inline const ::pb::mf_mempark::trained_path::TrainedPath& TPStatus::trainedpaths(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.tpstatus.TPStatus.trainedPaths)
  return _internal_trainedpaths(index);
}
inline ::pb::mf_mempark::trained_path::TrainedPath* TPStatus::_internal_add_trainedpaths() {
  return trainedpaths_.Add();
}
inline ::pb::mf_mempark::trained_path::TrainedPath* TPStatus::add_trainedpaths() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.tpstatus.TPStatus.trainedPaths)
  return _internal_add_trainedpaths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trained_path::TrainedPath >&
TPStatus::trainedpaths() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.tpstatus.TPStatus.trainedPaths)
  return trainedpaths_;
}

// optional .pb.mf_mempark.memorized_parking_status.MemorizedParkingStatus memoryParkingState = 866;
inline bool TPStatus::_internal_has_memoryparkingstate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TPStatus::has_memoryparkingstate() const {
  return _internal_has_memoryparkingstate();
}
inline void TPStatus::clear_memoryparkingstate() {
  memoryparkingstate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus TPStatus::_internal_memoryparkingstate() const {
  return static_cast< ::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus >(memoryparkingstate_);
}
inline ::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus TPStatus::memoryparkingstate() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.tpstatus.TPStatus.memoryParkingState)
  return _internal_memoryparkingstate();
}
inline void TPStatus::_internal_set_memoryparkingstate(::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus value) {
  assert(::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  memoryparkingstate_ = value;
}
inline void TPStatus::set_memoryparkingstate(::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus value) {
  _internal_set_memoryparkingstate(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.tpstatus.TPStatus.memoryParkingState)
}

// optional .pb.mf_mempark.training_status.TrainingStatus trainingStatus = 612;
inline bool TPStatus::_internal_has_trainingstatus() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TPStatus::has_trainingstatus() const {
  return _internal_has_trainingstatus();
}
inline void TPStatus::clear_trainingstatus() {
  trainingstatus_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::mf_mempark::training_status::TrainingStatus TPStatus::_internal_trainingstatus() const {
  return static_cast< ::pb::mf_mempark::training_status::TrainingStatus >(trainingstatus_);
}
inline ::pb::mf_mempark::training_status::TrainingStatus TPStatus::trainingstatus() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.tpstatus.TPStatus.trainingStatus)
  return _internal_trainingstatus();
}
inline void TPStatus::_internal_set_trainingstatus(::pb::mf_mempark::training_status::TrainingStatus value) {
  assert(::pb::mf_mempark::training_status::TrainingStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  trainingstatus_ = value;
}
inline void TPStatus::set_trainingstatus(::pb::mf_mempark::training_status::TrainingStatus value) {
  _internal_set_trainingstatus(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.tpstatus.TPStatus.trainingStatus)
}

// optional .pb.mf_mempark.localization_status.LocalizationStatus localizationStatus = 1648;
inline bool TPStatus::_internal_has_localizationstatus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TPStatus::has_localizationstatus() const {
  return _internal_has_localizationstatus();
}
inline void TPStatus::clear_localizationstatus() {
  localizationstatus_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::mf_mempark::localization_status::LocalizationStatus TPStatus::_internal_localizationstatus() const {
  return static_cast< ::pb::mf_mempark::localization_status::LocalizationStatus >(localizationstatus_);
}
inline ::pb::mf_mempark::localization_status::LocalizationStatus TPStatus::localizationstatus() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.tpstatus.TPStatus.localizationStatus)
  return _internal_localizationstatus();
}
inline void TPStatus::_internal_set_localizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value) {
  assert(::pb::mf_mempark::localization_status::LocalizationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  localizationstatus_ = value;
}
inline void TPStatus::set_localizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value) {
  _internal_set_localizationstatus(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.tpstatus.TPStatus.localizationStatus)
}

// -------------------------------------------------------------------

// TPStatus_array_port

// repeated .pb.mf_mempark.tpstatus.TPStatus data = 436;
inline int TPStatus_array_port::_internal_data_size() const {
  return data_.size();
}
inline int TPStatus_array_port::data_size() const {
  return _internal_data_size();
}
inline void TPStatus_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_mempark::tpstatus::TPStatus* TPStatus_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.tpstatus.TPStatus_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::tpstatus::TPStatus >*
TPStatus_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.tpstatus.TPStatus_array_port.data)
  return &data_;
}
inline const ::pb::mf_mempark::tpstatus::TPStatus& TPStatus_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_mempark::tpstatus::TPStatus& TPStatus_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.tpstatus.TPStatus_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_mempark::tpstatus::TPStatus* TPStatus_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_mempark::tpstatus::TPStatus* TPStatus_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.tpstatus.TPStatus_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::tpstatus::TPStatus >&
TPStatus_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.tpstatus.TPStatus_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tpstatus
}  // namespace mf_mempark
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2ftpstatus_2eproto
