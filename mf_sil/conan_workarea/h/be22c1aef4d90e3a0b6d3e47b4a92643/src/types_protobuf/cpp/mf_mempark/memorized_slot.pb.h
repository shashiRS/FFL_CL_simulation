// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/memorized_slot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmemorized_5fslot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmemorized_5fslot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mf_mempark/localization_status.pb.h"
#include "mf_mempark/gpssilent_offering_enabled.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmemorized_5fslot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmempark_2fmemorized_5fslot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fmemorized_5fslot_2eproto;
namespace pb {
namespace mf_mempark {
namespace memorized_slot {
class MemorizedSlot;
class MemorizedSlotDefaultTypeInternal;
extern MemorizedSlotDefaultTypeInternal _MemorizedSlot_default_instance_;
class MemorizedSlot_array_port;
class MemorizedSlot_array_portDefaultTypeInternal;
extern MemorizedSlot_array_portDefaultTypeInternal _MemorizedSlot_array_port_default_instance_;
}  // namespace memorized_slot
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_mempark::memorized_slot::MemorizedSlot* Arena::CreateMaybeMessage<::pb::mf_mempark::memorized_slot::MemorizedSlot>(Arena*);
template<> ::pb::mf_mempark::memorized_slot::MemorizedSlot_array_port* Arena::CreateMaybeMessage<::pb::mf_mempark::memorized_slot::MemorizedSlot_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_mempark {
namespace memorized_slot {

// ===================================================================

class MemorizedSlot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.memorized_slot.MemorizedSlot) */ {
 public:
  MemorizedSlot();
  virtual ~MemorizedSlot();

  MemorizedSlot(const MemorizedSlot& from);
  MemorizedSlot(MemorizedSlot&& from) noexcept
    : MemorizedSlot() {
    *this = ::std::move(from);
  }

  inline MemorizedSlot& operator=(const MemorizedSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemorizedSlot& operator=(MemorizedSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemorizedSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemorizedSlot* internal_default_instance() {
    return reinterpret_cast<const MemorizedSlot*>(
               &_MemorizedSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemorizedSlot& a, MemorizedSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(MemorizedSlot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemorizedSlot* New() const final {
    return CreateMaybeMessage<MemorizedSlot>(nullptr);
  }

  MemorizedSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemorizedSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemorizedSlot& from);
  void MergeFrom(const MemorizedSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemorizedSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.memorized_slot.MemorizedSlot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fmemorized_5fslot_2eproto);
    return ::descriptor_table_mf_5fmempark_2fmemorized_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpsSilentOfferingEnabledFieldNumber = 1883,
    kRelocalizationStatusFieldNumber = 2813,
    kIDFieldNumber = 3354,
    kRoadWidthFieldNumber = 3717,
  };
  // optional .pb.mf_mempark.gpssilent_offering_enabled.GPSSilentOfferingEnabled gpsSilentOfferingEnabled = 1883;
  bool has_gpssilentofferingenabled() const;
  private:
  bool _internal_has_gpssilentofferingenabled() const;
  public:
  void clear_gpssilentofferingenabled();
  ::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled gpssilentofferingenabled() const;
  void set_gpssilentofferingenabled(::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled value);
  private:
  ::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled _internal_gpssilentofferingenabled() const;
  void _internal_set_gpssilentofferingenabled(::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled value);
  public:

  // optional .pb.mf_mempark.localization_status.LocalizationStatus relocalizationStatus = 2813;
  bool has_relocalizationstatus() const;
  private:
  bool _internal_has_relocalizationstatus() const;
  public:
  void clear_relocalizationstatus();
  ::pb::mf_mempark::localization_status::LocalizationStatus relocalizationstatus() const;
  void set_relocalizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value);
  private:
  ::pb::mf_mempark::localization_status::LocalizationStatus _internal_relocalizationstatus() const;
  void _internal_set_relocalizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value);
  public:

  // optional uint32 ID = 3354;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 roadWidth = 3717;
  bool has_roadwidth() const;
  private:
  bool _internal_has_roadwidth() const;
  public:
  void clear_roadwidth();
  ::PROTOBUF_NAMESPACE_ID::uint32 roadwidth() const;
  void set_roadwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_roadwidth() const;
  void _internal_set_roadwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.memorized_slot.MemorizedSlot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int gpssilentofferingenabled_;
  int relocalizationstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roadwidth_;
  friend struct ::TableStruct_mf_5fmempark_2fmemorized_5fslot_2eproto;
};
// -------------------------------------------------------------------

class MemorizedSlot_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.memorized_slot.MemorizedSlot_array_port) */ {
 public:
  MemorizedSlot_array_port();
  virtual ~MemorizedSlot_array_port();

  MemorizedSlot_array_port(const MemorizedSlot_array_port& from);
  MemorizedSlot_array_port(MemorizedSlot_array_port&& from) noexcept
    : MemorizedSlot_array_port() {
    *this = ::std::move(from);
  }

  inline MemorizedSlot_array_port& operator=(const MemorizedSlot_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemorizedSlot_array_port& operator=(MemorizedSlot_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemorizedSlot_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemorizedSlot_array_port* internal_default_instance() {
    return reinterpret_cast<const MemorizedSlot_array_port*>(
               &_MemorizedSlot_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemorizedSlot_array_port& a, MemorizedSlot_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(MemorizedSlot_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemorizedSlot_array_port* New() const final {
    return CreateMaybeMessage<MemorizedSlot_array_port>(nullptr);
  }

  MemorizedSlot_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemorizedSlot_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemorizedSlot_array_port& from);
  void MergeFrom(const MemorizedSlot_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemorizedSlot_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.memorized_slot.MemorizedSlot_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fmemorized_5fslot_2eproto);
    return ::descriptor_table_mf_5fmempark_2fmemorized_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3896,
  };
  // repeated .pb.mf_mempark.memorized_slot.MemorizedSlot data = 3896;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_mempark::memorized_slot::MemorizedSlot* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::memorized_slot::MemorizedSlot >*
      mutable_data();
  private:
  const ::pb::mf_mempark::memorized_slot::MemorizedSlot& _internal_data(int index) const;
  ::pb::mf_mempark::memorized_slot::MemorizedSlot* _internal_add_data();
  public:
  const ::pb::mf_mempark::memorized_slot::MemorizedSlot& data(int index) const;
  ::pb::mf_mempark::memorized_slot::MemorizedSlot* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::memorized_slot::MemorizedSlot >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.memorized_slot.MemorizedSlot_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::memorized_slot::MemorizedSlot > data_;
  friend struct ::TableStruct_mf_5fmempark_2fmemorized_5fslot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemorizedSlot

// optional uint32 ID = 3354;
inline bool MemorizedSlot::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemorizedSlot::has_id() const {
  return _internal_has_id();
}
inline void MemorizedSlot::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemorizedSlot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemorizedSlot::id() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.memorized_slot.MemorizedSlot.ID)
  return _internal_id();
}
inline void MemorizedSlot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void MemorizedSlot::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.memorized_slot.MemorizedSlot.ID)
}

// optional .pb.mf_mempark.localization_status.LocalizationStatus relocalizationStatus = 2813;
inline bool MemorizedSlot::_internal_has_relocalizationstatus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemorizedSlot::has_relocalizationstatus() const {
  return _internal_has_relocalizationstatus();
}
inline void MemorizedSlot::clear_relocalizationstatus() {
  relocalizationstatus_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::mf_mempark::localization_status::LocalizationStatus MemorizedSlot::_internal_relocalizationstatus() const {
  return static_cast< ::pb::mf_mempark::localization_status::LocalizationStatus >(relocalizationstatus_);
}
inline ::pb::mf_mempark::localization_status::LocalizationStatus MemorizedSlot::relocalizationstatus() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.memorized_slot.MemorizedSlot.relocalizationStatus)
  return _internal_relocalizationstatus();
}
inline void MemorizedSlot::_internal_set_relocalizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value) {
  assert(::pb::mf_mempark::localization_status::LocalizationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  relocalizationstatus_ = value;
}
inline void MemorizedSlot::set_relocalizationstatus(::pb::mf_mempark::localization_status::LocalizationStatus value) {
  _internal_set_relocalizationstatus(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.memorized_slot.MemorizedSlot.relocalizationStatus)
}

// optional .pb.mf_mempark.gpssilent_offering_enabled.GPSSilentOfferingEnabled gpsSilentOfferingEnabled = 1883;
inline bool MemorizedSlot::_internal_has_gpssilentofferingenabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemorizedSlot::has_gpssilentofferingenabled() const {
  return _internal_has_gpssilentofferingenabled();
}
inline void MemorizedSlot::clear_gpssilentofferingenabled() {
  gpssilentofferingenabled_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled MemorizedSlot::_internal_gpssilentofferingenabled() const {
  return static_cast< ::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled >(gpssilentofferingenabled_);
}
inline ::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled MemorizedSlot::gpssilentofferingenabled() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.memorized_slot.MemorizedSlot.gpsSilentOfferingEnabled)
  return _internal_gpssilentofferingenabled();
}
inline void MemorizedSlot::_internal_set_gpssilentofferingenabled(::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled value) {
  assert(::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  gpssilentofferingenabled_ = value;
}
inline void MemorizedSlot::set_gpssilentofferingenabled(::pb::mf_mempark::gpssilent_offering_enabled::GPSSilentOfferingEnabled value) {
  _internal_set_gpssilentofferingenabled(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.memorized_slot.MemorizedSlot.gpsSilentOfferingEnabled)
}

// optional uint32 roadWidth = 3717;
inline bool MemorizedSlot::_internal_has_roadwidth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemorizedSlot::has_roadwidth() const {
  return _internal_has_roadwidth();
}
inline void MemorizedSlot::clear_roadwidth() {
  roadwidth_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemorizedSlot::_internal_roadwidth() const {
  return roadwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemorizedSlot::roadwidth() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.memorized_slot.MemorizedSlot.roadWidth)
  return _internal_roadwidth();
}
inline void MemorizedSlot::_internal_set_roadwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  roadwidth_ = value;
}
inline void MemorizedSlot::set_roadwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_roadwidth(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.memorized_slot.MemorizedSlot.roadWidth)
}

// -------------------------------------------------------------------

// MemorizedSlot_array_port

// repeated .pb.mf_mempark.memorized_slot.MemorizedSlot data = 3896;
inline int MemorizedSlot_array_port::_internal_data_size() const {
  return data_.size();
}
inline int MemorizedSlot_array_port::data_size() const {
  return _internal_data_size();
}
inline void MemorizedSlot_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_mempark::memorized_slot::MemorizedSlot* MemorizedSlot_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.memorized_slot.MemorizedSlot_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::memorized_slot::MemorizedSlot >*
MemorizedSlot_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.memorized_slot.MemorizedSlot_array_port.data)
  return &data_;
}
inline const ::pb::mf_mempark::memorized_slot::MemorizedSlot& MemorizedSlot_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_mempark::memorized_slot::MemorizedSlot& MemorizedSlot_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.memorized_slot.MemorizedSlot_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_mempark::memorized_slot::MemorizedSlot* MemorizedSlot_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_mempark::memorized_slot::MemorizedSlot* MemorizedSlot_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.memorized_slot.MemorizedSlot_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::memorized_slot::MemorizedSlot >&
MemorizedSlot_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.memorized_slot.MemorizedSlot_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace memorized_slot
}  // namespace mf_mempark
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmemorized_5fslot_2eproto
