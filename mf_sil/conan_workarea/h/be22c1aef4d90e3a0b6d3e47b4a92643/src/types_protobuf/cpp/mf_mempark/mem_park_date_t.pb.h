// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/mem_park_date_t.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto;
namespace pb {
namespace mf_mempark {
namespace mem_park_date_t {
class MemParkDate_t;
class MemParkDate_tDefaultTypeInternal;
extern MemParkDate_tDefaultTypeInternal _MemParkDate_t_default_instance_;
class MemParkDate_t_array_port;
class MemParkDate_t_array_portDefaultTypeInternal;
extern MemParkDate_t_array_portDefaultTypeInternal _MemParkDate_t_array_port_default_instance_;
}  // namespace mem_park_date_t
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* Arena::CreateMaybeMessage<::pb::mf_mempark::mem_park_date_t::MemParkDate_t>(Arena*);
template<> ::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port* Arena::CreateMaybeMessage<::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_mempark {
namespace mem_park_date_t {

// ===================================================================

class MemParkDate_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.mem_park_date_t.MemParkDate_t) */ {
 public:
  MemParkDate_t();
  virtual ~MemParkDate_t();

  MemParkDate_t(const MemParkDate_t& from);
  MemParkDate_t(MemParkDate_t&& from) noexcept
    : MemParkDate_t() {
    *this = ::std::move(from);
  }

  inline MemParkDate_t& operator=(const MemParkDate_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemParkDate_t& operator=(MemParkDate_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemParkDate_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemParkDate_t* internal_default_instance() {
    return reinterpret_cast<const MemParkDate_t*>(
               &_MemParkDate_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemParkDate_t& a, MemParkDate_t& b) {
    a.Swap(&b);
  }
  inline void Swap(MemParkDate_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemParkDate_t* New() const final {
    return CreateMaybeMessage<MemParkDate_t>(nullptr);
  }

  MemParkDate_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemParkDate_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemParkDate_t& from);
  void MergeFrom(const MemParkDate_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemParkDate_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.mem_park_date_t.MemParkDate_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto);
    return ::descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinuteFieldNumber = 4014,
    kDayFieldNumber = 746,
    kMonthFieldNumber = 2759,
    kYearFieldNumber = 3025,
    kHourFieldNumber = 3764,
    kTimeZoneFieldNumber = 3856,
    kSecondFieldNumber = 3871,
  };
  // optional uint32 minute = 4014;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::uint32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 day = 746;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 month = 2759;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::uint32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 year = 3025;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hour = 3764;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::uint32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 timeZone = 3856;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  ::PROTOBUF_NAMESPACE_ID::int32 timezone() const;
  void set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timezone() const;
  void _internal_set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 second = 3871;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::uint32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minute_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 month_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 timezone_;
  ::PROTOBUF_NAMESPACE_ID::uint32 second_;
  friend struct ::TableStruct_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto;
};
// -------------------------------------------------------------------

class MemParkDate_t_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port) */ {
 public:
  MemParkDate_t_array_port();
  virtual ~MemParkDate_t_array_port();

  MemParkDate_t_array_port(const MemParkDate_t_array_port& from);
  MemParkDate_t_array_port(MemParkDate_t_array_port&& from) noexcept
    : MemParkDate_t_array_port() {
    *this = ::std::move(from);
  }

  inline MemParkDate_t_array_port& operator=(const MemParkDate_t_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemParkDate_t_array_port& operator=(MemParkDate_t_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemParkDate_t_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemParkDate_t_array_port* internal_default_instance() {
    return reinterpret_cast<const MemParkDate_t_array_port*>(
               &_MemParkDate_t_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemParkDate_t_array_port& a, MemParkDate_t_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(MemParkDate_t_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemParkDate_t_array_port* New() const final {
    return CreateMaybeMessage<MemParkDate_t_array_port>(nullptr);
  }

  MemParkDate_t_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemParkDate_t_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemParkDate_t_array_port& from);
  void MergeFrom(const MemParkDate_t_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemParkDate_t_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto);
    return ::descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 183,
  };
  // repeated .pb.mf_mempark.mem_park_date_t.MemParkDate_t data = 183;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t >*
      mutable_data();
  private:
  const ::pb::mf_mempark::mem_park_date_t::MemParkDate_t& _internal_data(int index) const;
  ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* _internal_add_data();
  public:
  const ::pb::mf_mempark::mem_park_date_t::MemParkDate_t& data(int index) const;
  ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t > data_;
  friend struct ::TableStruct_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemParkDate_t

// optional uint32 year = 3025;
inline bool MemParkDate_t::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemParkDate_t::has_year() const {
  return _internal_has_year();
}
inline void MemParkDate_t::clear_year() {
  year_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::year() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t.year)
  return _internal_year();
}
inline void MemParkDate_t::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  year_ = value;
}
inline void MemParkDate_t::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_date_t.MemParkDate_t.year)
}

// optional uint32 month = 2759;
inline bool MemParkDate_t::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemParkDate_t::has_month() const {
  return _internal_has_month();
}
inline void MemParkDate_t::clear_month() {
  month_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::month() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t.month)
  return _internal_month();
}
inline void MemParkDate_t::_internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  month_ = value;
}
inline void MemParkDate_t::set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_date_t.MemParkDate_t.month)
}

// optional uint32 day = 746;
inline bool MemParkDate_t::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemParkDate_t::has_day() const {
  return _internal_has_day();
}
inline void MemParkDate_t::clear_day() {
  day_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::day() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t.day)
  return _internal_day();
}
inline void MemParkDate_t::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  day_ = value;
}
inline void MemParkDate_t::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_date_t.MemParkDate_t.day)
}

// optional uint32 hour = 3764;
inline bool MemParkDate_t::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MemParkDate_t::has_hour() const {
  return _internal_has_hour();
}
inline void MemParkDate_t::clear_hour() {
  hour_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::hour() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t.hour)
  return _internal_hour();
}
inline void MemParkDate_t::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hour_ = value;
}
inline void MemParkDate_t::set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_date_t.MemParkDate_t.hour)
}

// optional uint32 minute = 4014;
inline bool MemParkDate_t::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemParkDate_t::has_minute() const {
  return _internal_has_minute();
}
inline void MemParkDate_t::clear_minute() {
  minute_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::minute() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t.minute)
  return _internal_minute();
}
inline void MemParkDate_t::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  minute_ = value;
}
inline void MemParkDate_t::set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_date_t.MemParkDate_t.minute)
}

// optional uint32 second = 3871;
inline bool MemParkDate_t::_internal_has_second() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MemParkDate_t::has_second() const {
  return _internal_has_second();
}
inline void MemParkDate_t::clear_second() {
  second_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkDate_t::second() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t.second)
  return _internal_second();
}
inline void MemParkDate_t::_internal_set_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  second_ = value;
}
inline void MemParkDate_t::set_second(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_date_t.MemParkDate_t.second)
}

// optional sint32 timeZone = 3856;
inline bool MemParkDate_t::_internal_has_timezone() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MemParkDate_t::has_timezone() const {
  return _internal_has_timezone();
}
inline void MemParkDate_t::clear_timezone() {
  timezone_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemParkDate_t::_internal_timezone() const {
  return timezone_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemParkDate_t::timezone() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t.timeZone)
  return _internal_timezone();
}
inline void MemParkDate_t::_internal_set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  timezone_ = value;
}
inline void MemParkDate_t::set_timezone(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_date_t.MemParkDate_t.timeZone)
}

// -------------------------------------------------------------------

// MemParkDate_t_array_port

// repeated .pb.mf_mempark.mem_park_date_t.MemParkDate_t data = 183;
inline int MemParkDate_t_array_port::_internal_data_size() const {
  return data_.size();
}
inline int MemParkDate_t_array_port::data_size() const {
  return _internal_data_size();
}
inline void MemParkDate_t_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* MemParkDate_t_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t >*
MemParkDate_t_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port.data)
  return &data_;
}
inline const ::pb::mf_mempark::mem_park_date_t::MemParkDate_t& MemParkDate_t_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_mempark::mem_park_date_t::MemParkDate_t& MemParkDate_t_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* MemParkDate_t_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* MemParkDate_t_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t >&
MemParkDate_t_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mem_park_date_t
}  // namespace mf_mempark
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto
