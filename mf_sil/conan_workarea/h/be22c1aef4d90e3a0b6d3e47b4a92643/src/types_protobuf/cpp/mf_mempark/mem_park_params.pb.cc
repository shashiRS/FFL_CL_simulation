// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/mem_park_params.proto

#include "mf_mempark/mem_park_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmem_5fpark_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto;
namespace pb {
namespace mf_mempark {
namespace mem_park_params {
class MemParkParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemParkParams> _instance;
} _MemParkParams_default_instance_;
class MemParkParams_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemParkParams_array_port> _instance;
} _MemParkParams_array_port_default_instance_;
}  // namespace mem_park_params
}  // namespace mf_mempark
}  // namespace pb
static void InitDefaultsscc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::mem_park_params::_MemParkParams_default_instance_;
    new (ptr) ::pb::mf_mempark::mem_park_params::MemParkParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::mem_park_params::MemParkParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_MemParkParams_array_port_mf_5fmempark_2fmem_5fpark_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::mem_park_params::_MemParkParams_array_port_default_instance_;
    new (ptr) ::pb::mf_mempark::mem_park_params::MemParkParams_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::mem_park_params::MemParkParams_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemParkParams_array_port_mf_5fmempark_2fmem_5fpark_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemParkParams_array_port_mf_5fmempark_2fmem_5fpark_5fparams_2eproto}, {
      &scc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmempark_2fmem_5fpark_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmempark_2fmem_5fpark_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmempark_2fmem_5fpark_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmempark_2fmem_5fpark_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, functionactive_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, scanroihalfwidth_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, scanroibackextension_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, scanroifrontextension_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, minrequiredrelocalizationprob_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_0_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_1_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_2_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_3_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_4_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_5_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_6_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams, memparkdeveloperparam_7_),
  12,
  0,
  14,
  13,
  10,
  11,
  9,
  2,
  1,
  4,
  3,
  6,
  5,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_params::MemParkParams_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::pb::mf_mempark::mem_park_params::MemParkParams)},
  { 35, 41, sizeof(::pb::mf_mempark::mem_park_params::MemParkParams_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::mem_park_params::_MemParkParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::mem_park_params::_MemParkParams_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmempark_2fmem_5fpark_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n mf_mempark/mem_park_params.proto\022\035pb.m"
  "f_mempark.mem_park_params\032\027eco/signal_he"
  "ader.proto\"\233\004\n\rMemParkParams\022\030\n\017uiVersio"
  "nNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb"
  ".eco.signal_header.SignalHeader\022\032\n\021funct"
  "ionActive_nu\030\340\037 \001(\010\022\033\n\022scanRoiHalfWidth_"
  "m\030\312\027 \001(\002\022\037\n\026scanRoiBackExtension_m\030\310\010 \001("
  "\002\022 \n\027scanRoiFrontExtension_m\030\313\010 \001(\002\022+\n\"m"
  "inRequiredRelocalizationProb_perc\030\221\007 \001(\r"
  "\022 \n\027memParkDeveloperParam_0\030\247\002 \001(\002\022 \n\027me"
  "mParkDeveloperParam_1\030\206\002 \001(\002\022 \n\027memParkD"
  "eveloperParam_2\030\345\002 \001(\002\022 \n\027memParkDevelop"
  "erParam_3\030\304\002 \001(\002\022 \n\027memParkDeveloperPara"
  "m_4\030\243\003 \001(\002\022 \n\027memParkDeveloperParam_5\030\202\003"
  " \001(\002\022 \n\027memParkDeveloperParam_6\030\341\003 \001(\002\022 "
  "\n\027memParkDeveloperParam_7\030\300\003 \001(\002\"W\n\030MemP"
  "arkParams_array_port\022;\n\004data\030\312\t \003(\0132,.pb"
  ".mf_mempark.mem_park_params.MemParkParam"
  "s"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_sccs[2] = {
  &scc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.base,
  &scc_info_MemParkParams_array_port_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_once;
static bool descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto = {
  &descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_initialized, descriptor_table_protodef_mf_5fmempark_2fmem_5fpark_5fparams_2eproto, "mf_mempark/mem_park_params.proto", 721,
  &descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_once, descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_sccs, descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5fmempark_2fmem_5fpark_5fparams_2eproto::offsets,
  file_level_metadata_mf_5fmempark_2fmem_5fpark_5fparams_2eproto, 2, file_level_enum_descriptors_mf_5fmempark_2fmem_5fpark_5fparams_2eproto, file_level_service_descriptors_mf_5fmempark_2fmem_5fpark_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmempark_2fmem_5fpark_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto), true);
namespace pb {
namespace mf_mempark {
namespace mem_park_params {

// ===================================================================

void MemParkParams::InitAsDefaultInstance() {
  ::pb::mf_mempark::mem_park_params::_MemParkParams_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class MemParkParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MemParkParams>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const MemParkParams* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_functionactive_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_scanroihalfwidth_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_scanroibackextension_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_scanroifrontextension_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_minrequiredrelocalizationprob_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_memparkdeveloperparam_0(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_memparkdeveloperparam_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_memparkdeveloperparam_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_memparkdeveloperparam_3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_memparkdeveloperparam_4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_memparkdeveloperparam_5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memparkdeveloperparam_6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_memparkdeveloperparam_7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
MemParkParams::_Internal::ssigheader(const MemParkParams* msg) {
  return *msg->ssigheader_;
}
void MemParkParams::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MemParkParams::MemParkParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.mem_park_params.MemParkParams)
}
MemParkParams::MemParkParams(const MemParkParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&memparkdeveloperparam_1_, &from.memparkdeveloperparam_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&functionactive_nu_) -
    reinterpret_cast<char*>(&memparkdeveloperparam_1_)) + sizeof(functionactive_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.mem_park_params.MemParkParams)
}

void MemParkParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&functionactive_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(functionactive_nu_));
}

MemParkParams::~MemParkParams() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.mem_park_params.MemParkParams)
  SharedDtor();
}

void MemParkParams::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void MemParkParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemParkParams& MemParkParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemParkParams_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.base);
  return *internal_default_instance();
}


void MemParkParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.mem_park_params.MemParkParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&memparkdeveloperparam_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&memparkdeveloperparam_7_) -
        reinterpret_cast<char*>(&memparkdeveloperparam_1_)) + sizeof(memparkdeveloperparam_7_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&memparkdeveloperparam_6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&functionactive_nu_) -
        reinterpret_cast<char*>(&memparkdeveloperparam_6_)) + sizeof(functionactive_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemParkParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float memParkDeveloperParam_1 = 262;
      case 262:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_memparkdeveloperparam_1(&has_bits);
          memparkdeveloperparam_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float memParkDeveloperParam_0 = 295;
      case 295:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_memparkdeveloperparam_0(&has_bits);
          memparkdeveloperparam_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float memParkDeveloperParam_3 = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_memparkdeveloperparam_3(&has_bits);
          memparkdeveloperparam_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float memParkDeveloperParam_2 = 357;
      case 357:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_memparkdeveloperparam_2(&has_bits);
          memparkdeveloperparam_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float memParkDeveloperParam_5 = 386;
      case 386:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_memparkdeveloperparam_5(&has_bits);
          memparkdeveloperparam_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float memParkDeveloperParam_4 = 419;
      case 419:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_memparkdeveloperparam_4(&has_bits);
          memparkdeveloperparam_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float memParkDeveloperParam_7 = 448;
      case 448:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_memparkdeveloperparam_7(&has_bits);
          memparkdeveloperparam_7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float memParkDeveloperParam_6 = 481;
      case 481:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_memparkdeveloperparam_6(&has_bits);
          memparkdeveloperparam_6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 minRequiredRelocalizationProb_perc = 913;
      case 913:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_minrequiredrelocalizationprob_perc(&has_bits);
          minrequiredrelocalizationprob_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scanRoiBackExtension_m = 1096;
      case 1096:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_scanroibackextension_m(&has_bits);
          scanroibackextension_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scanRoiFrontExtension_m = 1099;
      case 1099:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_scanroifrontextension_m(&has_bits);
          scanroifrontextension_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scanRoiHalfWidth_m = 3018;
      case 3018:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_scanroihalfwidth_m(&has_bits);
          scanroihalfwidth_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool functionActive_nu = 4064;
      case 4064:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_functionactive_nu(&has_bits);
          functionactive_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemParkParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.mem_park_params.MemParkParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float memParkDeveloperParam_1 = 262;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(262, this->_internal_memparkdeveloperparam_1(), target);
  }

  // optional float memParkDeveloperParam_0 = 295;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(295, this->_internal_memparkdeveloperparam_0(), target);
  }

  // optional float memParkDeveloperParam_3 = 324;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(324, this->_internal_memparkdeveloperparam_3(), target);
  }

  // optional float memParkDeveloperParam_2 = 357;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(357, this->_internal_memparkdeveloperparam_2(), target);
  }

  // optional float memParkDeveloperParam_5 = 386;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(386, this->_internal_memparkdeveloperparam_5(), target);
  }

  // optional float memParkDeveloperParam_4 = 419;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(419, this->_internal_memparkdeveloperparam_4(), target);
  }

  // optional float memParkDeveloperParam_7 = 448;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(448, this->_internal_memparkdeveloperparam_7(), target);
  }

  // optional float memParkDeveloperParam_6 = 481;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(481, this->_internal_memparkdeveloperparam_6(), target);
  }

  // optional uint32 minRequiredRelocalizationProb_perc = 913;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(913, this->_internal_minrequiredrelocalizationprob_perc(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float scanRoiBackExtension_m = 1096;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1096, this->_internal_scanroibackextension_m(), target);
  }

  // optional float scanRoiFrontExtension_m = 1099;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1099, this->_internal_scanroifrontextension_m(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float scanRoiHalfWidth_m = 3018;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3018, this->_internal_scanroihalfwidth_m(), target);
  }

  // optional bool functionActive_nu = 4064;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4064, this->_internal_functionactive_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.mem_park_params.MemParkParams)
  return target;
}

size_t MemParkParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.mem_park_params.MemParkParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float memParkDeveloperParam_1 = 262;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float memParkDeveloperParam_0 = 295;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float memParkDeveloperParam_3 = 324;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float memParkDeveloperParam_2 = 357;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float memParkDeveloperParam_5 = 386;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float memParkDeveloperParam_4 = 419;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float memParkDeveloperParam_7 = 448;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float memParkDeveloperParam_6 = 481;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 minRequiredRelocalizationProb_perc = 913;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minrequiredrelocalizationprob_perc());
    }

    // optional float scanRoiBackExtension_m = 1096;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float scanRoiFrontExtension_m = 1099;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float scanRoiHalfWidth_m = 3018;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional bool functionActive_nu = 4064;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemParkParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.mem_park_params.MemParkParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MemParkParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemParkParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.mem_park_params.MemParkParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.mem_park_params.MemParkParams)
    MergeFrom(*source);
  }
}

void MemParkParams::MergeFrom(const MemParkParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.mem_park_params.MemParkParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      memparkdeveloperparam_1_ = from.memparkdeveloperparam_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      memparkdeveloperparam_0_ = from.memparkdeveloperparam_0_;
    }
    if (cached_has_bits & 0x00000008u) {
      memparkdeveloperparam_3_ = from.memparkdeveloperparam_3_;
    }
    if (cached_has_bits & 0x00000010u) {
      memparkdeveloperparam_2_ = from.memparkdeveloperparam_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      memparkdeveloperparam_5_ = from.memparkdeveloperparam_5_;
    }
    if (cached_has_bits & 0x00000040u) {
      memparkdeveloperparam_4_ = from.memparkdeveloperparam_4_;
    }
    if (cached_has_bits & 0x00000080u) {
      memparkdeveloperparam_7_ = from.memparkdeveloperparam_7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      memparkdeveloperparam_6_ = from.memparkdeveloperparam_6_;
    }
    if (cached_has_bits & 0x00000200u) {
      minrequiredrelocalizationprob_perc_ = from.minrequiredrelocalizationprob_perc_;
    }
    if (cached_has_bits & 0x00000400u) {
      scanroibackextension_m_ = from.scanroibackextension_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      scanroifrontextension_m_ = from.scanroifrontextension_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00002000u) {
      scanroihalfwidth_m_ = from.scanroihalfwidth_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      functionactive_nu_ = from.functionactive_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemParkParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.mem_park_params.MemParkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemParkParams::CopyFrom(const MemParkParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.mem_park_params.MemParkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemParkParams::IsInitialized() const {
  return true;
}

void MemParkParams::InternalSwap(MemParkParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(memparkdeveloperparam_1_, other->memparkdeveloperparam_1_);
  swap(memparkdeveloperparam_0_, other->memparkdeveloperparam_0_);
  swap(memparkdeveloperparam_3_, other->memparkdeveloperparam_3_);
  swap(memparkdeveloperparam_2_, other->memparkdeveloperparam_2_);
  swap(memparkdeveloperparam_5_, other->memparkdeveloperparam_5_);
  swap(memparkdeveloperparam_4_, other->memparkdeveloperparam_4_);
  swap(memparkdeveloperparam_7_, other->memparkdeveloperparam_7_);
  swap(memparkdeveloperparam_6_, other->memparkdeveloperparam_6_);
  swap(minrequiredrelocalizationprob_perc_, other->minrequiredrelocalizationprob_perc_);
  swap(scanroibackextension_m_, other->scanroibackextension_m_);
  swap(scanroifrontextension_m_, other->scanroifrontextension_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(scanroihalfwidth_m_, other->scanroihalfwidth_m_);
  swap(functionactive_nu_, other->functionactive_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemParkParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemParkParams_array_port::InitAsDefaultInstance() {
}
class MemParkParams_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<MemParkParams_array_port>()._has_bits_);
};

MemParkParams_array_port::MemParkParams_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
}
MemParkParams_array_port::MemParkParams_array_port(const MemParkParams_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
}

void MemParkParams_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemParkParams_array_port_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.base);
}

MemParkParams_array_port::~MemParkParams_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  SharedDtor();
}

void MemParkParams_array_port::SharedDtor() {
}

void MemParkParams_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemParkParams_array_port& MemParkParams_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemParkParams_array_port_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.base);
  return *internal_default_instance();
}


void MemParkParams_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemParkParams_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_mempark.mem_park_params.MemParkParams data = 1226;
      case 1226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9810>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemParkParams_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.mem_park_params.MemParkParams data = 1226;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1226, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  return target;
}

size_t MemParkParams_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.mem_park_params.MemParkParams data = 1226;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemParkParams_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const MemParkParams_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemParkParams_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
    MergeFrom(*source);
  }
}

void MemParkParams_array_port::MergeFrom(const MemParkParams_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MemParkParams_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemParkParams_array_port::CopyFrom(const MemParkParams_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemParkParams_array_port::IsInitialized() const {
  return true;
}

void MemParkParams_array_port::InternalSwap(MemParkParams_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemParkParams_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mem_park_params
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::mem_park_params::MemParkParams* Arena::CreateMaybeMessage< ::pb::mf_mempark::mem_park_params::MemParkParams >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::mem_park_params::MemParkParams >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::mem_park_params::MemParkParams_array_port* Arena::CreateMaybeMessage< ::pb::mf_mempark::mem_park_params::MemParkParams_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::mem_park_params::MemParkParams_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
