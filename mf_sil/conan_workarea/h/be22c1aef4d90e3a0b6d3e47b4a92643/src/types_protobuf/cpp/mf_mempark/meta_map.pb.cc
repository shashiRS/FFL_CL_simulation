// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/meta_map.proto

#include "mf_mempark/meta_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmeta_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fparking_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fparking_5ftrajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ParkingTrajectory_mf_5fmempark_2fparking_5ftrajectory_2eproto;
namespace pb {
namespace mf_mempark {
namespace meta_map {
class MetaMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaMap> _instance;
} _MetaMap_default_instance_;
class MetaMap_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaMap_array_port> _instance;
} _MetaMap_array_port_default_instance_;
}  // namespace meta_map
}  // namespace mf_mempark
}  // namespace pb
static void InitDefaultsscc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::meta_map::_MetaMap_default_instance_;
    new (ptr) ::pb::mf_mempark::meta_map::MetaMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::meta_map::MetaMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto.base,
      &scc_info_ParkingTrajectory_mf_5fmempark_2fparking_5ftrajectory_2eproto.base,}};

static void InitDefaultsscc_info_MetaMap_array_port_mf_5fmempark_2fmeta_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::meta_map::_MetaMap_array_port_default_instance_;
    new (ptr) ::pb::mf_mempark::meta_map::MetaMap_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::meta_map::MetaMap_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetaMap_array_port_mf_5fmempark_2fmeta_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetaMap_array_port_mf_5fmempark_2fmeta_5fmap_2eproto}, {
      &scc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmempark_2fmeta_5fmap_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmempark_2fmeta_5fmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmempark_2fmeta_5fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmempark_2fmeta_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, correspondingmapid_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, numvalidparkingslots_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, parkingslots_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, numvalidtrajectories_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap, parkingtrajectories_),
  2,
  0,
  3,
  1,
  ~0u,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::meta_map::MetaMap_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::pb::mf_mempark::meta_map::MetaMap)},
  { 19, 25, sizeof(::pb::mf_mempark::meta_map::MetaMap_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::meta_map::_MetaMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::meta_map::_MetaMap_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmempark_2fmeta_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031mf_mempark/meta_map.proto\022\026pb.mf_mempa"
  "rk.meta_map\032\027eco/signal_header.proto\032\035mf"
  "_mempark/parking_slot.proto\032#mf_mempark/"
  "parking_trajectory.proto\"\312\002\n\007MetaMap\022\030\n\017"
  "uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 "
  "\001(\0132\".pb.eco.signal_header.SignalHeader\022"
  "\033\n\022correspondingMapID\030\352\025 \001(\r\022\035\n\024numValid"
  "ParkingSlots\030\323\004 \001(\r\022>\n\014parkingSlots\030\333\021 \003"
  "(\0132\'.pb.mf_mempark.parking_slot.ParkingS"
  "lot\022\035\n\024numValidTrajectories\030\271\036 \001(\r\022Q\n\023pa"
  "rkingTrajectories\030\322\010 \003(\01323.pb.mf_mempark"
  ".parking_trajectory.ParkingTrajectory\"D\n"
  "\022MetaMap_array_port\022.\n\004data\030\243\005 \003(\0132\037.pb."
  "mf_mempark.meta_map.MetaMap"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_deps[3] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto,
  &::descriptor_table_mf_5fmempark_2fparking_5ftrajectory_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_sccs[2] = {
  &scc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto.base,
  &scc_info_MetaMap_array_port_mf_5fmempark_2fmeta_5fmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_once;
static bool descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto = {
  &descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_initialized, descriptor_table_protodef_mf_5fmempark_2fmeta_5fmap_2eproto, "mf_mempark/meta_map.proto", 547,
  &descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_once, descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_sccs, descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_mf_5fmempark_2fmeta_5fmap_2eproto::offsets,
  file_level_metadata_mf_5fmempark_2fmeta_5fmap_2eproto, 2, file_level_enum_descriptors_mf_5fmempark_2fmeta_5fmap_2eproto, file_level_service_descriptors_mf_5fmempark_2fmeta_5fmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmempark_2fmeta_5fmap_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmempark_2fmeta_5fmap_2eproto), true);
namespace pb {
namespace mf_mempark {
namespace meta_map {

// ===================================================================

void MetaMap::InitAsDefaultInstance() {
  ::pb::mf_mempark::meta_map::_MetaMap_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class MetaMap::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaMap>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const MetaMap* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correspondingmapid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_numvalidparkingslots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numvalidtrajectories(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
MetaMap::_Internal::ssigheader(const MetaMap* msg) {
  return *msg->ssigheader_;
}
void MetaMap::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MetaMap::clear_parkingslots() {
  parkingslots_.Clear();
}
void MetaMap::clear_parkingtrajectories() {
  parkingtrajectories_.Clear();
}
MetaMap::MetaMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.meta_map.MetaMap)
}
MetaMap::MetaMap(const MetaMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      parkingtrajectories_(from.parkingtrajectories_),
      parkingslots_(from.parkingslots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&numvalidparkingslots_, &from.numvalidparkingslots_,
    static_cast<size_t>(reinterpret_cast<char*>(&numvalidtrajectories_) -
    reinterpret_cast<char*>(&numvalidparkingslots_)) + sizeof(numvalidtrajectories_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.meta_map.MetaMap)
}

void MetaMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numvalidtrajectories_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(numvalidtrajectories_));
}

MetaMap::~MetaMap() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.meta_map.MetaMap)
  SharedDtor();
}

void MetaMap::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void MetaMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaMap& MetaMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaMap_mf_5fmempark_2fmeta_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MetaMap::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.meta_map.MetaMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parkingtrajectories_.Clear();
  parkingslots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&numvalidparkingslots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numvalidtrajectories_) -
        reinterpret_cast<char*>(&numvalidparkingslots_)) + sizeof(numvalidtrajectories_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MetaMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 numValidParkingSlots = 595;
      case 595:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_numvalidparkingslots(&has_bits);
          numvalidparkingslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.mf_mempark.parking_trajectory.ParkingTrajectory parkingTrajectories = 1106;
      case 1106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_parkingtrajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8850>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.mf_mempark.parking_slot.ParkingSlot parkingSlots = 2267;
      case 2267:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_add_parkingslots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 correspondingMapID = 2794;
      case 2794:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_correspondingmapid(&has_bits);
          correspondingmapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 numValidTrajectories = 3897;
      case 3897:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_numvalidtrajectories(&has_bits);
          numvalidtrajectories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.meta_map.MetaMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 numValidParkingSlots = 595;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(595, this->_internal_numvalidparkingslots(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated .pb.mf_mempark.parking_trajectory.ParkingTrajectory parkingTrajectories = 1106;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parkingtrajectories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1106, this->_internal_parkingtrajectories(i), target, stream);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // repeated .pb.mf_mempark.parking_slot.ParkingSlot parkingSlots = 2267;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parkingslots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2267, this->_internal_parkingslots(i), target, stream);
  }

  // optional uint32 correspondingMapID = 2794;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2794, this->_internal_correspondingmapid(), target);
  }

  // optional uint32 numValidTrajectories = 3897;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3897, this->_internal_numvalidtrajectories(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.meta_map.MetaMap)
  return target;
}

size_t MetaMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.meta_map.MetaMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.parking_trajectory.ParkingTrajectory parkingTrajectories = 1106;
  total_size += 2UL * this->_internal_parkingtrajectories_size();
  for (const auto& msg : this->parkingtrajectories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.mf_mempark.parking_slot.ParkingSlot parkingSlots = 2267;
  total_size += 3UL * this->_internal_parkingslots_size();
  for (const auto& msg : this->parkingslots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional uint32 numValidParkingSlots = 595;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numvalidparkingslots());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 correspondingMapID = 2794;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_correspondingmapid());
    }

    // optional uint32 numValidTrajectories = 3897;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numvalidtrajectories());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.meta_map.MetaMap)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.meta_map.MetaMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.meta_map.MetaMap)
    MergeFrom(*source);
  }
}

void MetaMap::MergeFrom(const MetaMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.meta_map.MetaMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parkingtrajectories_.MergeFrom(from.parkingtrajectories_);
  parkingslots_.MergeFrom(from.parkingslots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      numvalidparkingslots_ = from.numvalidparkingslots_;
    }
    if (cached_has_bits & 0x00000004u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000008u) {
      correspondingmapid_ = from.correspondingmapid_;
    }
    if (cached_has_bits & 0x00000010u) {
      numvalidtrajectories_ = from.numvalidtrajectories_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetaMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.meta_map.MetaMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaMap::CopyFrom(const MetaMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.meta_map.MetaMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaMap::IsInitialized() const {
  return true;
}

void MetaMap::InternalSwap(MetaMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  parkingtrajectories_.InternalSwap(&other->parkingtrajectories_);
  parkingslots_.InternalSwap(&other->parkingslots_);
  swap(ssigheader_, other->ssigheader_);
  swap(numvalidparkingslots_, other->numvalidparkingslots_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(correspondingmapid_, other->correspondingmapid_);
  swap(numvalidtrajectories_, other->numvalidtrajectories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetaMap_array_port::InitAsDefaultInstance() {
}
class MetaMap_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaMap_array_port>()._has_bits_);
};

MetaMap_array_port::MetaMap_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.meta_map.MetaMap_array_port)
}
MetaMap_array_port::MetaMap_array_port(const MetaMap_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.meta_map.MetaMap_array_port)
}

void MetaMap_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaMap_array_port_mf_5fmempark_2fmeta_5fmap_2eproto.base);
}

MetaMap_array_port::~MetaMap_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.meta_map.MetaMap_array_port)
  SharedDtor();
}

void MetaMap_array_port::SharedDtor() {
}

void MetaMap_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaMap_array_port& MetaMap_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaMap_array_port_mf_5fmempark_2fmeta_5fmap_2eproto.base);
  return *internal_default_instance();
}


void MetaMap_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.meta_map.MetaMap_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MetaMap_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_mempark.meta_map.MetaMap data = 675;
      case 675:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<5402>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaMap_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.meta_map.MetaMap_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.meta_map.MetaMap data = 675;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(675, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.meta_map.MetaMap_array_port)
  return target;
}

size_t MetaMap_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.meta_map.MetaMap_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.meta_map.MetaMap data = 675;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaMap_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.meta_map.MetaMap_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaMap_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaMap_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.meta_map.MetaMap_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.meta_map.MetaMap_array_port)
    MergeFrom(*source);
  }
}

void MetaMap_array_port::MergeFrom(const MetaMap_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.meta_map.MetaMap_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MetaMap_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.meta_map.MetaMap_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaMap_array_port::CopyFrom(const MetaMap_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.meta_map.MetaMap_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaMap_array_port::IsInitialized() const {
  return true;
}

void MetaMap_array_port::InternalSwap(MetaMap_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaMap_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace meta_map
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::meta_map::MetaMap* Arena::CreateMaybeMessage< ::pb::mf_mempark::meta_map::MetaMap >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::meta_map::MetaMap >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::meta_map::MetaMap_array_port* Arena::CreateMaybeMessage< ::pb::mf_mempark::meta_map::MetaMap_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::meta_map::MetaMap_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
