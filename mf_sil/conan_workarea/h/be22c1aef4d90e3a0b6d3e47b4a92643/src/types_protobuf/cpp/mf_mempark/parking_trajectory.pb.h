// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/parking_trajectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fparking_5ftrajectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fparking_5ftrajectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "lsm_geoml/pose_pod.pb.h"
#include "mf_mempark/trajectory_point.pb.h"
#include "mf_mempark/trajectory_meta_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fparking_5ftrajectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmempark_2fparking_5ftrajectory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fparking_5ftrajectory_2eproto;
namespace pb {
namespace mf_mempark {
namespace parking_trajectory {
class ParkingTrajectory;
class ParkingTrajectoryDefaultTypeInternal;
extern ParkingTrajectoryDefaultTypeInternal _ParkingTrajectory_default_instance_;
class ParkingTrajectory_array_port;
class ParkingTrajectory_array_portDefaultTypeInternal;
extern ParkingTrajectory_array_portDefaultTypeInternal _ParkingTrajectory_array_port_default_instance_;
}  // namespace parking_trajectory
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_mempark::parking_trajectory::ParkingTrajectory* Arena::CreateMaybeMessage<::pb::mf_mempark::parking_trajectory::ParkingTrajectory>(Arena*);
template<> ::pb::mf_mempark::parking_trajectory::ParkingTrajectory_array_port* Arena::CreateMaybeMessage<::pb::mf_mempark::parking_trajectory::ParkingTrajectory_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_mempark {
namespace parking_trajectory {

// ===================================================================

class ParkingTrajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.parking_trajectory.ParkingTrajectory) */ {
 public:
  ParkingTrajectory();
  virtual ~ParkingTrajectory();

  ParkingTrajectory(const ParkingTrajectory& from);
  ParkingTrajectory(ParkingTrajectory&& from) noexcept
    : ParkingTrajectory() {
    *this = ::std::move(from);
  }

  inline ParkingTrajectory& operator=(const ParkingTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingTrajectory& operator=(ParkingTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingTrajectory* internal_default_instance() {
    return reinterpret_cast<const ParkingTrajectory*>(
               &_ParkingTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParkingTrajectory& a, ParkingTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingTrajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingTrajectory* New() const final {
    return CreateMaybeMessage<ParkingTrajectory>(nullptr);
  }

  ParkingTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingTrajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingTrajectory& from);
  void MergeFrom(const ParkingTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingTrajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.parking_trajectory.ParkingTrajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fparking_5ftrajectory_2eproto);
    return ::descriptor_table_mf_5fmempark_2fparking_5ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListOfPointsFieldNumber = 3442,
    kSSigHeaderFieldNumber = 1033,
    kEndPoseFieldNumber = 2674,
    kMetaDataFieldNumber = 3080,
    kStartPoseFieldNumber = 3278,
    kTrajectoryIDFieldNumber = 86,
    kSlotIDFieldNumber = 208,
    kUiVersionNumberFieldNumber = 2124,
    kNumValidTrajPointsFieldNumber = 3292,
  };
  // repeated .pb.mf_mempark.trajectory_point.TrajectoryPoint listOfPoints = 3442;
  int listofpoints_size() const;
  private:
  int _internal_listofpoints_size() const;
  public:
  void clear_listofpoints();
  ::pb::mf_mempark::trajectory_point::TrajectoryPoint* mutable_listofpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >*
      mutable_listofpoints();
  private:
  const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& _internal_listofpoints(int index) const;
  ::pb::mf_mempark::trajectory_point::TrajectoryPoint* _internal_add_listofpoints();
  public:
  const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& listofpoints(int index) const;
  ::pb::mf_mempark::trajectory_point::TrajectoryPoint* add_listofpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >&
      listofpoints() const;

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.lsm_geoml.pose_pod.Pose_POD endPose = 2674;
  bool has_endpose() const;
  private:
  bool _internal_has_endpose() const;
  public:
  void clear_endpose();
  const ::pb::lsm_geoml::pose_pod::Pose_POD& endpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* release_endpose();
  ::pb::lsm_geoml::pose_pod::Pose_POD* mutable_endpose();
  void set_allocated_endpose(::pb::lsm_geoml::pose_pod::Pose_POD* endpose);
  private:
  const ::pb::lsm_geoml::pose_pod::Pose_POD& _internal_endpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* _internal_mutable_endpose();
  public:

  // optional .pb.mf_mempark.trajectory_meta_data.TrajectoryMetaData metaData = 3080;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData& metadata() const;
  ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* release_metadata();
  ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* mutable_metadata();
  void set_allocated_metadata(::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* metadata);
  private:
  const ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData& _internal_metadata() const;
  ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* _internal_mutable_metadata();
  public:

  // optional .pb.lsm_geoml.pose_pod.Pose_POD startPose = 3278;
  bool has_startpose() const;
  private:
  bool _internal_has_startpose() const;
  public:
  void clear_startpose();
  const ::pb::lsm_geoml::pose_pod::Pose_POD& startpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* release_startpose();
  ::pb::lsm_geoml::pose_pod::Pose_POD* mutable_startpose();
  void set_allocated_startpose(::pb::lsm_geoml::pose_pod::Pose_POD* startpose);
  private:
  const ::pb::lsm_geoml::pose_pod::Pose_POD& _internal_startpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* _internal_mutable_startpose();
  public:

  // optional uint32 trajectoryID = 86;
  bool has_trajectoryid() const;
  private:
  bool _internal_has_trajectoryid() const;
  public:
  void clear_trajectoryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 trajectoryid() const;
  void set_trajectoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trajectoryid() const;
  void _internal_set_trajectoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slotID = 208;
  bool has_slotid() const;
  private:
  bool _internal_has_slotid() const;
  public:
  void clear_slotid();
  ::PROTOBUF_NAMESPACE_ID::uint32 slotid() const;
  void set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slotid() const;
  void _internal_set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 numValidTrajPoints = 3292;
  bool has_numvalidtrajpoints() const;
  private:
  bool _internal_has_numvalidtrajpoints() const;
  public:
  void clear_numvalidtrajpoints();
  ::PROTOBUF_NAMESPACE_ID::uint32 numvalidtrajpoints() const;
  void set_numvalidtrajpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numvalidtrajpoints() const;
  void _internal_set_numvalidtrajpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.parking_trajectory.ParkingTrajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint > listofpoints_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::pb::lsm_geoml::pose_pod::Pose_POD* endpose_;
  ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* metadata_;
  ::pb::lsm_geoml::pose_pod::Pose_POD* startpose_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trajectoryid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slotid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numvalidtrajpoints_;
  friend struct ::TableStruct_mf_5fmempark_2fparking_5ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class ParkingTrajectory_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port) */ {
 public:
  ParkingTrajectory_array_port();
  virtual ~ParkingTrajectory_array_port();

  ParkingTrajectory_array_port(const ParkingTrajectory_array_port& from);
  ParkingTrajectory_array_port(ParkingTrajectory_array_port&& from) noexcept
    : ParkingTrajectory_array_port() {
    *this = ::std::move(from);
  }

  inline ParkingTrajectory_array_port& operator=(const ParkingTrajectory_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingTrajectory_array_port& operator=(ParkingTrajectory_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingTrajectory_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingTrajectory_array_port* internal_default_instance() {
    return reinterpret_cast<const ParkingTrajectory_array_port*>(
               &_ParkingTrajectory_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParkingTrajectory_array_port& a, ParkingTrajectory_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingTrajectory_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingTrajectory_array_port* New() const final {
    return CreateMaybeMessage<ParkingTrajectory_array_port>(nullptr);
  }

  ParkingTrajectory_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingTrajectory_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingTrajectory_array_port& from);
  void MergeFrom(const ParkingTrajectory_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingTrajectory_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fparking_5ftrajectory_2eproto);
    return ::descriptor_table_mf_5fmempark_2fparking_5ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1072,
  };
  // repeated .pb.mf_mempark.parking_trajectory.ParkingTrajectory data = 1072;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_mempark::parking_trajectory::ParkingTrajectory* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_trajectory::ParkingTrajectory >*
      mutable_data();
  private:
  const ::pb::mf_mempark::parking_trajectory::ParkingTrajectory& _internal_data(int index) const;
  ::pb::mf_mempark::parking_trajectory::ParkingTrajectory* _internal_add_data();
  public:
  const ::pb::mf_mempark::parking_trajectory::ParkingTrajectory& data(int index) const;
  ::pb::mf_mempark::parking_trajectory::ParkingTrajectory* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_trajectory::ParkingTrajectory >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_trajectory::ParkingTrajectory > data_;
  friend struct ::TableStruct_mf_5fmempark_2fparking_5ftrajectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParkingTrajectory

// optional uint32 uiVersionNumber = 2124;
inline bool ParkingTrajectory::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ParkingTrajectory::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void ParkingTrajectory::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void ParkingTrajectory::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  uiversionnumber_ = value;
}
inline void ParkingTrajectory::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_trajectory.ParkingTrajectory.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool ParkingTrajectory::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool ParkingTrajectory::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& ParkingTrajectory::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& ParkingTrajectory::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* ParkingTrajectory::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_trajectory.ParkingTrajectory.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* ParkingTrajectory::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* ParkingTrajectory::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_trajectory.ParkingTrajectory.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void ParkingTrajectory::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_trajectory.ParkingTrajectory.sSigHeader)
}

// optional uint32 trajectoryID = 86;
inline bool ParkingTrajectory::_internal_has_trajectoryid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ParkingTrajectory::has_trajectoryid() const {
  return _internal_has_trajectoryid();
}
inline void ParkingTrajectory::clear_trajectoryid() {
  trajectoryid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::_internal_trajectoryid() const {
  return trajectoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::trajectoryid() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.trajectoryID)
  return _internal_trajectoryid();
}
inline void ParkingTrajectory::_internal_set_trajectoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  trajectoryid_ = value;
}
inline void ParkingTrajectory::set_trajectoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trajectoryid(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_trajectory.ParkingTrajectory.trajectoryID)
}

// optional .pb.lsm_geoml.pose_pod.Pose_POD startPose = 3278;
inline bool ParkingTrajectory::_internal_has_startpose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || startpose_ != nullptr);
  return value;
}
inline bool ParkingTrajectory::has_startpose() const {
  return _internal_has_startpose();
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingTrajectory::_internal_startpose() const {
  const ::pb::lsm_geoml::pose_pod::Pose_POD* p = startpose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      &::pb::lsm_geoml::pose_pod::_Pose_POD_default_instance_);
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingTrajectory::startpose() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.startPose)
  return _internal_startpose();
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingTrajectory::release_startpose() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_trajectory.ParkingTrajectory.startPose)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::lsm_geoml::pose_pod::Pose_POD* temp = startpose_;
  startpose_ = nullptr;
  return temp;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingTrajectory::_internal_mutable_startpose() {
  _has_bits_[0] |= 0x00000008u;
  if (startpose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lsm_geoml::pose_pod::Pose_POD>(GetArenaNoVirtual());
    startpose_ = p;
  }
  return startpose_;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingTrajectory::mutable_startpose() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_trajectory.ParkingTrajectory.startPose)
  return _internal_mutable_startpose();
}
inline void ParkingTrajectory::set_allocated_startpose(::pb::lsm_geoml::pose_pod::Pose_POD* startpose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startpose_);
  }
  if (startpose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      startpose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startpose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  startpose_ = startpose;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_trajectory.ParkingTrajectory.startPose)
}

// optional .pb.lsm_geoml.pose_pod.Pose_POD endPose = 2674;
inline bool ParkingTrajectory::_internal_has_endpose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || endpose_ != nullptr);
  return value;
}
inline bool ParkingTrajectory::has_endpose() const {
  return _internal_has_endpose();
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingTrajectory::_internal_endpose() const {
  const ::pb::lsm_geoml::pose_pod::Pose_POD* p = endpose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      &::pb::lsm_geoml::pose_pod::_Pose_POD_default_instance_);
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingTrajectory::endpose() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.endPose)
  return _internal_endpose();
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingTrajectory::release_endpose() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_trajectory.ParkingTrajectory.endPose)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::lsm_geoml::pose_pod::Pose_POD* temp = endpose_;
  endpose_ = nullptr;
  return temp;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingTrajectory::_internal_mutable_endpose() {
  _has_bits_[0] |= 0x00000002u;
  if (endpose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lsm_geoml::pose_pod::Pose_POD>(GetArenaNoVirtual());
    endpose_ = p;
  }
  return endpose_;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingTrajectory::mutable_endpose() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_trajectory.ParkingTrajectory.endPose)
  return _internal_mutable_endpose();
}
inline void ParkingTrajectory::set_allocated_endpose(::pb::lsm_geoml::pose_pod::Pose_POD* endpose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpose_);
  }
  if (endpose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      endpose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  endpose_ = endpose;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_trajectory.ParkingTrajectory.endPose)
}

// optional uint32 numValidTrajPoints = 3292;
inline bool ParkingTrajectory::_internal_has_numvalidtrajpoints() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ParkingTrajectory::has_numvalidtrajpoints() const {
  return _internal_has_numvalidtrajpoints();
}
inline void ParkingTrajectory::clear_numvalidtrajpoints() {
  numvalidtrajpoints_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::_internal_numvalidtrajpoints() const {
  return numvalidtrajpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::numvalidtrajpoints() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.numValidTrajPoints)
  return _internal_numvalidtrajpoints();
}
inline void ParkingTrajectory::_internal_set_numvalidtrajpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  numvalidtrajpoints_ = value;
}
inline void ParkingTrajectory::set_numvalidtrajpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numvalidtrajpoints(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_trajectory.ParkingTrajectory.numValidTrajPoints)
}

// repeated .pb.mf_mempark.trajectory_point.TrajectoryPoint listOfPoints = 3442;
inline int ParkingTrajectory::_internal_listofpoints_size() const {
  return listofpoints_.size();
}
inline int ParkingTrajectory::listofpoints_size() const {
  return _internal_listofpoints_size();
}
inline ::pb::mf_mempark::trajectory_point::TrajectoryPoint* ParkingTrajectory::mutable_listofpoints(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_trajectory.ParkingTrajectory.listOfPoints)
  return listofpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >*
ParkingTrajectory::mutable_listofpoints() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.parking_trajectory.ParkingTrajectory.listOfPoints)
  return &listofpoints_;
}
inline const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& ParkingTrajectory::_internal_listofpoints(int index) const {
  return listofpoints_.Get(index);
}
inline const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& ParkingTrajectory::listofpoints(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.listOfPoints)
  return _internal_listofpoints(index);
}
inline ::pb::mf_mempark::trajectory_point::TrajectoryPoint* ParkingTrajectory::_internal_add_listofpoints() {
  return listofpoints_.Add();
}
inline ::pb::mf_mempark::trajectory_point::TrajectoryPoint* ParkingTrajectory::add_listofpoints() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.parking_trajectory.ParkingTrajectory.listOfPoints)
  return _internal_add_listofpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >&
ParkingTrajectory::listofpoints() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.parking_trajectory.ParkingTrajectory.listOfPoints)
  return listofpoints_;
}

// optional uint32 slotID = 208;
inline bool ParkingTrajectory::_internal_has_slotid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParkingTrajectory::has_slotid() const {
  return _internal_has_slotid();
}
inline void ParkingTrajectory::clear_slotid() {
  slotid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::_internal_slotid() const {
  return slotid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingTrajectory::slotid() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.slotID)
  return _internal_slotid();
}
inline void ParkingTrajectory::_internal_set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  slotid_ = value;
}
inline void ParkingTrajectory::set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slotid(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_trajectory.ParkingTrajectory.slotID)
}

// optional .pb.mf_mempark.trajectory_meta_data.TrajectoryMetaData metaData = 3080;
inline bool ParkingTrajectory::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool ParkingTrajectory::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData& ParkingTrajectory::_internal_metadata() const {
  const ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData*>(
      &::pb::mf_mempark::trajectory_meta_data::_TrajectoryMetaData_default_instance_);
}
inline const ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData& ParkingTrajectory::metadata() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory.metaData)
  return _internal_metadata();
}
inline ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* ParkingTrajectory::release_metadata() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_trajectory.ParkingTrajectory.metaData)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* ParkingTrajectory::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* ParkingTrajectory::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_trajectory.ParkingTrajectory.metaData)
  return _internal_mutable_metadata();
}
inline void ParkingTrajectory::set_allocated_metadata(::pb::mf_mempark::trajectory_meta_data::TrajectoryMetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_trajectory.ParkingTrajectory.metaData)
}

// -------------------------------------------------------------------

// ParkingTrajectory_array_port

// repeated .pb.mf_mempark.parking_trajectory.ParkingTrajectory data = 1072;
inline int ParkingTrajectory_array_port::_internal_data_size() const {
  return data_.size();
}
inline int ParkingTrajectory_array_port::data_size() const {
  return _internal_data_size();
}
inline void ParkingTrajectory_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_mempark::parking_trajectory::ParkingTrajectory* ParkingTrajectory_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_trajectory::ParkingTrajectory >*
ParkingTrajectory_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port.data)
  return &data_;
}
inline const ::pb::mf_mempark::parking_trajectory::ParkingTrajectory& ParkingTrajectory_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_mempark::parking_trajectory::ParkingTrajectory& ParkingTrajectory_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_mempark::parking_trajectory::ParkingTrajectory* ParkingTrajectory_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_mempark::parking_trajectory::ParkingTrajectory* ParkingTrajectory_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_trajectory::ParkingTrajectory >&
ParkingTrajectory_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.parking_trajectory.ParkingTrajectory_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking_trajectory
}  // namespace mf_mempark
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fparking_5ftrajectory_2eproto
