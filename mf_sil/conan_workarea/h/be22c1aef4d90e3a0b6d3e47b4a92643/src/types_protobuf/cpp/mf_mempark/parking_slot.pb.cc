// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/parking_slot.proto

#include "mf_mempark/parking_slot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommonvehsigprovider_2fgpsdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fgeoml_2fpose_5fpod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fparking_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fslot_5fmeta_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SlotMetaData_mf_5fmempark_2fslot_5fmeta_5fdata_2eproto;
namespace pb {
namespace mf_mempark {
namespace parking_slot {
class ParkingSlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingSlot> _instance;
} _ParkingSlot_default_instance_;
class ParkingSlot_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingSlot_array_port> _instance;
} _ParkingSlot_array_port_default_instance_;
}  // namespace parking_slot
}  // namespace mf_mempark
}  // namespace pb
static void InitDefaultsscc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::parking_slot::_ParkingSlot_default_instance_;
    new (ptr) ::pb::mf_mempark::parking_slot::ParkingSlot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::parking_slot::ParkingSlot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.base,
      &scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto.base,
      &scc_info_SlotMetaData_mf_5fmempark_2fslot_5fmeta_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_ParkingSlot_array_port_mf_5fmempark_2fparking_5fslot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::parking_slot::_ParkingSlot_array_port_default_instance_;
    new (ptr) ::pb::mf_mempark::parking_slot::ParkingSlot_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::parking_slot::ParkingSlot_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingSlot_array_port_mf_5fmempark_2fparking_5fslot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingSlot_array_port_mf_5fmempark_2fparking_5fslot_2eproto}, {
      &scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmempark_2fparking_5fslot_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmempark_2fparking_5fslot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmempark_2fparking_5fslot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmempark_2fparking_5fslot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, slotid_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, slotgnss_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, slotpose_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, startpose_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, slotside_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, slottype_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, correspondingmapid_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot, metadata_),
  8,
  1,
  6,
  2,
  0,
  4,
  7,
  9,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::parking_slot::ParkingSlot_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::mf_mempark::parking_slot::ParkingSlot)},
  { 25, 31, sizeof(::pb::mf_mempark::parking_slot::ParkingSlot_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::parking_slot::_ParkingSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::parking_slot::_ParkingSlot_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmempark_2fparking_5fslot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035mf_mempark/parking_slot.proto\022\032pb.mf_m"
  "empark.parking_slot\032\027eco/signal_header.p"
  "roto\032%ap_commonvehsigprovider/gpsdata.pr"
  "oto\032\030lsm_geoml/pose_pod.proto\032)mf_mempar"
  "k/system_defined_pose_side.proto\032)mf_mem"
  "park/system_defined_pose_type.proto\032\037mf_"
  "mempark/slot_meta_data.proto\"\232\004\n\013Parking"
  "Slot\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHe"
  "ader\030\211\010 \001(\0132\".pb.eco.signal_header.Signa"
  "lHeader\022\017\n\006slotID\030\320\001 \001(\r\022>\n\010slotGNSS\030\242\013 "
  "\001(\0132+.pb.ap_commonvehsigprovider.gpsdata"
  ".GPSData\0222\n\010slotPose\030\377\005 \001(\0132\037.pb.lsm_geo"
  "ml.pose_pod.Pose_POD\0223\n\tstartPose\030\316\031 \001(\013"
  "2\037.pb.lsm_geoml.pose_pod.Pose_POD\022P\n\010slo"
  "tSide\030\372\017 \001(\0162=.pb.mf_mempark.system_defi"
  "ned_pose_side.SystemDefinedPoseSide\022P\n\010s"
  "lotType\030\210\034 \001(\0162=.pb.mf_mempark.system_de"
  "fined_pose_type.SystemDefinedPoseType\022\033\n"
  "\022correspondingMapId\030\210\035 \001(\r\022=\n\010metaData\030\324"
  "\016 \001(\0132*.pb.mf_mempark.slot_meta_data.Slo"
  "tMetaData\"P\n\026ParkingSlot_array_port\0226\n\004d"
  "ata\030\236\036 \003(\0132\'.pb.mf_mempark.parking_slot."
  "ParkingSlot"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_deps[6] = {
  &::descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_lsm_5fgeoml_2fpose_5fpod_2eproto,
  &::descriptor_table_mf_5fmempark_2fslot_5fmeta_5fdata_2eproto,
  &::descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fside_2eproto,
  &::descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_sccs[2] = {
  &scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto.base,
  &scc_info_ParkingSlot_array_port_mf_5fmempark_2fparking_5fslot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_once;
static bool descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto = {
  &descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_initialized, descriptor_table_protodef_mf_5fmempark_2fparking_5fslot_2eproto, "mf_mempark/parking_slot.proto", 891,
  &descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_once, descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_sccs, descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_mf_5fmempark_2fparking_5fslot_2eproto::offsets,
  file_level_metadata_mf_5fmempark_2fparking_5fslot_2eproto, 2, file_level_enum_descriptors_mf_5fmempark_2fparking_5fslot_2eproto, file_level_service_descriptors_mf_5fmempark_2fparking_5fslot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmempark_2fparking_5fslot_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto), true);
namespace pb {
namespace mf_mempark {
namespace parking_slot {

// ===================================================================

void ParkingSlot::InitAsDefaultInstance() {
  ::pb::mf_mempark::parking_slot::_ParkingSlot_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::mf_mempark::parking_slot::_ParkingSlot_default_instance_._instance.get_mutable()->slotgnss_ = const_cast< ::pb::ap_commonvehsigprovider::gpsdata::GPSData*>(
      ::pb::ap_commonvehsigprovider::gpsdata::GPSData::internal_default_instance());
  ::pb::mf_mempark::parking_slot::_ParkingSlot_default_instance_._instance.get_mutable()->slotpose_ = const_cast< ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      ::pb::lsm_geoml::pose_pod::Pose_POD::internal_default_instance());
  ::pb::mf_mempark::parking_slot::_ParkingSlot_default_instance_._instance.get_mutable()->startpose_ = const_cast< ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      ::pb::lsm_geoml::pose_pod::Pose_POD::internal_default_instance());
  ::pb::mf_mempark::parking_slot::_ParkingSlot_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::pb::mf_mempark::slot_meta_data::SlotMetaData*>(
      ::pb::mf_mempark::slot_meta_data::SlotMetaData::internal_default_instance());
}
class ParkingSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingSlot>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const ParkingSlot* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slotid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& slotgnss(const ParkingSlot* msg);
  static void set_has_slotgnss(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::lsm_geoml::pose_pod::Pose_POD& slotpose(const ParkingSlot* msg);
  static void set_has_slotpose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::lsm_geoml::pose_pod::Pose_POD& startpose(const ParkingSlot* msg);
  static void set_has_startpose(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_slotside(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_slottype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_correspondingmapid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::mf_mempark::slot_meta_data::SlotMetaData& metadata(const ParkingSlot* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
ParkingSlot::_Internal::ssigheader(const ParkingSlot* msg) {
  return *msg->ssigheader_;
}
const ::pb::ap_commonvehsigprovider::gpsdata::GPSData&
ParkingSlot::_Internal::slotgnss(const ParkingSlot* msg) {
  return *msg->slotgnss_;
}
const ::pb::lsm_geoml::pose_pod::Pose_POD&
ParkingSlot::_Internal::slotpose(const ParkingSlot* msg) {
  return *msg->slotpose_;
}
const ::pb::lsm_geoml::pose_pod::Pose_POD&
ParkingSlot::_Internal::startpose(const ParkingSlot* msg) {
  return *msg->startpose_;
}
const ::pb::mf_mempark::slot_meta_data::SlotMetaData&
ParkingSlot::_Internal::metadata(const ParkingSlot* msg) {
  return *msg->metadata_;
}
void ParkingSlot::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingSlot::clear_slotgnss() {
  if (slotgnss_ != nullptr) slotgnss_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ParkingSlot::clear_slotpose() {
  if (slotpose_ != nullptr) slotpose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ParkingSlot::clear_startpose() {
  if (startpose_ != nullptr) startpose_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ParkingSlot::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ParkingSlot::ParkingSlot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.parking_slot.ParkingSlot)
}
ParkingSlot::ParkingSlot(const ParkingSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_slotpose()) {
    slotpose_ = new ::pb::lsm_geoml::pose_pod::Pose_POD(*from.slotpose_);
  } else {
    slotpose_ = nullptr;
  }
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_slotgnss()) {
    slotgnss_ = new ::pb::ap_commonvehsigprovider::gpsdata::GPSData(*from.slotgnss_);
  } else {
    slotgnss_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::pb::mf_mempark::slot_meta_data::SlotMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_startpose()) {
    startpose_ = new ::pb::lsm_geoml::pose_pod::Pose_POD(*from.startpose_);
  } else {
    startpose_ = nullptr;
  }
  ::memcpy(&correspondingmapid_, &from.correspondingmapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&slottype_) -
    reinterpret_cast<char*>(&correspondingmapid_)) + sizeof(slottype_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.parking_slot.ParkingSlot)
}

void ParkingSlot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto.base);
  ::memset(&slotpose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slottype_) -
      reinterpret_cast<char*>(&slotpose_)) + sizeof(slottype_));
}

ParkingSlot::~ParkingSlot() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.parking_slot.ParkingSlot)
  SharedDtor();
}

void ParkingSlot::SharedDtor() {
  if (this != internal_default_instance()) delete slotpose_;
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete slotgnss_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete startpose_;
}

void ParkingSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingSlot& ParkingSlot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingSlot_mf_5fmempark_2fparking_5fslot_2eproto.base);
  return *internal_default_instance();
}


void ParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.parking_slot.ParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(slotpose_ != nullptr);
      slotpose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(slotgnss_ != nullptr);
      slotgnss_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(startpose_ != nullptr);
      startpose_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&correspondingmapid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotside_) -
        reinterpret_cast<char*>(&correspondingmapid_)) + sizeof(slotside_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&uiversionnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slottype_) -
        reinterpret_cast<char*>(&uiversionnumber_)) + sizeof(slottype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParkingSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slotID = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_slotid(&has_bits);
          slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_geoml.pose_pod.Pose_POD slotPose = 767;
      case 767:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_slotpose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_commonvehsigprovider.gpsdata.GPSData slotGNSS = 1442;
      case 1442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slotgnss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.slot_meta_data.SlotMetaData metaData = 1876;
      case 1876:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide slotSide = 2042;
      case 2042:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide_IsValid(val))) {
            _internal_set_slotside(static_cast<::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2042, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_geoml.pose_pod.Pose_POD startPose = 3278;
      case 3278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_startpose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType slotType = 3592;
      case 3592:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType_IsValid(val))) {
            _internal_set_slottype(static_cast<::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3592, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 correspondingMapId = 3720;
      case 3720:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_correspondingmapid(&has_bits);
          correspondingmapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.parking_slot.ParkingSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slotID = 208;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(208, this->_internal_slotid(), target);
  }

  // optional .pb.lsm_geoml.pose_pod.Pose_POD slotPose = 767;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        767, _Internal::slotpose(this), target, stream);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional .pb.ap_commonvehsigprovider.gpsdata.GPSData slotGNSS = 1442;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1442, _Internal::slotgnss(this), target, stream);
  }

  // optional .pb.mf_mempark.slot_meta_data.SlotMetaData metaData = 1876;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1876, _Internal::metadata(this), target, stream);
  }

  // optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide slotSide = 2042;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2042, this->_internal_slotside(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional .pb.lsm_geoml.pose_pod.Pose_POD startPose = 3278;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3278, _Internal::startpose(this), target, stream);
  }

  // optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType slotType = 3592;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3592, this->_internal_slottype(), target);
  }

  // optional uint32 correspondingMapId = 3720;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3720, this->_internal_correspondingmapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.parking_slot.ParkingSlot)
  return target;
}

size_t ParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.parking_slot.ParkingSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.lsm_geoml.pose_pod.Pose_POD slotPose = 767;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slotpose_);
    }

    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.ap_commonvehsigprovider.gpsdata.GPSData slotGNSS = 1442;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slotgnss_);
    }

    // optional .pb.mf_mempark.slot_meta_data.SlotMetaData metaData = 1876;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .pb.lsm_geoml.pose_pod.Pose_POD startPose = 3278;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *startpose_);
    }

    // optional uint32 correspondingMapId = 3720;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_correspondingmapid());
    }

    // optional uint32 slotID = 208;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slotid());
    }

    // optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide slotSide = 2042;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slotside());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType slotType = 3592;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slottype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.parking_slot.ParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.parking_slot.ParkingSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.parking_slot.ParkingSlot)
    MergeFrom(*source);
  }
}

void ParkingSlot::MergeFrom(const ParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.parking_slot.ParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_slotpose()->::pb::lsm_geoml::pose_pod::Pose_POD::MergeFrom(from._internal_slotpose());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_slotgnss()->::pb::ap_commonvehsigprovider::gpsdata::GPSData::MergeFrom(from._internal_slotgnss());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_metadata()->::pb::mf_mempark::slot_meta_data::SlotMetaData::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_startpose()->::pb::lsm_geoml::pose_pod::Pose_POD::MergeFrom(from._internal_startpose());
    }
    if (cached_has_bits & 0x00000020u) {
      correspondingmapid_ = from.correspondingmapid_;
    }
    if (cached_has_bits & 0x00000040u) {
      slotid_ = from.slotid_;
    }
    if (cached_has_bits & 0x00000080u) {
      slotside_ = from.slotside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      slottype_ = from.slottype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.parking_slot.ParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlot::CopyFrom(const ParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.parking_slot.ParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlot::IsInitialized() const {
  return true;
}

void ParkingSlot::InternalSwap(ParkingSlot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slotpose_, other->slotpose_);
  swap(ssigheader_, other->ssigheader_);
  swap(slotgnss_, other->slotgnss_);
  swap(metadata_, other->metadata_);
  swap(startpose_, other->startpose_);
  swap(correspondingmapid_, other->correspondingmapid_);
  swap(slotid_, other->slotid_);
  swap(slotside_, other->slotside_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(slottype_, other->slottype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingSlot_array_port::InitAsDefaultInstance() {
}
class ParkingSlot_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingSlot_array_port>()._has_bits_);
};

ParkingSlot_array_port::ParkingSlot_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
}
ParkingSlot_array_port::ParkingSlot_array_port(const ParkingSlot_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
}

void ParkingSlot_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingSlot_array_port_mf_5fmempark_2fparking_5fslot_2eproto.base);
}

ParkingSlot_array_port::~ParkingSlot_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  SharedDtor();
}

void ParkingSlot_array_port::SharedDtor() {
}

void ParkingSlot_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingSlot_array_port& ParkingSlot_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingSlot_array_port_mf_5fmempark_2fparking_5fslot_2eproto.base);
  return *internal_default_instance();
}


void ParkingSlot_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParkingSlot_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_mempark.parking_slot.ParkingSlot data = 3870;
      case 3870:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingSlot_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.parking_slot.ParkingSlot data = 3870;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3870, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  return target;
}

size_t ParkingSlot_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.parking_slot.ParkingSlot data = 3870;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSlot_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlot_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingSlot_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
    MergeFrom(*source);
  }
}

void ParkingSlot_array_port::MergeFrom(const ParkingSlot_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ParkingSlot_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlot_array_port::CopyFrom(const ParkingSlot_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlot_array_port::IsInitialized() const {
  return true;
}

void ParkingSlot_array_port::InternalSwap(ParkingSlot_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSlot_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking_slot
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::parking_slot::ParkingSlot* Arena::CreateMaybeMessage< ::pb::mf_mempark::parking_slot::ParkingSlot >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::parking_slot::ParkingSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::parking_slot::ParkingSlot_array_port* Arena::CreateMaybeMessage< ::pb::mf_mempark::parking_slot::ParkingSlot_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::parking_slot::ParkingSlot_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
