// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg_mgr/ecu_coding_port.proto

#include "cfg_mgr/ecu_coding_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EcuCodingPort_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto;
namespace pb {
namespace cfg_mgr {
namespace ecu_coding_port {
class EcuCodingPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EcuCodingPort> _instance;
} _EcuCodingPort_default_instance_;
class EcuCodingPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EcuCodingPort_array_port> _instance;
} _EcuCodingPort_array_port_default_instance_;
}  // namespace ecu_coding_port
}  // namespace cfg_mgr
}  // namespace pb
static void InitDefaultsscc_info_EcuCodingPort_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::cfg_mgr::ecu_coding_port::_EcuCodingPort_default_instance_;
    new (ptr) ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EcuCodingPort_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EcuCodingPort_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto}, {}};

static void InitDefaultsscc_info_EcuCodingPort_array_port_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::cfg_mgr::ecu_coding_port::_EcuCodingPort_array_port_default_instance_;
    new (ptr) ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EcuCodingPort_array_port_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EcuCodingPort_array_port_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto}, {
      &scc_info_EcuCodingPort_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, timestamp_us_u64_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, codingstate_e_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, isussupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, numofussensors_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, usdegradationmode_e_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, ispdwfrontonlysupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, ispdwrearonlysupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, ispdw360supported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, isbrakingfrontonlysupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, isbrakingrearonlysupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, isbraking360supported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, issteeringsuggestsupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, issteeringprotectsupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, iswhlprotectsupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, issemiauparksupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, isfullauparksupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, isremoteparksupported_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort, isbasicgarageparksupported_),
  17,
  6,
  9,
  5,
  0,
  10,
  11,
  12,
  1,
  2,
  3,
  4,
  13,
  14,
  15,
  16,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort)},
  { 41, 47, sizeof(::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::cfg_mgr::ecu_coding_port::_EcuCodingPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::cfg_mgr::ecu_coding_port::_EcuCodingPort_array_port_default_instance_),
};

const char descriptor_table_protodef_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035cfg_mgr/ecu_coding_port.proto\022\032pb.cfg_"
  "mgr.ecu_coding_port\032\036cfg_mgr/ecu_coding_"
  "state.proto\032(cfg_mgr/us_sensor_degradati"
  "on_type.proto\"\266\005\n\rEcuCodingPort\022\031\n\020times"
  "tamp_us_u64\030\302\034 \001(\004\022C\n\rcodingState_e\030\221\r \001"
  "(\0162+.pb.cfg_mgr.ecu_coding_state.EcuCodi"
  "ngState\022\026\n\risUsSupported\030\227\030 \001(\010\022\027\n\016numOf"
  "UsSensors\030\277\013 \001(\r\022\\\n\023UsDegradationMode_e\030"
  "\235\036 \001(\0162>.pb.cfg_mgr.us_sensor_degradatio"
  "n_type.UsSensorDegradationType\022 \n\027isPdwF"
  "rontOnlySupported\030\216\033 \001(\010\022\037\n\026isPdwRearOnl"
  "ySupported\030\375\r \001(\010\022\032\n\021isPdw360Supported\030\304"
  "\003 \001(\010\022$\n\033isBrakingFrontOnlySupported\030\327\006 "
  "\001(\010\022\"\n\032isBrakingRearOnlySupported\030< \001(\010\022"
  "\036\n\025isBraking360Supported\030\217\021 \001(\010\022#\n\032isSte"
  "eringSuggestSupported\030\277\003 \001(\010\022#\n\032isSteeri"
  "ngProtectSupported\030\242\014 \001(\010\022\036\n\025isWhlProtec"
  "tSupported\030\320\027 \001(\010\022\036\n\025isSemiAuParkSupport"
  "ed\030\314\037 \001(\010\022\036\n\025isFullAuParkSupported\030\372\006 \001("
  "\010\022\036\n\025isRemoteParkSupported\030\317\002 \001(\010\022#\n\032isB"
  "asicGarageParkSupported\030\330\035 \001(\010\"T\n\030EcuCod"
  "ingPort_array_port\0228\n\004data\030\262\r \003(\0132).pb.c"
  "fg_mgr.ecu_coding_port.EcuCodingPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_deps[2] = {
  &::descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fstate_2eproto,
  &::descriptor_table_cfg_5fmgr_2fus_5fsensor_5fdegradation_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_sccs[2] = {
  &scc_info_EcuCodingPort_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.base,
  &scc_info_EcuCodingPort_array_port_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_once;
static bool descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto = {
  &descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_initialized, descriptor_table_protodef_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto, "cfg_mgr/ecu_coding_port.proto", 916,
  &descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_once, descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_sccs, descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto::offsets,
  file_level_metadata_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto, 2, file_level_enum_descriptors_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto, file_level_service_descriptors_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto), true);
namespace pb {
namespace cfg_mgr {
namespace ecu_coding_port {

// ===================================================================

void EcuCodingPort::InitAsDefaultInstance() {
}
class EcuCodingPort::_Internal {
 public:
  using HasBits = decltype(std::declval<EcuCodingPort>()._has_bits_);
  static void set_has_timestamp_us_u64(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_codingstate_e(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isussupported(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_numofussensors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_usdegradationmode_e(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ispdwfrontonlysupported(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ispdwrearonlysupported(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ispdw360supported(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_isbrakingfrontonlysupported(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isbrakingrearonlysupported(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isbraking360supported(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_issteeringsuggestsupported(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_issteeringprotectsupported(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_iswhlprotectsupported(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_issemiauparksupported(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_isfullauparksupported(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_isremoteparksupported(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isbasicgarageparksupported(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

EcuCodingPort::EcuCodingPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
}
EcuCodingPort::EcuCodingPort(const EcuCodingPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&usdegradationmode_e_, &from.usdegradationmode_e_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_us_u64_) -
    reinterpret_cast<char*>(&usdegradationmode_e_)) + sizeof(timestamp_us_u64_));
  // @@protoc_insertion_point(copy_constructor:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
}

void EcuCodingPort::SharedCtor() {
  ::memset(&usdegradationmode_e_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_us_u64_) -
      reinterpret_cast<char*>(&usdegradationmode_e_)) + sizeof(timestamp_us_u64_));
}

EcuCodingPort::~EcuCodingPort() {
  // @@protoc_insertion_point(destructor:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  SharedDtor();
}

void EcuCodingPort::SharedDtor() {
}

void EcuCodingPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EcuCodingPort& EcuCodingPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EcuCodingPort_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.base);
  return *internal_default_instance();
}


void EcuCodingPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&usdegradationmode_e_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isremoteparksupported_) -
        reinterpret_cast<char*>(&usdegradationmode_e_)) + sizeof(isremoteparksupported_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&isbasicgarageparksupported_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issemiauparksupported_) -
        reinterpret_cast<char*>(&isbasicgarageparksupported_)) + sizeof(issemiauparksupported_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&isfullauparksupported_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_us_u64_) -
        reinterpret_cast<char*>(&isfullauparksupported_)) + sizeof(timestamp_us_u64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EcuCodingPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isBrakingRearOnlySupported = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_isbrakingrearonlysupported(&has_bits);
          isbrakingrearonlysupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isRemoteParkSupported = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_isremoteparksupported(&has_bits);
          isremoteparksupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSteeringSuggestSupported = 447;
      case 447:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_issteeringsuggestsupported(&has_bits);
          issteeringsuggestsupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isPdw360Supported = 452;
      case 452:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ispdw360supported(&has_bits);
          ispdw360supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isBrakingFrontOnlySupported = 855;
      case 855:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_isbrakingfrontonlysupported(&has_bits);
          isbrakingfrontonlysupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isFullAuParkSupported = 890;
      case 890:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_isfullauparksupported(&has_bits);
          isfullauparksupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 numOfUsSensors = 1471;
      case 1471:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_numofussensors(&has_bits);
          numofussensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSteeringProtectSupported = 1570;
      case 1570:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_issteeringprotectsupported(&has_bits);
          issteeringprotectsupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.cfg_mgr.ecu_coding_state.EcuCodingState codingState_e = 1681;
      case 1681:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::cfg_mgr::ecu_coding_state::EcuCodingState_IsValid(val))) {
            _internal_set_codingstate_e(static_cast<::pb::cfg_mgr::ecu_coding_state::EcuCodingState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1681, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool isPdwRearOnlySupported = 1789;
      case 1789:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_ispdwrearonlysupported(&has_bits);
          ispdwrearonlysupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isBraking360Supported = 2191;
      case 2191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_isbraking360supported(&has_bits);
          isbraking360supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isWhlProtectSupported = 3024;
      case 3024:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_iswhlprotectsupported(&has_bits);
          iswhlprotectsupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isUsSupported = 3095;
      case 3095:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_isussupported(&has_bits);
          isussupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isPdwFrontOnlySupported = 3470;
      case 3470:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ispdwfrontonlysupported(&has_bits);
          ispdwfrontonlysupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp_us_u64 = 3650;
      case 3650:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp_us_u64(&has_bits);
          timestamp_us_u64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isBasicGarageParkSupported = 3800;
      case 3800:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_isbasicgarageparksupported(&has_bits);
          isbasicgarageparksupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.cfg_mgr.us_sensor_degradation_type.UsSensorDegradationType UsDegradationMode_e = 3869;
      case 3869:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType_IsValid(val))) {
            _internal_set_usdegradationmode_e(static_cast<::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3869, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool isSemiAuParkSupported = 4044;
      case 4044:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_issemiauparksupported(&has_bits);
          issemiauparksupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EcuCodingPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isBrakingRearOnlySupported = 60;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_isbrakingrearonlysupported(), target);
  }

  // optional bool isRemoteParkSupported = 335;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(335, this->_internal_isremoteparksupported(), target);
  }

  // optional bool isSteeringSuggestSupported = 447;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(447, this->_internal_issteeringsuggestsupported(), target);
  }

  // optional bool isPdw360Supported = 452;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(452, this->_internal_ispdw360supported(), target);
  }

  // optional bool isBrakingFrontOnlySupported = 855;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(855, this->_internal_isbrakingfrontonlysupported(), target);
  }

  // optional bool isFullAuParkSupported = 890;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(890, this->_internal_isfullauparksupported(), target);
  }

  // optional uint32 numOfUsSensors = 1471;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1471, this->_internal_numofussensors(), target);
  }

  // optional bool isSteeringProtectSupported = 1570;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1570, this->_internal_issteeringprotectsupported(), target);
  }

  // optional .pb.cfg_mgr.ecu_coding_state.EcuCodingState codingState_e = 1681;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1681, this->_internal_codingstate_e(), target);
  }

  // optional bool isPdwRearOnlySupported = 1789;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1789, this->_internal_ispdwrearonlysupported(), target);
  }

  // optional bool isBraking360Supported = 2191;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2191, this->_internal_isbraking360supported(), target);
  }

  // optional bool isWhlProtectSupported = 3024;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3024, this->_internal_iswhlprotectsupported(), target);
  }

  // optional bool isUsSupported = 3095;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3095, this->_internal_isussupported(), target);
  }

  // optional bool isPdwFrontOnlySupported = 3470;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3470, this->_internal_ispdwfrontonlysupported(), target);
  }

  // optional uint64 timestamp_us_u64 = 3650;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3650, this->_internal_timestamp_us_u64(), target);
  }

  // optional bool isBasicGarageParkSupported = 3800;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3800, this->_internal_isbasicgarageparksupported(), target);
  }

  // optional .pb.cfg_mgr.us_sensor_degradation_type.UsSensorDegradationType UsDegradationMode_e = 3869;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3869, this->_internal_usdegradationmode_e(), target);
  }

  // optional bool isSemiAuParkSupported = 4044;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4044, this->_internal_issemiauparksupported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  return target;
}

size_t EcuCodingPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.cfg_mgr.us_sensor_degradation_type.UsSensorDegradationType UsDegradationMode_e = 3869;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usdegradationmode_e());
    }

    // optional bool isBrakingFrontOnlySupported = 855;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool isBrakingRearOnlySupported = 60;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool isBraking360Supported = 2191;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool isSteeringSuggestSupported = 447;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional uint32 numOfUsSensors = 1471;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numofussensors());
    }

    // optional .pb.cfg_mgr.ecu_coding_state.EcuCodingState codingState_e = 1681;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_codingstate_e());
    }

    // optional bool isRemoteParkSupported = 335;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool isBasicGarageParkSupported = 3800;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional bool isUsSupported = 3095;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool isPdwFrontOnlySupported = 3470;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional bool isPdwRearOnlySupported = 1789;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool isPdw360Supported = 452;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool isSteeringProtectSupported = 1570;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool isWhlProtectSupported = 3024;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool isSemiAuParkSupported = 4044;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool isFullAuParkSupported = 890;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint64 timestamp_us_u64 = 3650;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp_us_u64());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EcuCodingPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  GOOGLE_DCHECK_NE(&from, this);
  const EcuCodingPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EcuCodingPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
    MergeFrom(*source);
  }
}

void EcuCodingPort::MergeFrom(const EcuCodingPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      usdegradationmode_e_ = from.usdegradationmode_e_;
    }
    if (cached_has_bits & 0x00000002u) {
      isbrakingfrontonlysupported_ = from.isbrakingfrontonlysupported_;
    }
    if (cached_has_bits & 0x00000004u) {
      isbrakingrearonlysupported_ = from.isbrakingrearonlysupported_;
    }
    if (cached_has_bits & 0x00000008u) {
      isbraking360supported_ = from.isbraking360supported_;
    }
    if (cached_has_bits & 0x00000010u) {
      issteeringsuggestsupported_ = from.issteeringsuggestsupported_;
    }
    if (cached_has_bits & 0x00000020u) {
      numofussensors_ = from.numofussensors_;
    }
    if (cached_has_bits & 0x00000040u) {
      codingstate_e_ = from.codingstate_e_;
    }
    if (cached_has_bits & 0x00000080u) {
      isremoteparksupported_ = from.isremoteparksupported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      isbasicgarageparksupported_ = from.isbasicgarageparksupported_;
    }
    if (cached_has_bits & 0x00000200u) {
      isussupported_ = from.isussupported_;
    }
    if (cached_has_bits & 0x00000400u) {
      ispdwfrontonlysupported_ = from.ispdwfrontonlysupported_;
    }
    if (cached_has_bits & 0x00000800u) {
      ispdwrearonlysupported_ = from.ispdwrearonlysupported_;
    }
    if (cached_has_bits & 0x00001000u) {
      ispdw360supported_ = from.ispdw360supported_;
    }
    if (cached_has_bits & 0x00002000u) {
      issteeringprotectsupported_ = from.issteeringprotectsupported_;
    }
    if (cached_has_bits & 0x00004000u) {
      iswhlprotectsupported_ = from.iswhlprotectsupported_;
    }
    if (cached_has_bits & 0x00008000u) {
      issemiauparksupported_ = from.issemiauparksupported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      isfullauparksupported_ = from.isfullauparksupported_;
    }
    if (cached_has_bits & 0x00020000u) {
      timestamp_us_u64_ = from.timestamp_us_u64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EcuCodingPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EcuCodingPort::CopyFrom(const EcuCodingPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuCodingPort::IsInitialized() const {
  return true;
}

void EcuCodingPort::InternalSwap(EcuCodingPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(usdegradationmode_e_, other->usdegradationmode_e_);
  swap(isbrakingfrontonlysupported_, other->isbrakingfrontonlysupported_);
  swap(isbrakingrearonlysupported_, other->isbrakingrearonlysupported_);
  swap(isbraking360supported_, other->isbraking360supported_);
  swap(issteeringsuggestsupported_, other->issteeringsuggestsupported_);
  swap(numofussensors_, other->numofussensors_);
  swap(codingstate_e_, other->codingstate_e_);
  swap(isremoteparksupported_, other->isremoteparksupported_);
  swap(isbasicgarageparksupported_, other->isbasicgarageparksupported_);
  swap(isussupported_, other->isussupported_);
  swap(ispdwfrontonlysupported_, other->ispdwfrontonlysupported_);
  swap(ispdwrearonlysupported_, other->ispdwrearonlysupported_);
  swap(ispdw360supported_, other->ispdw360supported_);
  swap(issteeringprotectsupported_, other->issteeringprotectsupported_);
  swap(iswhlprotectsupported_, other->iswhlprotectsupported_);
  swap(issemiauparksupported_, other->issemiauparksupported_);
  swap(isfullauparksupported_, other->isfullauparksupported_);
  swap(timestamp_us_u64_, other->timestamp_us_u64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EcuCodingPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EcuCodingPort_array_port::InitAsDefaultInstance() {
}
class EcuCodingPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<EcuCodingPort_array_port>()._has_bits_);
};

EcuCodingPort_array_port::EcuCodingPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
}
EcuCodingPort_array_port::EcuCodingPort_array_port(const EcuCodingPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
}

void EcuCodingPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EcuCodingPort_array_port_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.base);
}

EcuCodingPort_array_port::~EcuCodingPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  SharedDtor();
}

void EcuCodingPort_array_port::SharedDtor() {
}

void EcuCodingPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EcuCodingPort_array_port& EcuCodingPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EcuCodingPort_array_port_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.base);
  return *internal_default_instance();
}


void EcuCodingPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EcuCodingPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.cfg_mgr.ecu_coding_port.EcuCodingPort data = 1714;
      case 1714:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13714>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EcuCodingPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.cfg_mgr.ecu_coding_port.EcuCodingPort data = 1714;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1714, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  return target;
}

size_t EcuCodingPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.cfg_mgr.ecu_coding_port.EcuCodingPort data = 1714;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EcuCodingPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const EcuCodingPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EcuCodingPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
    MergeFrom(*source);
  }
}

void EcuCodingPort_array_port::MergeFrom(const EcuCodingPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void EcuCodingPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EcuCodingPort_array_port::CopyFrom(const EcuCodingPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcuCodingPort_array_port::IsInitialized() const {
  return true;
}

void EcuCodingPort_array_port::InternalSwap(EcuCodingPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EcuCodingPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ecu_coding_port
}  // namespace cfg_mgr
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* Arena::CreateMaybeMessage< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port* Arena::CreateMaybeMessage< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
