// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_em/us_em_dec_data.proto

#include "us_em/us_em_dec_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fem_2fus_5fem_5fdec_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsEmDecData_us_5fem_2fus_5fem_5fdec_5fdata_2eproto;
namespace pb {
namespace us_em {
namespace us_em_dec_data {
class UsEmDecDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsEmDecData> _instance;
} _UsEmDecData_default_instance_;
class UsEmDecData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsEmDecData_array_port> _instance;
} _UsEmDecData_array_port_default_instance_;
}  // namespace us_em_dec_data
}  // namespace us_em
}  // namespace pb
static void InitDefaultsscc_info_UsEmDecData_us_5fem_2fus_5fem_5fdec_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_em::us_em_dec_data::_UsEmDecData_default_instance_;
    new (ptr) ::pb::us_em::us_em_dec_data::UsEmDecData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_em::us_em_dec_data::UsEmDecData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsEmDecData_us_5fem_2fus_5fem_5fdec_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsEmDecData_us_5fem_2fus_5fem_5fdec_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_UsEmDecData_array_port_us_5fem_2fus_5fem_5fdec_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_em::us_em_dec_data::_UsEmDecData_array_port_default_instance_;
    new (ptr) ::pb::us_em::us_em_dec_data::UsEmDecData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_em::us_em_dec_data::UsEmDecData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsEmDecData_array_port_us_5fem_2fus_5fem_5fdec_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsEmDecData_array_port_us_5fem_2fus_5fem_5fdec_5fdata_2eproto}, {
      &scc_info_UsEmDecData_us_5fem_2fus_5fem_5fdec_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fem_2fus_5fem_5fdec_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fem_2fus_5fem_5fdec_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fem_2fus_5fem_5fdec_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fem_2fus_5fem_5fdec_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData, objdecfactors_),
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData, alphaproj_),
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData, sensorid_),
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData, visibility_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_em::us_em_dec_data::UsEmDecData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::pb::us_em::us_em_dec_data::UsEmDecData)},
  { 13, 19, sizeof(::pb::us_em::us_em_dec_data::UsEmDecData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_em::us_em_dec_data::_UsEmDecData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_em::us_em_dec_data::_UsEmDecData_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fem_2fus_5fem_5fdec_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032us_em/us_em_dec_data.proto\022\027pb.us_em.u"
  "s_em_dec_data\"a\n\013UsEmDecData\022\026\n\robjDecFa"
  "ctors\030\353\t \001(\002\022\022\n\talphaProj\030\225\007 \001(\002\022\021\n\010sens"
  "orId\030\371\013 \001(\r\022\023\n\nvisibility\030\277\026 \001(\r\"M\n\026UsEm"
  "DecData_array_port\0223\n\004data\030\264\016 \003(\0132$.pb.u"
  "s_em.us_em_dec_data.UsEmDecData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_sccs[2] = {
  &scc_info_UsEmDecData_us_5fem_2fus_5fem_5fdec_5fdata_2eproto.base,
  &scc_info_UsEmDecData_array_port_us_5fem_2fus_5fem_5fdec_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_once;
static bool descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto = {
  &descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_initialized, descriptor_table_protodef_us_5fem_2fus_5fem_5fdec_5fdata_2eproto, "us_em/us_em_dec_data.proto", 231,
  &descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_once, descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_sccs, descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fem_2fus_5fem_5fdec_5fdata_2eproto::offsets,
  file_level_metadata_us_5fem_2fus_5fem_5fdec_5fdata_2eproto, 2, file_level_enum_descriptors_us_5fem_2fus_5fem_5fdec_5fdata_2eproto, file_level_service_descriptors_us_5fem_2fus_5fem_5fdec_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fem_2fus_5fem_5fdec_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fem_2fus_5fem_5fdec_5fdata_2eproto), true);
namespace pb {
namespace us_em {
namespace us_em_dec_data {

// ===================================================================

void UsEmDecData::InitAsDefaultInstance() {
}
class UsEmDecData::_Internal {
 public:
  using HasBits = decltype(std::declval<UsEmDecData>()._has_bits_);
  static void set_has_objdecfactors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alphaproj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensorid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UsEmDecData::UsEmDecData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_em.us_em_dec_data.UsEmDecData)
}
UsEmDecData::UsEmDecData(const UsEmDecData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alphaproj_, &from.alphaproj_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&alphaproj_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:pb.us_em.us_em_dec_data.UsEmDecData)
}

void UsEmDecData::SharedCtor() {
  ::memset(&alphaproj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&alphaproj_)) + sizeof(visibility_));
}

UsEmDecData::~UsEmDecData() {
  // @@protoc_insertion_point(destructor:pb.us_em.us_em_dec_data.UsEmDecData)
  SharedDtor();
}

void UsEmDecData::SharedDtor() {
}

void UsEmDecData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsEmDecData& UsEmDecData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsEmDecData_us_5fem_2fus_5fem_5fdec_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UsEmDecData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_em.us_em_dec_data.UsEmDecData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&alphaproj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&alphaproj_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsEmDecData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float alphaProj = 917;
      case 917:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_alphaproj(&has_bits);
          alphaproj_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float objDecFactors = 1259;
      case 1259:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_objdecfactors(&has_bits);
          objdecfactors_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 sensorId = 1529;
      case 1529:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_sensorid(&has_bits);
          sensorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 visibility = 2879;
      case 2879:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsEmDecData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_em.us_em_dec_data.UsEmDecData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alphaProj = 917;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(917, this->_internal_alphaproj(), target);
  }

  // optional float objDecFactors = 1259;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1259, this->_internal_objdecfactors(), target);
  }

  // optional uint32 sensorId = 1529;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1529, this->_internal_sensorid(), target);
  }

  // optional uint32 visibility = 2879;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2879, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_em.us_em_dec_data.UsEmDecData)
  return target;
}

size_t UsEmDecData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_em.us_em_dec_data.UsEmDecData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float alphaProj = 917;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float objDecFactors = 1259;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 sensorId = 1529;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sensorid());
    }

    // optional uint32 visibility = 2879;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_visibility());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsEmDecData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_em.us_em_dec_data.UsEmDecData)
  GOOGLE_DCHECK_NE(&from, this);
  const UsEmDecData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsEmDecData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_em.us_em_dec_data.UsEmDecData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_em.us_em_dec_data.UsEmDecData)
    MergeFrom(*source);
  }
}

void UsEmDecData::MergeFrom(const UsEmDecData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_em.us_em_dec_data.UsEmDecData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      alphaproj_ = from.alphaproj_;
    }
    if (cached_has_bits & 0x00000002u) {
      objdecfactors_ = from.objdecfactors_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensorid_ = from.sensorid_;
    }
    if (cached_has_bits & 0x00000008u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsEmDecData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_em.us_em_dec_data.UsEmDecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsEmDecData::CopyFrom(const UsEmDecData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_em.us_em_dec_data.UsEmDecData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsEmDecData::IsInitialized() const {
  return true;
}

void UsEmDecData::InternalSwap(UsEmDecData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(alphaproj_, other->alphaproj_);
  swap(objdecfactors_, other->objdecfactors_);
  swap(sensorid_, other->sensorid_);
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsEmDecData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsEmDecData_array_port::InitAsDefaultInstance() {
}
class UsEmDecData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsEmDecData_array_port>()._has_bits_);
};

UsEmDecData_array_port::UsEmDecData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
}
UsEmDecData_array_port::UsEmDecData_array_port(const UsEmDecData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
}

void UsEmDecData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsEmDecData_array_port_us_5fem_2fus_5fem_5fdec_5fdata_2eproto.base);
}

UsEmDecData_array_port::~UsEmDecData_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  SharedDtor();
}

void UsEmDecData_array_port::SharedDtor() {
}

void UsEmDecData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsEmDecData_array_port& UsEmDecData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsEmDecData_array_port_us_5fem_2fus_5fem_5fdec_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UsEmDecData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsEmDecData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_em.us_em_dec_data.UsEmDecData data = 1844;
      case 1844:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<14754>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsEmDecData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_em.us_em_dec_data.UsEmDecData data = 1844;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1844, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  return target;
}

size_t UsEmDecData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_em.us_em_dec_data.UsEmDecData data = 1844;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsEmDecData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsEmDecData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsEmDecData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
    MergeFrom(*source);
  }
}

void UsEmDecData_array_port::MergeFrom(const UsEmDecData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsEmDecData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsEmDecData_array_port::CopyFrom(const UsEmDecData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_em.us_em_dec_data.UsEmDecData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsEmDecData_array_port::IsInitialized() const {
  return true;
}

void UsEmDecData_array_port::InternalSwap(UsEmDecData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsEmDecData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_em_dec_data
}  // namespace us_em
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_em::us_em_dec_data::UsEmDecData* Arena::CreateMaybeMessage< ::pb::us_em::us_em_dec_data::UsEmDecData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_em::us_em_dec_data::UsEmDecData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_em::us_em_dec_data::UsEmDecData_array_port* Arena::CreateMaybeMessage< ::pb::us_em::us_em_dec_data::UsEmDecData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_em::us_em_dec_data::UsEmDecData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
