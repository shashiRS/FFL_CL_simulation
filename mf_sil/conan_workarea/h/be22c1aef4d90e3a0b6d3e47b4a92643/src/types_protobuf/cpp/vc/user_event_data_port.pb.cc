// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vc/user_event_data_port.proto

#include "vc/user_event_data_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vc_2fuser_5fevent_5fdata_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto;
namespace pb {
namespace vc {
namespace user_event_data_port {
class UserEventDataPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventDataPort> _instance;
} _UserEventDataPort_default_instance_;
class UserEventDataPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserEventDataPort_array_port> _instance;
} _UserEventDataPort_array_port_default_instance_;
}  // namespace user_event_data_port
}  // namespace vc
}  // namespace pb
static void InitDefaultsscc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::vc::user_event_data_port::_UserEventDataPort_default_instance_;
    new (ptr) ::pb::vc::user_event_data_port::UserEventDataPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::vc::user_event_data_port::UserEventDataPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_UserEventDataPort_array_port_vc_2fuser_5fevent_5fdata_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::vc::user_event_data_port::_UserEventDataPort_array_port_default_instance_;
    new (ptr) ::pb::vc::user_event_data_port::UserEventDataPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::vc::user_event_data_port::UserEventDataPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserEventDataPort_array_port_vc_2fuser_5fevent_5fdata_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserEventDataPort_array_port_vc_2fuser_5fevent_5fdata_5fport_2eproto}, {
      &scc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vc_2fuser_5fevent_5fdata_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vc_2fuser_5fevent_5fdata_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vc_2fuser_5fevent_5fdata_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vc_2fuser_5fevent_5fdata_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, deltapolarangle_u16_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, deltaazimuthangle_u16_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, gesturefinger_nu_u8_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, gesturecounter_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, deltazoom_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, issequence_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, clickeventx_px_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort, clickeventy_px_),
  4,
  0,
  7,
  5,
  6,
  8,
  1,
  9,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::vc::user_event_data_port::UserEventDataPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::vc::user_event_data_port::UserEventDataPort)},
  { 25, 31, sizeof(::pb::vc::user_event_data_port::UserEventDataPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::vc::user_event_data_port::_UserEventDataPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::vc::user_event_data_port::_UserEventDataPort_array_port_default_instance_),
};

const char descriptor_table_protodef_vc_2fuser_5fevent_5fdata_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035vc/user_event_data_port.proto\022\032pb.vc.u"
  "ser_event_data_port\032\027eco/signal_header.p"
  "roto\"\266\002\n\021UserEventDataPort\022\030\n\017uiVersionN"
  "umber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.e"
  "co.signal_header.SignalHeader\022\034\n\023deltaPo"
  "larAngle_u16\030\322\027 \001(\r\022\036\n\025deltaAzimuthAngle"
  "_u16\030\243\022 \001(\r\022\034\n\023GestureFinger_nu_u8\030\312\022 \001("
  "\r\022\027\n\016gestureCounter\030\257\032 \001(\r\022\022\n\tdeltaZoom\030"
  "\202\037 \001(\r\022\023\n\nisSequence\030\373\034 \001(\010\022\027\n\016clickEven"
  "tX_px\030\355\001 \001(\002\022\027\n\016clickEventY_px\030\331\014 \001(\002\"\\\n"
  "\034UserEventDataPort_array_port\022<\n\004data\030\343\030"
  " \003(\0132-.pb.vc.user_event_data_port.UserEv"
  "entDataPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_sccs[2] = {
  &scc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto.base,
  &scc_info_UserEventDataPort_array_port_vc_2fuser_5fevent_5fdata_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_once;
static bool descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto = {
  &descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_initialized, descriptor_table_protodef_vc_2fuser_5fevent_5fdata_5fport_2eproto, "vc/user_event_data_port.proto", 491,
  &descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_once, descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_sccs, descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_vc_2fuser_5fevent_5fdata_5fport_2eproto::offsets,
  file_level_metadata_vc_2fuser_5fevent_5fdata_5fport_2eproto, 2, file_level_enum_descriptors_vc_2fuser_5fevent_5fdata_5fport_2eproto, file_level_service_descriptors_vc_2fuser_5fevent_5fdata_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vc_2fuser_5fevent_5fdata_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vc_2fuser_5fevent_5fdata_5fport_2eproto), true);
namespace pb {
namespace vc {
namespace user_event_data_port {

// ===================================================================

void UserEventDataPort::InitAsDefaultInstance() {
  ::pb::vc::user_event_data_port::_UserEventDataPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class UserEventDataPort::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventDataPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const UserEventDataPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deltapolarangle_u16(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_deltaazimuthangle_u16(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gesturefinger_nu_u8(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gesturecounter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deltazoom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_issequence(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_clickeventx_px(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clickeventy_px(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
UserEventDataPort::_Internal::ssigheader(const UserEventDataPort* msg) {
  return *msg->ssigheader_;
}
void UserEventDataPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UserEventDataPort::UserEventDataPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.vc.user_event_data_port.UserEventDataPort)
}
UserEventDataPort::UserEventDataPort(const UserEventDataPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&deltazoom_, &from.deltazoom_,
    static_cast<size_t>(reinterpret_cast<char*>(&issequence_) -
    reinterpret_cast<char*>(&deltazoom_)) + sizeof(issequence_));
  // @@protoc_insertion_point(copy_constructor:pb.vc.user_event_data_port.UserEventDataPort)
}

void UserEventDataPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issequence_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(issequence_));
}

UserEventDataPort::~UserEventDataPort() {
  // @@protoc_insertion_point(destructor:pb.vc.user_event_data_port.UserEventDataPort)
  SharedDtor();
}

void UserEventDataPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void UserEventDataPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventDataPort& UserEventDataPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventDataPort_vc_2fuser_5fevent_5fdata_5fport_2eproto.base);
  return *internal_default_instance();
}


void UserEventDataPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.vc.user_event_data_port.UserEventDataPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&deltazoom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deltapolarangle_u16_) -
        reinterpret_cast<char*>(&deltazoom_)) + sizeof(deltapolarangle_u16_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&gesturecounter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issequence_) -
        reinterpret_cast<char*>(&gesturecounter_)) + sizeof(issequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserEventDataPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float clickEventX_px = 237;
      case 237:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_clickeventx_px(&has_bits);
          clickeventx_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float clickEventY_px = 1625;
      case 1625:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_clickeventy_px(&has_bits);
          clickeventy_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deltaAzimuthAngle_u16 = 2339;
      case 2339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deltaazimuthangle_u16(&has_bits);
          deltaazimuthangle_u16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 GestureFinger_nu_u8 = 2378;
      case 2378:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gesturefinger_nu_u8(&has_bits);
          gesturefinger_nu_u8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deltaPolarAngle_u16 = 3026;
      case 3026:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_deltapolarangle_u16(&has_bits);
          deltapolarangle_u16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gestureCounter = 3375;
      case 3375:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_gesturecounter(&has_bits);
          gesturecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSequence = 3707;
      case 3707:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_issequence(&has_bits);
          issequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deltaZoom = 3970;
      case 3970:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deltazoom(&has_bits);
          deltazoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserEventDataPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.vc.user_event_data_port.UserEventDataPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float clickEventX_px = 237;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(237, this->_internal_clickeventx_px(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float clickEventY_px = 1625;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1625, this->_internal_clickeventy_px(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional uint32 deltaAzimuthAngle_u16 = 2339;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2339, this->_internal_deltaazimuthangle_u16(), target);
  }

  // optional uint32 GestureFinger_nu_u8 = 2378;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2378, this->_internal_gesturefinger_nu_u8(), target);
  }

  // optional uint32 deltaPolarAngle_u16 = 3026;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3026, this->_internal_deltapolarangle_u16(), target);
  }

  // optional uint32 gestureCounter = 3375;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3375, this->_internal_gesturecounter(), target);
  }

  // optional bool isSequence = 3707;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3707, this->_internal_issequence(), target);
  }

  // optional uint32 deltaZoom = 3970;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3970, this->_internal_deltazoom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.vc.user_event_data_port.UserEventDataPort)
  return target;
}

size_t UserEventDataPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.vc.user_event_data_port.UserEventDataPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional uint32 deltaZoom = 3970;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deltazoom());
    }

    // optional float clickEventX_px = 237;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float clickEventY_px = 1625;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 deltaAzimuthAngle_u16 = 2339;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deltaazimuthangle_u16());
    }

    // optional uint32 GestureFinger_nu_u8 = 2378;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gesturefinger_nu_u8());
    }

    // optional uint32 deltaPolarAngle_u16 = 3026;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deltapolarangle_u16());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 gestureCounter = 3375;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gesturecounter());
    }

    // optional bool isSequence = 3707;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventDataPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.vc.user_event_data_port.UserEventDataPort)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEventDataPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserEventDataPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.vc.user_event_data_port.UserEventDataPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.vc.user_event_data_port.UserEventDataPort)
    MergeFrom(*source);
  }
}

void UserEventDataPort::MergeFrom(const UserEventDataPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.vc.user_event_data_port.UserEventDataPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      deltazoom_ = from.deltazoom_;
    }
    if (cached_has_bits & 0x00000004u) {
      clickeventx_px_ = from.clickeventx_px_;
    }
    if (cached_has_bits & 0x00000008u) {
      clickeventy_px_ = from.clickeventy_px_;
    }
    if (cached_has_bits & 0x00000010u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000020u) {
      deltaazimuthangle_u16_ = from.deltaazimuthangle_u16_;
    }
    if (cached_has_bits & 0x00000040u) {
      gesturefinger_nu_u8_ = from.gesturefinger_nu_u8_;
    }
    if (cached_has_bits & 0x00000080u) {
      deltapolarangle_u16_ = from.deltapolarangle_u16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      gesturecounter_ = from.gesturecounter_;
    }
    if (cached_has_bits & 0x00000200u) {
      issequence_ = from.issequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserEventDataPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.vc.user_event_data_port.UserEventDataPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEventDataPort::CopyFrom(const UserEventDataPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.vc.user_event_data_port.UserEventDataPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventDataPort::IsInitialized() const {
  return true;
}

void UserEventDataPort::InternalSwap(UserEventDataPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(deltazoom_, other->deltazoom_);
  swap(clickeventx_px_, other->clickeventx_px_);
  swap(clickeventy_px_, other->clickeventy_px_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(deltaazimuthangle_u16_, other->deltaazimuthangle_u16_);
  swap(gesturefinger_nu_u8_, other->gesturefinger_nu_u8_);
  swap(deltapolarangle_u16_, other->deltapolarangle_u16_);
  swap(gesturecounter_, other->gesturecounter_);
  swap(issequence_, other->issequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserEventDataPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserEventDataPort_array_port::InitAsDefaultInstance() {
}
class UserEventDataPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UserEventDataPort_array_port>()._has_bits_);
};

UserEventDataPort_array_port::UserEventDataPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.vc.user_event_data_port.UserEventDataPort_array_port)
}
UserEventDataPort_array_port::UserEventDataPort_array_port(const UserEventDataPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.vc.user_event_data_port.UserEventDataPort_array_port)
}

void UserEventDataPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserEventDataPort_array_port_vc_2fuser_5fevent_5fdata_5fport_2eproto.base);
}

UserEventDataPort_array_port::~UserEventDataPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  SharedDtor();
}

void UserEventDataPort_array_port::SharedDtor() {
}

void UserEventDataPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserEventDataPort_array_port& UserEventDataPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserEventDataPort_array_port_vc_2fuser_5fevent_5fdata_5fport_2eproto.base);
  return *internal_default_instance();
}


void UserEventDataPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserEventDataPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.vc.user_event_data_port.UserEventDataPort data = 3171;
      case 3171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserEventDataPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.vc.user_event_data_port.UserEventDataPort data = 3171;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3171, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  return target;
}

size_t UserEventDataPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.vc.user_event_data_port.UserEventDataPort data = 3171;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserEventDataPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UserEventDataPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserEventDataPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.vc.user_event_data_port.UserEventDataPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.vc.user_event_data_port.UserEventDataPort_array_port)
    MergeFrom(*source);
  }
}

void UserEventDataPort_array_port::MergeFrom(const UserEventDataPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UserEventDataPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEventDataPort_array_port::CopyFrom(const UserEventDataPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.vc.user_event_data_port.UserEventDataPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventDataPort_array_port::IsInitialized() const {
  return true;
}

void UserEventDataPort_array_port::InternalSwap(UserEventDataPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserEventDataPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace user_event_data_port
}  // namespace vc
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::vc::user_event_data_port::UserEventDataPort* Arena::CreateMaybeMessage< ::pb::vc::user_event_data_port::UserEventDataPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::vc::user_event_data_port::UserEventDataPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::vc::user_event_data_port::UserEventDataPort_array_port* Arena::CreateMaybeMessage< ::pb::vc::user_event_data_port::UserEventDataPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::vc::user_event_data_port::UserEventDataPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
