// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_commonvehsigprovider/veh_dynamics_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto;
namespace pb {
namespace ap_commonvehsigprovider {
namespace veh_dynamics_port {
class VehDynamicsPort;
class VehDynamicsPortDefaultTypeInternal;
extern VehDynamicsPortDefaultTypeInternal _VehDynamicsPort_default_instance_;
class VehDynamicsPort_array_port;
class VehDynamicsPort_array_portDefaultTypeInternal;
extern VehDynamicsPort_array_portDefaultTypeInternal _VehDynamicsPort_array_port_default_instance_;
}  // namespace veh_dynamics_port
}  // namespace ap_commonvehsigprovider
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* Arena::CreateMaybeMessage<::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort>(Arena*);
template<> ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port* Arena::CreateMaybeMessage<::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_commonvehsigprovider {
namespace veh_dynamics_port {

// ===================================================================

class VehDynamicsPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort) */ {
 public:
  VehDynamicsPort();
  virtual ~VehDynamicsPort();

  VehDynamicsPort(const VehDynamicsPort& from);
  VehDynamicsPort(VehDynamicsPort&& from) noexcept
    : VehDynamicsPort() {
    *this = ::std::move(from);
  }

  inline VehDynamicsPort& operator=(const VehDynamicsPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehDynamicsPort& operator=(VehDynamicsPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehDynamicsPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehDynamicsPort* internal_default_instance() {
    return reinterpret_cast<const VehDynamicsPort*>(
               &_VehDynamicsPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehDynamicsPort& a, VehDynamicsPort& b) {
    a.Swap(&b);
  }
  inline void Swap(VehDynamicsPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehDynamicsPort* New() const final {
    return CreateMaybeMessage<VehDynamicsPort>(nullptr);
  }

  VehDynamicsPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehDynamicsPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehDynamicsPort& from);
  void MergeFrom(const VehDynamicsPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehDynamicsPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto);
    return ::descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kVerticalAccelerationMps2FieldNumber = 3944,
    kPitchRateRadpsFieldNumber = 110,
    kLongitudinalAccelerationOffsetMps2FieldNumber = 262,
    kYawRateRadpsFieldNumber = 349,
    kVerticalAccelerationOffsetMps2FieldNumber = 499,
    kYawRateQFNuFieldNumber = 378,
    kPitchRateQFNuFieldNumber = 2458,
    kRollRateQFNuFieldNumber = 652,
    kLateralAccelerationQFNuFieldNumber = 2635,
    kLateralAccelerationMps2FieldNumber = 1730,
    kRollRateRadpsFieldNumber = 1892,
    kLongitudinalAccelerationQFNuFieldNumber = 3388,
    kVerticalAccelerationQFNuFieldNumber = 557,
    kUiVersionNumberFieldNumber = 2124,
    kLateralAccelerationOffsetMps2FieldNumber = 2647,
    kRollRateOffsetRadpsFieldNumber = 2978,
    kYawRateOffsetRadpsFieldNumber = 3529,
    kLongitudinalAccelerationMps2FieldNumber = 3584,
    kPitchRateOffsetRadpsFieldNumber = 3701,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float verticalAcceleration_mps2 = 3944;
  bool has_verticalacceleration_mps2() const;
  private:
  bool _internal_has_verticalacceleration_mps2() const;
  public:
  void clear_verticalacceleration_mps2();
  float verticalacceleration_mps2() const;
  void set_verticalacceleration_mps2(float value);
  private:
  float _internal_verticalacceleration_mps2() const;
  void _internal_set_verticalacceleration_mps2(float value);
  public:

  // optional float pitchRate_radps = 110;
  bool has_pitchrate_radps() const;
  private:
  bool _internal_has_pitchrate_radps() const;
  public:
  void clear_pitchrate_radps();
  float pitchrate_radps() const;
  void set_pitchrate_radps(float value);
  private:
  float _internal_pitchrate_radps() const;
  void _internal_set_pitchrate_radps(float value);
  public:

  // optional float longitudinalAccelerationOffset_mps2 = 262;
  bool has_longitudinalaccelerationoffset_mps2() const;
  private:
  bool _internal_has_longitudinalaccelerationoffset_mps2() const;
  public:
  void clear_longitudinalaccelerationoffset_mps2();
  float longitudinalaccelerationoffset_mps2() const;
  void set_longitudinalaccelerationoffset_mps2(float value);
  private:
  float _internal_longitudinalaccelerationoffset_mps2() const;
  void _internal_set_longitudinalaccelerationoffset_mps2(float value);
  public:

  // optional float yawRate_radps = 349;
  bool has_yawrate_radps() const;
  private:
  bool _internal_has_yawrate_radps() const;
  public:
  void clear_yawrate_radps();
  float yawrate_radps() const;
  void set_yawrate_radps(float value);
  private:
  float _internal_yawrate_radps() const;
  void _internal_set_yawrate_radps(float value);
  public:

  // optional float verticalAccelerationOffset_mps2 = 499;
  bool has_verticalaccelerationoffset_mps2() const;
  private:
  bool _internal_has_verticalaccelerationoffset_mps2() const;
  public:
  void clear_verticalaccelerationoffset_mps2();
  float verticalaccelerationoffset_mps2() const;
  void set_verticalaccelerationoffset_mps2(float value);
  private:
  float _internal_verticalaccelerationoffset_mps2() const;
  void _internal_set_verticalaccelerationoffset_mps2(float value);
  public:

  // optional bool yawRate_QF_nu = 378;
  bool has_yawrate_qf_nu() const;
  private:
  bool _internal_has_yawrate_qf_nu() const;
  public:
  void clear_yawrate_qf_nu();
  bool yawrate_qf_nu() const;
  void set_yawrate_qf_nu(bool value);
  private:
  bool _internal_yawrate_qf_nu() const;
  void _internal_set_yawrate_qf_nu(bool value);
  public:

  // optional bool pitchRate_QF_nu = 2458;
  bool has_pitchrate_qf_nu() const;
  private:
  bool _internal_has_pitchrate_qf_nu() const;
  public:
  void clear_pitchrate_qf_nu();
  bool pitchrate_qf_nu() const;
  void set_pitchrate_qf_nu(bool value);
  private:
  bool _internal_pitchrate_qf_nu() const;
  void _internal_set_pitchrate_qf_nu(bool value);
  public:

  // optional bool rollRate_QF_nu = 652;
  bool has_rollrate_qf_nu() const;
  private:
  bool _internal_has_rollrate_qf_nu() const;
  public:
  void clear_rollrate_qf_nu();
  bool rollrate_qf_nu() const;
  void set_rollrate_qf_nu(bool value);
  private:
  bool _internal_rollrate_qf_nu() const;
  void _internal_set_rollrate_qf_nu(bool value);
  public:

  // optional bool lateralAcceleration_QF_nu = 2635;
  bool has_lateralacceleration_qf_nu() const;
  private:
  bool _internal_has_lateralacceleration_qf_nu() const;
  public:
  void clear_lateralacceleration_qf_nu();
  bool lateralacceleration_qf_nu() const;
  void set_lateralacceleration_qf_nu(bool value);
  private:
  bool _internal_lateralacceleration_qf_nu() const;
  void _internal_set_lateralacceleration_qf_nu(bool value);
  public:

  // optional float lateralAcceleration_mps2 = 1730;
  bool has_lateralacceleration_mps2() const;
  private:
  bool _internal_has_lateralacceleration_mps2() const;
  public:
  void clear_lateralacceleration_mps2();
  float lateralacceleration_mps2() const;
  void set_lateralacceleration_mps2(float value);
  private:
  float _internal_lateralacceleration_mps2() const;
  void _internal_set_lateralacceleration_mps2(float value);
  public:

  // optional float rollRate_radps = 1892;
  bool has_rollrate_radps() const;
  private:
  bool _internal_has_rollrate_radps() const;
  public:
  void clear_rollrate_radps();
  float rollrate_radps() const;
  void set_rollrate_radps(float value);
  private:
  float _internal_rollrate_radps() const;
  void _internal_set_rollrate_radps(float value);
  public:

  // optional bool longitudinalAcceleration_QF_nu = 3388;
  bool has_longitudinalacceleration_qf_nu() const;
  private:
  bool _internal_has_longitudinalacceleration_qf_nu() const;
  public:
  void clear_longitudinalacceleration_qf_nu();
  bool longitudinalacceleration_qf_nu() const;
  void set_longitudinalacceleration_qf_nu(bool value);
  private:
  bool _internal_longitudinalacceleration_qf_nu() const;
  void _internal_set_longitudinalacceleration_qf_nu(bool value);
  public:

  // optional bool verticalAcceleration_QF_nu = 557;
  bool has_verticalacceleration_qf_nu() const;
  private:
  bool _internal_has_verticalacceleration_qf_nu() const;
  public:
  void clear_verticalacceleration_qf_nu();
  bool verticalacceleration_qf_nu() const;
  void set_verticalacceleration_qf_nu(bool value);
  private:
  bool _internal_verticalacceleration_qf_nu() const;
  void _internal_set_verticalacceleration_qf_nu(bool value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float lateralAccelerationOffset_mps2 = 2647;
  bool has_lateralaccelerationoffset_mps2() const;
  private:
  bool _internal_has_lateralaccelerationoffset_mps2() const;
  public:
  void clear_lateralaccelerationoffset_mps2();
  float lateralaccelerationoffset_mps2() const;
  void set_lateralaccelerationoffset_mps2(float value);
  private:
  float _internal_lateralaccelerationoffset_mps2() const;
  void _internal_set_lateralaccelerationoffset_mps2(float value);
  public:

  // optional float rollRateOffset_radps = 2978;
  bool has_rollrateoffset_radps() const;
  private:
  bool _internal_has_rollrateoffset_radps() const;
  public:
  void clear_rollrateoffset_radps();
  float rollrateoffset_radps() const;
  void set_rollrateoffset_radps(float value);
  private:
  float _internal_rollrateoffset_radps() const;
  void _internal_set_rollrateoffset_radps(float value);
  public:

  // optional float yawRateOffset_radps = 3529;
  bool has_yawrateoffset_radps() const;
  private:
  bool _internal_has_yawrateoffset_radps() const;
  public:
  void clear_yawrateoffset_radps();
  float yawrateoffset_radps() const;
  void set_yawrateoffset_radps(float value);
  private:
  float _internal_yawrateoffset_radps() const;
  void _internal_set_yawrateoffset_radps(float value);
  public:

  // optional float longitudinalAcceleration_mps2 = 3584;
  bool has_longitudinalacceleration_mps2() const;
  private:
  bool _internal_has_longitudinalacceleration_mps2() const;
  public:
  void clear_longitudinalacceleration_mps2();
  float longitudinalacceleration_mps2() const;
  void set_longitudinalacceleration_mps2(float value);
  private:
  float _internal_longitudinalacceleration_mps2() const;
  void _internal_set_longitudinalacceleration_mps2(float value);
  public:

  // optional float pitchRateOffset_radps = 3701;
  bool has_pitchrateoffset_radps() const;
  private:
  bool _internal_has_pitchrateoffset_radps() const;
  public:
  void clear_pitchrateoffset_radps();
  float pitchrateoffset_radps() const;
  void set_pitchrateoffset_radps(float value);
  private:
  float _internal_pitchrateoffset_radps() const;
  void _internal_set_pitchrateoffset_radps(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float verticalacceleration_mps2_;
  float pitchrate_radps_;
  float longitudinalaccelerationoffset_mps2_;
  float yawrate_radps_;
  float verticalaccelerationoffset_mps2_;
  bool yawrate_qf_nu_;
  bool pitchrate_qf_nu_;
  bool rollrate_qf_nu_;
  bool lateralacceleration_qf_nu_;
  float lateralacceleration_mps2_;
  float rollrate_radps_;
  bool longitudinalacceleration_qf_nu_;
  bool verticalacceleration_qf_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float lateralaccelerationoffset_mps2_;
  float rollrateoffset_radps_;
  float yawrateoffset_radps_;
  float longitudinalacceleration_mps2_;
  float pitchrateoffset_radps_;
  friend struct ::TableStruct_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto;
};
// -------------------------------------------------------------------

class VehDynamicsPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port) */ {
 public:
  VehDynamicsPort_array_port();
  virtual ~VehDynamicsPort_array_port();

  VehDynamicsPort_array_port(const VehDynamicsPort_array_port& from);
  VehDynamicsPort_array_port(VehDynamicsPort_array_port&& from) noexcept
    : VehDynamicsPort_array_port() {
    *this = ::std::move(from);
  }

  inline VehDynamicsPort_array_port& operator=(const VehDynamicsPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehDynamicsPort_array_port& operator=(VehDynamicsPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehDynamicsPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehDynamicsPort_array_port* internal_default_instance() {
    return reinterpret_cast<const VehDynamicsPort_array_port*>(
               &_VehDynamicsPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehDynamicsPort_array_port& a, VehDynamicsPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(VehDynamicsPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehDynamicsPort_array_port* New() const final {
    return CreateMaybeMessage<VehDynamicsPort_array_port>(nullptr);
  }

  VehDynamicsPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehDynamicsPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehDynamicsPort_array_port& from);
  void MergeFrom(const VehDynamicsPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehDynamicsPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto);
    return ::descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 658,
  };
  // repeated .pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort data = 658;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort >*
      mutable_data();
  private:
  const ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort& _internal_data(int index) const;
  ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* _internal_add_data();
  public:
  const ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort& data(int index) const;
  ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort > data_;
  friend struct ::TableStruct_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehDynamicsPort

// optional uint32 uiVersionNumber = 2124;
inline bool VehDynamicsPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void VehDynamicsPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehDynamicsPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VehDynamicsPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void VehDynamicsPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  uiversionnumber_ = value;
}
inline void VehDynamicsPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool VehDynamicsPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool VehDynamicsPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& VehDynamicsPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& VehDynamicsPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* VehDynamicsPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* VehDynamicsPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* VehDynamicsPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void VehDynamicsPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.sSigHeader)
}

// optional float yawRate_radps = 349;
inline bool VehDynamicsPort::_internal_has_yawrate_radps() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_yawrate_radps() const {
  return _internal_has_yawrate_radps();
}
inline void VehDynamicsPort::clear_yawrate_radps() {
  yawrate_radps_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float VehDynamicsPort::_internal_yawrate_radps() const {
  return yawrate_radps_;
}
inline float VehDynamicsPort::yawrate_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.yawRate_radps)
  return _internal_yawrate_radps();
}
inline void VehDynamicsPort::_internal_set_yawrate_radps(float value) {
  _has_bits_[0] |= 0x00000010u;
  yawrate_radps_ = value;
}
inline void VehDynamicsPort::set_yawrate_radps(float value) {
  _internal_set_yawrate_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.yawRate_radps)
}

// optional float yawRateOffset_radps = 3529;
inline bool VehDynamicsPort::_internal_has_yawrateoffset_radps() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_yawrateoffset_radps() const {
  return _internal_has_yawrateoffset_radps();
}
inline void VehDynamicsPort::clear_yawrateoffset_radps() {
  yawrateoffset_radps_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float VehDynamicsPort::_internal_yawrateoffset_radps() const {
  return yawrateoffset_radps_;
}
inline float VehDynamicsPort::yawrateoffset_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.yawRateOffset_radps)
  return _internal_yawrateoffset_radps();
}
inline void VehDynamicsPort::_internal_set_yawrateoffset_radps(float value) {
  _has_bits_[0] |= 0x00020000u;
  yawrateoffset_radps_ = value;
}
inline void VehDynamicsPort::set_yawrateoffset_radps(float value) {
  _internal_set_yawrateoffset_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.yawRateOffset_radps)
}

// optional float pitchRate_radps = 110;
inline bool VehDynamicsPort::_internal_has_pitchrate_radps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_pitchrate_radps() const {
  return _internal_has_pitchrate_radps();
}
inline void VehDynamicsPort::clear_pitchrate_radps() {
  pitchrate_radps_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float VehDynamicsPort::_internal_pitchrate_radps() const {
  return pitchrate_radps_;
}
inline float VehDynamicsPort::pitchrate_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.pitchRate_radps)
  return _internal_pitchrate_radps();
}
inline void VehDynamicsPort::_internal_set_pitchrate_radps(float value) {
  _has_bits_[0] |= 0x00000004u;
  pitchrate_radps_ = value;
}
inline void VehDynamicsPort::set_pitchrate_radps(float value) {
  _internal_set_pitchrate_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.pitchRate_radps)
}

// optional float pitchRateOffset_radps = 3701;
inline bool VehDynamicsPort::_internal_has_pitchrateoffset_radps() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_pitchrateoffset_radps() const {
  return _internal_has_pitchrateoffset_radps();
}
inline void VehDynamicsPort::clear_pitchrateoffset_radps() {
  pitchrateoffset_radps_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float VehDynamicsPort::_internal_pitchrateoffset_radps() const {
  return pitchrateoffset_radps_;
}
inline float VehDynamicsPort::pitchrateoffset_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.pitchRateOffset_radps)
  return _internal_pitchrateoffset_radps();
}
inline void VehDynamicsPort::_internal_set_pitchrateoffset_radps(float value) {
  _has_bits_[0] |= 0x00080000u;
  pitchrateoffset_radps_ = value;
}
inline void VehDynamicsPort::set_pitchrateoffset_radps(float value) {
  _internal_set_pitchrateoffset_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.pitchRateOffset_radps)
}

// optional float rollRate_radps = 1892;
inline bool VehDynamicsPort::_internal_has_rollrate_radps() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_rollrate_radps() const {
  return _internal_has_rollrate_radps();
}
inline void VehDynamicsPort::clear_rollrate_radps() {
  rollrate_radps_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float VehDynamicsPort::_internal_rollrate_radps() const {
  return rollrate_radps_;
}
inline float VehDynamicsPort::rollrate_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.rollRate_radps)
  return _internal_rollrate_radps();
}
inline void VehDynamicsPort::_internal_set_rollrate_radps(float value) {
  _has_bits_[0] |= 0x00000800u;
  rollrate_radps_ = value;
}
inline void VehDynamicsPort::set_rollrate_radps(float value) {
  _internal_set_rollrate_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.rollRate_radps)
}

// optional float rollRateOffset_radps = 2978;
inline bool VehDynamicsPort::_internal_has_rollrateoffset_radps() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_rollrateoffset_radps() const {
  return _internal_has_rollrateoffset_radps();
}
inline void VehDynamicsPort::clear_rollrateoffset_radps() {
  rollrateoffset_radps_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float VehDynamicsPort::_internal_rollrateoffset_radps() const {
  return rollrateoffset_radps_;
}
inline float VehDynamicsPort::rollrateoffset_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.rollRateOffset_radps)
  return _internal_rollrateoffset_radps();
}
inline void VehDynamicsPort::_internal_set_rollrateoffset_radps(float value) {
  _has_bits_[0] |= 0x00010000u;
  rollrateoffset_radps_ = value;
}
inline void VehDynamicsPort::set_rollrateoffset_radps(float value) {
  _internal_set_rollrateoffset_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.rollRateOffset_radps)
}

// optional float lateralAcceleration_mps2 = 1730;
inline bool VehDynamicsPort::_internal_has_lateralacceleration_mps2() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_lateralacceleration_mps2() const {
  return _internal_has_lateralacceleration_mps2();
}
inline void VehDynamicsPort::clear_lateralacceleration_mps2() {
  lateralacceleration_mps2_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float VehDynamicsPort::_internal_lateralacceleration_mps2() const {
  return lateralacceleration_mps2_;
}
inline float VehDynamicsPort::lateralacceleration_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.lateralAcceleration_mps2)
  return _internal_lateralacceleration_mps2();
}
inline void VehDynamicsPort::_internal_set_lateralacceleration_mps2(float value) {
  _has_bits_[0] |= 0x00000400u;
  lateralacceleration_mps2_ = value;
}
inline void VehDynamicsPort::set_lateralacceleration_mps2(float value) {
  _internal_set_lateralacceleration_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.lateralAcceleration_mps2)
}

// optional float lateralAccelerationOffset_mps2 = 2647;
inline bool VehDynamicsPort::_internal_has_lateralaccelerationoffset_mps2() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_lateralaccelerationoffset_mps2() const {
  return _internal_has_lateralaccelerationoffset_mps2();
}
inline void VehDynamicsPort::clear_lateralaccelerationoffset_mps2() {
  lateralaccelerationoffset_mps2_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float VehDynamicsPort::_internal_lateralaccelerationoffset_mps2() const {
  return lateralaccelerationoffset_mps2_;
}
inline float VehDynamicsPort::lateralaccelerationoffset_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.lateralAccelerationOffset_mps2)
  return _internal_lateralaccelerationoffset_mps2();
}
inline void VehDynamicsPort::_internal_set_lateralaccelerationoffset_mps2(float value) {
  _has_bits_[0] |= 0x00008000u;
  lateralaccelerationoffset_mps2_ = value;
}
inline void VehDynamicsPort::set_lateralaccelerationoffset_mps2(float value) {
  _internal_set_lateralaccelerationoffset_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.lateralAccelerationOffset_mps2)
}

// optional float longitudinalAcceleration_mps2 = 3584;
inline bool VehDynamicsPort::_internal_has_longitudinalacceleration_mps2() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_longitudinalacceleration_mps2() const {
  return _internal_has_longitudinalacceleration_mps2();
}
inline void VehDynamicsPort::clear_longitudinalacceleration_mps2() {
  longitudinalacceleration_mps2_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float VehDynamicsPort::_internal_longitudinalacceleration_mps2() const {
  return longitudinalacceleration_mps2_;
}
inline float VehDynamicsPort::longitudinalacceleration_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.longitudinalAcceleration_mps2)
  return _internal_longitudinalacceleration_mps2();
}
inline void VehDynamicsPort::_internal_set_longitudinalacceleration_mps2(float value) {
  _has_bits_[0] |= 0x00040000u;
  longitudinalacceleration_mps2_ = value;
}
inline void VehDynamicsPort::set_longitudinalacceleration_mps2(float value) {
  _internal_set_longitudinalacceleration_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.longitudinalAcceleration_mps2)
}

// optional float longitudinalAccelerationOffset_mps2 = 262;
inline bool VehDynamicsPort::_internal_has_longitudinalaccelerationoffset_mps2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_longitudinalaccelerationoffset_mps2() const {
  return _internal_has_longitudinalaccelerationoffset_mps2();
}
inline void VehDynamicsPort::clear_longitudinalaccelerationoffset_mps2() {
  longitudinalaccelerationoffset_mps2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float VehDynamicsPort::_internal_longitudinalaccelerationoffset_mps2() const {
  return longitudinalaccelerationoffset_mps2_;
}
inline float VehDynamicsPort::longitudinalaccelerationoffset_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.longitudinalAccelerationOffset_mps2)
  return _internal_longitudinalaccelerationoffset_mps2();
}
inline void VehDynamicsPort::_internal_set_longitudinalaccelerationoffset_mps2(float value) {
  _has_bits_[0] |= 0x00000008u;
  longitudinalaccelerationoffset_mps2_ = value;
}
inline void VehDynamicsPort::set_longitudinalaccelerationoffset_mps2(float value) {
  _internal_set_longitudinalaccelerationoffset_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.longitudinalAccelerationOffset_mps2)
}

// optional float verticalAcceleration_mps2 = 3944;
inline bool VehDynamicsPort::_internal_has_verticalacceleration_mps2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_verticalacceleration_mps2() const {
  return _internal_has_verticalacceleration_mps2();
}
inline void VehDynamicsPort::clear_verticalacceleration_mps2() {
  verticalacceleration_mps2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float VehDynamicsPort::_internal_verticalacceleration_mps2() const {
  return verticalacceleration_mps2_;
}
inline float VehDynamicsPort::verticalacceleration_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.verticalAcceleration_mps2)
  return _internal_verticalacceleration_mps2();
}
inline void VehDynamicsPort::_internal_set_verticalacceleration_mps2(float value) {
  _has_bits_[0] |= 0x00000002u;
  verticalacceleration_mps2_ = value;
}
inline void VehDynamicsPort::set_verticalacceleration_mps2(float value) {
  _internal_set_verticalacceleration_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.verticalAcceleration_mps2)
}

// optional float verticalAccelerationOffset_mps2 = 499;
inline bool VehDynamicsPort::_internal_has_verticalaccelerationoffset_mps2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_verticalaccelerationoffset_mps2() const {
  return _internal_has_verticalaccelerationoffset_mps2();
}
inline void VehDynamicsPort::clear_verticalaccelerationoffset_mps2() {
  verticalaccelerationoffset_mps2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float VehDynamicsPort::_internal_verticalaccelerationoffset_mps2() const {
  return verticalaccelerationoffset_mps2_;
}
inline float VehDynamicsPort::verticalaccelerationoffset_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.verticalAccelerationOffset_mps2)
  return _internal_verticalaccelerationoffset_mps2();
}
inline void VehDynamicsPort::_internal_set_verticalaccelerationoffset_mps2(float value) {
  _has_bits_[0] |= 0x00000020u;
  verticalaccelerationoffset_mps2_ = value;
}
inline void VehDynamicsPort::set_verticalaccelerationoffset_mps2(float value) {
  _internal_set_verticalaccelerationoffset_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.verticalAccelerationOffset_mps2)
}

// optional bool yawRate_QF_nu = 378;
inline bool VehDynamicsPort::_internal_has_yawrate_qf_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_yawrate_qf_nu() const {
  return _internal_has_yawrate_qf_nu();
}
inline void VehDynamicsPort::clear_yawrate_qf_nu() {
  yawrate_qf_nu_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool VehDynamicsPort::_internal_yawrate_qf_nu() const {
  return yawrate_qf_nu_;
}
inline bool VehDynamicsPort::yawrate_qf_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.yawRate_QF_nu)
  return _internal_yawrate_qf_nu();
}
inline void VehDynamicsPort::_internal_set_yawrate_qf_nu(bool value) {
  _has_bits_[0] |= 0x00000040u;
  yawrate_qf_nu_ = value;
}
inline void VehDynamicsPort::set_yawrate_qf_nu(bool value) {
  _internal_set_yawrate_qf_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.yawRate_QF_nu)
}

// optional bool pitchRate_QF_nu = 2458;
inline bool VehDynamicsPort::_internal_has_pitchrate_qf_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_pitchrate_qf_nu() const {
  return _internal_has_pitchrate_qf_nu();
}
inline void VehDynamicsPort::clear_pitchrate_qf_nu() {
  pitchrate_qf_nu_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool VehDynamicsPort::_internal_pitchrate_qf_nu() const {
  return pitchrate_qf_nu_;
}
inline bool VehDynamicsPort::pitchrate_qf_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.pitchRate_QF_nu)
  return _internal_pitchrate_qf_nu();
}
inline void VehDynamicsPort::_internal_set_pitchrate_qf_nu(bool value) {
  _has_bits_[0] |= 0x00000080u;
  pitchrate_qf_nu_ = value;
}
inline void VehDynamicsPort::set_pitchrate_qf_nu(bool value) {
  _internal_set_pitchrate_qf_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.pitchRate_QF_nu)
}

// optional bool rollRate_QF_nu = 652;
inline bool VehDynamicsPort::_internal_has_rollrate_qf_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_rollrate_qf_nu() const {
  return _internal_has_rollrate_qf_nu();
}
inline void VehDynamicsPort::clear_rollrate_qf_nu() {
  rollrate_qf_nu_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool VehDynamicsPort::_internal_rollrate_qf_nu() const {
  return rollrate_qf_nu_;
}
inline bool VehDynamicsPort::rollrate_qf_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.rollRate_QF_nu)
  return _internal_rollrate_qf_nu();
}
inline void VehDynamicsPort::_internal_set_rollrate_qf_nu(bool value) {
  _has_bits_[0] |= 0x00000100u;
  rollrate_qf_nu_ = value;
}
inline void VehDynamicsPort::set_rollrate_qf_nu(bool value) {
  _internal_set_rollrate_qf_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.rollRate_QF_nu)
}

// optional bool lateralAcceleration_QF_nu = 2635;
inline bool VehDynamicsPort::_internal_has_lateralacceleration_qf_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_lateralacceleration_qf_nu() const {
  return _internal_has_lateralacceleration_qf_nu();
}
inline void VehDynamicsPort::clear_lateralacceleration_qf_nu() {
  lateralacceleration_qf_nu_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool VehDynamicsPort::_internal_lateralacceleration_qf_nu() const {
  return lateralacceleration_qf_nu_;
}
inline bool VehDynamicsPort::lateralacceleration_qf_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.lateralAcceleration_QF_nu)
  return _internal_lateralacceleration_qf_nu();
}
inline void VehDynamicsPort::_internal_set_lateralacceleration_qf_nu(bool value) {
  _has_bits_[0] |= 0x00000200u;
  lateralacceleration_qf_nu_ = value;
}
inline void VehDynamicsPort::set_lateralacceleration_qf_nu(bool value) {
  _internal_set_lateralacceleration_qf_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.lateralAcceleration_QF_nu)
}

// optional bool longitudinalAcceleration_QF_nu = 3388;
inline bool VehDynamicsPort::_internal_has_longitudinalacceleration_qf_nu() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_longitudinalacceleration_qf_nu() const {
  return _internal_has_longitudinalacceleration_qf_nu();
}
inline void VehDynamicsPort::clear_longitudinalacceleration_qf_nu() {
  longitudinalacceleration_qf_nu_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool VehDynamicsPort::_internal_longitudinalacceleration_qf_nu() const {
  return longitudinalacceleration_qf_nu_;
}
inline bool VehDynamicsPort::longitudinalacceleration_qf_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.longitudinalAcceleration_QF_nu)
  return _internal_longitudinalacceleration_qf_nu();
}
inline void VehDynamicsPort::_internal_set_longitudinalacceleration_qf_nu(bool value) {
  _has_bits_[0] |= 0x00001000u;
  longitudinalacceleration_qf_nu_ = value;
}
inline void VehDynamicsPort::set_longitudinalacceleration_qf_nu(bool value) {
  _internal_set_longitudinalacceleration_qf_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.longitudinalAcceleration_QF_nu)
}

// optional bool verticalAcceleration_QF_nu = 557;
inline bool VehDynamicsPort::_internal_has_verticalacceleration_qf_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VehDynamicsPort::has_verticalacceleration_qf_nu() const {
  return _internal_has_verticalacceleration_qf_nu();
}
inline void VehDynamicsPort::clear_verticalacceleration_qf_nu() {
  verticalacceleration_qf_nu_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool VehDynamicsPort::_internal_verticalacceleration_qf_nu() const {
  return verticalacceleration_qf_nu_;
}
inline bool VehDynamicsPort::verticalacceleration_qf_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.verticalAcceleration_QF_nu)
  return _internal_verticalacceleration_qf_nu();
}
inline void VehDynamicsPort::_internal_set_verticalacceleration_qf_nu(bool value) {
  _has_bits_[0] |= 0x00002000u;
  verticalacceleration_qf_nu_ = value;
}
inline void VehDynamicsPort::set_verticalacceleration_qf_nu(bool value) {
  _internal_set_verticalacceleration_qf_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort.verticalAcceleration_QF_nu)
}

// -------------------------------------------------------------------

// VehDynamicsPort_array_port

// repeated .pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort data = 658;
inline int VehDynamicsPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int VehDynamicsPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void VehDynamicsPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* VehDynamicsPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort >*
VehDynamicsPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port.data)
  return &data_;
}
inline const ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort& VehDynamicsPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort& VehDynamicsPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* VehDynamicsPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* VehDynamicsPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort >&
VehDynamicsPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace veh_dynamics_port
}  // namespace ap_commonvehsigprovider
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto
