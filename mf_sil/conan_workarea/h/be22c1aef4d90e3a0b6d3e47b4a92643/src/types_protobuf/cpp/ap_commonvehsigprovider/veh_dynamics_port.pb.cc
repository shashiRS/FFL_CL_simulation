// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_commonvehsigprovider/veh_dynamics_port.proto

#include "ap_commonvehsigprovider/veh_dynamics_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_commonvehsigprovider {
namespace veh_dynamics_port {
class VehDynamicsPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehDynamicsPort> _instance;
} _VehDynamicsPort_default_instance_;
class VehDynamicsPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehDynamicsPort_array_port> _instance;
} _VehDynamicsPort_array_port_default_instance_;
}  // namespace veh_dynamics_port
}  // namespace ap_commonvehsigprovider
}  // namespace pb
static void InitDefaultsscc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_commonvehsigprovider::veh_dynamics_port::_VehDynamicsPort_default_instance_;
    new (ptr) ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_VehDynamicsPort_array_port_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_commonvehsigprovider::veh_dynamics_port::_VehDynamicsPort_array_port_default_instance_;
    new (ptr) ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehDynamicsPort_array_port_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehDynamicsPort_array_port_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto}, {
      &scc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, yawrate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, yawrateoffset_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, pitchrate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, pitchrateoffset_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, rollrate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, rollrateoffset_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, lateralacceleration_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, lateralaccelerationoffset_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, longitudinalacceleration_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, longitudinalaccelerationoffset_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, verticalacceleration_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, verticalaccelerationoffset_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, yawrate_qf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, pitchrate_qf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, rollrate_qf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, lateralacceleration_qf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, longitudinalacceleration_qf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort, verticalacceleration_qf_nu_),
  14,
  0,
  4,
  17,
  2,
  19,
  11,
  16,
  10,
  15,
  18,
  3,
  1,
  5,
  6,
  7,
  8,
  9,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort)},
  { 45, 51, sizeof(::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_commonvehsigprovider::veh_dynamics_port::_VehDynamicsPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_commonvehsigprovider::veh_dynamics_port::_VehDynamicsPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/ap_commonvehsigprovider/veh_dynamics_p"
  "ort.proto\022,pb.ap_commonvehsigprovider.ve"
  "h_dynamics_port\032\027eco/signal_header.proto"
  "\"\270\005\n\017VehDynamicsPort\022\030\n\017uiVersionNumber\030"
  "\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.eco.sig"
  "nal_header.SignalHeader\022\026\n\ryawRate_radps"
  "\030\335\002 \001(\002\022\034\n\023yawRateOffset_radps\030\311\033 \001(\002\022\027\n"
  "\017pitchRate_radps\030n \001(\002\022\036\n\025pitchRateOffse"
  "t_radps\030\365\034 \001(\002\022\027\n\016rollRate_radps\030\344\016 \001(\002\022"
  "\035\n\024rollRateOffset_radps\030\242\027 \001(\002\022!\n\030latera"
  "lAcceleration_mps2\030\302\r \001(\002\022\'\n\036lateralAcce"
  "lerationOffset_mps2\030\327\024 \001(\002\022&\n\035longitudin"
  "alAcceleration_mps2\030\200\034 \001(\002\022,\n#longitudin"
  "alAccelerationOffset_mps2\030\206\002 \001(\002\022\"\n\031vert"
  "icalAcceleration_mps2\030\350\036 \001(\002\022(\n\037vertical"
  "AccelerationOffset_mps2\030\363\003 \001(\002\022\026\n\ryawRat"
  "e_QF_nu\030\372\002 \001(\010\022\030\n\017pitchRate_QF_nu\030\232\023 \001(\010"
  "\022\027\n\016rollRate_QF_nu\030\214\005 \001(\010\022\"\n\031lateralAcce"
  "leration_QF_nu\030\313\024 \001(\010\022\'\n\036longitudinalAcc"
  "eleration_QF_nu\030\274\032 \001(\010\022#\n\032verticalAccele"
  "ration_QF_nu\030\255\004 \001(\010\"j\n\032VehDynamicsPort_a"
  "rray_port\022L\n\004data\030\222\005 \003(\0132=.pb.ap_commonv"
  "ehsigprovider.veh_dynamics_port.VehDynam"
  "icsPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_sccs[2] = {
  &scc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.base,
  &scc_info_VehDynamicsPort_array_port_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_once;
static bool descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto = {
  &descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_initialized, descriptor_table_protodef_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto, "ap_commonvehsigprovider/veh_dynamics_port.proto", 927,
  &descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_once, descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_sccs, descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto::offsets,
  file_level_metadata_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto, 2, file_level_enum_descriptors_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto, file_level_service_descriptors_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto), true);
namespace pb {
namespace ap_commonvehsigprovider {
namespace veh_dynamics_port {

// ===================================================================

void VehDynamicsPort::InitAsDefaultInstance() {
  ::pb::ap_commonvehsigprovider::veh_dynamics_port::_VehDynamicsPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class VehDynamicsPort::_Internal {
 public:
  using HasBits = decltype(std::declval<VehDynamicsPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const VehDynamicsPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yawrate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_yawrateoffset_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_pitchrate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pitchrateoffset_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_rollrate_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rollrateoffset_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lateralacceleration_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lateralaccelerationoffset_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_longitudinalacceleration_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_longitudinalaccelerationoffset_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_verticalacceleration_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verticalaccelerationoffset_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_yawrate_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pitchrate_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rollrate_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lateralacceleration_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_longitudinalacceleration_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_verticalacceleration_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
VehDynamicsPort::_Internal::ssigheader(const VehDynamicsPort* msg) {
  return *msg->ssigheader_;
}
void VehDynamicsPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VehDynamicsPort::VehDynamicsPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
}
VehDynamicsPort::VehDynamicsPort(const VehDynamicsPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&verticalacceleration_mps2_, &from.verticalacceleration_mps2_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitchrateoffset_radps_) -
    reinterpret_cast<char*>(&verticalacceleration_mps2_)) + sizeof(pitchrateoffset_radps_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
}

void VehDynamicsPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitchrateoffset_radps_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(pitchrateoffset_radps_));
}

VehDynamicsPort::~VehDynamicsPort() {
  // @@protoc_insertion_point(destructor:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  SharedDtor();
}

void VehDynamicsPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void VehDynamicsPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehDynamicsPort& VehDynamicsPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehDynamicsPort_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.base);
  return *internal_default_instance();
}


void VehDynamicsPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&verticalacceleration_mps2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitchrate_qf_nu_) -
        reinterpret_cast<char*>(&verticalacceleration_mps2_)) + sizeof(pitchrate_qf_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&rollrate_qf_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lateralaccelerationoffset_mps2_) -
        reinterpret_cast<char*>(&rollrate_qf_nu_)) + sizeof(lateralaccelerationoffset_mps2_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&rollrateoffset_radps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitchrateoffset_radps_) -
        reinterpret_cast<char*>(&rollrateoffset_radps_)) + sizeof(pitchrateoffset_radps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehDynamicsPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float pitchRate_radps = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_pitchrate_radps(&has_bits);
          pitchrate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitudinalAccelerationOffset_mps2 = 262;
      case 262:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_longitudinalaccelerationoffset_mps2(&has_bits);
          longitudinalaccelerationoffset_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawRate_radps = 349;
      case 349:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_yawrate_radps(&has_bits);
          yawrate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool yawRate_QF_nu = 378;
      case 378:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_yawrate_qf_nu(&has_bits);
          yawrate_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float verticalAccelerationOffset_mps2 = 499;
      case 499:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_verticalaccelerationoffset_mps2(&has_bits);
          verticalaccelerationoffset_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool verticalAcceleration_QF_nu = 557;
      case 557:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_verticalacceleration_qf_nu(&has_bits);
          verticalacceleration_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rollRate_QF_nu = 652;
      case 652:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_rollrate_qf_nu(&has_bits);
          rollrate_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lateralAcceleration_mps2 = 1730;
      case 1730:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lateralacceleration_mps2(&has_bits);
          lateralacceleration_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rollRate_radps = 1892;
      case 1892:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_rollrate_radps(&has_bits);
          rollrate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pitchRate_QF_nu = 2458;
      case 2458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_pitchrate_qf_nu(&has_bits);
          pitchrate_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lateralAcceleration_QF_nu = 2635;
      case 2635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lateralacceleration_qf_nu(&has_bits);
          lateralacceleration_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lateralAccelerationOffset_mps2 = 2647;
      case 2647:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_lateralaccelerationoffset_mps2(&has_bits);
          lateralaccelerationoffset_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rollRateOffset_radps = 2978;
      case 2978:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_rollrateoffset_radps(&has_bits);
          rollrateoffset_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool longitudinalAcceleration_QF_nu = 3388;
      case 3388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_longitudinalacceleration_qf_nu(&has_bits);
          longitudinalacceleration_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float yawRateOffset_radps = 3529;
      case 3529:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_yawrateoffset_radps(&has_bits);
          yawrateoffset_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitudinalAcceleration_mps2 = 3584;
      case 3584:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_longitudinalacceleration_mps2(&has_bits);
          longitudinalacceleration_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitchRateOffset_radps = 3701;
      case 3701:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_pitchrateoffset_radps(&has_bits);
          pitchrateoffset_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float verticalAcceleration_mps2 = 3944;
      case 3944:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_verticalacceleration_mps2(&has_bits);
          verticalacceleration_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehDynamicsPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pitchRate_radps = 110;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(110, this->_internal_pitchrate_radps(), target);
  }

  // optional float longitudinalAccelerationOffset_mps2 = 262;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(262, this->_internal_longitudinalaccelerationoffset_mps2(), target);
  }

  // optional float yawRate_radps = 349;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(349, this->_internal_yawrate_radps(), target);
  }

  // optional bool yawRate_QF_nu = 378;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(378, this->_internal_yawrate_qf_nu(), target);
  }

  // optional float verticalAccelerationOffset_mps2 = 499;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(499, this->_internal_verticalaccelerationoffset_mps2(), target);
  }

  // optional bool verticalAcceleration_QF_nu = 557;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(557, this->_internal_verticalacceleration_qf_nu(), target);
  }

  // optional bool rollRate_QF_nu = 652;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(652, this->_internal_rollrate_qf_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float lateralAcceleration_mps2 = 1730;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1730, this->_internal_lateralacceleration_mps2(), target);
  }

  // optional float rollRate_radps = 1892;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1892, this->_internal_rollrate_radps(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool pitchRate_QF_nu = 2458;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2458, this->_internal_pitchrate_qf_nu(), target);
  }

  // optional bool lateralAcceleration_QF_nu = 2635;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2635, this->_internal_lateralacceleration_qf_nu(), target);
  }

  // optional float lateralAccelerationOffset_mps2 = 2647;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2647, this->_internal_lateralaccelerationoffset_mps2(), target);
  }

  // optional float rollRateOffset_radps = 2978;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2978, this->_internal_rollrateoffset_radps(), target);
  }

  // optional bool longitudinalAcceleration_QF_nu = 3388;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3388, this->_internal_longitudinalacceleration_qf_nu(), target);
  }

  // optional float yawRateOffset_radps = 3529;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3529, this->_internal_yawrateoffset_radps(), target);
  }

  // optional float longitudinalAcceleration_mps2 = 3584;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3584, this->_internal_longitudinalacceleration_mps2(), target);
  }

  // optional float pitchRateOffset_radps = 3701;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3701, this->_internal_pitchrateoffset_radps(), target);
  }

  // optional float verticalAcceleration_mps2 = 3944;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3944, this->_internal_verticalacceleration_mps2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  return target;
}

size_t VehDynamicsPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float verticalAcceleration_mps2 = 3944;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float pitchRate_radps = 110;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float longitudinalAccelerationOffset_mps2 = 262;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float yawRate_radps = 349;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float verticalAccelerationOffset_mps2 = 499;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional bool yawRate_QF_nu = 378;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool pitchRate_QF_nu = 2458;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool rollRate_QF_nu = 652;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool lateralAcceleration_QF_nu = 2635;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional float lateralAcceleration_mps2 = 1730;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float rollRate_radps = 1892;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional bool longitudinalAcceleration_QF_nu = 3388;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool verticalAcceleration_QF_nu = 557;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float lateralAccelerationOffset_mps2 = 2647;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float rollRateOffset_radps = 2978;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float yawRateOffset_radps = 3529;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float longitudinalAcceleration_mps2 = 3584;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float pitchRateOffset_radps = 3701;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehDynamicsPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  GOOGLE_DCHECK_NE(&from, this);
  const VehDynamicsPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehDynamicsPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
    MergeFrom(*source);
  }
}

void VehDynamicsPort::MergeFrom(const VehDynamicsPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      verticalacceleration_mps2_ = from.verticalacceleration_mps2_;
    }
    if (cached_has_bits & 0x00000004u) {
      pitchrate_radps_ = from.pitchrate_radps_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitudinalaccelerationoffset_mps2_ = from.longitudinalaccelerationoffset_mps2_;
    }
    if (cached_has_bits & 0x00000010u) {
      yawrate_radps_ = from.yawrate_radps_;
    }
    if (cached_has_bits & 0x00000020u) {
      verticalaccelerationoffset_mps2_ = from.verticalaccelerationoffset_mps2_;
    }
    if (cached_has_bits & 0x00000040u) {
      yawrate_qf_nu_ = from.yawrate_qf_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      pitchrate_qf_nu_ = from.pitchrate_qf_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      rollrate_qf_nu_ = from.rollrate_qf_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateralacceleration_qf_nu_ = from.lateralacceleration_qf_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      lateralacceleration_mps2_ = from.lateralacceleration_mps2_;
    }
    if (cached_has_bits & 0x00000800u) {
      rollrate_radps_ = from.rollrate_radps_;
    }
    if (cached_has_bits & 0x00001000u) {
      longitudinalacceleration_qf_nu_ = from.longitudinalacceleration_qf_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      verticalacceleration_qf_nu_ = from.verticalacceleration_qf_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00008000u) {
      lateralaccelerationoffset_mps2_ = from.lateralaccelerationoffset_mps2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      rollrateoffset_radps_ = from.rollrateoffset_radps_;
    }
    if (cached_has_bits & 0x00020000u) {
      yawrateoffset_radps_ = from.yawrateoffset_radps_;
    }
    if (cached_has_bits & 0x00040000u) {
      longitudinalacceleration_mps2_ = from.longitudinalacceleration_mps2_;
    }
    if (cached_has_bits & 0x00080000u) {
      pitchrateoffset_radps_ = from.pitchrateoffset_radps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehDynamicsPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehDynamicsPort::CopyFrom(const VehDynamicsPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehDynamicsPort::IsInitialized() const {
  return true;
}

void VehDynamicsPort::InternalSwap(VehDynamicsPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(verticalacceleration_mps2_, other->verticalacceleration_mps2_);
  swap(pitchrate_radps_, other->pitchrate_radps_);
  swap(longitudinalaccelerationoffset_mps2_, other->longitudinalaccelerationoffset_mps2_);
  swap(yawrate_radps_, other->yawrate_radps_);
  swap(verticalaccelerationoffset_mps2_, other->verticalaccelerationoffset_mps2_);
  swap(yawrate_qf_nu_, other->yawrate_qf_nu_);
  swap(pitchrate_qf_nu_, other->pitchrate_qf_nu_);
  swap(rollrate_qf_nu_, other->rollrate_qf_nu_);
  swap(lateralacceleration_qf_nu_, other->lateralacceleration_qf_nu_);
  swap(lateralacceleration_mps2_, other->lateralacceleration_mps2_);
  swap(rollrate_radps_, other->rollrate_radps_);
  swap(longitudinalacceleration_qf_nu_, other->longitudinalacceleration_qf_nu_);
  swap(verticalacceleration_qf_nu_, other->verticalacceleration_qf_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(lateralaccelerationoffset_mps2_, other->lateralaccelerationoffset_mps2_);
  swap(rollrateoffset_radps_, other->rollrateoffset_radps_);
  swap(yawrateoffset_radps_, other->yawrateoffset_radps_);
  swap(longitudinalacceleration_mps2_, other->longitudinalacceleration_mps2_);
  swap(pitchrateoffset_radps_, other->pitchrateoffset_radps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehDynamicsPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehDynamicsPort_array_port::InitAsDefaultInstance() {
}
class VehDynamicsPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<VehDynamicsPort_array_port>()._has_bits_);
};

VehDynamicsPort_array_port::VehDynamicsPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
}
VehDynamicsPort_array_port::VehDynamicsPort_array_port(const VehDynamicsPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
}

void VehDynamicsPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehDynamicsPort_array_port_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.base);
}

VehDynamicsPort_array_port::~VehDynamicsPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  SharedDtor();
}

void VehDynamicsPort_array_port::SharedDtor() {
}

void VehDynamicsPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehDynamicsPort_array_port& VehDynamicsPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehDynamicsPort_array_port_ap_5fcommonvehsigprovider_2fveh_5fdynamics_5fport_2eproto.base);
  return *internal_default_instance();
}


void VehDynamicsPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehDynamicsPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort data = 658;
      case 658:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<5266>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehDynamicsPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort data = 658;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(658, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  return target;
}

size_t VehDynamicsPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort data = 658;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehDynamicsPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const VehDynamicsPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehDynamicsPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
    MergeFrom(*source);
  }
}

void VehDynamicsPort_array_port::MergeFrom(const VehDynamicsPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void VehDynamicsPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehDynamicsPort_array_port::CopyFrom(const VehDynamicsPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_commonvehsigprovider.veh_dynamics_port.VehDynamicsPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehDynamicsPort_array_port::IsInitialized() const {
  return true;
}

void VehDynamicsPort_array_port::InternalSwap(VehDynamicsPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehDynamicsPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace veh_dynamics_port
}  // namespace ap_commonvehsigprovider
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort* Arena::CreateMaybeMessage< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_commonvehsigprovider::veh_dynamics_port::VehDynamicsPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
