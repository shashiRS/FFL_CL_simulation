// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_commonvehsigprovider/engine_ctrl_status_port.proto

#include "ap_commonvehsigprovider/engine_ctrl_status_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_commonvehsigprovider {
namespace engine_ctrl_status_port {
class EngineCtrlStatusPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EngineCtrlStatusPort> _instance;
} _EngineCtrlStatusPort_default_instance_;
class EngineCtrlStatusPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EngineCtrlStatusPort_array_port> _instance;
} _EngineCtrlStatusPort_array_port_default_instance_;
}  // namespace engine_ctrl_status_port
}  // namespace ap_commonvehsigprovider
}  // namespace pb
static void InitDefaultsscc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_commonvehsigprovider::engine_ctrl_status_port::_EngineCtrlStatusPort_default_instance_;
    new (ptr) ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_EngineCtrlStatusPort_array_port_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_commonvehsigprovider::engine_ctrl_status_port::_EngineCtrlStatusPort_array_port_default_instance_;
    new (ptr) ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EngineCtrlStatusPort_array_port_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EngineCtrlStatusPort_array_port_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto}, {
      &scc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, throttlepos_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, throttlegradient_percps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, axletorque_nm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, engineon_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, startstopstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, remotestartpossible_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, throttlepos_qf_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort, throttlegradient_qf_nu_),
  9,
  0,
  8,
  1,
  7,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort)},
  { 25, 31, sizeof(::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_commonvehsigprovider::engine_ctrl_status_port::_EngineCtrlStatusPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_commonvehsigprovider::engine_ctrl_status_port::_EngineCtrlStatusPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5ap_commonvehsigprovider/engine_ctrl_st"
  "atus_port.proto\0222pb.ap_commonvehsigprovi"
  "der.engine_ctrl_status_port\032\027eco/signal_"
  "header.proto\032/ap_commonvehsigprovider/st"
  "art_stop_status.proto\"\216\003\n\024EngineCtrlStat"
  "usPort\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSig"
  "Header\030\211\010 \001(\0132\".pb.eco.signal_header.Sig"
  "nalHeader\022\031\n\020throttlePos_perc\030\354\013 \001(\002\022 \n\027"
  "throttleGradient_percps\030\333\002 \001(\002\022\026\n\raxleTo"
  "rque_nm\030\245\013 \001(\002\022\024\n\013engineOn_nu\030\232\004 \001(\010\022Z\n\022"
  "startStopStatus_nu\030\234\005 \001(\0162=.pb.ap_common"
  "vehsigprovider.start_stop_status.StartSt"
  "opStatus\022\037\n\026remoteStartPossible_nu\030\220\004 \001("
  "\010\022\032\n\021throttlePos_QF_nu\030\371\034 \001(\010\022\037\n\026throttl"
  "eGradient_QF_nu\030\300\004 \001(\010\"z\n\037EngineCtrlStat"
  "usPort_array_port\022W\n\004data\030\202\n \003(\0132H.pb.ap"
  "_commonvehsigprovider.engine_ctrl_status"
  "_port.EngineCtrlStatusPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_deps[2] = {
  &::descriptor_table_ap_5fcommonvehsigprovider_2fstart_5fstop_5fstatus_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_sccs[2] = {
  &scc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto.base,
  &scc_info_EngineCtrlStatusPort_array_port_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_once;
static bool descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto = {
  &descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_initialized, descriptor_table_protodef_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto, "ap_commonvehsigprovider/engine_ctrl_status_port.proto", 706,
  &descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_once, descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_sccs, descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto::offsets,
  file_level_metadata_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto, 2, file_level_enum_descriptors_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto, file_level_service_descriptors_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto), true);
namespace pb {
namespace ap_commonvehsigprovider {
namespace engine_ctrl_status_port {

// ===================================================================

void EngineCtrlStatusPort::InitAsDefaultInstance() {
  ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::_EngineCtrlStatusPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class EngineCtrlStatusPort::_Internal {
 public:
  using HasBits = decltype(std::declval<EngineCtrlStatusPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const EngineCtrlStatusPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttlepos_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_throttlegradient_percps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axletorque_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_engineon_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_startstopstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remotestartpossible_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_throttlepos_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_throttlegradient_qf_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
EngineCtrlStatusPort::_Internal::ssigheader(const EngineCtrlStatusPort* msg) {
  return *msg->ssigheader_;
}
void EngineCtrlStatusPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EngineCtrlStatusPort::EngineCtrlStatusPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
}
EngineCtrlStatusPort::EngineCtrlStatusPort(const EngineCtrlStatusPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&throttlegradient_percps_, &from.throttlegradient_percps_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiversionnumber_) -
    reinterpret_cast<char*>(&throttlegradient_percps_)) + sizeof(uiversionnumber_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
}

void EngineCtrlStatusPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiversionnumber_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(uiversionnumber_));
}

EngineCtrlStatusPort::~EngineCtrlStatusPort() {
  // @@protoc_insertion_point(destructor:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  SharedDtor();
}

void EngineCtrlStatusPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void EngineCtrlStatusPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EngineCtrlStatusPort& EngineCtrlStatusPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EngineCtrlStatusPort_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto.base);
  return *internal_default_instance();
}


void EngineCtrlStatusPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&throttlegradient_percps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&axletorque_nm_) -
        reinterpret_cast<char*>(&throttlegradient_percps_)) + sizeof(axletorque_nm_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&throttlepos_perc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uiversionnumber_) -
        reinterpret_cast<char*>(&throttlepos_perc_)) + sizeof(uiversionnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EngineCtrlStatusPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float throttleGradient_percps = 347;
      case 347:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_throttlegradient_percps(&has_bits);
          throttlegradient_percps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool remoteStartPossible_nu = 528;
      case 528:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_remotestartpossible_nu(&has_bits);
          remotestartpossible_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool engineOn_nu = 538;
      case 538:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_engineon_nu(&has_bits);
          engineon_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool throttleGradient_QF_nu = 576;
      case 576:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_throttlegradient_qf_nu(&has_bits);
          throttlegradient_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_commonvehsigprovider.start_stop_status.StartStopStatus startStopStatus_nu = 668;
      case 668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_commonvehsigprovider::start_stop_status::StartStopStatus_IsValid(val))) {
            _internal_set_startstopstatus_nu(static_cast<::pb::ap_commonvehsigprovider::start_stop_status::StartStopStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(668, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float axleTorque_nm = 1445;
      case 1445:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_axletorque_nm(&has_bits);
          axletorque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float throttlePos_perc = 1516;
      case 1516:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_throttlepos_perc(&has_bits);
          throttlepos_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool throttlePos_QF_nu = 3705;
      case 3705:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_throttlepos_qf_nu(&has_bits);
          throttlepos_qf_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineCtrlStatusPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float throttleGradient_percps = 347;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(347, this->_internal_throttlegradient_percps(), target);
  }

  // optional bool remoteStartPossible_nu = 528;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(528, this->_internal_remotestartpossible_nu(), target);
  }

  // optional bool engineOn_nu = 538;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(538, this->_internal_engineon_nu(), target);
  }

  // optional bool throttleGradient_QF_nu = 576;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(576, this->_internal_throttlegradient_qf_nu(), target);
  }

  // optional .pb.ap_commonvehsigprovider.start_stop_status.StartStopStatus startStopStatus_nu = 668;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      668, this->_internal_startstopstatus_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float axleTorque_nm = 1445;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1445, this->_internal_axletorque_nm(), target);
  }

  // optional float throttlePos_perc = 1516;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1516, this->_internal_throttlepos_perc(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool throttlePos_QF_nu = 3705;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3705, this->_internal_throttlepos_qf_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  return target;
}

size_t EngineCtrlStatusPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float throttleGradient_percps = 347;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional .pb.ap_commonvehsigprovider.start_stop_status.StartStopStatus startStopStatus_nu = 668;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_startstopstatus_nu());
    }

    // optional bool engineOn_nu = 538;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool remoteStartPossible_nu = 528;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool throttlePos_QF_nu = 3705;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool throttleGradient_QF_nu = 576;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional float axleTorque_nm = 1445;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float throttlePos_perc = 1516;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineCtrlStatusPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineCtrlStatusPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineCtrlStatusPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
    MergeFrom(*source);
  }
}

void EngineCtrlStatusPort::MergeFrom(const EngineCtrlStatusPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      throttlegradient_percps_ = from.throttlegradient_percps_;
    }
    if (cached_has_bits & 0x00000004u) {
      startstopstatus_nu_ = from.startstopstatus_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      engineon_nu_ = from.engineon_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      remotestartpossible_nu_ = from.remotestartpossible_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      throttlepos_qf_nu_ = from.throttlepos_qf_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      throttlegradient_qf_nu_ = from.throttlegradient_qf_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      axletorque_nm_ = from.axletorque_nm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      throttlepos_perc_ = from.throttlepos_perc_;
    }
    if (cached_has_bits & 0x00000200u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EngineCtrlStatusPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineCtrlStatusPort::CopyFrom(const EngineCtrlStatusPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineCtrlStatusPort::IsInitialized() const {
  return true;
}

void EngineCtrlStatusPort::InternalSwap(EngineCtrlStatusPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(throttlegradient_percps_, other->throttlegradient_percps_);
  swap(startstopstatus_nu_, other->startstopstatus_nu_);
  swap(engineon_nu_, other->engineon_nu_);
  swap(remotestartpossible_nu_, other->remotestartpossible_nu_);
  swap(throttlepos_qf_nu_, other->throttlepos_qf_nu_);
  swap(throttlegradient_qf_nu_, other->throttlegradient_qf_nu_);
  swap(axletorque_nm_, other->axletorque_nm_);
  swap(throttlepos_perc_, other->throttlepos_perc_);
  swap(uiversionnumber_, other->uiversionnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineCtrlStatusPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EngineCtrlStatusPort_array_port::InitAsDefaultInstance() {
}
class EngineCtrlStatusPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<EngineCtrlStatusPort_array_port>()._has_bits_);
};

EngineCtrlStatusPort_array_port::EngineCtrlStatusPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
}
EngineCtrlStatusPort_array_port::EngineCtrlStatusPort_array_port(const EngineCtrlStatusPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
}

void EngineCtrlStatusPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EngineCtrlStatusPort_array_port_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto.base);
}

EngineCtrlStatusPort_array_port::~EngineCtrlStatusPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  SharedDtor();
}

void EngineCtrlStatusPort_array_port::SharedDtor() {
}

void EngineCtrlStatusPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EngineCtrlStatusPort_array_port& EngineCtrlStatusPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EngineCtrlStatusPort_array_port_ap_5fcommonvehsigprovider_2fengine_5fctrl_5fstatus_5fport_2eproto.base);
  return *internal_default_instance();
}


void EngineCtrlStatusPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EngineCtrlStatusPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort data = 1282;
      case 1282:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10258>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EngineCtrlStatusPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort data = 1282;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1282, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  return target;
}

size_t EngineCtrlStatusPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort data = 1282;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineCtrlStatusPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineCtrlStatusPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EngineCtrlStatusPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
    MergeFrom(*source);
  }
}

void EngineCtrlStatusPort_array_port::MergeFrom(const EngineCtrlStatusPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void EngineCtrlStatusPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineCtrlStatusPort_array_port::CopyFrom(const EngineCtrlStatusPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_commonvehsigprovider.engine_ctrl_status_port.EngineCtrlStatusPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineCtrlStatusPort_array_port::IsInitialized() const {
  return true;
}

void EngineCtrlStatusPort_array_port::InternalSwap(EngineCtrlStatusPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EngineCtrlStatusPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace engine_ctrl_status_port
}  // namespace ap_commonvehsigprovider
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort* Arena::CreateMaybeMessage< ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_commonvehsigprovider::engine_ctrl_status_port::EngineCtrlStatusPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
