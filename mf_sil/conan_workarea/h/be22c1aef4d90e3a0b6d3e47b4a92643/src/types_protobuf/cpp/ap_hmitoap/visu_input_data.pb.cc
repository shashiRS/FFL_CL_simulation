// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_hmitoap/visu_input_data.proto

#include "ap_hmitoap/visu_input_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_hmitoap {
namespace visu_input_data {
class VisuInputDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisuInputData> _instance;
} _VisuInputData_default_instance_;
class VisuInputData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisuInputData_array_port> _instance;
} _VisuInputData_array_port_default_instance_;
}  // namespace visu_input_data
}  // namespace ap_hmitoap
}  // namespace pb
static void InitDefaultsscc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_hmitoap::visu_input_data::_VisuInputData_default_instance_;
    new (ptr) ::pb::ap_hmitoap::visu_input_data::VisuInputData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_hmitoap::visu_input_data::VisuInputData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_VisuInputData_array_port_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_hmitoap::visu_input_data::_VisuInputData_array_port_default_instance_;
    new (ptr) ::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisuInputData_array_port_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VisuInputData_array_port_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto}, {
      &scc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, firstclickeventx_px_u16_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, firstclickeventy_px_u16_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, secondclickeventx_px_u16_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, secondclickeventy_px_u16_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, hmioutuseractscreenreq_u8_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, gesturecode_nu_u8_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, blindspotactivated_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, parkingaugmentationtype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, gesturefinger_nu_u8_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, gesturecounter_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, visibilitytags_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, videorecorderrequest_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, screencapturerequest_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData, issequence_nu_),
  9,
  0,
  14,
  15,
  8,
  2,
  4,
  5,
  1,
  3,
  10,
  7,
  6,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::pb::ap_hmitoap::visu_input_data::VisuInputData)},
  { 37, 43, sizeof(::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_hmitoap::visu_input_data::_VisuInputData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_hmitoap::visu_input_data::_VisuInputData_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ap_hmitoap/visu_input_data.proto\022\035pb.a"
  "p_hmitoap.visu_input_data\032\027eco/signal_he"
  "ader.proto\032\035ap_hmitoap/screen_types.prot"
  "o\032\035ap_hmitoap/gesture_code.proto\032 ap_hmi"
  "toap/blind_spot_view.proto\032*ap_hmitoap/p"
  "arking_augmentation_type.proto\"\345\005\n\rVisuI"
  "nputData\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsS"
  "igHeader\030\211\010 \001(\0132\".pb.eco.signal_header.S"
  "ignalHeader\022 \n\027firstClickEventX_px_u16\030\235"
  "\025 \001(\021\022 \n\027firstClickEventY_px_u16\030\316\032 \001(\021\022"
  "!\n\030secondClickEventX_px_u16\030\263\r \001(\021\022!\n\030se"
  "condClickEventY_px_u16\030\340\002 \001(\021\022K\n\031HmiOutU"
  "serActScreenReq_u8\030\362\004 \001(\0162\'.pb.ap_hmitoa"
  "p.screen_types.ScreenTypes\022C\n\021GestureCod"
  "e_nu_u8\030\340\007 \001(\0162\'.pb.ap_hmitoap.gesture_c"
  "ode.GestureCode\022L\n\025blindSpotActivated_nu"
  "\030\365\036 \001(\0162,.pb.ap_hmitoap.blind_spot_view."
  "BlindSpotView\022e\n\032parkingAugmentationType"
  "_nu\030\362\002 \001(\0162@.pb.ap_hmitoap.parking_augme"
  "ntation_type.ParkingAugmentationType\022\034\n\023"
  "GestureFinger_nu_u8\030\312\022 \001(\r\022\032\n\021gestureCou"
  "nter_nu\030\304\013 \001(\r\022\032\n\021visibilityTags_nu\030\373\010 \001"
  "(\r\022 \n\027videoRecorderRequest_nu\030\276\036 \001(\010\022 \n\027"
  "screenCaptureRequest_nu\030\215\016 \001(\010\022\026\n\risSequ"
  "ence_nu\030\326\r \001(\010\"W\n\030VisuInputData_array_po"
  "rt\022;\n\004data\030\224\036 \003(\0132,.pb.ap_hmitoap.visu_i"
  "nput_data.VisuInputData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_deps[5] = {
  &::descriptor_table_ap_5fhmitoap_2fblind_5fspot_5fview_2eproto,
  &::descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto,
  &::descriptor_table_ap_5fhmitoap_2fparking_5faugmentation_5ftype_2eproto,
  &::descriptor_table_ap_5fhmitoap_2fscreen_5ftypes_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_sccs[2] = {
  &scc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto.base,
  &scc_info_VisuInputData_array_port_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_once;
static bool descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto = {
  &descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_initialized, descriptor_table_protodef_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto, "ap_hmitoap/visu_input_data.proto", 1063,
  &descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_once, descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_sccs, descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto::offsets,
  file_level_metadata_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto, 2, file_level_enum_descriptors_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto, file_level_service_descriptors_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto), true);
namespace pb {
namespace ap_hmitoap {
namespace visu_input_data {

// ===================================================================

void VisuInputData::InitAsDefaultInstance() {
  ::pb::ap_hmitoap::visu_input_data::_VisuInputData_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class VisuInputData::_Internal {
 public:
  using HasBits = decltype(std::declval<VisuInputData>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const VisuInputData* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_firstclickeventx_px_u16(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_firstclickeventy_px_u16(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_secondclickeventx_px_u16(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_secondclickeventy_px_u16(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hmioutuseractscreenreq_u8(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gesturecode_nu_u8(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_blindspotactivated_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parkingaugmentationtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gesturefinger_nu_u8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gesturecounter_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_visibilitytags_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_videorecorderrequest_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_screencapturerequest_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_issequence_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
VisuInputData::_Internal::ssigheader(const VisuInputData* msg) {
  return *msg->ssigheader_;
}
void VisuInputData::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VisuInputData::VisuInputData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_hmitoap.visu_input_data.VisuInputData)
}
VisuInputData::VisuInputData(const VisuInputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&blindspotactivated_nu_, &from.blindspotactivated_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&firstclickeventy_px_u16_) -
    reinterpret_cast<char*>(&blindspotactivated_nu_)) + sizeof(firstclickeventy_px_u16_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_hmitoap.visu_input_data.VisuInputData)
}

void VisuInputData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firstclickeventy_px_u16_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(firstclickeventy_px_u16_));
}

VisuInputData::~VisuInputData() {
  // @@protoc_insertion_point(destructor:pb.ap_hmitoap.visu_input_data.VisuInputData)
  SharedDtor();
}

void VisuInputData::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void VisuInputData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisuInputData& VisuInputData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisuInputData_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto.base);
  return *internal_default_instance();
}


void VisuInputData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_hmitoap.visu_input_data.VisuInputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&blindspotactivated_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gesturecounter_nu_) -
        reinterpret_cast<char*>(&blindspotactivated_nu_)) + sizeof(gesturecounter_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&secondclickeventx_px_u16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&firstclickeventy_px_u16_) -
        reinterpret_cast<char*>(&secondclickeventx_px_u16_)) + sizeof(firstclickeventy_px_u16_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VisuInputData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional sint32 secondClickEventY_px_u16 = 352;
      case 352:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_secondclickeventy_px_u16(&has_bits);
          secondclickeventy_px_u16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_hmitoap.parking_augmentation_type.ParkingAugmentationType parkingAugmentationType_nu = 370;
      case 370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::parking_augmentation_type::ParkingAugmentationType_IsValid(val))) {
            _internal_set_parkingaugmentationtype_nu(static_cast<::pb::ap_hmitoap::parking_augmentation_type::ParkingAugmentationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(370, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_hmitoap.screen_types.ScreenTypes HmiOutUserActScreenReq_u8 = 626;
      case 626:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::screen_types::ScreenTypes_IsValid(val))) {
            _internal_set_hmioutuseractscreenreq_u8(static_cast<::pb::ap_hmitoap::screen_types::ScreenTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(626, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_hmitoap.gesture_code.GestureCode GestureCode_nu_u8 = 992;
      case 992:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::gesture_code::GestureCode_IsValid(val))) {
            _internal_set_gesturecode_nu_u8(static_cast<::pb::ap_hmitoap::gesture_code::GestureCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(992, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 visibilityTags_nu = 1147;
      case 1147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_visibilitytags_nu(&has_bits);
          visibilitytags_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gestureCounter_nu = 1476;
      case 1476:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gesturecounter_nu(&has_bits);
          gesturecounter_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 secondClickEventX_px_u16 = 1715;
      case 1715:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_secondclickeventx_px_u16(&has_bits);
          secondclickeventx_px_u16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSequence_nu = 1750;
      case 1750:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_issequence_nu(&has_bits);
          issequence_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool screenCaptureRequest_nu = 1805;
      case 1805:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_screencapturerequest_nu(&has_bits);
          screencapturerequest_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 GestureFinger_nu_u8 = 2378;
      case 2378:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_gesturefinger_nu_u8(&has_bits);
          gesturefinger_nu_u8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 firstClickEventX_px_u16 = 2717;
      case 2717:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_firstclickeventx_px_u16(&has_bits);
          firstclickeventx_px_u16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 firstClickEventY_px_u16 = 3406;
      case 3406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_firstclickeventy_px_u16(&has_bits);
          firstclickeventy_px_u16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool videoRecorderRequest_nu = 3902;
      case 3902:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_videorecorderrequest_nu(&has_bits);
          videorecorderrequest_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_hmitoap.blind_spot_view.BlindSpotView blindSpotActivated_nu = 3957;
      case 3957:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::blind_spot_view::BlindSpotView_IsValid(val))) {
            _internal_set_blindspotactivated_nu(static_cast<::pb::ap_hmitoap::blind_spot_view::BlindSpotView>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3957, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisuInputData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_hmitoap.visu_input_data.VisuInputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 secondClickEventY_px_u16 = 352;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(352, this->_internal_secondclickeventy_px_u16(), target);
  }

  // optional .pb.ap_hmitoap.parking_augmentation_type.ParkingAugmentationType parkingAugmentationType_nu = 370;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      370, this->_internal_parkingaugmentationtype_nu(), target);
  }

  // optional .pb.ap_hmitoap.screen_types.ScreenTypes HmiOutUserActScreenReq_u8 = 626;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      626, this->_internal_hmioutuseractscreenreq_u8(), target);
  }

  // optional .pb.ap_hmitoap.gesture_code.GestureCode GestureCode_nu_u8 = 992;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      992, this->_internal_gesturecode_nu_u8(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional uint32 visibilityTags_nu = 1147;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1147, this->_internal_visibilitytags_nu(), target);
  }

  // optional uint32 gestureCounter_nu = 1476;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1476, this->_internal_gesturecounter_nu(), target);
  }

  // optional sint32 secondClickEventX_px_u16 = 1715;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1715, this->_internal_secondclickeventx_px_u16(), target);
  }

  // optional bool isSequence_nu = 1750;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1750, this->_internal_issequence_nu(), target);
  }

  // optional bool screenCaptureRequest_nu = 1805;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1805, this->_internal_screencapturerequest_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional uint32 GestureFinger_nu_u8 = 2378;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2378, this->_internal_gesturefinger_nu_u8(), target);
  }

  // optional sint32 firstClickEventX_px_u16 = 2717;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2717, this->_internal_firstclickeventx_px_u16(), target);
  }

  // optional sint32 firstClickEventY_px_u16 = 3406;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3406, this->_internal_firstclickeventy_px_u16(), target);
  }

  // optional bool videoRecorderRequest_nu = 3902;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3902, this->_internal_videorecorderrequest_nu(), target);
  }

  // optional .pb.ap_hmitoap.blind_spot_view.BlindSpotView blindSpotActivated_nu = 3957;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3957, this->_internal_blindspotactivated_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_hmitoap.visu_input_data.VisuInputData)
  return target;
}

size_t VisuInputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_hmitoap.visu_input_data.VisuInputData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.ap_hmitoap.blind_spot_view.BlindSpotView blindSpotActivated_nu = 3957;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blindspotactivated_nu());
    }

    // optional sint32 secondClickEventY_px_u16 = 352;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_secondclickeventy_px_u16());
    }

    // optional .pb.ap_hmitoap.parking_augmentation_type.ParkingAugmentationType parkingAugmentationType_nu = 370;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parkingaugmentationtype_nu());
    }

    // optional .pb.ap_hmitoap.screen_types.ScreenTypes HmiOutUserActScreenReq_u8 = 626;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hmioutuseractscreenreq_u8());
    }

    // optional .pb.ap_hmitoap.gesture_code.GestureCode GestureCode_nu_u8 = 992;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gesturecode_nu_u8());
    }

    // optional uint32 visibilityTags_nu = 1147;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_visibilitytags_nu());
    }

    // optional uint32 gestureCounter_nu = 1476;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gesturecounter_nu());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional sint32 secondClickEventX_px_u16 = 1715;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_secondclickeventx_px_u16());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 GestureFinger_nu_u8 = 2378;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gesturefinger_nu_u8());
    }

    // optional bool videoRecorderRequest_nu = 3902;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool screenCaptureRequest_nu = 1805;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool isSequence_nu = 1750;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional sint32 firstClickEventX_px_u16 = 2717;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_firstclickeventx_px_u16());
    }

    // optional sint32 firstClickEventY_px_u16 = 3406;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_firstclickeventy_px_u16());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisuInputData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData)
  GOOGLE_DCHECK_NE(&from, this);
  const VisuInputData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisuInputData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_hmitoap.visu_input_data.VisuInputData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_hmitoap.visu_input_data.VisuInputData)
    MergeFrom(*source);
  }
}

void VisuInputData::MergeFrom(const VisuInputData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      blindspotactivated_nu_ = from.blindspotactivated_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      secondclickeventy_px_u16_ = from.secondclickeventy_px_u16_;
    }
    if (cached_has_bits & 0x00000008u) {
      parkingaugmentationtype_nu_ = from.parkingaugmentationtype_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      hmioutuseractscreenreq_u8_ = from.hmioutuseractscreenreq_u8_;
    }
    if (cached_has_bits & 0x00000020u) {
      gesturecode_nu_u8_ = from.gesturecode_nu_u8_;
    }
    if (cached_has_bits & 0x00000040u) {
      visibilitytags_nu_ = from.visibilitytags_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      gesturecounter_nu_ = from.gesturecounter_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      secondclickeventx_px_u16_ = from.secondclickeventx_px_u16_;
    }
    if (cached_has_bits & 0x00000200u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000400u) {
      gesturefinger_nu_u8_ = from.gesturefinger_nu_u8_;
    }
    if (cached_has_bits & 0x00000800u) {
      videorecorderrequest_nu_ = from.videorecorderrequest_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      screencapturerequest_nu_ = from.screencapturerequest_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      issequence_nu_ = from.issequence_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      firstclickeventx_px_u16_ = from.firstclickeventx_px_u16_;
    }
    if (cached_has_bits & 0x00008000u) {
      firstclickeventy_px_u16_ = from.firstclickeventy_px_u16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisuInputData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisuInputData::CopyFrom(const VisuInputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisuInputData::IsInitialized() const {
  return true;
}

void VisuInputData::InternalSwap(VisuInputData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(blindspotactivated_nu_, other->blindspotactivated_nu_);
  swap(secondclickeventy_px_u16_, other->secondclickeventy_px_u16_);
  swap(parkingaugmentationtype_nu_, other->parkingaugmentationtype_nu_);
  swap(hmioutuseractscreenreq_u8_, other->hmioutuseractscreenreq_u8_);
  swap(gesturecode_nu_u8_, other->gesturecode_nu_u8_);
  swap(visibilitytags_nu_, other->visibilitytags_nu_);
  swap(gesturecounter_nu_, other->gesturecounter_nu_);
  swap(secondclickeventx_px_u16_, other->secondclickeventx_px_u16_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(gesturefinger_nu_u8_, other->gesturefinger_nu_u8_);
  swap(videorecorderrequest_nu_, other->videorecorderrequest_nu_);
  swap(screencapturerequest_nu_, other->screencapturerequest_nu_);
  swap(issequence_nu_, other->issequence_nu_);
  swap(firstclickeventx_px_u16_, other->firstclickeventx_px_u16_);
  swap(firstclickeventy_px_u16_, other->firstclickeventy_px_u16_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisuInputData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisuInputData_array_port::InitAsDefaultInstance() {
}
class VisuInputData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<VisuInputData_array_port>()._has_bits_);
};

VisuInputData_array_port::VisuInputData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
}
VisuInputData_array_port::VisuInputData_array_port(const VisuInputData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
}

void VisuInputData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisuInputData_array_port_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto.base);
}

VisuInputData_array_port::~VisuInputData_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  SharedDtor();
}

void VisuInputData_array_port::SharedDtor() {
}

void VisuInputData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisuInputData_array_port& VisuInputData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisuInputData_array_port_ap_5fhmitoap_2fvisu_5finput_5fdata_2eproto.base);
  return *internal_default_instance();
}


void VisuInputData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VisuInputData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_hmitoap.visu_input_data.VisuInputData data = 3860;
      case 3860:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisuInputData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_hmitoap.visu_input_data.VisuInputData data = 3860;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3860, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  return target;
}

size_t VisuInputData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_hmitoap.visu_input_data.VisuInputData data = 3860;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisuInputData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const VisuInputData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisuInputData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
    MergeFrom(*source);
  }
}

void VisuInputData_array_port::MergeFrom(const VisuInputData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void VisuInputData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisuInputData_array_port::CopyFrom(const VisuInputData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_hmitoap.visu_input_data.VisuInputData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisuInputData_array_port::IsInitialized() const {
  return true;
}

void VisuInputData_array_port::InternalSwap(VisuInputData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisuInputData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace visu_input_data
}  // namespace ap_hmitoap
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_hmitoap::visu_input_data::VisuInputData* Arena::CreateMaybeMessage< ::pb::ap_hmitoap::visu_input_data::VisuInputData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_hmitoap::visu_input_data::VisuInputData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port* Arena::CreateMaybeMessage< ::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_hmitoap::visu_input_data::VisuInputData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
