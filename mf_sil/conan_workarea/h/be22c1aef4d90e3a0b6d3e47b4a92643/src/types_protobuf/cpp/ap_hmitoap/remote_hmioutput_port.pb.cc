// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_hmitoap/remote_hmioutput_port.proto

#include "ap_hmitoap/remote_hmioutput_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_hmitoap {
namespace remote_hmioutput_port {
class RemoteHMIOutputPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteHMIOutputPort> _instance;
} _RemoteHMIOutputPort_default_instance_;
class RemoteHMIOutputPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteHMIOutputPort_array_port> _instance;
} _RemoteHMIOutputPort_array_port_default_instance_;
}  // namespace remote_hmioutput_port
}  // namespace ap_hmitoap
}  // namespace pb
static void InitDefaultsscc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_hmitoap::remote_hmioutput_port::_RemoteHMIOutputPort_default_instance_;
    new (ptr) ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_RemoteHMIOutputPort_array_port_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_hmitoap::remote_hmioutput_port::_RemoteHMIOutputPort_array_port_default_instance_;
    new (ptr) ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteHMIOutputPort_array_port_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteHMIOutputPort_array_port_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto}, {
      &scc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, batterylevel_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, fingerpositionx_px_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, fingerpositiony_px_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, useractionremotedevice_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, alivecounter_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, deadmansswitchbtn_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, paired_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, connected_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, screenresolutionx_px_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, screenresolutiony_px_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort, useractionremcounter_nu_),
  6,
  0,
  1,
  9,
  8,
  10,
  11,
  3,
  4,
  5,
  12,
  7,
  2,
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort)},
  { 31, 37, sizeof(::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_hmitoap::remote_hmioutput_port::_RemoteHMIOutputPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_hmitoap::remote_hmioutput_port::_RemoteHMIOutputPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&ap_hmitoap/remote_hmioutput_port.proto"
  "\022#pb.ap_hmitoap.remote_hmioutput_port\032\027e"
  "co/signal_header.proto\032*ap_hmitoap/user_"
  "action_remote_device.proto\"\347\003\n\023RemoteHMI"
  "OutputPort\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\n"
  "sSigHeader\030\211\010 \001(\0132\".pb.eco.signal_header"
  ".SignalHeader\022\032\n\021batteryLevel_perc\030\215\002 \001("
  "\002\022\033\n\022fingerPositionX_px\030\377\031 \001(\r\022\033\n\022finger"
  "PositionY_px\030\313\024 \001(\r\022c\n\031userActionRemoteD"
  "evice_nu\030\200\032 \001(\0162\?.pb.ap_hmitoap.user_act"
  "ion_remote_device.UserActionRemoteDevice"
  "\022\030\n\017aliveCounter_nu\030\336\033 \001(\r\022\035\n\024deadMansSw"
  "itchBtn_nu\030\267\r \001(\010\022\022\n\tpaired_nu\030\367\t \001(\010\022\025\n"
  "\014connected_nu\030\242\022 \001(\010\022\035\n\024screenResolution"
  "X_px\030\235\037 \001(\r\022\035\n\024screenResolutionY_px\030\251\022 \001"
  "(\r\022 \n\027userActionRemCounter_nu\030\203\n \001(\r\"i\n\036"
  "RemoteHMIOutputPort_array_port\022G\n\004data\030\372"
  "\020 \003(\01328.pb.ap_hmitoap.remote_hmioutput_p"
  "ort.RemoteHMIOutputPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_deps[2] = {
  &::descriptor_table_ap_5fhmitoap_2fuser_5faction_5fremote_5fdevice_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_sccs[2] = {
  &scc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto.base,
  &scc_info_RemoteHMIOutputPort_array_port_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_once;
static bool descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto = {
  &descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_initialized, descriptor_table_protodef_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto, "ap_hmitoap/remote_hmioutput_port.proto", 743,
  &descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_once, descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_sccs, descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto::offsets,
  file_level_metadata_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto, 2, file_level_enum_descriptors_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto, file_level_service_descriptors_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto), true);
namespace pb {
namespace ap_hmitoap {
namespace remote_hmioutput_port {

// ===================================================================

void RemoteHMIOutputPort::InitAsDefaultInstance() {
  ::pb::ap_hmitoap::remote_hmioutput_port::_RemoteHMIOutputPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class RemoteHMIOutputPort::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteHMIOutputPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const RemoteHMIOutputPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batterylevel_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fingerpositionx_px(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fingerpositiony_px(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_useractionremotedevice_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_alivecounter_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_deadmansswitchbtn_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_paired_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_connected_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_screenresolutionx_px(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_screenresolutiony_px(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_useractionremcounter_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
RemoteHMIOutputPort::_Internal::ssigheader(const RemoteHMIOutputPort* msg) {
  return *msg->ssigheader_;
}
void RemoteHMIOutputPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RemoteHMIOutputPort::RemoteHMIOutputPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
}
RemoteHMIOutputPort::RemoteHMIOutputPort(const RemoteHMIOutputPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&batterylevel_perc_, &from.batterylevel_perc_,
    static_cast<size_t>(reinterpret_cast<char*>(&screenresolutionx_px_) -
    reinterpret_cast<char*>(&batterylevel_perc_)) + sizeof(screenresolutionx_px_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
}

void RemoteHMIOutputPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&screenresolutionx_px_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(screenresolutionx_px_));
}

RemoteHMIOutputPort::~RemoteHMIOutputPort() {
  // @@protoc_insertion_point(destructor:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  SharedDtor();
}

void RemoteHMIOutputPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void RemoteHMIOutputPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteHMIOutputPort& RemoteHMIOutputPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteHMIOutputPort_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto.base);
  return *internal_default_instance();
}


void RemoteHMIOutputPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&batterylevel_perc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screenresolutiony_px_) -
        reinterpret_cast<char*>(&batterylevel_perc_)) + sizeof(screenresolutiony_px_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&fingerpositiony_px_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screenresolutionx_px_) -
        reinterpret_cast<char*>(&fingerpositiony_px_)) + sizeof(screenresolutionx_px_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoteHMIOutputPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float batteryLevel_perc = 269;
      case 269:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_batterylevel_perc(&has_bits);
          batterylevel_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool paired_nu = 1271;
      case 1271:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_paired_nu(&has_bits);
          paired_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userActionRemCounter_nu = 1283;
      case 1283:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_useractionremcounter_nu(&has_bits);
          useractionremcounter_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deadMansSwitchBtn_nu = 1719;
      case 1719:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_deadmansswitchbtn_nu(&has_bits);
          deadmansswitchbtn_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connected_nu = 2338;
      case 2338:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connected_nu(&has_bits);
          connected_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screenResolutionY_px = 2345;
      case 2345:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_screenresolutiony_px(&has_bits);
          screenresolutiony_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fingerPositionY_px = 2635;
      case 2635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fingerpositiony_px(&has_bits);
          fingerpositiony_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fingerPositionX_px = 3327;
      case 3327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_fingerpositionx_px(&has_bits);
          fingerpositionx_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_hmitoap.user_action_remote_device.UserActionRemoteDevice userActionRemoteDevice_nu = 3328;
      case 3328:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::user_action_remote_device::UserActionRemoteDevice_IsValid(val))) {
            _internal_set_useractionremotedevice_nu(static_cast<::pb::ap_hmitoap::user_action_remote_device::UserActionRemoteDevice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3328, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 aliveCounter_nu = 3550;
      case 3550:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_alivecounter_nu(&has_bits);
          alivecounter_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screenResolutionX_px = 3997;
      case 3997:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_screenresolutionx_px(&has_bits);
          screenresolutionx_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteHMIOutputPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float batteryLevel_perc = 269;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(269, this->_internal_batterylevel_perc(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional bool paired_nu = 1271;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1271, this->_internal_paired_nu(), target);
  }

  // optional uint32 userActionRemCounter_nu = 1283;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1283, this->_internal_useractionremcounter_nu(), target);
  }

  // optional bool deadMansSwitchBtn_nu = 1719;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1719, this->_internal_deadmansswitchbtn_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool connected_nu = 2338;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2338, this->_internal_connected_nu(), target);
  }

  // optional uint32 screenResolutionY_px = 2345;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2345, this->_internal_screenresolutiony_px(), target);
  }

  // optional uint32 fingerPositionY_px = 2635;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2635, this->_internal_fingerpositiony_px(), target);
  }

  // optional uint32 fingerPositionX_px = 3327;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3327, this->_internal_fingerpositionx_px(), target);
  }

  // optional .pb.ap_hmitoap.user_action_remote_device.UserActionRemoteDevice userActionRemoteDevice_nu = 3328;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3328, this->_internal_useractionremotedevice_nu(), target);
  }

  // optional uint32 aliveCounter_nu = 3550;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3550, this->_internal_alivecounter_nu(), target);
  }

  // optional uint32 screenResolutionX_px = 3997;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3997, this->_internal_screenresolutionx_px(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  return target;
}

size_t RemoteHMIOutputPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float batteryLevel_perc = 269;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 userActionRemCounter_nu = 1283;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_useractionremcounter_nu());
    }

    // optional bool deadMansSwitchBtn_nu = 1719;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool paired_nu = 1271;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool connected_nu = 2338;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 screenResolutionY_px = 2345;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screenresolutiony_px());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 fingerPositionY_px = 2635;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fingerpositiony_px());
    }

    // optional uint32 fingerPositionX_px = 3327;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fingerpositionx_px());
    }

    // optional .pb.ap_hmitoap.user_action_remote_device.UserActionRemoteDevice userActionRemoteDevice_nu = 3328;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_useractionremotedevice_nu());
    }

    // optional uint32 aliveCounter_nu = 3550;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_alivecounter_nu());
    }

    // optional uint32 screenResolutionX_px = 3997;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screenresolutionx_px());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteHMIOutputPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteHMIOutputPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteHMIOutputPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
    MergeFrom(*source);
  }
}

void RemoteHMIOutputPort::MergeFrom(const RemoteHMIOutputPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      batterylevel_perc_ = from.batterylevel_perc_;
    }
    if (cached_has_bits & 0x00000004u) {
      useractionremcounter_nu_ = from.useractionremcounter_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      deadmansswitchbtn_nu_ = from.deadmansswitchbtn_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      paired_nu_ = from.paired_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      connected_nu_ = from.connected_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      screenresolutiony_px_ = from.screenresolutiony_px_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      fingerpositiony_px_ = from.fingerpositiony_px_;
    }
    if (cached_has_bits & 0x00000200u) {
      fingerpositionx_px_ = from.fingerpositionx_px_;
    }
    if (cached_has_bits & 0x00000400u) {
      useractionremotedevice_nu_ = from.useractionremotedevice_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      alivecounter_nu_ = from.alivecounter_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      screenresolutionx_px_ = from.screenresolutionx_px_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteHMIOutputPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteHMIOutputPort::CopyFrom(const RemoteHMIOutputPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteHMIOutputPort::IsInitialized() const {
  return true;
}

void RemoteHMIOutputPort::InternalSwap(RemoteHMIOutputPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(batterylevel_perc_, other->batterylevel_perc_);
  swap(useractionremcounter_nu_, other->useractionremcounter_nu_);
  swap(deadmansswitchbtn_nu_, other->deadmansswitchbtn_nu_);
  swap(paired_nu_, other->paired_nu_);
  swap(connected_nu_, other->connected_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(screenresolutiony_px_, other->screenresolutiony_px_);
  swap(fingerpositiony_px_, other->fingerpositiony_px_);
  swap(fingerpositionx_px_, other->fingerpositionx_px_);
  swap(useractionremotedevice_nu_, other->useractionremotedevice_nu_);
  swap(alivecounter_nu_, other->alivecounter_nu_);
  swap(screenresolutionx_px_, other->screenresolutionx_px_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteHMIOutputPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteHMIOutputPort_array_port::InitAsDefaultInstance() {
}
class RemoteHMIOutputPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteHMIOutputPort_array_port>()._has_bits_);
};

RemoteHMIOutputPort_array_port::RemoteHMIOutputPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
}
RemoteHMIOutputPort_array_port::RemoteHMIOutputPort_array_port(const RemoteHMIOutputPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
}

void RemoteHMIOutputPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteHMIOutputPort_array_port_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto.base);
}

RemoteHMIOutputPort_array_port::~RemoteHMIOutputPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  SharedDtor();
}

void RemoteHMIOutputPort_array_port::SharedDtor() {
}

void RemoteHMIOutputPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteHMIOutputPort_array_port& RemoteHMIOutputPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteHMIOutputPort_array_port_ap_5fhmitoap_2fremote_5fhmioutput_5fport_2eproto.base);
  return *internal_default_instance();
}


void RemoteHMIOutputPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoteHMIOutputPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort data = 2170;
      case 2170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteHMIOutputPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort data = 2170;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2170, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  return target;
}

size_t RemoteHMIOutputPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort data = 2170;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteHMIOutputPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteHMIOutputPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteHMIOutputPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
    MergeFrom(*source);
  }
}

void RemoteHMIOutputPort_array_port::MergeFrom(const RemoteHMIOutputPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void RemoteHMIOutputPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteHMIOutputPort_array_port::CopyFrom(const RemoteHMIOutputPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_hmitoap.remote_hmioutput_port.RemoteHMIOutputPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteHMIOutputPort_array_port::IsInitialized() const {
  return true;
}

void RemoteHMIOutputPort_array_port::InternalSwap(RemoteHMIOutputPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteHMIOutputPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace remote_hmioutput_port
}  // namespace ap_hmitoap
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort* Arena::CreateMaybeMessage< ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_hmitoap::remote_hmioutput_port::RemoteHMIOutputPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
