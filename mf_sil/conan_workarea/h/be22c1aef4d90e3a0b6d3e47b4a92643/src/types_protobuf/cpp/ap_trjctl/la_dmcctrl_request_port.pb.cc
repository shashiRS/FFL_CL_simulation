// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/la_dmcctrl_request_port.proto

#include "ap_trjctl/la_dmcctrl_request_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_trjctl {
namespace la_dmcctrl_request_port {
class LaDMCCtrlRequestPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaDMCCtrlRequestPort> _instance;
} _LaDMCCtrlRequestPort_default_instance_;
class LaDMCCtrlRequestPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaDMCCtrlRequestPort_array_port> _instance;
} _LaDMCCtrlRequestPort_array_port_default_instance_;
}  // namespace la_dmcctrl_request_port
}  // namespace ap_trjctl
}  // namespace pb
static void InitDefaultsscc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::la_dmcctrl_request_port::_LaDMCCtrlRequestPort_default_instance_;
    new (ptr) ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_LaDMCCtrlRequestPort_array_port_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::la_dmcctrl_request_port::_LaDMCCtrlRequestPort_array_port_default_instance_;
    new (ptr) ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaDMCCtrlRequestPort_array_port_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaDMCCtrlRequestPort_array_port_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto}, {
      &scc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, steerwheelangreq_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, frontsteerangreq_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, rearsteerangreq_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, frontsteertorquereq_nm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, rearsteertorquereq_nm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, curvaturereq_1pm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, ladmcctrlrequestinterface_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, ladmcctrlrequestsource_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort, ladmcctrlrequest_nu_),
  3,
  0,
  5,
  8,
  10,
  9,
  6,
  7,
  2,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort)},
  { 27, 33, sizeof(::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::la_dmcctrl_request_port::_LaDMCCtrlRequestPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::la_dmcctrl_request_port::_LaDMCCtrlRequestPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'ap_trjctl/la_dmcctrl_request_port.prot"
  "o\022$pb.ap_trjctl.la_dmcctrl_request_port\032"
  "\027eco/signal_header.proto\0321ap_trjctl/la_d"
  "mcctrl_request_interface_type.proto\032.ap_"
  "trjctl/la_dmcctrl_request_source_type.pr"
  "oto\"\242\004\n\024LaDMCCtrlRequestPort\022\030\n\017uiVersio"
  "nNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb"
  ".eco.signal_header.SignalHeader\022\035\n\024steer"
  "WheelAngReq_rad\030\256\024 \001(\002\022\035\n\024frontSteerAngR"
  "eq_rad\030\357\030 \001(\002\022\034\n\023rearSteerAngReq_rad\030\241\034 "
  "\001(\002\022\037\n\026frontSteerTorqueReq_Nm\030\374\033 \001(\002\022\036\n\025"
  "rearSteerTorqueReq_Nm\030\315\025 \001(\002\022\031\n\020curvatur"
  "eReq_1pm\030\327\027 \001(\002\022t\n\034laDMCCtrlRequestInter"
  "face_nu\030\314\r \001(\0162M.pb.ap_trjctl.la_dmcctrl"
  "_request_interface_type.LaDMCCtrlRequest"
  "InterfaceType\022k\n\031laDMCCtrlRequestSource_"
  "nu\030\243\022 \001(\0162G.pb.ap_trjctl.la_dmcctrl_requ"
  "est_source_type.LaDMCCtrlRequestSourceTy"
  "pe\022\034\n\023laDMCCtrlRequest_nu\030\370\004 \001(\010\"l\n\037LaDM"
  "CCtrlRequestPort_array_port\022I\n\004data\030\330\024 \003"
  "(\0132:.pb.ap_trjctl.la_dmcctrl_request_por"
  "t.LaDMCCtrlRequestPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_deps[3] = {
  &::descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5finterface_5ftype_2eproto,
  &::descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fsource_5ftype_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_sccs[2] = {
  &scc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto.base,
  &scc_info_LaDMCCtrlRequestPort_array_port_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_once;
static bool descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto = {
  &descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_initialized, descriptor_table_protodef_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto, "ap_trjctl/la_dmcctrl_request_port.proto", 862,
  &descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_once, descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_sccs, descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto::offsets,
  file_level_metadata_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto, 2, file_level_enum_descriptors_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto, file_level_service_descriptors_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto), true);
namespace pb {
namespace ap_trjctl {
namespace la_dmcctrl_request_port {

// ===================================================================

void LaDMCCtrlRequestPort::InitAsDefaultInstance() {
  ::pb::ap_trjctl::la_dmcctrl_request_port::_LaDMCCtrlRequestPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class LaDMCCtrlRequestPort::_Internal {
 public:
  using HasBits = decltype(std::declval<LaDMCCtrlRequestPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const LaDMCCtrlRequestPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steerwheelangreq_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frontsteerangreq_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rearsteerangreq_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_frontsteertorquereq_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rearsteertorquereq_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_curvaturereq_1pm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ladmcctrlrequestinterface_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ladmcctrlrequestsource_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ladmcctrlrequest_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
LaDMCCtrlRequestPort::_Internal::ssigheader(const LaDMCCtrlRequestPort* msg) {
  return *msg->ssigheader_;
}
void LaDMCCtrlRequestPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LaDMCCtrlRequestPort::LaDMCCtrlRequestPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
}
LaDMCCtrlRequestPort::LaDMCCtrlRequestPort(const LaDMCCtrlRequestPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&ladmcctrlrequest_nu_, &from.ladmcctrlrequest_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&rearsteerangreq_rad_) -
    reinterpret_cast<char*>(&ladmcctrlrequest_nu_)) + sizeof(rearsteerangreq_rad_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
}

void LaDMCCtrlRequestPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rearsteerangreq_rad_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(rearsteerangreq_rad_));
}

LaDMCCtrlRequestPort::~LaDMCCtrlRequestPort() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  SharedDtor();
}

void LaDMCCtrlRequestPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void LaDMCCtrlRequestPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaDMCCtrlRequestPort& LaDMCCtrlRequestPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaDMCCtrlRequestPort_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void LaDMCCtrlRequestPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ladmcctrlrequest_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curvaturereq_1pm_) -
        reinterpret_cast<char*>(&ladmcctrlrequest_nu_)) + sizeof(curvaturereq_1pm_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&frontsteerangreq_rad_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rearsteerangreq_rad_) -
        reinterpret_cast<char*>(&frontsteerangreq_rad_)) + sizeof(rearsteerangreq_rad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LaDMCCtrlRequestPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool laDMCCtrlRequest_nu = 632;
      case 632:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ladmcctrlrequest_nu(&has_bits);
          ladmcctrlrequest_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.la_dmcctrl_request_interface_type.LaDMCCtrlRequestInterfaceType laDMCCtrlRequestInterface_nu = 1740;
      case 1740:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::la_dmcctrl_request_interface_type::LaDMCCtrlRequestInterfaceType_IsValid(val))) {
            _internal_set_ladmcctrlrequestinterface_nu(static_cast<::pb::ap_trjctl::la_dmcctrl_request_interface_type::LaDMCCtrlRequestInterfaceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1740, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.la_dmcctrl_request_source_type.LaDMCCtrlRequestSourceType laDMCCtrlRequestSource_nu = 2339;
      case 2339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::la_dmcctrl_request_source_type::LaDMCCtrlRequestSourceType_IsValid(val))) {
            _internal_set_ladmcctrlrequestsource_nu(static_cast<::pb::ap_trjctl::la_dmcctrl_request_source_type::LaDMCCtrlRequestSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2339, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float steerWheelAngReq_rad = 2606;
      case 2606:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_steerwheelangreq_rad(&has_bits);
          steerwheelangreq_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rearSteerTorqueReq_Nm = 2765;
      case 2765:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_rearsteertorquereq_nm(&has_bits);
          rearsteertorquereq_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float curvatureReq_1pm = 3031;
      case 3031:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_curvaturereq_1pm(&has_bits);
          curvaturereq_1pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frontSteerAngReq_rad = 3183;
      case 3183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_frontsteerangreq_rad(&has_bits);
          frontsteerangreq_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frontSteerTorqueReq_Nm = 3580;
      case 3580:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_frontsteertorquereq_nm(&has_bits);
          frontsteertorquereq_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rearSteerAngReq_rad = 3617;
      case 3617:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_rearsteerangreq_rad(&has_bits);
          rearsteerangreq_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaDMCCtrlRequestPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool laDMCCtrlRequest_nu = 632;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(632, this->_internal_ladmcctrlrequest_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional .pb.ap_trjctl.la_dmcctrl_request_interface_type.LaDMCCtrlRequestInterfaceType laDMCCtrlRequestInterface_nu = 1740;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1740, this->_internal_ladmcctrlrequestinterface_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional .pb.ap_trjctl.la_dmcctrl_request_source_type.LaDMCCtrlRequestSourceType laDMCCtrlRequestSource_nu = 2339;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2339, this->_internal_ladmcctrlrequestsource_nu(), target);
  }

  // optional float steerWheelAngReq_rad = 2606;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2606, this->_internal_steerwheelangreq_rad(), target);
  }

  // optional float rearSteerTorqueReq_Nm = 2765;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2765, this->_internal_rearsteertorquereq_nm(), target);
  }

  // optional float curvatureReq_1pm = 3031;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3031, this->_internal_curvaturereq_1pm(), target);
  }

  // optional float frontSteerAngReq_rad = 3183;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3183, this->_internal_frontsteerangreq_rad(), target);
  }

  // optional float frontSteerTorqueReq_Nm = 3580;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3580, this->_internal_frontsteertorquereq_nm(), target);
  }

  // optional float rearSteerAngReq_rad = 3617;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3617, this->_internal_rearsteerangreq_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  return target;
}

size_t LaDMCCtrlRequestPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional bool laDMCCtrlRequest_nu = 632;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional .pb.ap_trjctl.la_dmcctrl_request_interface_type.LaDMCCtrlRequestInterfaceType laDMCCtrlRequestInterface_nu = 1740;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ladmcctrlrequestinterface_nu());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional .pb.ap_trjctl.la_dmcctrl_request_source_type.LaDMCCtrlRequestSourceType laDMCCtrlRequestSource_nu = 2339;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ladmcctrlrequestsource_nu());
    }

    // optional float steerWheelAngReq_rad = 2606;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float rearSteerTorqueReq_Nm = 2765;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float curvatureReq_1pm = 3031;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float frontSteerAngReq_rad = 3183;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float frontSteerTorqueReq_Nm = 3580;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float rearSteerAngReq_rad = 3617;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaDMCCtrlRequestPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  const LaDMCCtrlRequestPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaDMCCtrlRequestPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
    MergeFrom(*source);
  }
}

void LaDMCCtrlRequestPort::MergeFrom(const LaDMCCtrlRequestPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      ladmcctrlrequest_nu_ = from.ladmcctrlrequest_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      ladmcctrlrequestinterface_nu_ = from.ladmcctrlrequestinterface_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000010u) {
      ladmcctrlrequestsource_nu_ = from.ladmcctrlrequestsource_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      steerwheelangreq_rad_ = from.steerwheelangreq_rad_;
    }
    if (cached_has_bits & 0x00000040u) {
      rearsteertorquereq_nm_ = from.rearsteertorquereq_nm_;
    }
    if (cached_has_bits & 0x00000080u) {
      curvaturereq_1pm_ = from.curvaturereq_1pm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      frontsteerangreq_rad_ = from.frontsteerangreq_rad_;
    }
    if (cached_has_bits & 0x00000200u) {
      frontsteertorquereq_nm_ = from.frontsteertorquereq_nm_;
    }
    if (cached_has_bits & 0x00000400u) {
      rearsteerangreq_rad_ = from.rearsteerangreq_rad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaDMCCtrlRequestPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaDMCCtrlRequestPort::CopyFrom(const LaDMCCtrlRequestPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaDMCCtrlRequestPort::IsInitialized() const {
  return true;
}

void LaDMCCtrlRequestPort::InternalSwap(LaDMCCtrlRequestPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(ladmcctrlrequest_nu_, other->ladmcctrlrequest_nu_);
  swap(ladmcctrlrequestinterface_nu_, other->ladmcctrlrequestinterface_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ladmcctrlrequestsource_nu_, other->ladmcctrlrequestsource_nu_);
  swap(steerwheelangreq_rad_, other->steerwheelangreq_rad_);
  swap(rearsteertorquereq_nm_, other->rearsteertorquereq_nm_);
  swap(curvaturereq_1pm_, other->curvaturereq_1pm_);
  swap(frontsteerangreq_rad_, other->frontsteerangreq_rad_);
  swap(frontsteertorquereq_nm_, other->frontsteertorquereq_nm_);
  swap(rearsteerangreq_rad_, other->rearsteerangreq_rad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaDMCCtrlRequestPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaDMCCtrlRequestPort_array_port::InitAsDefaultInstance() {
}
class LaDMCCtrlRequestPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<LaDMCCtrlRequestPort_array_port>()._has_bits_);
};

LaDMCCtrlRequestPort_array_port::LaDMCCtrlRequestPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
}
LaDMCCtrlRequestPort_array_port::LaDMCCtrlRequestPort_array_port(const LaDMCCtrlRequestPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
}

void LaDMCCtrlRequestPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaDMCCtrlRequestPort_array_port_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto.base);
}

LaDMCCtrlRequestPort_array_port::~LaDMCCtrlRequestPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  SharedDtor();
}

void LaDMCCtrlRequestPort_array_port::SharedDtor() {
}

void LaDMCCtrlRequestPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaDMCCtrlRequestPort_array_port& LaDMCCtrlRequestPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaDMCCtrlRequestPort_array_port_ap_5ftrjctl_2fla_5fdmcctrl_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void LaDMCCtrlRequestPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LaDMCCtrlRequestPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort data = 2648;
      case 2648:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaDMCCtrlRequestPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort data = 2648;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2648, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  return target;
}

size_t LaDMCCtrlRequestPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort data = 2648;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaDMCCtrlRequestPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const LaDMCCtrlRequestPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaDMCCtrlRequestPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
    MergeFrom(*source);
  }
}

void LaDMCCtrlRequestPort_array_port::MergeFrom(const LaDMCCtrlRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void LaDMCCtrlRequestPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaDMCCtrlRequestPort_array_port::CopyFrom(const LaDMCCtrlRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.la_dmcctrl_request_port.LaDMCCtrlRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaDMCCtrlRequestPort_array_port::IsInitialized() const {
  return true;
}

void LaDMCCtrlRequestPort_array_port::InternalSwap(LaDMCCtrlRequestPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaDMCCtrlRequestPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace la_dmcctrl_request_port
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort* Arena::CreateMaybeMessage< ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::la_dmcctrl_request_port::LaDMCCtrlRequestPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
