// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/mfcontrol_status_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "ap_trjctl/lodmc_handshake_failed_status.pb.h"
#include "ap_trjctl/ladmc_handshake_failed_status.pb.h"
#include "ap_trjctl/lateral_control_saturation_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto;
namespace pb {
namespace ap_trjctl {
namespace mfcontrol_status_port {
class MFControlStatusPort;
class MFControlStatusPortDefaultTypeInternal;
extern MFControlStatusPortDefaultTypeInternal _MFControlStatusPort_default_instance_;
class MFControlStatusPort_array_port;
class MFControlStatusPort_array_portDefaultTypeInternal;
extern MFControlStatusPort_array_portDefaultTypeInternal _MFControlStatusPort_array_port_default_instance_;
}  // namespace mfcontrol_status_port
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* Arena::CreateMaybeMessage<::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort>(Arena*);
template<> ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port* Arena::CreateMaybeMessage<::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_trjctl {
namespace mfcontrol_status_port {

// ===================================================================

class MFControlStatusPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort) */ {
 public:
  MFControlStatusPort();
  virtual ~MFControlStatusPort();

  MFControlStatusPort(const MFControlStatusPort& from);
  MFControlStatusPort(MFControlStatusPort&& from) noexcept
    : MFControlStatusPort() {
    *this = ::std::move(from);
  }

  inline MFControlStatusPort& operator=(const MFControlStatusPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline MFControlStatusPort& operator=(MFControlStatusPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MFControlStatusPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MFControlStatusPort* internal_default_instance() {
    return reinterpret_cast<const MFControlStatusPort*>(
               &_MFControlStatusPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MFControlStatusPort& a, MFControlStatusPort& b) {
    a.Swap(&b);
  }
  inline void Swap(MFControlStatusPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MFControlStatusPort* New() const final {
    return CreateMaybeMessage<MFControlStatusPort>(nullptr);
  }

  MFControlStatusPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MFControlStatusPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MFControlStatusPort& from);
  void MergeFrom(const MFControlStatusPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MFControlStatusPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto);
    return ::descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kVehStandstillHoldNuFieldNumber = 2442,
    kVehStandstillSecuredNuFieldNumber = 1064,
    kDriverSteerIntervDetectedNuFieldNumber = 407,
    kLadmcHandshakeFailedStatusNuFieldNumber = 1426,
    kLateralControlSaturationStatusNuFieldNumber = 1459,
    kLateralPathControlFailedNuFieldNumber = 3454,
    kLongitudinalPathControlFailedNuFieldNumber = 704,
    kLateralControlFailedNuFieldNumber = 1566,
    kLongitudinalControlSaturatedNuFieldNumber = 392,
    kUiVersionNumberFieldNumber = 2124,
    kNumUsedCtrlPointsNuFieldNumber = 2199,
    kCorrectGearEngagedNuFieldNumber = 1618,
    kLongitudinalControlFinishedNuFieldNumber = 2875,
    kLateralControlFinishedNuFieldNumber = 3148,
    kLongitudinalControlFailedNuFieldNumber = 2246,
    kLodmcHandshakeFailedStatusNuFieldNumber = 2822,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional bool vehStandstillHold_nu = 2442;
  bool has_vehstandstillhold_nu() const;
  private:
  bool _internal_has_vehstandstillhold_nu() const;
  public:
  void clear_vehstandstillhold_nu();
  bool vehstandstillhold_nu() const;
  void set_vehstandstillhold_nu(bool value);
  private:
  bool _internal_vehstandstillhold_nu() const;
  void _internal_set_vehstandstillhold_nu(bool value);
  public:

  // optional bool vehStandstillSecured_nu = 1064;
  bool has_vehstandstillsecured_nu() const;
  private:
  bool _internal_has_vehstandstillsecured_nu() const;
  public:
  void clear_vehstandstillsecured_nu();
  bool vehstandstillsecured_nu() const;
  void set_vehstandstillsecured_nu(bool value);
  private:
  bool _internal_vehstandstillsecured_nu() const;
  void _internal_set_vehstandstillsecured_nu(bool value);
  public:

  // optional bool driverSteerIntervDetected_nu = 407;
  bool has_driversteerintervdetected_nu() const;
  private:
  bool _internal_has_driversteerintervdetected_nu() const;
  public:
  void clear_driversteerintervdetected_nu();
  bool driversteerintervdetected_nu() const;
  void set_driversteerintervdetected_nu(bool value);
  private:
  bool _internal_driversteerintervdetected_nu() const;
  void _internal_set_driversteerintervdetected_nu(bool value);
  public:

  // optional .pb.ap_trjctl.ladmc_handshake_failed_status.LadmcHandshakeFailedStatus ladmcHandshakeFailedStatus_nu = 1426;
  bool has_ladmchandshakefailedstatus_nu() const;
  private:
  bool _internal_has_ladmchandshakefailedstatus_nu() const;
  public:
  void clear_ladmchandshakefailedstatus_nu();
  ::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus ladmchandshakefailedstatus_nu() const;
  void set_ladmchandshakefailedstatus_nu(::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus value);
  private:
  ::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus _internal_ladmchandshakefailedstatus_nu() const;
  void _internal_set_ladmchandshakefailedstatus_nu(::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus value);
  public:

  // optional .pb.ap_trjctl.lateral_control_saturation_status.LateralControlSaturationStatus lateralControlSaturationStatus_nu = 1459;
  bool has_lateralcontrolsaturationstatus_nu() const;
  private:
  bool _internal_has_lateralcontrolsaturationstatus_nu() const;
  public:
  void clear_lateralcontrolsaturationstatus_nu();
  ::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus lateralcontrolsaturationstatus_nu() const;
  void set_lateralcontrolsaturationstatus_nu(::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus value);
  private:
  ::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus _internal_lateralcontrolsaturationstatus_nu() const;
  void _internal_set_lateralcontrolsaturationstatus_nu(::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus value);
  public:

  // optional bool lateralPathControlFailed_nu = 3454;
  bool has_lateralpathcontrolfailed_nu() const;
  private:
  bool _internal_has_lateralpathcontrolfailed_nu() const;
  public:
  void clear_lateralpathcontrolfailed_nu();
  bool lateralpathcontrolfailed_nu() const;
  void set_lateralpathcontrolfailed_nu(bool value);
  private:
  bool _internal_lateralpathcontrolfailed_nu() const;
  void _internal_set_lateralpathcontrolfailed_nu(bool value);
  public:

  // optional bool longitudinalPathControlFailed_nu = 704;
  bool has_longitudinalpathcontrolfailed_nu() const;
  private:
  bool _internal_has_longitudinalpathcontrolfailed_nu() const;
  public:
  void clear_longitudinalpathcontrolfailed_nu();
  bool longitudinalpathcontrolfailed_nu() const;
  void set_longitudinalpathcontrolfailed_nu(bool value);
  private:
  bool _internal_longitudinalpathcontrolfailed_nu() const;
  void _internal_set_longitudinalpathcontrolfailed_nu(bool value);
  public:

  // optional bool lateralControlFailed_nu = 1566;
  bool has_lateralcontrolfailed_nu() const;
  private:
  bool _internal_has_lateralcontrolfailed_nu() const;
  public:
  void clear_lateralcontrolfailed_nu();
  bool lateralcontrolfailed_nu() const;
  void set_lateralcontrolfailed_nu(bool value);
  private:
  bool _internal_lateralcontrolfailed_nu() const;
  void _internal_set_lateralcontrolfailed_nu(bool value);
  public:

  // optional bool longitudinalControlSaturated_nu = 392;
  bool has_longitudinalcontrolsaturated_nu() const;
  private:
  bool _internal_has_longitudinalcontrolsaturated_nu() const;
  public:
  void clear_longitudinalcontrolsaturated_nu();
  bool longitudinalcontrolsaturated_nu() const;
  void set_longitudinalcontrolsaturated_nu(bool value);
  private:
  bool _internal_longitudinalcontrolsaturated_nu() const;
  void _internal_set_longitudinalcontrolsaturated_nu(bool value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 numUsedCtrlPoints_nu = 2199;
  bool has_numusedctrlpoints_nu() const;
  private:
  bool _internal_has_numusedctrlpoints_nu() const;
  public:
  void clear_numusedctrlpoints_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 numusedctrlpoints_nu() const;
  void set_numusedctrlpoints_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numusedctrlpoints_nu() const;
  void _internal_set_numusedctrlpoints_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool correctGearEngaged_nu = 1618;
  bool has_correctgearengaged_nu() const;
  private:
  bool _internal_has_correctgearengaged_nu() const;
  public:
  void clear_correctgearengaged_nu();
  bool correctgearengaged_nu() const;
  void set_correctgearengaged_nu(bool value);
  private:
  bool _internal_correctgearengaged_nu() const;
  void _internal_set_correctgearengaged_nu(bool value);
  public:

  // optional bool longitudinalControlFinished_nu = 2875;
  bool has_longitudinalcontrolfinished_nu() const;
  private:
  bool _internal_has_longitudinalcontrolfinished_nu() const;
  public:
  void clear_longitudinalcontrolfinished_nu();
  bool longitudinalcontrolfinished_nu() const;
  void set_longitudinalcontrolfinished_nu(bool value);
  private:
  bool _internal_longitudinalcontrolfinished_nu() const;
  void _internal_set_longitudinalcontrolfinished_nu(bool value);
  public:

  // optional bool lateralControlFinished_nu = 3148;
  bool has_lateralcontrolfinished_nu() const;
  private:
  bool _internal_has_lateralcontrolfinished_nu() const;
  public:
  void clear_lateralcontrolfinished_nu();
  bool lateralcontrolfinished_nu() const;
  void set_lateralcontrolfinished_nu(bool value);
  private:
  bool _internal_lateralcontrolfinished_nu() const;
  void _internal_set_lateralcontrolfinished_nu(bool value);
  public:

  // optional bool longitudinalControlFailed_nu = 2246;
  bool has_longitudinalcontrolfailed_nu() const;
  private:
  bool _internal_has_longitudinalcontrolfailed_nu() const;
  public:
  void clear_longitudinalcontrolfailed_nu();
  bool longitudinalcontrolfailed_nu() const;
  void set_longitudinalcontrolfailed_nu(bool value);
  private:
  bool _internal_longitudinalcontrolfailed_nu() const;
  void _internal_set_longitudinalcontrolfailed_nu(bool value);
  public:

  // optional .pb.ap_trjctl.lodmc_handshake_failed_status.LodmcHandshakeFailedStatus lodmcHandshakeFailedStatus_nu = 2822;
  bool has_lodmchandshakefailedstatus_nu() const;
  private:
  bool _internal_has_lodmchandshakefailedstatus_nu() const;
  public:
  void clear_lodmchandshakefailedstatus_nu();
  ::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus lodmchandshakefailedstatus_nu() const;
  void set_lodmchandshakefailedstatus_nu(::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus value);
  private:
  ::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus _internal_lodmchandshakefailedstatus_nu() const;
  void _internal_set_lodmchandshakefailedstatus_nu(::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  bool vehstandstillhold_nu_;
  bool vehstandstillsecured_nu_;
  bool driversteerintervdetected_nu_;
  int ladmchandshakefailedstatus_nu_;
  int lateralcontrolsaturationstatus_nu_;
  bool lateralpathcontrolfailed_nu_;
  bool longitudinalpathcontrolfailed_nu_;
  bool lateralcontrolfailed_nu_;
  bool longitudinalcontrolsaturated_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numusedctrlpoints_nu_;
  bool correctgearengaged_nu_;
  bool longitudinalcontrolfinished_nu_;
  bool lateralcontrolfinished_nu_;
  bool longitudinalcontrolfailed_nu_;
  int lodmchandshakefailedstatus_nu_;
  friend struct ::TableStruct_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto;
};
// -------------------------------------------------------------------

class MFControlStatusPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port) */ {
 public:
  MFControlStatusPort_array_port();
  virtual ~MFControlStatusPort_array_port();

  MFControlStatusPort_array_port(const MFControlStatusPort_array_port& from);
  MFControlStatusPort_array_port(MFControlStatusPort_array_port&& from) noexcept
    : MFControlStatusPort_array_port() {
    *this = ::std::move(from);
  }

  inline MFControlStatusPort_array_port& operator=(const MFControlStatusPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline MFControlStatusPort_array_port& operator=(MFControlStatusPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MFControlStatusPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MFControlStatusPort_array_port* internal_default_instance() {
    return reinterpret_cast<const MFControlStatusPort_array_port*>(
               &_MFControlStatusPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MFControlStatusPort_array_port& a, MFControlStatusPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(MFControlStatusPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MFControlStatusPort_array_port* New() const final {
    return CreateMaybeMessage<MFControlStatusPort_array_port>(nullptr);
  }

  MFControlStatusPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MFControlStatusPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MFControlStatusPort_array_port& from);
  void MergeFrom(const MFControlStatusPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MFControlStatusPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto);
    return ::descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3136,
  };
  // repeated .pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort data = 3136;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort >*
      mutable_data();
  private:
  const ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort& _internal_data(int index) const;
  ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* _internal_add_data();
  public:
  const ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort& data(int index) const;
  ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort > data_;
  friend struct ::TableStruct_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MFControlStatusPort

// optional uint32 uiVersionNumber = 2124;
inline bool MFControlStatusPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void MFControlStatusPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MFControlStatusPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MFControlStatusPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void MFControlStatusPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  uiversionnumber_ = value;
}
inline void MFControlStatusPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool MFControlStatusPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool MFControlStatusPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& MFControlStatusPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& MFControlStatusPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* MFControlStatusPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* MFControlStatusPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* MFControlStatusPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void MFControlStatusPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.sSigHeader)
}

// optional uint32 numUsedCtrlPoints_nu = 2199;
inline bool MFControlStatusPort::_internal_has_numusedctrlpoints_nu() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_numusedctrlpoints_nu() const {
  return _internal_has_numusedctrlpoints_nu();
}
inline void MFControlStatusPort::clear_numusedctrlpoints_nu() {
  numusedctrlpoints_nu_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MFControlStatusPort::_internal_numusedctrlpoints_nu() const {
  return numusedctrlpoints_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MFControlStatusPort::numusedctrlpoints_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.numUsedCtrlPoints_nu)
  return _internal_numusedctrlpoints_nu();
}
inline void MFControlStatusPort::_internal_set_numusedctrlpoints_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  numusedctrlpoints_nu_ = value;
}
inline void MFControlStatusPort::set_numusedctrlpoints_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numusedctrlpoints_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.numUsedCtrlPoints_nu)
}

// optional .pb.ap_trjctl.lodmc_handshake_failed_status.LodmcHandshakeFailedStatus lodmcHandshakeFailedStatus_nu = 2822;
inline bool MFControlStatusPort::_internal_has_lodmchandshakefailedstatus_nu() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_lodmchandshakefailedstatus_nu() const {
  return _internal_has_lodmchandshakefailedstatus_nu();
}
inline void MFControlStatusPort::clear_lodmchandshakefailedstatus_nu() {
  lodmchandshakefailedstatus_nu_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus MFControlStatusPort::_internal_lodmchandshakefailedstatus_nu() const {
  return static_cast< ::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus >(lodmchandshakefailedstatus_nu_);
}
inline ::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus MFControlStatusPort::lodmchandshakefailedstatus_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lodmcHandshakeFailedStatus_nu)
  return _internal_lodmchandshakefailedstatus_nu();
}
inline void MFControlStatusPort::_internal_set_lodmchandshakefailedstatus_nu(::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus value) {
  assert(::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  lodmchandshakefailedstatus_nu_ = value;
}
inline void MFControlStatusPort::set_lodmchandshakefailedstatus_nu(::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus value) {
  _internal_set_lodmchandshakefailedstatus_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lodmcHandshakeFailedStatus_nu)
}

// optional .pb.ap_trjctl.ladmc_handshake_failed_status.LadmcHandshakeFailedStatus ladmcHandshakeFailedStatus_nu = 1426;
inline bool MFControlStatusPort::_internal_has_ladmchandshakefailedstatus_nu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_ladmchandshakefailedstatus_nu() const {
  return _internal_has_ladmchandshakefailedstatus_nu();
}
inline void MFControlStatusPort::clear_ladmchandshakefailedstatus_nu() {
  ladmchandshakefailedstatus_nu_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus MFControlStatusPort::_internal_ladmchandshakefailedstatus_nu() const {
  return static_cast< ::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus >(ladmchandshakefailedstatus_nu_);
}
inline ::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus MFControlStatusPort::ladmchandshakefailedstatus_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.ladmcHandshakeFailedStatus_nu)
  return _internal_ladmchandshakefailedstatus_nu();
}
inline void MFControlStatusPort::_internal_set_ladmchandshakefailedstatus_nu(::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus value) {
  assert(::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  ladmchandshakefailedstatus_nu_ = value;
}
inline void MFControlStatusPort::set_ladmchandshakefailedstatus_nu(::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus value) {
  _internal_set_ladmchandshakefailedstatus_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.ladmcHandshakeFailedStatus_nu)
}

// optional bool correctGearEngaged_nu = 1618;
inline bool MFControlStatusPort::_internal_has_correctgearengaged_nu() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_correctgearengaged_nu() const {
  return _internal_has_correctgearengaged_nu();
}
inline void MFControlStatusPort::clear_correctgearengaged_nu() {
  correctgearengaged_nu_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool MFControlStatusPort::_internal_correctgearengaged_nu() const {
  return correctgearengaged_nu_;
}
inline bool MFControlStatusPort::correctgearengaged_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.correctGearEngaged_nu)
  return _internal_correctgearengaged_nu();
}
inline void MFControlStatusPort::_internal_set_correctgearengaged_nu(bool value) {
  _has_bits_[0] |= 0x00001000u;
  correctgearengaged_nu_ = value;
}
inline void MFControlStatusPort::set_correctgearengaged_nu(bool value) {
  _internal_set_correctgearengaged_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.correctGearEngaged_nu)
}

// optional bool longitudinalControlFinished_nu = 2875;
inline bool MFControlStatusPort::_internal_has_longitudinalcontrolfinished_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_longitudinalcontrolfinished_nu() const {
  return _internal_has_longitudinalcontrolfinished_nu();
}
inline void MFControlStatusPort::clear_longitudinalcontrolfinished_nu() {
  longitudinalcontrolfinished_nu_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool MFControlStatusPort::_internal_longitudinalcontrolfinished_nu() const {
  return longitudinalcontrolfinished_nu_;
}
inline bool MFControlStatusPort::longitudinalcontrolfinished_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalControlFinished_nu)
  return _internal_longitudinalcontrolfinished_nu();
}
inline void MFControlStatusPort::_internal_set_longitudinalcontrolfinished_nu(bool value) {
  _has_bits_[0] |= 0x00002000u;
  longitudinalcontrolfinished_nu_ = value;
}
inline void MFControlStatusPort::set_longitudinalcontrolfinished_nu(bool value) {
  _internal_set_longitudinalcontrolfinished_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalControlFinished_nu)
}

// optional bool lateralControlFinished_nu = 3148;
inline bool MFControlStatusPort::_internal_has_lateralcontrolfinished_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_lateralcontrolfinished_nu() const {
  return _internal_has_lateralcontrolfinished_nu();
}
inline void MFControlStatusPort::clear_lateralcontrolfinished_nu() {
  lateralcontrolfinished_nu_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool MFControlStatusPort::_internal_lateralcontrolfinished_nu() const {
  return lateralcontrolfinished_nu_;
}
inline bool MFControlStatusPort::lateralcontrolfinished_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralControlFinished_nu)
  return _internal_lateralcontrolfinished_nu();
}
inline void MFControlStatusPort::_internal_set_lateralcontrolfinished_nu(bool value) {
  _has_bits_[0] |= 0x00004000u;
  lateralcontrolfinished_nu_ = value;
}
inline void MFControlStatusPort::set_lateralcontrolfinished_nu(bool value) {
  _internal_set_lateralcontrolfinished_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralControlFinished_nu)
}

// optional bool longitudinalControlFailed_nu = 2246;
inline bool MFControlStatusPort::_internal_has_longitudinalcontrolfailed_nu() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_longitudinalcontrolfailed_nu() const {
  return _internal_has_longitudinalcontrolfailed_nu();
}
inline void MFControlStatusPort::clear_longitudinalcontrolfailed_nu() {
  longitudinalcontrolfailed_nu_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool MFControlStatusPort::_internal_longitudinalcontrolfailed_nu() const {
  return longitudinalcontrolfailed_nu_;
}
inline bool MFControlStatusPort::longitudinalcontrolfailed_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalControlFailed_nu)
  return _internal_longitudinalcontrolfailed_nu();
}
inline void MFControlStatusPort::_internal_set_longitudinalcontrolfailed_nu(bool value) {
  _has_bits_[0] |= 0x00008000u;
  longitudinalcontrolfailed_nu_ = value;
}
inline void MFControlStatusPort::set_longitudinalcontrolfailed_nu(bool value) {
  _internal_set_longitudinalcontrolfailed_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalControlFailed_nu)
}

// optional bool lateralPathControlFailed_nu = 3454;
inline bool MFControlStatusPort::_internal_has_lateralpathcontrolfailed_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_lateralpathcontrolfailed_nu() const {
  return _internal_has_lateralpathcontrolfailed_nu();
}
inline void MFControlStatusPort::clear_lateralpathcontrolfailed_nu() {
  lateralpathcontrolfailed_nu_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool MFControlStatusPort::_internal_lateralpathcontrolfailed_nu() const {
  return lateralpathcontrolfailed_nu_;
}
inline bool MFControlStatusPort::lateralpathcontrolfailed_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralPathControlFailed_nu)
  return _internal_lateralpathcontrolfailed_nu();
}
inline void MFControlStatusPort::_internal_set_lateralpathcontrolfailed_nu(bool value) {
  _has_bits_[0] |= 0x00000040u;
  lateralpathcontrolfailed_nu_ = value;
}
inline void MFControlStatusPort::set_lateralpathcontrolfailed_nu(bool value) {
  _internal_set_lateralpathcontrolfailed_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralPathControlFailed_nu)
}

// optional bool longitudinalPathControlFailed_nu = 704;
inline bool MFControlStatusPort::_internal_has_longitudinalpathcontrolfailed_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_longitudinalpathcontrolfailed_nu() const {
  return _internal_has_longitudinalpathcontrolfailed_nu();
}
inline void MFControlStatusPort::clear_longitudinalpathcontrolfailed_nu() {
  longitudinalpathcontrolfailed_nu_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool MFControlStatusPort::_internal_longitudinalpathcontrolfailed_nu() const {
  return longitudinalpathcontrolfailed_nu_;
}
inline bool MFControlStatusPort::longitudinalpathcontrolfailed_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalPathControlFailed_nu)
  return _internal_longitudinalpathcontrolfailed_nu();
}
inline void MFControlStatusPort::_internal_set_longitudinalpathcontrolfailed_nu(bool value) {
  _has_bits_[0] |= 0x00000080u;
  longitudinalpathcontrolfailed_nu_ = value;
}
inline void MFControlStatusPort::set_longitudinalpathcontrolfailed_nu(bool value) {
  _internal_set_longitudinalpathcontrolfailed_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalPathControlFailed_nu)
}

// optional bool lateralControlFailed_nu = 1566;
inline bool MFControlStatusPort::_internal_has_lateralcontrolfailed_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_lateralcontrolfailed_nu() const {
  return _internal_has_lateralcontrolfailed_nu();
}
inline void MFControlStatusPort::clear_lateralcontrolfailed_nu() {
  lateralcontrolfailed_nu_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool MFControlStatusPort::_internal_lateralcontrolfailed_nu() const {
  return lateralcontrolfailed_nu_;
}
inline bool MFControlStatusPort::lateralcontrolfailed_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralControlFailed_nu)
  return _internal_lateralcontrolfailed_nu();
}
inline void MFControlStatusPort::_internal_set_lateralcontrolfailed_nu(bool value) {
  _has_bits_[0] |= 0x00000100u;
  lateralcontrolfailed_nu_ = value;
}
inline void MFControlStatusPort::set_lateralcontrolfailed_nu(bool value) {
  _internal_set_lateralcontrolfailed_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralControlFailed_nu)
}

// optional bool longitudinalControlSaturated_nu = 392;
inline bool MFControlStatusPort::_internal_has_longitudinalcontrolsaturated_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_longitudinalcontrolsaturated_nu() const {
  return _internal_has_longitudinalcontrolsaturated_nu();
}
inline void MFControlStatusPort::clear_longitudinalcontrolsaturated_nu() {
  longitudinalcontrolsaturated_nu_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool MFControlStatusPort::_internal_longitudinalcontrolsaturated_nu() const {
  return longitudinalcontrolsaturated_nu_;
}
inline bool MFControlStatusPort::longitudinalcontrolsaturated_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalControlSaturated_nu)
  return _internal_longitudinalcontrolsaturated_nu();
}
inline void MFControlStatusPort::_internal_set_longitudinalcontrolsaturated_nu(bool value) {
  _has_bits_[0] |= 0x00000200u;
  longitudinalcontrolsaturated_nu_ = value;
}
inline void MFControlStatusPort::set_longitudinalcontrolsaturated_nu(bool value) {
  _internal_set_longitudinalcontrolsaturated_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.longitudinalControlSaturated_nu)
}

// optional .pb.ap_trjctl.lateral_control_saturation_status.LateralControlSaturationStatus lateralControlSaturationStatus_nu = 1459;
inline bool MFControlStatusPort::_internal_has_lateralcontrolsaturationstatus_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_lateralcontrolsaturationstatus_nu() const {
  return _internal_has_lateralcontrolsaturationstatus_nu();
}
inline void MFControlStatusPort::clear_lateralcontrolsaturationstatus_nu() {
  lateralcontrolsaturationstatus_nu_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus MFControlStatusPort::_internal_lateralcontrolsaturationstatus_nu() const {
  return static_cast< ::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus >(lateralcontrolsaturationstatus_nu_);
}
inline ::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus MFControlStatusPort::lateralcontrolsaturationstatus_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralControlSaturationStatus_nu)
  return _internal_lateralcontrolsaturationstatus_nu();
}
inline void MFControlStatusPort::_internal_set_lateralcontrolsaturationstatus_nu(::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus value) {
  assert(::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  lateralcontrolsaturationstatus_nu_ = value;
}
inline void MFControlStatusPort::set_lateralcontrolsaturationstatus_nu(::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus value) {
  _internal_set_lateralcontrolsaturationstatus_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.lateralControlSaturationStatus_nu)
}

// optional bool vehStandstillHold_nu = 2442;
inline bool MFControlStatusPort::_internal_has_vehstandstillhold_nu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_vehstandstillhold_nu() const {
  return _internal_has_vehstandstillhold_nu();
}
inline void MFControlStatusPort::clear_vehstandstillhold_nu() {
  vehstandstillhold_nu_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MFControlStatusPort::_internal_vehstandstillhold_nu() const {
  return vehstandstillhold_nu_;
}
inline bool MFControlStatusPort::vehstandstillhold_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.vehStandstillHold_nu)
  return _internal_vehstandstillhold_nu();
}
inline void MFControlStatusPort::_internal_set_vehstandstillhold_nu(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vehstandstillhold_nu_ = value;
}
inline void MFControlStatusPort::set_vehstandstillhold_nu(bool value) {
  _internal_set_vehstandstillhold_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.vehStandstillHold_nu)
}

// optional bool vehStandstillSecured_nu = 1064;
inline bool MFControlStatusPort::_internal_has_vehstandstillsecured_nu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_vehstandstillsecured_nu() const {
  return _internal_has_vehstandstillsecured_nu();
}
inline void MFControlStatusPort::clear_vehstandstillsecured_nu() {
  vehstandstillsecured_nu_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MFControlStatusPort::_internal_vehstandstillsecured_nu() const {
  return vehstandstillsecured_nu_;
}
inline bool MFControlStatusPort::vehstandstillsecured_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.vehStandstillSecured_nu)
  return _internal_vehstandstillsecured_nu();
}
inline void MFControlStatusPort::_internal_set_vehstandstillsecured_nu(bool value) {
  _has_bits_[0] |= 0x00000004u;
  vehstandstillsecured_nu_ = value;
}
inline void MFControlStatusPort::set_vehstandstillsecured_nu(bool value) {
  _internal_set_vehstandstillsecured_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.vehStandstillSecured_nu)
}

// optional bool driverSteerIntervDetected_nu = 407;
inline bool MFControlStatusPort::_internal_has_driversteerintervdetected_nu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MFControlStatusPort::has_driversteerintervdetected_nu() const {
  return _internal_has_driversteerintervdetected_nu();
}
inline void MFControlStatusPort::clear_driversteerintervdetected_nu() {
  driversteerintervdetected_nu_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MFControlStatusPort::_internal_driversteerintervdetected_nu() const {
  return driversteerintervdetected_nu_;
}
inline bool MFControlStatusPort::driversteerintervdetected_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.driverSteerIntervDetected_nu)
  return _internal_driversteerintervdetected_nu();
}
inline void MFControlStatusPort::_internal_set_driversteerintervdetected_nu(bool value) {
  _has_bits_[0] |= 0x00000008u;
  driversteerintervdetected_nu_ = value;
}
inline void MFControlStatusPort::set_driversteerintervdetected_nu(bool value) {
  _internal_set_driversteerintervdetected_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort.driverSteerIntervDetected_nu)
}

// -------------------------------------------------------------------

// MFControlStatusPort_array_port

// repeated .pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort data = 3136;
inline int MFControlStatusPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int MFControlStatusPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void MFControlStatusPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* MFControlStatusPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort >*
MFControlStatusPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port.data)
  return &data_;
}
inline const ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort& MFControlStatusPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort& MFControlStatusPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* MFControlStatusPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* MFControlStatusPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort >&
MFControlStatusPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mfcontrol_status_port
}  // namespace ap_trjctl
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto
