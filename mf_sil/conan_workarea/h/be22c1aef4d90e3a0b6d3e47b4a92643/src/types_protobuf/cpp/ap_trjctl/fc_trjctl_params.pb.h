// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/fc_trjctl_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "ap_trjctl/fc_trjctl_vehicle_params.pb.h"
#include "ap_trjctl/fc_trjctl_sys_func_params.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto;
namespace pb {
namespace ap_trjctl {
namespace fc_trjctl_params {
class FC_TRJCTL_Params;
class FC_TRJCTL_ParamsDefaultTypeInternal;
extern FC_TRJCTL_ParamsDefaultTypeInternal _FC_TRJCTL_Params_default_instance_;
class FC_TRJCTL_Params_array_port;
class FC_TRJCTL_Params_array_portDefaultTypeInternal;
extern FC_TRJCTL_Params_array_portDefaultTypeInternal _FC_TRJCTL_Params_array_port_default_instance_;
}  // namespace fc_trjctl_params
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* Arena::CreateMaybeMessage<::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params>(Arena*);
template<> ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port* Arena::CreateMaybeMessage<::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_trjctl {
namespace fc_trjctl_params {

// ===================================================================

class FC_TRJCTL_Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params) */ {
 public:
  FC_TRJCTL_Params();
  virtual ~FC_TRJCTL_Params();

  FC_TRJCTL_Params(const FC_TRJCTL_Params& from);
  FC_TRJCTL_Params(FC_TRJCTL_Params&& from) noexcept
    : FC_TRJCTL_Params() {
    *this = ::std::move(from);
  }

  inline FC_TRJCTL_Params& operator=(const FC_TRJCTL_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TRJCTL_Params& operator=(FC_TRJCTL_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TRJCTL_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TRJCTL_Params* internal_default_instance() {
    return reinterpret_cast<const FC_TRJCTL_Params*>(
               &_FC_TRJCTL_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FC_TRJCTL_Params& a, FC_TRJCTL_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TRJCTL_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TRJCTL_Params* New() const final {
    return CreateMaybeMessage<FC_TRJCTL_Params>(nullptr);
  }

  FC_TRJCTL_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TRJCTL_Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TRJCTL_Params& from);
  void MergeFrom(const FC_TRJCTL_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TRJCTL_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto);
    return ::descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAPCPCGAINLATDEVIATIONNUFieldNumber = 2177,
    kAPCPCGAINVELVECMPSFieldNumber = 2333,
    kAPCPCGAINYAWDEVIATIONNUFieldNumber = 3806,
    kSSigHeaderFieldNumber = 1033,
    kSysFuncParamsFieldNumber = 1458,
    kVehicleParamsFieldNumber = 3431,
    kAPCDRVRESISTFLTYPENUFieldNumber = 3986,
    kAPCPCCURVPREVFACTORADDNUFieldNumber = 278,
    kAPCDRVRESISTRRREDDISTMFieldNumber = 300,
    kAPCPCFAILMAXLATERRORMFieldNumber = 365,
    kAPCPCRATELIMITFACTORNUFieldNumber = 391,
    kAPCPCCURVPREVIEWFACTORNUFieldNumber = 470,
    kAPCSECUREFINISHEDTIMESFieldNumber = 480,
    kAPCDRVRESISTFRREDDISTMFieldNumber = 565,
    kAPCWFCWSVELLIMITMPSFieldNumber = 580,
    kAPCDRIVEOFFDISTANCETHRESMFieldNumber = 646,
    kAPCPCFAILMAXYAWERRORRADFieldNumber = 717,
    kAPCMANEUVDTHRESHRESETMFieldNumber = 722,
    kAPCPCFILTFACTRAJSTEPNUFieldNumber = 785,
    kAPCPCSTEERANGLETFILTSFieldNumber = 822,
    kAPCMANEUVFINISHEDHYSTMFieldNumber = 842,
    kAPCPCVELOPREVIEWTIMESFieldNumber = 881,
    kAPCPCCURVPREVREDUCEDNUFieldNumber = 1199,
    kAPCFEATWAITFORCONTACTNUFieldNumber = 1858,
    kAPCFEATWSVELREDUCEDNUFieldNumber = 902,
    kAPCHACKWSLASTSTROKENUFieldNumber = 3,
    kAPCVLVELRAMPLIMITMPS2FieldNumber = 1121,
    kAPCMANEUVFINISHEDLIMITMFieldNumber = 1147,
    kAPCACTIVECONTROLMINTIMESFieldNumber = 1165,
    kAPCPCFIRSTSTEERACCRADPS2FieldNumber = 1208,
    kAPCMINPARKINGVELMPSFieldNumber = 1245,
    kAPCMANEUVFINISHEDTIMEDRVSFieldNumber = 1359,
    kAPCPCCURVPREVIEWMINMFieldNumber = 1419,
    kAPCDRVRESISTFLREDDISTMFieldNumber = 1523,
    kAPCDRVRESISTRLTYPENUFieldNumber = 1585,
    kAPCNOCOMFSTEERWSTHRESMFieldNumber = 1684,
    kAPCLEAVINGPATHBEHINDMFieldNumber = 1689,
    kAPCDRVRESISTRRTYPENUFieldNumber = 1720,
    kAPCDRVRESISTRLREDDISTMFieldNumber = 1770,
    kAPCPCNUMCONTROLGAINSNUFieldNumber = 1772,
    kAPCPCFILTFACTORMAXNUFieldNumber = 1882,
    kAPCSTEERINTERVRISENUFieldNumber = 1975,
    kAPCMANEUVVTHRESHRESETMPSFieldNumber = 2057,
    kAPCLEAVINGPATHBEFOREMFieldNumber = 2074,
    kAPCMANEUVFINISHEDTIMESFieldNumber = 2086,
    kAPCMINDISTREQMFieldNumber = 2098,
    kAPCPCFILTFACVELLIMITMPSFieldNumber = 2115,
    kUiVersionNumberFieldNumber = 2124,
    kAPCSTEERINTERVFILTTIMESFieldNumber = 2179,
    kAPCWFCOVERSHOOTDISTTHRESMFieldNumber = 2209,
    kAPCSTEERSATURATETHRESHRADFieldNumber = 2278,
    kAPCCOMPTIREDEFFACTORNUFieldNumber = 2306,
    kAPCPCFIRSTSTEERVELRADPSFieldNumber = 2388,
    kAPCPCORIENTCTRLINITDISTMFieldNumber = 2389,
    kAPCWFCOVERSHOOTLENGTHMFieldNumber = 2442,
    kAPCWFCWSVELDISTTHRESHMFieldNumber = 2458,
    kAPCSTEERINTERVACTIVENUFieldNumber = 2501,
    kAPCVLRAMPUPVELNUFieldNumber = 4078,
    kAPCVLRAMPUPDISTNUFieldNumber = 3114,
    kAPCDRVRESISTFAKEDATANUFieldNumber = 232,
    kAPCPCMINSTEERVELRADPSFieldNumber = 2558,
    kAPCSTEERSATURATERATERADPSFieldNumber = 2803,
    kAPCHANDSHAKEWAITTHRESTIMESFieldNumber = 2835,
    kAPCPCMAXSTEERACCRADPS2FieldNumber = 2886,
    kAPCFAILMAXLONGOVERSHOOTMFieldNumber = 2963,
    kAPCDRIVEOFFVELOTHRESMPSFieldNumber = 3072,
    kAPCPIYAWDEVIATIONTFILTSFieldNumber = 3076,
    kAPCPCORIENTCTRLENDDISTMFieldNumber = 3435,
    kAPCPCFIRSTSTEERACCURRADFieldNumber = 3467,
    kAPCWFCVDYDRIVEOFFTHRESMFieldNumber = 3598,
    kAPCSTEERINTERVFALLNUFieldNumber = 3740,
    kAPCDRVRESISTFRTYPENUFieldNumber = 3867,
    kAPCWFCVDYDISTTHRESMFieldNumber = 3941,
  };
  // repeated float AP_C_PC_GAIN_LAT_DEVIATION_NU = 2177;
  int ap_c_pc_gain_lat_deviation_nu_size() const;
  private:
  int _internal_ap_c_pc_gain_lat_deviation_nu_size() const;
  public:
  void clear_ap_c_pc_gain_lat_deviation_nu();
  private:
  float _internal_ap_c_pc_gain_lat_deviation_nu(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ap_c_pc_gain_lat_deviation_nu() const;
  void _internal_add_ap_c_pc_gain_lat_deviation_nu(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ap_c_pc_gain_lat_deviation_nu();
  public:
  float ap_c_pc_gain_lat_deviation_nu(int index) const;
  void set_ap_c_pc_gain_lat_deviation_nu(int index, float value);
  void add_ap_c_pc_gain_lat_deviation_nu(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ap_c_pc_gain_lat_deviation_nu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ap_c_pc_gain_lat_deviation_nu();

  // repeated float AP_C_PC_GAIN_VELVEC_MPS = 2333;
  int ap_c_pc_gain_velvec_mps_size() const;
  private:
  int _internal_ap_c_pc_gain_velvec_mps_size() const;
  public:
  void clear_ap_c_pc_gain_velvec_mps();
  private:
  float _internal_ap_c_pc_gain_velvec_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ap_c_pc_gain_velvec_mps() const;
  void _internal_add_ap_c_pc_gain_velvec_mps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ap_c_pc_gain_velvec_mps();
  public:
  float ap_c_pc_gain_velvec_mps(int index) const;
  void set_ap_c_pc_gain_velvec_mps(int index, float value);
  void add_ap_c_pc_gain_velvec_mps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ap_c_pc_gain_velvec_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ap_c_pc_gain_velvec_mps();

  // repeated float AP_C_PC_GAIN_YAW_DEVIATION_NU = 3806;
  int ap_c_pc_gain_yaw_deviation_nu_size() const;
  private:
  int _internal_ap_c_pc_gain_yaw_deviation_nu_size() const;
  public:
  void clear_ap_c_pc_gain_yaw_deviation_nu();
  private:
  float _internal_ap_c_pc_gain_yaw_deviation_nu(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ap_c_pc_gain_yaw_deviation_nu() const;
  void _internal_add_ap_c_pc_gain_yaw_deviation_nu(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ap_c_pc_gain_yaw_deviation_nu();
  public:
  float ap_c_pc_gain_yaw_deviation_nu(int index) const;
  void set_ap_c_pc_gain_yaw_deviation_nu(int index, float value);
  void add_ap_c_pc_gain_yaw_deviation_nu(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ap_c_pc_gain_yaw_deviation_nu() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ap_c_pc_gain_yaw_deviation_nu();

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.ap_trjctl.fc_trjctl_sys_func_params.FC_TRJCTL_Sys_Func_Params sysFuncParams = 1458;
  bool has_sysfuncparams() const;
  private:
  bool _internal_has_sysfuncparams() const;
  public:
  void clear_sysfuncparams();
  const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params& sysfuncparams() const;
  ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* release_sysfuncparams();
  ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* mutable_sysfuncparams();
  void set_allocated_sysfuncparams(::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* sysfuncparams);
  private:
  const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params& _internal_sysfuncparams() const;
  ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* _internal_mutable_sysfuncparams();
  public:

  // optional .pb.ap_trjctl.fc_trjctl_vehicle_params.FC_TRJCTL_Vehicle_Params vehicleParams = 3431;
  bool has_vehicleparams() const;
  private:
  bool _internal_has_vehicleparams() const;
  public:
  void clear_vehicleparams();
  const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params& vehicleparams() const;
  ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* release_vehicleparams();
  ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* mutable_vehicleparams();
  void set_allocated_vehicleparams(::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* vehicleparams);
  private:
  const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params& _internal_vehicleparams() const;
  ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* _internal_mutable_vehicleparams();
  public:

  // optional uint32 AP_C_DRV_RESIST_FL_TYPE_NU = 3986;
  bool has_ap_c_drv_resist_fl_type_nu() const;
  private:
  bool _internal_has_ap_c_drv_resist_fl_type_nu() const;
  public:
  void clear_ap_c_drv_resist_fl_type_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_fl_type_nu() const;
  void set_ap_c_drv_resist_fl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_c_drv_resist_fl_type_nu() const;
  void _internal_set_ap_c_drv_resist_fl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_C_PC_CURV_PREV_FACTOR_ADD_NU = 278;
  bool has_ap_c_pc_curv_prev_factor_add_nu() const;
  private:
  bool _internal_has_ap_c_pc_curv_prev_factor_add_nu() const;
  public:
  void clear_ap_c_pc_curv_prev_factor_add_nu();
  float ap_c_pc_curv_prev_factor_add_nu() const;
  void set_ap_c_pc_curv_prev_factor_add_nu(float value);
  private:
  float _internal_ap_c_pc_curv_prev_factor_add_nu() const;
  void _internal_set_ap_c_pc_curv_prev_factor_add_nu(float value);
  public:

  // optional float AP_C_DRV_RESIST_RR_RED_DIST_M = 300;
  bool has_ap_c_drv_resist_rr_red_dist_m() const;
  private:
  bool _internal_has_ap_c_drv_resist_rr_red_dist_m() const;
  public:
  void clear_ap_c_drv_resist_rr_red_dist_m();
  float ap_c_drv_resist_rr_red_dist_m() const;
  void set_ap_c_drv_resist_rr_red_dist_m(float value);
  private:
  float _internal_ap_c_drv_resist_rr_red_dist_m() const;
  void _internal_set_ap_c_drv_resist_rr_red_dist_m(float value);
  public:

  // optional float AP_C_PC_FAIL_MAX_LAT_ERROR_M = 365;
  bool has_ap_c_pc_fail_max_lat_error_m() const;
  private:
  bool _internal_has_ap_c_pc_fail_max_lat_error_m() const;
  public:
  void clear_ap_c_pc_fail_max_lat_error_m();
  float ap_c_pc_fail_max_lat_error_m() const;
  void set_ap_c_pc_fail_max_lat_error_m(float value);
  private:
  float _internal_ap_c_pc_fail_max_lat_error_m() const;
  void _internal_set_ap_c_pc_fail_max_lat_error_m(float value);
  public:

  // optional float AP_C_PC_RATE_LIMIT_FACTOR_NU = 391;
  bool has_ap_c_pc_rate_limit_factor_nu() const;
  private:
  bool _internal_has_ap_c_pc_rate_limit_factor_nu() const;
  public:
  void clear_ap_c_pc_rate_limit_factor_nu();
  float ap_c_pc_rate_limit_factor_nu() const;
  void set_ap_c_pc_rate_limit_factor_nu(float value);
  private:
  float _internal_ap_c_pc_rate_limit_factor_nu() const;
  void _internal_set_ap_c_pc_rate_limit_factor_nu(float value);
  public:

  // optional float AP_C_PC_CURV_PREVIEW_FACTOR_NU = 470;
  bool has_ap_c_pc_curv_preview_factor_nu() const;
  private:
  bool _internal_has_ap_c_pc_curv_preview_factor_nu() const;
  public:
  void clear_ap_c_pc_curv_preview_factor_nu();
  float ap_c_pc_curv_preview_factor_nu() const;
  void set_ap_c_pc_curv_preview_factor_nu(float value);
  private:
  float _internal_ap_c_pc_curv_preview_factor_nu() const;
  void _internal_set_ap_c_pc_curv_preview_factor_nu(float value);
  public:

  // optional float AP_C_SECURE_FINISHED_TIME_S = 480;
  bool has_ap_c_secure_finished_time_s() const;
  private:
  bool _internal_has_ap_c_secure_finished_time_s() const;
  public:
  void clear_ap_c_secure_finished_time_s();
  float ap_c_secure_finished_time_s() const;
  void set_ap_c_secure_finished_time_s(float value);
  private:
  float _internal_ap_c_secure_finished_time_s() const;
  void _internal_set_ap_c_secure_finished_time_s(float value);
  public:

  // optional float AP_C_DRV_RESIST_FR_RED_DIST_M = 565;
  bool has_ap_c_drv_resist_fr_red_dist_m() const;
  private:
  bool _internal_has_ap_c_drv_resist_fr_red_dist_m() const;
  public:
  void clear_ap_c_drv_resist_fr_red_dist_m();
  float ap_c_drv_resist_fr_red_dist_m() const;
  void set_ap_c_drv_resist_fr_red_dist_m(float value);
  private:
  float _internal_ap_c_drv_resist_fr_red_dist_m() const;
  void _internal_set_ap_c_drv_resist_fr_red_dist_m(float value);
  public:

  // optional float AP_C_WFC_WS_VEL_LIMIT_MPS = 580;
  bool has_ap_c_wfc_ws_vel_limit_mps() const;
  private:
  bool _internal_has_ap_c_wfc_ws_vel_limit_mps() const;
  public:
  void clear_ap_c_wfc_ws_vel_limit_mps();
  float ap_c_wfc_ws_vel_limit_mps() const;
  void set_ap_c_wfc_ws_vel_limit_mps(float value);
  private:
  float _internal_ap_c_wfc_ws_vel_limit_mps() const;
  void _internal_set_ap_c_wfc_ws_vel_limit_mps(float value);
  public:

  // optional float AP_C_DRIVE_OFF_DISTANCE_THRES_M = 646;
  bool has_ap_c_drive_off_distance_thres_m() const;
  private:
  bool _internal_has_ap_c_drive_off_distance_thres_m() const;
  public:
  void clear_ap_c_drive_off_distance_thres_m();
  float ap_c_drive_off_distance_thres_m() const;
  void set_ap_c_drive_off_distance_thres_m(float value);
  private:
  float _internal_ap_c_drive_off_distance_thres_m() const;
  void _internal_set_ap_c_drive_off_distance_thres_m(float value);
  public:

  // optional float AP_C_PC_FAIL_MAX_YAW_ERROR_RAD = 717;
  bool has_ap_c_pc_fail_max_yaw_error_rad() const;
  private:
  bool _internal_has_ap_c_pc_fail_max_yaw_error_rad() const;
  public:
  void clear_ap_c_pc_fail_max_yaw_error_rad();
  float ap_c_pc_fail_max_yaw_error_rad() const;
  void set_ap_c_pc_fail_max_yaw_error_rad(float value);
  private:
  float _internal_ap_c_pc_fail_max_yaw_error_rad() const;
  void _internal_set_ap_c_pc_fail_max_yaw_error_rad(float value);
  public:

  // optional float AP_C_MANEUV_D_THRESH_RESET_M = 722;
  bool has_ap_c_maneuv_d_thresh_reset_m() const;
  private:
  bool _internal_has_ap_c_maneuv_d_thresh_reset_m() const;
  public:
  void clear_ap_c_maneuv_d_thresh_reset_m();
  float ap_c_maneuv_d_thresh_reset_m() const;
  void set_ap_c_maneuv_d_thresh_reset_m(float value);
  private:
  float _internal_ap_c_maneuv_d_thresh_reset_m() const;
  void _internal_set_ap_c_maneuv_d_thresh_reset_m(float value);
  public:

  // optional float AP_C_PC_FILT_FAC_TRAJ_STEP_NU = 785;
  bool has_ap_c_pc_filt_fac_traj_step_nu() const;
  private:
  bool _internal_has_ap_c_pc_filt_fac_traj_step_nu() const;
  public:
  void clear_ap_c_pc_filt_fac_traj_step_nu();
  float ap_c_pc_filt_fac_traj_step_nu() const;
  void set_ap_c_pc_filt_fac_traj_step_nu(float value);
  private:
  float _internal_ap_c_pc_filt_fac_traj_step_nu() const;
  void _internal_set_ap_c_pc_filt_fac_traj_step_nu(float value);
  public:

  // optional float AP_C_PC_STEER_ANGLE_T_FILT_S = 822;
  bool has_ap_c_pc_steer_angle_t_filt_s() const;
  private:
  bool _internal_has_ap_c_pc_steer_angle_t_filt_s() const;
  public:
  void clear_ap_c_pc_steer_angle_t_filt_s();
  float ap_c_pc_steer_angle_t_filt_s() const;
  void set_ap_c_pc_steer_angle_t_filt_s(float value);
  private:
  float _internal_ap_c_pc_steer_angle_t_filt_s() const;
  void _internal_set_ap_c_pc_steer_angle_t_filt_s(float value);
  public:

  // optional float AP_C_MANEUV_FINISHED_HYST_M = 842;
  bool has_ap_c_maneuv_finished_hyst_m() const;
  private:
  bool _internal_has_ap_c_maneuv_finished_hyst_m() const;
  public:
  void clear_ap_c_maneuv_finished_hyst_m();
  float ap_c_maneuv_finished_hyst_m() const;
  void set_ap_c_maneuv_finished_hyst_m(float value);
  private:
  float _internal_ap_c_maneuv_finished_hyst_m() const;
  void _internal_set_ap_c_maneuv_finished_hyst_m(float value);
  public:

  // optional float AP_C_PC_VELO_PREVIEW_TIME_S = 881;
  bool has_ap_c_pc_velo_preview_time_s() const;
  private:
  bool _internal_has_ap_c_pc_velo_preview_time_s() const;
  public:
  void clear_ap_c_pc_velo_preview_time_s();
  float ap_c_pc_velo_preview_time_s() const;
  void set_ap_c_pc_velo_preview_time_s(float value);
  private:
  float _internal_ap_c_pc_velo_preview_time_s() const;
  void _internal_set_ap_c_pc_velo_preview_time_s(float value);
  public:

  // optional bool AP_C_PC_CURV_PREV_REDUCED_NU = 1199;
  bool has_ap_c_pc_curv_prev_reduced_nu() const;
  private:
  bool _internal_has_ap_c_pc_curv_prev_reduced_nu() const;
  public:
  void clear_ap_c_pc_curv_prev_reduced_nu();
  bool ap_c_pc_curv_prev_reduced_nu() const;
  void set_ap_c_pc_curv_prev_reduced_nu(bool value);
  private:
  bool _internal_ap_c_pc_curv_prev_reduced_nu() const;
  void _internal_set_ap_c_pc_curv_prev_reduced_nu(bool value);
  public:

  // optional bool AP_C_FEAT_WAIT_FOR_CONTACT_NU = 1858;
  bool has_ap_c_feat_wait_for_contact_nu() const;
  private:
  bool _internal_has_ap_c_feat_wait_for_contact_nu() const;
  public:
  void clear_ap_c_feat_wait_for_contact_nu();
  bool ap_c_feat_wait_for_contact_nu() const;
  void set_ap_c_feat_wait_for_contact_nu(bool value);
  private:
  bool _internal_ap_c_feat_wait_for_contact_nu() const;
  void _internal_set_ap_c_feat_wait_for_contact_nu(bool value);
  public:

  // optional bool AP_C_FEAT_WS_VEL_REDUCED_NU = 902;
  bool has_ap_c_feat_ws_vel_reduced_nu() const;
  private:
  bool _internal_has_ap_c_feat_ws_vel_reduced_nu() const;
  public:
  void clear_ap_c_feat_ws_vel_reduced_nu();
  bool ap_c_feat_ws_vel_reduced_nu() const;
  void set_ap_c_feat_ws_vel_reduced_nu(bool value);
  private:
  bool _internal_ap_c_feat_ws_vel_reduced_nu() const;
  void _internal_set_ap_c_feat_ws_vel_reduced_nu(bool value);
  public:

  // optional bool AP_C_HACK_WS_LAST_STROKE_NU = 3;
  bool has_ap_c_hack_ws_last_stroke_nu() const;
  private:
  bool _internal_has_ap_c_hack_ws_last_stroke_nu() const;
  public:
  void clear_ap_c_hack_ws_last_stroke_nu();
  bool ap_c_hack_ws_last_stroke_nu() const;
  void set_ap_c_hack_ws_last_stroke_nu(bool value);
  private:
  bool _internal_ap_c_hack_ws_last_stroke_nu() const;
  void _internal_set_ap_c_hack_ws_last_stroke_nu(bool value);
  public:

  // optional float AP_C_VL_VEL_RAMP_LIMIT_MPS2 = 1121;
  bool has_ap_c_vl_vel_ramp_limit_mps2() const;
  private:
  bool _internal_has_ap_c_vl_vel_ramp_limit_mps2() const;
  public:
  void clear_ap_c_vl_vel_ramp_limit_mps2();
  float ap_c_vl_vel_ramp_limit_mps2() const;
  void set_ap_c_vl_vel_ramp_limit_mps2(float value);
  private:
  float _internal_ap_c_vl_vel_ramp_limit_mps2() const;
  void _internal_set_ap_c_vl_vel_ramp_limit_mps2(float value);
  public:

  // optional float AP_C_MANEUV_FINISHED_LIMIT_M = 1147;
  bool has_ap_c_maneuv_finished_limit_m() const;
  private:
  bool _internal_has_ap_c_maneuv_finished_limit_m() const;
  public:
  void clear_ap_c_maneuv_finished_limit_m();
  float ap_c_maneuv_finished_limit_m() const;
  void set_ap_c_maneuv_finished_limit_m(float value);
  private:
  float _internal_ap_c_maneuv_finished_limit_m() const;
  void _internal_set_ap_c_maneuv_finished_limit_m(float value);
  public:

  // optional float AP_C_ACTIVE_CONTROL_MIN_TIME_S = 1165;
  bool has_ap_c_active_control_min_time_s() const;
  private:
  bool _internal_has_ap_c_active_control_min_time_s() const;
  public:
  void clear_ap_c_active_control_min_time_s();
  float ap_c_active_control_min_time_s() const;
  void set_ap_c_active_control_min_time_s(float value);
  private:
  float _internal_ap_c_active_control_min_time_s() const;
  void _internal_set_ap_c_active_control_min_time_s(float value);
  public:

  // optional float AP_C_PC_FIRST_STEER_ACC_RADPS2 = 1208;
  bool has_ap_c_pc_first_steer_acc_radps2() const;
  private:
  bool _internal_has_ap_c_pc_first_steer_acc_radps2() const;
  public:
  void clear_ap_c_pc_first_steer_acc_radps2();
  float ap_c_pc_first_steer_acc_radps2() const;
  void set_ap_c_pc_first_steer_acc_radps2(float value);
  private:
  float _internal_ap_c_pc_first_steer_acc_radps2() const;
  void _internal_set_ap_c_pc_first_steer_acc_radps2(float value);
  public:

  // optional float AP_C_MIN_PARKING_VEL_MPS = 1245;
  bool has_ap_c_min_parking_vel_mps() const;
  private:
  bool _internal_has_ap_c_min_parking_vel_mps() const;
  public:
  void clear_ap_c_min_parking_vel_mps();
  float ap_c_min_parking_vel_mps() const;
  void set_ap_c_min_parking_vel_mps(float value);
  private:
  float _internal_ap_c_min_parking_vel_mps() const;
  void _internal_set_ap_c_min_parking_vel_mps(float value);
  public:

  // optional float AP_C_MANEUV_FINISHED_TIME_DRV_S = 1359;
  bool has_ap_c_maneuv_finished_time_drv_s() const;
  private:
  bool _internal_has_ap_c_maneuv_finished_time_drv_s() const;
  public:
  void clear_ap_c_maneuv_finished_time_drv_s();
  float ap_c_maneuv_finished_time_drv_s() const;
  void set_ap_c_maneuv_finished_time_drv_s(float value);
  private:
  float _internal_ap_c_maneuv_finished_time_drv_s() const;
  void _internal_set_ap_c_maneuv_finished_time_drv_s(float value);
  public:

  // optional float AP_C_PC_CURV_PREVIEW_MIN_M = 1419;
  bool has_ap_c_pc_curv_preview_min_m() const;
  private:
  bool _internal_has_ap_c_pc_curv_preview_min_m() const;
  public:
  void clear_ap_c_pc_curv_preview_min_m();
  float ap_c_pc_curv_preview_min_m() const;
  void set_ap_c_pc_curv_preview_min_m(float value);
  private:
  float _internal_ap_c_pc_curv_preview_min_m() const;
  void _internal_set_ap_c_pc_curv_preview_min_m(float value);
  public:

  // optional float AP_C_DRV_RESIST_FL_RED_DIST_M = 1523;
  bool has_ap_c_drv_resist_fl_red_dist_m() const;
  private:
  bool _internal_has_ap_c_drv_resist_fl_red_dist_m() const;
  public:
  void clear_ap_c_drv_resist_fl_red_dist_m();
  float ap_c_drv_resist_fl_red_dist_m() const;
  void set_ap_c_drv_resist_fl_red_dist_m(float value);
  private:
  float _internal_ap_c_drv_resist_fl_red_dist_m() const;
  void _internal_set_ap_c_drv_resist_fl_red_dist_m(float value);
  public:

  // optional uint32 AP_C_DRV_RESIST_RL_TYPE_NU = 1585;
  bool has_ap_c_drv_resist_rl_type_nu() const;
  private:
  bool _internal_has_ap_c_drv_resist_rl_type_nu() const;
  public:
  void clear_ap_c_drv_resist_rl_type_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_rl_type_nu() const;
  void set_ap_c_drv_resist_rl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_c_drv_resist_rl_type_nu() const;
  void _internal_set_ap_c_drv_resist_rl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_C_NO_COMF_STEER_WS_THRES_M = 1684;
  bool has_ap_c_no_comf_steer_ws_thres_m() const;
  private:
  bool _internal_has_ap_c_no_comf_steer_ws_thres_m() const;
  public:
  void clear_ap_c_no_comf_steer_ws_thres_m();
  float ap_c_no_comf_steer_ws_thres_m() const;
  void set_ap_c_no_comf_steer_ws_thres_m(float value);
  private:
  float _internal_ap_c_no_comf_steer_ws_thres_m() const;
  void _internal_set_ap_c_no_comf_steer_ws_thres_m(float value);
  public:

  // optional float AP_C_LEAVING_PATH_BEHIND_M = 1689;
  bool has_ap_c_leaving_path_behind_m() const;
  private:
  bool _internal_has_ap_c_leaving_path_behind_m() const;
  public:
  void clear_ap_c_leaving_path_behind_m();
  float ap_c_leaving_path_behind_m() const;
  void set_ap_c_leaving_path_behind_m(float value);
  private:
  float _internal_ap_c_leaving_path_behind_m() const;
  void _internal_set_ap_c_leaving_path_behind_m(float value);
  public:

  // optional uint32 AP_C_DRV_RESIST_RR_TYPE_NU = 1720;
  bool has_ap_c_drv_resist_rr_type_nu() const;
  private:
  bool _internal_has_ap_c_drv_resist_rr_type_nu() const;
  public:
  void clear_ap_c_drv_resist_rr_type_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_rr_type_nu() const;
  void set_ap_c_drv_resist_rr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_c_drv_resist_rr_type_nu() const;
  void _internal_set_ap_c_drv_resist_rr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_C_DRV_RESIST_RL_RED_DIST_M = 1770;
  bool has_ap_c_drv_resist_rl_red_dist_m() const;
  private:
  bool _internal_has_ap_c_drv_resist_rl_red_dist_m() const;
  public:
  void clear_ap_c_drv_resist_rl_red_dist_m();
  float ap_c_drv_resist_rl_red_dist_m() const;
  void set_ap_c_drv_resist_rl_red_dist_m(float value);
  private:
  float _internal_ap_c_drv_resist_rl_red_dist_m() const;
  void _internal_set_ap_c_drv_resist_rl_red_dist_m(float value);
  public:

  // optional uint32 AP_C_PC_NUM_CONTROL_GAINS_NU = 1772;
  bool has_ap_c_pc_num_control_gains_nu() const;
  private:
  bool _internal_has_ap_c_pc_num_control_gains_nu() const;
  public:
  void clear_ap_c_pc_num_control_gains_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_pc_num_control_gains_nu() const;
  void set_ap_c_pc_num_control_gains_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_c_pc_num_control_gains_nu() const;
  void _internal_set_ap_c_pc_num_control_gains_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_C_PC_FILT_FACTOR_MAX_NU = 1882;
  bool has_ap_c_pc_filt_factor_max_nu() const;
  private:
  bool _internal_has_ap_c_pc_filt_factor_max_nu() const;
  public:
  void clear_ap_c_pc_filt_factor_max_nu();
  float ap_c_pc_filt_factor_max_nu() const;
  void set_ap_c_pc_filt_factor_max_nu(float value);
  private:
  float _internal_ap_c_pc_filt_factor_max_nu() const;
  void _internal_set_ap_c_pc_filt_factor_max_nu(float value);
  public:

  // optional float AP_C_STEER_INTERV_RISE_NU = 1975;
  bool has_ap_c_steer_interv_rise_nu() const;
  private:
  bool _internal_has_ap_c_steer_interv_rise_nu() const;
  public:
  void clear_ap_c_steer_interv_rise_nu();
  float ap_c_steer_interv_rise_nu() const;
  void set_ap_c_steer_interv_rise_nu(float value);
  private:
  float _internal_ap_c_steer_interv_rise_nu() const;
  void _internal_set_ap_c_steer_interv_rise_nu(float value);
  public:

  // optional float AP_C_MANEUV_V_THRESH_RESET_MPS = 2057;
  bool has_ap_c_maneuv_v_thresh_reset_mps() const;
  private:
  bool _internal_has_ap_c_maneuv_v_thresh_reset_mps() const;
  public:
  void clear_ap_c_maneuv_v_thresh_reset_mps();
  float ap_c_maneuv_v_thresh_reset_mps() const;
  void set_ap_c_maneuv_v_thresh_reset_mps(float value);
  private:
  float _internal_ap_c_maneuv_v_thresh_reset_mps() const;
  void _internal_set_ap_c_maneuv_v_thresh_reset_mps(float value);
  public:

  // optional float AP_C_LEAVING_PATH_BEFORE_M = 2074;
  bool has_ap_c_leaving_path_before_m() const;
  private:
  bool _internal_has_ap_c_leaving_path_before_m() const;
  public:
  void clear_ap_c_leaving_path_before_m();
  float ap_c_leaving_path_before_m() const;
  void set_ap_c_leaving_path_before_m(float value);
  private:
  float _internal_ap_c_leaving_path_before_m() const;
  void _internal_set_ap_c_leaving_path_before_m(float value);
  public:

  // optional float AP_C_MANEUV_FINISHED_TIME_S = 2086;
  bool has_ap_c_maneuv_finished_time_s() const;
  private:
  bool _internal_has_ap_c_maneuv_finished_time_s() const;
  public:
  void clear_ap_c_maneuv_finished_time_s();
  float ap_c_maneuv_finished_time_s() const;
  void set_ap_c_maneuv_finished_time_s(float value);
  private:
  float _internal_ap_c_maneuv_finished_time_s() const;
  void _internal_set_ap_c_maneuv_finished_time_s(float value);
  public:

  // optional float AP_C_MIN_DIST_REQ_M = 2098;
  bool has_ap_c_min_dist_req_m() const;
  private:
  bool _internal_has_ap_c_min_dist_req_m() const;
  public:
  void clear_ap_c_min_dist_req_m();
  float ap_c_min_dist_req_m() const;
  void set_ap_c_min_dist_req_m(float value);
  private:
  float _internal_ap_c_min_dist_req_m() const;
  void _internal_set_ap_c_min_dist_req_m(float value);
  public:

  // optional float AP_C_PC_FILT_FAC_VEL_LIMIT_MPS = 2115;
  bool has_ap_c_pc_filt_fac_vel_limit_mps() const;
  private:
  bool _internal_has_ap_c_pc_filt_fac_vel_limit_mps() const;
  public:
  void clear_ap_c_pc_filt_fac_vel_limit_mps();
  float ap_c_pc_filt_fac_vel_limit_mps() const;
  void set_ap_c_pc_filt_fac_vel_limit_mps(float value);
  private:
  float _internal_ap_c_pc_filt_fac_vel_limit_mps() const;
  void _internal_set_ap_c_pc_filt_fac_vel_limit_mps(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_C_STEER_INTERV_FILT_TIME_S = 2179;
  bool has_ap_c_steer_interv_filt_time_s() const;
  private:
  bool _internal_has_ap_c_steer_interv_filt_time_s() const;
  public:
  void clear_ap_c_steer_interv_filt_time_s();
  float ap_c_steer_interv_filt_time_s() const;
  void set_ap_c_steer_interv_filt_time_s(float value);
  private:
  float _internal_ap_c_steer_interv_filt_time_s() const;
  void _internal_set_ap_c_steer_interv_filt_time_s(float value);
  public:

  // optional float AP_C_WFC_OVERSHOOT_DIST_THRES_M = 2209;
  bool has_ap_c_wfc_overshoot_dist_thres_m() const;
  private:
  bool _internal_has_ap_c_wfc_overshoot_dist_thres_m() const;
  public:
  void clear_ap_c_wfc_overshoot_dist_thres_m();
  float ap_c_wfc_overshoot_dist_thres_m() const;
  void set_ap_c_wfc_overshoot_dist_thres_m(float value);
  private:
  float _internal_ap_c_wfc_overshoot_dist_thres_m() const;
  void _internal_set_ap_c_wfc_overshoot_dist_thres_m(float value);
  public:

  // optional float AP_C_STEER_SATURATE_THRESH_RAD = 2278;
  bool has_ap_c_steer_saturate_thresh_rad() const;
  private:
  bool _internal_has_ap_c_steer_saturate_thresh_rad() const;
  public:
  void clear_ap_c_steer_saturate_thresh_rad();
  float ap_c_steer_saturate_thresh_rad() const;
  void set_ap_c_steer_saturate_thresh_rad(float value);
  private:
  float _internal_ap_c_steer_saturate_thresh_rad() const;
  void _internal_set_ap_c_steer_saturate_thresh_rad(float value);
  public:

  // optional float AP_C_COMP_TIRE_DEF_FACTOR_NU = 2306;
  bool has_ap_c_comp_tire_def_factor_nu() const;
  private:
  bool _internal_has_ap_c_comp_tire_def_factor_nu() const;
  public:
  void clear_ap_c_comp_tire_def_factor_nu();
  float ap_c_comp_tire_def_factor_nu() const;
  void set_ap_c_comp_tire_def_factor_nu(float value);
  private:
  float _internal_ap_c_comp_tire_def_factor_nu() const;
  void _internal_set_ap_c_comp_tire_def_factor_nu(float value);
  public:

  // optional float AP_C_PC_FIRST_STEER_VEL_RADPS = 2388;
  bool has_ap_c_pc_first_steer_vel_radps() const;
  private:
  bool _internal_has_ap_c_pc_first_steer_vel_radps() const;
  public:
  void clear_ap_c_pc_first_steer_vel_radps();
  float ap_c_pc_first_steer_vel_radps() const;
  void set_ap_c_pc_first_steer_vel_radps(float value);
  private:
  float _internal_ap_c_pc_first_steer_vel_radps() const;
  void _internal_set_ap_c_pc_first_steer_vel_radps(float value);
  public:

  // optional float AP_C_PC_ORIENT_CTRL_INIT_DIST_M = 2389;
  bool has_ap_c_pc_orient_ctrl_init_dist_m() const;
  private:
  bool _internal_has_ap_c_pc_orient_ctrl_init_dist_m() const;
  public:
  void clear_ap_c_pc_orient_ctrl_init_dist_m();
  float ap_c_pc_orient_ctrl_init_dist_m() const;
  void set_ap_c_pc_orient_ctrl_init_dist_m(float value);
  private:
  float _internal_ap_c_pc_orient_ctrl_init_dist_m() const;
  void _internal_set_ap_c_pc_orient_ctrl_init_dist_m(float value);
  public:

  // optional float AP_C_WFC_OVERSHOOT_LENGTH_M = 2442;
  bool has_ap_c_wfc_overshoot_length_m() const;
  private:
  bool _internal_has_ap_c_wfc_overshoot_length_m() const;
  public:
  void clear_ap_c_wfc_overshoot_length_m();
  float ap_c_wfc_overshoot_length_m() const;
  void set_ap_c_wfc_overshoot_length_m(float value);
  private:
  float _internal_ap_c_wfc_overshoot_length_m() const;
  void _internal_set_ap_c_wfc_overshoot_length_m(float value);
  public:

  // optional float AP_C_WFC_WS_VEL_DIST_THRESH_M = 2458;
  bool has_ap_c_wfc_ws_vel_dist_thresh_m() const;
  private:
  bool _internal_has_ap_c_wfc_ws_vel_dist_thresh_m() const;
  public:
  void clear_ap_c_wfc_ws_vel_dist_thresh_m();
  float ap_c_wfc_ws_vel_dist_thresh_m() const;
  void set_ap_c_wfc_ws_vel_dist_thresh_m(float value);
  private:
  float _internal_ap_c_wfc_ws_vel_dist_thresh_m() const;
  void _internal_set_ap_c_wfc_ws_vel_dist_thresh_m(float value);
  public:

  // optional bool AP_C_STEER_INTERV_ACTIVE_NU = 2501;
  bool has_ap_c_steer_interv_active_nu() const;
  private:
  bool _internal_has_ap_c_steer_interv_active_nu() const;
  public:
  void clear_ap_c_steer_interv_active_nu();
  bool ap_c_steer_interv_active_nu() const;
  void set_ap_c_steer_interv_active_nu(bool value);
  private:
  bool _internal_ap_c_steer_interv_active_nu() const;
  void _internal_set_ap_c_steer_interv_active_nu(bool value);
  public:

  // optional bool AP_C_VL_RAMP_UP_VEL_NU = 4078;
  bool has_ap_c_vl_ramp_up_vel_nu() const;
  private:
  bool _internal_has_ap_c_vl_ramp_up_vel_nu() const;
  public:
  void clear_ap_c_vl_ramp_up_vel_nu();
  bool ap_c_vl_ramp_up_vel_nu() const;
  void set_ap_c_vl_ramp_up_vel_nu(bool value);
  private:
  bool _internal_ap_c_vl_ramp_up_vel_nu() const;
  void _internal_set_ap_c_vl_ramp_up_vel_nu(bool value);
  public:

  // optional bool AP_C_VL_RAMP_UP_DIST_NU = 3114;
  bool has_ap_c_vl_ramp_up_dist_nu() const;
  private:
  bool _internal_has_ap_c_vl_ramp_up_dist_nu() const;
  public:
  void clear_ap_c_vl_ramp_up_dist_nu();
  bool ap_c_vl_ramp_up_dist_nu() const;
  void set_ap_c_vl_ramp_up_dist_nu(bool value);
  private:
  bool _internal_ap_c_vl_ramp_up_dist_nu() const;
  void _internal_set_ap_c_vl_ramp_up_dist_nu(bool value);
  public:

  // optional bool AP_C_DRV_RESIST_FAKE_DATA_NU = 232;
  bool has_ap_c_drv_resist_fake_data_nu() const;
  private:
  bool _internal_has_ap_c_drv_resist_fake_data_nu() const;
  public:
  void clear_ap_c_drv_resist_fake_data_nu();
  bool ap_c_drv_resist_fake_data_nu() const;
  void set_ap_c_drv_resist_fake_data_nu(bool value);
  private:
  bool _internal_ap_c_drv_resist_fake_data_nu() const;
  void _internal_set_ap_c_drv_resist_fake_data_nu(bool value);
  public:

  // optional float AP_C_PC_MIN_STEER_VEL_RADPS = 2558;
  bool has_ap_c_pc_min_steer_vel_radps() const;
  private:
  bool _internal_has_ap_c_pc_min_steer_vel_radps() const;
  public:
  void clear_ap_c_pc_min_steer_vel_radps();
  float ap_c_pc_min_steer_vel_radps() const;
  void set_ap_c_pc_min_steer_vel_radps(float value);
  private:
  float _internal_ap_c_pc_min_steer_vel_radps() const;
  void _internal_set_ap_c_pc_min_steer_vel_radps(float value);
  public:

  // optional float AP_C_STEER_SATURATE_RATE_RADPS = 2803;
  bool has_ap_c_steer_saturate_rate_radps() const;
  private:
  bool _internal_has_ap_c_steer_saturate_rate_radps() const;
  public:
  void clear_ap_c_steer_saturate_rate_radps();
  float ap_c_steer_saturate_rate_radps() const;
  void set_ap_c_steer_saturate_rate_radps(float value);
  private:
  float _internal_ap_c_steer_saturate_rate_radps() const;
  void _internal_set_ap_c_steer_saturate_rate_radps(float value);
  public:

  // optional float AP_C_HANDSHAKE_WAIT_THRES_TIME_S = 2835;
  bool has_ap_c_handshake_wait_thres_time_s() const;
  private:
  bool _internal_has_ap_c_handshake_wait_thres_time_s() const;
  public:
  void clear_ap_c_handshake_wait_thres_time_s();
  float ap_c_handshake_wait_thres_time_s() const;
  void set_ap_c_handshake_wait_thres_time_s(float value);
  private:
  float _internal_ap_c_handshake_wait_thres_time_s() const;
  void _internal_set_ap_c_handshake_wait_thres_time_s(float value);
  public:

  // optional float AP_C_PC_MAX_STEER_ACC_RADPS2 = 2886;
  bool has_ap_c_pc_max_steer_acc_radps2() const;
  private:
  bool _internal_has_ap_c_pc_max_steer_acc_radps2() const;
  public:
  void clear_ap_c_pc_max_steer_acc_radps2();
  float ap_c_pc_max_steer_acc_radps2() const;
  void set_ap_c_pc_max_steer_acc_radps2(float value);
  private:
  float _internal_ap_c_pc_max_steer_acc_radps2() const;
  void _internal_set_ap_c_pc_max_steer_acc_radps2(float value);
  public:

  // optional float AP_C_FAIL_MAX_LONG_OVERSHOOT_M = 2963;
  bool has_ap_c_fail_max_long_overshoot_m() const;
  private:
  bool _internal_has_ap_c_fail_max_long_overshoot_m() const;
  public:
  void clear_ap_c_fail_max_long_overshoot_m();
  float ap_c_fail_max_long_overshoot_m() const;
  void set_ap_c_fail_max_long_overshoot_m(float value);
  private:
  float _internal_ap_c_fail_max_long_overshoot_m() const;
  void _internal_set_ap_c_fail_max_long_overshoot_m(float value);
  public:

  // optional float AP_C_DRIVE_OFF_VELO_THRES_MPS = 3072;
  bool has_ap_c_drive_off_velo_thres_mps() const;
  private:
  bool _internal_has_ap_c_drive_off_velo_thres_mps() const;
  public:
  void clear_ap_c_drive_off_velo_thres_mps();
  float ap_c_drive_off_velo_thres_mps() const;
  void set_ap_c_drive_off_velo_thres_mps(float value);
  private:
  float _internal_ap_c_drive_off_velo_thres_mps() const;
  void _internal_set_ap_c_drive_off_velo_thres_mps(float value);
  public:

  // optional float AP_C_PI_YAW_DEVIATION_T_FILT_S = 3076;
  bool has_ap_c_pi_yaw_deviation_t_filt_s() const;
  private:
  bool _internal_has_ap_c_pi_yaw_deviation_t_filt_s() const;
  public:
  void clear_ap_c_pi_yaw_deviation_t_filt_s();
  float ap_c_pi_yaw_deviation_t_filt_s() const;
  void set_ap_c_pi_yaw_deviation_t_filt_s(float value);
  private:
  float _internal_ap_c_pi_yaw_deviation_t_filt_s() const;
  void _internal_set_ap_c_pi_yaw_deviation_t_filt_s(float value);
  public:

  // optional float AP_C_PC_ORIENT_CTRL_END_DIST_M = 3435;
  bool has_ap_c_pc_orient_ctrl_end_dist_m() const;
  private:
  bool _internal_has_ap_c_pc_orient_ctrl_end_dist_m() const;
  public:
  void clear_ap_c_pc_orient_ctrl_end_dist_m();
  float ap_c_pc_orient_ctrl_end_dist_m() const;
  void set_ap_c_pc_orient_ctrl_end_dist_m(float value);
  private:
  float _internal_ap_c_pc_orient_ctrl_end_dist_m() const;
  void _internal_set_ap_c_pc_orient_ctrl_end_dist_m(float value);
  public:

  // optional float AP_C_PC_FIRST_STEER_ACCUR_RAD = 3467;
  bool has_ap_c_pc_first_steer_accur_rad() const;
  private:
  bool _internal_has_ap_c_pc_first_steer_accur_rad() const;
  public:
  void clear_ap_c_pc_first_steer_accur_rad();
  float ap_c_pc_first_steer_accur_rad() const;
  void set_ap_c_pc_first_steer_accur_rad(float value);
  private:
  float _internal_ap_c_pc_first_steer_accur_rad() const;
  void _internal_set_ap_c_pc_first_steer_accur_rad(float value);
  public:

  // optional float AP_C_WFC_VDY_DRIVE_OFF_THRES_M = 3598;
  bool has_ap_c_wfc_vdy_drive_off_thres_m() const;
  private:
  bool _internal_has_ap_c_wfc_vdy_drive_off_thres_m() const;
  public:
  void clear_ap_c_wfc_vdy_drive_off_thres_m();
  float ap_c_wfc_vdy_drive_off_thres_m() const;
  void set_ap_c_wfc_vdy_drive_off_thres_m(float value);
  private:
  float _internal_ap_c_wfc_vdy_drive_off_thres_m() const;
  void _internal_set_ap_c_wfc_vdy_drive_off_thres_m(float value);
  public:

  // optional float AP_C_STEER_INTERV_FALL_NU = 3740;
  bool has_ap_c_steer_interv_fall_nu() const;
  private:
  bool _internal_has_ap_c_steer_interv_fall_nu() const;
  public:
  void clear_ap_c_steer_interv_fall_nu();
  float ap_c_steer_interv_fall_nu() const;
  void set_ap_c_steer_interv_fall_nu(float value);
  private:
  float _internal_ap_c_steer_interv_fall_nu() const;
  void _internal_set_ap_c_steer_interv_fall_nu(float value);
  public:

  // optional uint32 AP_C_DRV_RESIST_FR_TYPE_NU = 3867;
  bool has_ap_c_drv_resist_fr_type_nu() const;
  private:
  bool _internal_has_ap_c_drv_resist_fr_type_nu() const;
  public:
  void clear_ap_c_drv_resist_fr_type_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_fr_type_nu() const;
  void set_ap_c_drv_resist_fr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_c_drv_resist_fr_type_nu() const;
  void _internal_set_ap_c_drv_resist_fr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_C_WFC_VDY_DIST_THRES_M = 3941;
  bool has_ap_c_wfc_vdy_dist_thres_m() const;
  private:
  bool _internal_has_ap_c_wfc_vdy_dist_thres_m() const;
  public:
  void clear_ap_c_wfc_vdy_dist_thres_m();
  float ap_c_wfc_vdy_dist_thres_m() const;
  void set_ap_c_wfc_vdy_dist_thres_m(float value);
  private:
  float _internal_ap_c_wfc_vdy_dist_thres_m() const;
  void _internal_set_ap_c_wfc_vdy_dist_thres_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ap_c_pc_gain_lat_deviation_nu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ap_c_pc_gain_velvec_mps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ap_c_pc_gain_yaw_deviation_nu_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* sysfuncparams_;
  ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* vehicleparams_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_fl_type_nu_;
  float ap_c_pc_curv_prev_factor_add_nu_;
  float ap_c_drv_resist_rr_red_dist_m_;
  float ap_c_pc_fail_max_lat_error_m_;
  float ap_c_pc_rate_limit_factor_nu_;
  float ap_c_pc_curv_preview_factor_nu_;
  float ap_c_secure_finished_time_s_;
  float ap_c_drv_resist_fr_red_dist_m_;
  float ap_c_wfc_ws_vel_limit_mps_;
  float ap_c_drive_off_distance_thres_m_;
  float ap_c_pc_fail_max_yaw_error_rad_;
  float ap_c_maneuv_d_thresh_reset_m_;
  float ap_c_pc_filt_fac_traj_step_nu_;
  float ap_c_pc_steer_angle_t_filt_s_;
  float ap_c_maneuv_finished_hyst_m_;
  float ap_c_pc_velo_preview_time_s_;
  bool ap_c_pc_curv_prev_reduced_nu_;
  bool ap_c_feat_wait_for_contact_nu_;
  bool ap_c_feat_ws_vel_reduced_nu_;
  bool ap_c_hack_ws_last_stroke_nu_;
  float ap_c_vl_vel_ramp_limit_mps2_;
  float ap_c_maneuv_finished_limit_m_;
  float ap_c_active_control_min_time_s_;
  float ap_c_pc_first_steer_acc_radps2_;
  float ap_c_min_parking_vel_mps_;
  float ap_c_maneuv_finished_time_drv_s_;
  float ap_c_pc_curv_preview_min_m_;
  float ap_c_drv_resist_fl_red_dist_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_rl_type_nu_;
  float ap_c_no_comf_steer_ws_thres_m_;
  float ap_c_leaving_path_behind_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_rr_type_nu_;
  float ap_c_drv_resist_rl_red_dist_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_pc_num_control_gains_nu_;
  float ap_c_pc_filt_factor_max_nu_;
  float ap_c_steer_interv_rise_nu_;
  float ap_c_maneuv_v_thresh_reset_mps_;
  float ap_c_leaving_path_before_m_;
  float ap_c_maneuv_finished_time_s_;
  float ap_c_min_dist_req_m_;
  float ap_c_pc_filt_fac_vel_limit_mps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float ap_c_steer_interv_filt_time_s_;
  float ap_c_wfc_overshoot_dist_thres_m_;
  float ap_c_steer_saturate_thresh_rad_;
  float ap_c_comp_tire_def_factor_nu_;
  float ap_c_pc_first_steer_vel_radps_;
  float ap_c_pc_orient_ctrl_init_dist_m_;
  float ap_c_wfc_overshoot_length_m_;
  float ap_c_wfc_ws_vel_dist_thresh_m_;
  bool ap_c_steer_interv_active_nu_;
  bool ap_c_vl_ramp_up_vel_nu_;
  bool ap_c_vl_ramp_up_dist_nu_;
  bool ap_c_drv_resist_fake_data_nu_;
  float ap_c_pc_min_steer_vel_radps_;
  float ap_c_steer_saturate_rate_radps_;
  float ap_c_handshake_wait_thres_time_s_;
  float ap_c_pc_max_steer_acc_radps2_;
  float ap_c_fail_max_long_overshoot_m_;
  float ap_c_drive_off_velo_thres_mps_;
  float ap_c_pi_yaw_deviation_t_filt_s_;
  float ap_c_pc_orient_ctrl_end_dist_m_;
  float ap_c_pc_first_steer_accur_rad_;
  float ap_c_wfc_vdy_drive_off_thres_m_;
  float ap_c_steer_interv_fall_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_c_drv_resist_fr_type_nu_;
  float ap_c_wfc_vdy_dist_thres_m_;
  friend struct ::TableStruct_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FC_TRJCTL_Params_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port) */ {
 public:
  FC_TRJCTL_Params_array_port();
  virtual ~FC_TRJCTL_Params_array_port();

  FC_TRJCTL_Params_array_port(const FC_TRJCTL_Params_array_port& from);
  FC_TRJCTL_Params_array_port(FC_TRJCTL_Params_array_port&& from) noexcept
    : FC_TRJCTL_Params_array_port() {
    *this = ::std::move(from);
  }

  inline FC_TRJCTL_Params_array_port& operator=(const FC_TRJCTL_Params_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TRJCTL_Params_array_port& operator=(FC_TRJCTL_Params_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TRJCTL_Params_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TRJCTL_Params_array_port* internal_default_instance() {
    return reinterpret_cast<const FC_TRJCTL_Params_array_port*>(
               &_FC_TRJCTL_Params_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FC_TRJCTL_Params_array_port& a, FC_TRJCTL_Params_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TRJCTL_Params_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TRJCTL_Params_array_port* New() const final {
    return CreateMaybeMessage<FC_TRJCTL_Params_array_port>(nullptr);
  }

  FC_TRJCTL_Params_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TRJCTL_Params_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TRJCTL_Params_array_port& from);
  void MergeFrom(const FC_TRJCTL_Params_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TRJCTL_Params_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto);
    return ::descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 965,
  };
  // repeated .pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params data = 965;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params >*
      mutable_data();
  private:
  const ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params& _internal_data(int index) const;
  ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* _internal_add_data();
  public:
  const ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params& data(int index) const;
  ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params > data_;
  friend struct ::TableStruct_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FC_TRJCTL_Params

// optional uint32 uiVersionNumber = 2124;
inline bool FC_TRJCTL_Params::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FC_TRJCTL_Params::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FC_TRJCTL_Params::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00001000u;
  uiversionnumber_ = value;
}
inline void FC_TRJCTL_Params::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FC_TRJCTL_Params::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FC_TRJCTL_Params::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TRJCTL_Params::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TRJCTL_Params::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJCTL_Params::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJCTL_Params::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJCTL_Params::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FC_TRJCTL_Params::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sSigHeader)
}

// optional float AP_C_MANEUV_FINISHED_TIME_DRV_S = 1359;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_maneuv_finished_time_drv_s() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_maneuv_finished_time_drv_s() const {
  return _internal_has_ap_c_maneuv_finished_time_drv_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_maneuv_finished_time_drv_s() {
  ap_c_maneuv_finished_time_drv_s_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_maneuv_finished_time_drv_s() const {
  return ap_c_maneuv_finished_time_drv_s_;
}
inline float FC_TRJCTL_Params::ap_c_maneuv_finished_time_drv_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_TIME_DRV_S)
  return _internal_ap_c_maneuv_finished_time_drv_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_maneuv_finished_time_drv_s(float value) {
  _has_bits_[0] |= 0x10000000u;
  ap_c_maneuv_finished_time_drv_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_maneuv_finished_time_drv_s(float value) {
  _internal_set_ap_c_maneuv_finished_time_drv_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_TIME_DRV_S)
}

// optional float AP_C_MANEUV_FINISHED_LIMIT_M = 1147;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_maneuv_finished_limit_m() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_maneuv_finished_limit_m() const {
  return _internal_has_ap_c_maneuv_finished_limit_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_maneuv_finished_limit_m() {
  ap_c_maneuv_finished_limit_m_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_maneuv_finished_limit_m() const {
  return ap_c_maneuv_finished_limit_m_;
}
inline float FC_TRJCTL_Params::ap_c_maneuv_finished_limit_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_LIMIT_M)
  return _internal_ap_c_maneuv_finished_limit_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_maneuv_finished_limit_m(float value) {
  _has_bits_[0] |= 0x01000000u;
  ap_c_maneuv_finished_limit_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_maneuv_finished_limit_m(float value) {
  _internal_set_ap_c_maneuv_finished_limit_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_LIMIT_M)
}

// optional float AP_C_MANEUV_V_THRESH_RESET_MPS = 2057;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_maneuv_v_thresh_reset_mps() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_maneuv_v_thresh_reset_mps() const {
  return _internal_has_ap_c_maneuv_v_thresh_reset_mps();
}
inline void FC_TRJCTL_Params::clear_ap_c_maneuv_v_thresh_reset_mps() {
  ap_c_maneuv_v_thresh_reset_mps_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_maneuv_v_thresh_reset_mps() const {
  return ap_c_maneuv_v_thresh_reset_mps_;
}
inline float FC_TRJCTL_Params::ap_c_maneuv_v_thresh_reset_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_V_THRESH_RESET_MPS)
  return _internal_ap_c_maneuv_v_thresh_reset_mps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_maneuv_v_thresh_reset_mps(float value) {
  _has_bits_[1] |= 0x00000080u;
  ap_c_maneuv_v_thresh_reset_mps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_maneuv_v_thresh_reset_mps(float value) {
  _internal_set_ap_c_maneuv_v_thresh_reset_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_V_THRESH_RESET_MPS)
}

// optional float AP_C_MANEUV_D_THRESH_RESET_M = 722;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_maneuv_d_thresh_reset_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_maneuv_d_thresh_reset_m() const {
  return _internal_has_ap_c_maneuv_d_thresh_reset_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_maneuv_d_thresh_reset_m() {
  ap_c_maneuv_d_thresh_reset_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_maneuv_d_thresh_reset_m() const {
  return ap_c_maneuv_d_thresh_reset_m_;
}
inline float FC_TRJCTL_Params::ap_c_maneuv_d_thresh_reset_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_D_THRESH_RESET_M)
  return _internal_ap_c_maneuv_d_thresh_reset_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_maneuv_d_thresh_reset_m(float value) {
  _has_bits_[0] |= 0x00004000u;
  ap_c_maneuv_d_thresh_reset_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_maneuv_d_thresh_reset_m(float value) {
  _internal_set_ap_c_maneuv_d_thresh_reset_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_D_THRESH_RESET_M)
}

// optional float AP_C_MANEUV_FINISHED_TIME_S = 2086;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_maneuv_finished_time_s() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_maneuv_finished_time_s() const {
  return _internal_has_ap_c_maneuv_finished_time_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_maneuv_finished_time_s() {
  ap_c_maneuv_finished_time_s_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_maneuv_finished_time_s() const {
  return ap_c_maneuv_finished_time_s_;
}
inline float FC_TRJCTL_Params::ap_c_maneuv_finished_time_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_TIME_S)
  return _internal_ap_c_maneuv_finished_time_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_maneuv_finished_time_s(float value) {
  _has_bits_[1] |= 0x00000200u;
  ap_c_maneuv_finished_time_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_maneuv_finished_time_s(float value) {
  _internal_set_ap_c_maneuv_finished_time_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_TIME_S)
}

// optional uint32 AP_C_PC_NUM_CONTROL_GAINS_NU = 1772;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_num_control_gains_nu() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_num_control_gains_nu() const {
  return _internal_has_ap_c_pc_num_control_gains_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_num_control_gains_nu() {
  ap_c_pc_num_control_gains_nu_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::_internal_ap_c_pc_num_control_gains_nu() const {
  return ap_c_pc_num_control_gains_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::ap_c_pc_num_control_gains_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_NUM_CONTROL_GAINS_NU)
  return _internal_ap_c_pc_num_control_gains_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_num_control_gains_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  ap_c_pc_num_control_gains_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_num_control_gains_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_c_pc_num_control_gains_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_NUM_CONTROL_GAINS_NU)
}

// repeated float AP_C_PC_GAIN_VELVEC_MPS = 2333;
inline int FC_TRJCTL_Params::_internal_ap_c_pc_gain_velvec_mps_size() const {
  return ap_c_pc_gain_velvec_mps_.size();
}
inline int FC_TRJCTL_Params::ap_c_pc_gain_velvec_mps_size() const {
  return _internal_ap_c_pc_gain_velvec_mps_size();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_gain_velvec_mps() {
  ap_c_pc_gain_velvec_mps_.Clear();
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_gain_velvec_mps(int index) const {
  return ap_c_pc_gain_velvec_mps_.Get(index);
}
inline float FC_TRJCTL_Params::ap_c_pc_gain_velvec_mps(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_VELVEC_MPS)
  return _internal_ap_c_pc_gain_velvec_mps(index);
}
inline void FC_TRJCTL_Params::set_ap_c_pc_gain_velvec_mps(int index, float value) {
  ap_c_pc_gain_velvec_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_VELVEC_MPS)
}
inline void FC_TRJCTL_Params::_internal_add_ap_c_pc_gain_velvec_mps(float value) {
  ap_c_pc_gain_velvec_mps_.Add(value);
}
inline void FC_TRJCTL_Params::add_ap_c_pc_gain_velvec_mps(float value) {
  _internal_add_ap_c_pc_gain_velvec_mps(value);
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_VELVEC_MPS)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJCTL_Params::_internal_ap_c_pc_gain_velvec_mps() const {
  return ap_c_pc_gain_velvec_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJCTL_Params::ap_c_pc_gain_velvec_mps() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_VELVEC_MPS)
  return _internal_ap_c_pc_gain_velvec_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJCTL_Params::_internal_mutable_ap_c_pc_gain_velvec_mps() {
  return &ap_c_pc_gain_velvec_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJCTL_Params::mutable_ap_c_pc_gain_velvec_mps() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_VELVEC_MPS)
  return _internal_mutable_ap_c_pc_gain_velvec_mps();
}

// repeated float AP_C_PC_GAIN_YAW_DEVIATION_NU = 3806;
inline int FC_TRJCTL_Params::_internal_ap_c_pc_gain_yaw_deviation_nu_size() const {
  return ap_c_pc_gain_yaw_deviation_nu_.size();
}
inline int FC_TRJCTL_Params::ap_c_pc_gain_yaw_deviation_nu_size() const {
  return _internal_ap_c_pc_gain_yaw_deviation_nu_size();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_gain_yaw_deviation_nu() {
  ap_c_pc_gain_yaw_deviation_nu_.Clear();
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_gain_yaw_deviation_nu(int index) const {
  return ap_c_pc_gain_yaw_deviation_nu_.Get(index);
}
inline float FC_TRJCTL_Params::ap_c_pc_gain_yaw_deviation_nu(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_YAW_DEVIATION_NU)
  return _internal_ap_c_pc_gain_yaw_deviation_nu(index);
}
inline void FC_TRJCTL_Params::set_ap_c_pc_gain_yaw_deviation_nu(int index, float value) {
  ap_c_pc_gain_yaw_deviation_nu_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_YAW_DEVIATION_NU)
}
inline void FC_TRJCTL_Params::_internal_add_ap_c_pc_gain_yaw_deviation_nu(float value) {
  ap_c_pc_gain_yaw_deviation_nu_.Add(value);
}
inline void FC_TRJCTL_Params::add_ap_c_pc_gain_yaw_deviation_nu(float value) {
  _internal_add_ap_c_pc_gain_yaw_deviation_nu(value);
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_YAW_DEVIATION_NU)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJCTL_Params::_internal_ap_c_pc_gain_yaw_deviation_nu() const {
  return ap_c_pc_gain_yaw_deviation_nu_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJCTL_Params::ap_c_pc_gain_yaw_deviation_nu() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_YAW_DEVIATION_NU)
  return _internal_ap_c_pc_gain_yaw_deviation_nu();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJCTL_Params::_internal_mutable_ap_c_pc_gain_yaw_deviation_nu() {
  return &ap_c_pc_gain_yaw_deviation_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJCTL_Params::mutable_ap_c_pc_gain_yaw_deviation_nu() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_YAW_DEVIATION_NU)
  return _internal_mutable_ap_c_pc_gain_yaw_deviation_nu();
}

// repeated float AP_C_PC_GAIN_LAT_DEVIATION_NU = 2177;
inline int FC_TRJCTL_Params::_internal_ap_c_pc_gain_lat_deviation_nu_size() const {
  return ap_c_pc_gain_lat_deviation_nu_.size();
}
inline int FC_TRJCTL_Params::ap_c_pc_gain_lat_deviation_nu_size() const {
  return _internal_ap_c_pc_gain_lat_deviation_nu_size();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_gain_lat_deviation_nu() {
  ap_c_pc_gain_lat_deviation_nu_.Clear();
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_gain_lat_deviation_nu(int index) const {
  return ap_c_pc_gain_lat_deviation_nu_.Get(index);
}
inline float FC_TRJCTL_Params::ap_c_pc_gain_lat_deviation_nu(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_LAT_DEVIATION_NU)
  return _internal_ap_c_pc_gain_lat_deviation_nu(index);
}
inline void FC_TRJCTL_Params::set_ap_c_pc_gain_lat_deviation_nu(int index, float value) {
  ap_c_pc_gain_lat_deviation_nu_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_LAT_DEVIATION_NU)
}
inline void FC_TRJCTL_Params::_internal_add_ap_c_pc_gain_lat_deviation_nu(float value) {
  ap_c_pc_gain_lat_deviation_nu_.Add(value);
}
inline void FC_TRJCTL_Params::add_ap_c_pc_gain_lat_deviation_nu(float value) {
  _internal_add_ap_c_pc_gain_lat_deviation_nu(value);
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_LAT_DEVIATION_NU)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJCTL_Params::_internal_ap_c_pc_gain_lat_deviation_nu() const {
  return ap_c_pc_gain_lat_deviation_nu_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJCTL_Params::ap_c_pc_gain_lat_deviation_nu() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_LAT_DEVIATION_NU)
  return _internal_ap_c_pc_gain_lat_deviation_nu();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJCTL_Params::_internal_mutable_ap_c_pc_gain_lat_deviation_nu() {
  return &ap_c_pc_gain_lat_deviation_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJCTL_Params::mutable_ap_c_pc_gain_lat_deviation_nu() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_GAIN_LAT_DEVIATION_NU)
  return _internal_mutable_ap_c_pc_gain_lat_deviation_nu();
}

// optional float AP_C_PC_FAIL_MAX_LAT_ERROR_M = 365;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_fail_max_lat_error_m() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_fail_max_lat_error_m() const {
  return _internal_has_ap_c_pc_fail_max_lat_error_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_fail_max_lat_error_m() {
  ap_c_pc_fail_max_lat_error_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_fail_max_lat_error_m() const {
  return ap_c_pc_fail_max_lat_error_m_;
}
inline float FC_TRJCTL_Params::ap_c_pc_fail_max_lat_error_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FAIL_MAX_LAT_ERROR_M)
  return _internal_ap_c_pc_fail_max_lat_error_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_fail_max_lat_error_m(float value) {
  _has_bits_[0] |= 0x00000040u;
  ap_c_pc_fail_max_lat_error_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_fail_max_lat_error_m(float value) {
  _internal_set_ap_c_pc_fail_max_lat_error_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FAIL_MAX_LAT_ERROR_M)
}

// optional float AP_C_PC_FAIL_MAX_YAW_ERROR_RAD = 717;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_fail_max_yaw_error_rad() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_fail_max_yaw_error_rad() const {
  return _internal_has_ap_c_pc_fail_max_yaw_error_rad();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_fail_max_yaw_error_rad() {
  ap_c_pc_fail_max_yaw_error_rad_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_fail_max_yaw_error_rad() const {
  return ap_c_pc_fail_max_yaw_error_rad_;
}
inline float FC_TRJCTL_Params::ap_c_pc_fail_max_yaw_error_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FAIL_MAX_YAW_ERROR_RAD)
  return _internal_ap_c_pc_fail_max_yaw_error_rad();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_fail_max_yaw_error_rad(float value) {
  _has_bits_[0] |= 0x00002000u;
  ap_c_pc_fail_max_yaw_error_rad_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_fail_max_yaw_error_rad(float value) {
  _internal_set_ap_c_pc_fail_max_yaw_error_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FAIL_MAX_YAW_ERROR_RAD)
}

// optional float AP_C_PC_STEER_ANGLE_T_FILT_S = 822;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_steer_angle_t_filt_s() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_steer_angle_t_filt_s() const {
  return _internal_has_ap_c_pc_steer_angle_t_filt_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_steer_angle_t_filt_s() {
  ap_c_pc_steer_angle_t_filt_s_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_steer_angle_t_filt_s() const {
  return ap_c_pc_steer_angle_t_filt_s_;
}
inline float FC_TRJCTL_Params::ap_c_pc_steer_angle_t_filt_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_STEER_ANGLE_T_FILT_S)
  return _internal_ap_c_pc_steer_angle_t_filt_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_steer_angle_t_filt_s(float value) {
  _has_bits_[0] |= 0x00010000u;
  ap_c_pc_steer_angle_t_filt_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_steer_angle_t_filt_s(float value) {
  _internal_set_ap_c_pc_steer_angle_t_filt_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_STEER_ANGLE_T_FILT_S)
}

// optional float AP_C_PI_YAW_DEVIATION_T_FILT_S = 3076;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pi_yaw_deviation_t_filt_s() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pi_yaw_deviation_t_filt_s() const {
  return _internal_has_ap_c_pi_yaw_deviation_t_filt_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_pi_yaw_deviation_t_filt_s() {
  ap_c_pi_yaw_deviation_t_filt_s_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pi_yaw_deviation_t_filt_s() const {
  return ap_c_pi_yaw_deviation_t_filt_s_;
}
inline float FC_TRJCTL_Params::ap_c_pi_yaw_deviation_t_filt_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PI_YAW_DEVIATION_T_FILT_S)
  return _internal_ap_c_pi_yaw_deviation_t_filt_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pi_yaw_deviation_t_filt_s(float value) {
  _has_bits_[1] |= 0x80000000u;
  ap_c_pi_yaw_deviation_t_filt_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pi_yaw_deviation_t_filt_s(float value) {
  _internal_set_ap_c_pi_yaw_deviation_t_filt_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PI_YAW_DEVIATION_T_FILT_S)
}

// optional float AP_C_PC_FILT_FACTOR_MAX_NU = 1882;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_filt_factor_max_nu() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_filt_factor_max_nu() const {
  return _internal_has_ap_c_pc_filt_factor_max_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_filt_factor_max_nu() {
  ap_c_pc_filt_factor_max_nu_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_filt_factor_max_nu() const {
  return ap_c_pc_filt_factor_max_nu_;
}
inline float FC_TRJCTL_Params::ap_c_pc_filt_factor_max_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FILT_FACTOR_MAX_NU)
  return _internal_ap_c_pc_filt_factor_max_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_filt_factor_max_nu(float value) {
  _has_bits_[1] |= 0x00000020u;
  ap_c_pc_filt_factor_max_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_filt_factor_max_nu(float value) {
  _internal_set_ap_c_pc_filt_factor_max_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FILT_FACTOR_MAX_NU)
}

// optional float AP_C_PC_FILT_FAC_VEL_LIMIT_MPS = 2115;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_filt_fac_vel_limit_mps() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_filt_fac_vel_limit_mps() const {
  return _internal_has_ap_c_pc_filt_fac_vel_limit_mps();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_filt_fac_vel_limit_mps() {
  ap_c_pc_filt_fac_vel_limit_mps_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_filt_fac_vel_limit_mps() const {
  return ap_c_pc_filt_fac_vel_limit_mps_;
}
inline float FC_TRJCTL_Params::ap_c_pc_filt_fac_vel_limit_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FILT_FAC_VEL_LIMIT_MPS)
  return _internal_ap_c_pc_filt_fac_vel_limit_mps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_filt_fac_vel_limit_mps(float value) {
  _has_bits_[1] |= 0x00000800u;
  ap_c_pc_filt_fac_vel_limit_mps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_filt_fac_vel_limit_mps(float value) {
  _internal_set_ap_c_pc_filt_fac_vel_limit_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FILT_FAC_VEL_LIMIT_MPS)
}

// optional float AP_C_PC_ORIENT_CTRL_END_DIST_M = 3435;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_orient_ctrl_end_dist_m() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_orient_ctrl_end_dist_m() const {
  return _internal_has_ap_c_pc_orient_ctrl_end_dist_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_orient_ctrl_end_dist_m() {
  ap_c_pc_orient_ctrl_end_dist_m_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_orient_ctrl_end_dist_m() const {
  return ap_c_pc_orient_ctrl_end_dist_m_;
}
inline float FC_TRJCTL_Params::ap_c_pc_orient_ctrl_end_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_ORIENT_CTRL_END_DIST_M)
  return _internal_ap_c_pc_orient_ctrl_end_dist_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_orient_ctrl_end_dist_m(float value) {
  _has_bits_[2] |= 0x00000001u;
  ap_c_pc_orient_ctrl_end_dist_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_orient_ctrl_end_dist_m(float value) {
  _internal_set_ap_c_pc_orient_ctrl_end_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_ORIENT_CTRL_END_DIST_M)
}

// optional float AP_C_PC_ORIENT_CTRL_INIT_DIST_M = 2389;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_orient_ctrl_init_dist_m() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_orient_ctrl_init_dist_m() const {
  return _internal_has_ap_c_pc_orient_ctrl_init_dist_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_orient_ctrl_init_dist_m() {
  ap_c_pc_orient_ctrl_init_dist_m_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_orient_ctrl_init_dist_m() const {
  return ap_c_pc_orient_ctrl_init_dist_m_;
}
inline float FC_TRJCTL_Params::ap_c_pc_orient_ctrl_init_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_ORIENT_CTRL_INIT_DIST_M)
  return _internal_ap_c_pc_orient_ctrl_init_dist_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_orient_ctrl_init_dist_m(float value) {
  _has_bits_[1] |= 0x00040000u;
  ap_c_pc_orient_ctrl_init_dist_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_orient_ctrl_init_dist_m(float value) {
  _internal_set_ap_c_pc_orient_ctrl_init_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_ORIENT_CTRL_INIT_DIST_M)
}

// optional float AP_C_PC_FIRST_STEER_ACCUR_RAD = 3467;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_first_steer_accur_rad() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_first_steer_accur_rad() const {
  return _internal_has_ap_c_pc_first_steer_accur_rad();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_first_steer_accur_rad() {
  ap_c_pc_first_steer_accur_rad_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_first_steer_accur_rad() const {
  return ap_c_pc_first_steer_accur_rad_;
}
inline float FC_TRJCTL_Params::ap_c_pc_first_steer_accur_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FIRST_STEER_ACCUR_RAD)
  return _internal_ap_c_pc_first_steer_accur_rad();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_first_steer_accur_rad(float value) {
  _has_bits_[2] |= 0x00000002u;
  ap_c_pc_first_steer_accur_rad_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_first_steer_accur_rad(float value) {
  _internal_set_ap_c_pc_first_steer_accur_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FIRST_STEER_ACCUR_RAD)
}

// optional float AP_C_PC_FIRST_STEER_VEL_RADPS = 2388;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_first_steer_vel_radps() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_first_steer_vel_radps() const {
  return _internal_has_ap_c_pc_first_steer_vel_radps();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_first_steer_vel_radps() {
  ap_c_pc_first_steer_vel_radps_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_first_steer_vel_radps() const {
  return ap_c_pc_first_steer_vel_radps_;
}
inline float FC_TRJCTL_Params::ap_c_pc_first_steer_vel_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FIRST_STEER_VEL_RADPS)
  return _internal_ap_c_pc_first_steer_vel_radps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_first_steer_vel_radps(float value) {
  _has_bits_[1] |= 0x00020000u;
  ap_c_pc_first_steer_vel_radps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_first_steer_vel_radps(float value) {
  _internal_set_ap_c_pc_first_steer_vel_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FIRST_STEER_VEL_RADPS)
}

// optional float AP_C_PC_FIRST_STEER_ACC_RADPS2 = 1208;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_first_steer_acc_radps2() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_first_steer_acc_radps2() const {
  return _internal_has_ap_c_pc_first_steer_acc_radps2();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_first_steer_acc_radps2() {
  ap_c_pc_first_steer_acc_radps2_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_first_steer_acc_radps2() const {
  return ap_c_pc_first_steer_acc_radps2_;
}
inline float FC_TRJCTL_Params::ap_c_pc_first_steer_acc_radps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FIRST_STEER_ACC_RADPS2)
  return _internal_ap_c_pc_first_steer_acc_radps2();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_first_steer_acc_radps2(float value) {
  _has_bits_[0] |= 0x04000000u;
  ap_c_pc_first_steer_acc_radps2_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_first_steer_acc_radps2(float value) {
  _internal_set_ap_c_pc_first_steer_acc_radps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FIRST_STEER_ACC_RADPS2)
}

// optional float AP_C_PC_CURV_PREVIEW_FACTOR_NU = 470;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_curv_preview_factor_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_curv_preview_factor_nu() const {
  return _internal_has_ap_c_pc_curv_preview_factor_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_curv_preview_factor_nu() {
  ap_c_pc_curv_preview_factor_nu_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_curv_preview_factor_nu() const {
  return ap_c_pc_curv_preview_factor_nu_;
}
inline float FC_TRJCTL_Params::ap_c_pc_curv_preview_factor_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREVIEW_FACTOR_NU)
  return _internal_ap_c_pc_curv_preview_factor_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_curv_preview_factor_nu(float value) {
  _has_bits_[0] |= 0x00000100u;
  ap_c_pc_curv_preview_factor_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_curv_preview_factor_nu(float value) {
  _internal_set_ap_c_pc_curv_preview_factor_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREVIEW_FACTOR_NU)
}

// optional float AP_C_PC_CURV_PREVIEW_MIN_M = 1419;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_curv_preview_min_m() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_curv_preview_min_m() const {
  return _internal_has_ap_c_pc_curv_preview_min_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_curv_preview_min_m() {
  ap_c_pc_curv_preview_min_m_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_curv_preview_min_m() const {
  return ap_c_pc_curv_preview_min_m_;
}
inline float FC_TRJCTL_Params::ap_c_pc_curv_preview_min_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREVIEW_MIN_M)
  return _internal_ap_c_pc_curv_preview_min_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_curv_preview_min_m(float value) {
  _has_bits_[0] |= 0x20000000u;
  ap_c_pc_curv_preview_min_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_curv_preview_min_m(float value) {
  _internal_set_ap_c_pc_curv_preview_min_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREVIEW_MIN_M)
}

// optional float AP_C_SECURE_FINISHED_TIME_S = 480;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_secure_finished_time_s() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_secure_finished_time_s() const {
  return _internal_has_ap_c_secure_finished_time_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_secure_finished_time_s() {
  ap_c_secure_finished_time_s_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_secure_finished_time_s() const {
  return ap_c_secure_finished_time_s_;
}
inline float FC_TRJCTL_Params::ap_c_secure_finished_time_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_SECURE_FINISHED_TIME_S)
  return _internal_ap_c_secure_finished_time_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_secure_finished_time_s(float value) {
  _has_bits_[0] |= 0x00000200u;
  ap_c_secure_finished_time_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_secure_finished_time_s(float value) {
  _internal_set_ap_c_secure_finished_time_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_SECURE_FINISHED_TIME_S)
}

// optional bool AP_C_STEER_INTERV_ACTIVE_NU = 2501;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_steer_interv_active_nu() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_steer_interv_active_nu() const {
  return _internal_has_ap_c_steer_interv_active_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_steer_interv_active_nu() {
  ap_c_steer_interv_active_nu_ = false;
  _has_bits_[1] &= ~0x00200000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_steer_interv_active_nu() const {
  return ap_c_steer_interv_active_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_steer_interv_active_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_ACTIVE_NU)
  return _internal_ap_c_steer_interv_active_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_steer_interv_active_nu(bool value) {
  _has_bits_[1] |= 0x00200000u;
  ap_c_steer_interv_active_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_steer_interv_active_nu(bool value) {
  _internal_set_ap_c_steer_interv_active_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_ACTIVE_NU)
}

// optional float AP_C_STEER_INTERV_FILT_TIME_S = 2179;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_steer_interv_filt_time_s() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_steer_interv_filt_time_s() const {
  return _internal_has_ap_c_steer_interv_filt_time_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_steer_interv_filt_time_s() {
  ap_c_steer_interv_filt_time_s_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_steer_interv_filt_time_s() const {
  return ap_c_steer_interv_filt_time_s_;
}
inline float FC_TRJCTL_Params::ap_c_steer_interv_filt_time_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_FILT_TIME_S)
  return _internal_ap_c_steer_interv_filt_time_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_steer_interv_filt_time_s(float value) {
  _has_bits_[1] |= 0x00002000u;
  ap_c_steer_interv_filt_time_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_steer_interv_filt_time_s(float value) {
  _internal_set_ap_c_steer_interv_filt_time_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_FILT_TIME_S)
}

// optional float AP_C_STEER_INTERV_RISE_NU = 1975;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_steer_interv_rise_nu() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_steer_interv_rise_nu() const {
  return _internal_has_ap_c_steer_interv_rise_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_steer_interv_rise_nu() {
  ap_c_steer_interv_rise_nu_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_steer_interv_rise_nu() const {
  return ap_c_steer_interv_rise_nu_;
}
inline float FC_TRJCTL_Params::ap_c_steer_interv_rise_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_RISE_NU)
  return _internal_ap_c_steer_interv_rise_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_steer_interv_rise_nu(float value) {
  _has_bits_[1] |= 0x00000040u;
  ap_c_steer_interv_rise_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_steer_interv_rise_nu(float value) {
  _internal_set_ap_c_steer_interv_rise_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_RISE_NU)
}

// optional float AP_C_STEER_INTERV_FALL_NU = 3740;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_steer_interv_fall_nu() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_steer_interv_fall_nu() const {
  return _internal_has_ap_c_steer_interv_fall_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_steer_interv_fall_nu() {
  ap_c_steer_interv_fall_nu_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_steer_interv_fall_nu() const {
  return ap_c_steer_interv_fall_nu_;
}
inline float FC_TRJCTL_Params::ap_c_steer_interv_fall_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_FALL_NU)
  return _internal_ap_c_steer_interv_fall_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_steer_interv_fall_nu(float value) {
  _has_bits_[2] |= 0x00000008u;
  ap_c_steer_interv_fall_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_steer_interv_fall_nu(float value) {
  _internal_set_ap_c_steer_interv_fall_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_INTERV_FALL_NU)
}

// optional float AP_C_PC_FILT_FAC_TRAJ_STEP_NU = 785;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_filt_fac_traj_step_nu() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_filt_fac_traj_step_nu() const {
  return _internal_has_ap_c_pc_filt_fac_traj_step_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_filt_fac_traj_step_nu() {
  ap_c_pc_filt_fac_traj_step_nu_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_filt_fac_traj_step_nu() const {
  return ap_c_pc_filt_fac_traj_step_nu_;
}
inline float FC_TRJCTL_Params::ap_c_pc_filt_fac_traj_step_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FILT_FAC_TRAJ_STEP_NU)
  return _internal_ap_c_pc_filt_fac_traj_step_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_filt_fac_traj_step_nu(float value) {
  _has_bits_[0] |= 0x00008000u;
  ap_c_pc_filt_fac_traj_step_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_filt_fac_traj_step_nu(float value) {
  _internal_set_ap_c_pc_filt_fac_traj_step_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_FILT_FAC_TRAJ_STEP_NU)
}

// optional float AP_C_ACTIVE_CONTROL_MIN_TIME_S = 1165;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_active_control_min_time_s() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_active_control_min_time_s() const {
  return _internal_has_ap_c_active_control_min_time_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_active_control_min_time_s() {
  ap_c_active_control_min_time_s_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_active_control_min_time_s() const {
  return ap_c_active_control_min_time_s_;
}
inline float FC_TRJCTL_Params::ap_c_active_control_min_time_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_ACTIVE_CONTROL_MIN_TIME_S)
  return _internal_ap_c_active_control_min_time_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_active_control_min_time_s(float value) {
  _has_bits_[0] |= 0x02000000u;
  ap_c_active_control_min_time_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_active_control_min_time_s(float value) {
  _internal_set_ap_c_active_control_min_time_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_ACTIVE_CONTROL_MIN_TIME_S)
}

// optional bool AP_C_VL_RAMP_UP_VEL_NU = 4078;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_vl_ramp_up_vel_nu() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_vl_ramp_up_vel_nu() const {
  return _internal_has_ap_c_vl_ramp_up_vel_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_vl_ramp_up_vel_nu() {
  ap_c_vl_ramp_up_vel_nu_ = false;
  _has_bits_[1] &= ~0x00400000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_vl_ramp_up_vel_nu() const {
  return ap_c_vl_ramp_up_vel_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_vl_ramp_up_vel_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_VL_RAMP_UP_VEL_NU)
  return _internal_ap_c_vl_ramp_up_vel_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_vl_ramp_up_vel_nu(bool value) {
  _has_bits_[1] |= 0x00400000u;
  ap_c_vl_ramp_up_vel_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_vl_ramp_up_vel_nu(bool value) {
  _internal_set_ap_c_vl_ramp_up_vel_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_VL_RAMP_UP_VEL_NU)
}

// optional float AP_C_VL_VEL_RAMP_LIMIT_MPS2 = 1121;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_vl_vel_ramp_limit_mps2() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_vl_vel_ramp_limit_mps2() const {
  return _internal_has_ap_c_vl_vel_ramp_limit_mps2();
}
inline void FC_TRJCTL_Params::clear_ap_c_vl_vel_ramp_limit_mps2() {
  ap_c_vl_vel_ramp_limit_mps2_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_vl_vel_ramp_limit_mps2() const {
  return ap_c_vl_vel_ramp_limit_mps2_;
}
inline float FC_TRJCTL_Params::ap_c_vl_vel_ramp_limit_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_VL_VEL_RAMP_LIMIT_MPS2)
  return _internal_ap_c_vl_vel_ramp_limit_mps2();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_vl_vel_ramp_limit_mps2(float value) {
  _has_bits_[0] |= 0x00800000u;
  ap_c_vl_vel_ramp_limit_mps2_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_vl_vel_ramp_limit_mps2(float value) {
  _internal_set_ap_c_vl_vel_ramp_limit_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_VL_VEL_RAMP_LIMIT_MPS2)
}

// optional bool AP_C_VL_RAMP_UP_DIST_NU = 3114;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_vl_ramp_up_dist_nu() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_vl_ramp_up_dist_nu() const {
  return _internal_has_ap_c_vl_ramp_up_dist_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_vl_ramp_up_dist_nu() {
  ap_c_vl_ramp_up_dist_nu_ = false;
  _has_bits_[1] &= ~0x00800000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_vl_ramp_up_dist_nu() const {
  return ap_c_vl_ramp_up_dist_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_vl_ramp_up_dist_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_VL_RAMP_UP_DIST_NU)
  return _internal_ap_c_vl_ramp_up_dist_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_vl_ramp_up_dist_nu(bool value) {
  _has_bits_[1] |= 0x00800000u;
  ap_c_vl_ramp_up_dist_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_vl_ramp_up_dist_nu(bool value) {
  _internal_set_ap_c_vl_ramp_up_dist_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_VL_RAMP_UP_DIST_NU)
}

// optional float AP_C_MIN_PARKING_VEL_MPS = 1245;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_min_parking_vel_mps() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_min_parking_vel_mps() const {
  return _internal_has_ap_c_min_parking_vel_mps();
}
inline void FC_TRJCTL_Params::clear_ap_c_min_parking_vel_mps() {
  ap_c_min_parking_vel_mps_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_min_parking_vel_mps() const {
  return ap_c_min_parking_vel_mps_;
}
inline float FC_TRJCTL_Params::ap_c_min_parking_vel_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MIN_PARKING_VEL_MPS)
  return _internal_ap_c_min_parking_vel_mps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_min_parking_vel_mps(float value) {
  _has_bits_[0] |= 0x08000000u;
  ap_c_min_parking_vel_mps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_min_parking_vel_mps(float value) {
  _internal_set_ap_c_min_parking_vel_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MIN_PARKING_VEL_MPS)
}

// optional float AP_C_PC_MIN_STEER_VEL_RADPS = 2558;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_min_steer_vel_radps() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_min_steer_vel_radps() const {
  return _internal_has_ap_c_pc_min_steer_vel_radps();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_min_steer_vel_radps() {
  ap_c_pc_min_steer_vel_radps_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_min_steer_vel_radps() const {
  return ap_c_pc_min_steer_vel_radps_;
}
inline float FC_TRJCTL_Params::ap_c_pc_min_steer_vel_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_MIN_STEER_VEL_RADPS)
  return _internal_ap_c_pc_min_steer_vel_radps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_min_steer_vel_radps(float value) {
  _has_bits_[1] |= 0x02000000u;
  ap_c_pc_min_steer_vel_radps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_min_steer_vel_radps(float value) {
  _internal_set_ap_c_pc_min_steer_vel_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_MIN_STEER_VEL_RADPS)
}

// optional bool AP_C_DRV_RESIST_FAKE_DATA_NU = 232;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_fake_data_nu() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_fake_data_nu() const {
  return _internal_has_ap_c_drv_resist_fake_data_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_fake_data_nu() {
  ap_c_drv_resist_fake_data_nu_ = false;
  _has_bits_[1] &= ~0x01000000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_drv_resist_fake_data_nu() const {
  return ap_c_drv_resist_fake_data_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_drv_resist_fake_data_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FAKE_DATA_NU)
  return _internal_ap_c_drv_resist_fake_data_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_fake_data_nu(bool value) {
  _has_bits_[1] |= 0x01000000u;
  ap_c_drv_resist_fake_data_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_fake_data_nu(bool value) {
  _internal_set_ap_c_drv_resist_fake_data_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FAKE_DATA_NU)
}

// optional uint32 AP_C_DRV_RESIST_FL_TYPE_NU = 3986;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_fl_type_nu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_fl_type_nu() const {
  return _internal_has_ap_c_drv_resist_fl_type_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_fl_type_nu() {
  ap_c_drv_resist_fl_type_nu_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::_internal_ap_c_drv_resist_fl_type_nu() const {
  return ap_c_drv_resist_fl_type_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::ap_c_drv_resist_fl_type_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FL_TYPE_NU)
  return _internal_ap_c_drv_resist_fl_type_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_fl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ap_c_drv_resist_fl_type_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_fl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_c_drv_resist_fl_type_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FL_TYPE_NU)
}

// optional float AP_C_DRV_RESIST_FL_RED_DIST_M = 1523;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_fl_red_dist_m() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_fl_red_dist_m() const {
  return _internal_has_ap_c_drv_resist_fl_red_dist_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_fl_red_dist_m() {
  ap_c_drv_resist_fl_red_dist_m_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_drv_resist_fl_red_dist_m() const {
  return ap_c_drv_resist_fl_red_dist_m_;
}
inline float FC_TRJCTL_Params::ap_c_drv_resist_fl_red_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FL_RED_DIST_M)
  return _internal_ap_c_drv_resist_fl_red_dist_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_fl_red_dist_m(float value) {
  _has_bits_[0] |= 0x40000000u;
  ap_c_drv_resist_fl_red_dist_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_fl_red_dist_m(float value) {
  _internal_set_ap_c_drv_resist_fl_red_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FL_RED_DIST_M)
}

// optional uint32 AP_C_DRV_RESIST_RL_TYPE_NU = 1585;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_rl_type_nu() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_rl_type_nu() const {
  return _internal_has_ap_c_drv_resist_rl_type_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_rl_type_nu() {
  ap_c_drv_resist_rl_type_nu_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::_internal_ap_c_drv_resist_rl_type_nu() const {
  return ap_c_drv_resist_rl_type_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::ap_c_drv_resist_rl_type_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RL_TYPE_NU)
  return _internal_ap_c_drv_resist_rl_type_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_rl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  ap_c_drv_resist_rl_type_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_rl_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_c_drv_resist_rl_type_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RL_TYPE_NU)
}

// optional float AP_C_DRV_RESIST_RL_RED_DIST_M = 1770;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_rl_red_dist_m() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_rl_red_dist_m() const {
  return _internal_has_ap_c_drv_resist_rl_red_dist_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_rl_red_dist_m() {
  ap_c_drv_resist_rl_red_dist_m_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_drv_resist_rl_red_dist_m() const {
  return ap_c_drv_resist_rl_red_dist_m_;
}
inline float FC_TRJCTL_Params::ap_c_drv_resist_rl_red_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RL_RED_DIST_M)
  return _internal_ap_c_drv_resist_rl_red_dist_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_rl_red_dist_m(float value) {
  _has_bits_[1] |= 0x00000008u;
  ap_c_drv_resist_rl_red_dist_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_rl_red_dist_m(float value) {
  _internal_set_ap_c_drv_resist_rl_red_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RL_RED_DIST_M)
}

// optional uint32 AP_C_DRV_RESIST_RR_TYPE_NU = 1720;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_rr_type_nu() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_rr_type_nu() const {
  return _internal_has_ap_c_drv_resist_rr_type_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_rr_type_nu() {
  ap_c_drv_resist_rr_type_nu_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::_internal_ap_c_drv_resist_rr_type_nu() const {
  return ap_c_drv_resist_rr_type_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::ap_c_drv_resist_rr_type_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RR_TYPE_NU)
  return _internal_ap_c_drv_resist_rr_type_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_rr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  ap_c_drv_resist_rr_type_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_rr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_c_drv_resist_rr_type_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RR_TYPE_NU)
}

// optional float AP_C_DRV_RESIST_RR_RED_DIST_M = 300;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_rr_red_dist_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_rr_red_dist_m() const {
  return _internal_has_ap_c_drv_resist_rr_red_dist_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_rr_red_dist_m() {
  ap_c_drv_resist_rr_red_dist_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_drv_resist_rr_red_dist_m() const {
  return ap_c_drv_resist_rr_red_dist_m_;
}
inline float FC_TRJCTL_Params::ap_c_drv_resist_rr_red_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RR_RED_DIST_M)
  return _internal_ap_c_drv_resist_rr_red_dist_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_rr_red_dist_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  ap_c_drv_resist_rr_red_dist_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_rr_red_dist_m(float value) {
  _internal_set_ap_c_drv_resist_rr_red_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_RR_RED_DIST_M)
}

// optional uint32 AP_C_DRV_RESIST_FR_TYPE_NU = 3867;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_fr_type_nu() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_fr_type_nu() const {
  return _internal_has_ap_c_drv_resist_fr_type_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_fr_type_nu() {
  ap_c_drv_resist_fr_type_nu_ = 0u;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::_internal_ap_c_drv_resist_fr_type_nu() const {
  return ap_c_drv_resist_fr_type_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJCTL_Params::ap_c_drv_resist_fr_type_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FR_TYPE_NU)
  return _internal_ap_c_drv_resist_fr_type_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_fr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000010u;
  ap_c_drv_resist_fr_type_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_fr_type_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_c_drv_resist_fr_type_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FR_TYPE_NU)
}

// optional float AP_C_DRV_RESIST_FR_RED_DIST_M = 565;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drv_resist_fr_red_dist_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drv_resist_fr_red_dist_m() const {
  return _internal_has_ap_c_drv_resist_fr_red_dist_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_drv_resist_fr_red_dist_m() {
  ap_c_drv_resist_fr_red_dist_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_drv_resist_fr_red_dist_m() const {
  return ap_c_drv_resist_fr_red_dist_m_;
}
inline float FC_TRJCTL_Params::ap_c_drv_resist_fr_red_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FR_RED_DIST_M)
  return _internal_ap_c_drv_resist_fr_red_dist_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drv_resist_fr_red_dist_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  ap_c_drv_resist_fr_red_dist_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drv_resist_fr_red_dist_m(float value) {
  _internal_set_ap_c_drv_resist_fr_red_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRV_RESIST_FR_RED_DIST_M)
}

// optional float AP_C_STEER_SATURATE_THRESH_RAD = 2278;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_steer_saturate_thresh_rad() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_steer_saturate_thresh_rad() const {
  return _internal_has_ap_c_steer_saturate_thresh_rad();
}
inline void FC_TRJCTL_Params::clear_ap_c_steer_saturate_thresh_rad() {
  ap_c_steer_saturate_thresh_rad_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_steer_saturate_thresh_rad() const {
  return ap_c_steer_saturate_thresh_rad_;
}
inline float FC_TRJCTL_Params::ap_c_steer_saturate_thresh_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_SATURATE_THRESH_RAD)
  return _internal_ap_c_steer_saturate_thresh_rad();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_steer_saturate_thresh_rad(float value) {
  _has_bits_[1] |= 0x00008000u;
  ap_c_steer_saturate_thresh_rad_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_steer_saturate_thresh_rad(float value) {
  _internal_set_ap_c_steer_saturate_thresh_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_SATURATE_THRESH_RAD)
}

// optional float AP_C_STEER_SATURATE_RATE_RADPS = 2803;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_steer_saturate_rate_radps() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_steer_saturate_rate_radps() const {
  return _internal_has_ap_c_steer_saturate_rate_radps();
}
inline void FC_TRJCTL_Params::clear_ap_c_steer_saturate_rate_radps() {
  ap_c_steer_saturate_rate_radps_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_steer_saturate_rate_radps() const {
  return ap_c_steer_saturate_rate_radps_;
}
inline float FC_TRJCTL_Params::ap_c_steer_saturate_rate_radps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_SATURATE_RATE_RADPS)
  return _internal_ap_c_steer_saturate_rate_radps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_steer_saturate_rate_radps(float value) {
  _has_bits_[1] |= 0x04000000u;
  ap_c_steer_saturate_rate_radps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_steer_saturate_rate_radps(float value) {
  _internal_set_ap_c_steer_saturate_rate_radps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_STEER_SATURATE_RATE_RADPS)
}

// optional float AP_C_PC_MAX_STEER_ACC_RADPS2 = 2886;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_max_steer_acc_radps2() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_max_steer_acc_radps2() const {
  return _internal_has_ap_c_pc_max_steer_acc_radps2();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_max_steer_acc_radps2() {
  ap_c_pc_max_steer_acc_radps2_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_max_steer_acc_radps2() const {
  return ap_c_pc_max_steer_acc_radps2_;
}
inline float FC_TRJCTL_Params::ap_c_pc_max_steer_acc_radps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_MAX_STEER_ACC_RADPS2)
  return _internal_ap_c_pc_max_steer_acc_radps2();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_max_steer_acc_radps2(float value) {
  _has_bits_[1] |= 0x10000000u;
  ap_c_pc_max_steer_acc_radps2_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_max_steer_acc_radps2(float value) {
  _internal_set_ap_c_pc_max_steer_acc_radps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_MAX_STEER_ACC_RADPS2)
}

// optional float AP_C_PC_RATE_LIMIT_FACTOR_NU = 391;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_rate_limit_factor_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_rate_limit_factor_nu() const {
  return _internal_has_ap_c_pc_rate_limit_factor_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_rate_limit_factor_nu() {
  ap_c_pc_rate_limit_factor_nu_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_rate_limit_factor_nu() const {
  return ap_c_pc_rate_limit_factor_nu_;
}
inline float FC_TRJCTL_Params::ap_c_pc_rate_limit_factor_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_RATE_LIMIT_FACTOR_NU)
  return _internal_ap_c_pc_rate_limit_factor_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_rate_limit_factor_nu(float value) {
  _has_bits_[0] |= 0x00000080u;
  ap_c_pc_rate_limit_factor_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_rate_limit_factor_nu(float value) {
  _internal_set_ap_c_pc_rate_limit_factor_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_RATE_LIMIT_FACTOR_NU)
}

// optional float AP_C_PC_CURV_PREV_FACTOR_ADD_NU = 278;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_curv_prev_factor_add_nu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_curv_prev_factor_add_nu() const {
  return _internal_has_ap_c_pc_curv_prev_factor_add_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_curv_prev_factor_add_nu() {
  ap_c_pc_curv_prev_factor_add_nu_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_curv_prev_factor_add_nu() const {
  return ap_c_pc_curv_prev_factor_add_nu_;
}
inline float FC_TRJCTL_Params::ap_c_pc_curv_prev_factor_add_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREV_FACTOR_ADD_NU)
  return _internal_ap_c_pc_curv_prev_factor_add_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_curv_prev_factor_add_nu(float value) {
  _has_bits_[0] |= 0x00000010u;
  ap_c_pc_curv_prev_factor_add_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_curv_prev_factor_add_nu(float value) {
  _internal_set_ap_c_pc_curv_prev_factor_add_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREV_FACTOR_ADD_NU)
}

// optional bool AP_C_PC_CURV_PREV_REDUCED_NU = 1199;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_curv_prev_reduced_nu() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_curv_prev_reduced_nu() const {
  return _internal_has_ap_c_pc_curv_prev_reduced_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_curv_prev_reduced_nu() {
  ap_c_pc_curv_prev_reduced_nu_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_pc_curv_prev_reduced_nu() const {
  return ap_c_pc_curv_prev_reduced_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_pc_curv_prev_reduced_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREV_REDUCED_NU)
  return _internal_ap_c_pc_curv_prev_reduced_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_curv_prev_reduced_nu(bool value) {
  _has_bits_[0] |= 0x00080000u;
  ap_c_pc_curv_prev_reduced_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_curv_prev_reduced_nu(bool value) {
  _internal_set_ap_c_pc_curv_prev_reduced_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_CURV_PREV_REDUCED_NU)
}

// optional float AP_C_FAIL_MAX_LONG_OVERSHOOT_M = 2963;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_fail_max_long_overshoot_m() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_fail_max_long_overshoot_m() const {
  return _internal_has_ap_c_fail_max_long_overshoot_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_fail_max_long_overshoot_m() {
  ap_c_fail_max_long_overshoot_m_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_fail_max_long_overshoot_m() const {
  return ap_c_fail_max_long_overshoot_m_;
}
inline float FC_TRJCTL_Params::ap_c_fail_max_long_overshoot_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_FAIL_MAX_LONG_OVERSHOOT_M)
  return _internal_ap_c_fail_max_long_overshoot_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_fail_max_long_overshoot_m(float value) {
  _has_bits_[1] |= 0x20000000u;
  ap_c_fail_max_long_overshoot_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_fail_max_long_overshoot_m(float value) {
  _internal_set_ap_c_fail_max_long_overshoot_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_FAIL_MAX_LONG_OVERSHOOT_M)
}

// optional float AP_C_COMP_TIRE_DEF_FACTOR_NU = 2306;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_comp_tire_def_factor_nu() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_comp_tire_def_factor_nu() const {
  return _internal_has_ap_c_comp_tire_def_factor_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_comp_tire_def_factor_nu() {
  ap_c_comp_tire_def_factor_nu_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_comp_tire_def_factor_nu() const {
  return ap_c_comp_tire_def_factor_nu_;
}
inline float FC_TRJCTL_Params::ap_c_comp_tire_def_factor_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_COMP_TIRE_DEF_FACTOR_NU)
  return _internal_ap_c_comp_tire_def_factor_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_comp_tire_def_factor_nu(float value) {
  _has_bits_[1] |= 0x00010000u;
  ap_c_comp_tire_def_factor_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_comp_tire_def_factor_nu(float value) {
  _internal_set_ap_c_comp_tire_def_factor_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_COMP_TIRE_DEF_FACTOR_NU)
}

// optional float AP_C_MANEUV_FINISHED_HYST_M = 842;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_maneuv_finished_hyst_m() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_maneuv_finished_hyst_m() const {
  return _internal_has_ap_c_maneuv_finished_hyst_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_maneuv_finished_hyst_m() {
  ap_c_maneuv_finished_hyst_m_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_maneuv_finished_hyst_m() const {
  return ap_c_maneuv_finished_hyst_m_;
}
inline float FC_TRJCTL_Params::ap_c_maneuv_finished_hyst_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_HYST_M)
  return _internal_ap_c_maneuv_finished_hyst_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_maneuv_finished_hyst_m(float value) {
  _has_bits_[0] |= 0x00020000u;
  ap_c_maneuv_finished_hyst_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_maneuv_finished_hyst_m(float value) {
  _internal_set_ap_c_maneuv_finished_hyst_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MANEUV_FINISHED_HYST_M)
}

// optional float AP_C_MIN_DIST_REQ_M = 2098;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_min_dist_req_m() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_min_dist_req_m() const {
  return _internal_has_ap_c_min_dist_req_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_min_dist_req_m() {
  ap_c_min_dist_req_m_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_min_dist_req_m() const {
  return ap_c_min_dist_req_m_;
}
inline float FC_TRJCTL_Params::ap_c_min_dist_req_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MIN_DIST_REQ_M)
  return _internal_ap_c_min_dist_req_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_min_dist_req_m(float value) {
  _has_bits_[1] |= 0x00000400u;
  ap_c_min_dist_req_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_min_dist_req_m(float value) {
  _internal_set_ap_c_min_dist_req_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_MIN_DIST_REQ_M)
}

// optional bool AP_C_FEAT_WAIT_FOR_CONTACT_NU = 1858;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_feat_wait_for_contact_nu() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_feat_wait_for_contact_nu() const {
  return _internal_has_ap_c_feat_wait_for_contact_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_feat_wait_for_contact_nu() {
  ap_c_feat_wait_for_contact_nu_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_feat_wait_for_contact_nu() const {
  return ap_c_feat_wait_for_contact_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_feat_wait_for_contact_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_FEAT_WAIT_FOR_CONTACT_NU)
  return _internal_ap_c_feat_wait_for_contact_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_feat_wait_for_contact_nu(bool value) {
  _has_bits_[0] |= 0x00100000u;
  ap_c_feat_wait_for_contact_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_feat_wait_for_contact_nu(bool value) {
  _internal_set_ap_c_feat_wait_for_contact_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_FEAT_WAIT_FOR_CONTACT_NU)
}

// optional float AP_C_WFC_OVERSHOOT_LENGTH_M = 2442;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_wfc_overshoot_length_m() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_wfc_overshoot_length_m() const {
  return _internal_has_ap_c_wfc_overshoot_length_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_wfc_overshoot_length_m() {
  ap_c_wfc_overshoot_length_m_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_wfc_overshoot_length_m() const {
  return ap_c_wfc_overshoot_length_m_;
}
inline float FC_TRJCTL_Params::ap_c_wfc_overshoot_length_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_OVERSHOOT_LENGTH_M)
  return _internal_ap_c_wfc_overshoot_length_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_wfc_overshoot_length_m(float value) {
  _has_bits_[1] |= 0x00080000u;
  ap_c_wfc_overshoot_length_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_wfc_overshoot_length_m(float value) {
  _internal_set_ap_c_wfc_overshoot_length_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_OVERSHOOT_LENGTH_M)
}

// optional float AP_C_WFC_OVERSHOOT_DIST_THRES_M = 2209;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_wfc_overshoot_dist_thres_m() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_wfc_overshoot_dist_thres_m() const {
  return _internal_has_ap_c_wfc_overshoot_dist_thres_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_wfc_overshoot_dist_thres_m() {
  ap_c_wfc_overshoot_dist_thres_m_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_wfc_overshoot_dist_thres_m() const {
  return ap_c_wfc_overshoot_dist_thres_m_;
}
inline float FC_TRJCTL_Params::ap_c_wfc_overshoot_dist_thres_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_OVERSHOOT_DIST_THRES_M)
  return _internal_ap_c_wfc_overshoot_dist_thres_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_wfc_overshoot_dist_thres_m(float value) {
  _has_bits_[1] |= 0x00004000u;
  ap_c_wfc_overshoot_dist_thres_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_wfc_overshoot_dist_thres_m(float value) {
  _internal_set_ap_c_wfc_overshoot_dist_thres_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_OVERSHOOT_DIST_THRES_M)
}

// optional float AP_C_WFC_VDY_DIST_THRES_M = 3941;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_wfc_vdy_dist_thres_m() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_wfc_vdy_dist_thres_m() const {
  return _internal_has_ap_c_wfc_vdy_dist_thres_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_wfc_vdy_dist_thres_m() {
  ap_c_wfc_vdy_dist_thres_m_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_wfc_vdy_dist_thres_m() const {
  return ap_c_wfc_vdy_dist_thres_m_;
}
inline float FC_TRJCTL_Params::ap_c_wfc_vdy_dist_thres_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_VDY_DIST_THRES_M)
  return _internal_ap_c_wfc_vdy_dist_thres_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_wfc_vdy_dist_thres_m(float value) {
  _has_bits_[2] |= 0x00000020u;
  ap_c_wfc_vdy_dist_thres_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_wfc_vdy_dist_thres_m(float value) {
  _internal_set_ap_c_wfc_vdy_dist_thres_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_VDY_DIST_THRES_M)
}

// optional float AP_C_WFC_VDY_DRIVE_OFF_THRES_M = 3598;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_wfc_vdy_drive_off_thres_m() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_wfc_vdy_drive_off_thres_m() const {
  return _internal_has_ap_c_wfc_vdy_drive_off_thres_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_wfc_vdy_drive_off_thres_m() {
  ap_c_wfc_vdy_drive_off_thres_m_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_wfc_vdy_drive_off_thres_m() const {
  return ap_c_wfc_vdy_drive_off_thres_m_;
}
inline float FC_TRJCTL_Params::ap_c_wfc_vdy_drive_off_thres_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_VDY_DRIVE_OFF_THRES_M)
  return _internal_ap_c_wfc_vdy_drive_off_thres_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_wfc_vdy_drive_off_thres_m(float value) {
  _has_bits_[2] |= 0x00000004u;
  ap_c_wfc_vdy_drive_off_thres_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_wfc_vdy_drive_off_thres_m(float value) {
  _internal_set_ap_c_wfc_vdy_drive_off_thres_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_VDY_DRIVE_OFF_THRES_M)
}

// optional bool AP_C_FEAT_WS_VEL_REDUCED_NU = 902;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_feat_ws_vel_reduced_nu() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_feat_ws_vel_reduced_nu() const {
  return _internal_has_ap_c_feat_ws_vel_reduced_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_feat_ws_vel_reduced_nu() {
  ap_c_feat_ws_vel_reduced_nu_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_feat_ws_vel_reduced_nu() const {
  return ap_c_feat_ws_vel_reduced_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_feat_ws_vel_reduced_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_FEAT_WS_VEL_REDUCED_NU)
  return _internal_ap_c_feat_ws_vel_reduced_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_feat_ws_vel_reduced_nu(bool value) {
  _has_bits_[0] |= 0x00200000u;
  ap_c_feat_ws_vel_reduced_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_feat_ws_vel_reduced_nu(bool value) {
  _internal_set_ap_c_feat_ws_vel_reduced_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_FEAT_WS_VEL_REDUCED_NU)
}

// optional float AP_C_WFC_WS_VEL_DIST_THRESH_M = 2458;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_wfc_ws_vel_dist_thresh_m() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_wfc_ws_vel_dist_thresh_m() const {
  return _internal_has_ap_c_wfc_ws_vel_dist_thresh_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_wfc_ws_vel_dist_thresh_m() {
  ap_c_wfc_ws_vel_dist_thresh_m_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_wfc_ws_vel_dist_thresh_m() const {
  return ap_c_wfc_ws_vel_dist_thresh_m_;
}
inline float FC_TRJCTL_Params::ap_c_wfc_ws_vel_dist_thresh_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_WS_VEL_DIST_THRESH_M)
  return _internal_ap_c_wfc_ws_vel_dist_thresh_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_wfc_ws_vel_dist_thresh_m(float value) {
  _has_bits_[1] |= 0x00100000u;
  ap_c_wfc_ws_vel_dist_thresh_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_wfc_ws_vel_dist_thresh_m(float value) {
  _internal_set_ap_c_wfc_ws_vel_dist_thresh_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_WS_VEL_DIST_THRESH_M)
}

// optional float AP_C_WFC_WS_VEL_LIMIT_MPS = 580;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_wfc_ws_vel_limit_mps() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_wfc_ws_vel_limit_mps() const {
  return _internal_has_ap_c_wfc_ws_vel_limit_mps();
}
inline void FC_TRJCTL_Params::clear_ap_c_wfc_ws_vel_limit_mps() {
  ap_c_wfc_ws_vel_limit_mps_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_wfc_ws_vel_limit_mps() const {
  return ap_c_wfc_ws_vel_limit_mps_;
}
inline float FC_TRJCTL_Params::ap_c_wfc_ws_vel_limit_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_WS_VEL_LIMIT_MPS)
  return _internal_ap_c_wfc_ws_vel_limit_mps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_wfc_ws_vel_limit_mps(float value) {
  _has_bits_[0] |= 0x00000800u;
  ap_c_wfc_ws_vel_limit_mps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_wfc_ws_vel_limit_mps(float value) {
  _internal_set_ap_c_wfc_ws_vel_limit_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_WFC_WS_VEL_LIMIT_MPS)
}

// optional bool AP_C_HACK_WS_LAST_STROKE_NU = 3;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_hack_ws_last_stroke_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_hack_ws_last_stroke_nu() const {
  return _internal_has_ap_c_hack_ws_last_stroke_nu();
}
inline void FC_TRJCTL_Params::clear_ap_c_hack_ws_last_stroke_nu() {
  ap_c_hack_ws_last_stroke_nu_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool FC_TRJCTL_Params::_internal_ap_c_hack_ws_last_stroke_nu() const {
  return ap_c_hack_ws_last_stroke_nu_;
}
inline bool FC_TRJCTL_Params::ap_c_hack_ws_last_stroke_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_HACK_WS_LAST_STROKE_NU)
  return _internal_ap_c_hack_ws_last_stroke_nu();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_hack_ws_last_stroke_nu(bool value) {
  _has_bits_[0] |= 0x00400000u;
  ap_c_hack_ws_last_stroke_nu_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_hack_ws_last_stroke_nu(bool value) {
  _internal_set_ap_c_hack_ws_last_stroke_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_HACK_WS_LAST_STROKE_NU)
}

// optional float AP_C_NO_COMF_STEER_WS_THRES_M = 1684;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_no_comf_steer_ws_thres_m() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_no_comf_steer_ws_thres_m() const {
  return _internal_has_ap_c_no_comf_steer_ws_thres_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_no_comf_steer_ws_thres_m() {
  ap_c_no_comf_steer_ws_thres_m_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_no_comf_steer_ws_thres_m() const {
  return ap_c_no_comf_steer_ws_thres_m_;
}
inline float FC_TRJCTL_Params::ap_c_no_comf_steer_ws_thres_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_NO_COMF_STEER_WS_THRES_M)
  return _internal_ap_c_no_comf_steer_ws_thres_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_no_comf_steer_ws_thres_m(float value) {
  _has_bits_[1] |= 0x00000001u;
  ap_c_no_comf_steer_ws_thres_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_no_comf_steer_ws_thres_m(float value) {
  _internal_set_ap_c_no_comf_steer_ws_thres_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_NO_COMF_STEER_WS_THRES_M)
}

// optional float AP_C_DRIVE_OFF_DISTANCE_THRES_M = 646;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drive_off_distance_thres_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drive_off_distance_thres_m() const {
  return _internal_has_ap_c_drive_off_distance_thres_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_drive_off_distance_thres_m() {
  ap_c_drive_off_distance_thres_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_drive_off_distance_thres_m() const {
  return ap_c_drive_off_distance_thres_m_;
}
inline float FC_TRJCTL_Params::ap_c_drive_off_distance_thres_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRIVE_OFF_DISTANCE_THRES_M)
  return _internal_ap_c_drive_off_distance_thres_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drive_off_distance_thres_m(float value) {
  _has_bits_[0] |= 0x00001000u;
  ap_c_drive_off_distance_thres_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drive_off_distance_thres_m(float value) {
  _internal_set_ap_c_drive_off_distance_thres_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRIVE_OFF_DISTANCE_THRES_M)
}

// optional float AP_C_DRIVE_OFF_VELO_THRES_MPS = 3072;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_drive_off_velo_thres_mps() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_drive_off_velo_thres_mps() const {
  return _internal_has_ap_c_drive_off_velo_thres_mps();
}
inline void FC_TRJCTL_Params::clear_ap_c_drive_off_velo_thres_mps() {
  ap_c_drive_off_velo_thres_mps_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_drive_off_velo_thres_mps() const {
  return ap_c_drive_off_velo_thres_mps_;
}
inline float FC_TRJCTL_Params::ap_c_drive_off_velo_thres_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRIVE_OFF_VELO_THRES_MPS)
  return _internal_ap_c_drive_off_velo_thres_mps();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_drive_off_velo_thres_mps(float value) {
  _has_bits_[1] |= 0x40000000u;
  ap_c_drive_off_velo_thres_mps_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_drive_off_velo_thres_mps(float value) {
  _internal_set_ap_c_drive_off_velo_thres_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_DRIVE_OFF_VELO_THRES_MPS)
}

// optional float AP_C_HANDSHAKE_WAIT_THRES_TIME_S = 2835;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_handshake_wait_thres_time_s() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_handshake_wait_thres_time_s() const {
  return _internal_has_ap_c_handshake_wait_thres_time_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_handshake_wait_thres_time_s() {
  ap_c_handshake_wait_thres_time_s_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_handshake_wait_thres_time_s() const {
  return ap_c_handshake_wait_thres_time_s_;
}
inline float FC_TRJCTL_Params::ap_c_handshake_wait_thres_time_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_HANDSHAKE_WAIT_THRES_TIME_S)
  return _internal_ap_c_handshake_wait_thres_time_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_handshake_wait_thres_time_s(float value) {
  _has_bits_[1] |= 0x08000000u;
  ap_c_handshake_wait_thres_time_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_handshake_wait_thres_time_s(float value) {
  _internal_set_ap_c_handshake_wait_thres_time_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_HANDSHAKE_WAIT_THRES_TIME_S)
}

// optional float AP_C_PC_VELO_PREVIEW_TIME_S = 881;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_pc_velo_preview_time_s() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_pc_velo_preview_time_s() const {
  return _internal_has_ap_c_pc_velo_preview_time_s();
}
inline void FC_TRJCTL_Params::clear_ap_c_pc_velo_preview_time_s() {
  ap_c_pc_velo_preview_time_s_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_pc_velo_preview_time_s() const {
  return ap_c_pc_velo_preview_time_s_;
}
inline float FC_TRJCTL_Params::ap_c_pc_velo_preview_time_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_VELO_PREVIEW_TIME_S)
  return _internal_ap_c_pc_velo_preview_time_s();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_pc_velo_preview_time_s(float value) {
  _has_bits_[0] |= 0x00040000u;
  ap_c_pc_velo_preview_time_s_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_pc_velo_preview_time_s(float value) {
  _internal_set_ap_c_pc_velo_preview_time_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_PC_VELO_PREVIEW_TIME_S)
}

// optional float AP_C_LEAVING_PATH_BEFORE_M = 2074;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_leaving_path_before_m() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_leaving_path_before_m() const {
  return _internal_has_ap_c_leaving_path_before_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_leaving_path_before_m() {
  ap_c_leaving_path_before_m_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_leaving_path_before_m() const {
  return ap_c_leaving_path_before_m_;
}
inline float FC_TRJCTL_Params::ap_c_leaving_path_before_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_LEAVING_PATH_BEFORE_M)
  return _internal_ap_c_leaving_path_before_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_leaving_path_before_m(float value) {
  _has_bits_[1] |= 0x00000100u;
  ap_c_leaving_path_before_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_leaving_path_before_m(float value) {
  _internal_set_ap_c_leaving_path_before_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_LEAVING_PATH_BEFORE_M)
}

// optional float AP_C_LEAVING_PATH_BEHIND_M = 1689;
inline bool FC_TRJCTL_Params::_internal_has_ap_c_leaving_path_behind_m() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJCTL_Params::has_ap_c_leaving_path_behind_m() const {
  return _internal_has_ap_c_leaving_path_behind_m();
}
inline void FC_TRJCTL_Params::clear_ap_c_leaving_path_behind_m() {
  ap_c_leaving_path_behind_m_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float FC_TRJCTL_Params::_internal_ap_c_leaving_path_behind_m() const {
  return ap_c_leaving_path_behind_m_;
}
inline float FC_TRJCTL_Params::ap_c_leaving_path_behind_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_LEAVING_PATH_BEHIND_M)
  return _internal_ap_c_leaving_path_behind_m();
}
inline void FC_TRJCTL_Params::_internal_set_ap_c_leaving_path_behind_m(float value) {
  _has_bits_[1] |= 0x00000002u;
  ap_c_leaving_path_behind_m_ = value;
}
inline void FC_TRJCTL_Params::set_ap_c_leaving_path_behind_m(float value) {
  _internal_set_ap_c_leaving_path_behind_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.AP_C_LEAVING_PATH_BEHIND_M)
}

// optional .pb.ap_trjctl.fc_trjctl_vehicle_params.FC_TRJCTL_Vehicle_Params vehicleParams = 3431;
inline bool FC_TRJCTL_Params::_internal_has_vehicleparams() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vehicleparams_ != nullptr);
  return value;
}
inline bool FC_TRJCTL_Params::has_vehicleparams() const {
  return _internal_has_vehicleparams();
}
inline const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params& FC_TRJCTL_Params::_internal_vehicleparams() const {
  const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* p = vehicleparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params*>(
      &::pb::ap_trjctl::fc_trjctl_vehicle_params::_FC_TRJCTL_Vehicle_Params_default_instance_);
}
inline const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params& FC_TRJCTL_Params::vehicleparams() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.vehicleParams)
  return _internal_vehicleparams();
}
inline ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* FC_TRJCTL_Params::release_vehicleparams() {
  // @@protoc_insertion_point(field_release:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.vehicleParams)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* temp = vehicleparams_;
  vehicleparams_ = nullptr;
  return temp;
}
inline ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* FC_TRJCTL_Params::_internal_mutable_vehicleparams() {
  _has_bits_[0] |= 0x00000004u;
  if (vehicleparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params>(GetArenaNoVirtual());
    vehicleparams_ = p;
  }
  return vehicleparams_;
}
inline ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* FC_TRJCTL_Params::mutable_vehicleparams() {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.vehicleParams)
  return _internal_mutable_vehicleparams();
}
inline void FC_TRJCTL_Params::set_allocated_vehicleparams(::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params* vehicleparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicleparams_);
  }
  if (vehicleparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicleparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicleparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vehicleparams_ = vehicleparams;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.vehicleParams)
}

// optional .pb.ap_trjctl.fc_trjctl_sys_func_params.FC_TRJCTL_Sys_Func_Params sysFuncParams = 1458;
inline bool FC_TRJCTL_Params::_internal_has_sysfuncparams() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sysfuncparams_ != nullptr);
  return value;
}
inline bool FC_TRJCTL_Params::has_sysfuncparams() const {
  return _internal_has_sysfuncparams();
}
inline const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params& FC_TRJCTL_Params::_internal_sysfuncparams() const {
  const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* p = sysfuncparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params*>(
      &::pb::ap_trjctl::fc_trjctl_sys_func_params::_FC_TRJCTL_Sys_Func_Params_default_instance_);
}
inline const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params& FC_TRJCTL_Params::sysfuncparams() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sysFuncParams)
  return _internal_sysfuncparams();
}
inline ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* FC_TRJCTL_Params::release_sysfuncparams() {
  // @@protoc_insertion_point(field_release:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sysFuncParams)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* temp = sysfuncparams_;
  sysfuncparams_ = nullptr;
  return temp;
}
inline ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* FC_TRJCTL_Params::_internal_mutable_sysfuncparams() {
  _has_bits_[0] |= 0x00000002u;
  if (sysfuncparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params>(GetArenaNoVirtual());
    sysfuncparams_ = p;
  }
  return sysfuncparams_;
}
inline ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* FC_TRJCTL_Params::mutable_sysfuncparams() {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sysFuncParams)
  return _internal_mutable_sysfuncparams();
}
inline void FC_TRJCTL_Params::set_allocated_sysfuncparams(::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params* sysfuncparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sysfuncparams_);
  }
  if (sysfuncparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sysfuncparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sysfuncparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sysfuncparams_ = sysfuncparams;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params.sysFuncParams)
}

// -------------------------------------------------------------------

// FC_TRJCTL_Params_array_port

// repeated .pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params data = 965;
inline int FC_TRJCTL_Params_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FC_TRJCTL_Params_array_port::data_size() const {
  return _internal_data_size();
}
inline void FC_TRJCTL_Params_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* FC_TRJCTL_Params_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params >*
FC_TRJCTL_Params_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port.data)
  return &data_;
}
inline const ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params& FC_TRJCTL_Params_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params& FC_TRJCTL_Params_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* FC_TRJCTL_Params_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* FC_TRJCTL_Params_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params >&
FC_TRJCTL_Params_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fc_trjctl_params
}  // namespace ap_trjctl
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto
