// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/lo_dmcctrl_request_port.proto

#include "ap_trjctl/lo_dmcctrl_request_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_trjctl {
namespace lo_dmcctrl_request_port {
class LoDMCCtrlRequestPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoDMCCtrlRequestPort> _instance;
} _LoDMCCtrlRequestPort_default_instance_;
class LoDMCCtrlRequestPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoDMCCtrlRequestPort_array_port> _instance;
} _LoDMCCtrlRequestPort_array_port_default_instance_;
}  // namespace lo_dmcctrl_request_port
}  // namespace ap_trjctl
}  // namespace pb
static void InitDefaultsscc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::lo_dmcctrl_request_port::_LoDMCCtrlRequestPort_default_instance_;
    new (ptr) ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_LoDMCCtrlRequestPort_array_port_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::lo_dmcctrl_request_port::_LoDMCCtrlRequestPort_array_port_default_instance_;
    new (ptr) ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoDMCCtrlRequestPort_array_port_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoDMCCtrlRequestPort_array_port_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto}, {
      &scc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, distancetostopreq_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, velocitylimitreq_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, accelerationreq_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, lodmcctrlrequestsource_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, lodmcctrlrequestinterface_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, lodmcctrlrequest_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, holdreq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, emergencyholdreq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, securereq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, drivingforwardreq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort, trajectoryreset_nu_),
  4,
  0,
  1,
  7,
  8,
  5,
  6,
  3,
  2,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort)},
  { 31, 37, sizeof(::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::lo_dmcctrl_request_port::_LoDMCCtrlRequestPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::lo_dmcctrl_request_port::_LoDMCCtrlRequestPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'ap_trjctl/lo_dmcctrl_request_port.prot"
  "o\022$pb.ap_trjctl.lo_dmcctrl_request_port\032"
  "\027eco/signal_header.proto\032.ap_trjctl/lo_d"
  "mcctrl_request_source_type.proto\0321ap_trj"
  "ctl/lo_dmcctrl_request_interface_type.pr"
  "oto\032\'ap_trjctl/lo_dmcctrl_request_type.p"
  "roto\032\'ap_trjctl/lo_dmchold_request_type."
  "proto\"\304\005\n\024LoDMCCtrlRequestPort\022\030\n\017uiVers"
  "ionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\"."
  "pb.eco.signal_header.SignalHeader\022\034\n\023dis"
  "tanceToStopReq_m\030\372\031 \001(\002\022\035\n\024velocityLimit"
  "Req_mps\030\321\023 \001(\002\022\035\n\024accelerationReq_mps2\030\276"
  "\025 \001(\002\022k\n\031loDMCCtrlRequestSource_nu\030\264\021 \001("
  "\0162G.pb.ap_trjctl.lo_dmcctrl_request_sour"
  "ce_type.LoDMCCtrlRequestSourceType\022t\n\034lo"
  "DMCCtrlRequestInterface_nu\030\324\022 \001(\0162M.pb.a"
  "p_trjctl.lo_dmcctrl_request_interface_ty"
  "pe.LoDMCCtrlRequestInterfaceType\022X\n\023loDM"
  "CCtrlRequest_nu\030\231\020 \001(\0162:.pb.ap_trjctl.lo"
  "_dmcctrl_request_type.LoDMCCtrlRequestTy"
  "pe\022O\n\nholdReq_nu\030\344\003 \001(\0162:.pb.ap_trjctl.l"
  "o_dmchold_request_type.LoDMCHoldRequestT"
  "ype\022\034\n\023emergencyHoldReq_nu\030\227\026 \001(\010\022\025\n\014sec"
  "ureReq_nu\030\263\017 \001(\010\022\035\n\024drivingForwardReq_nu"
  "\030\313\030 \001(\010\022\033\n\022trajectoryReset_nu\030\317\035 \001(\010\"l\n\037"
  "LoDMCCtrlRequestPort_array_port\022I\n\004data\030"
  "\200\023 \003(\0132:.pb.ap_trjctl.lo_dmcctrl_request"
  "_port.LoDMCCtrlRequestPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_deps[5] = {
  &::descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5finterface_5ftype_2eproto,
  &::descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fsource_5ftype_2eproto,
  &::descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5ftype_2eproto,
  &::descriptor_table_ap_5ftrjctl_2flo_5fdmchold_5frequest_5ftype_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_sccs[2] = {
  &scc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto.base,
  &scc_info_LoDMCCtrlRequestPort_array_port_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_once;
static bool descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto = {
  &descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_initialized, descriptor_table_protodef_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto, "ap_trjctl/lo_dmcctrl_request_port.proto", 1106,
  &descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_once, descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_sccs, descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto::offsets,
  file_level_metadata_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto, 2, file_level_enum_descriptors_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto, file_level_service_descriptors_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto), true);
namespace pb {
namespace ap_trjctl {
namespace lo_dmcctrl_request_port {

// ===================================================================

void LoDMCCtrlRequestPort::InitAsDefaultInstance() {
  ::pb::ap_trjctl::lo_dmcctrl_request_port::_LoDMCCtrlRequestPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class LoDMCCtrlRequestPort::_Internal {
 public:
  using HasBits = decltype(std::declval<LoDMCCtrlRequestPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const LoDMCCtrlRequestPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distancetostopreq_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_velocitylimitreq_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_accelerationreq_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lodmcctrlrequestsource_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lodmcctrlrequestinterface_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lodmcctrlrequest_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_holdreq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_emergencyholdreq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_securereq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_drivingforwardreq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_trajectoryreset_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
LoDMCCtrlRequestPort::_Internal::ssigheader(const LoDMCCtrlRequestPort* msg) {
  return *msg->ssigheader_;
}
void LoDMCCtrlRequestPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LoDMCCtrlRequestPort::LoDMCCtrlRequestPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
}
LoDMCCtrlRequestPort::LoDMCCtrlRequestPort(const LoDMCCtrlRequestPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&distancetostopreq_m_, &from.distancetostopreq_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectoryreset_nu_) -
    reinterpret_cast<char*>(&distancetostopreq_m_)) + sizeof(trajectoryreset_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
}

void LoDMCCtrlRequestPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectoryreset_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(trajectoryreset_nu_));
}

LoDMCCtrlRequestPort::~LoDMCCtrlRequestPort() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  SharedDtor();
}

void LoDMCCtrlRequestPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void LoDMCCtrlRequestPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoDMCCtrlRequestPort& LoDMCCtrlRequestPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoDMCCtrlRequestPort_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void LoDMCCtrlRequestPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&distancetostopreq_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&velocitylimitreq_mps_) -
        reinterpret_cast<char*>(&distancetostopreq_m_)) + sizeof(velocitylimitreq_mps_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&accelerationreq_mps2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trajectoryreset_nu_) -
        reinterpret_cast<char*>(&accelerationreq_mps2_)) + sizeof(trajectoryreset_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoDMCCtrlRequestPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.ap_trjctl.lo_dmchold_request_type.LoDMCHoldRequestType holdReq_nu = 484;
      case 484:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::lo_dmchold_request_type::LoDMCHoldRequestType_IsValid(val))) {
            _internal_set_holdreq_nu(static_cast<::pb::ap_trjctl::lo_dmchold_request_type::LoDMCHoldRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(484, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool secureReq_nu = 1971;
      case 1971:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_securereq_nu(&has_bits);
          securereq_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.lo_dmcctrl_request_type.LoDMCCtrlRequestType loDMCCtrlRequest_nu = 2073;
      case 2073:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::lo_dmcctrl_request_type::LoDMCCtrlRequestType_IsValid(val))) {
            _internal_set_lodmcctrlrequest_nu(static_cast<::pb::ap_trjctl::lo_dmcctrl_request_type::LoDMCCtrlRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2073, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.lo_dmcctrl_request_source_type.LoDMCCtrlRequestSourceType loDMCCtrlRequestSource_nu = 2228;
      case 2228:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::lo_dmcctrl_request_source_type::LoDMCCtrlRequestSourceType_IsValid(val))) {
            _internal_set_lodmcctrlrequestsource_nu(static_cast<::pb::ap_trjctl::lo_dmcctrl_request_source_type::LoDMCCtrlRequestSourceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2228, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.lo_dmcctrl_request_interface_type.LoDMCCtrlRequestInterfaceType loDMCCtrlRequestInterface_nu = 2388;
      case 2388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::lo_dmcctrl_request_interface_type::LoDMCCtrlRequestInterfaceType_IsValid(val))) {
            _internal_set_lodmcctrlrequestinterface_nu(static_cast<::pb::ap_trjctl::lo_dmcctrl_request_interface_type::LoDMCCtrlRequestInterfaceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2388, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float velocityLimitReq_mps = 2513;
      case 2513:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_velocitylimitreq_mps(&has_bits);
          velocitylimitreq_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accelerationReq_mps2 = 2750;
      case 2750:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_accelerationreq_mps2(&has_bits);
          accelerationreq_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool emergencyHoldReq_nu = 2839;
      case 2839:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_emergencyholdreq_nu(&has_bits);
          emergencyholdreq_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drivingForwardReq_nu = 3147;
      case 3147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_drivingforwardreq_nu(&has_bits);
          drivingforwardreq_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distanceToStopReq_m = 3322;
      case 3322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_distancetostopreq_m(&has_bits);
          distancetostopreq_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool trajectoryReset_nu = 3791;
      case 3791:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_trajectoryreset_nu(&has_bits);
          trajectoryreset_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoDMCCtrlRequestPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_trjctl.lo_dmchold_request_type.LoDMCHoldRequestType holdReq_nu = 484;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      484, this->_internal_holdreq_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional bool secureReq_nu = 1971;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1971, this->_internal_securereq_nu(), target);
  }

  // optional .pb.ap_trjctl.lo_dmcctrl_request_type.LoDMCCtrlRequestType loDMCCtrlRequest_nu = 2073;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2073, this->_internal_lodmcctrlrequest_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional .pb.ap_trjctl.lo_dmcctrl_request_source_type.LoDMCCtrlRequestSourceType loDMCCtrlRequestSource_nu = 2228;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2228, this->_internal_lodmcctrlrequestsource_nu(), target);
  }

  // optional .pb.ap_trjctl.lo_dmcctrl_request_interface_type.LoDMCCtrlRequestInterfaceType loDMCCtrlRequestInterface_nu = 2388;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2388, this->_internal_lodmcctrlrequestinterface_nu(), target);
  }

  // optional float velocityLimitReq_mps = 2513;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2513, this->_internal_velocitylimitreq_mps(), target);
  }

  // optional float accelerationReq_mps2 = 2750;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2750, this->_internal_accelerationreq_mps2(), target);
  }

  // optional bool emergencyHoldReq_nu = 2839;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2839, this->_internal_emergencyholdreq_nu(), target);
  }

  // optional bool drivingForwardReq_nu = 3147;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3147, this->_internal_drivingforwardreq_nu(), target);
  }

  // optional float distanceToStopReq_m = 3322;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3322, this->_internal_distancetostopreq_m(), target);
  }

  // optional bool trajectoryReset_nu = 3791;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3791, this->_internal_trajectoryreset_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  return target;
}

size_t LoDMCCtrlRequestPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float distanceToStopReq_m = 3322;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional .pb.ap_trjctl.lo_dmchold_request_type.LoDMCHoldRequestType holdReq_nu = 484;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_holdreq_nu());
    }

    // optional .pb.ap_trjctl.lo_dmcctrl_request_type.LoDMCCtrlRequestType loDMCCtrlRequest_nu = 2073;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lodmcctrlrequest_nu());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional .pb.ap_trjctl.lo_dmcctrl_request_source_type.LoDMCCtrlRequestSourceType loDMCCtrlRequestSource_nu = 2228;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lodmcctrlrequestsource_nu());
    }

    // optional .pb.ap_trjctl.lo_dmcctrl_request_interface_type.LoDMCCtrlRequestInterfaceType loDMCCtrlRequestInterface_nu = 2388;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lodmcctrlrequestinterface_nu());
    }

    // optional float velocityLimitReq_mps = 2513;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float accelerationReq_mps2 = 2750;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional bool emergencyHoldReq_nu = 2839;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool secureReq_nu = 1971;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool drivingForwardReq_nu = 3147;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool trajectoryReset_nu = 3791;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoDMCCtrlRequestPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  const LoDMCCtrlRequestPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoDMCCtrlRequestPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
    MergeFrom(*source);
  }
}

void LoDMCCtrlRequestPort::MergeFrom(const LoDMCCtrlRequestPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      distancetostopreq_m_ = from.distancetostopreq_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      holdreq_nu_ = from.holdreq_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      lodmcctrlrequest_nu_ = from.lodmcctrlrequest_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000020u) {
      lodmcctrlrequestsource_nu_ = from.lodmcctrlrequestsource_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      lodmcctrlrequestinterface_nu_ = from.lodmcctrlrequestinterface_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      velocitylimitreq_mps_ = from.velocitylimitreq_mps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      accelerationreq_mps2_ = from.accelerationreq_mps2_;
    }
    if (cached_has_bits & 0x00000200u) {
      emergencyholdreq_nu_ = from.emergencyholdreq_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      securereq_nu_ = from.securereq_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      drivingforwardreq_nu_ = from.drivingforwardreq_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      trajectoryreset_nu_ = from.trajectoryreset_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoDMCCtrlRequestPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoDMCCtrlRequestPort::CopyFrom(const LoDMCCtrlRequestPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoDMCCtrlRequestPort::IsInitialized() const {
  return true;
}

void LoDMCCtrlRequestPort::InternalSwap(LoDMCCtrlRequestPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(distancetostopreq_m_, other->distancetostopreq_m_);
  swap(holdreq_nu_, other->holdreq_nu_);
  swap(lodmcctrlrequest_nu_, other->lodmcctrlrequest_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(lodmcctrlrequestsource_nu_, other->lodmcctrlrequestsource_nu_);
  swap(lodmcctrlrequestinterface_nu_, other->lodmcctrlrequestinterface_nu_);
  swap(velocitylimitreq_mps_, other->velocitylimitreq_mps_);
  swap(accelerationreq_mps2_, other->accelerationreq_mps2_);
  swap(emergencyholdreq_nu_, other->emergencyholdreq_nu_);
  swap(securereq_nu_, other->securereq_nu_);
  swap(drivingforwardreq_nu_, other->drivingforwardreq_nu_);
  swap(trajectoryreset_nu_, other->trajectoryreset_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoDMCCtrlRequestPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoDMCCtrlRequestPort_array_port::InitAsDefaultInstance() {
}
class LoDMCCtrlRequestPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<LoDMCCtrlRequestPort_array_port>()._has_bits_);
};

LoDMCCtrlRequestPort_array_port::LoDMCCtrlRequestPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
}
LoDMCCtrlRequestPort_array_port::LoDMCCtrlRequestPort_array_port(const LoDMCCtrlRequestPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
}

void LoDMCCtrlRequestPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoDMCCtrlRequestPort_array_port_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto.base);
}

LoDMCCtrlRequestPort_array_port::~LoDMCCtrlRequestPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  SharedDtor();
}

void LoDMCCtrlRequestPort_array_port::SharedDtor() {
}

void LoDMCCtrlRequestPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoDMCCtrlRequestPort_array_port& LoDMCCtrlRequestPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoDMCCtrlRequestPort_array_port_ap_5ftrjctl_2flo_5fdmcctrl_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void LoDMCCtrlRequestPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoDMCCtrlRequestPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort data = 2432;
      case 2432:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoDMCCtrlRequestPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort data = 2432;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2432, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  return target;
}

size_t LoDMCCtrlRequestPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort data = 2432;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoDMCCtrlRequestPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const LoDMCCtrlRequestPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoDMCCtrlRequestPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
    MergeFrom(*source);
  }
}

void LoDMCCtrlRequestPort_array_port::MergeFrom(const LoDMCCtrlRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void LoDMCCtrlRequestPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoDMCCtrlRequestPort_array_port::CopyFrom(const LoDMCCtrlRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.lo_dmcctrl_request_port.LoDMCCtrlRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoDMCCtrlRequestPort_array_port::IsInitialized() const {
  return true;
}

void LoDMCCtrlRequestPort_array_port::InternalSwap(LoDMCCtrlRequestPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoDMCCtrlRequestPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lo_dmcctrl_request_port
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort* Arena::CreateMaybeMessage< ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::lo_dmcctrl_request_port::LoDMCCtrlRequestPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
