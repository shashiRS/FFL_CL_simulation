// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_psm_app/apuser_information_port.proto

#include "ap_psm_app/apuser_information_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_psm_app {
namespace apuser_information_port {
class APUserInformationPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APUserInformationPort> _instance;
} _APUserInformationPort_default_instance_;
class APUserInformationPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APUserInformationPort_array_port> _instance;
} _APUserInformationPort_array_port_default_instance_;
}  // namespace apuser_information_port
}  // namespace ap_psm_app
}  // namespace pb
static void InitDefaultsscc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_psm_app::apuser_information_port::_APUserInformationPort_default_instance_;
    new (ptr) ::pb::ap_psm_app::apuser_information_port::APUserInformationPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_psm_app::apuser_information_port::APUserInformationPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_APUserInformationPort_array_port_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_psm_app::apuser_information_port::_APUserInformationPort_array_port_default_instance_;
    new (ptr) ::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APUserInformationPort_array_port_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_APUserInformationPort_array_port_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto}, {
      &scc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, remotemodeactive_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, remoteappactive_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, remoteappauthorized_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, remoteappcoded_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, remotekeyselected_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, remotekeyposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, continueposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, remmanposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, undoposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, svposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, btnforwardposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, btnbackwardposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, btnfullyautomparkingposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, btnsemiautomparkingposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, garageopeneravail_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, distancetostop_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, maxspeed10kphwarning_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, drivingdirection_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, garageparking_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, currentgear_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, generaluserinformation_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, ppcparkingmode_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, finishtype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, switchinputdevposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, reverseassistposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, memoryparkingposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, mpeasyregisteravailable_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, preconditionfailurestate_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, preconditionfailurereason_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, apaintrpausecondition_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, apainteractionpausecount_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort, apainteractiontimer_),
  17,
  0,
  27,
  1,
  2,
  3,
  4,
  13,
  14,
  15,
  16,
  23,
  24,
  25,
  26,
  18,
  19,
  12,
  6,
  22,
  7,
  10,
  31,
  11,
  8,
  20,
  21,
  28,
  29,
  30,
  ~0u,
  ~0u,
  5,
  9,
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 39, sizeof(::pb::ap_psm_app::apuser_information_port::APUserInformationPort)},
  { 73, 79, sizeof(::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_psm_app::apuser_information_port::_APUserInformationPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_psm_app::apuser_information_port::_APUserInformationPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(ap_psm_app/apuser_information_port.pro"
  "to\022%pb.ap_psm_app.apuser_information_por"
  "t\032\027eco/signal_header.proto\032\034ap_psm_app/r"
  "emote_mode.proto\032\'ap_psm_app/max_speed10"
  "_kphwarning.proto\032!ap_common/driving_dir"
  "ection.proto\032\037ap_psm_app/garage_parking."
  "proto\032\"ap_commonvehsigprovider/gear.prot"
  "o\032\033ap_psm_app/hmimessage.proto\032 ap_psm_a"
  "pp/ppcparking_mode.proto\032\036ap_psm_app/apf"
  "inish_type.proto\032\'ap_psm_app/huintr_paus"
  "e_condition.proto\"\322\013\n\025APUserInformationP"
  "ort\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHea"
  "der\030\211\010 \001(\0132\".pb.eco.signal_header.Signal"
  "Header\022C\n\023remoteModeActive_nu\030\234\022 \001(\0162%.p"
  "b.ap_psm_app.remote_mode.RemoteMode\022\033\n\022r"
  "emoteAppActive_nu\030\300\026 \001(\010\022\037\n\026remoteAppAut"
  "horized_nu\030\257\037 \001(\010\022\032\n\021remoteAppCoded_nu\030\364"
  "\031 \001(\010\022\035\n\024remoteKeySelected_nu\030\340\021 \001(\010\022\031\n\020"
  "remoteKeyPoss_nu\030\313\036 \001(\010\022\030\n\017continuePoss_"
  "nu\030\206\007 \001(\010\022\026\n\rremManPoss_nu\030\203\005 \001(\010\022\024\n\013und"
  "oPoss_nu\030\313\004 \001(\010\022\022\n\tsvPoss_nu\030\314\r \001(\010\022\032\n\021b"
  "tnForwardPoss_nu\030\217\r \001(\010\022\033\n\022btnBackwardPo"
  "ss_nu\030\274\032 \001(\010\022$\n\033btnFullyAutomParkingPoss"
  "_nu\030\301\022 \001(\010\022#\n\032btnSemiAutomParkingPoss_nu"
  "\030\226\020 \001(\010\022\035\n\024garageOpenerAvail_nu\030\204\r \001(\010\022\034"
  "\n\023distanceToStop_perc\030\210\013 \001(\r\022\\\n\027maxSpeed"
  "10KPHwarning_nu\030\251\004 \001(\0162:.pb.ap_psm_app.m"
  "ax_speed10_kphwarning.MaxSpeed10KPHwarni"
  "ng\022N\n\023drivingDirection_nu\030\362\020 \001(\01620.pb.ap"
  "_common.driving_direction.DrivingDirecti"
  "on\022F\n\020garageParking_nu\030\354\005 \001(\0162+.pb.ap_ps"
  "m_app.garage_parking.GarageParking\022>\n\016cu"
  "rrentGear_nu\030\254\t \001(\0162%.pb.ap_commonvehsig"
  "provider.gear.Gear\022H\n\031generalUserInforma"
  "tion_nu\030\252\024 \001(\0162$.pb.ap_psm_app.hmimessag"
  "e.HMIMessage\022I\n\021ppcParkingMode_nu\030\277\n \001(\016"
  "2-.pb.ap_psm_app.ppcparking_mode.PPCPark"
  "ingMode\022A\n\rfinishType_nu\030\244\006 \001(\0162).pb.ap_"
  "psm_app.apfinish_type.APFinishType\022\036\n\025sw"
  "itchInputDevPoss_nu\030\316\020 \001(\010\022\035\n\024reverseAss"
  "istPoss_nu\030\375\024 \001(\010\022\035\n\024memoryParkingPoss_n"
  "u\030\372\016 \001(\010\022 \n\027mpEasyRegisterAvailable\030\247\025 \001"
  "(\010\022!\n\030preConditionFailureState\030\215\023 \001(\010\022\"\n"
  "\031preConditionFailureReason\030\331\021 \003(\010\022Z\n\025apa"
  "IntrPauseCondition\030\221\016 \003(\0162:.pb.ap_psm_ap"
  "p.huintr_pause_condition.HUIntrPauseCond"
  "ition\022!\n\030apaInteractionPauseCount\030\212\003 \001(\r"
  "\022\034\n\023apaInteractionTimer\030\220\t \001(\r\"n\n APUser"
  "InformationPort_array_port\022J\n\004data\030F \003(\013"
  "2<.pb.ap_psm_app.apuser_information_port"
  ".APUserInformationPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_deps[10] = {
  &::descriptor_table_ap_5fcommon_2fdriving_5fdirection_2eproto,
  &::descriptor_table_ap_5fcommonvehsigprovider_2fgear_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fapfinish_5ftype_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fgarage_5fparking_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fhmimessage_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fhuintr_5fpause_5fcondition_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fmax_5fspeed10_5fkphwarning_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fppcparking_5fmode_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fremote_5fmode_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_sccs[2] = {
  &scc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto.base,
  &scc_info_APUserInformationPort_array_port_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_once;
static bool descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto = {
  &descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_initialized, descriptor_table_protodef_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto, "ap_psm_app/apuser_information_port.proto", 2022,
  &descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_once, descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_sccs, descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto_deps, 2, 10,
  schemas, file_default_instances, TableStruct_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto::offsets,
  file_level_metadata_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto, 2, file_level_enum_descriptors_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto, file_level_service_descriptors_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto), true);
namespace pb {
namespace ap_psm_app {
namespace apuser_information_port {

// ===================================================================

void APUserInformationPort::InitAsDefaultInstance() {
  ::pb::ap_psm_app::apuser_information_port::_APUserInformationPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class APUserInformationPort::_Internal {
 public:
  using HasBits = decltype(std::declval<APUserInformationPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const APUserInformationPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remotemodeactive_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_remoteappactive_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remoteappauthorized_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remoteappcoded_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remotekeyselected_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remotekeyposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_continueposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_remmanposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_undoposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_svposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_btnforwardposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_btnbackwardposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_btnfullyautomparkingposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_btnsemiautomparkingposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_garageopeneravail_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_distancetostop_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_maxspeed10kphwarning_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_drivingdirection_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_garageparking_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_currentgear_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_generaluserinformation_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ppcparkingmode_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_finishtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_switchinputdevposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_reverseassistposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_memoryparkingposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_mpeasyregisteravailable(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_preconditionfailurestate(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_apainteractionpausecount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_apainteractiontimer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
APUserInformationPort::_Internal::ssigheader(const APUserInformationPort* msg) {
  return *msg->ssigheader_;
}
void APUserInformationPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
APUserInformationPort::APUserInformationPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
}
APUserInformationPort::APUserInformationPort(const APUserInformationPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apaintrpausecondition_(from.apaintrpausecondition_),
      preconditionfailurereason_(from.preconditionfailurereason_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&remoteappactive_nu_, &from.remoteappactive_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&generaluserinformation_nu_) -
    reinterpret_cast<char*>(&remoteappactive_nu_)) + sizeof(generaluserinformation_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
}

void APUserInformationPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&generaluserinformation_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(generaluserinformation_nu_));
}

APUserInformationPort::~APUserInformationPort() {
  // @@protoc_insertion_point(destructor:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  SharedDtor();
}

void APUserInformationPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void APUserInformationPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APUserInformationPort& APUserInformationPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APUserInformationPort_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto.base);
  return *internal_default_instance();
}


void APUserInformationPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apaintrpausecondition_.Clear();
  preconditionfailurereason_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&remoteappactive_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&garageparking_nu_) -
        reinterpret_cast<char*>(&remoteappactive_nu_)) + sizeof(garageparking_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&finishtype_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remmanposs_nu_) -
        reinterpret_cast<char*>(&finishtype_nu_)) + sizeof(remmanposs_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&undoposs_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&svposs_nu_) -
        reinterpret_cast<char*>(&undoposs_nu_)) + sizeof(svposs_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&btnforwardposs_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&generaluserinformation_nu_) -
        reinterpret_cast<char*>(&btnforwardposs_nu_)) + sizeof(generaluserinformation_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* APUserInformationPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 apaInteractionPauseCount = 394;
      case 394:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_apainteractionpausecount(&has_bits);
          apainteractionpausecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
      case 553:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning_IsValid(val))) {
            _internal_set_maxspeed10kphwarning_nu(static_cast<::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(553, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool undoPoss_nu = 587;
      case 587:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_undoposs_nu(&has_bits);
          undoposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remManPoss_nu = 643;
      case 643:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_remmanposs_nu(&has_bits);
          remmanposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
      case 748:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::garage_parking::GarageParking_IsValid(val))) {
            _internal_set_garageparking_nu(static_cast<::pb::ap_psm_app::garage_parking::GarageParking>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(748, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
      case 804:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::apfinish_type::APFinishType_IsValid(val))) {
            _internal_set_finishtype_nu(static_cast<::pb::ap_psm_app::apfinish_type::APFinishType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(804, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool continuePoss_nu = 902;
      case 902:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_continueposs_nu(&has_bits);
          continueposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 apaInteractionTimer = 1168;
      case 1168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_apainteractiontimer(&has_bits);
          apainteractiontimer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
      case 1196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_commonvehsigprovider::gear::Gear_IsValid(val))) {
            _internal_set_currentgear_nu(static_cast<::pb::ap_commonvehsigprovider::gear::Gear>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1196, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
      case 1343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::ppcparking_mode::PPCParkingMode_IsValid(val))) {
            _internal_set_ppcparkingmode_nu(static_cast<::pb::ap_psm_app::ppcparking_mode::PPCParkingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1343, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 distanceToStop_perc = 1416;
      case 1416:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_distancetostop_perc(&has_bits);
          distancetostop_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool garageOpenerAvail_nu = 1668;
      case 1668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_garageopeneravail_nu(&has_bits);
          garageopeneravail_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool btnForwardPoss_nu = 1679;
      case 1679:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_btnforwardposs_nu(&has_bits);
          btnforwardposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool svPoss_nu = 1740;
      case 1740:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_svposs_nu(&has_bits);
          svposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.ap_psm_app.huintr_pause_condition.HUIntrPauseCondition apaIntrPauseCondition = 1809;
      case 1809:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::huintr_pause_condition::HUIntrPauseCondition_IsValid(val))) {
              _internal_add_apaintrpausecondition(static_cast<::pb::ap_psm_app::huintr_pause_condition::HUIntrPauseCondition>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1809, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<14472>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_apaintrpausecondition(), ptr, ctx, ::pb::ap_psm_app::huintr_pause_condition::HUIntrPauseCondition_IsValid, &_internal_metadata_, 1809);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool memoryParkingPoss_nu = 1914;
      case 1914:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_memoryparkingposs_nu(&has_bits);
          memoryparkingposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool btnSemiAutomParkingPoss_nu = 2070;
      case 2070:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_btnsemiautomparkingposs_nu(&has_bits);
          btnsemiautomparkingposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool switchInputDevPoss_nu = 2126;
      case 2126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_switchinputdevposs_nu(&has_bits);
          switchinputdevposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
      case 2162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_common::driving_direction::DrivingDirection_IsValid(val))) {
            _internal_set_drivingdirection_nu(static_cast<::pb::ap_common::driving_direction::DrivingDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2162, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bool preConditionFailureReason = 2265;
      case 2265:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _internal_add_preconditionfailurereason(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_preconditionfailurereason(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteKeySelected_nu = 2272;
      case 2272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_remotekeyselected_nu(&has_bits);
          remotekeyselected_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
      case 2332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::remote_mode::RemoteMode_IsValid(val))) {
            _internal_set_remotemodeactive_nu(static_cast<::pb::ap_psm_app::remote_mode::RemoteMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2332, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool btnFullyAutomParkingPoss_nu = 2369;
      case 2369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_btnfullyautomparkingposs_nu(&has_bits);
          btnfullyautomparkingposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preConditionFailureState = 2445;
      case 2445:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_preconditionfailurestate(&has_bits);
          preconditionfailurestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
      case 2602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::hmimessage::HMIMessage_IsValid(val))) {
            _internal_set_generaluserinformation_nu(static_cast<::pb::ap_psm_app::hmimessage::HMIMessage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2602, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool reverseAssistPoss_nu = 2685;
      case 2685:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_reverseassistposs_nu(&has_bits);
          reverseassistposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mpEasyRegisterAvailable = 2727;
      case 2727:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mpeasyregisteravailable(&has_bits);
          mpeasyregisteravailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteAppActive_nu = 2880;
      case 2880:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_remoteappactive_nu(&has_bits);
          remoteappactive_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteAppCoded_nu = 3316;
      case 3316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_remoteappcoded_nu(&has_bits);
          remoteappcoded_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool btnBackwardPoss_nu = 3388;
      case 3388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_btnbackwardposs_nu(&has_bits);
          btnbackwardposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteKeyPoss_nu = 3915;
      case 3915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_remotekeyposs_nu(&has_bits);
          remotekeyposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteAppAuthorized_nu = 4015;
      case 4015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_remoteappauthorized_nu(&has_bits);
          remoteappauthorized_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APUserInformationPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 apaInteractionPauseCount = 394;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(394, this->_internal_apainteractionpausecount(), target);
  }

  // optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      553, this->_internal_maxspeed10kphwarning_nu(), target);
  }

  // optional bool undoPoss_nu = 587;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(587, this->_internal_undoposs_nu(), target);
  }

  // optional bool remManPoss_nu = 643;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(643, this->_internal_remmanposs_nu(), target);
  }

  // optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      748, this->_internal_garageparking_nu(), target);
  }

  // optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      804, this->_internal_finishtype_nu(), target);
  }

  // optional bool continuePoss_nu = 902;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(902, this->_internal_continueposs_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional uint32 apaInteractionTimer = 1168;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1168, this->_internal_apainteractiontimer(), target);
  }

  // optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1196, this->_internal_currentgear_nu(), target);
  }

  // optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1343, this->_internal_ppcparkingmode_nu(), target);
  }

  // optional uint32 distanceToStop_perc = 1416;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1416, this->_internal_distancetostop_perc(), target);
  }

  // optional bool garageOpenerAvail_nu = 1668;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1668, this->_internal_garageopeneravail_nu(), target);
  }

  // optional bool btnForwardPoss_nu = 1679;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1679, this->_internal_btnforwardposs_nu(), target);
  }

  // optional bool svPoss_nu = 1740;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1740, this->_internal_svposs_nu(), target);
  }

  // repeated .pb.ap_psm_app.huintr_pause_condition.HUIntrPauseCondition apaIntrPauseCondition = 1809;
  for (int i = 0, n = this->_internal_apaintrpausecondition_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1809, this->_internal_apaintrpausecondition(i), target);
  }

  // optional bool memoryParkingPoss_nu = 1914;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1914, this->_internal_memoryparkingposs_nu(), target);
  }

  // optional bool btnSemiAutomParkingPoss_nu = 2070;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2070, this->_internal_btnsemiautomparkingposs_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool switchInputDevPoss_nu = 2126;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2126, this->_internal_switchinputdevposs_nu(), target);
  }

  // optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2162, this->_internal_drivingdirection_nu(), target);
  }

  // repeated bool preConditionFailureReason = 2265;
  for (int i = 0, n = this->_internal_preconditionfailurereason_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2265, this->_internal_preconditionfailurereason(i), target);
  }

  // optional bool remoteKeySelected_nu = 2272;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2272, this->_internal_remotekeyselected_nu(), target);
  }

  // optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2332, this->_internal_remotemodeactive_nu(), target);
  }

  // optional bool btnFullyAutomParkingPoss_nu = 2369;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2369, this->_internal_btnfullyautomparkingposs_nu(), target);
  }

  // optional bool preConditionFailureState = 2445;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2445, this->_internal_preconditionfailurestate(), target);
  }

  // optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2602, this->_internal_generaluserinformation_nu(), target);
  }

  // optional bool reverseAssistPoss_nu = 2685;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2685, this->_internal_reverseassistposs_nu(), target);
  }

  // optional bool mpEasyRegisterAvailable = 2727;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2727, this->_internal_mpeasyregisteravailable(), target);
  }

  // optional bool remoteAppActive_nu = 2880;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2880, this->_internal_remoteappactive_nu(), target);
  }

  // optional bool remoteAppCoded_nu = 3316;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3316, this->_internal_remoteappcoded_nu(), target);
  }

  // optional bool btnBackwardPoss_nu = 3388;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3388, this->_internal_btnbackwardposs_nu(), target);
  }

  // optional bool remoteKeyPoss_nu = 3915;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3915, this->_internal_remotekeyposs_nu(), target);
  }

  // optional bool remoteAppAuthorized_nu = 4015;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4015, this->_internal_remoteappauthorized_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  return target;
}

size_t APUserInformationPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_psm_app.huintr_pause_condition.HUIntrPauseCondition apaIntrPauseCondition = 1809;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_apaintrpausecondition_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_apaintrpausecondition(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated bool preConditionFailureReason = 2265;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_preconditionfailurereason_size());
    size_t data_size = 1UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_preconditionfailurereason_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional bool remoteAppActive_nu = 2880;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool remoteAppAuthorized_nu = 4015;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional bool remoteAppCoded_nu = 3316;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool remoteKeySelected_nu = 2272;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional uint32 apaInteractionPauseCount = 394;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_apainteractionpausecount());
    }

    // optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maxspeed10kphwarning_nu());
    }

    // optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_garageparking_nu());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_finishtype_nu());
    }

    // optional uint32 apaInteractionTimer = 1168;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_apainteractiontimer());
    }

    // optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_currentgear_nu());
    }

    // optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ppcparkingmode_nu());
    }

    // optional uint32 distanceToStop_perc = 1416;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_distancetostop_perc());
    }

    // optional bool remoteKeyPoss_nu = 3915;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional bool continuePoss_nu = 902;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool remManPoss_nu = 643;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool undoPoss_nu = 587;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional bool btnSemiAutomParkingPoss_nu = 2070;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool garageOpenerAvail_nu = 1668;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool switchInputDevPoss_nu = 2126;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional bool reverseAssistPoss_nu = 2685;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 1;
    }

    // optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_drivingdirection_nu());
    }

    // optional bool svPoss_nu = 1740;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool btnForwardPoss_nu = 1679;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool btnBackwardPoss_nu = 3388;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional bool btnFullyAutomParkingPoss_nu = 2369;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remotemodeactive_nu());
    }

    // optional bool memoryParkingPoss_nu = 1914;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool mpEasyRegisterAvailable = 2727;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool preConditionFailureState = 2445;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_generaluserinformation_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APUserInformationPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  GOOGLE_DCHECK_NE(&from, this);
  const APUserInformationPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APUserInformationPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
    MergeFrom(*source);
  }
}

void APUserInformationPort::MergeFrom(const APUserInformationPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apaintrpausecondition_.MergeFrom(from.apaintrpausecondition_);
  preconditionfailurereason_.MergeFrom(from.preconditionfailurereason_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      remoteappactive_nu_ = from.remoteappactive_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      remoteappauthorized_nu_ = from.remoteappauthorized_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      remoteappcoded_nu_ = from.remoteappcoded_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      remotekeyselected_nu_ = from.remotekeyselected_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      apainteractionpausecount_ = from.apainteractionpausecount_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxspeed10kphwarning_nu_ = from.maxspeed10kphwarning_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      garageparking_nu_ = from.garageparking_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      finishtype_nu_ = from.finishtype_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      apainteractiontimer_ = from.apainteractiontimer_;
    }
    if (cached_has_bits & 0x00000400u) {
      currentgear_nu_ = from.currentgear_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      ppcparkingmode_nu_ = from.ppcparkingmode_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      distancetostop_perc_ = from.distancetostop_perc_;
    }
    if (cached_has_bits & 0x00002000u) {
      remotekeyposs_nu_ = from.remotekeyposs_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      continueposs_nu_ = from.continueposs_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      remmanposs_nu_ = from.remmanposs_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      undoposs_nu_ = from.undoposs_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00040000u) {
      btnsemiautomparkingposs_nu_ = from.btnsemiautomparkingposs_nu_;
    }
    if (cached_has_bits & 0x00080000u) {
      garageopeneravail_nu_ = from.garageopeneravail_nu_;
    }
    if (cached_has_bits & 0x00100000u) {
      switchinputdevposs_nu_ = from.switchinputdevposs_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      reverseassistposs_nu_ = from.reverseassistposs_nu_;
    }
    if (cached_has_bits & 0x00400000u) {
      drivingdirection_nu_ = from.drivingdirection_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      svposs_nu_ = from.svposs_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      btnforwardposs_nu_ = from.btnforwardposs_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      btnbackwardposs_nu_ = from.btnbackwardposs_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      btnfullyautomparkingposs_nu_ = from.btnfullyautomparkingposs_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      remotemodeactive_nu_ = from.remotemodeactive_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      memoryparkingposs_nu_ = from.memoryparkingposs_nu_;
    }
    if (cached_has_bits & 0x20000000u) {
      mpeasyregisteravailable_ = from.mpeasyregisteravailable_;
    }
    if (cached_has_bits & 0x40000000u) {
      preconditionfailurestate_ = from.preconditionfailurestate_;
    }
    if (cached_has_bits & 0x80000000u) {
      generaluserinformation_nu_ = from.generaluserinformation_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void APUserInformationPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APUserInformationPort::CopyFrom(const APUserInformationPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APUserInformationPort::IsInitialized() const {
  return true;
}

void APUserInformationPort::InternalSwap(APUserInformationPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  apaintrpausecondition_.InternalSwap(&other->apaintrpausecondition_);
  preconditionfailurereason_.InternalSwap(&other->preconditionfailurereason_);
  swap(ssigheader_, other->ssigheader_);
  swap(remoteappactive_nu_, other->remoteappactive_nu_);
  swap(remoteappauthorized_nu_, other->remoteappauthorized_nu_);
  swap(remoteappcoded_nu_, other->remoteappcoded_nu_);
  swap(remotekeyselected_nu_, other->remotekeyselected_nu_);
  swap(apainteractionpausecount_, other->apainteractionpausecount_);
  swap(maxspeed10kphwarning_nu_, other->maxspeed10kphwarning_nu_);
  swap(garageparking_nu_, other->garageparking_nu_);
  swap(finishtype_nu_, other->finishtype_nu_);
  swap(apainteractiontimer_, other->apainteractiontimer_);
  swap(currentgear_nu_, other->currentgear_nu_);
  swap(ppcparkingmode_nu_, other->ppcparkingmode_nu_);
  swap(distancetostop_perc_, other->distancetostop_perc_);
  swap(remotekeyposs_nu_, other->remotekeyposs_nu_);
  swap(continueposs_nu_, other->continueposs_nu_);
  swap(remmanposs_nu_, other->remmanposs_nu_);
  swap(undoposs_nu_, other->undoposs_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(btnsemiautomparkingposs_nu_, other->btnsemiautomparkingposs_nu_);
  swap(garageopeneravail_nu_, other->garageopeneravail_nu_);
  swap(switchinputdevposs_nu_, other->switchinputdevposs_nu_);
  swap(reverseassistposs_nu_, other->reverseassistposs_nu_);
  swap(drivingdirection_nu_, other->drivingdirection_nu_);
  swap(svposs_nu_, other->svposs_nu_);
  swap(btnforwardposs_nu_, other->btnforwardposs_nu_);
  swap(btnbackwardposs_nu_, other->btnbackwardposs_nu_);
  swap(btnfullyautomparkingposs_nu_, other->btnfullyautomparkingposs_nu_);
  swap(remotemodeactive_nu_, other->remotemodeactive_nu_);
  swap(memoryparkingposs_nu_, other->memoryparkingposs_nu_);
  swap(mpeasyregisteravailable_, other->mpeasyregisteravailable_);
  swap(preconditionfailurestate_, other->preconditionfailurestate_);
  swap(generaluserinformation_nu_, other->generaluserinformation_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APUserInformationPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APUserInformationPort_array_port::InitAsDefaultInstance() {
}
class APUserInformationPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<APUserInformationPort_array_port>()._has_bits_);
};

APUserInformationPort_array_port::APUserInformationPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
}
APUserInformationPort_array_port::APUserInformationPort_array_port(const APUserInformationPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
}

void APUserInformationPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APUserInformationPort_array_port_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto.base);
}

APUserInformationPort_array_port::~APUserInformationPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  SharedDtor();
}

void APUserInformationPort_array_port::SharedDtor() {
}

void APUserInformationPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APUserInformationPort_array_port& APUserInformationPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APUserInformationPort_array_port_ap_5fpsm_5fapp_2fapuser_5finformation_5fport_2eproto.base);
  return *internal_default_instance();
}


void APUserInformationPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* APUserInformationPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_psm_app.apuser_information_port.APUserInformationPort data = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APUserInformationPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_psm_app.apuser_information_port.APUserInformationPort data = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  return target;
}

size_t APUserInformationPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_psm_app.apuser_information_port.APUserInformationPort data = 70;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APUserInformationPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const APUserInformationPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APUserInformationPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
    MergeFrom(*source);
  }
}

void APUserInformationPort_array_port::MergeFrom(const APUserInformationPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void APUserInformationPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APUserInformationPort_array_port::CopyFrom(const APUserInformationPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_psm_app.apuser_information_port.APUserInformationPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APUserInformationPort_array_port::IsInitialized() const {
  return true;
}

void APUserInformationPort_array_port::InternalSwap(APUserInformationPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APUserInformationPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace apuser_information_port
}  // namespace ap_psm_app
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_psm_app::apuser_information_port::APUserInformationPort* Arena::CreateMaybeMessage< ::pb::ap_psm_app::apuser_information_port::APUserInformationPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_psm_app::apuser_information_port::APUserInformationPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_psm_app::apuser_information_port::APUserInformationPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
