// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_drvwarnsm/pdwstate.proto

#include "mf_drvwarnsm/pdwstate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace mf_drvwarnsm {
namespace pdwstate {
}  // namespace pdwstate
}  // namespace mf_drvwarnsm
}  // namespace pb
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_mf_5fdrvwarnsm_2fpdwstate_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mf_5fdrvwarnsm_2fpdwstate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fdrvwarnsm_2fpdwstate_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fdrvwarnsm_2fpdwstate_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_mf_5fdrvwarnsm_2fpdwstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033mf_drvwarnsm/pdwstate.proto\022\030pb.mf_drv"
  "warnsm.pdwstate*\265\003\n\010PDWState\022\026\n\022PDW_INT_"
  "STATE_INIT\020\000\022\031\n\025PDW_INT_STATE_ACT_BTN\020\001\022"
  "\034\n\030PDW_INT_STATE_ACT_R_GEAR\020\002\022\030\n\024PDW_INT"
  "_STATE_ACT_AP\020\003\022\032\n\026PDW_INT_STATE_ACT_AUT"
  "O\020\004\022\036\n\032PDW_INT_STATE_ACT_ROLLBACK\020\005\022\030\n\024P"
  "DW_INT_STATE_ACT_RA\020\006\022\034\n\030PDW_INT_STATE_D"
  "EACT_INIT\020\007\022\033\n\027PDW_INT_STATE_DEACT_BTN\020\010"
  "\022\035\n\031PDW_INT_STATE_DEACT_SPEED\020\t\022\036\n\032PDW_I"
  "NT_STATE_DEACT_P_GEAR\020\n\022\033\n\027PDW_INT_STATE"
  "_DEACT_EPB\020\013\022\036\n\032PDW_INT_STATE_DEACT_AP_F"
  "IN\020\014\022\031\n\025PDW_INT_STATE_FAILURE\020\r\022\026\n\022PDW_I"
  "NT_NUM_STATES\020\016"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_once;
static bool descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto = {
  &descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_initialized, descriptor_table_protodef_mf_5fdrvwarnsm_2fpdwstate_2eproto, "mf_drvwarnsm/pdwstate.proto", 495,
  &descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_once, descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_sccs, descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_mf_5fdrvwarnsm_2fpdwstate_2eproto::offsets,
  file_level_metadata_mf_5fdrvwarnsm_2fpdwstate_2eproto, 0, file_level_enum_descriptors_mf_5fdrvwarnsm_2fpdwstate_2eproto, file_level_service_descriptors_mf_5fdrvwarnsm_2fpdwstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fdrvwarnsm_2fpdwstate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto), true);
namespace pb {
namespace mf_drvwarnsm {
namespace pdwstate {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PDWState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mf_5fdrvwarnsm_2fpdwstate_2eproto);
  return file_level_enum_descriptors_mf_5fdrvwarnsm_2fpdwstate_2eproto[0];
}
bool PDWState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pdwstate
}  // namespace mf_drvwarnsm
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
