// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdcp/sector_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pdcp_2fsector_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pdcp_2fsector_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pdcp/criticality_level.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pdcp_2fsector_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pdcp_2fsector_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdcp_2fsector_5finfo_2eproto;
namespace pb {
namespace pdcp {
namespace sector_info {
class SectorInfo;
class SectorInfoDefaultTypeInternal;
extern SectorInfoDefaultTypeInternal _SectorInfo_default_instance_;
class SectorInfo_array_port;
class SectorInfo_array_portDefaultTypeInternal;
extern SectorInfo_array_portDefaultTypeInternal _SectorInfo_array_port_default_instance_;
}  // namespace sector_info
}  // namespace pdcp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::pdcp::sector_info::SectorInfo* Arena::CreateMaybeMessage<::pb::pdcp::sector_info::SectorInfo>(Arena*);
template<> ::pb::pdcp::sector_info::SectorInfo_array_port* Arena::CreateMaybeMessage<::pb::pdcp::sector_info::SectorInfo_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace pdcp {
namespace sector_info {

// ===================================================================

class SectorInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.pdcp.sector_info.SectorInfo) */ {
 public:
  SectorInfo();
  virtual ~SectorInfo();

  SectorInfo(const SectorInfo& from);
  SectorInfo(SectorInfo&& from) noexcept
    : SectorInfo() {
    *this = ::std::move(from);
  }

  inline SectorInfo& operator=(const SectorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectorInfo& operator=(SectorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SectorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SectorInfo* internal_default_instance() {
    return reinterpret_cast<const SectorInfo*>(
               &_SectorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SectorInfo& a, SectorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SectorInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectorInfo* New() const final {
    return CreateMaybeMessage<SectorInfo>(nullptr);
  }

  SectorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectorInfo& from);
  void MergeFrom(const SectorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.pdcp.sector_info.SectorInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pdcp_2fsector_5finfo_2eproto);
    return ::descriptor_table_pdcp_2fsector_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectorIDNuFieldNumber = 3810,
    kSmallestDistanceMFieldNumber = 899,
    kScannedNuFieldNumber = 1046,
    kIntersectsDrvTubeNuFieldNumber = 1308,
    kCriticalityLevelNuFieldNumber = 1238,
    kDynamicSmallestDistanceMFieldNumber = 2204,
  };
  // optional uint32 sectorID_nu = 3810;
  bool has_sectorid_nu() const;
  private:
  bool _internal_has_sectorid_nu() const;
  public:
  void clear_sectorid_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_nu() const;
  void set_sectorid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid_nu() const;
  void _internal_set_sectorid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float smallestDistance_m = 899;
  bool has_smallestdistance_m() const;
  private:
  bool _internal_has_smallestdistance_m() const;
  public:
  void clear_smallestdistance_m();
  float smallestdistance_m() const;
  void set_smallestdistance_m(float value);
  private:
  float _internal_smallestdistance_m() const;
  void _internal_set_smallestdistance_m(float value);
  public:

  // optional bool scanned_nu = 1046;
  bool has_scanned_nu() const;
  private:
  bool _internal_has_scanned_nu() const;
  public:
  void clear_scanned_nu();
  bool scanned_nu() const;
  void set_scanned_nu(bool value);
  private:
  bool _internal_scanned_nu() const;
  void _internal_set_scanned_nu(bool value);
  public:

  // optional bool intersectsDrvTube_nu = 1308;
  bool has_intersectsdrvtube_nu() const;
  private:
  bool _internal_has_intersectsdrvtube_nu() const;
  public:
  void clear_intersectsdrvtube_nu();
  bool intersectsdrvtube_nu() const;
  void set_intersectsdrvtube_nu(bool value);
  private:
  bool _internal_intersectsdrvtube_nu() const;
  void _internal_set_intersectsdrvtube_nu(bool value);
  public:

  // optional .pb.pdcp.criticality_level.CriticalityLevel criticalityLevel_nu = 1238;
  bool has_criticalitylevel_nu() const;
  private:
  bool _internal_has_criticalitylevel_nu() const;
  public:
  void clear_criticalitylevel_nu();
  ::pb::pdcp::criticality_level::CriticalityLevel criticalitylevel_nu() const;
  void set_criticalitylevel_nu(::pb::pdcp::criticality_level::CriticalityLevel value);
  private:
  ::pb::pdcp::criticality_level::CriticalityLevel _internal_criticalitylevel_nu() const;
  void _internal_set_criticalitylevel_nu(::pb::pdcp::criticality_level::CriticalityLevel value);
  public:

  // optional float dynamicSmallestDistance_m = 2204;
  bool has_dynamicsmallestdistance_m() const;
  private:
  bool _internal_has_dynamicsmallestdistance_m() const;
  public:
  void clear_dynamicsmallestdistance_m();
  float dynamicsmallestdistance_m() const;
  void set_dynamicsmallestdistance_m(float value);
  private:
  float _internal_dynamicsmallestdistance_m() const;
  void _internal_set_dynamicsmallestdistance_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.pdcp.sector_info.SectorInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_nu_;
  float smallestdistance_m_;
  bool scanned_nu_;
  bool intersectsdrvtube_nu_;
  int criticalitylevel_nu_;
  float dynamicsmallestdistance_m_;
  friend struct ::TableStruct_pdcp_2fsector_5finfo_2eproto;
};
// -------------------------------------------------------------------

class SectorInfo_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.pdcp.sector_info.SectorInfo_array_port) */ {
 public:
  SectorInfo_array_port();
  virtual ~SectorInfo_array_port();

  SectorInfo_array_port(const SectorInfo_array_port& from);
  SectorInfo_array_port(SectorInfo_array_port&& from) noexcept
    : SectorInfo_array_port() {
    *this = ::std::move(from);
  }

  inline SectorInfo_array_port& operator=(const SectorInfo_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectorInfo_array_port& operator=(SectorInfo_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SectorInfo_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SectorInfo_array_port* internal_default_instance() {
    return reinterpret_cast<const SectorInfo_array_port*>(
               &_SectorInfo_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SectorInfo_array_port& a, SectorInfo_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(SectorInfo_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectorInfo_array_port* New() const final {
    return CreateMaybeMessage<SectorInfo_array_port>(nullptr);
  }

  SectorInfo_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectorInfo_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectorInfo_array_port& from);
  void MergeFrom(const SectorInfo_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectorInfo_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.pdcp.sector_info.SectorInfo_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pdcp_2fsector_5finfo_2eproto);
    return ::descriptor_table_pdcp_2fsector_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3574,
  };
  // repeated .pb.pdcp.sector_info.SectorInfo data = 3574;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::pdcp::sector_info::SectorInfo* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pdcp::sector_info::SectorInfo >*
      mutable_data();
  private:
  const ::pb::pdcp::sector_info::SectorInfo& _internal_data(int index) const;
  ::pb::pdcp::sector_info::SectorInfo* _internal_add_data();
  public:
  const ::pb::pdcp::sector_info::SectorInfo& data(int index) const;
  ::pb::pdcp::sector_info::SectorInfo* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pdcp::sector_info::SectorInfo >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.pdcp.sector_info.SectorInfo_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pdcp::sector_info::SectorInfo > data_;
  friend struct ::TableStruct_pdcp_2fsector_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SectorInfo

// optional float smallestDistance_m = 899;
inline bool SectorInfo::_internal_has_smallestdistance_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SectorInfo::has_smallestdistance_m() const {
  return _internal_has_smallestdistance_m();
}
inline void SectorInfo::clear_smallestdistance_m() {
  smallestdistance_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SectorInfo::_internal_smallestdistance_m() const {
  return smallestdistance_m_;
}
inline float SectorInfo::smallestdistance_m() const {
  // @@protoc_insertion_point(field_get:pb.pdcp.sector_info.SectorInfo.smallestDistance_m)
  return _internal_smallestdistance_m();
}
inline void SectorInfo::_internal_set_smallestdistance_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  smallestdistance_m_ = value;
}
inline void SectorInfo::set_smallestdistance_m(float value) {
  _internal_set_smallestdistance_m(value);
  // @@protoc_insertion_point(field_set:pb.pdcp.sector_info.SectorInfo.smallestDistance_m)
}

// optional float dynamicSmallestDistance_m = 2204;
inline bool SectorInfo::_internal_has_dynamicsmallestdistance_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SectorInfo::has_dynamicsmallestdistance_m() const {
  return _internal_has_dynamicsmallestdistance_m();
}
inline void SectorInfo::clear_dynamicsmallestdistance_m() {
  dynamicsmallestdistance_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SectorInfo::_internal_dynamicsmallestdistance_m() const {
  return dynamicsmallestdistance_m_;
}
inline float SectorInfo::dynamicsmallestdistance_m() const {
  // @@protoc_insertion_point(field_get:pb.pdcp.sector_info.SectorInfo.dynamicSmallestDistance_m)
  return _internal_dynamicsmallestdistance_m();
}
inline void SectorInfo::_internal_set_dynamicsmallestdistance_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  dynamicsmallestdistance_m_ = value;
}
inline void SectorInfo::set_dynamicsmallestdistance_m(float value) {
  _internal_set_dynamicsmallestdistance_m(value);
  // @@protoc_insertion_point(field_set:pb.pdcp.sector_info.SectorInfo.dynamicSmallestDistance_m)
}

// optional uint32 sectorID_nu = 3810;
inline bool SectorInfo::_internal_has_sectorid_nu() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SectorInfo::has_sectorid_nu() const {
  return _internal_has_sectorid_nu();
}
inline void SectorInfo::clear_sectorid_nu() {
  sectorid_nu_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectorInfo::_internal_sectorid_nu() const {
  return sectorid_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectorInfo::sectorid_nu() const {
  // @@protoc_insertion_point(field_get:pb.pdcp.sector_info.SectorInfo.sectorID_nu)
  return _internal_sectorid_nu();
}
inline void SectorInfo::_internal_set_sectorid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sectorid_nu_ = value;
}
inline void SectorInfo::set_sectorid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid_nu(value);
  // @@protoc_insertion_point(field_set:pb.pdcp.sector_info.SectorInfo.sectorID_nu)
}

// optional .pb.pdcp.criticality_level.CriticalityLevel criticalityLevel_nu = 1238;
inline bool SectorInfo::_internal_has_criticalitylevel_nu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SectorInfo::has_criticalitylevel_nu() const {
  return _internal_has_criticalitylevel_nu();
}
inline void SectorInfo::clear_criticalitylevel_nu() {
  criticalitylevel_nu_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::pdcp::criticality_level::CriticalityLevel SectorInfo::_internal_criticalitylevel_nu() const {
  return static_cast< ::pb::pdcp::criticality_level::CriticalityLevel >(criticalitylevel_nu_);
}
inline ::pb::pdcp::criticality_level::CriticalityLevel SectorInfo::criticalitylevel_nu() const {
  // @@protoc_insertion_point(field_get:pb.pdcp.sector_info.SectorInfo.criticalityLevel_nu)
  return _internal_criticalitylevel_nu();
}
inline void SectorInfo::_internal_set_criticalitylevel_nu(::pb::pdcp::criticality_level::CriticalityLevel value) {
  assert(::pb::pdcp::criticality_level::CriticalityLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  criticalitylevel_nu_ = value;
}
inline void SectorInfo::set_criticalitylevel_nu(::pb::pdcp::criticality_level::CriticalityLevel value) {
  _internal_set_criticalitylevel_nu(value);
  // @@protoc_insertion_point(field_set:pb.pdcp.sector_info.SectorInfo.criticalityLevel_nu)
}

// optional bool scanned_nu = 1046;
inline bool SectorInfo::_internal_has_scanned_nu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SectorInfo::has_scanned_nu() const {
  return _internal_has_scanned_nu();
}
inline void SectorInfo::clear_scanned_nu() {
  scanned_nu_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SectorInfo::_internal_scanned_nu() const {
  return scanned_nu_;
}
inline bool SectorInfo::scanned_nu() const {
  // @@protoc_insertion_point(field_get:pb.pdcp.sector_info.SectorInfo.scanned_nu)
  return _internal_scanned_nu();
}
inline void SectorInfo::_internal_set_scanned_nu(bool value) {
  _has_bits_[0] |= 0x00000004u;
  scanned_nu_ = value;
}
inline void SectorInfo::set_scanned_nu(bool value) {
  _internal_set_scanned_nu(value);
  // @@protoc_insertion_point(field_set:pb.pdcp.sector_info.SectorInfo.scanned_nu)
}

// optional bool intersectsDrvTube_nu = 1308;
inline bool SectorInfo::_internal_has_intersectsdrvtube_nu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SectorInfo::has_intersectsdrvtube_nu() const {
  return _internal_has_intersectsdrvtube_nu();
}
inline void SectorInfo::clear_intersectsdrvtube_nu() {
  intersectsdrvtube_nu_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SectorInfo::_internal_intersectsdrvtube_nu() const {
  return intersectsdrvtube_nu_;
}
inline bool SectorInfo::intersectsdrvtube_nu() const {
  // @@protoc_insertion_point(field_get:pb.pdcp.sector_info.SectorInfo.intersectsDrvTube_nu)
  return _internal_intersectsdrvtube_nu();
}
inline void SectorInfo::_internal_set_intersectsdrvtube_nu(bool value) {
  _has_bits_[0] |= 0x00000008u;
  intersectsdrvtube_nu_ = value;
}
inline void SectorInfo::set_intersectsdrvtube_nu(bool value) {
  _internal_set_intersectsdrvtube_nu(value);
  // @@protoc_insertion_point(field_set:pb.pdcp.sector_info.SectorInfo.intersectsDrvTube_nu)
}

// -------------------------------------------------------------------

// SectorInfo_array_port

// repeated .pb.pdcp.sector_info.SectorInfo data = 3574;
inline int SectorInfo_array_port::_internal_data_size() const {
  return data_.size();
}
inline int SectorInfo_array_port::data_size() const {
  return _internal_data_size();
}
inline void SectorInfo_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::pdcp::sector_info::SectorInfo* SectorInfo_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.pdcp.sector_info.SectorInfo_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pdcp::sector_info::SectorInfo >*
SectorInfo_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.pdcp.sector_info.SectorInfo_array_port.data)
  return &data_;
}
inline const ::pb::pdcp::sector_info::SectorInfo& SectorInfo_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::pdcp::sector_info::SectorInfo& SectorInfo_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.pdcp.sector_info.SectorInfo_array_port.data)
  return _internal_data(index);
}
inline ::pb::pdcp::sector_info::SectorInfo* SectorInfo_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::pdcp::sector_info::SectorInfo* SectorInfo_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.pdcp.sector_info.SectorInfo_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pdcp::sector_info::SectorInfo >&
SectorInfo_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.pdcp.sector_info.SectorInfo_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sector_info
}  // namespace pdcp
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pdcp_2fsector_5finfo_2eproto
