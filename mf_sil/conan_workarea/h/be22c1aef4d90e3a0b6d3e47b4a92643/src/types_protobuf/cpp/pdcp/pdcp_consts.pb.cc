// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdcp/pdcp_consts.proto

#include "pdcp/pdcp_consts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pdcp_2fpdcp_5fconsts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCP_Consts_pdcp_2fpdcp_5fconsts_2eproto;
namespace pb {
namespace pdcp {
namespace pdcp_consts {
class PDCP_ConstsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCP_Consts> _instance;
} _PDCP_Consts_default_instance_;
class PDCP_Consts_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCP_Consts_array_port> _instance;
} _PDCP_Consts_array_port_default_instance_;
}  // namespace pdcp_consts
}  // namespace pdcp
}  // namespace pb
static void InitDefaultsscc_info_PDCP_Consts_pdcp_2fpdcp_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::pdcp::pdcp_consts::_PDCP_Consts_default_instance_;
    new (ptr) ::pb::pdcp::pdcp_consts::PDCP_Consts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::pdcp::pdcp_consts::PDCP_Consts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDCP_Consts_pdcp_2fpdcp_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDCP_Consts_pdcp_2fpdcp_5fconsts_2eproto}, {}};

static void InitDefaultsscc_info_PDCP_Consts_array_port_pdcp_2fpdcp_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::pdcp::pdcp_consts::_PDCP_Consts_array_port_default_instance_;
    new (ptr) ::pb::pdcp::pdcp_consts::PDCP_Consts_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::pdcp::pdcp_consts::PDCP_Consts_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PDCP_Consts_array_port_pdcp_2fpdcp_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PDCP_Consts_array_port_pdcp_2fpdcp_5fconsts_2eproto}, {
      &scc_info_PDCP_Consts_pdcp_2fpdcp_5fconsts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pdcp_2fpdcp_5fconsts_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pdcp_2fpdcp_5fconsts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pdcp_2fpdcp_5fconsts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pdcp_2fpdcp_5fconsts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::pdcp::pdcp_consts::PDCP_Consts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::pdcp::pdcp_consts::PDCP_Consts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::pdcp::pdcp_consts::PDCP_Consts, max_num_sectors_per_side_),
  PROTOBUF_FIELD_OFFSET(::pb::pdcp::pdcp_consts::PDCP_Consts, num_mts_debug_freespace_pdcp_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::pdcp::pdcp_consts::PDCP_Consts_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::pdcp::pdcp_consts::PDCP_Consts_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::pdcp::pdcp_consts::PDCP_Consts_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pb::pdcp::pdcp_consts::PDCP_Consts)},
  { 9, 15, sizeof(::pb::pdcp::pdcp_consts::PDCP_Consts_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::pdcp::pdcp_consts::_PDCP_Consts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::pdcp::pdcp_consts::_PDCP_Consts_array_port_default_instance_),
};

const char descriptor_table_protodef_pdcp_2fpdcp_5fconsts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026pdcp/pdcp_consts.proto\022\023pb.pdcp.pdcp_c"
  "onsts\"W\n\013PDCP_Consts\022!\n\030MAX_NUM_SECTORS_"
  "PER_SIDE\030\200\030 \001(\r\022%\n\034NUM_MTS_DEBUG_FREESPA"
  "CE_PDCP\030\231\005 \001(\r\"I\n\026PDCP_Consts_array_port"
  "\022/\n\004data\030\314\024 \003(\0132 .pb.pdcp.pdcp_consts.PD"
  "CP_Consts"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_sccs[2] = {
  &scc_info_PDCP_Consts_pdcp_2fpdcp_5fconsts_2eproto.base,
  &scc_info_PDCP_Consts_array_port_pdcp_2fpdcp_5fconsts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_once;
static bool descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pdcp_2fpdcp_5fconsts_2eproto = {
  &descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_initialized, descriptor_table_protodef_pdcp_2fpdcp_5fconsts_2eproto, "pdcp/pdcp_consts.proto", 209,
  &descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_once, descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_sccs, descriptor_table_pdcp_2fpdcp_5fconsts_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_pdcp_2fpdcp_5fconsts_2eproto::offsets,
  file_level_metadata_pdcp_2fpdcp_5fconsts_2eproto, 2, file_level_enum_descriptors_pdcp_2fpdcp_5fconsts_2eproto, file_level_service_descriptors_pdcp_2fpdcp_5fconsts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pdcp_2fpdcp_5fconsts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pdcp_2fpdcp_5fconsts_2eproto), true);
namespace pb {
namespace pdcp {
namespace pdcp_consts {

// ===================================================================

void PDCP_Consts::InitAsDefaultInstance() {
}
class PDCP_Consts::_Internal {
 public:
  using HasBits = decltype(std::declval<PDCP_Consts>()._has_bits_);
  static void set_has_max_num_sectors_per_side(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_mts_debug_freespace_pdcp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PDCP_Consts::PDCP_Consts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.pdcp.pdcp_consts.PDCP_Consts)
}
PDCP_Consts::PDCP_Consts(const PDCP_Consts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_mts_debug_freespace_pdcp_, &from.num_mts_debug_freespace_pdcp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_sectors_per_side_) -
    reinterpret_cast<char*>(&num_mts_debug_freespace_pdcp_)) + sizeof(max_num_sectors_per_side_));
  // @@protoc_insertion_point(copy_constructor:pb.pdcp.pdcp_consts.PDCP_Consts)
}

void PDCP_Consts::SharedCtor() {
  ::memset(&num_mts_debug_freespace_pdcp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_sectors_per_side_) -
      reinterpret_cast<char*>(&num_mts_debug_freespace_pdcp_)) + sizeof(max_num_sectors_per_side_));
}

PDCP_Consts::~PDCP_Consts() {
  // @@protoc_insertion_point(destructor:pb.pdcp.pdcp_consts.PDCP_Consts)
  SharedDtor();
}

void PDCP_Consts::SharedDtor() {
}

void PDCP_Consts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCP_Consts& PDCP_Consts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCP_Consts_pdcp_2fpdcp_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void PDCP_Consts::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.pdcp.pdcp_consts.PDCP_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_mts_debug_freespace_pdcp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_num_sectors_per_side_) -
        reinterpret_cast<char*>(&num_mts_debug_freespace_pdcp_)) + sizeof(max_num_sectors_per_side_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PDCP_Consts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 NUM_MTS_DEBUG_FREESPACE_PDCP = 665;
      case 665:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_num_mts_debug_freespace_pdcp(&has_bits);
          num_mts_debug_freespace_pdcp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_NUM_SECTORS_PER_SIDE = 3072;
      case 3072:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_max_num_sectors_per_side(&has_bits);
          max_num_sectors_per_side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCP_Consts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.pdcp.pdcp_consts.PDCP_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 NUM_MTS_DEBUG_FREESPACE_PDCP = 665;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(665, this->_internal_num_mts_debug_freespace_pdcp(), target);
  }

  // optional uint32 MAX_NUM_SECTORS_PER_SIDE = 3072;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3072, this->_internal_max_num_sectors_per_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.pdcp.pdcp_consts.PDCP_Consts)
  return target;
}

size_t PDCP_Consts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.pdcp.pdcp_consts.PDCP_Consts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 NUM_MTS_DEBUG_FREESPACE_PDCP = 665;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_mts_debug_freespace_pdcp());
    }

    // optional uint32 MAX_NUM_SECTORS_PER_SIDE = 3072;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_num_sectors_per_side());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCP_Consts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.pdcp.pdcp_consts.PDCP_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCP_Consts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCP_Consts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.pdcp.pdcp_consts.PDCP_Consts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.pdcp.pdcp_consts.PDCP_Consts)
    MergeFrom(*source);
  }
}

void PDCP_Consts::MergeFrom(const PDCP_Consts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.pdcp.pdcp_consts.PDCP_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_mts_debug_freespace_pdcp_ = from.num_mts_debug_freespace_pdcp_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_num_sectors_per_side_ = from.max_num_sectors_per_side_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PDCP_Consts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.pdcp.pdcp_consts.PDCP_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCP_Consts::CopyFrom(const PDCP_Consts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.pdcp.pdcp_consts.PDCP_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCP_Consts::IsInitialized() const {
  return true;
}

void PDCP_Consts::InternalSwap(PDCP_Consts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_mts_debug_freespace_pdcp_, other->num_mts_debug_freespace_pdcp_);
  swap(max_num_sectors_per_side_, other->max_num_sectors_per_side_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCP_Consts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCP_Consts_array_port::InitAsDefaultInstance() {
}
class PDCP_Consts_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<PDCP_Consts_array_port>()._has_bits_);
};

PDCP_Consts_array_port::PDCP_Consts_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
}
PDCP_Consts_array_port::PDCP_Consts_array_port(const PDCP_Consts_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
}

void PDCP_Consts_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PDCP_Consts_array_port_pdcp_2fpdcp_5fconsts_2eproto.base);
}

PDCP_Consts_array_port::~PDCP_Consts_array_port() {
  // @@protoc_insertion_point(destructor:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  SharedDtor();
}

void PDCP_Consts_array_port::SharedDtor() {
}

void PDCP_Consts_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCP_Consts_array_port& PDCP_Consts_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCP_Consts_array_port_pdcp_2fpdcp_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void PDCP_Consts_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PDCP_Consts_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.pdcp.pdcp_consts.PDCP_Consts data = 2636;
      case 2636:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCP_Consts_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.pdcp.pdcp_consts.PDCP_Consts data = 2636;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2636, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  return target;
}

size_t PDCP_Consts_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.pdcp.pdcp_consts.PDCP_Consts data = 2636;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCP_Consts_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCP_Consts_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCP_Consts_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
    MergeFrom(*source);
  }
}

void PDCP_Consts_array_port::MergeFrom(const PDCP_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void PDCP_Consts_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCP_Consts_array_port::CopyFrom(const PDCP_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.pdcp.pdcp_consts.PDCP_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCP_Consts_array_port::IsInitialized() const {
  return true;
}

void PDCP_Consts_array_port::InternalSwap(PDCP_Consts_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCP_Consts_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pdcp_consts
}  // namespace pdcp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::pdcp::pdcp_consts::PDCP_Consts* Arena::CreateMaybeMessage< ::pb::pdcp::pdcp_consts::PDCP_Consts >(Arena* arena) {
  return Arena::CreateInternal< ::pb::pdcp::pdcp_consts::PDCP_Consts >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::pdcp::pdcp_consts::PDCP_Consts_array_port* Arena::CreateMaybeMessage< ::pb::pdcp::pdcp_consts::PDCP_Consts_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::pdcp::pdcp_consts::PDCP_Consts_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
