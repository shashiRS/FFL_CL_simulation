// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/hmigeneral.proto

#include "mf_hmih/hmigeneral.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fhmigeneral_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto;
namespace pb {
namespace mf_hmih {
namespace hmigeneral {
class HMIGeneralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIGeneral> _instance;
} _HMIGeneral_default_instance_;
class HMIGeneral_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIGeneral_array_port> _instance;
} _HMIGeneral_array_port_default_instance_;
}  // namespace hmigeneral
}  // namespace mf_hmih
}  // namespace pb
static void InitDefaultsscc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::hmigeneral::_HMIGeneral_default_instance_;
    new (ptr) ::pb::mf_hmih::hmigeneral::HMIGeneral();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::hmigeneral::HMIGeneral::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto}, {}};

static void InitDefaultsscc_info_HMIGeneral_array_port_mf_5fhmih_2fhmigeneral_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::hmigeneral::_HMIGeneral_array_port_default_instance_;
    new (ptr) ::pb::mf_hmih::hmigeneral::HMIGeneral_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::hmigeneral::HMIGeneral_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIGeneral_array_port_mf_5fhmih_2fhmigeneral_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIGeneral_array_port_mf_5fhmih_2fhmigeneral_2eproto}, {
      &scc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fhmih_2fhmigeneral_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fhmih_2fhmigeneral_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fhmih_2fhmigeneral_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fhmih_2fhmigeneral_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, remotemodeactive_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, remoteappactive_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, remoteappauthorized_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, remoteappcoded_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, remotekeyselected_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, remotekeyposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, continueposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, parkinposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, parkoutposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, remmanposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, undoposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, svposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, btnforwardposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, btnbackwardposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, btnfullyautomparkingposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, btnsemiautomparkingposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, garageopeneravail_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, distancetostop_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, maxspeed10kphwarning_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, drivingdirection_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, garageparking_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, avgtype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, currentgear_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, generaluserinformation_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, ppcparkingmode_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, finishtype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, pdcsystemstate_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, lvmdsystemstate_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, lvmdwarningtype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, pdcshutdowncause_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, whpstate_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, whpdisplayreq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, apswitchinputdeviceposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, memoryparkingposs_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, displaybackbutton_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, blindspotviewstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, slotunreachreason_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, memoryslotsstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, redetectedposememslotid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral, adjustmentbuttons_nu_),
  21,
  34,
  35,
  36,
  37,
  30,
  31,
  32,
  33,
  5,
  6,
  7,
  8,
  22,
  23,
  24,
  25,
  11,
  1,
  16,
  3,
  13,
  9,
  26,
  10,
  4,
  14,
  2,
  27,
  38,
  29,
  17,
  18,
  19,
  20,
  0,
  28,
  12,
  39,
  15,
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral::HMIGeneral_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 45, sizeof(::pb::mf_hmih::hmigeneral::HMIGeneral)},
  { 85, 91, sizeof(::pb::mf_hmih::hmigeneral::HMIGeneral_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::hmigeneral::_HMIGeneral_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::hmigeneral::_HMIGeneral_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fhmih_2fhmigeneral_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030mf_hmih/hmigeneral.proto\022\025pb.mf_hmih.h"
  "migeneral\032\034ap_psm_app/remote_mode.proto\032"
  "\'ap_psm_app/max_speed10_kphwarning.proto"
  "\032!ap_common/driving_direction.proto\032\037ap_"
  "psm_app/garage_parking.proto\032\025mf_hmih/av"
  "gtype.proto\032\"ap_commonvehsigprovider/gea"
  "r.proto\032\033ap_psm_app/hmimessage.proto\032 ap"
  "_psm_app/ppcparking_mode.proto\032\036ap_psm_a"
  "pp/apfinish_type.proto\032\"mf_drvwarnsm/pdw"
  "system_state.proto\032\037mf_lvmd/lvmdsystem_s"
  "tatus.proto\032!mf_lvmd/lvmdwarning_trigger"
  ".proto\032$mf_drvwarnsm/pdwshutdown_cause.p"
  "roto\032\033mf_drvwarnsm/whpstate.proto\032$mf_hm"
  "ih/blind_spot_view_status.proto\032!mf_hmih"
  "/slot_unreach_reason.proto\"\367\016\n\nHMIGenera"
  "l\022C\n\023remoteModeActive_nu\030\234\022 \001(\0162%.pb.ap_"
  "psm_app.remote_mode.RemoteMode\022\033\n\022remote"
  "AppActive_nu\030\300\026 \001(\010\022\037\n\026remoteAppAuthoriz"
  "ed_nu\030\257\037 \001(\010\022\032\n\021remoteAppCoded_nu\030\364\031 \001(\010"
  "\022\035\n\024remoteKeySelected_nu\030\340\021 \001(\010\022\031\n\020remot"
  "eKeyPoss_nu\030\313\036 \001(\010\022\030\n\017continuePoss_nu\030\206\007"
  " \001(\010\022\026\n\rparkInPoss_nu\030\256\036 \001(\010\022\027\n\016parkOutP"
  "oss_nu\030\205\035 \001(\010\022\026\n\rremManPoss_nu\030\203\005 \001(\010\022\024\n"
  "\013undoPoss_nu\030\313\004 \001(\010\022\022\n\tsvPoss_nu\030\314\r \001(\010\022"
  "\032\n\021btnForwardPoss_nu\030\217\r \001(\010\022\033\n\022btnBackwa"
  "rdPoss_nu\030\274\032 \001(\010\022$\n\033btnFullyAutomParking"
  "Poss_nu\030\301\022 \001(\010\022#\n\032btnSemiAutomParkingPos"
  "s_nu\030\226\020 \001(\010\022\035\n\024garageOpenerAvail_nu\030\204\r \001"
  "(\010\022\034\n\023distanceToStop_perc\030\210\013 \001(\r\022\\\n\027maxS"
  "peed10KPHwarning_nu\030\251\004 \001(\0162:.pb.ap_psm_a"
  "pp.max_speed10_kphwarning.MaxSpeed10KPHw"
  "arning\022N\n\023drivingDirection_nu\030\362\020 \001(\01620.p"
  "b.ap_common.driving_direction.DrivingDir"
  "ection\022F\n\020garageParking_nu\030\354\005 \001(\0162+.pb.a"
  "p_psm_app.garage_parking.GarageParking\0220"
  "\n\navgType_nu\030\235\014 \001(\0162\033.pb.mf_hmih.avgtype"
  ".AVGType\022>\n\016currentGear_nu\030\254\t \001(\0162%.pb.a"
  "p_commonvehsigprovider.gear.Gear\022H\n\031gene"
  "ralUserInformation_nu\030\252\024 \001(\0162$.pb.ap_psm"
  "_app.hmimessage.HMIMessage\022I\n\021ppcParking"
  "Mode_nu\030\277\n \001(\0162-.pb.ap_psm_app.ppcparkin"
  "g_mode.PPCParkingMode\022A\n\rfinishType_nu\030\244"
  "\006 \001(\0162).pb.ap_psm_app.apfinish_type.APFi"
  "nishType\022K\n\021pdcSystemState_nu\030\265\017 \001(\0162/.p"
  "b.mf_drvwarnsm.pdwsystem_state.PDWSystem"
  "State\022K\n\022lvmdSystemState_nu\030\210\005 \001(\0162..pb."
  "mf_lvmd.lvmdsystem_status.LVMDSystemStat"
  "us\022O\n\022lvmdWarningType_nu\030\313\024 \001(\01622.pb.mf_"
  "lvmd.lvmdwarning_trigger.LVMDWarningTrig"
  "ger\022Q\n\023pdcShutdownCause_nu\030\212\031 \001(\01623.pb.m"
  "f_drvwarnsm.pdwshutdown_cause.PDWShutdow"
  "nCause\0228\n\013whpState_nu\030\342\025 \001(\0162\".pb.mf_drv"
  "warnsm.whpstate.WHPState\022\031\n\020whpDisplayRe"
  "q_nu\030\206\014 \001(\010\022#\n\032apSwitchInputDevicePoss_n"
  "u\030\261\021 \001(\010\022\035\n\024memoryParkingPoss_nu\030\372\016 \001(\010\022"
  "\035\n\024displayBackButton_nu\030\232\034 \001(\010\022W\n\026blindS"
  "potViewStatus_nu\030\240\037 \001(\01626.pb.mf_hmih.bli"
  "nd_spot_view_status.BlindSpotViewStatus\022"
  "P\n\024slotUnreachReason_nu\030\371\024 \001(\01621.pb.mf_h"
  "mih.slot_unreach_reason.SlotUnreachReaso"
  "n\022\035\n\024memorySlotsStatus_nu\030\204\014 \001(\r\022#\n\032rede"
  "tectedPoseMemSlotId_nu\030\275\036 \001(\r\022\035\n\024adjustm"
  "entButtons_nu\030\314\017 \001(\r\"I\n\025HMIGeneral_array"
  "_port\0220\n\004data\030\333\017 \003(\0132!.pb.mf_hmih.hmigen"
  "eral.HMIGeneral"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_deps[16] = {
  &::descriptor_table_ap_5fcommon_2fdriving_5fdirection_2eproto,
  &::descriptor_table_ap_5fcommonvehsigprovider_2fgear_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fapfinish_5ftype_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fgarage_5fparking_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fhmimessage_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fmax_5fspeed10_5fkphwarning_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fppcparking_5fmode_2eproto,
  &::descriptor_table_ap_5fpsm_5fapp_2fremote_5fmode_2eproto,
  &::descriptor_table_mf_5fdrvwarnsm_2fpdwshutdown_5fcause_2eproto,
  &::descriptor_table_mf_5fdrvwarnsm_2fpdwsystem_5fstate_2eproto,
  &::descriptor_table_mf_5fdrvwarnsm_2fwhpstate_2eproto,
  &::descriptor_table_mf_5fhmih_2favgtype_2eproto,
  &::descriptor_table_mf_5fhmih_2fblind_5fspot_5fview_5fstatus_2eproto,
  &::descriptor_table_mf_5fhmih_2fslot_5funreach_5freason_2eproto,
  &::descriptor_table_mf_5flvmd_2flvmdsystem_5fstatus_2eproto,
  &::descriptor_table_mf_5flvmd_2flvmdwarning_5ftrigger_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_sccs[2] = {
  &scc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto.base,
  &scc_info_HMIGeneral_array_port_mf_5fhmih_2fhmigeneral_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_once;
static bool descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fhmigeneral_2eproto = {
  &descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_initialized, descriptor_table_protodef_mf_5fhmih_2fhmigeneral_2eproto, "mf_hmih/hmigeneral.proto", 2575,
  &descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_once, descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_sccs, descriptor_table_mf_5fhmih_2fhmigeneral_2eproto_deps, 2, 16,
  schemas, file_default_instances, TableStruct_mf_5fhmih_2fhmigeneral_2eproto::offsets,
  file_level_metadata_mf_5fhmih_2fhmigeneral_2eproto, 2, file_level_enum_descriptors_mf_5fhmih_2fhmigeneral_2eproto, file_level_service_descriptors_mf_5fhmih_2fhmigeneral_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fhmih_2fhmigeneral_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fhmih_2fhmigeneral_2eproto), true);
namespace pb {
namespace mf_hmih {
namespace hmigeneral {

// ===================================================================

void HMIGeneral::InitAsDefaultInstance() {
}
class HMIGeneral::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIGeneral>()._has_bits_);
  static void set_has_remotemodeactive_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_remoteappactive_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_remoteappauthorized_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_remoteappcoded_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_remotekeyselected_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_remotekeyposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_continueposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_parkinposs_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_parkoutposs_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_remmanposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_undoposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_svposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_btnforwardposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_btnbackwardposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_btnfullyautomparkingposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_btnsemiautomparkingposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_garageopeneravail_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_distancetostop_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_maxspeed10kphwarning_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drivingdirection_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_garageparking_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avgtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_currentgear_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_generaluserinformation_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ppcparkingmode_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_finishtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pdcsystemstate_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lvmdsystemstate_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lvmdwarningtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_pdcshutdowncause_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_whpstate_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_whpdisplayreq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_apswitchinputdeviceposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_memoryparkingposs_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_displaybackbutton_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_blindspotviewstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slotunreachreason_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_memoryslotsstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_redetectedposememslotid_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_adjustmentbuttons_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

HMIGeneral::HMIGeneral()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.hmigeneral.HMIGeneral)
}
HMIGeneral::HMIGeneral(const HMIGeneral& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blindspotviewstatus_nu_, &from.blindspotviewstatus_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&redetectedposememslotid_nu_) -
    reinterpret_cast<char*>(&blindspotviewstatus_nu_)) + sizeof(redetectedposememslotid_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.hmigeneral.HMIGeneral)
}

void HMIGeneral::SharedCtor() {
  ::memset(&blindspotviewstatus_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redetectedposememslotid_nu_) -
      reinterpret_cast<char*>(&blindspotviewstatus_nu_)) + sizeof(redetectedposememslotid_nu_));
}

HMIGeneral::~HMIGeneral() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.hmigeneral.HMIGeneral)
  SharedDtor();
}

void HMIGeneral::SharedDtor() {
}

void HMIGeneral::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMIGeneral& HMIGeneral::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto.base);
  return *internal_default_instance();
}


void HMIGeneral::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.hmigeneral.HMIGeneral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&blindspotviewstatus_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&svposs_nu_) -
        reinterpret_cast<char*>(&blindspotviewstatus_nu_)) + sizeof(svposs_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&btnforwardposs_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adjustmentbuttons_nu_) -
        reinterpret_cast<char*>(&btnforwardposs_nu_)) + sizeof(adjustmentbuttons_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&drivingdirection_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&btnfullyautomparkingposs_nu_) -
        reinterpret_cast<char*>(&drivingdirection_nu_)) + sizeof(btnfullyautomparkingposs_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&btnsemiautomparkingposs_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continueposs_nu_) -
        reinterpret_cast<char*>(&btnsemiautomparkingposs_nu_)) + sizeof(continueposs_nu_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&parkinposs_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redetectedposememslotid_nu_) -
        reinterpret_cast<char*>(&parkinposs_nu_)) + sizeof(redetectedposememslotid_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HMIGeneral::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
      case 553:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning_IsValid(val))) {
            _internal_set_maxspeed10kphwarning_nu(static_cast<::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(553, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool undoPoss_nu = 587;
      case 587:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_undoposs_nu(&_has_bits_);
          undoposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remManPoss_nu = 643;
      case 643:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_remmanposs_nu(&_has_bits_);
          remmanposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lvmd.lvmdsystem_status.LVMDSystemStatus lvmdSystemState_nu = 648;
      case 648:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus_IsValid(val))) {
            _internal_set_lvmdsystemstate_nu(static_cast<::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(648, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
      case 748:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::garage_parking::GarageParking_IsValid(val))) {
            _internal_set_garageparking_nu(static_cast<::pb::ap_psm_app::garage_parking::GarageParking>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(748, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
      case 804:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::apfinish_type::APFinishType_IsValid(val))) {
            _internal_set_finishtype_nu(static_cast<::pb::ap_psm_app::apfinish_type::APFinishType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(804, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool continuePoss_nu = 902;
      case 902:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_continueposs_nu(&_has_bits_);
          continueposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
      case 1196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_commonvehsigprovider::gear::Gear_IsValid(val))) {
            _internal_set_currentgear_nu(static_cast<::pb::ap_commonvehsigprovider::gear::Gear>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1196, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
      case 1343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::ppcparking_mode::PPCParkingMode_IsValid(val))) {
            _internal_set_ppcparkingmode_nu(static_cast<::pb::ap_psm_app::ppcparking_mode::PPCParkingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1343, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 distanceToStop_perc = 1416;
      case 1416:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_distancetostop_perc(&_has_bits_);
          distancetostop_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 memorySlotsStatus_nu = 1540;
      case 1540:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_memoryslotsstatus_nu(&_has_bits_);
          memoryslotsstatus_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool whpDisplayReq_nu = 1542;
      case 1542:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_whpdisplayreq_nu(&_has_bits_);
          whpdisplayreq_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.avgtype.AVGType avgType_nu = 1565;
      case 1565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_hmih::avgtype::AVGType_IsValid(val))) {
            _internal_set_avgtype_nu(static_cast<::pb::mf_hmih::avgtype::AVGType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1565, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool garageOpenerAvail_nu = 1668;
      case 1668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_garageopeneravail_nu(&_has_bits_);
          garageopeneravail_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool btnForwardPoss_nu = 1679;
      case 1679:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_btnforwardposs_nu(&_has_bits_);
          btnforwardposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool svPoss_nu = 1740;
      case 1740:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_svposs_nu(&_has_bits_);
          svposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool memoryParkingPoss_nu = 1914;
      case 1914:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_memoryparkingposs_nu(&_has_bits_);
          memoryparkingposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_drvwarnsm.pdwsystem_state.PDWSystemState pdcSystemState_nu = 1973;
      case 1973:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState_IsValid(val))) {
            _internal_set_pdcsystemstate_nu(static_cast<::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1973, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 adjustmentButtons_nu = 1996;
      case 1996:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_adjustmentbuttons_nu(&_has_bits_);
          adjustmentbuttons_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool btnSemiAutomParkingPoss_nu = 2070;
      case 2070:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_btnsemiautomparkingposs_nu(&_has_bits_);
          btnsemiautomparkingposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
      case 2162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_common::driving_direction::DrivingDirection_IsValid(val))) {
            _internal_set_drivingdirection_nu(static_cast<::pb::ap_common::driving_direction::DrivingDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2162, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool apSwitchInputDevicePoss_nu = 2225;
      case 2225:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_apswitchinputdeviceposs_nu(&_has_bits_);
          apswitchinputdeviceposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteKeySelected_nu = 2272;
      case 2272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_remotekeyselected_nu(&_has_bits_);
          remotekeyselected_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
      case 2332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::remote_mode::RemoteMode_IsValid(val))) {
            _internal_set_remotemodeactive_nu(static_cast<::pb::ap_psm_app::remote_mode::RemoteMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2332, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool btnFullyAutomParkingPoss_nu = 2369;
      case 2369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_btnfullyautomparkingposs_nu(&_has_bits_);
          btnfullyautomparkingposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
      case 2602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_psm_app::hmimessage::HMIMessage_IsValid(val))) {
            _internal_set_generaluserinformation_nu(static_cast<::pb::ap_psm_app::hmimessage::HMIMessage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2602, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lvmd.lvmdwarning_trigger.LVMDWarningTrigger lvmdWarningType_nu = 2635;
      case 2635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger_IsValid(val))) {
            _internal_set_lvmdwarningtype_nu(static_cast<::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2635, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.slot_unreach_reason.SlotUnreachReason slotUnreachReason_nu = 2681;
      case 2681:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason_IsValid(val))) {
            _internal_set_slotunreachreason_nu(static_cast<::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2681, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_drvwarnsm.whpstate.WHPState whpState_nu = 2786;
      case 2786:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_drvwarnsm::whpstate::WHPState_IsValid(val))) {
            _internal_set_whpstate_nu(static_cast<::pb::mf_drvwarnsm::whpstate::WHPState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2786, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool remoteAppActive_nu = 2880;
      case 2880:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_remoteappactive_nu(&_has_bits_);
          remoteappactive_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_drvwarnsm.pdwshutdown_cause.PDWShutdownCause pdcShutdownCause_nu = 3210;
      case 3210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause_IsValid(val))) {
            _internal_set_pdcshutdowncause_nu(static_cast<::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3210, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool remoteAppCoded_nu = 3316;
      case 3316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_remoteappcoded_nu(&_has_bits_);
          remoteappcoded_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool btnBackwardPoss_nu = 3388;
      case 3388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_btnbackwardposs_nu(&_has_bits_);
          btnbackwardposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool displayBackButton_nu = 3610;
      case 3610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_displaybackbutton_nu(&_has_bits_);
          displaybackbutton_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parkOutPoss_nu = 3717;
      case 3717:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_parkoutposs_nu(&_has_bits_);
          parkoutposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parkInPoss_nu = 3886;
      case 3886:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_parkinposs_nu(&_has_bits_);
          parkinposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 redetectedPoseMemSlotId_nu = 3901;
      case 3901:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_redetectedposememslotid_nu(&_has_bits_);
          redetectedposememslotid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteKeyPoss_nu = 3915;
      case 3915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_remotekeyposs_nu(&_has_bits_);
          remotekeyposs_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.blind_spot_view_status.BlindSpotViewStatus blindSpotViewStatus_nu = 4000;
      case 4000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus_IsValid(val))) {
            _internal_set_blindspotviewstatus_nu(static_cast<::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4000, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool remoteAppAuthorized_nu = 4015;
      case 4015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_remoteappauthorized_nu(&_has_bits_);
          remoteappauthorized_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIGeneral::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.hmigeneral.HMIGeneral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      553, this->_internal_maxspeed10kphwarning_nu(), target);
  }

  // optional bool undoPoss_nu = 587;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(587, this->_internal_undoposs_nu(), target);
  }

  // optional bool remManPoss_nu = 643;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(643, this->_internal_remmanposs_nu(), target);
  }

  // optional .pb.mf_lvmd.lvmdsystem_status.LVMDSystemStatus lvmdSystemState_nu = 648;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      648, this->_internal_lvmdsystemstate_nu(), target);
  }

  // optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      748, this->_internal_garageparking_nu(), target);
  }

  // optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      804, this->_internal_finishtype_nu(), target);
  }

  // optional bool continuePoss_nu = 902;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(902, this->_internal_continueposs_nu(), target);
  }

  // optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1196, this->_internal_currentgear_nu(), target);
  }

  // optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1343, this->_internal_ppcparkingmode_nu(), target);
  }

  // optional uint32 distanceToStop_perc = 1416;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1416, this->_internal_distancetostop_perc(), target);
  }

  // optional uint32 memorySlotsStatus_nu = 1540;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1540, this->_internal_memoryslotsstatus_nu(), target);
  }

  // optional bool whpDisplayReq_nu = 1542;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1542, this->_internal_whpdisplayreq_nu(), target);
  }

  // optional .pb.mf_hmih.avgtype.AVGType avgType_nu = 1565;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1565, this->_internal_avgtype_nu(), target);
  }

  // optional bool garageOpenerAvail_nu = 1668;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1668, this->_internal_garageopeneravail_nu(), target);
  }

  // optional bool btnForwardPoss_nu = 1679;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1679, this->_internal_btnforwardposs_nu(), target);
  }

  // optional bool svPoss_nu = 1740;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1740, this->_internal_svposs_nu(), target);
  }

  // optional bool memoryParkingPoss_nu = 1914;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1914, this->_internal_memoryparkingposs_nu(), target);
  }

  // optional .pb.mf_drvwarnsm.pdwsystem_state.PDWSystemState pdcSystemState_nu = 1973;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1973, this->_internal_pdcsystemstate_nu(), target);
  }

  // optional uint32 adjustmentButtons_nu = 1996;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1996, this->_internal_adjustmentbuttons_nu(), target);
  }

  // optional bool btnSemiAutomParkingPoss_nu = 2070;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2070, this->_internal_btnsemiautomparkingposs_nu(), target);
  }

  // optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2162, this->_internal_drivingdirection_nu(), target);
  }

  // optional bool apSwitchInputDevicePoss_nu = 2225;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2225, this->_internal_apswitchinputdeviceposs_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool remoteKeySelected_nu = 2272;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2272, this->_internal_remotekeyselected_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2332, this->_internal_remotemodeactive_nu(), target);
  }

  // optional bool btnFullyAutomParkingPoss_nu = 2369;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2369, this->_internal_btnfullyautomparkingposs_nu(), target);
  }

  // optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2602, this->_internal_generaluserinformation_nu(), target);
  }

  // optional .pb.mf_lvmd.lvmdwarning_trigger.LVMDWarningTrigger lvmdWarningType_nu = 2635;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2635, this->_internal_lvmdwarningtype_nu(), target);
  }

  // optional .pb.mf_hmih.slot_unreach_reason.SlotUnreachReason slotUnreachReason_nu = 2681;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2681, this->_internal_slotunreachreason_nu(), target);
  }

  // optional .pb.mf_drvwarnsm.whpstate.WHPState whpState_nu = 2786;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2786, this->_internal_whpstate_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool remoteAppActive_nu = 2880;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2880, this->_internal_remoteappactive_nu(), target);
  }

  // optional .pb.mf_drvwarnsm.pdwshutdown_cause.PDWShutdownCause pdcShutdownCause_nu = 3210;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3210, this->_internal_pdcshutdowncause_nu(), target);
  }

  // optional bool remoteAppCoded_nu = 3316;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3316, this->_internal_remoteappcoded_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool btnBackwardPoss_nu = 3388;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3388, this->_internal_btnbackwardposs_nu(), target);
  }

  // optional bool displayBackButton_nu = 3610;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3610, this->_internal_displaybackbutton_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool parkOutPoss_nu = 3717;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3717, this->_internal_parkoutposs_nu(), target);
  }

  // optional bool parkInPoss_nu = 3886;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3886, this->_internal_parkinposs_nu(), target);
  }

  // optional uint32 redetectedPoseMemSlotId_nu = 3901;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3901, this->_internal_redetectedposememslotid_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool remoteKeyPoss_nu = 3915;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3915, this->_internal_remotekeyposs_nu(), target);
  }

  // optional .pb.mf_hmih.blind_spot_view_status.BlindSpotViewStatus blindSpotViewStatus_nu = 4000;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4000, this->_internal_blindspotviewstatus_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool remoteAppAuthorized_nu = 4015;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4015, this->_internal_remoteappauthorized_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.hmigeneral.HMIGeneral)
  return target;
}

size_t HMIGeneral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.hmigeneral.HMIGeneral)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.mf_hmih.blind_spot_view_status.BlindSpotViewStatus blindSpotViewStatus_nu = 4000;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blindspotviewstatus_nu());
    }

    // optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maxspeed10kphwarning_nu());
    }

    // optional .pb.mf_lvmd.lvmdsystem_status.LVMDSystemStatus lvmdSystemState_nu = 648;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lvmdsystemstate_nu());
    }

    // optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_garageparking_nu());
    }

    // optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_finishtype_nu());
    }

    // optional bool remManPoss_nu = 643;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool undoPoss_nu = 587;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool svPoss_nu = 1740;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool btnForwardPoss_nu = 1679;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_currentgear_nu());
    }

    // optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ppcparkingmode_nu());
    }

    // optional uint32 distanceToStop_perc = 1416;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_distancetostop_perc());
    }

    // optional uint32 memorySlotsStatus_nu = 1540;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_memoryslotsstatus_nu());
    }

    // optional .pb.mf_hmih.avgtype.AVGType avgType_nu = 1565;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_avgtype_nu());
    }

    // optional .pb.mf_drvwarnsm.pdwsystem_state.PDWSystemState pdcSystemState_nu = 1973;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pdcsystemstate_nu());
    }

    // optional uint32 adjustmentButtons_nu = 1996;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_adjustmentbuttons_nu());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_drivingdirection_nu());
    }

    // optional bool whpDisplayReq_nu = 1542;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool apSwitchInputDevicePoss_nu = 2225;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool memoryParkingPoss_nu = 1914;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool displayBackButton_nu = 3610;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remotemodeactive_nu());
    }

    // optional bool btnBackwardPoss_nu = 3388;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool btnFullyAutomParkingPoss_nu = 2369;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool btnSemiAutomParkingPoss_nu = 2070;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool garageOpenerAvail_nu = 1668;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_generaluserinformation_nu());
    }

    // optional .pb.mf_lvmd.lvmdwarning_trigger.LVMDWarningTrigger lvmdWarningType_nu = 2635;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lvmdwarningtype_nu());
    }

    // optional .pb.mf_hmih.slot_unreach_reason.SlotUnreachReason slotUnreachReason_nu = 2681;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slotunreachreason_nu());
    }

    // optional .pb.mf_drvwarnsm.whpstate.WHPState whpState_nu = 2786;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_whpstate_nu());
    }

    // optional bool remoteKeyPoss_nu = 3915;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool continuePoss_nu = 902;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool parkInPoss_nu = 3886;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 1;
    }

    // optional bool parkOutPoss_nu = 3717;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool remoteAppActive_nu = 2880;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional bool remoteAppAuthorized_nu = 4015;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool remoteAppCoded_nu = 3316;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool remoteKeySelected_nu = 2272;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional .pb.mf_drvwarnsm.pdwshutdown_cause.PDWShutdownCause pdcShutdownCause_nu = 3210;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pdcshutdowncause_nu());
    }

    // optional uint32 redetectedPoseMemSlotId_nu = 3901;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_redetectedposememslotid_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIGeneral::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.hmigeneral.HMIGeneral)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIGeneral* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIGeneral>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.hmigeneral.HMIGeneral)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.hmigeneral.HMIGeneral)
    MergeFrom(*source);
  }
}

void HMIGeneral::MergeFrom(const HMIGeneral& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.hmigeneral.HMIGeneral)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      blindspotviewstatus_nu_ = from.blindspotviewstatus_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxspeed10kphwarning_nu_ = from.maxspeed10kphwarning_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      lvmdsystemstate_nu_ = from.lvmdsystemstate_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      garageparking_nu_ = from.garageparking_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      finishtype_nu_ = from.finishtype_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      remmanposs_nu_ = from.remmanposs_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      undoposs_nu_ = from.undoposs_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      svposs_nu_ = from.svposs_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      btnforwardposs_nu_ = from.btnforwardposs_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      currentgear_nu_ = from.currentgear_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      ppcparkingmode_nu_ = from.ppcparkingmode_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      distancetostop_perc_ = from.distancetostop_perc_;
    }
    if (cached_has_bits & 0x00001000u) {
      memoryslotsstatus_nu_ = from.memoryslotsstatus_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      avgtype_nu_ = from.avgtype_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      pdcsystemstate_nu_ = from.pdcsystemstate_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      adjustmentbuttons_nu_ = from.adjustmentbuttons_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      drivingdirection_nu_ = from.drivingdirection_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      whpdisplayreq_nu_ = from.whpdisplayreq_nu_;
    }
    if (cached_has_bits & 0x00040000u) {
      apswitchinputdeviceposs_nu_ = from.apswitchinputdeviceposs_nu_;
    }
    if (cached_has_bits & 0x00080000u) {
      memoryparkingposs_nu_ = from.memoryparkingposs_nu_;
    }
    if (cached_has_bits & 0x00100000u) {
      displaybackbutton_nu_ = from.displaybackbutton_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      remotemodeactive_nu_ = from.remotemodeactive_nu_;
    }
    if (cached_has_bits & 0x00400000u) {
      btnbackwardposs_nu_ = from.btnbackwardposs_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      btnfullyautomparkingposs_nu_ = from.btnfullyautomparkingposs_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      btnsemiautomparkingposs_nu_ = from.btnsemiautomparkingposs_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      garageopeneravail_nu_ = from.garageopeneravail_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      generaluserinformation_nu_ = from.generaluserinformation_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      lvmdwarningtype_nu_ = from.lvmdwarningtype_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      slotunreachreason_nu_ = from.slotunreachreason_nu_;
    }
    if (cached_has_bits & 0x20000000u) {
      whpstate_nu_ = from.whpstate_nu_;
    }
    if (cached_has_bits & 0x40000000u) {
      remotekeyposs_nu_ = from.remotekeyposs_nu_;
    }
    if (cached_has_bits & 0x80000000u) {
      continueposs_nu_ = from.continueposs_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      parkinposs_nu_ = from.parkinposs_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      parkoutposs_nu_ = from.parkoutposs_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      remoteappactive_nu_ = from.remoteappactive_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      remoteappauthorized_nu_ = from.remoteappauthorized_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      remoteappcoded_nu_ = from.remoteappcoded_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      remotekeyselected_nu_ = from.remotekeyselected_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      pdcshutdowncause_nu_ = from.pdcshutdowncause_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      redetectedposememslotid_nu_ = from.redetectedposememslotid_nu_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void HMIGeneral::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.hmigeneral.HMIGeneral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIGeneral::CopyFrom(const HMIGeneral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.hmigeneral.HMIGeneral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIGeneral::IsInitialized() const {
  return true;
}

void HMIGeneral::InternalSwap(HMIGeneral* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(blindspotviewstatus_nu_, other->blindspotviewstatus_nu_);
  swap(maxspeed10kphwarning_nu_, other->maxspeed10kphwarning_nu_);
  swap(lvmdsystemstate_nu_, other->lvmdsystemstate_nu_);
  swap(garageparking_nu_, other->garageparking_nu_);
  swap(finishtype_nu_, other->finishtype_nu_);
  swap(remmanposs_nu_, other->remmanposs_nu_);
  swap(undoposs_nu_, other->undoposs_nu_);
  swap(svposs_nu_, other->svposs_nu_);
  swap(btnforwardposs_nu_, other->btnforwardposs_nu_);
  swap(currentgear_nu_, other->currentgear_nu_);
  swap(ppcparkingmode_nu_, other->ppcparkingmode_nu_);
  swap(distancetostop_perc_, other->distancetostop_perc_);
  swap(memoryslotsstatus_nu_, other->memoryslotsstatus_nu_);
  swap(avgtype_nu_, other->avgtype_nu_);
  swap(pdcsystemstate_nu_, other->pdcsystemstate_nu_);
  swap(adjustmentbuttons_nu_, other->adjustmentbuttons_nu_);
  swap(drivingdirection_nu_, other->drivingdirection_nu_);
  swap(whpdisplayreq_nu_, other->whpdisplayreq_nu_);
  swap(apswitchinputdeviceposs_nu_, other->apswitchinputdeviceposs_nu_);
  swap(memoryparkingposs_nu_, other->memoryparkingposs_nu_);
  swap(displaybackbutton_nu_, other->displaybackbutton_nu_);
  swap(remotemodeactive_nu_, other->remotemodeactive_nu_);
  swap(btnbackwardposs_nu_, other->btnbackwardposs_nu_);
  swap(btnfullyautomparkingposs_nu_, other->btnfullyautomparkingposs_nu_);
  swap(btnsemiautomparkingposs_nu_, other->btnsemiautomparkingposs_nu_);
  swap(garageopeneravail_nu_, other->garageopeneravail_nu_);
  swap(generaluserinformation_nu_, other->generaluserinformation_nu_);
  swap(lvmdwarningtype_nu_, other->lvmdwarningtype_nu_);
  swap(slotunreachreason_nu_, other->slotunreachreason_nu_);
  swap(whpstate_nu_, other->whpstate_nu_);
  swap(remotekeyposs_nu_, other->remotekeyposs_nu_);
  swap(continueposs_nu_, other->continueposs_nu_);
  swap(parkinposs_nu_, other->parkinposs_nu_);
  swap(parkoutposs_nu_, other->parkoutposs_nu_);
  swap(remoteappactive_nu_, other->remoteappactive_nu_);
  swap(remoteappauthorized_nu_, other->remoteappauthorized_nu_);
  swap(remoteappcoded_nu_, other->remoteappcoded_nu_);
  swap(remotekeyselected_nu_, other->remotekeyselected_nu_);
  swap(pdcshutdowncause_nu_, other->pdcshutdowncause_nu_);
  swap(redetectedposememslotid_nu_, other->redetectedposememslotid_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIGeneral::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HMIGeneral_array_port::InitAsDefaultInstance() {
}
class HMIGeneral_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIGeneral_array_port>()._has_bits_);
};

HMIGeneral_array_port::HMIGeneral_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
}
HMIGeneral_array_port::HMIGeneral_array_port(const HMIGeneral_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
}

void HMIGeneral_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HMIGeneral_array_port_mf_5fhmih_2fhmigeneral_2eproto.base);
}

HMIGeneral_array_port::~HMIGeneral_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  SharedDtor();
}

void HMIGeneral_array_port::SharedDtor() {
}

void HMIGeneral_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMIGeneral_array_port& HMIGeneral_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMIGeneral_array_port_mf_5fhmih_2fhmigeneral_2eproto.base);
  return *internal_default_instance();
}


void HMIGeneral_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HMIGeneral_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_hmih.hmigeneral.HMIGeneral data = 2011;
      case 2011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16090>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIGeneral_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.hmigeneral.HMIGeneral data = 2011;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2011, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  return target;
}

size_t HMIGeneral_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.hmigeneral.HMIGeneral data = 2011;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIGeneral_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIGeneral_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIGeneral_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
    MergeFrom(*source);
  }
}

void HMIGeneral_array_port::MergeFrom(const HMIGeneral_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void HMIGeneral_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIGeneral_array_port::CopyFrom(const HMIGeneral_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIGeneral_array_port::IsInitialized() const {
  return true;
}

void HMIGeneral_array_port::InternalSwap(HMIGeneral_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIGeneral_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hmigeneral
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::hmigeneral::HMIGeneral* Arena::CreateMaybeMessage< ::pb::mf_hmih::hmigeneral::HMIGeneral >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::hmigeneral::HMIGeneral >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::hmigeneral::HMIGeneral_array_port* Arena::CreateMaybeMessage< ::pb::mf_hmih::hmigeneral::HMIGeneral_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::hmigeneral::HMIGeneral_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
