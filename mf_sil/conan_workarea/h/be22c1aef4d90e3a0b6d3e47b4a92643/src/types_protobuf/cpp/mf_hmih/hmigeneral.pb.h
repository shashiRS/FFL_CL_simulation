// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/hmigeneral.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fhmih_2fhmigeneral_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fhmih_2fhmigeneral_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ap_psm_app/remote_mode.pb.h"
#include "ap_psm_app/max_speed10_kphwarning.pb.h"
#include "ap_common/driving_direction.pb.h"
#include "ap_psm_app/garage_parking.pb.h"
#include "mf_hmih/avgtype.pb.h"
#include "ap_commonvehsigprovider/gear.pb.h"
#include "ap_psm_app/hmimessage.pb.h"
#include "ap_psm_app/ppcparking_mode.pb.h"
#include "ap_psm_app/apfinish_type.pb.h"
#include "mf_drvwarnsm/pdwsystem_state.pb.h"
#include "mf_lvmd/lvmdsystem_status.pb.h"
#include "mf_lvmd/lvmdwarning_trigger.pb.h"
#include "mf_drvwarnsm/pdwshutdown_cause.pb.h"
#include "mf_drvwarnsm/whpstate.pb.h"
#include "mf_hmih/blind_spot_view_status.pb.h"
#include "mf_hmih/slot_unreach_reason.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fhmigeneral_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fhmih_2fhmigeneral_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fhmigeneral_2eproto;
namespace pb {
namespace mf_hmih {
namespace hmigeneral {
class HMIGeneral;
class HMIGeneralDefaultTypeInternal;
extern HMIGeneralDefaultTypeInternal _HMIGeneral_default_instance_;
class HMIGeneral_array_port;
class HMIGeneral_array_portDefaultTypeInternal;
extern HMIGeneral_array_portDefaultTypeInternal _HMIGeneral_array_port_default_instance_;
}  // namespace hmigeneral
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_hmih::hmigeneral::HMIGeneral* Arena::CreateMaybeMessage<::pb::mf_hmih::hmigeneral::HMIGeneral>(Arena*);
template<> ::pb::mf_hmih::hmigeneral::HMIGeneral_array_port* Arena::CreateMaybeMessage<::pb::mf_hmih::hmigeneral::HMIGeneral_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_hmih {
namespace hmigeneral {

// ===================================================================

class HMIGeneral :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_hmih.hmigeneral.HMIGeneral) */ {
 public:
  HMIGeneral();
  virtual ~HMIGeneral();

  HMIGeneral(const HMIGeneral& from);
  HMIGeneral(HMIGeneral&& from) noexcept
    : HMIGeneral() {
    *this = ::std::move(from);
  }

  inline HMIGeneral& operator=(const HMIGeneral& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIGeneral& operator=(HMIGeneral&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIGeneral& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIGeneral* internal_default_instance() {
    return reinterpret_cast<const HMIGeneral*>(
               &_HMIGeneral_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HMIGeneral& a, HMIGeneral& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIGeneral* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIGeneral* New() const final {
    return CreateMaybeMessage<HMIGeneral>(nullptr);
  }

  HMIGeneral* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIGeneral>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIGeneral& from);
  void MergeFrom(const HMIGeneral& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIGeneral* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_hmih.hmigeneral.HMIGeneral";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fhmih_2fhmigeneral_2eproto);
    return ::descriptor_table_mf_5fhmih_2fhmigeneral_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlindSpotViewStatusNuFieldNumber = 4000,
    kMaxSpeed10KPHwarningNuFieldNumber = 553,
    kLvmdSystemStateNuFieldNumber = 648,
    kGarageParkingNuFieldNumber = 748,
    kFinishTypeNuFieldNumber = 804,
    kRemManPossNuFieldNumber = 643,
    kUndoPossNuFieldNumber = 587,
    kSvPossNuFieldNumber = 1740,
    kBtnForwardPossNuFieldNumber = 1679,
    kCurrentGearNuFieldNumber = 1196,
    kPpcParkingModeNuFieldNumber = 1343,
    kDistanceToStopPercFieldNumber = 1416,
    kMemorySlotsStatusNuFieldNumber = 1540,
    kAvgTypeNuFieldNumber = 1565,
    kPdcSystemStateNuFieldNumber = 1973,
    kAdjustmentButtonsNuFieldNumber = 1996,
    kDrivingDirectionNuFieldNumber = 2162,
    kWhpDisplayReqNuFieldNumber = 1542,
    kApSwitchInputDevicePossNuFieldNumber = 2225,
    kMemoryParkingPossNuFieldNumber = 1914,
    kDisplayBackButtonNuFieldNumber = 3610,
    kRemoteModeActiveNuFieldNumber = 2332,
    kBtnBackwardPossNuFieldNumber = 3388,
    kBtnFullyAutomParkingPossNuFieldNumber = 2369,
    kBtnSemiAutomParkingPossNuFieldNumber = 2070,
    kGarageOpenerAvailNuFieldNumber = 1668,
    kGeneralUserInformationNuFieldNumber = 2602,
    kLvmdWarningTypeNuFieldNumber = 2635,
    kSlotUnreachReasonNuFieldNumber = 2681,
    kWhpStateNuFieldNumber = 2786,
    kRemoteKeyPossNuFieldNumber = 3915,
    kContinuePossNuFieldNumber = 902,
    kParkInPossNuFieldNumber = 3886,
    kParkOutPossNuFieldNumber = 3717,
    kRemoteAppActiveNuFieldNumber = 2880,
    kRemoteAppAuthorizedNuFieldNumber = 4015,
    kRemoteAppCodedNuFieldNumber = 3316,
    kRemoteKeySelectedNuFieldNumber = 2272,
    kPdcShutdownCauseNuFieldNumber = 3210,
    kRedetectedPoseMemSlotIdNuFieldNumber = 3901,
  };
  // optional .pb.mf_hmih.blind_spot_view_status.BlindSpotViewStatus blindSpotViewStatus_nu = 4000;
  bool has_blindspotviewstatus_nu() const;
  private:
  bool _internal_has_blindspotviewstatus_nu() const;
  public:
  void clear_blindspotviewstatus_nu();
  ::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus blindspotviewstatus_nu() const;
  void set_blindspotviewstatus_nu(::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus value);
  private:
  ::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus _internal_blindspotviewstatus_nu() const;
  void _internal_set_blindspotviewstatus_nu(::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus value);
  public:

  // optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
  bool has_maxspeed10kphwarning_nu() const;
  private:
  bool _internal_has_maxspeed10kphwarning_nu() const;
  public:
  void clear_maxspeed10kphwarning_nu();
  ::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning maxspeed10kphwarning_nu() const;
  void set_maxspeed10kphwarning_nu(::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning value);
  private:
  ::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning _internal_maxspeed10kphwarning_nu() const;
  void _internal_set_maxspeed10kphwarning_nu(::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning value);
  public:

  // optional .pb.mf_lvmd.lvmdsystem_status.LVMDSystemStatus lvmdSystemState_nu = 648;
  bool has_lvmdsystemstate_nu() const;
  private:
  bool _internal_has_lvmdsystemstate_nu() const;
  public:
  void clear_lvmdsystemstate_nu();
  ::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus lvmdsystemstate_nu() const;
  void set_lvmdsystemstate_nu(::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus value);
  private:
  ::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus _internal_lvmdsystemstate_nu() const;
  void _internal_set_lvmdsystemstate_nu(::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus value);
  public:

  // optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
  bool has_garageparking_nu() const;
  private:
  bool _internal_has_garageparking_nu() const;
  public:
  void clear_garageparking_nu();
  ::pb::ap_psm_app::garage_parking::GarageParking garageparking_nu() const;
  void set_garageparking_nu(::pb::ap_psm_app::garage_parking::GarageParking value);
  private:
  ::pb::ap_psm_app::garage_parking::GarageParking _internal_garageparking_nu() const;
  void _internal_set_garageparking_nu(::pb::ap_psm_app::garage_parking::GarageParking value);
  public:

  // optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
  bool has_finishtype_nu() const;
  private:
  bool _internal_has_finishtype_nu() const;
  public:
  void clear_finishtype_nu();
  ::pb::ap_psm_app::apfinish_type::APFinishType finishtype_nu() const;
  void set_finishtype_nu(::pb::ap_psm_app::apfinish_type::APFinishType value);
  private:
  ::pb::ap_psm_app::apfinish_type::APFinishType _internal_finishtype_nu() const;
  void _internal_set_finishtype_nu(::pb::ap_psm_app::apfinish_type::APFinishType value);
  public:

  // optional bool remManPoss_nu = 643;
  bool has_remmanposs_nu() const;
  private:
  bool _internal_has_remmanposs_nu() const;
  public:
  void clear_remmanposs_nu();
  bool remmanposs_nu() const;
  void set_remmanposs_nu(bool value);
  private:
  bool _internal_remmanposs_nu() const;
  void _internal_set_remmanposs_nu(bool value);
  public:

  // optional bool undoPoss_nu = 587;
  bool has_undoposs_nu() const;
  private:
  bool _internal_has_undoposs_nu() const;
  public:
  void clear_undoposs_nu();
  bool undoposs_nu() const;
  void set_undoposs_nu(bool value);
  private:
  bool _internal_undoposs_nu() const;
  void _internal_set_undoposs_nu(bool value);
  public:

  // optional bool svPoss_nu = 1740;
  bool has_svposs_nu() const;
  private:
  bool _internal_has_svposs_nu() const;
  public:
  void clear_svposs_nu();
  bool svposs_nu() const;
  void set_svposs_nu(bool value);
  private:
  bool _internal_svposs_nu() const;
  void _internal_set_svposs_nu(bool value);
  public:

  // optional bool btnForwardPoss_nu = 1679;
  bool has_btnforwardposs_nu() const;
  private:
  bool _internal_has_btnforwardposs_nu() const;
  public:
  void clear_btnforwardposs_nu();
  bool btnforwardposs_nu() const;
  void set_btnforwardposs_nu(bool value);
  private:
  bool _internal_btnforwardposs_nu() const;
  void _internal_set_btnforwardposs_nu(bool value);
  public:

  // optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
  bool has_currentgear_nu() const;
  private:
  bool _internal_has_currentgear_nu() const;
  public:
  void clear_currentgear_nu();
  ::pb::ap_commonvehsigprovider::gear::Gear currentgear_nu() const;
  void set_currentgear_nu(::pb::ap_commonvehsigprovider::gear::Gear value);
  private:
  ::pb::ap_commonvehsigprovider::gear::Gear _internal_currentgear_nu() const;
  void _internal_set_currentgear_nu(::pb::ap_commonvehsigprovider::gear::Gear value);
  public:

  // optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
  bool has_ppcparkingmode_nu() const;
  private:
  bool _internal_has_ppcparkingmode_nu() const;
  public:
  void clear_ppcparkingmode_nu();
  ::pb::ap_psm_app::ppcparking_mode::PPCParkingMode ppcparkingmode_nu() const;
  void set_ppcparkingmode_nu(::pb::ap_psm_app::ppcparking_mode::PPCParkingMode value);
  private:
  ::pb::ap_psm_app::ppcparking_mode::PPCParkingMode _internal_ppcparkingmode_nu() const;
  void _internal_set_ppcparkingmode_nu(::pb::ap_psm_app::ppcparking_mode::PPCParkingMode value);
  public:

  // optional uint32 distanceToStop_perc = 1416;
  bool has_distancetostop_perc() const;
  private:
  bool _internal_has_distancetostop_perc() const;
  public:
  void clear_distancetostop_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetostop_perc() const;
  void set_distancetostop_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distancetostop_perc() const;
  void _internal_set_distancetostop_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 memorySlotsStatus_nu = 1540;
  bool has_memoryslotsstatus_nu() const;
  private:
  bool _internal_has_memoryslotsstatus_nu() const;
  public:
  void clear_memoryslotsstatus_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 memoryslotsstatus_nu() const;
  void set_memoryslotsstatus_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_memoryslotsstatus_nu() const;
  void _internal_set_memoryslotsstatus_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.mf_hmih.avgtype.AVGType avgType_nu = 1565;
  bool has_avgtype_nu() const;
  private:
  bool _internal_has_avgtype_nu() const;
  public:
  void clear_avgtype_nu();
  ::pb::mf_hmih::avgtype::AVGType avgtype_nu() const;
  void set_avgtype_nu(::pb::mf_hmih::avgtype::AVGType value);
  private:
  ::pb::mf_hmih::avgtype::AVGType _internal_avgtype_nu() const;
  void _internal_set_avgtype_nu(::pb::mf_hmih::avgtype::AVGType value);
  public:

  // optional .pb.mf_drvwarnsm.pdwsystem_state.PDWSystemState pdcSystemState_nu = 1973;
  bool has_pdcsystemstate_nu() const;
  private:
  bool _internal_has_pdcsystemstate_nu() const;
  public:
  void clear_pdcsystemstate_nu();
  ::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState pdcsystemstate_nu() const;
  void set_pdcsystemstate_nu(::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState value);
  private:
  ::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState _internal_pdcsystemstate_nu() const;
  void _internal_set_pdcsystemstate_nu(::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState value);
  public:

  // optional uint32 adjustmentButtons_nu = 1996;
  bool has_adjustmentbuttons_nu() const;
  private:
  bool _internal_has_adjustmentbuttons_nu() const;
  public:
  void clear_adjustmentbuttons_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 adjustmentbuttons_nu() const;
  void set_adjustmentbuttons_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adjustmentbuttons_nu() const;
  void _internal_set_adjustmentbuttons_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
  bool has_drivingdirection_nu() const;
  private:
  bool _internal_has_drivingdirection_nu() const;
  public:
  void clear_drivingdirection_nu();
  ::pb::ap_common::driving_direction::DrivingDirection drivingdirection_nu() const;
  void set_drivingdirection_nu(::pb::ap_common::driving_direction::DrivingDirection value);
  private:
  ::pb::ap_common::driving_direction::DrivingDirection _internal_drivingdirection_nu() const;
  void _internal_set_drivingdirection_nu(::pb::ap_common::driving_direction::DrivingDirection value);
  public:

  // optional bool whpDisplayReq_nu = 1542;
  bool has_whpdisplayreq_nu() const;
  private:
  bool _internal_has_whpdisplayreq_nu() const;
  public:
  void clear_whpdisplayreq_nu();
  bool whpdisplayreq_nu() const;
  void set_whpdisplayreq_nu(bool value);
  private:
  bool _internal_whpdisplayreq_nu() const;
  void _internal_set_whpdisplayreq_nu(bool value);
  public:

  // optional bool apSwitchInputDevicePoss_nu = 2225;
  bool has_apswitchinputdeviceposs_nu() const;
  private:
  bool _internal_has_apswitchinputdeviceposs_nu() const;
  public:
  void clear_apswitchinputdeviceposs_nu();
  bool apswitchinputdeviceposs_nu() const;
  void set_apswitchinputdeviceposs_nu(bool value);
  private:
  bool _internal_apswitchinputdeviceposs_nu() const;
  void _internal_set_apswitchinputdeviceposs_nu(bool value);
  public:

  // optional bool memoryParkingPoss_nu = 1914;
  bool has_memoryparkingposs_nu() const;
  private:
  bool _internal_has_memoryparkingposs_nu() const;
  public:
  void clear_memoryparkingposs_nu();
  bool memoryparkingposs_nu() const;
  void set_memoryparkingposs_nu(bool value);
  private:
  bool _internal_memoryparkingposs_nu() const;
  void _internal_set_memoryparkingposs_nu(bool value);
  public:

  // optional bool displayBackButton_nu = 3610;
  bool has_displaybackbutton_nu() const;
  private:
  bool _internal_has_displaybackbutton_nu() const;
  public:
  void clear_displaybackbutton_nu();
  bool displaybackbutton_nu() const;
  void set_displaybackbutton_nu(bool value);
  private:
  bool _internal_displaybackbutton_nu() const;
  void _internal_set_displaybackbutton_nu(bool value);
  public:

  // optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
  bool has_remotemodeactive_nu() const;
  private:
  bool _internal_has_remotemodeactive_nu() const;
  public:
  void clear_remotemodeactive_nu();
  ::pb::ap_psm_app::remote_mode::RemoteMode remotemodeactive_nu() const;
  void set_remotemodeactive_nu(::pb::ap_psm_app::remote_mode::RemoteMode value);
  private:
  ::pb::ap_psm_app::remote_mode::RemoteMode _internal_remotemodeactive_nu() const;
  void _internal_set_remotemodeactive_nu(::pb::ap_psm_app::remote_mode::RemoteMode value);
  public:

  // optional bool btnBackwardPoss_nu = 3388;
  bool has_btnbackwardposs_nu() const;
  private:
  bool _internal_has_btnbackwardposs_nu() const;
  public:
  void clear_btnbackwardposs_nu();
  bool btnbackwardposs_nu() const;
  void set_btnbackwardposs_nu(bool value);
  private:
  bool _internal_btnbackwardposs_nu() const;
  void _internal_set_btnbackwardposs_nu(bool value);
  public:

  // optional bool btnFullyAutomParkingPoss_nu = 2369;
  bool has_btnfullyautomparkingposs_nu() const;
  private:
  bool _internal_has_btnfullyautomparkingposs_nu() const;
  public:
  void clear_btnfullyautomparkingposs_nu();
  bool btnfullyautomparkingposs_nu() const;
  void set_btnfullyautomparkingposs_nu(bool value);
  private:
  bool _internal_btnfullyautomparkingposs_nu() const;
  void _internal_set_btnfullyautomparkingposs_nu(bool value);
  public:

  // optional bool btnSemiAutomParkingPoss_nu = 2070;
  bool has_btnsemiautomparkingposs_nu() const;
  private:
  bool _internal_has_btnsemiautomparkingposs_nu() const;
  public:
  void clear_btnsemiautomparkingposs_nu();
  bool btnsemiautomparkingposs_nu() const;
  void set_btnsemiautomparkingposs_nu(bool value);
  private:
  bool _internal_btnsemiautomparkingposs_nu() const;
  void _internal_set_btnsemiautomparkingposs_nu(bool value);
  public:

  // optional bool garageOpenerAvail_nu = 1668;
  bool has_garageopeneravail_nu() const;
  private:
  bool _internal_has_garageopeneravail_nu() const;
  public:
  void clear_garageopeneravail_nu();
  bool garageopeneravail_nu() const;
  void set_garageopeneravail_nu(bool value);
  private:
  bool _internal_garageopeneravail_nu() const;
  void _internal_set_garageopeneravail_nu(bool value);
  public:

  // optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
  bool has_generaluserinformation_nu() const;
  private:
  bool _internal_has_generaluserinformation_nu() const;
  public:
  void clear_generaluserinformation_nu();
  ::pb::ap_psm_app::hmimessage::HMIMessage generaluserinformation_nu() const;
  void set_generaluserinformation_nu(::pb::ap_psm_app::hmimessage::HMIMessage value);
  private:
  ::pb::ap_psm_app::hmimessage::HMIMessage _internal_generaluserinformation_nu() const;
  void _internal_set_generaluserinformation_nu(::pb::ap_psm_app::hmimessage::HMIMessage value);
  public:

  // optional .pb.mf_lvmd.lvmdwarning_trigger.LVMDWarningTrigger lvmdWarningType_nu = 2635;
  bool has_lvmdwarningtype_nu() const;
  private:
  bool _internal_has_lvmdwarningtype_nu() const;
  public:
  void clear_lvmdwarningtype_nu();
  ::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger lvmdwarningtype_nu() const;
  void set_lvmdwarningtype_nu(::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger value);
  private:
  ::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger _internal_lvmdwarningtype_nu() const;
  void _internal_set_lvmdwarningtype_nu(::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger value);
  public:

  // optional .pb.mf_hmih.slot_unreach_reason.SlotUnreachReason slotUnreachReason_nu = 2681;
  bool has_slotunreachreason_nu() const;
  private:
  bool _internal_has_slotunreachreason_nu() const;
  public:
  void clear_slotunreachreason_nu();
  ::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason slotunreachreason_nu() const;
  void set_slotunreachreason_nu(::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason value);
  private:
  ::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason _internal_slotunreachreason_nu() const;
  void _internal_set_slotunreachreason_nu(::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason value);
  public:

  // optional .pb.mf_drvwarnsm.whpstate.WHPState whpState_nu = 2786;
  bool has_whpstate_nu() const;
  private:
  bool _internal_has_whpstate_nu() const;
  public:
  void clear_whpstate_nu();
  ::pb::mf_drvwarnsm::whpstate::WHPState whpstate_nu() const;
  void set_whpstate_nu(::pb::mf_drvwarnsm::whpstate::WHPState value);
  private:
  ::pb::mf_drvwarnsm::whpstate::WHPState _internal_whpstate_nu() const;
  void _internal_set_whpstate_nu(::pb::mf_drvwarnsm::whpstate::WHPState value);
  public:

  // optional bool remoteKeyPoss_nu = 3915;
  bool has_remotekeyposs_nu() const;
  private:
  bool _internal_has_remotekeyposs_nu() const;
  public:
  void clear_remotekeyposs_nu();
  bool remotekeyposs_nu() const;
  void set_remotekeyposs_nu(bool value);
  private:
  bool _internal_remotekeyposs_nu() const;
  void _internal_set_remotekeyposs_nu(bool value);
  public:

  // optional bool continuePoss_nu = 902;
  bool has_continueposs_nu() const;
  private:
  bool _internal_has_continueposs_nu() const;
  public:
  void clear_continueposs_nu();
  bool continueposs_nu() const;
  void set_continueposs_nu(bool value);
  private:
  bool _internal_continueposs_nu() const;
  void _internal_set_continueposs_nu(bool value);
  public:

  // optional bool parkInPoss_nu = 3886;
  bool has_parkinposs_nu() const;
  private:
  bool _internal_has_parkinposs_nu() const;
  public:
  void clear_parkinposs_nu();
  bool parkinposs_nu() const;
  void set_parkinposs_nu(bool value);
  private:
  bool _internal_parkinposs_nu() const;
  void _internal_set_parkinposs_nu(bool value);
  public:

  // optional bool parkOutPoss_nu = 3717;
  bool has_parkoutposs_nu() const;
  private:
  bool _internal_has_parkoutposs_nu() const;
  public:
  void clear_parkoutposs_nu();
  bool parkoutposs_nu() const;
  void set_parkoutposs_nu(bool value);
  private:
  bool _internal_parkoutposs_nu() const;
  void _internal_set_parkoutposs_nu(bool value);
  public:

  // optional bool remoteAppActive_nu = 2880;
  bool has_remoteappactive_nu() const;
  private:
  bool _internal_has_remoteappactive_nu() const;
  public:
  void clear_remoteappactive_nu();
  bool remoteappactive_nu() const;
  void set_remoteappactive_nu(bool value);
  private:
  bool _internal_remoteappactive_nu() const;
  void _internal_set_remoteappactive_nu(bool value);
  public:

  // optional bool remoteAppAuthorized_nu = 4015;
  bool has_remoteappauthorized_nu() const;
  private:
  bool _internal_has_remoteappauthorized_nu() const;
  public:
  void clear_remoteappauthorized_nu();
  bool remoteappauthorized_nu() const;
  void set_remoteappauthorized_nu(bool value);
  private:
  bool _internal_remoteappauthorized_nu() const;
  void _internal_set_remoteappauthorized_nu(bool value);
  public:

  // optional bool remoteAppCoded_nu = 3316;
  bool has_remoteappcoded_nu() const;
  private:
  bool _internal_has_remoteappcoded_nu() const;
  public:
  void clear_remoteappcoded_nu();
  bool remoteappcoded_nu() const;
  void set_remoteappcoded_nu(bool value);
  private:
  bool _internal_remoteappcoded_nu() const;
  void _internal_set_remoteappcoded_nu(bool value);
  public:

  // optional bool remoteKeySelected_nu = 2272;
  bool has_remotekeyselected_nu() const;
  private:
  bool _internal_has_remotekeyselected_nu() const;
  public:
  void clear_remotekeyselected_nu();
  bool remotekeyselected_nu() const;
  void set_remotekeyselected_nu(bool value);
  private:
  bool _internal_remotekeyselected_nu() const;
  void _internal_set_remotekeyselected_nu(bool value);
  public:

  // optional .pb.mf_drvwarnsm.pdwshutdown_cause.PDWShutdownCause pdcShutdownCause_nu = 3210;
  bool has_pdcshutdowncause_nu() const;
  private:
  bool _internal_has_pdcshutdowncause_nu() const;
  public:
  void clear_pdcshutdowncause_nu();
  ::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause pdcshutdowncause_nu() const;
  void set_pdcshutdowncause_nu(::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause value);
  private:
  ::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause _internal_pdcshutdowncause_nu() const;
  void _internal_set_pdcshutdowncause_nu(::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause value);
  public:

  // optional uint32 redetectedPoseMemSlotId_nu = 3901;
  bool has_redetectedposememslotid_nu() const;
  private:
  bool _internal_has_redetectedposememslotid_nu() const;
  public:
  void clear_redetectedposememslotid_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 redetectedposememslotid_nu() const;
  void set_redetectedposememslotid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_redetectedposememslotid_nu() const;
  void _internal_set_redetectedposememslotid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_hmih.hmigeneral.HMIGeneral)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int blindspotviewstatus_nu_;
  int maxspeed10kphwarning_nu_;
  int lvmdsystemstate_nu_;
  int garageparking_nu_;
  int finishtype_nu_;
  bool remmanposs_nu_;
  bool undoposs_nu_;
  bool svposs_nu_;
  bool btnforwardposs_nu_;
  int currentgear_nu_;
  int ppcparkingmode_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetostop_perc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 memoryslotsstatus_nu_;
  int avgtype_nu_;
  int pdcsystemstate_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 adjustmentbuttons_nu_;
  int drivingdirection_nu_;
  bool whpdisplayreq_nu_;
  bool apswitchinputdeviceposs_nu_;
  bool memoryparkingposs_nu_;
  bool displaybackbutton_nu_;
  int remotemodeactive_nu_;
  bool btnbackwardposs_nu_;
  bool btnfullyautomparkingposs_nu_;
  bool btnsemiautomparkingposs_nu_;
  bool garageopeneravail_nu_;
  int generaluserinformation_nu_;
  int lvmdwarningtype_nu_;
  int slotunreachreason_nu_;
  int whpstate_nu_;
  bool remotekeyposs_nu_;
  bool continueposs_nu_;
  bool parkinposs_nu_;
  bool parkoutposs_nu_;
  bool remoteappactive_nu_;
  bool remoteappauthorized_nu_;
  bool remoteappcoded_nu_;
  bool remotekeyselected_nu_;
  int pdcshutdowncause_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 redetectedposememslotid_nu_;
  friend struct ::TableStruct_mf_5fhmih_2fhmigeneral_2eproto;
};
// -------------------------------------------------------------------

class HMIGeneral_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_hmih.hmigeneral.HMIGeneral_array_port) */ {
 public:
  HMIGeneral_array_port();
  virtual ~HMIGeneral_array_port();

  HMIGeneral_array_port(const HMIGeneral_array_port& from);
  HMIGeneral_array_port(HMIGeneral_array_port&& from) noexcept
    : HMIGeneral_array_port() {
    *this = ::std::move(from);
  }

  inline HMIGeneral_array_port& operator=(const HMIGeneral_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIGeneral_array_port& operator=(HMIGeneral_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIGeneral_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIGeneral_array_port* internal_default_instance() {
    return reinterpret_cast<const HMIGeneral_array_port*>(
               &_HMIGeneral_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HMIGeneral_array_port& a, HMIGeneral_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIGeneral_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIGeneral_array_port* New() const final {
    return CreateMaybeMessage<HMIGeneral_array_port>(nullptr);
  }

  HMIGeneral_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIGeneral_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIGeneral_array_port& from);
  void MergeFrom(const HMIGeneral_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIGeneral_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_hmih.hmigeneral.HMIGeneral_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fhmih_2fhmigeneral_2eproto);
    return ::descriptor_table_mf_5fhmih_2fhmigeneral_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2011,
  };
  // repeated .pb.mf_hmih.hmigeneral.HMIGeneral data = 2011;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_hmih::hmigeneral::HMIGeneral* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral::HMIGeneral >*
      mutable_data();
  private:
  const ::pb::mf_hmih::hmigeneral::HMIGeneral& _internal_data(int index) const;
  ::pb::mf_hmih::hmigeneral::HMIGeneral* _internal_add_data();
  public:
  const ::pb::mf_hmih::hmigeneral::HMIGeneral& data(int index) const;
  ::pb::mf_hmih::hmigeneral::HMIGeneral* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral::HMIGeneral >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_hmih.hmigeneral.HMIGeneral_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral::HMIGeneral > data_;
  friend struct ::TableStruct_mf_5fhmih_2fhmigeneral_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HMIGeneral

// optional .pb.ap_psm_app.remote_mode.RemoteMode remoteModeActive_nu = 2332;
inline bool HMIGeneral::_internal_has_remotemodeactive_nu() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool HMIGeneral::has_remotemodeactive_nu() const {
  return _internal_has_remotemodeactive_nu();
}
inline void HMIGeneral::clear_remotemodeactive_nu() {
  remotemodeactive_nu_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::pb::ap_psm_app::remote_mode::RemoteMode HMIGeneral::_internal_remotemodeactive_nu() const {
  return static_cast< ::pb::ap_psm_app::remote_mode::RemoteMode >(remotemodeactive_nu_);
}
inline ::pb::ap_psm_app::remote_mode::RemoteMode HMIGeneral::remotemodeactive_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.remoteModeActive_nu)
  return _internal_remotemodeactive_nu();
}
inline void HMIGeneral::_internal_set_remotemodeactive_nu(::pb::ap_psm_app::remote_mode::RemoteMode value) {
  assert(::pb::ap_psm_app::remote_mode::RemoteMode_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  remotemodeactive_nu_ = value;
}
inline void HMIGeneral::set_remotemodeactive_nu(::pb::ap_psm_app::remote_mode::RemoteMode value) {
  _internal_set_remotemodeactive_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.remoteModeActive_nu)
}

// optional bool remoteAppActive_nu = 2880;
inline bool HMIGeneral::_internal_has_remoteappactive_nu() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool HMIGeneral::has_remoteappactive_nu() const {
  return _internal_has_remoteappactive_nu();
}
inline void HMIGeneral::clear_remoteappactive_nu() {
  remoteappactive_nu_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool HMIGeneral::_internal_remoteappactive_nu() const {
  return remoteappactive_nu_;
}
inline bool HMIGeneral::remoteappactive_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.remoteAppActive_nu)
  return _internal_remoteappactive_nu();
}
inline void HMIGeneral::_internal_set_remoteappactive_nu(bool value) {
  _has_bits_[1] |= 0x00000004u;
  remoteappactive_nu_ = value;
}
inline void HMIGeneral::set_remoteappactive_nu(bool value) {
  _internal_set_remoteappactive_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.remoteAppActive_nu)
}

// optional bool remoteAppAuthorized_nu = 4015;
inline bool HMIGeneral::_internal_has_remoteappauthorized_nu() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool HMIGeneral::has_remoteappauthorized_nu() const {
  return _internal_has_remoteappauthorized_nu();
}
inline void HMIGeneral::clear_remoteappauthorized_nu() {
  remoteappauthorized_nu_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool HMIGeneral::_internal_remoteappauthorized_nu() const {
  return remoteappauthorized_nu_;
}
inline bool HMIGeneral::remoteappauthorized_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.remoteAppAuthorized_nu)
  return _internal_remoteappauthorized_nu();
}
inline void HMIGeneral::_internal_set_remoteappauthorized_nu(bool value) {
  _has_bits_[1] |= 0x00000008u;
  remoteappauthorized_nu_ = value;
}
inline void HMIGeneral::set_remoteappauthorized_nu(bool value) {
  _internal_set_remoteappauthorized_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.remoteAppAuthorized_nu)
}

// optional bool remoteAppCoded_nu = 3316;
inline bool HMIGeneral::_internal_has_remoteappcoded_nu() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool HMIGeneral::has_remoteappcoded_nu() const {
  return _internal_has_remoteappcoded_nu();
}
inline void HMIGeneral::clear_remoteappcoded_nu() {
  remoteappcoded_nu_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool HMIGeneral::_internal_remoteappcoded_nu() const {
  return remoteappcoded_nu_;
}
inline bool HMIGeneral::remoteappcoded_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.remoteAppCoded_nu)
  return _internal_remoteappcoded_nu();
}
inline void HMIGeneral::_internal_set_remoteappcoded_nu(bool value) {
  _has_bits_[1] |= 0x00000010u;
  remoteappcoded_nu_ = value;
}
inline void HMIGeneral::set_remoteappcoded_nu(bool value) {
  _internal_set_remoteappcoded_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.remoteAppCoded_nu)
}

// optional bool remoteKeySelected_nu = 2272;
inline bool HMIGeneral::_internal_has_remotekeyselected_nu() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool HMIGeneral::has_remotekeyselected_nu() const {
  return _internal_has_remotekeyselected_nu();
}
inline void HMIGeneral::clear_remotekeyselected_nu() {
  remotekeyselected_nu_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool HMIGeneral::_internal_remotekeyselected_nu() const {
  return remotekeyselected_nu_;
}
inline bool HMIGeneral::remotekeyselected_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.remoteKeySelected_nu)
  return _internal_remotekeyselected_nu();
}
inline void HMIGeneral::_internal_set_remotekeyselected_nu(bool value) {
  _has_bits_[1] |= 0x00000020u;
  remotekeyselected_nu_ = value;
}
inline void HMIGeneral::set_remotekeyselected_nu(bool value) {
  _internal_set_remotekeyselected_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.remoteKeySelected_nu)
}

// optional bool remoteKeyPoss_nu = 3915;
inline bool HMIGeneral::_internal_has_remotekeyposs_nu() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_remotekeyposs_nu() const {
  return _internal_has_remotekeyposs_nu();
}
inline void HMIGeneral::clear_remotekeyposs_nu() {
  remotekeyposs_nu_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool HMIGeneral::_internal_remotekeyposs_nu() const {
  return remotekeyposs_nu_;
}
inline bool HMIGeneral::remotekeyposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.remoteKeyPoss_nu)
  return _internal_remotekeyposs_nu();
}
inline void HMIGeneral::_internal_set_remotekeyposs_nu(bool value) {
  _has_bits_[0] |= 0x40000000u;
  remotekeyposs_nu_ = value;
}
inline void HMIGeneral::set_remotekeyposs_nu(bool value) {
  _internal_set_remotekeyposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.remoteKeyPoss_nu)
}

// optional bool continuePoss_nu = 902;
inline bool HMIGeneral::_internal_has_continueposs_nu() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_continueposs_nu() const {
  return _internal_has_continueposs_nu();
}
inline void HMIGeneral::clear_continueposs_nu() {
  continueposs_nu_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool HMIGeneral::_internal_continueposs_nu() const {
  return continueposs_nu_;
}
inline bool HMIGeneral::continueposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.continuePoss_nu)
  return _internal_continueposs_nu();
}
inline void HMIGeneral::_internal_set_continueposs_nu(bool value) {
  _has_bits_[0] |= 0x80000000u;
  continueposs_nu_ = value;
}
inline void HMIGeneral::set_continueposs_nu(bool value) {
  _internal_set_continueposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.continuePoss_nu)
}

// optional bool parkInPoss_nu = 3886;
inline bool HMIGeneral::_internal_has_parkinposs_nu() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool HMIGeneral::has_parkinposs_nu() const {
  return _internal_has_parkinposs_nu();
}
inline void HMIGeneral::clear_parkinposs_nu() {
  parkinposs_nu_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool HMIGeneral::_internal_parkinposs_nu() const {
  return parkinposs_nu_;
}
inline bool HMIGeneral::parkinposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.parkInPoss_nu)
  return _internal_parkinposs_nu();
}
inline void HMIGeneral::_internal_set_parkinposs_nu(bool value) {
  _has_bits_[1] |= 0x00000001u;
  parkinposs_nu_ = value;
}
inline void HMIGeneral::set_parkinposs_nu(bool value) {
  _internal_set_parkinposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.parkInPoss_nu)
}

// optional bool parkOutPoss_nu = 3717;
inline bool HMIGeneral::_internal_has_parkoutposs_nu() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool HMIGeneral::has_parkoutposs_nu() const {
  return _internal_has_parkoutposs_nu();
}
inline void HMIGeneral::clear_parkoutposs_nu() {
  parkoutposs_nu_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool HMIGeneral::_internal_parkoutposs_nu() const {
  return parkoutposs_nu_;
}
inline bool HMIGeneral::parkoutposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.parkOutPoss_nu)
  return _internal_parkoutposs_nu();
}
inline void HMIGeneral::_internal_set_parkoutposs_nu(bool value) {
  _has_bits_[1] |= 0x00000002u;
  parkoutposs_nu_ = value;
}
inline void HMIGeneral::set_parkoutposs_nu(bool value) {
  _internal_set_parkoutposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.parkOutPoss_nu)
}

// optional bool remManPoss_nu = 643;
inline bool HMIGeneral::_internal_has_remmanposs_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HMIGeneral::has_remmanposs_nu() const {
  return _internal_has_remmanposs_nu();
}
inline void HMIGeneral::clear_remmanposs_nu() {
  remmanposs_nu_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool HMIGeneral::_internal_remmanposs_nu() const {
  return remmanposs_nu_;
}
inline bool HMIGeneral::remmanposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.remManPoss_nu)
  return _internal_remmanposs_nu();
}
inline void HMIGeneral::_internal_set_remmanposs_nu(bool value) {
  _has_bits_[0] |= 0x00000020u;
  remmanposs_nu_ = value;
}
inline void HMIGeneral::set_remmanposs_nu(bool value) {
  _internal_set_remmanposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.remManPoss_nu)
}

// optional bool undoPoss_nu = 587;
inline bool HMIGeneral::_internal_has_undoposs_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HMIGeneral::has_undoposs_nu() const {
  return _internal_has_undoposs_nu();
}
inline void HMIGeneral::clear_undoposs_nu() {
  undoposs_nu_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool HMIGeneral::_internal_undoposs_nu() const {
  return undoposs_nu_;
}
inline bool HMIGeneral::undoposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.undoPoss_nu)
  return _internal_undoposs_nu();
}
inline void HMIGeneral::_internal_set_undoposs_nu(bool value) {
  _has_bits_[0] |= 0x00000040u;
  undoposs_nu_ = value;
}
inline void HMIGeneral::set_undoposs_nu(bool value) {
  _internal_set_undoposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.undoPoss_nu)
}

// optional bool svPoss_nu = 1740;
inline bool HMIGeneral::_internal_has_svposs_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HMIGeneral::has_svposs_nu() const {
  return _internal_has_svposs_nu();
}
inline void HMIGeneral::clear_svposs_nu() {
  svposs_nu_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool HMIGeneral::_internal_svposs_nu() const {
  return svposs_nu_;
}
inline bool HMIGeneral::svposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.svPoss_nu)
  return _internal_svposs_nu();
}
inline void HMIGeneral::_internal_set_svposs_nu(bool value) {
  _has_bits_[0] |= 0x00000080u;
  svposs_nu_ = value;
}
inline void HMIGeneral::set_svposs_nu(bool value) {
  _internal_set_svposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.svPoss_nu)
}

// optional bool btnForwardPoss_nu = 1679;
inline bool HMIGeneral::_internal_has_btnforwardposs_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HMIGeneral::has_btnforwardposs_nu() const {
  return _internal_has_btnforwardposs_nu();
}
inline void HMIGeneral::clear_btnforwardposs_nu() {
  btnforwardposs_nu_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool HMIGeneral::_internal_btnforwardposs_nu() const {
  return btnforwardposs_nu_;
}
inline bool HMIGeneral::btnforwardposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.btnForwardPoss_nu)
  return _internal_btnforwardposs_nu();
}
inline void HMIGeneral::_internal_set_btnforwardposs_nu(bool value) {
  _has_bits_[0] |= 0x00000100u;
  btnforwardposs_nu_ = value;
}
inline void HMIGeneral::set_btnforwardposs_nu(bool value) {
  _internal_set_btnforwardposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.btnForwardPoss_nu)
}

// optional bool btnBackwardPoss_nu = 3388;
inline bool HMIGeneral::_internal_has_btnbackwardposs_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool HMIGeneral::has_btnbackwardposs_nu() const {
  return _internal_has_btnbackwardposs_nu();
}
inline void HMIGeneral::clear_btnbackwardposs_nu() {
  btnbackwardposs_nu_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool HMIGeneral::_internal_btnbackwardposs_nu() const {
  return btnbackwardposs_nu_;
}
inline bool HMIGeneral::btnbackwardposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.btnBackwardPoss_nu)
  return _internal_btnbackwardposs_nu();
}
inline void HMIGeneral::_internal_set_btnbackwardposs_nu(bool value) {
  _has_bits_[0] |= 0x00400000u;
  btnbackwardposs_nu_ = value;
}
inline void HMIGeneral::set_btnbackwardposs_nu(bool value) {
  _internal_set_btnbackwardposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.btnBackwardPoss_nu)
}

// optional bool btnFullyAutomParkingPoss_nu = 2369;
inline bool HMIGeneral::_internal_has_btnfullyautomparkingposs_nu() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool HMIGeneral::has_btnfullyautomparkingposs_nu() const {
  return _internal_has_btnfullyautomparkingposs_nu();
}
inline void HMIGeneral::clear_btnfullyautomparkingposs_nu() {
  btnfullyautomparkingposs_nu_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool HMIGeneral::_internal_btnfullyautomparkingposs_nu() const {
  return btnfullyautomparkingposs_nu_;
}
inline bool HMIGeneral::btnfullyautomparkingposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.btnFullyAutomParkingPoss_nu)
  return _internal_btnfullyautomparkingposs_nu();
}
inline void HMIGeneral::_internal_set_btnfullyautomparkingposs_nu(bool value) {
  _has_bits_[0] |= 0x00800000u;
  btnfullyautomparkingposs_nu_ = value;
}
inline void HMIGeneral::set_btnfullyautomparkingposs_nu(bool value) {
  _internal_set_btnfullyautomparkingposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.btnFullyAutomParkingPoss_nu)
}

// optional bool btnSemiAutomParkingPoss_nu = 2070;
inline bool HMIGeneral::_internal_has_btnsemiautomparkingposs_nu() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_btnsemiautomparkingposs_nu() const {
  return _internal_has_btnsemiautomparkingposs_nu();
}
inline void HMIGeneral::clear_btnsemiautomparkingposs_nu() {
  btnsemiautomparkingposs_nu_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool HMIGeneral::_internal_btnsemiautomparkingposs_nu() const {
  return btnsemiautomparkingposs_nu_;
}
inline bool HMIGeneral::btnsemiautomparkingposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.btnSemiAutomParkingPoss_nu)
  return _internal_btnsemiautomparkingposs_nu();
}
inline void HMIGeneral::_internal_set_btnsemiautomparkingposs_nu(bool value) {
  _has_bits_[0] |= 0x01000000u;
  btnsemiautomparkingposs_nu_ = value;
}
inline void HMIGeneral::set_btnsemiautomparkingposs_nu(bool value) {
  _internal_set_btnsemiautomparkingposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.btnSemiAutomParkingPoss_nu)
}

// optional bool garageOpenerAvail_nu = 1668;
inline bool HMIGeneral::_internal_has_garageopeneravail_nu() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_garageopeneravail_nu() const {
  return _internal_has_garageopeneravail_nu();
}
inline void HMIGeneral::clear_garageopeneravail_nu() {
  garageopeneravail_nu_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool HMIGeneral::_internal_garageopeneravail_nu() const {
  return garageopeneravail_nu_;
}
inline bool HMIGeneral::garageopeneravail_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.garageOpenerAvail_nu)
  return _internal_garageopeneravail_nu();
}
inline void HMIGeneral::_internal_set_garageopeneravail_nu(bool value) {
  _has_bits_[0] |= 0x02000000u;
  garageopeneravail_nu_ = value;
}
inline void HMIGeneral::set_garageopeneravail_nu(bool value) {
  _internal_set_garageopeneravail_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.garageOpenerAvail_nu)
}

// optional uint32 distanceToStop_perc = 1416;
inline bool HMIGeneral::_internal_has_distancetostop_perc() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool HMIGeneral::has_distancetostop_perc() const {
  return _internal_has_distancetostop_perc();
}
inline void HMIGeneral::clear_distancetostop_perc() {
  distancetostop_perc_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::_internal_distancetostop_perc() const {
  return distancetostop_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::distancetostop_perc() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.distanceToStop_perc)
  return _internal_distancetostop_perc();
}
inline void HMIGeneral::_internal_set_distancetostop_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  distancetostop_perc_ = value;
}
inline void HMIGeneral::set_distancetostop_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_distancetostop_perc(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.distanceToStop_perc)
}

// optional .pb.ap_psm_app.max_speed10_kphwarning.MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu = 553;
inline bool HMIGeneral::_internal_has_maxspeed10kphwarning_nu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HMIGeneral::has_maxspeed10kphwarning_nu() const {
  return _internal_has_maxspeed10kphwarning_nu();
}
inline void HMIGeneral::clear_maxspeed10kphwarning_nu() {
  maxspeed10kphwarning_nu_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning HMIGeneral::_internal_maxspeed10kphwarning_nu() const {
  return static_cast< ::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning >(maxspeed10kphwarning_nu_);
}
inline ::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning HMIGeneral::maxspeed10kphwarning_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.maxSpeed10KPHwarning_nu)
  return _internal_maxspeed10kphwarning_nu();
}
inline void HMIGeneral::_internal_set_maxspeed10kphwarning_nu(::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning value) {
  assert(::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  maxspeed10kphwarning_nu_ = value;
}
inline void HMIGeneral::set_maxspeed10kphwarning_nu(::pb::ap_psm_app::max_speed10_kphwarning::MaxSpeed10KPHwarning value) {
  _internal_set_maxspeed10kphwarning_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.maxSpeed10KPHwarning_nu)
}

// optional .pb.ap_common.driving_direction.DrivingDirection drivingDirection_nu = 2162;
inline bool HMIGeneral::_internal_has_drivingdirection_nu() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool HMIGeneral::has_drivingdirection_nu() const {
  return _internal_has_drivingdirection_nu();
}
inline void HMIGeneral::clear_drivingdirection_nu() {
  drivingdirection_nu_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::pb::ap_common::driving_direction::DrivingDirection HMIGeneral::_internal_drivingdirection_nu() const {
  return static_cast< ::pb::ap_common::driving_direction::DrivingDirection >(drivingdirection_nu_);
}
inline ::pb::ap_common::driving_direction::DrivingDirection HMIGeneral::drivingdirection_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.drivingDirection_nu)
  return _internal_drivingdirection_nu();
}
inline void HMIGeneral::_internal_set_drivingdirection_nu(::pb::ap_common::driving_direction::DrivingDirection value) {
  assert(::pb::ap_common::driving_direction::DrivingDirection_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  drivingdirection_nu_ = value;
}
inline void HMIGeneral::set_drivingdirection_nu(::pb::ap_common::driving_direction::DrivingDirection value) {
  _internal_set_drivingdirection_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.drivingDirection_nu)
}

// optional .pb.ap_psm_app.garage_parking.GarageParking garageParking_nu = 748;
inline bool HMIGeneral::_internal_has_garageparking_nu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HMIGeneral::has_garageparking_nu() const {
  return _internal_has_garageparking_nu();
}
inline void HMIGeneral::clear_garageparking_nu() {
  garageparking_nu_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::ap_psm_app::garage_parking::GarageParking HMIGeneral::_internal_garageparking_nu() const {
  return static_cast< ::pb::ap_psm_app::garage_parking::GarageParking >(garageparking_nu_);
}
inline ::pb::ap_psm_app::garage_parking::GarageParking HMIGeneral::garageparking_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.garageParking_nu)
  return _internal_garageparking_nu();
}
inline void HMIGeneral::_internal_set_garageparking_nu(::pb::ap_psm_app::garage_parking::GarageParking value) {
  assert(::pb::ap_psm_app::garage_parking::GarageParking_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  garageparking_nu_ = value;
}
inline void HMIGeneral::set_garageparking_nu(::pb::ap_psm_app::garage_parking::GarageParking value) {
  _internal_set_garageparking_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.garageParking_nu)
}

// optional .pb.mf_hmih.avgtype.AVGType avgType_nu = 1565;
inline bool HMIGeneral::_internal_has_avgtype_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool HMIGeneral::has_avgtype_nu() const {
  return _internal_has_avgtype_nu();
}
inline void HMIGeneral::clear_avgtype_nu() {
  avgtype_nu_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::pb::mf_hmih::avgtype::AVGType HMIGeneral::_internal_avgtype_nu() const {
  return static_cast< ::pb::mf_hmih::avgtype::AVGType >(avgtype_nu_);
}
inline ::pb::mf_hmih::avgtype::AVGType HMIGeneral::avgtype_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.avgType_nu)
  return _internal_avgtype_nu();
}
inline void HMIGeneral::_internal_set_avgtype_nu(::pb::mf_hmih::avgtype::AVGType value) {
  assert(::pb::mf_hmih::avgtype::AVGType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  avgtype_nu_ = value;
}
inline void HMIGeneral::set_avgtype_nu(::pb::mf_hmih::avgtype::AVGType value) {
  _internal_set_avgtype_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.avgType_nu)
}

// optional .pb.ap_commonvehsigprovider.gear.Gear currentGear_nu = 1196;
inline bool HMIGeneral::_internal_has_currentgear_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool HMIGeneral::has_currentgear_nu() const {
  return _internal_has_currentgear_nu();
}
inline void HMIGeneral::clear_currentgear_nu() {
  currentgear_nu_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::ap_commonvehsigprovider::gear::Gear HMIGeneral::_internal_currentgear_nu() const {
  return static_cast< ::pb::ap_commonvehsigprovider::gear::Gear >(currentgear_nu_);
}
inline ::pb::ap_commonvehsigprovider::gear::Gear HMIGeneral::currentgear_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.currentGear_nu)
  return _internal_currentgear_nu();
}
inline void HMIGeneral::_internal_set_currentgear_nu(::pb::ap_commonvehsigprovider::gear::Gear value) {
  assert(::pb::ap_commonvehsigprovider::gear::Gear_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  currentgear_nu_ = value;
}
inline void HMIGeneral::set_currentgear_nu(::pb::ap_commonvehsigprovider::gear::Gear value) {
  _internal_set_currentgear_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.currentGear_nu)
}

// optional .pb.ap_psm_app.hmimessage.HMIMessage generalUserInformation_nu = 2602;
inline bool HMIGeneral::_internal_has_generaluserinformation_nu() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_generaluserinformation_nu() const {
  return _internal_has_generaluserinformation_nu();
}
inline void HMIGeneral::clear_generaluserinformation_nu() {
  generaluserinformation_nu_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::pb::ap_psm_app::hmimessage::HMIMessage HMIGeneral::_internal_generaluserinformation_nu() const {
  return static_cast< ::pb::ap_psm_app::hmimessage::HMIMessage >(generaluserinformation_nu_);
}
inline ::pb::ap_psm_app::hmimessage::HMIMessage HMIGeneral::generaluserinformation_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.generalUserInformation_nu)
  return _internal_generaluserinformation_nu();
}
inline void HMIGeneral::_internal_set_generaluserinformation_nu(::pb::ap_psm_app::hmimessage::HMIMessage value) {
  assert(::pb::ap_psm_app::hmimessage::HMIMessage_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  generaluserinformation_nu_ = value;
}
inline void HMIGeneral::set_generaluserinformation_nu(::pb::ap_psm_app::hmimessage::HMIMessage value) {
  _internal_set_generaluserinformation_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.generalUserInformation_nu)
}

// optional .pb.ap_psm_app.ppcparking_mode.PPCParkingMode ppcParkingMode_nu = 1343;
inline bool HMIGeneral::_internal_has_ppcparkingmode_nu() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool HMIGeneral::has_ppcparkingmode_nu() const {
  return _internal_has_ppcparkingmode_nu();
}
inline void HMIGeneral::clear_ppcparkingmode_nu() {
  ppcparkingmode_nu_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::pb::ap_psm_app::ppcparking_mode::PPCParkingMode HMIGeneral::_internal_ppcparkingmode_nu() const {
  return static_cast< ::pb::ap_psm_app::ppcparking_mode::PPCParkingMode >(ppcparkingmode_nu_);
}
inline ::pb::ap_psm_app::ppcparking_mode::PPCParkingMode HMIGeneral::ppcparkingmode_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.ppcParkingMode_nu)
  return _internal_ppcparkingmode_nu();
}
inline void HMIGeneral::_internal_set_ppcparkingmode_nu(::pb::ap_psm_app::ppcparking_mode::PPCParkingMode value) {
  assert(::pb::ap_psm_app::ppcparking_mode::PPCParkingMode_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  ppcparkingmode_nu_ = value;
}
inline void HMIGeneral::set_ppcparkingmode_nu(::pb::ap_psm_app::ppcparking_mode::PPCParkingMode value) {
  _internal_set_ppcparkingmode_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.ppcParkingMode_nu)
}

// optional .pb.ap_psm_app.apfinish_type.APFinishType finishType_nu = 804;
inline bool HMIGeneral::_internal_has_finishtype_nu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HMIGeneral::has_finishtype_nu() const {
  return _internal_has_finishtype_nu();
}
inline void HMIGeneral::clear_finishtype_nu() {
  finishtype_nu_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::ap_psm_app::apfinish_type::APFinishType HMIGeneral::_internal_finishtype_nu() const {
  return static_cast< ::pb::ap_psm_app::apfinish_type::APFinishType >(finishtype_nu_);
}
inline ::pb::ap_psm_app::apfinish_type::APFinishType HMIGeneral::finishtype_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.finishType_nu)
  return _internal_finishtype_nu();
}
inline void HMIGeneral::_internal_set_finishtype_nu(::pb::ap_psm_app::apfinish_type::APFinishType value) {
  assert(::pb::ap_psm_app::apfinish_type::APFinishType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  finishtype_nu_ = value;
}
inline void HMIGeneral::set_finishtype_nu(::pb::ap_psm_app::apfinish_type::APFinishType value) {
  _internal_set_finishtype_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.finishType_nu)
}

// optional .pb.mf_drvwarnsm.pdwsystem_state.PDWSystemState pdcSystemState_nu = 1973;
inline bool HMIGeneral::_internal_has_pdcsystemstate_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool HMIGeneral::has_pdcsystemstate_nu() const {
  return _internal_has_pdcsystemstate_nu();
}
inline void HMIGeneral::clear_pdcsystemstate_nu() {
  pdcsystemstate_nu_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState HMIGeneral::_internal_pdcsystemstate_nu() const {
  return static_cast< ::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState >(pdcsystemstate_nu_);
}
inline ::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState HMIGeneral::pdcsystemstate_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.pdcSystemState_nu)
  return _internal_pdcsystemstate_nu();
}
inline void HMIGeneral::_internal_set_pdcsystemstate_nu(::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState value) {
  assert(::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  pdcsystemstate_nu_ = value;
}
inline void HMIGeneral::set_pdcsystemstate_nu(::pb::mf_drvwarnsm::pdwsystem_state::PDWSystemState value) {
  _internal_set_pdcsystemstate_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.pdcSystemState_nu)
}

// optional .pb.mf_lvmd.lvmdsystem_status.LVMDSystemStatus lvmdSystemState_nu = 648;
inline bool HMIGeneral::_internal_has_lvmdsystemstate_nu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HMIGeneral::has_lvmdsystemstate_nu() const {
  return _internal_has_lvmdsystemstate_nu();
}
inline void HMIGeneral::clear_lvmdsystemstate_nu() {
  lvmdsystemstate_nu_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus HMIGeneral::_internal_lvmdsystemstate_nu() const {
  return static_cast< ::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus >(lvmdsystemstate_nu_);
}
inline ::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus HMIGeneral::lvmdsystemstate_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.lvmdSystemState_nu)
  return _internal_lvmdsystemstate_nu();
}
inline void HMIGeneral::_internal_set_lvmdsystemstate_nu(::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus value) {
  assert(::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  lvmdsystemstate_nu_ = value;
}
inline void HMIGeneral::set_lvmdsystemstate_nu(::pb::mf_lvmd::lvmdsystem_status::LVMDSystemStatus value) {
  _internal_set_lvmdsystemstate_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.lvmdSystemState_nu)
}

// optional .pb.mf_lvmd.lvmdwarning_trigger.LVMDWarningTrigger lvmdWarningType_nu = 2635;
inline bool HMIGeneral::_internal_has_lvmdwarningtype_nu() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_lvmdwarningtype_nu() const {
  return _internal_has_lvmdwarningtype_nu();
}
inline void HMIGeneral::clear_lvmdwarningtype_nu() {
  lvmdwarningtype_nu_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger HMIGeneral::_internal_lvmdwarningtype_nu() const {
  return static_cast< ::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger >(lvmdwarningtype_nu_);
}
inline ::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger HMIGeneral::lvmdwarningtype_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.lvmdWarningType_nu)
  return _internal_lvmdwarningtype_nu();
}
inline void HMIGeneral::_internal_set_lvmdwarningtype_nu(::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger value) {
  assert(::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  lvmdwarningtype_nu_ = value;
}
inline void HMIGeneral::set_lvmdwarningtype_nu(::pb::mf_lvmd::lvmdwarning_trigger::LVMDWarningTrigger value) {
  _internal_set_lvmdwarningtype_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.lvmdWarningType_nu)
}

// optional .pb.mf_drvwarnsm.pdwshutdown_cause.PDWShutdownCause pdcShutdownCause_nu = 3210;
inline bool HMIGeneral::_internal_has_pdcshutdowncause_nu() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool HMIGeneral::has_pdcshutdowncause_nu() const {
  return _internal_has_pdcshutdowncause_nu();
}
inline void HMIGeneral::clear_pdcshutdowncause_nu() {
  pdcshutdowncause_nu_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause HMIGeneral::_internal_pdcshutdowncause_nu() const {
  return static_cast< ::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause >(pdcshutdowncause_nu_);
}
inline ::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause HMIGeneral::pdcshutdowncause_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.pdcShutdownCause_nu)
  return _internal_pdcshutdowncause_nu();
}
inline void HMIGeneral::_internal_set_pdcshutdowncause_nu(::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause value) {
  assert(::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause_IsValid(value));
  _has_bits_[1] |= 0x00000040u;
  pdcshutdowncause_nu_ = value;
}
inline void HMIGeneral::set_pdcshutdowncause_nu(::pb::mf_drvwarnsm::pdwshutdown_cause::PDWShutdownCause value) {
  _internal_set_pdcshutdowncause_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.pdcShutdownCause_nu)
}

// optional .pb.mf_drvwarnsm.whpstate.WHPState whpState_nu = 2786;
inline bool HMIGeneral::_internal_has_whpstate_nu() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_whpstate_nu() const {
  return _internal_has_whpstate_nu();
}
inline void HMIGeneral::clear_whpstate_nu() {
  whpstate_nu_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::pb::mf_drvwarnsm::whpstate::WHPState HMIGeneral::_internal_whpstate_nu() const {
  return static_cast< ::pb::mf_drvwarnsm::whpstate::WHPState >(whpstate_nu_);
}
inline ::pb::mf_drvwarnsm::whpstate::WHPState HMIGeneral::whpstate_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.whpState_nu)
  return _internal_whpstate_nu();
}
inline void HMIGeneral::_internal_set_whpstate_nu(::pb::mf_drvwarnsm::whpstate::WHPState value) {
  assert(::pb::mf_drvwarnsm::whpstate::WHPState_IsValid(value));
  _has_bits_[0] |= 0x20000000u;
  whpstate_nu_ = value;
}
inline void HMIGeneral::set_whpstate_nu(::pb::mf_drvwarnsm::whpstate::WHPState value) {
  _internal_set_whpstate_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.whpState_nu)
}

// optional bool whpDisplayReq_nu = 1542;
inline bool HMIGeneral::_internal_has_whpdisplayreq_nu() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool HMIGeneral::has_whpdisplayreq_nu() const {
  return _internal_has_whpdisplayreq_nu();
}
inline void HMIGeneral::clear_whpdisplayreq_nu() {
  whpdisplayreq_nu_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool HMIGeneral::_internal_whpdisplayreq_nu() const {
  return whpdisplayreq_nu_;
}
inline bool HMIGeneral::whpdisplayreq_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.whpDisplayReq_nu)
  return _internal_whpdisplayreq_nu();
}
inline void HMIGeneral::_internal_set_whpdisplayreq_nu(bool value) {
  _has_bits_[0] |= 0x00020000u;
  whpdisplayreq_nu_ = value;
}
inline void HMIGeneral::set_whpdisplayreq_nu(bool value) {
  _internal_set_whpdisplayreq_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.whpDisplayReq_nu)
}

// optional bool apSwitchInputDevicePoss_nu = 2225;
inline bool HMIGeneral::_internal_has_apswitchinputdeviceposs_nu() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool HMIGeneral::has_apswitchinputdeviceposs_nu() const {
  return _internal_has_apswitchinputdeviceposs_nu();
}
inline void HMIGeneral::clear_apswitchinputdeviceposs_nu() {
  apswitchinputdeviceposs_nu_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool HMIGeneral::_internal_apswitchinputdeviceposs_nu() const {
  return apswitchinputdeviceposs_nu_;
}
inline bool HMIGeneral::apswitchinputdeviceposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.apSwitchInputDevicePoss_nu)
  return _internal_apswitchinputdeviceposs_nu();
}
inline void HMIGeneral::_internal_set_apswitchinputdeviceposs_nu(bool value) {
  _has_bits_[0] |= 0x00040000u;
  apswitchinputdeviceposs_nu_ = value;
}
inline void HMIGeneral::set_apswitchinputdeviceposs_nu(bool value) {
  _internal_set_apswitchinputdeviceposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.apSwitchInputDevicePoss_nu)
}

// optional bool memoryParkingPoss_nu = 1914;
inline bool HMIGeneral::_internal_has_memoryparkingposs_nu() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool HMIGeneral::has_memoryparkingposs_nu() const {
  return _internal_has_memoryparkingposs_nu();
}
inline void HMIGeneral::clear_memoryparkingposs_nu() {
  memoryparkingposs_nu_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool HMIGeneral::_internal_memoryparkingposs_nu() const {
  return memoryparkingposs_nu_;
}
inline bool HMIGeneral::memoryparkingposs_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.memoryParkingPoss_nu)
  return _internal_memoryparkingposs_nu();
}
inline void HMIGeneral::_internal_set_memoryparkingposs_nu(bool value) {
  _has_bits_[0] |= 0x00080000u;
  memoryparkingposs_nu_ = value;
}
inline void HMIGeneral::set_memoryparkingposs_nu(bool value) {
  _internal_set_memoryparkingposs_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.memoryParkingPoss_nu)
}

// optional bool displayBackButton_nu = 3610;
inline bool HMIGeneral::_internal_has_displaybackbutton_nu() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool HMIGeneral::has_displaybackbutton_nu() const {
  return _internal_has_displaybackbutton_nu();
}
inline void HMIGeneral::clear_displaybackbutton_nu() {
  displaybackbutton_nu_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool HMIGeneral::_internal_displaybackbutton_nu() const {
  return displaybackbutton_nu_;
}
inline bool HMIGeneral::displaybackbutton_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.displayBackButton_nu)
  return _internal_displaybackbutton_nu();
}
inline void HMIGeneral::_internal_set_displaybackbutton_nu(bool value) {
  _has_bits_[0] |= 0x00100000u;
  displaybackbutton_nu_ = value;
}
inline void HMIGeneral::set_displaybackbutton_nu(bool value) {
  _internal_set_displaybackbutton_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.displayBackButton_nu)
}

// optional .pb.mf_hmih.blind_spot_view_status.BlindSpotViewStatus blindSpotViewStatus_nu = 4000;
inline bool HMIGeneral::_internal_has_blindspotviewstatus_nu() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HMIGeneral::has_blindspotviewstatus_nu() const {
  return _internal_has_blindspotviewstatus_nu();
}
inline void HMIGeneral::clear_blindspotviewstatus_nu() {
  blindspotviewstatus_nu_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus HMIGeneral::_internal_blindspotviewstatus_nu() const {
  return static_cast< ::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus >(blindspotviewstatus_nu_);
}
inline ::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus HMIGeneral::blindspotviewstatus_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.blindSpotViewStatus_nu)
  return _internal_blindspotviewstatus_nu();
}
inline void HMIGeneral::_internal_set_blindspotviewstatus_nu(::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus value) {
  assert(::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  blindspotviewstatus_nu_ = value;
}
inline void HMIGeneral::set_blindspotviewstatus_nu(::pb::mf_hmih::blind_spot_view_status::BlindSpotViewStatus value) {
  _internal_set_blindspotviewstatus_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.blindSpotViewStatus_nu)
}

// optional .pb.mf_hmih.slot_unreach_reason.SlotUnreachReason slotUnreachReason_nu = 2681;
inline bool HMIGeneral::_internal_has_slotunreachreason_nu() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool HMIGeneral::has_slotunreachreason_nu() const {
  return _internal_has_slotunreachreason_nu();
}
inline void HMIGeneral::clear_slotunreachreason_nu() {
  slotunreachreason_nu_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason HMIGeneral::_internal_slotunreachreason_nu() const {
  return static_cast< ::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason >(slotunreachreason_nu_);
}
inline ::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason HMIGeneral::slotunreachreason_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.slotUnreachReason_nu)
  return _internal_slotunreachreason_nu();
}
inline void HMIGeneral::_internal_set_slotunreachreason_nu(::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason value) {
  assert(::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason_IsValid(value));
  _has_bits_[0] |= 0x10000000u;
  slotunreachreason_nu_ = value;
}
inline void HMIGeneral::set_slotunreachreason_nu(::pb::mf_hmih::slot_unreach_reason::SlotUnreachReason value) {
  _internal_set_slotunreachreason_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.slotUnreachReason_nu)
}

// optional uint32 memorySlotsStatus_nu = 1540;
inline bool HMIGeneral::_internal_has_memoryslotsstatus_nu() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool HMIGeneral::has_memoryslotsstatus_nu() const {
  return _internal_has_memoryslotsstatus_nu();
}
inline void HMIGeneral::clear_memoryslotsstatus_nu() {
  memoryslotsstatus_nu_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::_internal_memoryslotsstatus_nu() const {
  return memoryslotsstatus_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::memoryslotsstatus_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.memorySlotsStatus_nu)
  return _internal_memoryslotsstatus_nu();
}
inline void HMIGeneral::_internal_set_memoryslotsstatus_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  memoryslotsstatus_nu_ = value;
}
inline void HMIGeneral::set_memoryslotsstatus_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_memoryslotsstatus_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.memorySlotsStatus_nu)
}

// optional uint32 redetectedPoseMemSlotId_nu = 3901;
inline bool HMIGeneral::_internal_has_redetectedposememslotid_nu() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool HMIGeneral::has_redetectedposememslotid_nu() const {
  return _internal_has_redetectedposememslotid_nu();
}
inline void HMIGeneral::clear_redetectedposememslotid_nu() {
  redetectedposememslotid_nu_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::_internal_redetectedposememslotid_nu() const {
  return redetectedposememslotid_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::redetectedposememslotid_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.redetectedPoseMemSlotId_nu)
  return _internal_redetectedposememslotid_nu();
}
inline void HMIGeneral::_internal_set_redetectedposememslotid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  redetectedposememslotid_nu_ = value;
}
inline void HMIGeneral::set_redetectedposememslotid_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_redetectedposememslotid_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.redetectedPoseMemSlotId_nu)
}

// optional uint32 adjustmentButtons_nu = 1996;
inline bool HMIGeneral::_internal_has_adjustmentbuttons_nu() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool HMIGeneral::has_adjustmentbuttons_nu() const {
  return _internal_has_adjustmentbuttons_nu();
}
inline void HMIGeneral::clear_adjustmentbuttons_nu() {
  adjustmentbuttons_nu_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::_internal_adjustmentbuttons_nu() const {
  return adjustmentbuttons_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneral::adjustmentbuttons_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral.adjustmentButtons_nu)
  return _internal_adjustmentbuttons_nu();
}
inline void HMIGeneral::_internal_set_adjustmentbuttons_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  adjustmentbuttons_nu_ = value;
}
inline void HMIGeneral::set_adjustmentbuttons_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_adjustmentbuttons_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral.HMIGeneral.adjustmentButtons_nu)
}

// -------------------------------------------------------------------

// HMIGeneral_array_port

// repeated .pb.mf_hmih.hmigeneral.HMIGeneral data = 2011;
inline int HMIGeneral_array_port::_internal_data_size() const {
  return data_.size();
}
inline int HMIGeneral_array_port::data_size() const {
  return _internal_data_size();
}
inline void HMIGeneral_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_hmih::hmigeneral::HMIGeneral* HMIGeneral_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral.HMIGeneral_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral::HMIGeneral >*
HMIGeneral_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_hmih.hmigeneral.HMIGeneral_array_port.data)
  return &data_;
}
inline const ::pb::mf_hmih::hmigeneral::HMIGeneral& HMIGeneral_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_hmih::hmigeneral::HMIGeneral& HMIGeneral_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral.HMIGeneral_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_hmih::hmigeneral::HMIGeneral* HMIGeneral_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_hmih::hmigeneral::HMIGeneral* HMIGeneral_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_hmih.hmigeneral.HMIGeneral_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral::HMIGeneral >&
HMIGeneral_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_hmih.hmigeneral.HMIGeneral_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hmigeneral
}  // namespace mf_hmih
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fhmih_2fhmigeneral_2eproto
