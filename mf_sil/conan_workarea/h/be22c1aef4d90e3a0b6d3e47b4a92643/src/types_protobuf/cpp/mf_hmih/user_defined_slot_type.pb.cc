// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/user_defined_slot_type.proto

#include "mf_hmih/user_defined_slot_type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace mf_hmih {
namespace user_defined_slot_type {
}  // namespace user_defined_slot_type
}  // namespace mf_hmih
}  // namespace pb
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$mf_hmih/user_defined_slot_type.proto\022!"
  "pb.mf_hmih.user_defined_slot_type*\274\001\n\023Us"
  "erDefinedSlotType\022\035\n\031USER_DEF_TYPE_CURRE"
  "NT_EGO\020\000\022\025\n\021USER_DEF_TYPE_PAR\020\001\022\032\n\026USER_"
  "DEF_TYPE_PERP_BWD\020\002\022\032\n\026USER_DEF_TYPE_PER"
  "P_FWD\020\003\022\032\n\026USER_DEF_TYPE_ANGL_BWD\020\004\022\033\n\027U"
  "SER_DEF_TYPE_NOT_VALID\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_once;
static bool descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto = {
  &descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_initialized, descriptor_table_protodef_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto, "mf_hmih/user_defined_slot_type.proto", 264,
  &descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_once, descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_sccs, descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto::offsets,
  file_level_metadata_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto, 0, file_level_enum_descriptors_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto, file_level_service_descriptors_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto), true);
namespace pb {
namespace mf_hmih {
namespace user_defined_slot_type {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDefinedSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto);
  return file_level_enum_descriptors_mf_5fhmih_2fuser_5fdefined_5fslot_5ftype_2eproto[0];
}
bool UserDefinedSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace user_defined_slot_type
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
