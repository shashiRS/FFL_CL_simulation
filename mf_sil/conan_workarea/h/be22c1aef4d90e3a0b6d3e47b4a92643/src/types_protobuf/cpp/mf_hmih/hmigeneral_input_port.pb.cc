// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/hmigeneral_input_port.proto

#include "mf_hmih/hmigeneral_input_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2freverse_5fassist_5favailability_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReverseAssistAvailabilityPort_ap_5ftp_2freverse_5fassist_5favailability_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fdriving_5ftube_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrivingTube_mf_5fhmih_2fdriving_5ftube_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fgeneral_5fwarnings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralWarnings_mf_5fhmih_2fgeneral_5fwarnings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fhmigeneral_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2flsca_5fwarnings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LscaWarnings_mf_5fhmih_2flsca_5fwarnings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fmemory_5fparking_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryParkingInfo_mf_5fhmih_2fmemory_5fparking_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fparking_5fsituation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingSituation_mf_5fhmih_2fparking_5fsituation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fparking_5fspaces_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingSpaces_mf_5fhmih_2fparking_5fspaces_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fpdcsectors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PDCSectors_mf_5fhmih_2fpdcsectors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fwheel_5fwarnings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WheelWarnings_mf_5fhmih_2fwheel_5fwarnings_2eproto;
namespace pb {
namespace mf_hmih {
namespace hmigeneral_input_port {
class HMIGeneralInputPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIGeneralInputPort> _instance;
} _HMIGeneralInputPort_default_instance_;
class HMIGeneralInputPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIGeneralInputPort_array_port> _instance;
} _HMIGeneralInputPort_array_port_default_instance_;
}  // namespace hmigeneral_input_port
}  // namespace mf_hmih
}  // namespace pb
static void InitDefaultsscc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_;
    new (ptr) ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_HMIGeneral_mf_5fhmih_2fhmigeneral_2eproto.base,
      &scc_info_ParkingSpaces_mf_5fhmih_2fparking_5fspaces_2eproto.base,
      &scc_info_ParkingSituation_mf_5fhmih_2fparking_5fsituation_2eproto.base,
      &scc_info_PDCSectors_mf_5fhmih_2fpdcsectors_2eproto.base,
      &scc_info_DrivingTube_mf_5fhmih_2fdriving_5ftube_2eproto.base,
      &scc_info_GeneralWarnings_mf_5fhmih_2fgeneral_5fwarnings_2eproto.base,
      &scc_info_WheelWarnings_mf_5fhmih_2fwheel_5fwarnings_2eproto.base,
      &scc_info_LscaWarnings_mf_5fhmih_2flsca_5fwarnings_2eproto.base,
      &scc_info_MemoryParkingInfo_mf_5fhmih_2fmemory_5fparking_5finfo_2eproto.base,
      &scc_info_ReverseAssistAvailabilityPort_ap_5ftp_2freverse_5fassist_5favailability_5fport_2eproto.base,}};

static void InitDefaultsscc_info_HMIGeneralInputPort_array_port_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_array_port_default_instance_;
    new (ptr) ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIGeneralInputPort_array_port_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIGeneralInputPort_array_port_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto}, {
      &scc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, general_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, parkingspaces_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, parkingsituation_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, pdcsectors_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, drivingtube_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, generalwarnings_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, wheelwarnings_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, lscawarnings_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, memoryparkinginfo_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort, reverseassistavailabilityport_nu_),
  11,
  4,
  8,
  6,
  1,
  3,
  5,
  9,
  10,
  2,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort)},
  { 29, 35, sizeof(::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#mf_hmih/hmigeneral_input_port.proto\022 p"
  "b.mf_hmih.hmigeneral_input_port\032\027eco/sig"
  "nal_header.proto\032\030mf_hmih/hmigeneral.pro"
  "to\032\034mf_hmih/parking_spaces.proto\032\037mf_hmi"
  "h/parking_situation.proto\032\030mf_hmih/pdcse"
  "ctors.proto\032\032mf_hmih/driving_tube.proto\032"
  "\036mf_hmih/general_warnings.proto\032\034mf_hmih"
  "/wheel_warnings.proto\032\033mf_hmih/lsca_warn"
  "ings.proto\032!mf_hmih/memory_parking_info."
  "proto\032,ap_tp/reverse_assist_availability"
  "_port.proto\"\252\006\n\023HMIGeneralInputPort\022\030\n\017u"
  "iVersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001"
  "(\0132\".pb.eco.signal_header.SignalHeader\0223"
  "\n\007general\030\371\035 \001(\0132!.pb.mf_hmih.hmigeneral"
  ".HMIGeneral\022@\n\rparkingSpaces\030\376\021 \001(\0132(.pb"
  ".mf_hmih.parking_spaces.ParkingSpaces\022I\n"
  "\020parkingSituation\030\300\002 \001(\0132..pb.mf_hmih.pa"
  "rking_situation.ParkingSituation\0226\n\npdcS"
  "ectors\030\305\006 \001(\0132!.pb.mf_hmih.pdcsectors.PD"
  "CSectors\022:\n\013drivingTube\030\345\r \001(\0132$.pb.mf_h"
  "mih.driving_tube.DrivingTube\022F\n\017generalW"
  "arnings\030\243\037 \001(\0132,.pb.mf_hmih.general_warn"
  "ings.GeneralWarnings\022@\n\rwheelWarnings\030\312\037"
  " \001(\0132(.pb.mf_hmih.wheel_warnings.WheelWa"
  "rnings\022=\n\014lscaWarnings\030\277\006 \001(\0132&.pb.mf_hm"
  "ih.lsca_warnings.LscaWarnings\022M\n\021memoryP"
  "arkingInfo\030\365\035 \001(\01321.pb.mf_hmih.memory_pa"
  "rking_info.MemoryParkingInfo\022r\n reverseA"
  "ssistAvailabilityPort_nu\0301 \001(\0132H.pb.ap_t"
  "p.reverse_assist_availability_port.Rever"
  "seAssistAvailabilityPort\"f\n\036HMIGeneralIn"
  "putPort_array_port\022D\n\004data\030\362\002 \003(\01325.pb.m"
  "f_hmih.hmigeneral_input_port.HMIGeneralI"
  "nputPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_deps[11] = {
  &::descriptor_table_ap_5ftp_2freverse_5fassist_5favailability_5fport_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_mf_5fhmih_2fdriving_5ftube_2eproto,
  &::descriptor_table_mf_5fhmih_2fgeneral_5fwarnings_2eproto,
  &::descriptor_table_mf_5fhmih_2fhmigeneral_2eproto,
  &::descriptor_table_mf_5fhmih_2flsca_5fwarnings_2eproto,
  &::descriptor_table_mf_5fhmih_2fmemory_5fparking_5finfo_2eproto,
  &::descriptor_table_mf_5fhmih_2fparking_5fsituation_2eproto,
  &::descriptor_table_mf_5fhmih_2fparking_5fspaces_2eproto,
  &::descriptor_table_mf_5fhmih_2fpdcsectors_2eproto,
  &::descriptor_table_mf_5fhmih_2fwheel_5fwarnings_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_sccs[2] = {
  &scc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.base,
  &scc_info_HMIGeneralInputPort_array_port_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_once;
static bool descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto = {
  &descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_initialized, descriptor_table_protodef_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto, "mf_hmih/hmigeneral_input_port.proto", 1328,
  &descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_once, descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_sccs, descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto::offsets,
  file_level_metadata_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto, 2, file_level_enum_descriptors_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto, file_level_service_descriptors_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto), true);
namespace pb {
namespace mf_hmih {
namespace hmigeneral_input_port {

// ===================================================================

void HMIGeneralInputPort::InitAsDefaultInstance() {
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->general_ = const_cast< ::pb::mf_hmih::hmigeneral::HMIGeneral*>(
      ::pb::mf_hmih::hmigeneral::HMIGeneral::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->parkingspaces_ = const_cast< ::pb::mf_hmih::parking_spaces::ParkingSpaces*>(
      ::pb::mf_hmih::parking_spaces::ParkingSpaces::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->parkingsituation_ = const_cast< ::pb::mf_hmih::parking_situation::ParkingSituation*>(
      ::pb::mf_hmih::parking_situation::ParkingSituation::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->pdcsectors_ = const_cast< ::pb::mf_hmih::pdcsectors::PDCSectors*>(
      ::pb::mf_hmih::pdcsectors::PDCSectors::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->drivingtube_ = const_cast< ::pb::mf_hmih::driving_tube::DrivingTube*>(
      ::pb::mf_hmih::driving_tube::DrivingTube::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->generalwarnings_ = const_cast< ::pb::mf_hmih::general_warnings::GeneralWarnings*>(
      ::pb::mf_hmih::general_warnings::GeneralWarnings::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->wheelwarnings_ = const_cast< ::pb::mf_hmih::wheel_warnings::WheelWarnings*>(
      ::pb::mf_hmih::wheel_warnings::WheelWarnings::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->lscawarnings_ = const_cast< ::pb::mf_hmih::lsca_warnings::LscaWarnings*>(
      ::pb::mf_hmih::lsca_warnings::LscaWarnings::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->memoryparkinginfo_ = const_cast< ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo*>(
      ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo::internal_default_instance());
  ::pb::mf_hmih::hmigeneral_input_port::_HMIGeneralInputPort_default_instance_._instance.get_mutable()->reverseassistavailabilityport_nu_ = const_cast< ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort*>(
      ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort::internal_default_instance());
}
class HMIGeneralInputPort::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIGeneralInputPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const HMIGeneralInputPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::mf_hmih::hmigeneral::HMIGeneral& general(const HMIGeneralInputPort* msg);
  static void set_has_general(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::pb::mf_hmih::parking_spaces::ParkingSpaces& parkingspaces(const HMIGeneralInputPort* msg);
  static void set_has_parkingspaces(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::mf_hmih::parking_situation::ParkingSituation& parkingsituation(const HMIGeneralInputPort* msg);
  static void set_has_parkingsituation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::mf_hmih::pdcsectors::PDCSectors& pdcsectors(const HMIGeneralInputPort* msg);
  static void set_has_pdcsectors(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::mf_hmih::driving_tube::DrivingTube& drivingtube(const HMIGeneralInputPort* msg);
  static void set_has_drivingtube(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::mf_hmih::general_warnings::GeneralWarnings& generalwarnings(const HMIGeneralInputPort* msg);
  static void set_has_generalwarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::mf_hmih::wheel_warnings::WheelWarnings& wheelwarnings(const HMIGeneralInputPort* msg);
  static void set_has_wheelwarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::pb::mf_hmih::lsca_warnings::LscaWarnings& lscawarnings(const HMIGeneralInputPort* msg);
  static void set_has_lscawarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo& memoryparkinginfo(const HMIGeneralInputPort* msg);
  static void set_has_memoryparkinginfo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort& reverseassistavailabilityport_nu(const HMIGeneralInputPort* msg);
  static void set_has_reverseassistavailabilityport_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
HMIGeneralInputPort::_Internal::ssigheader(const HMIGeneralInputPort* msg) {
  return *msg->ssigheader_;
}
const ::pb::mf_hmih::hmigeneral::HMIGeneral&
HMIGeneralInputPort::_Internal::general(const HMIGeneralInputPort* msg) {
  return *msg->general_;
}
const ::pb::mf_hmih::parking_spaces::ParkingSpaces&
HMIGeneralInputPort::_Internal::parkingspaces(const HMIGeneralInputPort* msg) {
  return *msg->parkingspaces_;
}
const ::pb::mf_hmih::parking_situation::ParkingSituation&
HMIGeneralInputPort::_Internal::parkingsituation(const HMIGeneralInputPort* msg) {
  return *msg->parkingsituation_;
}
const ::pb::mf_hmih::pdcsectors::PDCSectors&
HMIGeneralInputPort::_Internal::pdcsectors(const HMIGeneralInputPort* msg) {
  return *msg->pdcsectors_;
}
const ::pb::mf_hmih::driving_tube::DrivingTube&
HMIGeneralInputPort::_Internal::drivingtube(const HMIGeneralInputPort* msg) {
  return *msg->drivingtube_;
}
const ::pb::mf_hmih::general_warnings::GeneralWarnings&
HMIGeneralInputPort::_Internal::generalwarnings(const HMIGeneralInputPort* msg) {
  return *msg->generalwarnings_;
}
const ::pb::mf_hmih::wheel_warnings::WheelWarnings&
HMIGeneralInputPort::_Internal::wheelwarnings(const HMIGeneralInputPort* msg) {
  return *msg->wheelwarnings_;
}
const ::pb::mf_hmih::lsca_warnings::LscaWarnings&
HMIGeneralInputPort::_Internal::lscawarnings(const HMIGeneralInputPort* msg) {
  return *msg->lscawarnings_;
}
const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo&
HMIGeneralInputPort::_Internal::memoryparkinginfo(const HMIGeneralInputPort* msg) {
  return *msg->memoryparkinginfo_;
}
const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort&
HMIGeneralInputPort::_Internal::reverseassistavailabilityport_nu(const HMIGeneralInputPort* msg) {
  return *msg->reverseassistavailabilityport_nu_;
}
void HMIGeneralInputPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void HMIGeneralInputPort::clear_general() {
  if (general_ != nullptr) general_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void HMIGeneralInputPort::clear_parkingspaces() {
  if (parkingspaces_ != nullptr) parkingspaces_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void HMIGeneralInputPort::clear_parkingsituation() {
  if (parkingsituation_ != nullptr) parkingsituation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void HMIGeneralInputPort::clear_pdcsectors() {
  if (pdcsectors_ != nullptr) pdcsectors_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void HMIGeneralInputPort::clear_drivingtube() {
  if (drivingtube_ != nullptr) drivingtube_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void HMIGeneralInputPort::clear_generalwarnings() {
  if (generalwarnings_ != nullptr) generalwarnings_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void HMIGeneralInputPort::clear_wheelwarnings() {
  if (wheelwarnings_ != nullptr) wheelwarnings_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void HMIGeneralInputPort::clear_lscawarnings() {
  if (lscawarnings_ != nullptr) lscawarnings_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void HMIGeneralInputPort::clear_memoryparkinginfo() {
  if (memoryparkinginfo_ != nullptr) memoryparkinginfo_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void HMIGeneralInputPort::clear_reverseassistavailabilityport_nu() {
  if (reverseassistavailabilityport_nu_ != nullptr) reverseassistavailabilityport_nu_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HMIGeneralInputPort::HMIGeneralInputPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
}
HMIGeneralInputPort::HMIGeneralInputPort(const HMIGeneralInputPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_reverseassistavailabilityport_nu()) {
    reverseassistavailabilityport_nu_ = new ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort(*from.reverseassistavailabilityport_nu_);
  } else {
    reverseassistavailabilityport_nu_ = nullptr;
  }
  if (from._internal_has_parkingsituation()) {
    parkingsituation_ = new ::pb::mf_hmih::parking_situation::ParkingSituation(*from.parkingsituation_);
  } else {
    parkingsituation_ = nullptr;
  }
  if (from._internal_has_lscawarnings()) {
    lscawarnings_ = new ::pb::mf_hmih::lsca_warnings::LscaWarnings(*from.lscawarnings_);
  } else {
    lscawarnings_ = nullptr;
  }
  if (from._internal_has_pdcsectors()) {
    pdcsectors_ = new ::pb::mf_hmih::pdcsectors::PDCSectors(*from.pdcsectors_);
  } else {
    pdcsectors_ = nullptr;
  }
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_drivingtube()) {
    drivingtube_ = new ::pb::mf_hmih::driving_tube::DrivingTube(*from.drivingtube_);
  } else {
    drivingtube_ = nullptr;
  }
  if (from._internal_has_parkingspaces()) {
    parkingspaces_ = new ::pb::mf_hmih::parking_spaces::ParkingSpaces(*from.parkingspaces_);
  } else {
    parkingspaces_ = nullptr;
  }
  if (from._internal_has_memoryparkinginfo()) {
    memoryparkinginfo_ = new ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo(*from.memoryparkinginfo_);
  } else {
    memoryparkinginfo_ = nullptr;
  }
  if (from._internal_has_general()) {
    general_ = new ::pb::mf_hmih::hmigeneral::HMIGeneral(*from.general_);
  } else {
    general_ = nullptr;
  }
  if (from._internal_has_generalwarnings()) {
    generalwarnings_ = new ::pb::mf_hmih::general_warnings::GeneralWarnings(*from.generalwarnings_);
  } else {
    generalwarnings_ = nullptr;
  }
  if (from._internal_has_wheelwarnings()) {
    wheelwarnings_ = new ::pb::mf_hmih::wheel_warnings::WheelWarnings(*from.wheelwarnings_);
  } else {
    wheelwarnings_ = nullptr;
  }
  uiversionnumber_ = from.uiversionnumber_;
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
}

void HMIGeneralInputPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.base);
  ::memset(&reverseassistavailabilityport_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiversionnumber_) -
      reinterpret_cast<char*>(&reverseassistavailabilityport_nu_)) + sizeof(uiversionnumber_));
}

HMIGeneralInputPort::~HMIGeneralInputPort() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  SharedDtor();
}

void HMIGeneralInputPort::SharedDtor() {
  if (this != internal_default_instance()) delete reverseassistavailabilityport_nu_;
  if (this != internal_default_instance()) delete parkingsituation_;
  if (this != internal_default_instance()) delete lscawarnings_;
  if (this != internal_default_instance()) delete pdcsectors_;
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete drivingtube_;
  if (this != internal_default_instance()) delete parkingspaces_;
  if (this != internal_default_instance()) delete memoryparkinginfo_;
  if (this != internal_default_instance()) delete general_;
  if (this != internal_default_instance()) delete generalwarnings_;
  if (this != internal_default_instance()) delete wheelwarnings_;
}

void HMIGeneralInputPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMIGeneralInputPort& HMIGeneralInputPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMIGeneralInputPort_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.base);
  return *internal_default_instance();
}


void HMIGeneralInputPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reverseassistavailabilityport_nu_ != nullptr);
      reverseassistavailabilityport_nu_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parkingsituation_ != nullptr);
      parkingsituation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lscawarnings_ != nullptr);
      lscawarnings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pdcsectors_ != nullptr);
      pdcsectors_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(drivingtube_ != nullptr);
      drivingtube_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(parkingspaces_ != nullptr);
      parkingspaces_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(memoryparkinginfo_ != nullptr);
      memoryparkinginfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(general_ != nullptr);
      general_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(generalwarnings_ != nullptr);
      generalwarnings_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(wheelwarnings_ != nullptr);
      wheelwarnings_->Clear();
    }
  }
  uiversionnumber_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HMIGeneralInputPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.ap_tp.reverse_assist_availability_port.ReverseAssistAvailabilityPort reverseAssistAvailabilityPort_nu = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverseassistavailabilityport_nu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.parking_situation.ParkingSituation parkingSituation = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_parkingsituation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.lsca_warnings.LscaWarnings lscaWarnings = 831;
      case 831:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_lscawarnings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.pdcsectors.PDCSectors pdcSectors = 837;
      case 837:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pdcsectors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.driving_tube.DrivingTube drivingTube = 1765;
      case 1765:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_drivingtube(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.parking_spaces.ParkingSpaces parkingSpaces = 2302;
      case 2302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_parkingspaces(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.memory_parking_info.MemoryParkingInfo memoryParkingInfo = 3829;
      case 3829:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_memoryparkinginfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.hmigeneral.HMIGeneral general = 3833;
      case 3833:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_general(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.general_warnings.GeneralWarnings generalWarnings = 4003;
      case 4003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_generalwarnings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.wheel_warnings.WheelWarnings wheelWarnings = 4042;
      case 4042:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheelwarnings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIGeneralInputPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_tp.reverse_assist_availability_port.ReverseAssistAvailabilityPort reverseAssistAvailabilityPort_nu = 49;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::reverseassistavailabilityport_nu(this), target, stream);
  }

  // optional .pb.mf_hmih.parking_situation.ParkingSituation parkingSituation = 320;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        320, _Internal::parkingsituation(this), target, stream);
  }

  // optional .pb.mf_hmih.lsca_warnings.LscaWarnings lscaWarnings = 831;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        831, _Internal::lscawarnings(this), target, stream);
  }

  // optional .pb.mf_hmih.pdcsectors.PDCSectors pdcSectors = 837;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        837, _Internal::pdcsectors(this), target, stream);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional .pb.mf_hmih.driving_tube.DrivingTube drivingTube = 1765;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1765, _Internal::drivingtube(this), target, stream);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional .pb.mf_hmih.parking_spaces.ParkingSpaces parkingSpaces = 2302;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2302, _Internal::parkingspaces(this), target, stream);
  }

  // optional .pb.mf_hmih.memory_parking_info.MemoryParkingInfo memoryParkingInfo = 3829;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3829, _Internal::memoryparkinginfo(this), target, stream);
  }

  // optional .pb.mf_hmih.hmigeneral.HMIGeneral general = 3833;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3833, _Internal::general(this), target, stream);
  }

  // optional .pb.mf_hmih.general_warnings.GeneralWarnings generalWarnings = 4003;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4003, _Internal::generalwarnings(this), target, stream);
  }

  // optional .pb.mf_hmih.wheel_warnings.WheelWarnings wheelWarnings = 4042;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4042, _Internal::wheelwarnings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  return target;
}

size_t HMIGeneralInputPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.ap_tp.reverse_assist_availability_port.ReverseAssistAvailabilityPort reverseAssistAvailabilityPort_nu = 49;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverseassistavailabilityport_nu_);
    }

    // optional .pb.mf_hmih.parking_situation.ParkingSituation parkingSituation = 320;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parkingsituation_);
    }

    // optional .pb.mf_hmih.lsca_warnings.LscaWarnings lscaWarnings = 831;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lscawarnings_);
    }

    // optional .pb.mf_hmih.pdcsectors.PDCSectors pdcSectors = 837;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pdcsectors_);
    }

    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.mf_hmih.driving_tube.DrivingTube drivingTube = 1765;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drivingtube_);
    }

    // optional .pb.mf_hmih.parking_spaces.ParkingSpaces parkingSpaces = 2302;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parkingspaces_);
    }

    // optional .pb.mf_hmih.memory_parking_info.MemoryParkingInfo memoryParkingInfo = 3829;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memoryparkinginfo_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .pb.mf_hmih.hmigeneral.HMIGeneral general = 3833;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *general_);
    }

    // optional .pb.mf_hmih.general_warnings.GeneralWarnings generalWarnings = 4003;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generalwarnings_);
    }

    // optional .pb.mf_hmih.wheel_warnings.WheelWarnings wheelWarnings = 4042;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wheelwarnings_);
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIGeneralInputPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIGeneralInputPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIGeneralInputPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
    MergeFrom(*source);
  }
}

void HMIGeneralInputPort::MergeFrom(const HMIGeneralInputPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reverseassistavailabilityport_nu()->::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort::MergeFrom(from._internal_reverseassistavailabilityport_nu());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parkingsituation()->::pb::mf_hmih::parking_situation::ParkingSituation::MergeFrom(from._internal_parkingsituation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lscawarnings()->::pb::mf_hmih::lsca_warnings::LscaWarnings::MergeFrom(from._internal_lscawarnings());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_pdcsectors()->::pb::mf_hmih::pdcsectors::PDCSectors::MergeFrom(from._internal_pdcsectors());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_drivingtube()->::pb::mf_hmih::driving_tube::DrivingTube::MergeFrom(from._internal_drivingtube());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_parkingspaces()->::pb::mf_hmih::parking_spaces::ParkingSpaces::MergeFrom(from._internal_parkingspaces());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_memoryparkinginfo()->::pb::mf_hmih::memory_parking_info::MemoryParkingInfo::MergeFrom(from._internal_memoryparkinginfo());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_general()->::pb::mf_hmih::hmigeneral::HMIGeneral::MergeFrom(from._internal_general());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_generalwarnings()->::pb::mf_hmih::general_warnings::GeneralWarnings::MergeFrom(from._internal_generalwarnings());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_wheelwarnings()->::pb::mf_hmih::wheel_warnings::WheelWarnings::MergeFrom(from._internal_wheelwarnings());
    }
    if (cached_has_bits & 0x00000800u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HMIGeneralInputPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIGeneralInputPort::CopyFrom(const HMIGeneralInputPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIGeneralInputPort::IsInitialized() const {
  return true;
}

void HMIGeneralInputPort::InternalSwap(HMIGeneralInputPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reverseassistavailabilityport_nu_, other->reverseassistavailabilityport_nu_);
  swap(parkingsituation_, other->parkingsituation_);
  swap(lscawarnings_, other->lscawarnings_);
  swap(pdcsectors_, other->pdcsectors_);
  swap(ssigheader_, other->ssigheader_);
  swap(drivingtube_, other->drivingtube_);
  swap(parkingspaces_, other->parkingspaces_);
  swap(memoryparkinginfo_, other->memoryparkinginfo_);
  swap(general_, other->general_);
  swap(generalwarnings_, other->generalwarnings_);
  swap(wheelwarnings_, other->wheelwarnings_);
  swap(uiversionnumber_, other->uiversionnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIGeneralInputPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HMIGeneralInputPort_array_port::InitAsDefaultInstance() {
}
class HMIGeneralInputPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIGeneralInputPort_array_port>()._has_bits_);
};

HMIGeneralInputPort_array_port::HMIGeneralInputPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
}
HMIGeneralInputPort_array_port::HMIGeneralInputPort_array_port(const HMIGeneralInputPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
}

void HMIGeneralInputPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HMIGeneralInputPort_array_port_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.base);
}

HMIGeneralInputPort_array_port::~HMIGeneralInputPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  SharedDtor();
}

void HMIGeneralInputPort_array_port::SharedDtor() {
}

void HMIGeneralInputPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMIGeneralInputPort_array_port& HMIGeneralInputPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMIGeneralInputPort_array_port_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.base);
  return *internal_default_instance();
}


void HMIGeneralInputPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HMIGeneralInputPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort data = 370;
      case 370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2962>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIGeneralInputPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort data = 370;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(370, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  return target;
}

size_t HMIGeneralInputPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort data = 370;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIGeneralInputPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIGeneralInputPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIGeneralInputPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
    MergeFrom(*source);
  }
}

void HMIGeneralInputPort_array_port::MergeFrom(const HMIGeneralInputPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void HMIGeneralInputPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIGeneralInputPort_array_port::CopyFrom(const HMIGeneralInputPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIGeneralInputPort_array_port::IsInitialized() const {
  return true;
}

void HMIGeneralInputPort_array_port::InternalSwap(HMIGeneralInputPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIGeneralInputPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hmigeneral_input_port
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* Arena::CreateMaybeMessage< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port* Arena::CreateMaybeMessage< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
