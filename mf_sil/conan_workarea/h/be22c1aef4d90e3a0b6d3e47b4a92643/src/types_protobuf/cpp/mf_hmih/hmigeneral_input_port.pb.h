// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/hmigeneral_input_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "mf_hmih/hmigeneral.pb.h"
#include "mf_hmih/parking_spaces.pb.h"
#include "mf_hmih/parking_situation.pb.h"
#include "mf_hmih/pdcsectors.pb.h"
#include "mf_hmih/driving_tube.pb.h"
#include "mf_hmih/general_warnings.pb.h"
#include "mf_hmih/wheel_warnings.pb.h"
#include "mf_hmih/lsca_warnings.pb.h"
#include "mf_hmih/memory_parking_info.pb.h"
#include "ap_tp/reverse_assist_availability_port.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto;
namespace pb {
namespace mf_hmih {
namespace hmigeneral_input_port {
class HMIGeneralInputPort;
class HMIGeneralInputPortDefaultTypeInternal;
extern HMIGeneralInputPortDefaultTypeInternal _HMIGeneralInputPort_default_instance_;
class HMIGeneralInputPort_array_port;
class HMIGeneralInputPort_array_portDefaultTypeInternal;
extern HMIGeneralInputPort_array_portDefaultTypeInternal _HMIGeneralInputPort_array_port_default_instance_;
}  // namespace hmigeneral_input_port
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* Arena::CreateMaybeMessage<::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort>(Arena*);
template<> ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port* Arena::CreateMaybeMessage<::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_hmih {
namespace hmigeneral_input_port {

// ===================================================================

class HMIGeneralInputPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort) */ {
 public:
  HMIGeneralInputPort();
  virtual ~HMIGeneralInputPort();

  HMIGeneralInputPort(const HMIGeneralInputPort& from);
  HMIGeneralInputPort(HMIGeneralInputPort&& from) noexcept
    : HMIGeneralInputPort() {
    *this = ::std::move(from);
  }

  inline HMIGeneralInputPort& operator=(const HMIGeneralInputPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIGeneralInputPort& operator=(HMIGeneralInputPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIGeneralInputPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIGeneralInputPort* internal_default_instance() {
    return reinterpret_cast<const HMIGeneralInputPort*>(
               &_HMIGeneralInputPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HMIGeneralInputPort& a, HMIGeneralInputPort& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIGeneralInputPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIGeneralInputPort* New() const final {
    return CreateMaybeMessage<HMIGeneralInputPort>(nullptr);
  }

  HMIGeneralInputPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIGeneralInputPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIGeneralInputPort& from);
  void MergeFrom(const HMIGeneralInputPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIGeneralInputPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto);
    return ::descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReverseAssistAvailabilityPortNuFieldNumber = 49,
    kParkingSituationFieldNumber = 320,
    kLscaWarningsFieldNumber = 831,
    kPdcSectorsFieldNumber = 837,
    kSSigHeaderFieldNumber = 1033,
    kDrivingTubeFieldNumber = 1765,
    kParkingSpacesFieldNumber = 2302,
    kMemoryParkingInfoFieldNumber = 3829,
    kGeneralFieldNumber = 3833,
    kGeneralWarningsFieldNumber = 4003,
    kWheelWarningsFieldNumber = 4042,
    kUiVersionNumberFieldNumber = 2124,
  };
  // optional .pb.ap_tp.reverse_assist_availability_port.ReverseAssistAvailabilityPort reverseAssistAvailabilityPort_nu = 49;
  bool has_reverseassistavailabilityport_nu() const;
  private:
  bool _internal_has_reverseassistavailabilityport_nu() const;
  public:
  void clear_reverseassistavailabilityport_nu();
  const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort& reverseassistavailabilityport_nu() const;
  ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* release_reverseassistavailabilityport_nu();
  ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* mutable_reverseassistavailabilityport_nu();
  void set_allocated_reverseassistavailabilityport_nu(::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* reverseassistavailabilityport_nu);
  private:
  const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort& _internal_reverseassistavailabilityport_nu() const;
  ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* _internal_mutable_reverseassistavailabilityport_nu();
  public:

  // optional .pb.mf_hmih.parking_situation.ParkingSituation parkingSituation = 320;
  bool has_parkingsituation() const;
  private:
  bool _internal_has_parkingsituation() const;
  public:
  void clear_parkingsituation();
  const ::pb::mf_hmih::parking_situation::ParkingSituation& parkingsituation() const;
  ::pb::mf_hmih::parking_situation::ParkingSituation* release_parkingsituation();
  ::pb::mf_hmih::parking_situation::ParkingSituation* mutable_parkingsituation();
  void set_allocated_parkingsituation(::pb::mf_hmih::parking_situation::ParkingSituation* parkingsituation);
  private:
  const ::pb::mf_hmih::parking_situation::ParkingSituation& _internal_parkingsituation() const;
  ::pb::mf_hmih::parking_situation::ParkingSituation* _internal_mutable_parkingsituation();
  public:

  // optional .pb.mf_hmih.lsca_warnings.LscaWarnings lscaWarnings = 831;
  bool has_lscawarnings() const;
  private:
  bool _internal_has_lscawarnings() const;
  public:
  void clear_lscawarnings();
  const ::pb::mf_hmih::lsca_warnings::LscaWarnings& lscawarnings() const;
  ::pb::mf_hmih::lsca_warnings::LscaWarnings* release_lscawarnings();
  ::pb::mf_hmih::lsca_warnings::LscaWarnings* mutable_lscawarnings();
  void set_allocated_lscawarnings(::pb::mf_hmih::lsca_warnings::LscaWarnings* lscawarnings);
  private:
  const ::pb::mf_hmih::lsca_warnings::LscaWarnings& _internal_lscawarnings() const;
  ::pb::mf_hmih::lsca_warnings::LscaWarnings* _internal_mutable_lscawarnings();
  public:

  // optional .pb.mf_hmih.pdcsectors.PDCSectors pdcSectors = 837;
  bool has_pdcsectors() const;
  private:
  bool _internal_has_pdcsectors() const;
  public:
  void clear_pdcsectors();
  const ::pb::mf_hmih::pdcsectors::PDCSectors& pdcsectors() const;
  ::pb::mf_hmih::pdcsectors::PDCSectors* release_pdcsectors();
  ::pb::mf_hmih::pdcsectors::PDCSectors* mutable_pdcsectors();
  void set_allocated_pdcsectors(::pb::mf_hmih::pdcsectors::PDCSectors* pdcsectors);
  private:
  const ::pb::mf_hmih::pdcsectors::PDCSectors& _internal_pdcsectors() const;
  ::pb::mf_hmih::pdcsectors::PDCSectors* _internal_mutable_pdcsectors();
  public:

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.mf_hmih.driving_tube.DrivingTube drivingTube = 1765;
  bool has_drivingtube() const;
  private:
  bool _internal_has_drivingtube() const;
  public:
  void clear_drivingtube();
  const ::pb::mf_hmih::driving_tube::DrivingTube& drivingtube() const;
  ::pb::mf_hmih::driving_tube::DrivingTube* release_drivingtube();
  ::pb::mf_hmih::driving_tube::DrivingTube* mutable_drivingtube();
  void set_allocated_drivingtube(::pb::mf_hmih::driving_tube::DrivingTube* drivingtube);
  private:
  const ::pb::mf_hmih::driving_tube::DrivingTube& _internal_drivingtube() const;
  ::pb::mf_hmih::driving_tube::DrivingTube* _internal_mutable_drivingtube();
  public:

  // optional .pb.mf_hmih.parking_spaces.ParkingSpaces parkingSpaces = 2302;
  bool has_parkingspaces() const;
  private:
  bool _internal_has_parkingspaces() const;
  public:
  void clear_parkingspaces();
  const ::pb::mf_hmih::parking_spaces::ParkingSpaces& parkingspaces() const;
  ::pb::mf_hmih::parking_spaces::ParkingSpaces* release_parkingspaces();
  ::pb::mf_hmih::parking_spaces::ParkingSpaces* mutable_parkingspaces();
  void set_allocated_parkingspaces(::pb::mf_hmih::parking_spaces::ParkingSpaces* parkingspaces);
  private:
  const ::pb::mf_hmih::parking_spaces::ParkingSpaces& _internal_parkingspaces() const;
  ::pb::mf_hmih::parking_spaces::ParkingSpaces* _internal_mutable_parkingspaces();
  public:

  // optional .pb.mf_hmih.memory_parking_info.MemoryParkingInfo memoryParkingInfo = 3829;
  bool has_memoryparkinginfo() const;
  private:
  bool _internal_has_memoryparkinginfo() const;
  public:
  void clear_memoryparkinginfo();
  const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo& memoryparkinginfo() const;
  ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* release_memoryparkinginfo();
  ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* mutable_memoryparkinginfo();
  void set_allocated_memoryparkinginfo(::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* memoryparkinginfo);
  private:
  const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo& _internal_memoryparkinginfo() const;
  ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* _internal_mutable_memoryparkinginfo();
  public:

  // optional .pb.mf_hmih.hmigeneral.HMIGeneral general = 3833;
  bool has_general() const;
  private:
  bool _internal_has_general() const;
  public:
  void clear_general();
  const ::pb::mf_hmih::hmigeneral::HMIGeneral& general() const;
  ::pb::mf_hmih::hmigeneral::HMIGeneral* release_general();
  ::pb::mf_hmih::hmigeneral::HMIGeneral* mutable_general();
  void set_allocated_general(::pb::mf_hmih::hmigeneral::HMIGeneral* general);
  private:
  const ::pb::mf_hmih::hmigeneral::HMIGeneral& _internal_general() const;
  ::pb::mf_hmih::hmigeneral::HMIGeneral* _internal_mutable_general();
  public:

  // optional .pb.mf_hmih.general_warnings.GeneralWarnings generalWarnings = 4003;
  bool has_generalwarnings() const;
  private:
  bool _internal_has_generalwarnings() const;
  public:
  void clear_generalwarnings();
  const ::pb::mf_hmih::general_warnings::GeneralWarnings& generalwarnings() const;
  ::pb::mf_hmih::general_warnings::GeneralWarnings* release_generalwarnings();
  ::pb::mf_hmih::general_warnings::GeneralWarnings* mutable_generalwarnings();
  void set_allocated_generalwarnings(::pb::mf_hmih::general_warnings::GeneralWarnings* generalwarnings);
  private:
  const ::pb::mf_hmih::general_warnings::GeneralWarnings& _internal_generalwarnings() const;
  ::pb::mf_hmih::general_warnings::GeneralWarnings* _internal_mutable_generalwarnings();
  public:

  // optional .pb.mf_hmih.wheel_warnings.WheelWarnings wheelWarnings = 4042;
  bool has_wheelwarnings() const;
  private:
  bool _internal_has_wheelwarnings() const;
  public:
  void clear_wheelwarnings();
  const ::pb::mf_hmih::wheel_warnings::WheelWarnings& wheelwarnings() const;
  ::pb::mf_hmih::wheel_warnings::WheelWarnings* release_wheelwarnings();
  ::pb::mf_hmih::wheel_warnings::WheelWarnings* mutable_wheelwarnings();
  void set_allocated_wheelwarnings(::pb::mf_hmih::wheel_warnings::WheelWarnings* wheelwarnings);
  private:
  const ::pb::mf_hmih::wheel_warnings::WheelWarnings& _internal_wheelwarnings() const;
  ::pb::mf_hmih::wheel_warnings::WheelWarnings* _internal_mutable_wheelwarnings();
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* reverseassistavailabilityport_nu_;
  ::pb::mf_hmih::parking_situation::ParkingSituation* parkingsituation_;
  ::pb::mf_hmih::lsca_warnings::LscaWarnings* lscawarnings_;
  ::pb::mf_hmih::pdcsectors::PDCSectors* pdcsectors_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::pb::mf_hmih::driving_tube::DrivingTube* drivingtube_;
  ::pb::mf_hmih::parking_spaces::ParkingSpaces* parkingspaces_;
  ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* memoryparkinginfo_;
  ::pb::mf_hmih::hmigeneral::HMIGeneral* general_;
  ::pb::mf_hmih::general_warnings::GeneralWarnings* generalwarnings_;
  ::pb::mf_hmih::wheel_warnings::WheelWarnings* wheelwarnings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  friend struct ::TableStruct_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto;
};
// -------------------------------------------------------------------

class HMIGeneralInputPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port) */ {
 public:
  HMIGeneralInputPort_array_port();
  virtual ~HMIGeneralInputPort_array_port();

  HMIGeneralInputPort_array_port(const HMIGeneralInputPort_array_port& from);
  HMIGeneralInputPort_array_port(HMIGeneralInputPort_array_port&& from) noexcept
    : HMIGeneralInputPort_array_port() {
    *this = ::std::move(from);
  }

  inline HMIGeneralInputPort_array_port& operator=(const HMIGeneralInputPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIGeneralInputPort_array_port& operator=(HMIGeneralInputPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIGeneralInputPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIGeneralInputPort_array_port* internal_default_instance() {
    return reinterpret_cast<const HMIGeneralInputPort_array_port*>(
               &_HMIGeneralInputPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HMIGeneralInputPort_array_port& a, HMIGeneralInputPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIGeneralInputPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIGeneralInputPort_array_port* New() const final {
    return CreateMaybeMessage<HMIGeneralInputPort_array_port>(nullptr);
  }

  HMIGeneralInputPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIGeneralInputPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIGeneralInputPort_array_port& from);
  void MergeFrom(const HMIGeneralInputPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIGeneralInputPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto);
    return ::descriptor_table_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 370,
  };
  // repeated .pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort data = 370;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort >*
      mutable_data();
  private:
  const ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort& _internal_data(int index) const;
  ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* _internal_add_data();
  public:
  const ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort& data(int index) const;
  ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort > data_;
  friend struct ::TableStruct_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HMIGeneralInputPort

// optional uint32 uiVersionNumber = 2124;
inline bool HMIGeneralInputPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool HMIGeneralInputPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void HMIGeneralInputPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneralInputPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HMIGeneralInputPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void HMIGeneralInputPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  uiversionnumber_ = value;
}
inline void HMIGeneralInputPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool HMIGeneralInputPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& HMIGeneralInputPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& HMIGeneralInputPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* HMIGeneralInputPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.sSigHeader)
  _has_bits_[0] &= ~0x00000010u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* HMIGeneralInputPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000010u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* HMIGeneralInputPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void HMIGeneralInputPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.sSigHeader)
}

// optional .pb.mf_hmih.hmigeneral.HMIGeneral general = 3833;
inline bool HMIGeneralInputPort::_internal_has_general() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || general_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_general() const {
  return _internal_has_general();
}
inline const ::pb::mf_hmih::hmigeneral::HMIGeneral& HMIGeneralInputPort::_internal_general() const {
  const ::pb::mf_hmih::hmigeneral::HMIGeneral* p = general_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::hmigeneral::HMIGeneral*>(
      &::pb::mf_hmih::hmigeneral::_HMIGeneral_default_instance_);
}
inline const ::pb::mf_hmih::hmigeneral::HMIGeneral& HMIGeneralInputPort::general() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.general)
  return _internal_general();
}
inline ::pb::mf_hmih::hmigeneral::HMIGeneral* HMIGeneralInputPort::release_general() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.general)
  _has_bits_[0] &= ~0x00000100u;
  ::pb::mf_hmih::hmigeneral::HMIGeneral* temp = general_;
  general_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::hmigeneral::HMIGeneral* HMIGeneralInputPort::_internal_mutable_general() {
  _has_bits_[0] |= 0x00000100u;
  if (general_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::hmigeneral::HMIGeneral>(GetArenaNoVirtual());
    general_ = p;
  }
  return general_;
}
inline ::pb::mf_hmih::hmigeneral::HMIGeneral* HMIGeneralInputPort::mutable_general() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.general)
  return _internal_mutable_general();
}
inline void HMIGeneralInputPort::set_allocated_general(::pb::mf_hmih::hmigeneral::HMIGeneral* general) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(general_);
  }
  if (general) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      general = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  general_ = general;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.general)
}

// optional .pb.mf_hmih.parking_spaces.ParkingSpaces parkingSpaces = 2302;
inline bool HMIGeneralInputPort::_internal_has_parkingspaces() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || parkingspaces_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_parkingspaces() const {
  return _internal_has_parkingspaces();
}
inline const ::pb::mf_hmih::parking_spaces::ParkingSpaces& HMIGeneralInputPort::_internal_parkingspaces() const {
  const ::pb::mf_hmih::parking_spaces::ParkingSpaces* p = parkingspaces_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::parking_spaces::ParkingSpaces*>(
      &::pb::mf_hmih::parking_spaces::_ParkingSpaces_default_instance_);
}
inline const ::pb::mf_hmih::parking_spaces::ParkingSpaces& HMIGeneralInputPort::parkingspaces() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSpaces)
  return _internal_parkingspaces();
}
inline ::pb::mf_hmih::parking_spaces::ParkingSpaces* HMIGeneralInputPort::release_parkingspaces() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSpaces)
  _has_bits_[0] &= ~0x00000040u;
  ::pb::mf_hmih::parking_spaces::ParkingSpaces* temp = parkingspaces_;
  parkingspaces_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::parking_spaces::ParkingSpaces* HMIGeneralInputPort::_internal_mutable_parkingspaces() {
  _has_bits_[0] |= 0x00000040u;
  if (parkingspaces_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::parking_spaces::ParkingSpaces>(GetArenaNoVirtual());
    parkingspaces_ = p;
  }
  return parkingspaces_;
}
inline ::pb::mf_hmih::parking_spaces::ParkingSpaces* HMIGeneralInputPort::mutable_parkingspaces() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSpaces)
  return _internal_mutable_parkingspaces();
}
inline void HMIGeneralInputPort::set_allocated_parkingspaces(::pb::mf_hmih::parking_spaces::ParkingSpaces* parkingspaces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parkingspaces_);
  }
  if (parkingspaces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parkingspaces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parkingspaces, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  parkingspaces_ = parkingspaces;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSpaces)
}

// optional .pb.mf_hmih.parking_situation.ParkingSituation parkingSituation = 320;
inline bool HMIGeneralInputPort::_internal_has_parkingsituation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || parkingsituation_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_parkingsituation() const {
  return _internal_has_parkingsituation();
}
inline const ::pb::mf_hmih::parking_situation::ParkingSituation& HMIGeneralInputPort::_internal_parkingsituation() const {
  const ::pb::mf_hmih::parking_situation::ParkingSituation* p = parkingsituation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::parking_situation::ParkingSituation*>(
      &::pb::mf_hmih::parking_situation::_ParkingSituation_default_instance_);
}
inline const ::pb::mf_hmih::parking_situation::ParkingSituation& HMIGeneralInputPort::parkingsituation() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSituation)
  return _internal_parkingsituation();
}
inline ::pb::mf_hmih::parking_situation::ParkingSituation* HMIGeneralInputPort::release_parkingsituation() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSituation)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::mf_hmih::parking_situation::ParkingSituation* temp = parkingsituation_;
  parkingsituation_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::parking_situation::ParkingSituation* HMIGeneralInputPort::_internal_mutable_parkingsituation() {
  _has_bits_[0] |= 0x00000002u;
  if (parkingsituation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::parking_situation::ParkingSituation>(GetArenaNoVirtual());
    parkingsituation_ = p;
  }
  return parkingsituation_;
}
inline ::pb::mf_hmih::parking_situation::ParkingSituation* HMIGeneralInputPort::mutable_parkingsituation() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSituation)
  return _internal_mutable_parkingsituation();
}
inline void HMIGeneralInputPort::set_allocated_parkingsituation(::pb::mf_hmih::parking_situation::ParkingSituation* parkingsituation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parkingsituation_);
  }
  if (parkingsituation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parkingsituation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parkingsituation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parkingsituation_ = parkingsituation;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.parkingSituation)
}

// optional .pb.mf_hmih.pdcsectors.PDCSectors pdcSectors = 837;
inline bool HMIGeneralInputPort::_internal_has_pdcsectors() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || pdcsectors_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_pdcsectors() const {
  return _internal_has_pdcsectors();
}
inline const ::pb::mf_hmih::pdcsectors::PDCSectors& HMIGeneralInputPort::_internal_pdcsectors() const {
  const ::pb::mf_hmih::pdcsectors::PDCSectors* p = pdcsectors_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::pdcsectors::PDCSectors*>(
      &::pb::mf_hmih::pdcsectors::_PDCSectors_default_instance_);
}
inline const ::pb::mf_hmih::pdcsectors::PDCSectors& HMIGeneralInputPort::pdcsectors() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.pdcSectors)
  return _internal_pdcsectors();
}
inline ::pb::mf_hmih::pdcsectors::PDCSectors* HMIGeneralInputPort::release_pdcsectors() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.pdcSectors)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::mf_hmih::pdcsectors::PDCSectors* temp = pdcsectors_;
  pdcsectors_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::pdcsectors::PDCSectors* HMIGeneralInputPort::_internal_mutable_pdcsectors() {
  _has_bits_[0] |= 0x00000008u;
  if (pdcsectors_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::pdcsectors::PDCSectors>(GetArenaNoVirtual());
    pdcsectors_ = p;
  }
  return pdcsectors_;
}
inline ::pb::mf_hmih::pdcsectors::PDCSectors* HMIGeneralInputPort::mutable_pdcsectors() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.pdcSectors)
  return _internal_mutable_pdcsectors();
}
inline void HMIGeneralInputPort::set_allocated_pdcsectors(::pb::mf_hmih::pdcsectors::PDCSectors* pdcsectors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdcsectors_);
  }
  if (pdcsectors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pdcsectors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pdcsectors, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pdcsectors_ = pdcsectors;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.pdcSectors)
}

// optional .pb.mf_hmih.driving_tube.DrivingTube drivingTube = 1765;
inline bool HMIGeneralInputPort::_internal_has_drivingtube() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || drivingtube_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_drivingtube() const {
  return _internal_has_drivingtube();
}
inline const ::pb::mf_hmih::driving_tube::DrivingTube& HMIGeneralInputPort::_internal_drivingtube() const {
  const ::pb::mf_hmih::driving_tube::DrivingTube* p = drivingtube_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::driving_tube::DrivingTube*>(
      &::pb::mf_hmih::driving_tube::_DrivingTube_default_instance_);
}
inline const ::pb::mf_hmih::driving_tube::DrivingTube& HMIGeneralInputPort::drivingtube() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.drivingTube)
  return _internal_drivingtube();
}
inline ::pb::mf_hmih::driving_tube::DrivingTube* HMIGeneralInputPort::release_drivingtube() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.drivingTube)
  _has_bits_[0] &= ~0x00000020u;
  ::pb::mf_hmih::driving_tube::DrivingTube* temp = drivingtube_;
  drivingtube_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::driving_tube::DrivingTube* HMIGeneralInputPort::_internal_mutable_drivingtube() {
  _has_bits_[0] |= 0x00000020u;
  if (drivingtube_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::driving_tube::DrivingTube>(GetArenaNoVirtual());
    drivingtube_ = p;
  }
  return drivingtube_;
}
inline ::pb::mf_hmih::driving_tube::DrivingTube* HMIGeneralInputPort::mutable_drivingtube() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.drivingTube)
  return _internal_mutable_drivingtube();
}
inline void HMIGeneralInputPort::set_allocated_drivingtube(::pb::mf_hmih::driving_tube::DrivingTube* drivingtube) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drivingtube_);
  }
  if (drivingtube) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      drivingtube = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drivingtube, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  drivingtube_ = drivingtube;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.drivingTube)
}

// optional .pb.mf_hmih.general_warnings.GeneralWarnings generalWarnings = 4003;
inline bool HMIGeneralInputPort::_internal_has_generalwarnings() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || generalwarnings_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_generalwarnings() const {
  return _internal_has_generalwarnings();
}
inline const ::pb::mf_hmih::general_warnings::GeneralWarnings& HMIGeneralInputPort::_internal_generalwarnings() const {
  const ::pb::mf_hmih::general_warnings::GeneralWarnings* p = generalwarnings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::general_warnings::GeneralWarnings*>(
      &::pb::mf_hmih::general_warnings::_GeneralWarnings_default_instance_);
}
inline const ::pb::mf_hmih::general_warnings::GeneralWarnings& HMIGeneralInputPort::generalwarnings() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.generalWarnings)
  return _internal_generalwarnings();
}
inline ::pb::mf_hmih::general_warnings::GeneralWarnings* HMIGeneralInputPort::release_generalwarnings() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.generalWarnings)
  _has_bits_[0] &= ~0x00000200u;
  ::pb::mf_hmih::general_warnings::GeneralWarnings* temp = generalwarnings_;
  generalwarnings_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::general_warnings::GeneralWarnings* HMIGeneralInputPort::_internal_mutable_generalwarnings() {
  _has_bits_[0] |= 0x00000200u;
  if (generalwarnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::general_warnings::GeneralWarnings>(GetArenaNoVirtual());
    generalwarnings_ = p;
  }
  return generalwarnings_;
}
inline ::pb::mf_hmih::general_warnings::GeneralWarnings* HMIGeneralInputPort::mutable_generalwarnings() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.generalWarnings)
  return _internal_mutable_generalwarnings();
}
inline void HMIGeneralInputPort::set_allocated_generalwarnings(::pb::mf_hmih::general_warnings::GeneralWarnings* generalwarnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(generalwarnings_);
  }
  if (generalwarnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generalwarnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generalwarnings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  generalwarnings_ = generalwarnings;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.generalWarnings)
}

// optional .pb.mf_hmih.wheel_warnings.WheelWarnings wheelWarnings = 4042;
inline bool HMIGeneralInputPort::_internal_has_wheelwarnings() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || wheelwarnings_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_wheelwarnings() const {
  return _internal_has_wheelwarnings();
}
inline const ::pb::mf_hmih::wheel_warnings::WheelWarnings& HMIGeneralInputPort::_internal_wheelwarnings() const {
  const ::pb::mf_hmih::wheel_warnings::WheelWarnings* p = wheelwarnings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::wheel_warnings::WheelWarnings*>(
      &::pb::mf_hmih::wheel_warnings::_WheelWarnings_default_instance_);
}
inline const ::pb::mf_hmih::wheel_warnings::WheelWarnings& HMIGeneralInputPort::wheelwarnings() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.wheelWarnings)
  return _internal_wheelwarnings();
}
inline ::pb::mf_hmih::wheel_warnings::WheelWarnings* HMIGeneralInputPort::release_wheelwarnings() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.wheelWarnings)
  _has_bits_[0] &= ~0x00000400u;
  ::pb::mf_hmih::wheel_warnings::WheelWarnings* temp = wheelwarnings_;
  wheelwarnings_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::wheel_warnings::WheelWarnings* HMIGeneralInputPort::_internal_mutable_wheelwarnings() {
  _has_bits_[0] |= 0x00000400u;
  if (wheelwarnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::wheel_warnings::WheelWarnings>(GetArenaNoVirtual());
    wheelwarnings_ = p;
  }
  return wheelwarnings_;
}
inline ::pb::mf_hmih::wheel_warnings::WheelWarnings* HMIGeneralInputPort::mutable_wheelwarnings() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.wheelWarnings)
  return _internal_mutable_wheelwarnings();
}
inline void HMIGeneralInputPort::set_allocated_wheelwarnings(::pb::mf_hmih::wheel_warnings::WheelWarnings* wheelwarnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheelwarnings_);
  }
  if (wheelwarnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wheelwarnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheelwarnings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  wheelwarnings_ = wheelwarnings;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.wheelWarnings)
}

// optional .pb.mf_hmih.lsca_warnings.LscaWarnings lscaWarnings = 831;
inline bool HMIGeneralInputPort::_internal_has_lscawarnings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lscawarnings_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_lscawarnings() const {
  return _internal_has_lscawarnings();
}
inline const ::pb::mf_hmih::lsca_warnings::LscaWarnings& HMIGeneralInputPort::_internal_lscawarnings() const {
  const ::pb::mf_hmih::lsca_warnings::LscaWarnings* p = lscawarnings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::lsca_warnings::LscaWarnings*>(
      &::pb::mf_hmih::lsca_warnings::_LscaWarnings_default_instance_);
}
inline const ::pb::mf_hmih::lsca_warnings::LscaWarnings& HMIGeneralInputPort::lscawarnings() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.lscaWarnings)
  return _internal_lscawarnings();
}
inline ::pb::mf_hmih::lsca_warnings::LscaWarnings* HMIGeneralInputPort::release_lscawarnings() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.lscaWarnings)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::mf_hmih::lsca_warnings::LscaWarnings* temp = lscawarnings_;
  lscawarnings_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::lsca_warnings::LscaWarnings* HMIGeneralInputPort::_internal_mutable_lscawarnings() {
  _has_bits_[0] |= 0x00000004u;
  if (lscawarnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::lsca_warnings::LscaWarnings>(GetArenaNoVirtual());
    lscawarnings_ = p;
  }
  return lscawarnings_;
}
inline ::pb::mf_hmih::lsca_warnings::LscaWarnings* HMIGeneralInputPort::mutable_lscawarnings() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.lscaWarnings)
  return _internal_mutable_lscawarnings();
}
inline void HMIGeneralInputPort::set_allocated_lscawarnings(::pb::mf_hmih::lsca_warnings::LscaWarnings* lscawarnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lscawarnings_);
  }
  if (lscawarnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lscawarnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lscawarnings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lscawarnings_ = lscawarnings;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.lscaWarnings)
}

// optional .pb.mf_hmih.memory_parking_info.MemoryParkingInfo memoryParkingInfo = 3829;
inline bool HMIGeneralInputPort::_internal_has_memoryparkinginfo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || memoryparkinginfo_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_memoryparkinginfo() const {
  return _internal_has_memoryparkinginfo();
}
inline const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo& HMIGeneralInputPort::_internal_memoryparkinginfo() const {
  const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* p = memoryparkinginfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo*>(
      &::pb::mf_hmih::memory_parking_info::_MemoryParkingInfo_default_instance_);
}
inline const ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo& HMIGeneralInputPort::memoryparkinginfo() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.memoryParkingInfo)
  return _internal_memoryparkinginfo();
}
inline ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* HMIGeneralInputPort::release_memoryparkinginfo() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.memoryParkingInfo)
  _has_bits_[0] &= ~0x00000080u;
  ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* temp = memoryparkinginfo_;
  memoryparkinginfo_ = nullptr;
  return temp;
}
inline ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* HMIGeneralInputPort::_internal_mutable_memoryparkinginfo() {
  _has_bits_[0] |= 0x00000080u;
  if (memoryparkinginfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_hmih::memory_parking_info::MemoryParkingInfo>(GetArenaNoVirtual());
    memoryparkinginfo_ = p;
  }
  return memoryparkinginfo_;
}
inline ::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* HMIGeneralInputPort::mutable_memoryparkinginfo() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.memoryParkingInfo)
  return _internal_mutable_memoryparkinginfo();
}
inline void HMIGeneralInputPort::set_allocated_memoryparkinginfo(::pb::mf_hmih::memory_parking_info::MemoryParkingInfo* memoryparkinginfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(memoryparkinginfo_);
  }
  if (memoryparkinginfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memoryparkinginfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memoryparkinginfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  memoryparkinginfo_ = memoryparkinginfo;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.memoryParkingInfo)
}

// optional .pb.ap_tp.reverse_assist_availability_port.ReverseAssistAvailabilityPort reverseAssistAvailabilityPort_nu = 49;
inline bool HMIGeneralInputPort::_internal_has_reverseassistavailabilityport_nu() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reverseassistavailabilityport_nu_ != nullptr);
  return value;
}
inline bool HMIGeneralInputPort::has_reverseassistavailabilityport_nu() const {
  return _internal_has_reverseassistavailabilityport_nu();
}
inline const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort& HMIGeneralInputPort::_internal_reverseassistavailabilityport_nu() const {
  const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* p = reverseassistavailabilityport_nu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort*>(
      &::pb::ap_tp::reverse_assist_availability_port::_ReverseAssistAvailabilityPort_default_instance_);
}
inline const ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort& HMIGeneralInputPort::reverseassistavailabilityport_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.reverseAssistAvailabilityPort_nu)
  return _internal_reverseassistavailabilityport_nu();
}
inline ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* HMIGeneralInputPort::release_reverseassistavailabilityport_nu() {
  // @@protoc_insertion_point(field_release:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.reverseAssistAvailabilityPort_nu)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* temp = reverseassistavailabilityport_nu_;
  reverseassistavailabilityport_nu_ = nullptr;
  return temp;
}
inline ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* HMIGeneralInputPort::_internal_mutable_reverseassistavailabilityport_nu() {
  _has_bits_[0] |= 0x00000001u;
  if (reverseassistavailabilityport_nu_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort>(GetArenaNoVirtual());
    reverseassistavailabilityport_nu_ = p;
  }
  return reverseassistavailabilityport_nu_;
}
inline ::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* HMIGeneralInputPort::mutable_reverseassistavailabilityport_nu() {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.reverseAssistAvailabilityPort_nu)
  return _internal_mutable_reverseassistavailabilityport_nu();
}
inline void HMIGeneralInputPort::set_allocated_reverseassistavailabilityport_nu(::pb::ap_tp::reverse_assist_availability_port::ReverseAssistAvailabilityPort* reverseassistavailabilityport_nu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reverseassistavailabilityport_nu_);
  }
  if (reverseassistavailabilityport_nu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reverseassistavailabilityport_nu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reverseassistavailabilityport_nu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reverseassistavailabilityport_nu_ = reverseassistavailabilityport_nu;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort.reverseAssistAvailabilityPort_nu)
}

// -------------------------------------------------------------------

// HMIGeneralInputPort_array_port

// repeated .pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort data = 370;
inline int HMIGeneralInputPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int HMIGeneralInputPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void HMIGeneralInputPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* HMIGeneralInputPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort >*
HMIGeneralInputPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port.data)
  return &data_;
}
inline const ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort& HMIGeneralInputPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort& HMIGeneralInputPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* HMIGeneralInputPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort* HMIGeneralInputPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_hmih::hmigeneral_input_port::HMIGeneralInputPort >&
HMIGeneralInputPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_hmih.hmigeneral_input_port.HMIGeneralInputPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hmigeneral_input_port
}  // namespace mf_hmih
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fhmih_2fhmigeneral_5finput_5fport_2eproto
