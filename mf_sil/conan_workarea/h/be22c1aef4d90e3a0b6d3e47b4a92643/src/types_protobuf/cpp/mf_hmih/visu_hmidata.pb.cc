// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/visu_hmidata.proto

#include "mf_hmih/visu_hmidata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fvisu_5fhmidata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisuHMIData_mf_5fhmih_2fvisu_5fhmidata_2eproto;
namespace pb {
namespace mf_hmih {
namespace visu_hmidata {
class VisuHMIDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisuHMIData> _instance;
} _VisuHMIData_default_instance_;
class VisuHMIData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisuHMIData_array_port> _instance;
} _VisuHMIData_array_port_default_instance_;
}  // namespace visu_hmidata
}  // namespace mf_hmih
}  // namespace pb
static void InitDefaultsscc_info_VisuHMIData_mf_5fhmih_2fvisu_5fhmidata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::visu_hmidata::_VisuHMIData_default_instance_;
    new (ptr) ::pb::mf_hmih::visu_hmidata::VisuHMIData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::visu_hmidata::VisuHMIData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisuHMIData_mf_5fhmih_2fvisu_5fhmidata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VisuHMIData_mf_5fhmih_2fvisu_5fhmidata_2eproto}, {}};

static void InitDefaultsscc_info_VisuHMIData_array_port_mf_5fhmih_2fvisu_5fhmidata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::visu_hmidata::_VisuHMIData_array_port_default_instance_;
    new (ptr) ::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VisuHMIData_array_port_mf_5fhmih_2fvisu_5fhmidata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VisuHMIData_array_port_mf_5fhmih_2fvisu_5fhmidata_2eproto}, {
      &scc_info_VisuHMIData_mf_5fhmih_2fvisu_5fhmidata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fhmih_2fvisu_5fhmidata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fhmih_2fvisu_5fhmidata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fhmih_2fvisu_5fhmidata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fhmih_2fvisu_5fhmidata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, firstclickeventx_px_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, firstclickeventy_px_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, secondclickeventx_px_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, secondclickeventy_px_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, gesturefinger_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, gesturecounter_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, gesturecode_nu_u8_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, blindspotviewtype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, visibilitytags_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, issequence_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, startvideorecorderreq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, startscreencapturereq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, rimprotectionstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, reverseassiststatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData, parkingaugmentationtype_nu_),
  5,
  13,
  6,
  11,
  2,
  3,
  0,
  12,
  ~0u,
  7,
  8,
  9,
  10,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::pb::mf_hmih::visu_hmidata::VisuHMIData)},
  { 35, 41, sizeof(::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::visu_hmidata::_VisuHMIData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::visu_hmidata::_VisuHMIData_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fhmih_2fvisu_5fhmidata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032mf_hmih/visu_hmidata.proto\022\027pb.mf_hmih"
  ".visu_hmidata\032\035ap_hmitoap/gesture_code.p"
  "roto\032 ap_hmitoap/blind_spot_view.proto\032*"
  "ap_hmitoap/parking_augmentation_type.pro"
  "to\"\363\004\n\013VisuHMIData\022\034\n\023firstClickEventX_p"
  "x\030\261\023 \001(\002\022\034\n\023firstClickEventY_px\030\205\036 \001(\002\022\035"
  "\n\024secondClickEventX_px\030\336\024 \001(\002\022\035\n\024secondC"
  "lickEventY_px\030\352\031 \001(\002\022\031\n\020gestureFinger_nu"
  "\030\364\007 \001(\r\022\032\n\021gestureCounter_nu\030\304\013 \001(\r\022C\n\021g"
  "estureCode_nu_u8\030\342\037 \001(\0162\'.pb.ap_hmitoap."
  "gesture_code.GestureCode\022K\n\024blindSpotVie"
  "wType_nu\030\243\035 \001(\0162,.pb.ap_hmitoap.blind_sp"
  "ot_view.BlindSpotView\022\032\n\021visibilityTags_"
  "nu\030\326\024 \003(\010\022\026\n\risSequence_nu\030\326\r \001(\010\022!\n\030sta"
  "rtVideoRecorderReq_nu\030\366\037 \001(\010\022!\n\030startScr"
  "eenCaptureReq_nu\030\353\r \001(\010\022\037\n\026rimProtection"
  "Status_nu\030\243\030 \001(\010\022\037\n\026reverseAssistStatus_"
  "nu\030\373\016 \001(\010\022e\n\032parkingAugmentationType_nu\030"
  "\362\002 \001(\0162@.pb.ap_hmitoap.parking_augmentat"
  "ion_type.ParkingAugmentationType\"M\n\026Visu"
  "HMIData_array_port\0223\n\004data\030\272\013 \003(\0132$.pb.m"
  "f_hmih.visu_hmidata.VisuHMIData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_deps[3] = {
  &::descriptor_table_ap_5fhmitoap_2fblind_5fspot_5fview_2eproto,
  &::descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto,
  &::descriptor_table_ap_5fhmitoap_2fparking_5faugmentation_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_sccs[2] = {
  &scc_info_VisuHMIData_mf_5fhmih_2fvisu_5fhmidata_2eproto.base,
  &scc_info_VisuHMIData_array_port_mf_5fhmih_2fvisu_5fhmidata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_once;
static bool descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto = {
  &descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_initialized, descriptor_table_protodef_mf_5fhmih_2fvisu_5fhmidata_2eproto, "mf_hmih/visu_hmidata.proto", 871,
  &descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_once, descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_sccs, descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_mf_5fhmih_2fvisu_5fhmidata_2eproto::offsets,
  file_level_metadata_mf_5fhmih_2fvisu_5fhmidata_2eproto, 2, file_level_enum_descriptors_mf_5fhmih_2fvisu_5fhmidata_2eproto, file_level_service_descriptors_mf_5fhmih_2fvisu_5fhmidata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fhmih_2fvisu_5fhmidata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fhmih_2fvisu_5fhmidata_2eproto), true);
namespace pb {
namespace mf_hmih {
namespace visu_hmidata {

// ===================================================================

void VisuHMIData::InitAsDefaultInstance() {
}
class VisuHMIData::_Internal {
 public:
  using HasBits = decltype(std::declval<VisuHMIData>()._has_bits_);
  static void set_has_firstclickeventx_px(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_firstclickeventy_px(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_secondclickeventx_px(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_secondclickeventy_px(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gesturefinger_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gesturecounter_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gesturecode_nu_u8(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blindspotviewtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_issequence_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_startvideorecorderreq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_startscreencapturereq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rimprotectionstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_reverseassiststatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parkingaugmentationtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VisuHMIData::VisuHMIData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.visu_hmidata.VisuHMIData)
}
VisuHMIData::VisuHMIData(const VisuHMIData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      visibilitytags_nu_(from.visibilitytags_nu_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gesturecode_nu_u8_, &from.gesturecode_nu_u8_,
    static_cast<size_t>(reinterpret_cast<char*>(&firstclickeventy_px_) -
    reinterpret_cast<char*>(&gesturecode_nu_u8_)) + sizeof(firstclickeventy_px_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.visu_hmidata.VisuHMIData)
}

void VisuHMIData::SharedCtor() {
  ::memset(&gesturecode_nu_u8_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firstclickeventy_px_) -
      reinterpret_cast<char*>(&gesturecode_nu_u8_)) + sizeof(firstclickeventy_px_));
}

VisuHMIData::~VisuHMIData() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.visu_hmidata.VisuHMIData)
  SharedDtor();
}

void VisuHMIData::SharedDtor() {
}

void VisuHMIData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisuHMIData& VisuHMIData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisuHMIData_mf_5fhmih_2fvisu_5fhmidata_2eproto.base);
  return *internal_default_instance();
}


void VisuHMIData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.visu_hmidata.VisuHMIData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visibilitytags_nu_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gesturecode_nu_u8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issequence_nu_) -
        reinterpret_cast<char*>(&gesturecode_nu_u8_)) + sizeof(issequence_nu_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&startvideorecorderreq_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&firstclickeventy_px_) -
        reinterpret_cast<char*>(&startvideorecorderreq_nu_)) + sizeof(firstclickeventy_px_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VisuHMIData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.ap_hmitoap.parking_augmentation_type.ParkingAugmentationType parkingAugmentationType_nu = 370;
      case 370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::parking_augmentation_type::ParkingAugmentationType_IsValid(val))) {
            _internal_set_parkingaugmentationtype_nu(static_cast<::pb::ap_hmitoap::parking_augmentation_type::ParkingAugmentationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(370, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 gestureFinger_nu = 1012;
      case 1012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_gesturefinger_nu(&has_bits);
          gesturefinger_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gestureCounter_nu = 1476;
      case 1476:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gesturecounter_nu(&has_bits);
          gesturecounter_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSequence_nu = 1750;
      case 1750:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_issequence_nu(&has_bits);
          issequence_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool startScreenCaptureReq_nu = 1771;
      case 1771:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_startscreencapturereq_nu(&has_bits);
          startscreencapturereq_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverseAssistStatus_nu = 1915;
      case 1915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_reverseassiststatus_nu(&has_bits);
          reverseassiststatus_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float firstClickEventX_px = 2481;
      case 2481:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_firstclickeventx_px(&has_bits);
          firstclickeventx_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool visibilityTags_nu = 2646;
      case 2646:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _internal_add_visibilitytags_nu(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_visibilitytags_nu(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float secondClickEventX_px = 2654;
      case 2654:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_secondclickeventx_px(&has_bits);
          secondclickeventx_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool rimProtectionStatus_nu = 3107;
      case 3107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rimprotectionstatus_nu(&has_bits);
          rimprotectionstatus_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float secondClickEventY_px = 3306;
      case 3306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_secondclickeventy_px(&has_bits);
          secondclickeventy_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_hmitoap.blind_spot_view.BlindSpotView blindSpotViewType_nu = 3747;
      case 3747:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::blind_spot_view::BlindSpotView_IsValid(val))) {
            _internal_set_blindspotviewtype_nu(static_cast<::pb::ap_hmitoap::blind_spot_view::BlindSpotView>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3747, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float firstClickEventY_px = 3845;
      case 3845:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_firstclickeventy_px(&has_bits);
          firstclickeventy_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_hmitoap.gesture_code.GestureCode gestureCode_nu_u8 = 4066;
      case 4066:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_hmitoap::gesture_code::GestureCode_IsValid(val))) {
            _internal_set_gesturecode_nu_u8(static_cast<::pb::ap_hmitoap::gesture_code::GestureCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4066, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool startVideoRecorderReq_nu = 4086;
      case 4086:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_startvideorecorderreq_nu(&has_bits);
          startvideorecorderreq_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisuHMIData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.visu_hmidata.VisuHMIData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_hmitoap.parking_augmentation_type.ParkingAugmentationType parkingAugmentationType_nu = 370;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      370, this->_internal_parkingaugmentationtype_nu(), target);
  }

  // optional uint32 gestureFinger_nu = 1012;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1012, this->_internal_gesturefinger_nu(), target);
  }

  // optional uint32 gestureCounter_nu = 1476;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1476, this->_internal_gesturecounter_nu(), target);
  }

  // optional bool isSequence_nu = 1750;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1750, this->_internal_issequence_nu(), target);
  }

  // optional bool startScreenCaptureReq_nu = 1771;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1771, this->_internal_startscreencapturereq_nu(), target);
  }

  // optional bool reverseAssistStatus_nu = 1915;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1915, this->_internal_reverseassiststatus_nu(), target);
  }

  // optional float firstClickEventX_px = 2481;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2481, this->_internal_firstclickeventx_px(), target);
  }

  // repeated bool visibilityTags_nu = 2646;
  for (int i = 0, n = this->_internal_visibilitytags_nu_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2646, this->_internal_visibilitytags_nu(i), target);
  }

  // optional float secondClickEventX_px = 2654;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2654, this->_internal_secondclickeventx_px(), target);
  }

  // optional bool rimProtectionStatus_nu = 3107;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3107, this->_internal_rimprotectionstatus_nu(), target);
  }

  // optional float secondClickEventY_px = 3306;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3306, this->_internal_secondclickeventy_px(), target);
  }

  // optional .pb.ap_hmitoap.blind_spot_view.BlindSpotView blindSpotViewType_nu = 3747;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3747, this->_internal_blindspotviewtype_nu(), target);
  }

  // optional float firstClickEventY_px = 3845;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3845, this->_internal_firstclickeventy_px(), target);
  }

  // optional .pb.ap_hmitoap.gesture_code.GestureCode gestureCode_nu_u8 = 4066;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4066, this->_internal_gesturecode_nu_u8(), target);
  }

  // optional bool startVideoRecorderReq_nu = 4086;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4086, this->_internal_startvideorecorderreq_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.visu_hmidata.VisuHMIData)
  return target;
}

size_t VisuHMIData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.visu_hmidata.VisuHMIData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool visibilityTags_nu = 2646;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_visibilitytags_nu_size());
    size_t data_size = 1UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_visibilitytags_nu_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.ap_hmitoap.gesture_code.GestureCode gestureCode_nu_u8 = 4066;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gesturecode_nu_u8());
    }

    // optional .pb.ap_hmitoap.parking_augmentation_type.ParkingAugmentationType parkingAugmentationType_nu = 370;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parkingaugmentationtype_nu());
    }

    // optional uint32 gestureFinger_nu = 1012;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gesturefinger_nu());
    }

    // optional uint32 gestureCounter_nu = 1476;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gesturecounter_nu());
    }

    // optional bool reverseAssistStatus_nu = 1915;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional float firstClickEventX_px = 2481;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float secondClickEventX_px = 2654;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional bool isSequence_nu = 1750;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool startVideoRecorderReq_nu = 4086;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional bool startScreenCaptureReq_nu = 1771;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool rimProtectionStatus_nu = 3107;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 1;
    }

    // optional float secondClickEventY_px = 3306;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional .pb.ap_hmitoap.blind_spot_view.BlindSpotView blindSpotViewType_nu = 3747;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blindspotviewtype_nu());
    }

    // optional float firstClickEventY_px = 3845;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisuHMIData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData)
  GOOGLE_DCHECK_NE(&from, this);
  const VisuHMIData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisuHMIData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.visu_hmidata.VisuHMIData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.visu_hmidata.VisuHMIData)
    MergeFrom(*source);
  }
}

void VisuHMIData::MergeFrom(const VisuHMIData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visibilitytags_nu_.MergeFrom(from.visibilitytags_nu_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gesturecode_nu_u8_ = from.gesturecode_nu_u8_;
    }
    if (cached_has_bits & 0x00000002u) {
      parkingaugmentationtype_nu_ = from.parkingaugmentationtype_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      gesturefinger_nu_ = from.gesturefinger_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      gesturecounter_nu_ = from.gesturecounter_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      reverseassiststatus_nu_ = from.reverseassiststatus_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      firstclickeventx_px_ = from.firstclickeventx_px_;
    }
    if (cached_has_bits & 0x00000040u) {
      secondclickeventx_px_ = from.secondclickeventx_px_;
    }
    if (cached_has_bits & 0x00000080u) {
      issequence_nu_ = from.issequence_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      startvideorecorderreq_nu_ = from.startvideorecorderreq_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      startscreencapturereq_nu_ = from.startscreencapturereq_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      rimprotectionstatus_nu_ = from.rimprotectionstatus_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      secondclickeventy_px_ = from.secondclickeventy_px_;
    }
    if (cached_has_bits & 0x00001000u) {
      blindspotviewtype_nu_ = from.blindspotviewtype_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      firstclickeventy_px_ = from.firstclickeventy_px_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisuHMIData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisuHMIData::CopyFrom(const VisuHMIData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisuHMIData::IsInitialized() const {
  return true;
}

void VisuHMIData::InternalSwap(VisuHMIData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  visibilitytags_nu_.InternalSwap(&other->visibilitytags_nu_);
  swap(gesturecode_nu_u8_, other->gesturecode_nu_u8_);
  swap(parkingaugmentationtype_nu_, other->parkingaugmentationtype_nu_);
  swap(gesturefinger_nu_, other->gesturefinger_nu_);
  swap(gesturecounter_nu_, other->gesturecounter_nu_);
  swap(reverseassiststatus_nu_, other->reverseassiststatus_nu_);
  swap(firstclickeventx_px_, other->firstclickeventx_px_);
  swap(secondclickeventx_px_, other->secondclickeventx_px_);
  swap(issequence_nu_, other->issequence_nu_);
  swap(startvideorecorderreq_nu_, other->startvideorecorderreq_nu_);
  swap(startscreencapturereq_nu_, other->startscreencapturereq_nu_);
  swap(rimprotectionstatus_nu_, other->rimprotectionstatus_nu_);
  swap(secondclickeventy_px_, other->secondclickeventy_px_);
  swap(blindspotviewtype_nu_, other->blindspotviewtype_nu_);
  swap(firstclickeventy_px_, other->firstclickeventy_px_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisuHMIData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisuHMIData_array_port::InitAsDefaultInstance() {
}
class VisuHMIData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<VisuHMIData_array_port>()._has_bits_);
};

VisuHMIData_array_port::VisuHMIData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
}
VisuHMIData_array_port::VisuHMIData_array_port(const VisuHMIData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
}

void VisuHMIData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisuHMIData_array_port_mf_5fhmih_2fvisu_5fhmidata_2eproto.base);
}

VisuHMIData_array_port::~VisuHMIData_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  SharedDtor();
}

void VisuHMIData_array_port::SharedDtor() {
}

void VisuHMIData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisuHMIData_array_port& VisuHMIData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisuHMIData_array_port_mf_5fhmih_2fvisu_5fhmidata_2eproto.base);
  return *internal_default_instance();
}


void VisuHMIData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VisuHMIData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_hmih.visu_hmidata.VisuHMIData data = 1466;
      case 1466:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<11730>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisuHMIData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.visu_hmidata.VisuHMIData data = 1466;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1466, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  return target;
}

size_t VisuHMIData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.visu_hmidata.VisuHMIData data = 1466;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisuHMIData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const VisuHMIData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisuHMIData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
    MergeFrom(*source);
  }
}

void VisuHMIData_array_port::MergeFrom(const VisuHMIData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void VisuHMIData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisuHMIData_array_port::CopyFrom(const VisuHMIData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.visu_hmidata.VisuHMIData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisuHMIData_array_port::IsInitialized() const {
  return true;
}

void VisuHMIData_array_port::InternalSwap(VisuHMIData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisuHMIData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace visu_hmidata
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::visu_hmidata::VisuHMIData* Arena::CreateMaybeMessage< ::pb::mf_hmih::visu_hmidata::VisuHMIData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::visu_hmidata::VisuHMIData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port* Arena::CreateMaybeMessage< ::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::visu_hmidata::VisuHMIData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
