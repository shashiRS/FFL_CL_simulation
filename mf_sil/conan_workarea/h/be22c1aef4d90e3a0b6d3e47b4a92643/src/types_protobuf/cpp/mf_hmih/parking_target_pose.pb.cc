// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/parking_target_pose.proto

#include "mf_hmih/parking_target_pose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fgeoml_2fpose_5fpod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto;
namespace pb {
namespace mf_hmih {
namespace parking_target_pose {
class ParkingTargetPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingTargetPose> _instance;
} _ParkingTargetPose_default_instance_;
class ParkingTargetPose_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingTargetPose_array_port> _instance;
} _ParkingTargetPose_array_port_default_instance_;
}  // namespace parking_target_pose
}  // namespace mf_hmih
}  // namespace pb
static void InitDefaultsscc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::parking_target_pose::_ParkingTargetPose_default_instance_;
    new (ptr) ::pb::mf_hmih::parking_target_pose::ParkingTargetPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::parking_target_pose::ParkingTargetPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto}, {
      &scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto.base,}};

static void InitDefaultsscc_info_ParkingTargetPose_array_port_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::parking_target_pose::_ParkingTargetPose_array_port_default_instance_;
    new (ptr) ::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingTargetPose_array_port_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingTargetPose_array_port_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto}, {
      &scc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, id_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, isfree_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, isscanned_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, isselected_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, isswitchable_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose, pose_nu_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::pb::mf_hmih::parking_target_pose::ParkingTargetPose)},
  { 17, 23, sizeof(::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::parking_target_pose::_ParkingTargetPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::parking_target_pose::_ParkingTargetPose_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!mf_hmih/parking_target_pose.proto\022\036pb."
  "mf_hmih.parking_target_pose\032\030lsm_geoml/p"
  "ose_pod.proto\"\261\001\n\021ParkingTargetPose\022\r\n\005i"
  "d_nu\030o \001(\r\022\022\n\tisFree_nu\030\354\n \001(\010\022\025\n\014isScan"
  "ned_nu\030\346\001 \001(\010\022\025\n\risSelected_nu\030= \001(\010\022\030\n\017"
  "isSwitchable_nu\030\203\003 \001(\010\0221\n\007pose_nu\030\227\001 \001(\013"
  "2\037.pb.lsm_geoml.pose_pod.Pose_POD\"`\n\034Par"
  "kingTargetPose_array_port\022@\n\004data\030\314\034 \003(\013"
  "21.pb.mf_hmih.parking_target_pose.Parkin"
  "gTargetPose"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_deps[1] = {
  &::descriptor_table_lsm_5fgeoml_2fpose_5fpod_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_sccs[2] = {
  &scc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto.base,
  &scc_info_ParkingTargetPose_array_port_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_once;
static bool descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto = {
  &descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_initialized, descriptor_table_protodef_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto, "mf_hmih/parking_target_pose.proto", 371,
  &descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_once, descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_sccs, descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto::offsets,
  file_level_metadata_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto, 2, file_level_enum_descriptors_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto, file_level_service_descriptors_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto), true);
namespace pb {
namespace mf_hmih {
namespace parking_target_pose {

// ===================================================================

void ParkingTargetPose::InitAsDefaultInstance() {
  ::pb::mf_hmih::parking_target_pose::_ParkingTargetPose_default_instance_._instance.get_mutable()->pose_nu_ = const_cast< ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      ::pb::lsm_geoml::pose_pod::Pose_POD::internal_default_instance());
}
class ParkingTargetPose::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingTargetPose>()._has_bits_);
  static void set_has_id_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isfree_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isscanned_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isselected_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isswitchable_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::lsm_geoml::pose_pod::Pose_POD& pose_nu(const ParkingTargetPose* msg);
  static void set_has_pose_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb::lsm_geoml::pose_pod::Pose_POD&
ParkingTargetPose::_Internal::pose_nu(const ParkingTargetPose* msg) {
  return *msg->pose_nu_;
}
void ParkingTargetPose::clear_pose_nu() {
  if (pose_nu_ != nullptr) pose_nu_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ParkingTargetPose::ParkingTargetPose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
}
ParkingTargetPose::ParkingTargetPose(const ParkingTargetPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose_nu()) {
    pose_nu_ = new ::pb::lsm_geoml::pose_pod::Pose_POD(*from.pose_nu_);
  } else {
    pose_nu_ = nullptr;
  }
  ::memcpy(&id_nu_, &from.id_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&isswitchable_nu_) -
    reinterpret_cast<char*>(&id_nu_)) + sizeof(isswitchable_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
}

void ParkingTargetPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto.base);
  ::memset(&pose_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isswitchable_nu_) -
      reinterpret_cast<char*>(&pose_nu_)) + sizeof(isswitchable_nu_));
}

ParkingTargetPose::~ParkingTargetPose() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  SharedDtor();
}

void ParkingTargetPose::SharedDtor() {
  if (this != internal_default_instance()) delete pose_nu_;
}

void ParkingTargetPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingTargetPose& ParkingTargetPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingTargetPose_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto.base);
  return *internal_default_instance();
}


void ParkingTargetPose::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pose_nu_ != nullptr);
    pose_nu_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&id_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isswitchable_nu_) -
        reinterpret_cast<char*>(&id_nu_)) + sizeof(isswitchable_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParkingTargetPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isSelected_nu = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_isselected_nu(&has_bits);
          isselected_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id_nu = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_id_nu(&has_bits);
          id_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_geoml.pose_pod.Pose_POD pose_nu = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_nu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isScanned_nu = 230;
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_isscanned_nu(&has_bits);
          isscanned_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isSwitchable_nu = 387;
      case 387:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isswitchable_nu(&has_bits);
          isswitchable_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isFree_nu = 1388;
      case 1388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_isfree_nu(&has_bits);
          isfree_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingTargetPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isSelected_nu = 61;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_isselected_nu(), target);
  }

  // optional uint32 id_nu = 111;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(111, this->_internal_id_nu(), target);
  }

  // optional .pb.lsm_geoml.pose_pod.Pose_POD pose_nu = 151;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        151, _Internal::pose_nu(this), target, stream);
  }

  // optional bool isScanned_nu = 230;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(230, this->_internal_isscanned_nu(), target);
  }

  // optional bool isSwitchable_nu = 387;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(387, this->_internal_isswitchable_nu(), target);
  }

  // optional bool isFree_nu = 1388;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1388, this->_internal_isfree_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  return target;
}

size_t ParkingTargetPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .pb.lsm_geoml.pose_pod.Pose_POD pose_nu = 151;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_nu_);
    }

    // optional uint32 id_nu = 111;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id_nu());
    }

    // optional bool isFree_nu = 1388;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool isScanned_nu = 230;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool isSelected_nu = 61;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool isSwitchable_nu = 387;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingTargetPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingTargetPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingTargetPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
    MergeFrom(*source);
  }
}

void ParkingTargetPose::MergeFrom(const ParkingTargetPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pose_nu()->::pb::lsm_geoml::pose_pod::Pose_POD::MergeFrom(from._internal_pose_nu());
    }
    if (cached_has_bits & 0x00000002u) {
      id_nu_ = from.id_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      isfree_nu_ = from.isfree_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      isscanned_nu_ = from.isscanned_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      isselected_nu_ = from.isselected_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      isswitchable_nu_ = from.isswitchable_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingTargetPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingTargetPose::CopyFrom(const ParkingTargetPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingTargetPose::IsInitialized() const {
  return true;
}

void ParkingTargetPose::InternalSwap(ParkingTargetPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pose_nu_, other->pose_nu_);
  swap(id_nu_, other->id_nu_);
  swap(isfree_nu_, other->isfree_nu_);
  swap(isscanned_nu_, other->isscanned_nu_);
  swap(isselected_nu_, other->isselected_nu_);
  swap(isswitchable_nu_, other->isswitchable_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingTargetPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingTargetPose_array_port::InitAsDefaultInstance() {
}
class ParkingTargetPose_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingTargetPose_array_port>()._has_bits_);
};

ParkingTargetPose_array_port::ParkingTargetPose_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
}
ParkingTargetPose_array_port::ParkingTargetPose_array_port(const ParkingTargetPose_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
}

void ParkingTargetPose_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingTargetPose_array_port_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto.base);
}

ParkingTargetPose_array_port::~ParkingTargetPose_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  SharedDtor();
}

void ParkingTargetPose_array_port::SharedDtor() {
}

void ParkingTargetPose_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingTargetPose_array_port& ParkingTargetPose_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingTargetPose_array_port_mf_5fhmih_2fparking_5ftarget_5fpose_2eproto.base);
  return *internal_default_instance();
}


void ParkingTargetPose_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParkingTargetPose_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_hmih.parking_target_pose.ParkingTargetPose data = 3660;
      case 3660:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingTargetPose_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.parking_target_pose.ParkingTargetPose data = 3660;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3660, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  return target;
}

size_t ParkingTargetPose_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.parking_target_pose.ParkingTargetPose data = 3660;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingTargetPose_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingTargetPose_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingTargetPose_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
    MergeFrom(*source);
  }
}

void ParkingTargetPose_array_port::MergeFrom(const ParkingTargetPose_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ParkingTargetPose_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingTargetPose_array_port::CopyFrom(const ParkingTargetPose_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.parking_target_pose.ParkingTargetPose_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingTargetPose_array_port::IsInitialized() const {
  return true;
}

void ParkingTargetPose_array_port::InternalSwap(ParkingTargetPose_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingTargetPose_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking_target_pose
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::parking_target_pose::ParkingTargetPose* Arena::CreateMaybeMessage< ::pb::mf_hmih::parking_target_pose::ParkingTargetPose >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::parking_target_pose::ParkingTargetPose >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port* Arena::CreateMaybeMessage< ::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::parking_target_pose::ParkingTargetPose_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
