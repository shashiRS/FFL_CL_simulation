// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/taposddebug_port.proto

#include "ap_tp/taposddebug_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fpose_5fbox_5fdataset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseBoxDataset_ap_5ftp_2fpose_5fbox_5fdataset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ftaposddebug_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_tp {
namespace taposddebug_port {
class TAPOSDDebugPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TAPOSDDebugPort> _instance;
} _TAPOSDDebugPort_default_instance_;
class TAPOSDDebugPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TAPOSDDebugPort_array_port> _instance;
} _TAPOSDDebugPort_array_port_default_instance_;
}  // namespace taposddebug_port
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::taposddebug_port::_TAPOSDDebugPort_default_instance_;
    new (ptr) ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base,
      &scc_info_PoseBoxDataset_ap_5ftp_2fpose_5fbox_5fdataset_2eproto.base,}};

static void InitDefaultsscc_info_TAPOSDDebugPort_array_port_ap_5ftp_2ftaposddebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::taposddebug_port::_TAPOSDDebugPort_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TAPOSDDebugPort_array_port_ap_5ftp_2ftaposddebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TAPOSDDebugPort_array_port_ap_5ftp_2ftaposddebug_5fport_2eproto}, {
      &scc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2ftaposddebug_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2ftaposddebug_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2ftaposddebug_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2ftaposddebug_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, pbdebugbackwards_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, pbdebugforwards_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, poseboxdataset_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, latdisttotarget_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, longdisttotarget_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, yawdifftotarget_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, debugint_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort, debugfloat_),
  3,
  0,
  ~0u,
  ~0u,
  1,
  4,
  2,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort)},
  { 25, 31, sizeof(::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::taposddebug_port::_TAPOSDDebugPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::taposddebug_port::_TAPOSDDebugPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2ftaposddebug_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ap_tp/taposddebug_port.proto\022\031pb.ap_tp"
  ".taposddebug_port\032\027eco/signal_header.pro"
  "to\032\"ap_tp/parking_box_debug_info.proto\032\034"
  "ap_tp/pose_box_dataset.proto\"\310\003\n\017TAPOSDD"
  "ebugPort\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsS"
  "igHeader\030\211\010 \001(\0132\".pb.eco.signal_header.S"
  "ignalHeader\022O\n\020pbDebugBackwards\030\312\010 \003(\01324"
  ".pb.ap_tp.parking_box_debug_info.Parking"
  "BoxDebugInfo\022N\n\017pbDebugForwards\030\273\023 \003(\01324"
  ".pb.ap_tp.parking_box_debug_info.Parking"
  "BoxDebugInfo\022B\n\016poseBoxDataset\030\203\033 \001(\0132)."
  "pb.ap_tp.pose_box_dataset.PoseBoxDataset"
  "\022\032\n\021latDistToTarget_m\030\207\026 \001(\002\022\033\n\022longDist"
  "ToTarget_m\030\313\016 \001(\002\022\034\n\023yawDiffToTarget_rad"
  "\030\277\036 \001(\002\022\021\n\010debugInt\030\316\t \003(\021\022\023\n\ndebugFloat"
  "\030\371\017 \003(\002\"W\n\032TAPOSDDebugPort_array_port\0229\n"
  "\004data\030\354\037 \003(\0132*.pb.ap_tp.taposddebug_port"
  ".TAPOSDDebugPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_deps[3] = {
  &::descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto,
  &::descriptor_table_ap_5ftp_2fpose_5fbox_5fdataset_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_sccs[2] = {
  &scc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto.base,
  &scc_info_TAPOSDDebugPort_array_port_ap_5ftp_2ftaposddebug_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_once;
static bool descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto = {
  &descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2ftaposddebug_5fport_2eproto, "ap_tp/taposddebug_port.proto", 696,
  &descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_once, descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_sccs, descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_ap_5ftp_2ftaposddebug_5fport_2eproto::offsets,
  file_level_metadata_ap_5ftp_2ftaposddebug_5fport_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2ftaposddebug_5fport_2eproto, file_level_service_descriptors_ap_5ftp_2ftaposddebug_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2ftaposddebug_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2ftaposddebug_5fport_2eproto), true);
namespace pb {
namespace ap_tp {
namespace taposddebug_port {

// ===================================================================

void TAPOSDDebugPort::InitAsDefaultInstance() {
  ::pb::ap_tp::taposddebug_port::_TAPOSDDebugPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::ap_tp::taposddebug_port::_TAPOSDDebugPort_default_instance_._instance.get_mutable()->poseboxdataset_ = const_cast< ::pb::ap_tp::pose_box_dataset::PoseBoxDataset*>(
      ::pb::ap_tp::pose_box_dataset::PoseBoxDataset::internal_default_instance());
}
class TAPOSDDebugPort::_Internal {
 public:
  using HasBits = decltype(std::declval<TAPOSDDebugPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const TAPOSDDebugPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::ap_tp::pose_box_dataset::PoseBoxDataset& poseboxdataset(const TAPOSDDebugPort* msg);
  static void set_has_poseboxdataset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latdisttotarget_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longdisttotarget_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yawdifftotarget_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
TAPOSDDebugPort::_Internal::ssigheader(const TAPOSDDebugPort* msg) {
  return *msg->ssigheader_;
}
const ::pb::ap_tp::pose_box_dataset::PoseBoxDataset&
TAPOSDDebugPort::_Internal::poseboxdataset(const TAPOSDDebugPort* msg) {
  return *msg->poseboxdataset_;
}
void TAPOSDDebugPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TAPOSDDebugPort::clear_pbdebugbackwards() {
  pbdebugbackwards_.Clear();
}
void TAPOSDDebugPort::clear_pbdebugforwards() {
  pbdebugforwards_.Clear();
}
void TAPOSDDebugPort::clear_poseboxdataset() {
  if (poseboxdataset_ != nullptr) poseboxdataset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TAPOSDDebugPort::TAPOSDDebugPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
}
TAPOSDDebugPort::TAPOSDDebugPort(const TAPOSDDebugPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pbdebugbackwards_(from.pbdebugbackwards_),
      debugint_(from.debugint_),
      debugfloat_(from.debugfloat_),
      pbdebugforwards_(from.pbdebugforwards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_poseboxdataset()) {
    poseboxdataset_ = new ::pb::ap_tp::pose_box_dataset::PoseBoxDataset(*from.poseboxdataset_);
  } else {
    poseboxdataset_ = nullptr;
  }
  ::memcpy(&longdisttotarget_m_, &from.longdisttotarget_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&yawdifftotarget_rad_) -
    reinterpret_cast<char*>(&longdisttotarget_m_)) + sizeof(yawdifftotarget_rad_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
}

void TAPOSDDebugPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawdifftotarget_rad_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(yawdifftotarget_rad_));
}

TAPOSDDebugPort::~TAPOSDDebugPort() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  SharedDtor();
}

void TAPOSDDebugPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete poseboxdataset_;
}

void TAPOSDDebugPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TAPOSDDebugPort& TAPOSDDebugPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TAPOSDDebugPort_ap_5ftp_2ftaposddebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void TAPOSDDebugPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdebugbackwards_.Clear();
  debugint_.Clear();
  debugfloat_.Clear();
  pbdebugforwards_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poseboxdataset_ != nullptr);
      poseboxdataset_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&longdisttotarget_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yawdifftotarget_rad_) -
        reinterpret_cast<char*>(&longdisttotarget_m_)) + sizeof(yawdifftotarget_rad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TAPOSDDebugPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo pbDebugBackwards = 1098;
      case 1098:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pbdebugbackwards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8786>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated sint32 debugInt = 1230;
      case 1230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9840>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_debugint(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float longDistToTarget_m = 1867;
      case 1867:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_longdisttotarget_m(&has_bits);
          longdisttotarget_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float debugFloat = 2041;
      case 2041:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugfloat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16333>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_debugfloat(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo pbDebugForwards = 2491;
      case 2491:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_add_pbdebugforwards(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float latDistToTarget_m = 2823;
      case 2823:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_latdisttotarget_m(&has_bits);
          latdisttotarget_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.pose_box_dataset.PoseBoxDataset poseBoxDataset = 3459;
      case 3459:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poseboxdataset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float yawDiffToTarget_rad = 3903;
      case 3903:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_yawdifftotarget_rad(&has_bits);
          yawdifftotarget_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TAPOSDDebugPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo pbDebugBackwards = 1098;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pbdebugbackwards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1098, this->_internal_pbdebugbackwards(i), target, stream);
  }

  // repeated sint32 debugInt = 1230;
  for (int i = 0, n = this->_internal_debugint_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1230, this->_internal_debugint(i), target);
  }

  // optional float longDistToTarget_m = 1867;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1867, this->_internal_longdisttotarget_m(), target);
  }

  // repeated float debugFloat = 2041;
  for (int i = 0, n = this->_internal_debugfloat_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2041, this->_internal_debugfloat(i), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo pbDebugForwards = 2491;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pbdebugforwards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2491, this->_internal_pbdebugforwards(i), target, stream);
  }

  // optional float latDistToTarget_m = 2823;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2823, this->_internal_latdisttotarget_m(), target);
  }

  // optional .pb.ap_tp.pose_box_dataset.PoseBoxDataset poseBoxDataset = 3459;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3459, _Internal::poseboxdataset(this), target, stream);
  }

  // optional float yawDiffToTarget_rad = 3903;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3903, this->_internal_yawdifftotarget_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  return target;
}

size_t TAPOSDDebugPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo pbDebugBackwards = 1098;
  total_size += 2UL * this->_internal_pbdebugbackwards_size();
  for (const auto& msg : this->pbdebugbackwards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated sint32 debugInt = 1230;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->debugint_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugint_size());
    total_size += data_size;
  }

  // repeated float debugFloat = 2041;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_debugfloat_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugfloat_size());
    total_size += data_size;
  }

  // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo pbDebugForwards = 2491;
  total_size += 3UL * this->_internal_pbdebugforwards_size();
  for (const auto& msg : this->pbdebugforwards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.ap_tp.pose_box_dataset.PoseBoxDataset poseBoxDataset = 3459;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poseboxdataset_);
    }

    // optional float longDistToTarget_m = 1867;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float latDistToTarget_m = 2823;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float yawDiffToTarget_rad = 3903;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TAPOSDDebugPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  const TAPOSDDebugPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TAPOSDDebugPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
    MergeFrom(*source);
  }
}

void TAPOSDDebugPort::MergeFrom(const TAPOSDDebugPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pbdebugbackwards_.MergeFrom(from.pbdebugbackwards_);
  debugint_.MergeFrom(from.debugint_);
  debugfloat_.MergeFrom(from.debugfloat_);
  pbdebugforwards_.MergeFrom(from.pbdebugforwards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_poseboxdataset()->::pb::ap_tp::pose_box_dataset::PoseBoxDataset::MergeFrom(from._internal_poseboxdataset());
    }
    if (cached_has_bits & 0x00000004u) {
      longdisttotarget_m_ = from.longdisttotarget_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000010u) {
      latdisttotarget_m_ = from.latdisttotarget_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      yawdifftotarget_rad_ = from.yawdifftotarget_rad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TAPOSDDebugPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAPOSDDebugPort::CopyFrom(const TAPOSDDebugPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAPOSDDebugPort::IsInitialized() const {
  return true;
}

void TAPOSDDebugPort::InternalSwap(TAPOSDDebugPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pbdebugbackwards_.InternalSwap(&other->pbdebugbackwards_);
  debugint_.InternalSwap(&other->debugint_);
  debugfloat_.InternalSwap(&other->debugfloat_);
  pbdebugforwards_.InternalSwap(&other->pbdebugforwards_);
  swap(ssigheader_, other->ssigheader_);
  swap(poseboxdataset_, other->poseboxdataset_);
  swap(longdisttotarget_m_, other->longdisttotarget_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(latdisttotarget_m_, other->latdisttotarget_m_);
  swap(yawdifftotarget_rad_, other->yawdifftotarget_rad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TAPOSDDebugPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TAPOSDDebugPort_array_port::InitAsDefaultInstance() {
}
class TAPOSDDebugPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<TAPOSDDebugPort_array_port>()._has_bits_);
};

TAPOSDDebugPort_array_port::TAPOSDDebugPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
}
TAPOSDDebugPort_array_port::TAPOSDDebugPort_array_port(const TAPOSDDebugPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
}

void TAPOSDDebugPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TAPOSDDebugPort_array_port_ap_5ftp_2ftaposddebug_5fport_2eproto.base);
}

TAPOSDDebugPort_array_port::~TAPOSDDebugPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  SharedDtor();
}

void TAPOSDDebugPort_array_port::SharedDtor() {
}

void TAPOSDDebugPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TAPOSDDebugPort_array_port& TAPOSDDebugPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TAPOSDDebugPort_array_port_ap_5ftp_2ftaposddebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void TAPOSDDebugPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TAPOSDDebugPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.taposddebug_port.TAPOSDDebugPort data = 4076;
      case 4076:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TAPOSDDebugPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.taposddebug_port.TAPOSDDebugPort data = 4076;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4076, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  return target;
}

size_t TAPOSDDebugPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.taposddebug_port.TAPOSDDebugPort data = 4076;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TAPOSDDebugPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const TAPOSDDebugPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TAPOSDDebugPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
    MergeFrom(*source);
  }
}

void TAPOSDDebugPort_array_port::MergeFrom(const TAPOSDDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TAPOSDDebugPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAPOSDDebugPort_array_port::CopyFrom(const TAPOSDDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.taposddebug_port.TAPOSDDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAPOSDDebugPort_array_port::IsInitialized() const {
  return true;
}

void TAPOSDDebugPort_array_port::InternalSwap(TAPOSDDebugPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TAPOSDDebugPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace taposddebug_port
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort* Arena::CreateMaybeMessage< ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::taposddebug_port::TAPOSDDebugPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
