// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/fc_taposd_params.proto

#include "ap_tp/fc_taposd_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_tp {
namespace fc_taposd_params {
class FC_TAPOSD_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TAPOSD_Params> _instance;
} _FC_TAPOSD_Params_default_instance_;
class FC_TAPOSD_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TAPOSD_Params_array_port> _instance;
} _FC_TAPOSD_Params_array_port_default_instance_;
}  // namespace fc_taposd_params
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::fc_taposd_params::_FC_TAPOSD_Params_default_instance_;
    new (ptr) ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_TAPOSD_Params_array_port_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::fc_taposd_params::_FC_TAPOSD_Params_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TAPOSD_Params_array_port_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TAPOSD_Params_array_port_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto}, {
      &scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_update_lat_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_update_long_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_upd_yaw_par_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_min_obj_exist_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pos_def_approach_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_par_pose_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_par_pose_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_par_pose_yaw_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_pose_right_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_pose_y_left_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_pose_y_right_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_pose_y_r_bwd_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_dev_lat_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_dev_yaw_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_par_safety_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_len_irrelevant_area_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_len_irrelevant_area_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pin_par_pose_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pin_par_pose_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pin_par_pose_yaw_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pin_perp_pose_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pin_perp_pose_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pin_perp_pose_yaw_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_min_pbox_exist_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_update_pose_last_stroke_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_update_lat_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_update_long_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_upd_yaw_perp_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_update_long_only_par_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_pose_left_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_maxcomfpos_int_tol_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_lateral_deviation_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_yaw_ang_pbox_ori_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_cor_offs_front_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_cor_offs_rear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_cor_offs_slots_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_cor_offs_oppos_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_min_lateral_deviation_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_marking_ang_dev_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_min_length_marking_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_extent_max_box_roadside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_delim_dist_to_box_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_gp_pose_freeze_radius_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_update_lat_gp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_update_long_gp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_dev_upd_yaw_gp_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_gp_out_gap_entrance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_gp_out_reached_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_gp_reached_dev_box_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_gp_reached_dev_long_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_gp_inside_lat_center_only_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_axis_min_outside_garage_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_actual_length_pose_history_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_virtualline_ang_dev_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_shortside_parkmarking_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_longside_parkmarking_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_shortside_curb_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_longside_curb_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_shortside_virtualline_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_longside_virtualline_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_shortside_lanebound_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_longside_lanebound_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_weight_fallback_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_ori_categ_score_fallback_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_del_rel_otherw_curb_assignment_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_min_ang_tresh_cmf_box_limit_angled_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_ang_tresh_cmf_box_limit_angled_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_wheel_dist_to_wheelstopper_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_urgent_update_dev_factor_perp_long_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_urgent_update_dev_factor_perp_lat_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_urgent_update_dev_factor_perp_ang_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_urgent_update_dev_factor_par_long_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_urgent_update_dev_factor_par_lat_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_urgent_update_dev_factor_par_ang_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_max_curb_del_dist_to_roadside_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params, ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_),
  33,
  0,
  58,
  39,
  36,
  61,
  45,
  14,
  18,
  40,
  29,
  51,
  25,
  70,
  49,
  13,
  65,
  50,
  57,
  32,
  78,
  19,
  20,
  15,
  9,
  21,
  41,
  68,
  27,
  55,
  42,
  54,
  11,
  8,
  43,
  24,
  4,
  17,
  16,
  72,
  26,
  71,
  10,
  35,
  60,
  12,
  79,
  37,
  3,
  7,
  53,
  64,
  44,
  48,
  6,
  66,
  38,
  46,
  77,
  52,
  69,
  62,
  67,
  47,
  76,
  23,
  31,
  2,
  5,
  56,
  63,
  30,
  73,
  75,
  22,
  74,
  28,
  59,
  1,
  34,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 85, sizeof(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params)},
  { 165, 171, sizeof(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::fc_taposd_params::_FC_TAPOSD_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::fc_taposd_params::_FC_TAPOSD_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ap_tp/fc_taposd_params.proto\022\031pb.ap_tp"
  ".fc_taposd_params\032\027eco/signal_header.pro"
  "to\032\034ap_tp/pos_def_approach.proto\"\367\032\n\020FC_"
  "TAPOSD_Params\022\030\n\017uiVersionNumber\030\314\020 \001(\r\022"
  "7\n\nsSigHeader\030\211\010 \001(\0132\".pb.eco.signal_hea"
  "der.SignalHeader\022&\n\035AP_T_MAX_DEV_UPDATE_"
  "LAT_PAR_M\030\223\032 \001(\002\022\'\n\036AP_T_MAX_DEV_UPDATE_"
  "LONG_PAR_M\030\364\022 \001(\002\022%\n\034AP_T_MAX_DEV_UPD_YA"
  "W_PAR_RAD\030\234\021 \001(\002\022 \n\027AP_T_MIN_OBJ_EXIST_P"
  "ERC\030\275\032 \001(\r\022I\n\025AP_T_POS_DEF_APPROACH\030\374\023 \001"
  "(\0162).pb.ap_tp.pos_def_approach.PosDefApp"
  "roach\022\037\n\026AP_T_POUT_PAR_POSE_X_M\030\270\007 \001(\002\022\037"
  "\n\026AP_T_POUT_PAR_POSE_Y_M\030\210\t \001(\002\022#\n\032AP_T_"
  "POUT_PAR_POSE_YAW_RAD\030\203\023 \001(\002\022$\n\033AP_T_POU"
  "T_PERP_POSE_RIGHT_M\030\225\016 \001(\002\022%\n\034AP_T_POUT_"
  "PERP_POSE_Y_LEFT_M\030\333\027 \001(\002\022&\n\035AP_T_POUT_P"
  "ERP_POSE_Y_RIGHT_M\030\266\014 \001(\002\022&\n\035AP_T_POUT_P"
  "ERP_POSE_Y_R_BWD_M\030\256\034 \001(\002\022!\n\030AP_T_POUT_P"
  "ERP_DEV_LAT_M\030\360\026 \001(\002\022#\n\032AP_T_POUT_PERP_D"
  "EV_YAW_RAD\030\347\006 \001(\002\022$\n\033AP_T_POUT_PAR_SAFET"
  "Y_DIST_M\030\331\033 \001(\002\022%\n\034AP_T_LEN_IRRELEVANT_A"
  "REA_X_M\030\301\027 \001(\002\022%\n\034AP_T_LEN_IRRELEVANT_AR"
  "EA_Y_M\030\361\031 \001(\002\022\036\n\025AP_T_PIN_PAR_POSE_X_M\030\242"
  "\020 \001(\002\022\036\n\025AP_T_PIN_PAR_POSE_Y_M\030\222\036 \001(\002\022\"\n"
  "\031AP_T_PIN_PAR_POSE_YAW_RAD\030\215\t \001(\002\022\037\n\026AP_"
  "T_PIN_PERP_POSE_X_M\030\317\t \001(\002\022\037\n\026AP_T_PIN_P"
  "ERP_POSE_Y_M\030\377\007 \001(\002\022#\n\032AP_T_PIN_PERP_POS"
  "E_YAW_RAD\030\370\004 \001(\002\022!\n\030AP_T_MIN_PBOX_EXIST_"
  "PERC\030\347\t \001(\r\022(\n\037AP_T_UPDATE_POSE_LAST_STR"
  "OKE_NU\030\377\031 \001(\010\022\'\n\036AP_T_MAX_DEV_UPDATE_LAT"
  "_PERP_M\030\210\034 \001(\002\022(\n\037AP_T_MAX_DEV_UPDATE_LO"
  "NG_PERP_M\030\223\r \001(\002\022&\n\035AP_T_MAX_DEV_UPD_YAW"
  "_PERP_RAD\030\277\031 \001(\002\022%\n\034AP_T_UPDATE_LONG_ONL"
  "Y_PAR_NU\030\271\017 \001(\010\022#\n\032AP_T_POUT_PERP_POSE_L"
  "EFT_M\030\302\030 \001(\002\022\"\n\031AP_T_MAXCOMFPOS_INT_TOL_"
  "M\030\342\006 \001(\002\022%\n\034AP_T_MAX_LATERAL_DEVIATION_M"
  "\030\342\004 \001(\002\022!\n\030AP_T_YAW_ANG_PBOX_ORI_NU\030\202\007 \001"
  "(\010\022(\n\037AP_T_POUT_PERP_COR_OFFS_FRONT_M\030\207\014"
  " \001(\002\022\'\n\036AP_T_POUT_PERP_COR_OFFS_REAR_M\030\240"
  "\002 \001(\002\022(\n\037AP_T_POUT_PERP_COR_OFFS_SLOTS_M"
  "\030\340\010 \001(\002\022(\n\037AP_T_POUT_PERP_COR_OFFS_OPPOS"
  "_M\030\214\010 \001(\002\022%\n\034AP_T_MIN_LATERAL_DEVIATION_"
  "M\030\372\034 \001(\002\022%\n\034AP_T_MAX_MARKING_ANG_DEV_RAD"
  "\030\217\r \001(\002\022\"\n\031AP_T_MIN_LENGTH_MARKING_M\030\347\034 "
  "\001(\002\022\'\n\036AP_T_EXTENT_MAX_BOX_ROADSIDE_M\030\334\006"
  " \001(\002\022%\n\034AP_T_MAX_DELIM_DIST_TO_BOX_M\030\343\020 "
  "\001(\002\022%\n\034AP_T_GP_POSE_FREEZE_RADIUS_M\030\265\032 \001"
  "(\002\022%\n\034AP_T_MAX_DEV_UPDATE_LAT_GP_M\030\345\006 \001("
  "\002\022\'\n\035AP_T_MAX_DEV_UPDATE_LONG_GP_M\030\357\232i \001"
  "(\002\022$\n\033AP_T_MAX_DEV_UPD_YAW_GP_RAD\030\327\021 \001(\002"
  "\022#\n\032AP_T_GP_OUT_GAP_ENTRANCE_M\030\320\001 \001(\002\022\036\n"
  "\025AP_T_GP_OUT_REACHED_M\030\316\004 \001(\002\022\"\n\031AP_T_GP"
  "_REACHED_DEV_BOX_M\030\271\030 \001(\002\022#\n\032AP_T_GP_REA"
  "CHED_DEV_LONG_M\030\264\033 \001(\002\022\'\n\036AP_T_GP_INSIDE"
  "_LAT_CENTER_ONLY\030\376\034 \001(\010\022\'\n\036AP_T_AXIS_MIN"
  "_OUTSIDE_GARAGE_M\030\330\026 \001(\002\022(\n\037AP_T_ACTUAL_"
  "LENGTH_POSE_HISTORY\030\277\004 \001(\r\022)\n AP_T_MAX_V"
  "IRTUALLINE_ANG_DEV_RAD\030\355\033 \001(\002\0227\n.AP_T_OR"
  "I_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU\030"
  "\351\022 \001(\002\0226\n-AP_T_ORI_CATEG_WEIGHT_LONGSIDE"
  "_PARKMARKING_NU\030\205\024 \001(\002\0220\n\'AP_T_ORI_CATEG"
  "_WEIGHT_SHORTSIDE_CURB_NU\030\206\036 \001(\002\022/\n&AP_T"
  "_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU\030\214\030 \001("
  "\002\0227\n.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIR"
  "TUALLINE_NU\030\216\034 \001(\002\0226\n-AP_T_ORI_CATEG_WEI"
  "GHT_LONGSIDE_VIRTUALLINE_NU\030\342\032 \001(\002\0225\n,AP"
  "_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_"
  "NU\030\370\033 \001(\002\0224\n+AP_T_ORI_CATEG_WEIGHT_LONGS"
  "IDE_LANEBOUND_NU\030\351\025 \001(\002\022*\n!AP_T_ORI_CATE"
  "G_WEIGHT_FALLBACK_NU\030\354\035 \001(\002\022(\n\037AP_T_ORI_"
  "CATEG_SCORE_FALLBACK_M\030\347\013 \001(\002\0225\n,AP_T_DE"
  "L_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU\030\341\016"
  " \001(\002\0224\n+AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT"
  "_PA_PER_DEG\030\314\001 \001(\002\0224\n+AP_T_MAX_ANG_TRESH"
  "_CMF_BOX_LIMIT_PA_PER_DEG\030\247\003 \001(\002\0224\n+AP_T"
  "_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG\030"
  "\352\031 \001(\002\0224\n+AP_T_MAX_ANG_TRESH_CMF_BOX_LIM"
  "IT_ANGLED_DEG\030\201\033 \001(\002\022*\n!AP_T_WHEEL_DIST_"
  "TO_WHEELSTOPPER_M\030\333\016 \001(\002\0223\n*AP_T_URGENT_"
  "UPDATE_DEV_FACTOR_PERP_LONG_NU\030\202\035 \001(\002\0222\n"
  ")AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_"
  "NU\030\310\035 \001(\002\0222\n)AP_T_URGENT_UPDATE_DEV_FACT"
  "OR_PERP_ANG_NU\030\211\n \001(\002\0222\n)AP_T_URGENT_UPD"
  "ATE_DEV_FACTOR_PAR_LONG_NU\030\244\035 \001(\002\0221\n(AP_"
  "T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU\030\324\r"
  " \001(\002\0221\n(AP_T_URGENT_UPDATE_DEV_FACTOR_PA"
  "R_ANG_NU\030\225\032 \001(\002\0220\n(AP_T_MAX_CURB_DEL_DIS"
  "T_TO_ROADSIDE_PAR_M\030N \001(\002\0227\n.AP_T_POUT_P"
  "ERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M\030\336\020 \001"
  "(\002\"Y\n\033FC_TAPOSD_Params_array_port\022:\n\004dat"
  "a\030\313\017 \003(\0132+.pb.ap_tp.fc_taposd_params.FC_"
  "TAPOSD_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_deps[2] = {
  &::descriptor_table_ap_5ftp_2fpos_5fdef_5fapproach_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base,
  &scc_info_FC_TAPOSD_Params_array_port_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_once;
static bool descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto = {
  &descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto, "ap_tp/fc_taposd_params.proto", 3653,
  &descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_once, descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_sccs, descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto::offsets,
  file_level_metadata_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto, file_level_service_descriptors_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto), true);
namespace pb {
namespace ap_tp {
namespace fc_taposd_params {

// ===================================================================

void FC_TAPOSD_Params::InitAsDefaultInstance() {
  ::pb::ap_tp::fc_taposd_params::_FC_TAPOSD_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_TAPOSD_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TAPOSD_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_TAPOSD_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_t_max_dev_update_lat_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_ap_t_max_dev_update_long_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_ap_t_max_dev_upd_yaw_par_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ap_t_min_obj_exist_perc(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_ap_t_pos_def_approach(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_ap_t_pout_par_pose_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_t_pout_par_pose_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ap_t_pout_par_pose_yaw_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_ap_t_pout_perp_pose_right_m(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ap_t_pout_perp_pose_y_left_m(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_ap_t_pout_perp_pose_y_right_m(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ap_t_pout_perp_pose_y_r_bwd_m(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_ap_t_pout_perp_dev_lat_m(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_ap_t_pout_perp_dev_yaw_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ap_t_pout_par_safety_dist_m(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_ap_t_len_irrelevant_area_x_m(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_ap_t_len_irrelevant_area_y_m(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_ap_t_pin_par_pose_x_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ap_t_pin_par_pose_y_m(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_ap_t_pin_par_pose_yaw_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ap_t_pin_perp_pose_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ap_t_pin_perp_pose_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ap_t_pin_perp_pose_yaw_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ap_t_min_pbox_exist_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ap_t_update_pose_last_stroke_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_ap_t_max_dev_update_lat_perp_m(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_ap_t_max_dev_update_long_perp_m(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ap_t_max_dev_upd_yaw_perp_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_ap_t_update_long_only_par_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_ap_t_pout_perp_pose_left_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_ap_t_maxcomfpos_int_tol_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ap_t_max_lateral_deviation_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_t_yaw_ang_pbox_ori_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_ap_t_pout_perp_cor_offs_front_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ap_t_pout_perp_cor_offs_rear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_t_pout_perp_cor_offs_slots_m(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ap_t_pout_perp_cor_offs_oppos_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ap_t_min_lateral_deviation_m(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_ap_t_max_marking_ang_dev_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ap_t_min_length_marking_m(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_ap_t_extent_max_box_roadside_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ap_t_max_delim_dist_to_box_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ap_t_gp_pose_freeze_radius_m(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_ap_t_max_dev_update_lat_gp_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ap_t_max_dev_update_long_gp_m(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_ap_t_max_dev_upd_yaw_gp_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ap_t_gp_out_gap_entrance_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_t_gp_out_reached_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_t_gp_reached_dev_box_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_ap_t_gp_reached_dev_long_m(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_ap_t_gp_inside_lat_center_only(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_ap_t_axis_min_outside_garage_m(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_ap_t_actual_length_pose_history(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_t_max_virtualline_ang_dev_rad(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_ap_t_ori_categ_weight_shortside_parkmarking_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ap_t_ori_categ_weight_longside_parkmarking_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_ap_t_ori_categ_weight_shortside_curb_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_ap_t_ori_categ_weight_longside_curb_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_ap_t_ori_categ_weight_shortside_virtualline_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_ap_t_ori_categ_weight_longside_virtualline_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_ap_t_ori_categ_weight_shortside_lanebound_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_ap_t_ori_categ_weight_longside_lanebound_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_ap_t_ori_categ_weight_fallback_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_ap_t_ori_categ_score_fallback_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ap_t_del_rel_otherw_curb_assignment_ratio_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_ap_t_wheel_dist_to_wheelstopper_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ap_t_urgent_update_dev_factor_perp_long_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_ap_t_urgent_update_dev_factor_perp_lat_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_ap_t_urgent_update_dev_factor_perp_ang_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ap_t_urgent_update_dev_factor_par_long_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_ap_t_urgent_update_dev_factor_par_lat_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ap_t_urgent_update_dev_factor_par_ang_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_ap_t_max_curb_del_dist_to_roadside_par_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_TAPOSD_Params::_Internal::ssigheader(const FC_TAPOSD_Params* msg) {
  return *msg->ssigheader_;
}
void FC_TAPOSD_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_TAPOSD_Params::FC_TAPOSD_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
}
FC_TAPOSD_Params::FC_TAPOSD_Params(const FC_TAPOSD_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&ap_t_max_curb_del_dist_to_roadside_par_m_, &from.ap_t_max_curb_del_dist_to_roadside_par_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_t_max_dev_update_long_gp_m_) -
    reinterpret_cast<char*>(&ap_t_max_curb_del_dist_to_roadside_par_m_)) + sizeof(ap_t_max_dev_update_long_gp_m_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
}

void FC_TAPOSD_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_t_max_dev_update_long_gp_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(ap_t_max_dev_update_long_gp_m_));
}

FC_TAPOSD_Params::~FC_TAPOSD_Params() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  SharedDtor();
}

void FC_TAPOSD_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_TAPOSD_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TAPOSD_Params& FC_TAPOSD_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TAPOSD_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ap_t_max_curb_del_dist_to_roadside_par_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_gp_out_reached_m_) -
        reinterpret_cast<char*>(&ap_t_max_curb_del_dist_to_roadside_par_m_)) + sizeof(ap_t_gp_out_reached_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_t_max_lateral_deviation_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_pin_perp_pose_y_m_) -
        reinterpret_cast<char*>(&ap_t_max_lateral_deviation_m_)) + sizeof(ap_t_pin_perp_pose_y_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_t_pout_perp_cor_offs_oppos_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_ori_categ_score_fallback_m_) -
        reinterpret_cast<char*>(&ap_t_pout_perp_cor_offs_oppos_m_)) + sizeof(ap_t_ori_categ_score_fallback_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_t_pout_perp_cor_offs_front_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_del_rel_otherw_curb_assignment_ratio_nu_) -
        reinterpret_cast<char*>(&ap_t_pout_perp_cor_offs_front_m_)) + sizeof(ap_t_del_rel_otherw_curb_assignment_ratio_nu_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_t_pin_par_pose_x_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_max_dev_update_long_par_m_) -
        reinterpret_cast<char*>(&ap_t_pin_par_pose_x_m_)) + sizeof(ap_t_max_dev_update_long_par_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_t_pout_par_pose_yaw_rad_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_ori_categ_weight_longside_lanebound_nu_) -
        reinterpret_cast<char*>(&ap_t_pout_par_pose_yaw_rad_)) + sizeof(ap_t_ori_categ_weight_longside_lanebound_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_t_axis_min_outside_garage_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_max_dev_upd_yaw_perp_rad_) -
        reinterpret_cast<char*>(&ap_t_axis_min_outside_garage_m_)) + sizeof(ap_t_max_dev_upd_yaw_perp_rad_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_t_min_ang_tresh_cmf_box_limit_angled_deg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_max_ang_tresh_cmf_box_limit_angled_deg_) -
        reinterpret_cast<char*>(&ap_t_min_ang_tresh_cmf_box_limit_angled_deg_)) + sizeof(ap_t_max_ang_tresh_cmf_box_limit_angled_deg_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_t_gp_reached_dev_long_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_min_length_marking_m_) -
        reinterpret_cast<char*>(&ap_t_gp_reached_dev_long_m_)) + sizeof(ap_t_min_length_marking_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_t_min_lateral_deviation_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_t_max_dev_update_long_gp_m_) -
        reinterpret_cast<char*>(&ap_t_min_lateral_deviation_m_)) + sizeof(ap_t_max_dev_update_long_gp_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TAPOSD_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float AP_T_MAX_CURB_DEL_DIST_TO_ROADSIDE_PAR_M = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_t_max_curb_del_dist_to_roadside_par_m(&_has_bits_);
          ap_t_max_curb_del_dist_to_roadside_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(&_has_bits_);
          ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_GP_OUT_GAP_ENTRANCE_M = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_t_gp_out_gap_entrance_m(&_has_bits_);
          ap_t_gp_out_gap_entrance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_COR_OFFS_REAR_M = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_t_pout_perp_cor_offs_rear_m(&_has_bits_);
          ap_t_pout_perp_cor_offs_rear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 423;
      case 423:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(&_has_bits_);
          ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_T_ACTUAL_LENGTH_POSE_HISTORY = 575;
      case 575:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_ap_t_actual_length_pose_history(&_has_bits_);
          ap_t_actual_length_pose_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_GP_OUT_REACHED_M = 590;
      case 590:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_t_gp_out_reached_m(&_has_bits_);
          ap_t_gp_out_reached_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_LATERAL_DEVIATION_M = 610;
      case 610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_t_max_lateral_deviation_m(&_has_bits_);
          ap_t_max_lateral_deviation_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_PIN_PERP_POSE_YAW_RAD = 632;
      case 632:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_t_pin_perp_pose_yaw_rad(&_has_bits_);
          ap_t_pin_perp_pose_yaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_EXTENT_MAX_BOX_ROADSIDE_M = 860;
      case 860:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_t_extent_max_box_roadside_m(&_has_bits_);
          ap_t_extent_max_box_roadside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAXCOMFPOS_INT_TOL_M = 866;
      case 866:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_t_maxcomfpos_int_tol_m(&_has_bits_);
          ap_t_maxcomfpos_int_tol_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPDATE_LAT_GP_M = 869;
      case 869:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_t_max_dev_update_lat_gp_m(&_has_bits_);
          ap_t_max_dev_update_lat_gp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_DEV_YAW_RAD = 871;
      case 871:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_t_pout_perp_dev_yaw_rad(&_has_bits_);
          ap_t_pout_perp_dev_yaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_T_YAW_ANG_PBOX_ORI_NU = 898;
      case 898:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ap_t_yaw_ang_pbox_ori_nu(&_has_bits_);
          ap_t_yaw_ang_pbox_ori_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PAR_POSE_X_M = 952;
      case 952:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_t_pout_par_pose_x_m(&_has_bits_);
          ap_t_pout_par_pose_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_PIN_PERP_POSE_Y_M = 1023;
      case 1023:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ap_t_pin_perp_pose_y_m(&_has_bits_);
          ap_t_pin_perp_pose_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_COR_OFFS_OPPOS_M = 1036;
      case 1036:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_t_pout_perp_cor_offs_oppos_m(&_has_bits_);
          ap_t_pout_perp_cor_offs_oppos_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_COR_OFFS_SLOTS_M = 1120;
      case 1120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_t_pout_perp_cor_offs_slots_m(&_has_bits_);
          ap_t_pout_perp_cor_offs_slots_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PAR_POSE_Y_M = 1160;
      case 1160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_t_pout_par_pose_y_m(&_has_bits_);
          ap_t_pout_par_pose_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_PIN_PAR_POSE_YAW_RAD = 1165;
      case 1165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_t_pin_par_pose_yaw_rad(&_has_bits_);
          ap_t_pin_par_pose_yaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_PIN_PERP_POSE_X_M = 1231;
      case 1231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ap_t_pin_perp_pose_x_m(&_has_bits_);
          ap_t_pin_perp_pose_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_T_MIN_PBOX_EXIST_PERC = 1255;
      case 1255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ap_t_min_pbox_exist_perc(&_has_bits_);
          ap_t_min_pbox_exist_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_ANG_NU = 1289;
      case 1289:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_t_urgent_update_dev_factor_perp_ang_nu(&_has_bits_);
          ap_t_urgent_update_dev_factor_perp_ang_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_SCORE_FALLBACK_M = 1511;
      case 1511:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_t_ori_categ_score_fallback_m(&_has_bits_);
          ap_t_ori_categ_score_fallback_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_COR_OFFS_FRONT_M = 1543;
      case 1543:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_t_pout_perp_cor_offs_front_m(&_has_bits_);
          ap_t_pout_perp_cor_offs_front_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_POSE_Y_RIGHT_M = 1590;
      case 1590:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_t_pout_perp_pose_y_right_m(&_has_bits_);
          ap_t_pout_perp_pose_y_right_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_MARKING_ANG_DEV_RAD = 1679;
      case 1679:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ap_t_max_marking_ang_dev_rad(&_has_bits_);
          ap_t_max_marking_ang_dev_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPDATE_LONG_PERP_M = 1683;
      case 1683:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_t_max_dev_update_long_perp_m(&_has_bits_);
          ap_t_max_dev_update_long_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU = 1748;
      case 1748:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_t_urgent_update_dev_factor_par_lat_nu(&_has_bits_);
          ap_t_urgent_update_dev_factor_par_lat_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_POSE_RIGHT_M = 1813;
      case 1813:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_t_pout_perp_pose_right_m(&_has_bits_);
          ap_t_pout_perp_pose_right_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_WHEEL_DIST_TO_WHEELSTOPPER_M = 1883;
      case 1883:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_t_wheel_dist_to_wheelstopper_m(&_has_bits_);
          ap_t_wheel_dist_to_wheelstopper_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_DEL_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU = 1889;
      case 1889:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_t_del_rel_otherw_curb_assignment_ratio_nu(&_has_bits_);
          ap_t_del_rel_otherw_curb_assignment_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_T_UPDATE_LONG_ONLY_PAR_NU = 1977;
      case 1977:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ap_t_update_long_only_par_nu(&_has_bits_);
          ap_t_update_long_only_par_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_PIN_PAR_POSE_X_M = 2082;
      case 2082:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_t_pin_par_pose_x_m(&_has_bits_);
          ap_t_pin_par_pose_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M = 2142;
      case 2142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(&_has_bits_);
          ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DELIM_DIST_TO_BOX_M = 2147;
      case 2147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ap_t_max_delim_dist_to_box_m(&_has_bits_);
          ap_t_max_delim_dist_to_box_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPD_YAW_PAR_RAD = 2204;
      case 2204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_t_max_dev_upd_yaw_par_rad(&_has_bits_);
          ap_t_max_dev_upd_yaw_par_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPD_YAW_GP_RAD = 2263;
      case 2263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_t_max_dev_upd_yaw_gp_rad(&_has_bits_);
          ap_t_max_dev_upd_yaw_gp_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU = 2409;
      case 2409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_t_ori_categ_weight_shortside_parkmarking_nu(&_has_bits_);
          ap_t_ori_categ_weight_shortside_parkmarking_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPDATE_LONG_PAR_M = 2420;
      case 2420:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_t_max_dev_update_long_par_m(&_has_bits_);
          ap_t_max_dev_update_long_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PAR_POSE_YAW_RAD = 2435;
      case 2435:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ap_t_pout_par_pose_yaw_rad(&_has_bits_);
          ap_t_pout_par_pose_yaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.pos_def_approach.PosDefApproach AP_T_POS_DEF_APPROACH = 2556;
      case 2556:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_tp::pos_def_approach::PosDefApproach_IsValid(val))) {
            _internal_set_ap_t_pos_def_approach(static_cast<::pb::ap_tp::pos_def_approach::PosDefApproach>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2556, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_PARKMARKING_NU = 2565;
      case 2565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_t_ori_categ_weight_longside_parkmarking_nu(&_has_bits_);
          ap_t_ori_categ_weight_longside_parkmarking_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_LANEBOUND_NU = 2793;
      case 2793:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_t_ori_categ_weight_longside_lanebound_nu(&_has_bits_);
          ap_t_ori_categ_weight_longside_lanebound_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_AXIS_MIN_OUTSIDE_GARAGE_M = 2904;
      case 2904:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_t_axis_min_outside_garage_m(&_has_bits_);
          ap_t_axis_min_outside_garage_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_DEV_LAT_M = 2928;
      case 2928:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_t_pout_perp_dev_lat_m(&_has_bits_);
          ap_t_pout_perp_dev_lat_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_LEN_IRRELEVANT_AREA_X_M = 3009;
      case 3009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_t_len_irrelevant_area_x_m(&_has_bits_);
          ap_t_len_irrelevant_area_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_POSE_Y_LEFT_M = 3035;
      case 3035:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_t_pout_perp_pose_y_left_m(&_has_bits_);
          ap_t_pout_perp_pose_y_left_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU = 3084;
      case 3084:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_t_ori_categ_weight_longside_curb_nu(&_has_bits_);
          ap_t_ori_categ_weight_longside_curb_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_GP_REACHED_DEV_BOX_M = 3129;
      case 3129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_t_gp_reached_dev_box_m(&_has_bits_);
          ap_t_gp_reached_dev_box_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_POSE_LEFT_M = 3138;
      case 3138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_t_pout_perp_pose_left_m(&_has_bits_);
          ap_t_pout_perp_pose_left_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPD_YAW_PERP_RAD = 3263;
      case 3263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ap_t_max_dev_upd_yaw_perp_rad(&_has_bits_);
          ap_t_max_dev_upd_yaw_perp_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3306;
      case 3306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(&_has_bits_);
          ap_t_min_ang_tresh_cmf_box_limit_angled_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_LEN_IRRELEVANT_AREA_Y_M = 3313;
      case 3313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_t_len_irrelevant_area_y_m(&_has_bits_);
          ap_t_len_irrelevant_area_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_T_UPDATE_POSE_LAST_STROKE_NU = 3327;
      case 3327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_ap_t_update_pose_last_stroke_nu(&_has_bits_);
          ap_t_update_pose_last_stroke_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPDATE_LAT_PAR_M = 3347;
      case 3347:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_t_max_dev_update_lat_par_m(&_has_bits_);
          ap_t_max_dev_update_lat_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_ANG_NU = 3349;
      case 3349:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_t_urgent_update_dev_factor_par_ang_nu(&_has_bits_);
          ap_t_urgent_update_dev_factor_par_ang_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_GP_POSE_FREEZE_RADIUS_M = 3381;
      case 3381:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_t_gp_pose_freeze_radius_m(&_has_bits_);
          ap_t_gp_pose_freeze_radius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_T_MIN_OBJ_EXIST_PERC = 3389;
      case 3389:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_ap_t_min_obj_exist_perc(&_has_bits_);
          ap_t_min_obj_exist_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_VIRTUALLINE_NU = 3426;
      case 3426:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_t_ori_categ_weight_longside_virtualline_nu(&_has_bits_);
          ap_t_ori_categ_weight_longside_virtualline_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3457;
      case 3457:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(&_has_bits_);
          ap_t_max_ang_tresh_cmf_box_limit_angled_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_GP_REACHED_DEV_LONG_M = 3508;
      case 3508:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_t_gp_reached_dev_long_m(&_has_bits_);
          ap_t_gp_reached_dev_long_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PAR_SAFETY_DIST_M = 3545;
      case 3545:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_t_pout_par_safety_dist_m(&_has_bits_);
          ap_t_pout_par_safety_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_VIRTUALLINE_ANG_DEV_RAD = 3565;
      case 3565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_t_max_virtualline_ang_dev_rad(&_has_bits_);
          ap_t_max_virtualline_ang_dev_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_NU = 3576;
      case 3576:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_t_ori_categ_weight_shortside_lanebound_nu(&_has_bits_);
          ap_t_ori_categ_weight_shortside_lanebound_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPDATE_LAT_PERP_M = 3592;
      case 3592:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_t_max_dev_update_lat_perp_m(&_has_bits_);
          ap_t_max_dev_update_lat_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIRTUALLINE_NU = 3598;
      case 3598:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_t_ori_categ_weight_shortside_virtualline_nu(&_has_bits_);
          ap_t_ori_categ_weight_shortside_virtualline_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_POUT_PERP_POSE_Y_R_BWD_M = 3630;
      case 3630:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_t_pout_perp_pose_y_r_bwd_m(&_has_bits_);
          ap_t_pout_perp_pose_y_r_bwd_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MIN_LENGTH_MARKING_M = 3687;
      case 3687:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_t_min_length_marking_m(&_has_bits_);
          ap_t_min_length_marking_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MIN_LATERAL_DEVIATION_M = 3706;
      case 3706:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_t_min_lateral_deviation_m(&_has_bits_);
          ap_t_min_lateral_deviation_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_T_GP_INSIDE_LAT_CENTER_ONLY = 3710;
      case 3710:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_ap_t_gp_inside_lat_center_only(&_has_bits_);
          ap_t_gp_inside_lat_center_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LONG_NU = 3714;
      case 3714:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_t_urgent_update_dev_factor_perp_long_nu(&_has_bits_);
          ap_t_urgent_update_dev_factor_perp_long_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LONG_NU = 3748;
      case 3748:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_t_urgent_update_dev_factor_par_long_nu(&_has_bits_);
          ap_t_urgent_update_dev_factor_par_long_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_NU = 3784;
      case 3784:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_t_urgent_update_dev_factor_perp_lat_nu(&_has_bits_);
          ap_t_urgent_update_dev_factor_perp_lat_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_FALLBACK_NU = 3820;
      case 3820:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_t_ori_categ_weight_fallback_nu(&_has_bits_);
          ap_t_ori_categ_weight_fallback_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_CURB_NU = 3846;
      case 3846:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_t_ori_categ_weight_shortside_curb_nu(&_has_bits_);
          ap_t_ori_categ_weight_shortside_curb_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_PIN_PAR_POSE_Y_M = 3858;
      case 3858:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_t_pin_par_pose_y_m(&_has_bits_);
          ap_t_pin_par_pose_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_T_MAX_DEV_UPDATE_LONG_GP_M = 1723759;
      case 1723759:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ap_t_max_dev_update_long_gp_m(&_has_bits_);
          ap_t_max_dev_update_long_gp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TAPOSD_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float AP_T_MAX_CURB_DEL_DIST_TO_ROADSIDE_PAR_M = 78;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(78, this->_internal_ap_t_max_curb_del_dist_to_roadside_par_m(), target);
  }

  // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 204;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(204, this->_internal_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(), target);
  }

  // optional float AP_T_GP_OUT_GAP_ENTRANCE_M = 208;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(208, this->_internal_ap_t_gp_out_gap_entrance_m(), target);
  }

  // optional float AP_T_POUT_PERP_COR_OFFS_REAR_M = 288;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(288, this->_internal_ap_t_pout_perp_cor_offs_rear_m(), target);
  }

  // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 423;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(423, this->_internal_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(), target);
  }

  // optional uint32 AP_T_ACTUAL_LENGTH_POSE_HISTORY = 575;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(575, this->_internal_ap_t_actual_length_pose_history(), target);
  }

  // optional float AP_T_GP_OUT_REACHED_M = 590;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(590, this->_internal_ap_t_gp_out_reached_m(), target);
  }

  // optional float AP_T_MAX_LATERAL_DEVIATION_M = 610;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(610, this->_internal_ap_t_max_lateral_deviation_m(), target);
  }

  // optional float AP_T_PIN_PERP_POSE_YAW_RAD = 632;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(632, this->_internal_ap_t_pin_perp_pose_yaw_rad(), target);
  }

  // optional float AP_T_EXTENT_MAX_BOX_ROADSIDE_M = 860;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(860, this->_internal_ap_t_extent_max_box_roadside_m(), target);
  }

  // optional float AP_T_MAXCOMFPOS_INT_TOL_M = 866;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(866, this->_internal_ap_t_maxcomfpos_int_tol_m(), target);
  }

  // optional float AP_T_MAX_DEV_UPDATE_LAT_GP_M = 869;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(869, this->_internal_ap_t_max_dev_update_lat_gp_m(), target);
  }

  // optional float AP_T_POUT_PERP_DEV_YAW_RAD = 871;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(871, this->_internal_ap_t_pout_perp_dev_yaw_rad(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool AP_T_YAW_ANG_PBOX_ORI_NU = 898;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(898, this->_internal_ap_t_yaw_ang_pbox_ori_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float AP_T_POUT_PAR_POSE_X_M = 952;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(952, this->_internal_ap_t_pout_par_pose_x_m(), target);
  }

  // optional float AP_T_PIN_PERP_POSE_Y_M = 1023;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1023, this->_internal_ap_t_pin_perp_pose_y_m(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float AP_T_POUT_PERP_COR_OFFS_OPPOS_M = 1036;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1036, this->_internal_ap_t_pout_perp_cor_offs_oppos_m(), target);
  }

  // optional float AP_T_POUT_PERP_COR_OFFS_SLOTS_M = 1120;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1120, this->_internal_ap_t_pout_perp_cor_offs_slots_m(), target);
  }

  // optional float AP_T_POUT_PAR_POSE_Y_M = 1160;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1160, this->_internal_ap_t_pout_par_pose_y_m(), target);
  }

  // optional float AP_T_PIN_PAR_POSE_YAW_RAD = 1165;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1165, this->_internal_ap_t_pin_par_pose_yaw_rad(), target);
  }

  // optional float AP_T_PIN_PERP_POSE_X_M = 1231;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1231, this->_internal_ap_t_pin_perp_pose_x_m(), target);
  }

  // optional uint32 AP_T_MIN_PBOX_EXIST_PERC = 1255;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1255, this->_internal_ap_t_min_pbox_exist_perc(), target);
  }

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_ANG_NU = 1289;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1289, this->_internal_ap_t_urgent_update_dev_factor_perp_ang_nu(), target);
  }

  // optional float AP_T_ORI_CATEG_SCORE_FALLBACK_M = 1511;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1511, this->_internal_ap_t_ori_categ_score_fallback_m(), target);
  }

  // optional float AP_T_POUT_PERP_COR_OFFS_FRONT_M = 1543;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1543, this->_internal_ap_t_pout_perp_cor_offs_front_m(), target);
  }

  // optional float AP_T_POUT_PERP_POSE_Y_RIGHT_M = 1590;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1590, this->_internal_ap_t_pout_perp_pose_y_right_m(), target);
  }

  // optional float AP_T_MAX_MARKING_ANG_DEV_RAD = 1679;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1679, this->_internal_ap_t_max_marking_ang_dev_rad(), target);
  }

  // optional float AP_T_MAX_DEV_UPDATE_LONG_PERP_M = 1683;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1683, this->_internal_ap_t_max_dev_update_long_perp_m(), target);
  }

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU = 1748;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1748, this->_internal_ap_t_urgent_update_dev_factor_par_lat_nu(), target);
  }

  // optional float AP_T_POUT_PERP_POSE_RIGHT_M = 1813;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1813, this->_internal_ap_t_pout_perp_pose_right_m(), target);
  }

  // optional float AP_T_WHEEL_DIST_TO_WHEELSTOPPER_M = 1883;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1883, this->_internal_ap_t_wheel_dist_to_wheelstopper_m(), target);
  }

  // optional float AP_T_DEL_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU = 1889;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1889, this->_internal_ap_t_del_rel_otherw_curb_assignment_ratio_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool AP_T_UPDATE_LONG_ONLY_PAR_NU = 1977;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1977, this->_internal_ap_t_update_long_only_par_nu(), target);
  }

  // optional float AP_T_PIN_PAR_POSE_X_M = 2082;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2082, this->_internal_ap_t_pin_par_pose_x_m(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float AP_T_POUT_PERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M = 2142;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2142, this->_internal_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(), target);
  }

  // optional float AP_T_MAX_DELIM_DIST_TO_BOX_M = 2147;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2147, this->_internal_ap_t_max_delim_dist_to_box_m(), target);
  }

  // optional float AP_T_MAX_DEV_UPD_YAW_PAR_RAD = 2204;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2204, this->_internal_ap_t_max_dev_upd_yaw_par_rad(), target);
  }

  // optional float AP_T_MAX_DEV_UPD_YAW_GP_RAD = 2263;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2263, this->_internal_ap_t_max_dev_upd_yaw_gp_rad(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU = 2409;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2409, this->_internal_ap_t_ori_categ_weight_shortside_parkmarking_nu(), target);
  }

  // optional float AP_T_MAX_DEV_UPDATE_LONG_PAR_M = 2420;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2420, this->_internal_ap_t_max_dev_update_long_par_m(), target);
  }

  // optional float AP_T_POUT_PAR_POSE_YAW_RAD = 2435;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2435, this->_internal_ap_t_pout_par_pose_yaw_rad(), target);
  }

  // optional .pb.ap_tp.pos_def_approach.PosDefApproach AP_T_POS_DEF_APPROACH = 2556;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2556, this->_internal_ap_t_pos_def_approach(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_PARKMARKING_NU = 2565;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2565, this->_internal_ap_t_ori_categ_weight_longside_parkmarking_nu(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_LANEBOUND_NU = 2793;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2793, this->_internal_ap_t_ori_categ_weight_longside_lanebound_nu(), target);
  }

  // optional float AP_T_AXIS_MIN_OUTSIDE_GARAGE_M = 2904;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2904, this->_internal_ap_t_axis_min_outside_garage_m(), target);
  }

  // optional float AP_T_POUT_PERP_DEV_LAT_M = 2928;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2928, this->_internal_ap_t_pout_perp_dev_lat_m(), target);
  }

  // optional float AP_T_LEN_IRRELEVANT_AREA_X_M = 3009;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3009, this->_internal_ap_t_len_irrelevant_area_x_m(), target);
  }

  // optional float AP_T_POUT_PERP_POSE_Y_LEFT_M = 3035;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3035, this->_internal_ap_t_pout_perp_pose_y_left_m(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU = 3084;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3084, this->_internal_ap_t_ori_categ_weight_longside_curb_nu(), target);
  }

  // optional float AP_T_GP_REACHED_DEV_BOX_M = 3129;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3129, this->_internal_ap_t_gp_reached_dev_box_m(), target);
  }

  // optional float AP_T_POUT_PERP_POSE_LEFT_M = 3138;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3138, this->_internal_ap_t_pout_perp_pose_left_m(), target);
  }

  // optional float AP_T_MAX_DEV_UPD_YAW_PERP_RAD = 3263;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3263, this->_internal_ap_t_max_dev_upd_yaw_perp_rad(), target);
  }

  // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3306;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3306, this->_internal_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(), target);
  }

  // optional float AP_T_LEN_IRRELEVANT_AREA_Y_M = 3313;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3313, this->_internal_ap_t_len_irrelevant_area_y_m(), target);
  }

  // optional bool AP_T_UPDATE_POSE_LAST_STROKE_NU = 3327;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3327, this->_internal_ap_t_update_pose_last_stroke_nu(), target);
  }

  // optional float AP_T_MAX_DEV_UPDATE_LAT_PAR_M = 3347;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3347, this->_internal_ap_t_max_dev_update_lat_par_m(), target);
  }

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_ANG_NU = 3349;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3349, this->_internal_ap_t_urgent_update_dev_factor_par_ang_nu(), target);
  }

  // optional float AP_T_GP_POSE_FREEZE_RADIUS_M = 3381;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3381, this->_internal_ap_t_gp_pose_freeze_radius_m(), target);
  }

  // optional uint32 AP_T_MIN_OBJ_EXIST_PERC = 3389;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3389, this->_internal_ap_t_min_obj_exist_perc(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_VIRTUALLINE_NU = 3426;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3426, this->_internal_ap_t_ori_categ_weight_longside_virtualline_nu(), target);
  }

  // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3457;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3457, this->_internal_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float AP_T_GP_REACHED_DEV_LONG_M = 3508;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3508, this->_internal_ap_t_gp_reached_dev_long_m(), target);
  }

  // optional float AP_T_POUT_PAR_SAFETY_DIST_M = 3545;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3545, this->_internal_ap_t_pout_par_safety_dist_m(), target);
  }

  // optional float AP_T_MAX_VIRTUALLINE_ANG_DEV_RAD = 3565;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3565, this->_internal_ap_t_max_virtualline_ang_dev_rad(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_NU = 3576;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3576, this->_internal_ap_t_ori_categ_weight_shortside_lanebound_nu(), target);
  }

  // optional float AP_T_MAX_DEV_UPDATE_LAT_PERP_M = 3592;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3592, this->_internal_ap_t_max_dev_update_lat_perp_m(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIRTUALLINE_NU = 3598;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3598, this->_internal_ap_t_ori_categ_weight_shortside_virtualline_nu(), target);
  }

  // optional float AP_T_POUT_PERP_POSE_Y_R_BWD_M = 3630;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3630, this->_internal_ap_t_pout_perp_pose_y_r_bwd_m(), target);
  }

  // optional float AP_T_MIN_LENGTH_MARKING_M = 3687;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3687, this->_internal_ap_t_min_length_marking_m(), target);
  }

  // optional float AP_T_MIN_LATERAL_DEVIATION_M = 3706;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3706, this->_internal_ap_t_min_lateral_deviation_m(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool AP_T_GP_INSIDE_LAT_CENTER_ONLY = 3710;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3710, this->_internal_ap_t_gp_inside_lat_center_only(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LONG_NU = 3714;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3714, this->_internal_ap_t_urgent_update_dev_factor_perp_long_nu(), target);
  }

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LONG_NU = 3748;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3748, this->_internal_ap_t_urgent_update_dev_factor_par_long_nu(), target);
  }

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_NU = 3784;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3784, this->_internal_ap_t_urgent_update_dev_factor_perp_lat_nu(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_FALLBACK_NU = 3820;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3820, this->_internal_ap_t_ori_categ_weight_fallback_nu(), target);
  }

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_CURB_NU = 3846;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3846, this->_internal_ap_t_ori_categ_weight_shortside_curb_nu(), target);
  }

  // optional float AP_T_PIN_PAR_POSE_Y_M = 3858;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3858, this->_internal_ap_t_pin_par_pose_y_m(), target);
  }

  // optional float AP_T_MAX_DEV_UPDATE_LONG_GP_M = 1723759;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1723759, this->_internal_ap_t_max_dev_update_long_gp_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  return target;
}

size_t FC_TAPOSD_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float AP_T_MAX_CURB_DEL_DIST_TO_ROADSIDE_PAR_M = 78;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 204;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_GP_OUT_GAP_ENTRANCE_M = 208;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_POUT_PERP_COR_OFFS_REAR_M = 288;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 423;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_T_ACTUAL_LENGTH_POSE_HISTORY = 575;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_t_actual_length_pose_history());
    }

    // optional float AP_T_GP_OUT_REACHED_M = 590;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_T_MAX_LATERAL_DEVIATION_M = 610;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_PIN_PERP_POSE_YAW_RAD = 632;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_EXTENT_MAX_BOX_ROADSIDE_M = 860;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_MAXCOMFPOS_INT_TOL_M = 866;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_MAX_DEV_UPDATE_LAT_GP_M = 869;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_POUT_PERP_DEV_YAW_RAD = 871;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_POUT_PAR_POSE_X_M = 952;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_PIN_PERP_POSE_Y_M = 1023;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_T_POUT_PERP_COR_OFFS_OPPOS_M = 1036;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_POUT_PERP_COR_OFFS_SLOTS_M = 1120;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_POUT_PAR_POSE_Y_M = 1160;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_PIN_PAR_POSE_YAW_RAD = 1165;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_PIN_PERP_POSE_X_M = 1231;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_T_MIN_PBOX_EXIST_PERC = 1255;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_t_min_pbox_exist_perc());
    }

    // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_ANG_NU = 1289;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_ORI_CATEG_SCORE_FALLBACK_M = 1511;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_T_POUT_PERP_COR_OFFS_FRONT_M = 1543;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_POUT_PERP_POSE_Y_RIGHT_M = 1590;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_MAX_MARKING_ANG_DEV_RAD = 1679;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_MAX_DEV_UPDATE_LONG_PERP_M = 1683;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU = 1748;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_POUT_PERP_POSE_RIGHT_M = 1813;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_WHEEL_DIST_TO_WHEELSTOPPER_M = 1883;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_T_DEL_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU = 1889;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_T_PIN_PAR_POSE_X_M = 2082;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float AP_T_POUT_PERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M = 2142;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DELIM_DIST_TO_BOX_M = 2147;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DEV_UPD_YAW_PAR_RAD = 2204;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DEV_UPD_YAW_GP_RAD = 2263;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU = 2409;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DEV_UPDATE_LONG_PAR_M = 2420;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_T_POUT_PAR_POSE_YAW_RAD = 2435;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional bool AP_T_UPDATE_POSE_LAST_STROKE_NU = 3327;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool AP_T_UPDATE_LONG_ONLY_PAR_NU = 1977;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool AP_T_YAW_ANG_PBOX_ORI_NU = 898;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool AP_T_GP_INSIDE_LAT_CENTER_ONLY = 3710;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional .pb.ap_tp.pos_def_approach.PosDefApproach AP_T_POS_DEF_APPROACH = 2556;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ap_t_pos_def_approach());
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_PARKMARKING_NU = 2565;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_LANEBOUND_NU = 2793;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_T_AXIS_MIN_OUTSIDE_GARAGE_M = 2904;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_POUT_PERP_DEV_LAT_M = 2928;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_LEN_IRRELEVANT_AREA_X_M = 3009;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_POUT_PERP_POSE_Y_LEFT_M = 3035;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU = 3084;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_GP_REACHED_DEV_BOX_M = 3129;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_POUT_PERP_POSE_LEFT_M = 3138;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DEV_UPD_YAW_PERP_RAD = 3263;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3306;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_LEN_IRRELEVANT_AREA_Y_M = 3313;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DEV_UPDATE_LAT_PAR_M = 3347;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_ANG_NU = 3349;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_GP_POSE_FREEZE_RADIUS_M = 3381;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional uint32 AP_T_MIN_OBJ_EXIST_PERC = 3389;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_t_min_obj_exist_perc());
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_VIRTUALLINE_NU = 3426;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3457;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_T_GP_REACHED_DEV_LONG_M = 3508;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_POUT_PAR_SAFETY_DIST_M = 3545;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_VIRTUALLINE_ANG_DEV_RAD = 3565;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_NU = 3576;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DEV_UPDATE_LAT_PERP_M = 3592;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIRTUALLINE_NU = 3598;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_POUT_PERP_POSE_Y_R_BWD_M = 3630;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MIN_LENGTH_MARKING_M = 3687;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_T_MIN_LATERAL_DEVIATION_M = 3706;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LONG_NU = 3714;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LONG_NU = 3748;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_NU = 3784;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_FALLBACK_NU = 3820;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_CURB_NU = 3846;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_PIN_PAR_POSE_Y_M = 3858;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_T_MAX_DEV_UPDATE_LONG_GP_M = 1723759;
    if (cached_has_bits & 0x00008000u) {
      total_size += 4 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TAPOSD_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TAPOSD_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TAPOSD_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
    MergeFrom(*source);
  }
}

void FC_TAPOSD_Params::MergeFrom(const FC_TAPOSD_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      ap_t_max_curb_del_dist_to_roadside_par_m_ = from.ap_t_max_curb_del_dist_to_roadside_par_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_ = from.ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_t_gp_out_gap_entrance_m_ = from.ap_t_gp_out_gap_entrance_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_t_pout_perp_cor_offs_rear_m_ = from.ap_t_pout_perp_cor_offs_rear_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_ = from.ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_t_actual_length_pose_history_ = from.ap_t_actual_length_pose_history_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_t_gp_out_reached_m_ = from.ap_t_gp_out_reached_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_t_max_lateral_deviation_m_ = from.ap_t_max_lateral_deviation_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_t_pin_perp_pose_yaw_rad_ = from.ap_t_pin_perp_pose_yaw_rad_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_t_extent_max_box_roadside_m_ = from.ap_t_extent_max_box_roadside_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_t_maxcomfpos_int_tol_m_ = from.ap_t_maxcomfpos_int_tol_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_t_max_dev_update_lat_gp_m_ = from.ap_t_max_dev_update_lat_gp_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_t_pout_perp_dev_yaw_rad_ = from.ap_t_pout_perp_dev_yaw_rad_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_t_pout_par_pose_x_m_ = from.ap_t_pout_par_pose_x_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_t_pin_perp_pose_y_m_ = from.ap_t_pin_perp_pose_y_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_t_pout_perp_cor_offs_oppos_m_ = from.ap_t_pout_perp_cor_offs_oppos_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_t_pout_perp_cor_offs_slots_m_ = from.ap_t_pout_perp_cor_offs_slots_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_t_pout_par_pose_y_m_ = from.ap_t_pout_par_pose_y_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_t_pin_par_pose_yaw_rad_ = from.ap_t_pin_par_pose_yaw_rad_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_t_pin_perp_pose_x_m_ = from.ap_t_pin_perp_pose_x_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_t_min_pbox_exist_perc_ = from.ap_t_min_pbox_exist_perc_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_t_urgent_update_dev_factor_perp_ang_nu_ = from.ap_t_urgent_update_dev_factor_perp_ang_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_t_ori_categ_score_fallback_m_ = from.ap_t_ori_categ_score_fallback_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_t_pout_perp_cor_offs_front_m_ = from.ap_t_pout_perp_cor_offs_front_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_t_pout_perp_pose_y_right_m_ = from.ap_t_pout_perp_pose_y_right_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_t_max_marking_ang_dev_rad_ = from.ap_t_max_marking_ang_dev_rad_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_t_max_dev_update_long_perp_m_ = from.ap_t_max_dev_update_long_perp_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_t_urgent_update_dev_factor_par_lat_nu_ = from.ap_t_urgent_update_dev_factor_par_lat_nu_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_t_pout_perp_pose_right_m_ = from.ap_t_pout_perp_pose_right_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_t_wheel_dist_to_wheelstopper_m_ = from.ap_t_wheel_dist_to_wheelstopper_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_t_del_rel_otherw_curb_assignment_ratio_nu_ = from.ap_t_del_rel_otherw_curb_assignment_ratio_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_t_pin_par_pose_x_m_ = from.ap_t_pin_par_pose_x_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_ = from.ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_t_max_delim_dist_to_box_m_ = from.ap_t_max_delim_dist_to_box_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_t_max_dev_upd_yaw_par_rad_ = from.ap_t_max_dev_upd_yaw_par_rad_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_t_max_dev_upd_yaw_gp_rad_ = from.ap_t_max_dev_upd_yaw_gp_rad_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_t_ori_categ_weight_shortside_parkmarking_nu_ = from.ap_t_ori_categ_weight_shortside_parkmarking_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_t_max_dev_update_long_par_m_ = from.ap_t_max_dev_update_long_par_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_t_pout_par_pose_yaw_rad_ = from.ap_t_pout_par_pose_yaw_rad_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_t_update_pose_last_stroke_nu_ = from.ap_t_update_pose_last_stroke_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_t_update_long_only_par_nu_ = from.ap_t_update_long_only_par_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_t_yaw_ang_pbox_ori_nu_ = from.ap_t_yaw_ang_pbox_ori_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_t_gp_inside_lat_center_only_ = from.ap_t_gp_inside_lat_center_only_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_t_pos_def_approach_ = from.ap_t_pos_def_approach_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_t_ori_categ_weight_longside_parkmarking_nu_ = from.ap_t_ori_categ_weight_longside_parkmarking_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_t_ori_categ_weight_longside_lanebound_nu_ = from.ap_t_ori_categ_weight_longside_lanebound_nu_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_t_axis_min_outside_garage_m_ = from.ap_t_axis_min_outside_garage_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_t_pout_perp_dev_lat_m_ = from.ap_t_pout_perp_dev_lat_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_t_len_irrelevant_area_x_m_ = from.ap_t_len_irrelevant_area_x_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_t_pout_perp_pose_y_left_m_ = from.ap_t_pout_perp_pose_y_left_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_t_ori_categ_weight_longside_curb_nu_ = from.ap_t_ori_categ_weight_longside_curb_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_t_gp_reached_dev_box_m_ = from.ap_t_gp_reached_dev_box_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_t_pout_perp_pose_left_m_ = from.ap_t_pout_perp_pose_left_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_t_max_dev_upd_yaw_perp_rad_ = from.ap_t_max_dev_upd_yaw_perp_rad_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_t_min_ang_tresh_cmf_box_limit_angled_deg_ = from.ap_t_min_ang_tresh_cmf_box_limit_angled_deg_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_t_len_irrelevant_area_y_m_ = from.ap_t_len_irrelevant_area_y_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_t_max_dev_update_lat_par_m_ = from.ap_t_max_dev_update_lat_par_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_t_urgent_update_dev_factor_par_ang_nu_ = from.ap_t_urgent_update_dev_factor_par_ang_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_t_gp_pose_freeze_radius_m_ = from.ap_t_gp_pose_freeze_radius_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_t_min_obj_exist_perc_ = from.ap_t_min_obj_exist_perc_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_t_ori_categ_weight_longside_virtualline_nu_ = from.ap_t_ori_categ_weight_longside_virtualline_nu_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_t_max_ang_tresh_cmf_box_limit_angled_deg_ = from.ap_t_max_ang_tresh_cmf_box_limit_angled_deg_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_t_gp_reached_dev_long_m_ = from.ap_t_gp_reached_dev_long_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_t_pout_par_safety_dist_m_ = from.ap_t_pout_par_safety_dist_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_t_max_virtualline_ang_dev_rad_ = from.ap_t_max_virtualline_ang_dev_rad_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_t_ori_categ_weight_shortside_lanebound_nu_ = from.ap_t_ori_categ_weight_shortside_lanebound_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_t_max_dev_update_lat_perp_m_ = from.ap_t_max_dev_update_lat_perp_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_t_ori_categ_weight_shortside_virtualline_nu_ = from.ap_t_ori_categ_weight_shortside_virtualline_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_t_pout_perp_pose_y_r_bwd_m_ = from.ap_t_pout_perp_pose_y_r_bwd_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_t_min_length_marking_m_ = from.ap_t_min_length_marking_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_t_min_lateral_deviation_m_ = from.ap_t_min_lateral_deviation_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_t_urgent_update_dev_factor_perp_long_nu_ = from.ap_t_urgent_update_dev_factor_perp_long_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_t_urgent_update_dev_factor_par_long_nu_ = from.ap_t_urgent_update_dev_factor_par_long_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_t_urgent_update_dev_factor_perp_lat_nu_ = from.ap_t_urgent_update_dev_factor_perp_lat_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_t_ori_categ_weight_fallback_nu_ = from.ap_t_ori_categ_weight_fallback_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_t_ori_categ_weight_shortside_curb_nu_ = from.ap_t_ori_categ_weight_shortside_curb_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_t_pin_par_pose_y_m_ = from.ap_t_pin_par_pose_y_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_t_max_dev_update_long_gp_m_ = from.ap_t_max_dev_update_long_gp_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void FC_TAPOSD_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TAPOSD_Params::CopyFrom(const FC_TAPOSD_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TAPOSD_Params::IsInitialized() const {
  return true;
}

void FC_TAPOSD_Params::InternalSwap(FC_TAPOSD_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(ssigheader_, other->ssigheader_);
  swap(ap_t_max_curb_del_dist_to_roadside_par_m_, other->ap_t_max_curb_del_dist_to_roadside_par_m_);
  swap(ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_, other->ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_);
  swap(ap_t_gp_out_gap_entrance_m_, other->ap_t_gp_out_gap_entrance_m_);
  swap(ap_t_pout_perp_cor_offs_rear_m_, other->ap_t_pout_perp_cor_offs_rear_m_);
  swap(ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_, other->ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_);
  swap(ap_t_actual_length_pose_history_, other->ap_t_actual_length_pose_history_);
  swap(ap_t_gp_out_reached_m_, other->ap_t_gp_out_reached_m_);
  swap(ap_t_max_lateral_deviation_m_, other->ap_t_max_lateral_deviation_m_);
  swap(ap_t_pin_perp_pose_yaw_rad_, other->ap_t_pin_perp_pose_yaw_rad_);
  swap(ap_t_extent_max_box_roadside_m_, other->ap_t_extent_max_box_roadside_m_);
  swap(ap_t_maxcomfpos_int_tol_m_, other->ap_t_maxcomfpos_int_tol_m_);
  swap(ap_t_max_dev_update_lat_gp_m_, other->ap_t_max_dev_update_lat_gp_m_);
  swap(ap_t_pout_perp_dev_yaw_rad_, other->ap_t_pout_perp_dev_yaw_rad_);
  swap(ap_t_pout_par_pose_x_m_, other->ap_t_pout_par_pose_x_m_);
  swap(ap_t_pin_perp_pose_y_m_, other->ap_t_pin_perp_pose_y_m_);
  swap(ap_t_pout_perp_cor_offs_oppos_m_, other->ap_t_pout_perp_cor_offs_oppos_m_);
  swap(ap_t_pout_perp_cor_offs_slots_m_, other->ap_t_pout_perp_cor_offs_slots_m_);
  swap(ap_t_pout_par_pose_y_m_, other->ap_t_pout_par_pose_y_m_);
  swap(ap_t_pin_par_pose_yaw_rad_, other->ap_t_pin_par_pose_yaw_rad_);
  swap(ap_t_pin_perp_pose_x_m_, other->ap_t_pin_perp_pose_x_m_);
  swap(ap_t_min_pbox_exist_perc_, other->ap_t_min_pbox_exist_perc_);
  swap(ap_t_urgent_update_dev_factor_perp_ang_nu_, other->ap_t_urgent_update_dev_factor_perp_ang_nu_);
  swap(ap_t_ori_categ_score_fallback_m_, other->ap_t_ori_categ_score_fallback_m_);
  swap(ap_t_pout_perp_cor_offs_front_m_, other->ap_t_pout_perp_cor_offs_front_m_);
  swap(ap_t_pout_perp_pose_y_right_m_, other->ap_t_pout_perp_pose_y_right_m_);
  swap(ap_t_max_marking_ang_dev_rad_, other->ap_t_max_marking_ang_dev_rad_);
  swap(ap_t_max_dev_update_long_perp_m_, other->ap_t_max_dev_update_long_perp_m_);
  swap(ap_t_urgent_update_dev_factor_par_lat_nu_, other->ap_t_urgent_update_dev_factor_par_lat_nu_);
  swap(ap_t_pout_perp_pose_right_m_, other->ap_t_pout_perp_pose_right_m_);
  swap(ap_t_wheel_dist_to_wheelstopper_m_, other->ap_t_wheel_dist_to_wheelstopper_m_);
  swap(ap_t_del_rel_otherw_curb_assignment_ratio_nu_, other->ap_t_del_rel_otherw_curb_assignment_ratio_nu_);
  swap(ap_t_pin_par_pose_x_m_, other->ap_t_pin_par_pose_x_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_, other->ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_);
  swap(ap_t_max_delim_dist_to_box_m_, other->ap_t_max_delim_dist_to_box_m_);
  swap(ap_t_max_dev_upd_yaw_par_rad_, other->ap_t_max_dev_upd_yaw_par_rad_);
  swap(ap_t_max_dev_upd_yaw_gp_rad_, other->ap_t_max_dev_upd_yaw_gp_rad_);
  swap(ap_t_ori_categ_weight_shortside_parkmarking_nu_, other->ap_t_ori_categ_weight_shortside_parkmarking_nu_);
  swap(ap_t_max_dev_update_long_par_m_, other->ap_t_max_dev_update_long_par_m_);
  swap(ap_t_pout_par_pose_yaw_rad_, other->ap_t_pout_par_pose_yaw_rad_);
  swap(ap_t_update_pose_last_stroke_nu_, other->ap_t_update_pose_last_stroke_nu_);
  swap(ap_t_update_long_only_par_nu_, other->ap_t_update_long_only_par_nu_);
  swap(ap_t_yaw_ang_pbox_ori_nu_, other->ap_t_yaw_ang_pbox_ori_nu_);
  swap(ap_t_gp_inside_lat_center_only_, other->ap_t_gp_inside_lat_center_only_);
  swap(ap_t_pos_def_approach_, other->ap_t_pos_def_approach_);
  swap(ap_t_ori_categ_weight_longside_parkmarking_nu_, other->ap_t_ori_categ_weight_longside_parkmarking_nu_);
  swap(ap_t_ori_categ_weight_longside_lanebound_nu_, other->ap_t_ori_categ_weight_longside_lanebound_nu_);
  swap(ap_t_axis_min_outside_garage_m_, other->ap_t_axis_min_outside_garage_m_);
  swap(ap_t_pout_perp_dev_lat_m_, other->ap_t_pout_perp_dev_lat_m_);
  swap(ap_t_len_irrelevant_area_x_m_, other->ap_t_len_irrelevant_area_x_m_);
  swap(ap_t_pout_perp_pose_y_left_m_, other->ap_t_pout_perp_pose_y_left_m_);
  swap(ap_t_ori_categ_weight_longside_curb_nu_, other->ap_t_ori_categ_weight_longside_curb_nu_);
  swap(ap_t_gp_reached_dev_box_m_, other->ap_t_gp_reached_dev_box_m_);
  swap(ap_t_pout_perp_pose_left_m_, other->ap_t_pout_perp_pose_left_m_);
  swap(ap_t_max_dev_upd_yaw_perp_rad_, other->ap_t_max_dev_upd_yaw_perp_rad_);
  swap(ap_t_min_ang_tresh_cmf_box_limit_angled_deg_, other->ap_t_min_ang_tresh_cmf_box_limit_angled_deg_);
  swap(ap_t_len_irrelevant_area_y_m_, other->ap_t_len_irrelevant_area_y_m_);
  swap(ap_t_max_dev_update_lat_par_m_, other->ap_t_max_dev_update_lat_par_m_);
  swap(ap_t_urgent_update_dev_factor_par_ang_nu_, other->ap_t_urgent_update_dev_factor_par_ang_nu_);
  swap(ap_t_gp_pose_freeze_radius_m_, other->ap_t_gp_pose_freeze_radius_m_);
  swap(ap_t_min_obj_exist_perc_, other->ap_t_min_obj_exist_perc_);
  swap(ap_t_ori_categ_weight_longside_virtualline_nu_, other->ap_t_ori_categ_weight_longside_virtualline_nu_);
  swap(ap_t_max_ang_tresh_cmf_box_limit_angled_deg_, other->ap_t_max_ang_tresh_cmf_box_limit_angled_deg_);
  swap(ap_t_gp_reached_dev_long_m_, other->ap_t_gp_reached_dev_long_m_);
  swap(ap_t_pout_par_safety_dist_m_, other->ap_t_pout_par_safety_dist_m_);
  swap(ap_t_max_virtualline_ang_dev_rad_, other->ap_t_max_virtualline_ang_dev_rad_);
  swap(ap_t_ori_categ_weight_shortside_lanebound_nu_, other->ap_t_ori_categ_weight_shortside_lanebound_nu_);
  swap(ap_t_max_dev_update_lat_perp_m_, other->ap_t_max_dev_update_lat_perp_m_);
  swap(ap_t_ori_categ_weight_shortside_virtualline_nu_, other->ap_t_ori_categ_weight_shortside_virtualline_nu_);
  swap(ap_t_pout_perp_pose_y_r_bwd_m_, other->ap_t_pout_perp_pose_y_r_bwd_m_);
  swap(ap_t_min_length_marking_m_, other->ap_t_min_length_marking_m_);
  swap(ap_t_min_lateral_deviation_m_, other->ap_t_min_lateral_deviation_m_);
  swap(ap_t_urgent_update_dev_factor_perp_long_nu_, other->ap_t_urgent_update_dev_factor_perp_long_nu_);
  swap(ap_t_urgent_update_dev_factor_par_long_nu_, other->ap_t_urgent_update_dev_factor_par_long_nu_);
  swap(ap_t_urgent_update_dev_factor_perp_lat_nu_, other->ap_t_urgent_update_dev_factor_perp_lat_nu_);
  swap(ap_t_ori_categ_weight_fallback_nu_, other->ap_t_ori_categ_weight_fallback_nu_);
  swap(ap_t_ori_categ_weight_shortside_curb_nu_, other->ap_t_ori_categ_weight_shortside_curb_nu_);
  swap(ap_t_pin_par_pose_y_m_, other->ap_t_pin_par_pose_y_m_);
  swap(ap_t_max_dev_update_long_gp_m_, other->ap_t_max_dev_update_long_gp_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TAPOSD_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_TAPOSD_Params_array_port::InitAsDefaultInstance() {
}
class FC_TAPOSD_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TAPOSD_Params_array_port>()._has_bits_);
};

FC_TAPOSD_Params_array_port::FC_TAPOSD_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
}
FC_TAPOSD_Params_array_port::FC_TAPOSD_Params_array_port(const FC_TAPOSD_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
}

void FC_TAPOSD_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TAPOSD_Params_array_port_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base);
}

FC_TAPOSD_Params_array_port::~FC_TAPOSD_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  SharedDtor();
}

void FC_TAPOSD_Params_array_port::SharedDtor() {
}

void FC_TAPOSD_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TAPOSD_Params_array_port& FC_TAPOSD_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TAPOSD_Params_array_port_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TAPOSD_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TAPOSD_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params data = 1995;
      case 1995:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15962>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TAPOSD_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params data = 1995;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1995, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  return target;
}

size_t FC_TAPOSD_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params data = 1995;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TAPOSD_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TAPOSD_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TAPOSD_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_TAPOSD_Params_array_port::MergeFrom(const FC_TAPOSD_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_TAPOSD_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TAPOSD_Params_array_port::CopyFrom(const FC_TAPOSD_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TAPOSD_Params_array_port::IsInitialized() const {
  return true;
}

void FC_TAPOSD_Params_array_port::InternalSwap(FC_TAPOSD_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TAPOSD_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_taposd_params
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* Arena::CreateMaybeMessage< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
