// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/simple_debug_parking_box.proto

#include "ap_tp/simple_debug_parking_box.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto;
namespace pb {
namespace ap_tp {
namespace simple_debug_parking_box {
class SimpleDebugParkingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleDebugParkingBox> _instance;
} _SimpleDebugParkingBox_default_instance_;
class SimpleDebugParkingBox_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleDebugParkingBox_array_port> _instance;
} _SimpleDebugParkingBox_array_port_default_instance_;
}  // namespace simple_debug_parking_box
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::simple_debug_parking_box::_SimpleDebugParkingBox_default_instance_;
    new (ptr) ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto}, {}};

static void InitDefaultsscc_info_SimpleDebugParkingBox_array_port_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::simple_debug_parking_box::_SimpleDebugParkingBox_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleDebugParkingBox_array_port_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleDebugParkingBox_array_port_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto}, {
      &scc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox, numvalidpoints_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox, posx_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox, posy_m_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox)},
  { 11, 17, sizeof(::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::simple_debug_parking_box::_SimpleDebugParkingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::simple_debug_parking_box::_SimpleDebugParkingBox_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$ap_tp/simple_debug_parking_box.proto\022!"
  "pb.ap_tp.simple_debug_parking_box\"U\n\025Sim"
  "pleDebugParkingBox\022\032\n\021numValidPoints_nu\030"
  "\227\025 \001(\r\022\017\n\006posX_m\030\361\010 \003(\002\022\017\n\006posY_m\030\301\006 \003(\002"
  "\"k\n SimpleDebugParkingBox_array_port\022G\n\004"
  "data\030\347\025 \003(\01328.pb.ap_tp.simple_debug_park"
  "ing_box.SimpleDebugParkingBox"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_sccs[2] = {
  &scc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto.base,
  &scc_info_SimpleDebugParkingBox_array_port_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_once;
static bool descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto = {
  &descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto, "ap_tp/simple_debug_parking_box.proto", 269,
  &descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_once, descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_sccs, descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto::offsets,
  file_level_metadata_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto, file_level_service_descriptors_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto), true);
namespace pb {
namespace ap_tp {
namespace simple_debug_parking_box {

// ===================================================================

void SimpleDebugParkingBox::InitAsDefaultInstance() {
}
class SimpleDebugParkingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleDebugParkingBox>()._has_bits_);
  static void set_has_numvalidpoints_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SimpleDebugParkingBox::SimpleDebugParkingBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
}
SimpleDebugParkingBox::SimpleDebugParkingBox(const SimpleDebugParkingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      posy_m_(from.posy_m_),
      posx_m_(from.posx_m_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  numvalidpoints_nu_ = from.numvalidpoints_nu_;
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
}

void SimpleDebugParkingBox::SharedCtor() {
  numvalidpoints_nu_ = 0u;
}

SimpleDebugParkingBox::~SimpleDebugParkingBox() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  SharedDtor();
}

void SimpleDebugParkingBox::SharedDtor() {
}

void SimpleDebugParkingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleDebugParkingBox& SimpleDebugParkingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto.base);
  return *internal_default_instance();
}


void SimpleDebugParkingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  posy_m_.Clear();
  posx_m_.Clear();
  numvalidpoints_nu_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SimpleDebugParkingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float posY_m = 833;
      case 833:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_posy_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<6669>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_posy_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float posX_m = 1137;
      case 1137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_posx_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9101>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_posx_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 numValidPoints_nu = 2711;
      case 2711:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_numvalidpoints_nu(&has_bits);
          numvalidpoints_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleDebugParkingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float posY_m = 833;
  for (int i = 0, n = this->_internal_posy_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(833, this->_internal_posy_m(i), target);
  }

  // repeated float posX_m = 1137;
  for (int i = 0, n = this->_internal_posx_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1137, this->_internal_posx_m(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 numValidPoints_nu = 2711;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2711, this->_internal_numvalidpoints_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  return target;
}

size_t SimpleDebugParkingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float posY_m = 833;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_posy_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_posy_m_size());
    total_size += data_size;
  }

  // repeated float posX_m = 1137;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_posx_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_posx_m_size());
    total_size += data_size;
  }

  // optional uint32 numValidPoints_nu = 2711;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numvalidpoints_nu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleDebugParkingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleDebugParkingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleDebugParkingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
    MergeFrom(*source);
  }
}

void SimpleDebugParkingBox::MergeFrom(const SimpleDebugParkingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  posy_m_.MergeFrom(from.posy_m_);
  posx_m_.MergeFrom(from.posx_m_);
  if (from._internal_has_numvalidpoints_nu()) {
    _internal_set_numvalidpoints_nu(from._internal_numvalidpoints_nu());
  }
}

void SimpleDebugParkingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleDebugParkingBox::CopyFrom(const SimpleDebugParkingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleDebugParkingBox::IsInitialized() const {
  return true;
}

void SimpleDebugParkingBox::InternalSwap(SimpleDebugParkingBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  posy_m_.InternalSwap(&other->posy_m_);
  posx_m_.InternalSwap(&other->posx_m_);
  swap(numvalidpoints_nu_, other->numvalidpoints_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleDebugParkingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleDebugParkingBox_array_port::InitAsDefaultInstance() {
}
class SimpleDebugParkingBox_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleDebugParkingBox_array_port>()._has_bits_);
};

SimpleDebugParkingBox_array_port::SimpleDebugParkingBox_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
}
SimpleDebugParkingBox_array_port::SimpleDebugParkingBox_array_port(const SimpleDebugParkingBox_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
}

void SimpleDebugParkingBox_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleDebugParkingBox_array_port_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto.base);
}

SimpleDebugParkingBox_array_port::~SimpleDebugParkingBox_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  SharedDtor();
}

void SimpleDebugParkingBox_array_port::SharedDtor() {
}

void SimpleDebugParkingBox_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleDebugParkingBox_array_port& SimpleDebugParkingBox_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleDebugParkingBox_array_port_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto.base);
  return *internal_default_instance();
}


void SimpleDebugParkingBox_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SimpleDebugParkingBox_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox data = 2791;
      case 2791:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleDebugParkingBox_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox data = 2791;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2791, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  return target;
}

size_t SimpleDebugParkingBox_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox data = 2791;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleDebugParkingBox_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleDebugParkingBox_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleDebugParkingBox_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
    MergeFrom(*source);
  }
}

void SimpleDebugParkingBox_array_port::MergeFrom(const SimpleDebugParkingBox_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SimpleDebugParkingBox_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleDebugParkingBox_array_port::CopyFrom(const SimpleDebugParkingBox_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleDebugParkingBox_array_port::IsInitialized() const {
  return true;
}

void SimpleDebugParkingBox_array_port::InternalSwap(SimpleDebugParkingBox_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleDebugParkingBox_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace simple_debug_parking_box
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox* Arena::CreateMaybeMessage< ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
