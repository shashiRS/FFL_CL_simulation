// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/parking_box_debug_info.proto

#include "ap_tp/parking_box_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fdelimiter_5fdistances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelimiterDistances_ap_5ftp_2fdelimiter_5fdistances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto;
namespace pb {
namespace ap_tp {
namespace parking_box_debug_info {
class ParkingBoxDebugInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingBoxDebugInfo> _instance;
} _ParkingBoxDebugInfo_default_instance_;
class ParkingBoxDebugInfo_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParkingBoxDebugInfo_array_port> _instance;
} _ParkingBoxDebugInfo_array_port_default_instance_;
}  // namespace parking_box_debug_info
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::parking_box_debug_info::_ParkingBoxDebugInfo_default_instance_;
    new (ptr) ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto}, {
      &scc_info_SimpleDebugParkingBox_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto.base,
      &scc_info_DelimiterDistances_ap_5ftp_2fdelimiter_5fdistances_2eproto.base,}};

static void InitDefaultsscc_info_ParkingBoxDebugInfo_array_port_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::parking_box_debug_info::_ParkingBoxDebugInfo_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParkingBoxDebugInfo_array_port_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParkingBoxDebugInfo_array_port_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto}, {
      &scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, maxparkingbox_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, comfparkingbox_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, delimiterdistances_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, yawangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, targetposx_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, targetposy_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, leftedgeisfront_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, isresized_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, hasangle_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo, hasposition_nu_),
  1,
  0,
  2,
  3,
  9,
  8,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo)},
  { 25, 31, sizeof(::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::parking_box_debug_info::_ParkingBoxDebugInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::parking_box_debug_info::_ParkingBoxDebugInfo_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ap_tp/parking_box_debug_info.proto\022\037pb"
  ".ap_tp.parking_box_debug_info\032$ap_tp/sim"
  "ple_debug_parking_box.proto\032\037ap_tp/delim"
  "iter_distances.proto\"\261\003\n\023ParkingBoxDebug"
  "Info\022P\n\rmaxParkingBox\030\377\026 \001(\01328.pb.ap_tp."
  "simple_debug_parking_box.SimpleDebugPark"
  "ingBox\022Q\n\016comfParkingBox\030\247\023 \001(\01328.pb.ap_"
  "tp.simple_debug_parking_box.SimpleDebugP"
  "arkingBox\022M\n\022delimiterDistances\030\237\032 \001(\01320"
  ".pb.ap_tp.delimiter_distances.DelimiterD"
  "istances\022\025\n\014yawAngle_rad\030\266\004 \001(\002\022\025\n\014targe"
  "tPosX_m\030\344\032 \001(\002\022\025\n\014targetPosY_m\030\324\024 \001(\002\022\033\n"
  "\022leftEdgeIsFront_nu\030\207\022 \001(\010\022\025\n\014isResized_"
  "nu\030\330\004 \001(\010\022\024\n\013hasAngle_nu\030\261\r \001(\010\022\027\n\016hasPo"
  "sition_nu\030\213\005 \001(\010\"e\n\036ParkingBoxDebugInfo_"
  "array_port\022C\n\004data\030\203\033 \003(\01324.pb.ap_tp.par"
  "king_box_debug_info.ParkingBoxDebugInfo"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_deps[2] = {
  &::descriptor_table_ap_5ftp_2fdelimiter_5fdistances_2eproto,
  &::descriptor_table_ap_5ftp_2fsimple_5fdebug_5fparking_5fbox_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_sccs[2] = {
  &scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base,
  &scc_info_ParkingBoxDebugInfo_array_port_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_once;
static bool descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto = {
  &descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto, "ap_tp/parking_box_debug_info.proto", 679,
  &descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_once, descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_sccs, descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto::offsets,
  file_level_metadata_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto, file_level_service_descriptors_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto), true);
namespace pb {
namespace ap_tp {
namespace parking_box_debug_info {

// ===================================================================

void ParkingBoxDebugInfo::InitAsDefaultInstance() {
  ::pb::ap_tp::parking_box_debug_info::_ParkingBoxDebugInfo_default_instance_._instance.get_mutable()->maxparkingbox_ = const_cast< ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox*>(
      ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox::internal_default_instance());
  ::pb::ap_tp::parking_box_debug_info::_ParkingBoxDebugInfo_default_instance_._instance.get_mutable()->comfparkingbox_ = const_cast< ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox*>(
      ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox::internal_default_instance());
  ::pb::ap_tp::parking_box_debug_info::_ParkingBoxDebugInfo_default_instance_._instance.get_mutable()->delimiterdistances_ = const_cast< ::pb::ap_tp::delimiter_distances::DelimiterDistances*>(
      ::pb::ap_tp::delimiter_distances::DelimiterDistances::internal_default_instance());
}
class ParkingBoxDebugInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingBoxDebugInfo>()._has_bits_);
  static const ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox& maxparkingbox(const ParkingBoxDebugInfo* msg);
  static void set_has_maxparkingbox(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox& comfparkingbox(const ParkingBoxDebugInfo* msg);
  static void set_has_comfparkingbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::ap_tp::delimiter_distances::DelimiterDistances& delimiterdistances(const ParkingBoxDebugInfo* msg);
  static void set_has_delimiterdistances(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yawangle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_targetposx_m(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_targetposy_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_leftedgeisfront_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isresized_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hasangle_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hasposition_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox&
ParkingBoxDebugInfo::_Internal::maxparkingbox(const ParkingBoxDebugInfo* msg) {
  return *msg->maxparkingbox_;
}
const ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox&
ParkingBoxDebugInfo::_Internal::comfparkingbox(const ParkingBoxDebugInfo* msg) {
  return *msg->comfparkingbox_;
}
const ::pb::ap_tp::delimiter_distances::DelimiterDistances&
ParkingBoxDebugInfo::_Internal::delimiterdistances(const ParkingBoxDebugInfo* msg) {
  return *msg->delimiterdistances_;
}
void ParkingBoxDebugInfo::clear_maxparkingbox() {
  if (maxparkingbox_ != nullptr) maxparkingbox_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingBoxDebugInfo::clear_comfparkingbox() {
  if (comfparkingbox_ != nullptr) comfparkingbox_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ParkingBoxDebugInfo::clear_delimiterdistances() {
  if (delimiterdistances_ != nullptr) delimiterdistances_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ParkingBoxDebugInfo::ParkingBoxDebugInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
}
ParkingBoxDebugInfo::ParkingBoxDebugInfo(const ParkingBoxDebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_comfparkingbox()) {
    comfparkingbox_ = new ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox(*from.comfparkingbox_);
  } else {
    comfparkingbox_ = nullptr;
  }
  if (from._internal_has_maxparkingbox()) {
    maxparkingbox_ = new ::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox(*from.maxparkingbox_);
  } else {
    maxparkingbox_ = nullptr;
  }
  if (from._internal_has_delimiterdistances()) {
    delimiterdistances_ = new ::pb::ap_tp::delimiter_distances::DelimiterDistances(*from.delimiterdistances_);
  } else {
    delimiterdistances_ = nullptr;
  }
  ::memcpy(&yawangle_rad_, &from.yawangle_rad_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetposx_m_) -
    reinterpret_cast<char*>(&yawangle_rad_)) + sizeof(targetposx_m_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
}

void ParkingBoxDebugInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base);
  ::memset(&comfparkingbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetposx_m_) -
      reinterpret_cast<char*>(&comfparkingbox_)) + sizeof(targetposx_m_));
}

ParkingBoxDebugInfo::~ParkingBoxDebugInfo() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  SharedDtor();
}

void ParkingBoxDebugInfo::SharedDtor() {
  if (this != internal_default_instance()) delete comfparkingbox_;
  if (this != internal_default_instance()) delete maxparkingbox_;
  if (this != internal_default_instance()) delete delimiterdistances_;
}

void ParkingBoxDebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingBoxDebugInfo& ParkingBoxDebugInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingBoxDebugInfo_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ParkingBoxDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(comfparkingbox_ != nullptr);
      comfparkingbox_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(maxparkingbox_ != nullptr);
      maxparkingbox_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(delimiterdistances_ != nullptr);
      delimiterdistances_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&yawangle_rad_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hasposition_nu_) -
        reinterpret_cast<char*>(&yawangle_rad_)) + sizeof(hasposition_nu_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&targetposy_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&targetposx_m_) -
        reinterpret_cast<char*>(&targetposy_m_)) + sizeof(targetposx_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParkingBoxDebugInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float yawAngle_rad = 566;
      case 566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_yawangle_rad(&has_bits);
          yawangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool isResized_nu = 600;
      case 600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_isresized_nu(&has_bits);
          isresized_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hasPosition_nu = 651;
      case 651:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_hasposition_nu(&has_bits);
          hasposition_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hasAngle_nu = 1713;
      case 1713:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_hasangle_nu(&has_bits);
          hasangle_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool leftEdgeIsFront_nu = 2311;
      case 2311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_leftedgeisfront_nu(&has_bits);
          leftedgeisfront_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox comfParkingBox = 2471;
      case 2471:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_comfparkingbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float targetPosY_m = 2644;
      case 2644:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_targetposy_m(&has_bits);
          targetposy_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox maxParkingBox = 2943;
      case 2943:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxparkingbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.delimiter_distances.DelimiterDistances delimiterDistances = 3359;
      case 3359:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_delimiterdistances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float targetPosX_m = 3428;
      case 3428:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_targetposx_m(&has_bits);
          targetposx_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingBoxDebugInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float yawAngle_rad = 566;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(566, this->_internal_yawangle_rad(), target);
  }

  // optional bool isResized_nu = 600;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(600, this->_internal_isresized_nu(), target);
  }

  // optional bool hasPosition_nu = 651;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(651, this->_internal_hasposition_nu(), target);
  }

  // optional bool hasAngle_nu = 1713;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1713, this->_internal_hasangle_nu(), target);
  }

  // optional bool leftEdgeIsFront_nu = 2311;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2311, this->_internal_leftedgeisfront_nu(), target);
  }

  // optional .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox comfParkingBox = 2471;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2471, _Internal::comfparkingbox(this), target, stream);
  }

  // optional float targetPosY_m = 2644;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2644, this->_internal_targetposy_m(), target);
  }

  // optional .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox maxParkingBox = 2943;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2943, _Internal::maxparkingbox(this), target, stream);
  }

  // optional .pb.ap_tp.delimiter_distances.DelimiterDistances delimiterDistances = 3359;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3359, _Internal::delimiterdistances(this), target, stream);
  }

  // optional float targetPosX_m = 3428;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3428, this->_internal_targetposx_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  return target;
}

size_t ParkingBoxDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox comfParkingBox = 2471;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *comfparkingbox_);
    }

    // optional .pb.ap_tp.simple_debug_parking_box.SimpleDebugParkingBox maxParkingBox = 2943;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxparkingbox_);
    }

    // optional .pb.ap_tp.delimiter_distances.DelimiterDistances delimiterDistances = 3359;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delimiterdistances_);
    }

    // optional float yawAngle_rad = 566;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional bool leftEdgeIsFront_nu = 2311;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool isResized_nu = 600;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool hasAngle_nu = 1713;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool hasPosition_nu = 651;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float targetPosY_m = 2644;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float targetPosX_m = 3428;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingBoxDebugInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingBoxDebugInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingBoxDebugInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
    MergeFrom(*source);
  }
}

void ParkingBoxDebugInfo::MergeFrom(const ParkingBoxDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_comfparkingbox()->::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox::MergeFrom(from._internal_comfparkingbox());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_maxparkingbox()->::pb::ap_tp::simple_debug_parking_box::SimpleDebugParkingBox::MergeFrom(from._internal_maxparkingbox());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_delimiterdistances()->::pb::ap_tp::delimiter_distances::DelimiterDistances::MergeFrom(from._internal_delimiterdistances());
    }
    if (cached_has_bits & 0x00000008u) {
      yawangle_rad_ = from.yawangle_rad_;
    }
    if (cached_has_bits & 0x00000010u) {
      leftedgeisfront_nu_ = from.leftedgeisfront_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      isresized_nu_ = from.isresized_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      hasangle_nu_ = from.hasangle_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      hasposition_nu_ = from.hasposition_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      targetposy_m_ = from.targetposy_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      targetposx_m_ = from.targetposx_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingBoxDebugInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingBoxDebugInfo::CopyFrom(const ParkingBoxDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingBoxDebugInfo::IsInitialized() const {
  return true;
}

void ParkingBoxDebugInfo::InternalSwap(ParkingBoxDebugInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(comfparkingbox_, other->comfparkingbox_);
  swap(maxparkingbox_, other->maxparkingbox_);
  swap(delimiterdistances_, other->delimiterdistances_);
  swap(yawangle_rad_, other->yawangle_rad_);
  swap(leftedgeisfront_nu_, other->leftedgeisfront_nu_);
  swap(isresized_nu_, other->isresized_nu_);
  swap(hasangle_nu_, other->hasangle_nu_);
  swap(hasposition_nu_, other->hasposition_nu_);
  swap(targetposy_m_, other->targetposy_m_);
  swap(targetposx_m_, other->targetposx_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingBoxDebugInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParkingBoxDebugInfo_array_port::InitAsDefaultInstance() {
}
class ParkingBoxDebugInfo_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingBoxDebugInfo_array_port>()._has_bits_);
};

ParkingBoxDebugInfo_array_port::ParkingBoxDebugInfo_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
}
ParkingBoxDebugInfo_array_port::ParkingBoxDebugInfo_array_port(const ParkingBoxDebugInfo_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
}

void ParkingBoxDebugInfo_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParkingBoxDebugInfo_array_port_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base);
}

ParkingBoxDebugInfo_array_port::~ParkingBoxDebugInfo_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  SharedDtor();
}

void ParkingBoxDebugInfo_array_port::SharedDtor() {
}

void ParkingBoxDebugInfo_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParkingBoxDebugInfo_array_port& ParkingBoxDebugInfo_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParkingBoxDebugInfo_array_port_ap_5ftp_2fparking_5fbox_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ParkingBoxDebugInfo_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParkingBoxDebugInfo_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo data = 3459;
      case 3459:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingBoxDebugInfo_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo data = 3459;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3459, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  return target;
}

size_t ParkingBoxDebugInfo_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo data = 3459;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingBoxDebugInfo_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingBoxDebugInfo_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingBoxDebugInfo_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
    MergeFrom(*source);
  }
}

void ParkingBoxDebugInfo_array_port::MergeFrom(const ParkingBoxDebugInfo_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void ParkingBoxDebugInfo_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingBoxDebugInfo_array_port::CopyFrom(const ParkingBoxDebugInfo_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.parking_box_debug_info.ParkingBoxDebugInfo_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingBoxDebugInfo_array_port::IsInitialized() const {
  return true;
}

void ParkingBoxDebugInfo_array_port::InternalSwap(ParkingBoxDebugInfo_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingBoxDebugInfo_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace parking_box_debug_info
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo* Arena::CreateMaybeMessage< ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::parking_box_debug_info::ParkingBoxDebugInfo_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
