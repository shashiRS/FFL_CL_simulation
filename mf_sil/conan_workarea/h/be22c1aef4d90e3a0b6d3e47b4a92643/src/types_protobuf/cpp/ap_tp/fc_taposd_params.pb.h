// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/fc_taposd_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "ap_tp/pos_def_approach.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto;
namespace pb {
namespace ap_tp {
namespace fc_taposd_params {
class FC_TAPOSD_Params;
class FC_TAPOSD_ParamsDefaultTypeInternal;
extern FC_TAPOSD_ParamsDefaultTypeInternal _FC_TAPOSD_Params_default_instance_;
class FC_TAPOSD_Params_array_port;
class FC_TAPOSD_Params_array_portDefaultTypeInternal;
extern FC_TAPOSD_Params_array_portDefaultTypeInternal _FC_TAPOSD_Params_array_port_default_instance_;
}  // namespace fc_taposd_params
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* Arena::CreateMaybeMessage<::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params>(Arena*);
template<> ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port* Arena::CreateMaybeMessage<::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_tp {
namespace fc_taposd_params {

// ===================================================================

class FC_TAPOSD_Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params) */ {
 public:
  FC_TAPOSD_Params();
  virtual ~FC_TAPOSD_Params();

  FC_TAPOSD_Params(const FC_TAPOSD_Params& from);
  FC_TAPOSD_Params(FC_TAPOSD_Params&& from) noexcept
    : FC_TAPOSD_Params() {
    *this = ::std::move(from);
  }

  inline FC_TAPOSD_Params& operator=(const FC_TAPOSD_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TAPOSD_Params& operator=(FC_TAPOSD_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TAPOSD_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TAPOSD_Params* internal_default_instance() {
    return reinterpret_cast<const FC_TAPOSD_Params*>(
               &_FC_TAPOSD_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FC_TAPOSD_Params& a, FC_TAPOSD_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TAPOSD_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TAPOSD_Params* New() const final {
    return CreateMaybeMessage<FC_TAPOSD_Params>(nullptr);
  }

  FC_TAPOSD_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TAPOSD_Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TAPOSD_Params& from);
  void MergeFrom(const FC_TAPOSD_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TAPOSD_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto);
    return ::descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kAPTMAXCURBDELDISTTOROADSIDEPARMFieldNumber = 78,
    kAPTMINANGTRESHCMFBOXLIMITPAPERDEGFieldNumber = 204,
    kAPTGPOUTGAPENTRANCEMFieldNumber = 208,
    kAPTPOUTPERPCOROFFSREARMFieldNumber = 288,
    kAPTMAXANGTRESHCMFBOXLIMITPAPERDEGFieldNumber = 423,
    kAPTACTUALLENGTHPOSEHISTORYFieldNumber = 575,
    kAPTGPOUTREACHEDMFieldNumber = 590,
    kAPTMAXLATERALDEVIATIONMFieldNumber = 610,
    kAPTPINPERPPOSEYAWRADFieldNumber = 632,
    kAPTEXTENTMAXBOXROADSIDEMFieldNumber = 860,
    kAPTMAXCOMFPOSINTTOLMFieldNumber = 866,
    kAPTMAXDEVUPDATELATGPMFieldNumber = 869,
    kAPTPOUTPERPDEVYAWRADFieldNumber = 871,
    kAPTPOUTPARPOSEXMFieldNumber = 952,
    kAPTPINPERPPOSEYMFieldNumber = 1023,
    kAPTPOUTPERPCOROFFSOPPOSMFieldNumber = 1036,
    kAPTPOUTPERPCOROFFSSLOTSMFieldNumber = 1120,
    kAPTPOUTPARPOSEYMFieldNumber = 1160,
    kAPTPINPARPOSEYAWRADFieldNumber = 1165,
    kAPTPINPERPPOSEXMFieldNumber = 1231,
    kAPTMINPBOXEXISTPERCFieldNumber = 1255,
    kAPTURGENTUPDATEDEVFACTORPERPANGNUFieldNumber = 1289,
    kAPTORICATEGSCOREFALLBACKMFieldNumber = 1511,
    kAPTPOUTPERPCOROFFSFRONTMFieldNumber = 1543,
    kAPTPOUTPERPPOSEYRIGHTMFieldNumber = 1590,
    kAPTMAXMARKINGANGDEVRADFieldNumber = 1679,
    kAPTMAXDEVUPDATELONGPERPMFieldNumber = 1683,
    kAPTURGENTUPDATEDEVFACTORPARLATNUFieldNumber = 1748,
    kAPTPOUTPERPPOSERIGHTMFieldNumber = 1813,
    kAPTWHEELDISTTOWHEELSTOPPERMFieldNumber = 1883,
    kAPTDELRELOTHERWCURBASSIGNMENTRATIONUFieldNumber = 1889,
    kAPTPINPARPOSEXMFieldNumber = 2082,
    kUiVersionNumberFieldNumber = 2124,
    kAPTPOUTPERPMAXPULLOUTDISTINROADDIRMFieldNumber = 2142,
    kAPTMAXDELIMDISTTOBOXMFieldNumber = 2147,
    kAPTMAXDEVUPDYAWPARRADFieldNumber = 2204,
    kAPTMAXDEVUPDYAWGPRADFieldNumber = 2263,
    kAPTORICATEGWEIGHTSHORTSIDEPARKMARKINGNUFieldNumber = 2409,
    kAPTMAXDEVUPDATELONGPARMFieldNumber = 2420,
    kAPTPOUTPARPOSEYAWRADFieldNumber = 2435,
    kAPTUPDATEPOSELASTSTROKENUFieldNumber = 3327,
    kAPTUPDATELONGONLYPARNUFieldNumber = 1977,
    kAPTYAWANGPBOXORINUFieldNumber = 898,
    kAPTGPINSIDELATCENTERONLYFieldNumber = 3710,
    kAPTPOSDEFAPPROACHFieldNumber = 2556,
    kAPTORICATEGWEIGHTLONGSIDEPARKMARKINGNUFieldNumber = 2565,
    kAPTORICATEGWEIGHTLONGSIDELANEBOUNDNUFieldNumber = 2793,
    kAPTAXISMINOUTSIDEGARAGEMFieldNumber = 2904,
    kAPTPOUTPERPDEVLATMFieldNumber = 2928,
    kAPTLENIRRELEVANTAREAXMFieldNumber = 3009,
    kAPTPOUTPERPPOSEYLEFTMFieldNumber = 3035,
    kAPTORICATEGWEIGHTLONGSIDECURBNUFieldNumber = 3084,
    kAPTGPREACHEDDEVBOXMFieldNumber = 3129,
    kAPTPOUTPERPPOSELEFTMFieldNumber = 3138,
    kAPTMAXDEVUPDYAWPERPRADFieldNumber = 3263,
    kAPTMINANGTRESHCMFBOXLIMITANGLEDDEGFieldNumber = 3306,
    kAPTLENIRRELEVANTAREAYMFieldNumber = 3313,
    kAPTMAXDEVUPDATELATPARMFieldNumber = 3347,
    kAPTURGENTUPDATEDEVFACTORPARANGNUFieldNumber = 3349,
    kAPTGPPOSEFREEZERADIUSMFieldNumber = 3381,
    kAPTMINOBJEXISTPERCFieldNumber = 3389,
    kAPTORICATEGWEIGHTLONGSIDEVIRTUALLINENUFieldNumber = 3426,
    kAPTMAXANGTRESHCMFBOXLIMITANGLEDDEGFieldNumber = 3457,
    kAPTGPREACHEDDEVLONGMFieldNumber = 3508,
    kAPTPOUTPARSAFETYDISTMFieldNumber = 3545,
    kAPTMAXVIRTUALLINEANGDEVRADFieldNumber = 3565,
    kAPTORICATEGWEIGHTSHORTSIDELANEBOUNDNUFieldNumber = 3576,
    kAPTMAXDEVUPDATELATPERPMFieldNumber = 3592,
    kAPTORICATEGWEIGHTSHORTSIDEVIRTUALLINENUFieldNumber = 3598,
    kAPTPOUTPERPPOSEYRBWDMFieldNumber = 3630,
    kAPTMINLENGTHMARKINGMFieldNumber = 3687,
    kAPTMINLATERALDEVIATIONMFieldNumber = 3706,
    kAPTURGENTUPDATEDEVFACTORPERPLONGNUFieldNumber = 3714,
    kAPTURGENTUPDATEDEVFACTORPARLONGNUFieldNumber = 3748,
    kAPTURGENTUPDATEDEVFACTORPERPLATNUFieldNumber = 3784,
    kAPTORICATEGWEIGHTFALLBACKNUFieldNumber = 3820,
    kAPTORICATEGWEIGHTSHORTSIDECURBNUFieldNumber = 3846,
    kAPTPINPARPOSEYMFieldNumber = 3858,
    kAPTMAXDEVUPDATELONGGPMFieldNumber = 1723759,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float AP_T_MAX_CURB_DEL_DIST_TO_ROADSIDE_PAR_M = 78;
  bool has_ap_t_max_curb_del_dist_to_roadside_par_m() const;
  private:
  bool _internal_has_ap_t_max_curb_del_dist_to_roadside_par_m() const;
  public:
  void clear_ap_t_max_curb_del_dist_to_roadside_par_m();
  float ap_t_max_curb_del_dist_to_roadside_par_m() const;
  void set_ap_t_max_curb_del_dist_to_roadside_par_m(float value);
  private:
  float _internal_ap_t_max_curb_del_dist_to_roadside_par_m() const;
  void _internal_set_ap_t_max_curb_del_dist_to_roadside_par_m(float value);
  public:

  // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 204;
  bool has_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const;
  private:
  bool _internal_has_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const;
  public:
  void clear_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg();
  float ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const;
  void set_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(float value);
  private:
  float _internal_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const;
  void _internal_set_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(float value);
  public:

  // optional float AP_T_GP_OUT_GAP_ENTRANCE_M = 208;
  bool has_ap_t_gp_out_gap_entrance_m() const;
  private:
  bool _internal_has_ap_t_gp_out_gap_entrance_m() const;
  public:
  void clear_ap_t_gp_out_gap_entrance_m();
  float ap_t_gp_out_gap_entrance_m() const;
  void set_ap_t_gp_out_gap_entrance_m(float value);
  private:
  float _internal_ap_t_gp_out_gap_entrance_m() const;
  void _internal_set_ap_t_gp_out_gap_entrance_m(float value);
  public:

  // optional float AP_T_POUT_PERP_COR_OFFS_REAR_M = 288;
  bool has_ap_t_pout_perp_cor_offs_rear_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_cor_offs_rear_m() const;
  public:
  void clear_ap_t_pout_perp_cor_offs_rear_m();
  float ap_t_pout_perp_cor_offs_rear_m() const;
  void set_ap_t_pout_perp_cor_offs_rear_m(float value);
  private:
  float _internal_ap_t_pout_perp_cor_offs_rear_m() const;
  void _internal_set_ap_t_pout_perp_cor_offs_rear_m(float value);
  public:

  // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 423;
  bool has_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const;
  private:
  bool _internal_has_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const;
  public:
  void clear_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg();
  float ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const;
  void set_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(float value);
  private:
  float _internal_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const;
  void _internal_set_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(float value);
  public:

  // optional uint32 AP_T_ACTUAL_LENGTH_POSE_HISTORY = 575;
  bool has_ap_t_actual_length_pose_history() const;
  private:
  bool _internal_has_ap_t_actual_length_pose_history() const;
  public:
  void clear_ap_t_actual_length_pose_history();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_t_actual_length_pose_history() const;
  void set_ap_t_actual_length_pose_history(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_t_actual_length_pose_history() const;
  void _internal_set_ap_t_actual_length_pose_history(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_T_GP_OUT_REACHED_M = 590;
  bool has_ap_t_gp_out_reached_m() const;
  private:
  bool _internal_has_ap_t_gp_out_reached_m() const;
  public:
  void clear_ap_t_gp_out_reached_m();
  float ap_t_gp_out_reached_m() const;
  void set_ap_t_gp_out_reached_m(float value);
  private:
  float _internal_ap_t_gp_out_reached_m() const;
  void _internal_set_ap_t_gp_out_reached_m(float value);
  public:

  // optional float AP_T_MAX_LATERAL_DEVIATION_M = 610;
  bool has_ap_t_max_lateral_deviation_m() const;
  private:
  bool _internal_has_ap_t_max_lateral_deviation_m() const;
  public:
  void clear_ap_t_max_lateral_deviation_m();
  float ap_t_max_lateral_deviation_m() const;
  void set_ap_t_max_lateral_deviation_m(float value);
  private:
  float _internal_ap_t_max_lateral_deviation_m() const;
  void _internal_set_ap_t_max_lateral_deviation_m(float value);
  public:

  // optional float AP_T_PIN_PERP_POSE_YAW_RAD = 632;
  bool has_ap_t_pin_perp_pose_yaw_rad() const;
  private:
  bool _internal_has_ap_t_pin_perp_pose_yaw_rad() const;
  public:
  void clear_ap_t_pin_perp_pose_yaw_rad();
  float ap_t_pin_perp_pose_yaw_rad() const;
  void set_ap_t_pin_perp_pose_yaw_rad(float value);
  private:
  float _internal_ap_t_pin_perp_pose_yaw_rad() const;
  void _internal_set_ap_t_pin_perp_pose_yaw_rad(float value);
  public:

  // optional float AP_T_EXTENT_MAX_BOX_ROADSIDE_M = 860;
  bool has_ap_t_extent_max_box_roadside_m() const;
  private:
  bool _internal_has_ap_t_extent_max_box_roadside_m() const;
  public:
  void clear_ap_t_extent_max_box_roadside_m();
  float ap_t_extent_max_box_roadside_m() const;
  void set_ap_t_extent_max_box_roadside_m(float value);
  private:
  float _internal_ap_t_extent_max_box_roadside_m() const;
  void _internal_set_ap_t_extent_max_box_roadside_m(float value);
  public:

  // optional float AP_T_MAXCOMFPOS_INT_TOL_M = 866;
  bool has_ap_t_maxcomfpos_int_tol_m() const;
  private:
  bool _internal_has_ap_t_maxcomfpos_int_tol_m() const;
  public:
  void clear_ap_t_maxcomfpos_int_tol_m();
  float ap_t_maxcomfpos_int_tol_m() const;
  void set_ap_t_maxcomfpos_int_tol_m(float value);
  private:
  float _internal_ap_t_maxcomfpos_int_tol_m() const;
  void _internal_set_ap_t_maxcomfpos_int_tol_m(float value);
  public:

  // optional float AP_T_MAX_DEV_UPDATE_LAT_GP_M = 869;
  bool has_ap_t_max_dev_update_lat_gp_m() const;
  private:
  bool _internal_has_ap_t_max_dev_update_lat_gp_m() const;
  public:
  void clear_ap_t_max_dev_update_lat_gp_m();
  float ap_t_max_dev_update_lat_gp_m() const;
  void set_ap_t_max_dev_update_lat_gp_m(float value);
  private:
  float _internal_ap_t_max_dev_update_lat_gp_m() const;
  void _internal_set_ap_t_max_dev_update_lat_gp_m(float value);
  public:

  // optional float AP_T_POUT_PERP_DEV_YAW_RAD = 871;
  bool has_ap_t_pout_perp_dev_yaw_rad() const;
  private:
  bool _internal_has_ap_t_pout_perp_dev_yaw_rad() const;
  public:
  void clear_ap_t_pout_perp_dev_yaw_rad();
  float ap_t_pout_perp_dev_yaw_rad() const;
  void set_ap_t_pout_perp_dev_yaw_rad(float value);
  private:
  float _internal_ap_t_pout_perp_dev_yaw_rad() const;
  void _internal_set_ap_t_pout_perp_dev_yaw_rad(float value);
  public:

  // optional float AP_T_POUT_PAR_POSE_X_M = 952;
  bool has_ap_t_pout_par_pose_x_m() const;
  private:
  bool _internal_has_ap_t_pout_par_pose_x_m() const;
  public:
  void clear_ap_t_pout_par_pose_x_m();
  float ap_t_pout_par_pose_x_m() const;
  void set_ap_t_pout_par_pose_x_m(float value);
  private:
  float _internal_ap_t_pout_par_pose_x_m() const;
  void _internal_set_ap_t_pout_par_pose_x_m(float value);
  public:

  // optional float AP_T_PIN_PERP_POSE_Y_M = 1023;
  bool has_ap_t_pin_perp_pose_y_m() const;
  private:
  bool _internal_has_ap_t_pin_perp_pose_y_m() const;
  public:
  void clear_ap_t_pin_perp_pose_y_m();
  float ap_t_pin_perp_pose_y_m() const;
  void set_ap_t_pin_perp_pose_y_m(float value);
  private:
  float _internal_ap_t_pin_perp_pose_y_m() const;
  void _internal_set_ap_t_pin_perp_pose_y_m(float value);
  public:

  // optional float AP_T_POUT_PERP_COR_OFFS_OPPOS_M = 1036;
  bool has_ap_t_pout_perp_cor_offs_oppos_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_cor_offs_oppos_m() const;
  public:
  void clear_ap_t_pout_perp_cor_offs_oppos_m();
  float ap_t_pout_perp_cor_offs_oppos_m() const;
  void set_ap_t_pout_perp_cor_offs_oppos_m(float value);
  private:
  float _internal_ap_t_pout_perp_cor_offs_oppos_m() const;
  void _internal_set_ap_t_pout_perp_cor_offs_oppos_m(float value);
  public:

  // optional float AP_T_POUT_PERP_COR_OFFS_SLOTS_M = 1120;
  bool has_ap_t_pout_perp_cor_offs_slots_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_cor_offs_slots_m() const;
  public:
  void clear_ap_t_pout_perp_cor_offs_slots_m();
  float ap_t_pout_perp_cor_offs_slots_m() const;
  void set_ap_t_pout_perp_cor_offs_slots_m(float value);
  private:
  float _internal_ap_t_pout_perp_cor_offs_slots_m() const;
  void _internal_set_ap_t_pout_perp_cor_offs_slots_m(float value);
  public:

  // optional float AP_T_POUT_PAR_POSE_Y_M = 1160;
  bool has_ap_t_pout_par_pose_y_m() const;
  private:
  bool _internal_has_ap_t_pout_par_pose_y_m() const;
  public:
  void clear_ap_t_pout_par_pose_y_m();
  float ap_t_pout_par_pose_y_m() const;
  void set_ap_t_pout_par_pose_y_m(float value);
  private:
  float _internal_ap_t_pout_par_pose_y_m() const;
  void _internal_set_ap_t_pout_par_pose_y_m(float value);
  public:

  // optional float AP_T_PIN_PAR_POSE_YAW_RAD = 1165;
  bool has_ap_t_pin_par_pose_yaw_rad() const;
  private:
  bool _internal_has_ap_t_pin_par_pose_yaw_rad() const;
  public:
  void clear_ap_t_pin_par_pose_yaw_rad();
  float ap_t_pin_par_pose_yaw_rad() const;
  void set_ap_t_pin_par_pose_yaw_rad(float value);
  private:
  float _internal_ap_t_pin_par_pose_yaw_rad() const;
  void _internal_set_ap_t_pin_par_pose_yaw_rad(float value);
  public:

  // optional float AP_T_PIN_PERP_POSE_X_M = 1231;
  bool has_ap_t_pin_perp_pose_x_m() const;
  private:
  bool _internal_has_ap_t_pin_perp_pose_x_m() const;
  public:
  void clear_ap_t_pin_perp_pose_x_m();
  float ap_t_pin_perp_pose_x_m() const;
  void set_ap_t_pin_perp_pose_x_m(float value);
  private:
  float _internal_ap_t_pin_perp_pose_x_m() const;
  void _internal_set_ap_t_pin_perp_pose_x_m(float value);
  public:

  // optional uint32 AP_T_MIN_PBOX_EXIST_PERC = 1255;
  bool has_ap_t_min_pbox_exist_perc() const;
  private:
  bool _internal_has_ap_t_min_pbox_exist_perc() const;
  public:
  void clear_ap_t_min_pbox_exist_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_t_min_pbox_exist_perc() const;
  void set_ap_t_min_pbox_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_t_min_pbox_exist_perc() const;
  void _internal_set_ap_t_min_pbox_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_ANG_NU = 1289;
  bool has_ap_t_urgent_update_dev_factor_perp_ang_nu() const;
  private:
  bool _internal_has_ap_t_urgent_update_dev_factor_perp_ang_nu() const;
  public:
  void clear_ap_t_urgent_update_dev_factor_perp_ang_nu();
  float ap_t_urgent_update_dev_factor_perp_ang_nu() const;
  void set_ap_t_urgent_update_dev_factor_perp_ang_nu(float value);
  private:
  float _internal_ap_t_urgent_update_dev_factor_perp_ang_nu() const;
  void _internal_set_ap_t_urgent_update_dev_factor_perp_ang_nu(float value);
  public:

  // optional float AP_T_ORI_CATEG_SCORE_FALLBACK_M = 1511;
  bool has_ap_t_ori_categ_score_fallback_m() const;
  private:
  bool _internal_has_ap_t_ori_categ_score_fallback_m() const;
  public:
  void clear_ap_t_ori_categ_score_fallback_m();
  float ap_t_ori_categ_score_fallback_m() const;
  void set_ap_t_ori_categ_score_fallback_m(float value);
  private:
  float _internal_ap_t_ori_categ_score_fallback_m() const;
  void _internal_set_ap_t_ori_categ_score_fallback_m(float value);
  public:

  // optional float AP_T_POUT_PERP_COR_OFFS_FRONT_M = 1543;
  bool has_ap_t_pout_perp_cor_offs_front_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_cor_offs_front_m() const;
  public:
  void clear_ap_t_pout_perp_cor_offs_front_m();
  float ap_t_pout_perp_cor_offs_front_m() const;
  void set_ap_t_pout_perp_cor_offs_front_m(float value);
  private:
  float _internal_ap_t_pout_perp_cor_offs_front_m() const;
  void _internal_set_ap_t_pout_perp_cor_offs_front_m(float value);
  public:

  // optional float AP_T_POUT_PERP_POSE_Y_RIGHT_M = 1590;
  bool has_ap_t_pout_perp_pose_y_right_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_pose_y_right_m() const;
  public:
  void clear_ap_t_pout_perp_pose_y_right_m();
  float ap_t_pout_perp_pose_y_right_m() const;
  void set_ap_t_pout_perp_pose_y_right_m(float value);
  private:
  float _internal_ap_t_pout_perp_pose_y_right_m() const;
  void _internal_set_ap_t_pout_perp_pose_y_right_m(float value);
  public:

  // optional float AP_T_MAX_MARKING_ANG_DEV_RAD = 1679;
  bool has_ap_t_max_marking_ang_dev_rad() const;
  private:
  bool _internal_has_ap_t_max_marking_ang_dev_rad() const;
  public:
  void clear_ap_t_max_marking_ang_dev_rad();
  float ap_t_max_marking_ang_dev_rad() const;
  void set_ap_t_max_marking_ang_dev_rad(float value);
  private:
  float _internal_ap_t_max_marking_ang_dev_rad() const;
  void _internal_set_ap_t_max_marking_ang_dev_rad(float value);
  public:

  // optional float AP_T_MAX_DEV_UPDATE_LONG_PERP_M = 1683;
  bool has_ap_t_max_dev_update_long_perp_m() const;
  private:
  bool _internal_has_ap_t_max_dev_update_long_perp_m() const;
  public:
  void clear_ap_t_max_dev_update_long_perp_m();
  float ap_t_max_dev_update_long_perp_m() const;
  void set_ap_t_max_dev_update_long_perp_m(float value);
  private:
  float _internal_ap_t_max_dev_update_long_perp_m() const;
  void _internal_set_ap_t_max_dev_update_long_perp_m(float value);
  public:

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU = 1748;
  bool has_ap_t_urgent_update_dev_factor_par_lat_nu() const;
  private:
  bool _internal_has_ap_t_urgent_update_dev_factor_par_lat_nu() const;
  public:
  void clear_ap_t_urgent_update_dev_factor_par_lat_nu();
  float ap_t_urgent_update_dev_factor_par_lat_nu() const;
  void set_ap_t_urgent_update_dev_factor_par_lat_nu(float value);
  private:
  float _internal_ap_t_urgent_update_dev_factor_par_lat_nu() const;
  void _internal_set_ap_t_urgent_update_dev_factor_par_lat_nu(float value);
  public:

  // optional float AP_T_POUT_PERP_POSE_RIGHT_M = 1813;
  bool has_ap_t_pout_perp_pose_right_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_pose_right_m() const;
  public:
  void clear_ap_t_pout_perp_pose_right_m();
  float ap_t_pout_perp_pose_right_m() const;
  void set_ap_t_pout_perp_pose_right_m(float value);
  private:
  float _internal_ap_t_pout_perp_pose_right_m() const;
  void _internal_set_ap_t_pout_perp_pose_right_m(float value);
  public:

  // optional float AP_T_WHEEL_DIST_TO_WHEELSTOPPER_M = 1883;
  bool has_ap_t_wheel_dist_to_wheelstopper_m() const;
  private:
  bool _internal_has_ap_t_wheel_dist_to_wheelstopper_m() const;
  public:
  void clear_ap_t_wheel_dist_to_wheelstopper_m();
  float ap_t_wheel_dist_to_wheelstopper_m() const;
  void set_ap_t_wheel_dist_to_wheelstopper_m(float value);
  private:
  float _internal_ap_t_wheel_dist_to_wheelstopper_m() const;
  void _internal_set_ap_t_wheel_dist_to_wheelstopper_m(float value);
  public:

  // optional float AP_T_DEL_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU = 1889;
  bool has_ap_t_del_rel_otherw_curb_assignment_ratio_nu() const;
  private:
  bool _internal_has_ap_t_del_rel_otherw_curb_assignment_ratio_nu() const;
  public:
  void clear_ap_t_del_rel_otherw_curb_assignment_ratio_nu();
  float ap_t_del_rel_otherw_curb_assignment_ratio_nu() const;
  void set_ap_t_del_rel_otherw_curb_assignment_ratio_nu(float value);
  private:
  float _internal_ap_t_del_rel_otherw_curb_assignment_ratio_nu() const;
  void _internal_set_ap_t_del_rel_otherw_curb_assignment_ratio_nu(float value);
  public:

  // optional float AP_T_PIN_PAR_POSE_X_M = 2082;
  bool has_ap_t_pin_par_pose_x_m() const;
  private:
  bool _internal_has_ap_t_pin_par_pose_x_m() const;
  public:
  void clear_ap_t_pin_par_pose_x_m();
  float ap_t_pin_par_pose_x_m() const;
  void set_ap_t_pin_par_pose_x_m(float value);
  private:
  float _internal_ap_t_pin_par_pose_x_m() const;
  void _internal_set_ap_t_pin_par_pose_x_m(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_T_POUT_PERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M = 2142;
  bool has_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const;
  public:
  void clear_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m();
  float ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const;
  void set_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(float value);
  private:
  float _internal_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const;
  void _internal_set_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(float value);
  public:

  // optional float AP_T_MAX_DELIM_DIST_TO_BOX_M = 2147;
  bool has_ap_t_max_delim_dist_to_box_m() const;
  private:
  bool _internal_has_ap_t_max_delim_dist_to_box_m() const;
  public:
  void clear_ap_t_max_delim_dist_to_box_m();
  float ap_t_max_delim_dist_to_box_m() const;
  void set_ap_t_max_delim_dist_to_box_m(float value);
  private:
  float _internal_ap_t_max_delim_dist_to_box_m() const;
  void _internal_set_ap_t_max_delim_dist_to_box_m(float value);
  public:

  // optional float AP_T_MAX_DEV_UPD_YAW_PAR_RAD = 2204;
  bool has_ap_t_max_dev_upd_yaw_par_rad() const;
  private:
  bool _internal_has_ap_t_max_dev_upd_yaw_par_rad() const;
  public:
  void clear_ap_t_max_dev_upd_yaw_par_rad();
  float ap_t_max_dev_upd_yaw_par_rad() const;
  void set_ap_t_max_dev_upd_yaw_par_rad(float value);
  private:
  float _internal_ap_t_max_dev_upd_yaw_par_rad() const;
  void _internal_set_ap_t_max_dev_upd_yaw_par_rad(float value);
  public:

  // optional float AP_T_MAX_DEV_UPD_YAW_GP_RAD = 2263;
  bool has_ap_t_max_dev_upd_yaw_gp_rad() const;
  private:
  bool _internal_has_ap_t_max_dev_upd_yaw_gp_rad() const;
  public:
  void clear_ap_t_max_dev_upd_yaw_gp_rad();
  float ap_t_max_dev_upd_yaw_gp_rad() const;
  void set_ap_t_max_dev_upd_yaw_gp_rad(float value);
  private:
  float _internal_ap_t_max_dev_upd_yaw_gp_rad() const;
  void _internal_set_ap_t_max_dev_upd_yaw_gp_rad(float value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU = 2409;
  bool has_ap_t_ori_categ_weight_shortside_parkmarking_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_shortside_parkmarking_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_shortside_parkmarking_nu();
  float ap_t_ori_categ_weight_shortside_parkmarking_nu() const;
  void set_ap_t_ori_categ_weight_shortside_parkmarking_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_shortside_parkmarking_nu() const;
  void _internal_set_ap_t_ori_categ_weight_shortside_parkmarking_nu(float value);
  public:

  // optional float AP_T_MAX_DEV_UPDATE_LONG_PAR_M = 2420;
  bool has_ap_t_max_dev_update_long_par_m() const;
  private:
  bool _internal_has_ap_t_max_dev_update_long_par_m() const;
  public:
  void clear_ap_t_max_dev_update_long_par_m();
  float ap_t_max_dev_update_long_par_m() const;
  void set_ap_t_max_dev_update_long_par_m(float value);
  private:
  float _internal_ap_t_max_dev_update_long_par_m() const;
  void _internal_set_ap_t_max_dev_update_long_par_m(float value);
  public:

  // optional float AP_T_POUT_PAR_POSE_YAW_RAD = 2435;
  bool has_ap_t_pout_par_pose_yaw_rad() const;
  private:
  bool _internal_has_ap_t_pout_par_pose_yaw_rad() const;
  public:
  void clear_ap_t_pout_par_pose_yaw_rad();
  float ap_t_pout_par_pose_yaw_rad() const;
  void set_ap_t_pout_par_pose_yaw_rad(float value);
  private:
  float _internal_ap_t_pout_par_pose_yaw_rad() const;
  void _internal_set_ap_t_pout_par_pose_yaw_rad(float value);
  public:

  // optional bool AP_T_UPDATE_POSE_LAST_STROKE_NU = 3327;
  bool has_ap_t_update_pose_last_stroke_nu() const;
  private:
  bool _internal_has_ap_t_update_pose_last_stroke_nu() const;
  public:
  void clear_ap_t_update_pose_last_stroke_nu();
  bool ap_t_update_pose_last_stroke_nu() const;
  void set_ap_t_update_pose_last_stroke_nu(bool value);
  private:
  bool _internal_ap_t_update_pose_last_stroke_nu() const;
  void _internal_set_ap_t_update_pose_last_stroke_nu(bool value);
  public:

  // optional bool AP_T_UPDATE_LONG_ONLY_PAR_NU = 1977;
  bool has_ap_t_update_long_only_par_nu() const;
  private:
  bool _internal_has_ap_t_update_long_only_par_nu() const;
  public:
  void clear_ap_t_update_long_only_par_nu();
  bool ap_t_update_long_only_par_nu() const;
  void set_ap_t_update_long_only_par_nu(bool value);
  private:
  bool _internal_ap_t_update_long_only_par_nu() const;
  void _internal_set_ap_t_update_long_only_par_nu(bool value);
  public:

  // optional bool AP_T_YAW_ANG_PBOX_ORI_NU = 898;
  bool has_ap_t_yaw_ang_pbox_ori_nu() const;
  private:
  bool _internal_has_ap_t_yaw_ang_pbox_ori_nu() const;
  public:
  void clear_ap_t_yaw_ang_pbox_ori_nu();
  bool ap_t_yaw_ang_pbox_ori_nu() const;
  void set_ap_t_yaw_ang_pbox_ori_nu(bool value);
  private:
  bool _internal_ap_t_yaw_ang_pbox_ori_nu() const;
  void _internal_set_ap_t_yaw_ang_pbox_ori_nu(bool value);
  public:

  // optional bool AP_T_GP_INSIDE_LAT_CENTER_ONLY = 3710;
  bool has_ap_t_gp_inside_lat_center_only() const;
  private:
  bool _internal_has_ap_t_gp_inside_lat_center_only() const;
  public:
  void clear_ap_t_gp_inside_lat_center_only();
  bool ap_t_gp_inside_lat_center_only() const;
  void set_ap_t_gp_inside_lat_center_only(bool value);
  private:
  bool _internal_ap_t_gp_inside_lat_center_only() const;
  void _internal_set_ap_t_gp_inside_lat_center_only(bool value);
  public:

  // optional .pb.ap_tp.pos_def_approach.PosDefApproach AP_T_POS_DEF_APPROACH = 2556;
  bool has_ap_t_pos_def_approach() const;
  private:
  bool _internal_has_ap_t_pos_def_approach() const;
  public:
  void clear_ap_t_pos_def_approach();
  ::pb::ap_tp::pos_def_approach::PosDefApproach ap_t_pos_def_approach() const;
  void set_ap_t_pos_def_approach(::pb::ap_tp::pos_def_approach::PosDefApproach value);
  private:
  ::pb::ap_tp::pos_def_approach::PosDefApproach _internal_ap_t_pos_def_approach() const;
  void _internal_set_ap_t_pos_def_approach(::pb::ap_tp::pos_def_approach::PosDefApproach value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_PARKMARKING_NU = 2565;
  bool has_ap_t_ori_categ_weight_longside_parkmarking_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_longside_parkmarking_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_longside_parkmarking_nu();
  float ap_t_ori_categ_weight_longside_parkmarking_nu() const;
  void set_ap_t_ori_categ_weight_longside_parkmarking_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_longside_parkmarking_nu() const;
  void _internal_set_ap_t_ori_categ_weight_longside_parkmarking_nu(float value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_LANEBOUND_NU = 2793;
  bool has_ap_t_ori_categ_weight_longside_lanebound_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_longside_lanebound_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_longside_lanebound_nu();
  float ap_t_ori_categ_weight_longside_lanebound_nu() const;
  void set_ap_t_ori_categ_weight_longside_lanebound_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_longside_lanebound_nu() const;
  void _internal_set_ap_t_ori_categ_weight_longside_lanebound_nu(float value);
  public:

  // optional float AP_T_AXIS_MIN_OUTSIDE_GARAGE_M = 2904;
  bool has_ap_t_axis_min_outside_garage_m() const;
  private:
  bool _internal_has_ap_t_axis_min_outside_garage_m() const;
  public:
  void clear_ap_t_axis_min_outside_garage_m();
  float ap_t_axis_min_outside_garage_m() const;
  void set_ap_t_axis_min_outside_garage_m(float value);
  private:
  float _internal_ap_t_axis_min_outside_garage_m() const;
  void _internal_set_ap_t_axis_min_outside_garage_m(float value);
  public:

  // optional float AP_T_POUT_PERP_DEV_LAT_M = 2928;
  bool has_ap_t_pout_perp_dev_lat_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_dev_lat_m() const;
  public:
  void clear_ap_t_pout_perp_dev_lat_m();
  float ap_t_pout_perp_dev_lat_m() const;
  void set_ap_t_pout_perp_dev_lat_m(float value);
  private:
  float _internal_ap_t_pout_perp_dev_lat_m() const;
  void _internal_set_ap_t_pout_perp_dev_lat_m(float value);
  public:

  // optional float AP_T_LEN_IRRELEVANT_AREA_X_M = 3009;
  bool has_ap_t_len_irrelevant_area_x_m() const;
  private:
  bool _internal_has_ap_t_len_irrelevant_area_x_m() const;
  public:
  void clear_ap_t_len_irrelevant_area_x_m();
  float ap_t_len_irrelevant_area_x_m() const;
  void set_ap_t_len_irrelevant_area_x_m(float value);
  private:
  float _internal_ap_t_len_irrelevant_area_x_m() const;
  void _internal_set_ap_t_len_irrelevant_area_x_m(float value);
  public:

  // optional float AP_T_POUT_PERP_POSE_Y_LEFT_M = 3035;
  bool has_ap_t_pout_perp_pose_y_left_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_pose_y_left_m() const;
  public:
  void clear_ap_t_pout_perp_pose_y_left_m();
  float ap_t_pout_perp_pose_y_left_m() const;
  void set_ap_t_pout_perp_pose_y_left_m(float value);
  private:
  float _internal_ap_t_pout_perp_pose_y_left_m() const;
  void _internal_set_ap_t_pout_perp_pose_y_left_m(float value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU = 3084;
  bool has_ap_t_ori_categ_weight_longside_curb_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_longside_curb_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_longside_curb_nu();
  float ap_t_ori_categ_weight_longside_curb_nu() const;
  void set_ap_t_ori_categ_weight_longside_curb_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_longside_curb_nu() const;
  void _internal_set_ap_t_ori_categ_weight_longside_curb_nu(float value);
  public:

  // optional float AP_T_GP_REACHED_DEV_BOX_M = 3129;
  bool has_ap_t_gp_reached_dev_box_m() const;
  private:
  bool _internal_has_ap_t_gp_reached_dev_box_m() const;
  public:
  void clear_ap_t_gp_reached_dev_box_m();
  float ap_t_gp_reached_dev_box_m() const;
  void set_ap_t_gp_reached_dev_box_m(float value);
  private:
  float _internal_ap_t_gp_reached_dev_box_m() const;
  void _internal_set_ap_t_gp_reached_dev_box_m(float value);
  public:

  // optional float AP_T_POUT_PERP_POSE_LEFT_M = 3138;
  bool has_ap_t_pout_perp_pose_left_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_pose_left_m() const;
  public:
  void clear_ap_t_pout_perp_pose_left_m();
  float ap_t_pout_perp_pose_left_m() const;
  void set_ap_t_pout_perp_pose_left_m(float value);
  private:
  float _internal_ap_t_pout_perp_pose_left_m() const;
  void _internal_set_ap_t_pout_perp_pose_left_m(float value);
  public:

  // optional float AP_T_MAX_DEV_UPD_YAW_PERP_RAD = 3263;
  bool has_ap_t_max_dev_upd_yaw_perp_rad() const;
  private:
  bool _internal_has_ap_t_max_dev_upd_yaw_perp_rad() const;
  public:
  void clear_ap_t_max_dev_upd_yaw_perp_rad();
  float ap_t_max_dev_upd_yaw_perp_rad() const;
  void set_ap_t_max_dev_upd_yaw_perp_rad(float value);
  private:
  float _internal_ap_t_max_dev_upd_yaw_perp_rad() const;
  void _internal_set_ap_t_max_dev_upd_yaw_perp_rad(float value);
  public:

  // optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3306;
  bool has_ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const;
  private:
  bool _internal_has_ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const;
  public:
  void clear_ap_t_min_ang_tresh_cmf_box_limit_angled_deg();
  float ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const;
  void set_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(float value);
  private:
  float _internal_ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const;
  void _internal_set_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(float value);
  public:

  // optional float AP_T_LEN_IRRELEVANT_AREA_Y_M = 3313;
  bool has_ap_t_len_irrelevant_area_y_m() const;
  private:
  bool _internal_has_ap_t_len_irrelevant_area_y_m() const;
  public:
  void clear_ap_t_len_irrelevant_area_y_m();
  float ap_t_len_irrelevant_area_y_m() const;
  void set_ap_t_len_irrelevant_area_y_m(float value);
  private:
  float _internal_ap_t_len_irrelevant_area_y_m() const;
  void _internal_set_ap_t_len_irrelevant_area_y_m(float value);
  public:

  // optional float AP_T_MAX_DEV_UPDATE_LAT_PAR_M = 3347;
  bool has_ap_t_max_dev_update_lat_par_m() const;
  private:
  bool _internal_has_ap_t_max_dev_update_lat_par_m() const;
  public:
  void clear_ap_t_max_dev_update_lat_par_m();
  float ap_t_max_dev_update_lat_par_m() const;
  void set_ap_t_max_dev_update_lat_par_m(float value);
  private:
  float _internal_ap_t_max_dev_update_lat_par_m() const;
  void _internal_set_ap_t_max_dev_update_lat_par_m(float value);
  public:

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_ANG_NU = 3349;
  bool has_ap_t_urgent_update_dev_factor_par_ang_nu() const;
  private:
  bool _internal_has_ap_t_urgent_update_dev_factor_par_ang_nu() const;
  public:
  void clear_ap_t_urgent_update_dev_factor_par_ang_nu();
  float ap_t_urgent_update_dev_factor_par_ang_nu() const;
  void set_ap_t_urgent_update_dev_factor_par_ang_nu(float value);
  private:
  float _internal_ap_t_urgent_update_dev_factor_par_ang_nu() const;
  void _internal_set_ap_t_urgent_update_dev_factor_par_ang_nu(float value);
  public:

  // optional float AP_T_GP_POSE_FREEZE_RADIUS_M = 3381;
  bool has_ap_t_gp_pose_freeze_radius_m() const;
  private:
  bool _internal_has_ap_t_gp_pose_freeze_radius_m() const;
  public:
  void clear_ap_t_gp_pose_freeze_radius_m();
  float ap_t_gp_pose_freeze_radius_m() const;
  void set_ap_t_gp_pose_freeze_radius_m(float value);
  private:
  float _internal_ap_t_gp_pose_freeze_radius_m() const;
  void _internal_set_ap_t_gp_pose_freeze_radius_m(float value);
  public:

  // optional uint32 AP_T_MIN_OBJ_EXIST_PERC = 3389;
  bool has_ap_t_min_obj_exist_perc() const;
  private:
  bool _internal_has_ap_t_min_obj_exist_perc() const;
  public:
  void clear_ap_t_min_obj_exist_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_t_min_obj_exist_perc() const;
  void set_ap_t_min_obj_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_t_min_obj_exist_perc() const;
  void _internal_set_ap_t_min_obj_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_VIRTUALLINE_NU = 3426;
  bool has_ap_t_ori_categ_weight_longside_virtualline_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_longside_virtualline_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_longside_virtualline_nu();
  float ap_t_ori_categ_weight_longside_virtualline_nu() const;
  void set_ap_t_ori_categ_weight_longside_virtualline_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_longside_virtualline_nu() const;
  void _internal_set_ap_t_ori_categ_weight_longside_virtualline_nu(float value);
  public:

  // optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3457;
  bool has_ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const;
  private:
  bool _internal_has_ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const;
  public:
  void clear_ap_t_max_ang_tresh_cmf_box_limit_angled_deg();
  float ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const;
  void set_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(float value);
  private:
  float _internal_ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const;
  void _internal_set_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(float value);
  public:

  // optional float AP_T_GP_REACHED_DEV_LONG_M = 3508;
  bool has_ap_t_gp_reached_dev_long_m() const;
  private:
  bool _internal_has_ap_t_gp_reached_dev_long_m() const;
  public:
  void clear_ap_t_gp_reached_dev_long_m();
  float ap_t_gp_reached_dev_long_m() const;
  void set_ap_t_gp_reached_dev_long_m(float value);
  private:
  float _internal_ap_t_gp_reached_dev_long_m() const;
  void _internal_set_ap_t_gp_reached_dev_long_m(float value);
  public:

  // optional float AP_T_POUT_PAR_SAFETY_DIST_M = 3545;
  bool has_ap_t_pout_par_safety_dist_m() const;
  private:
  bool _internal_has_ap_t_pout_par_safety_dist_m() const;
  public:
  void clear_ap_t_pout_par_safety_dist_m();
  float ap_t_pout_par_safety_dist_m() const;
  void set_ap_t_pout_par_safety_dist_m(float value);
  private:
  float _internal_ap_t_pout_par_safety_dist_m() const;
  void _internal_set_ap_t_pout_par_safety_dist_m(float value);
  public:

  // optional float AP_T_MAX_VIRTUALLINE_ANG_DEV_RAD = 3565;
  bool has_ap_t_max_virtualline_ang_dev_rad() const;
  private:
  bool _internal_has_ap_t_max_virtualline_ang_dev_rad() const;
  public:
  void clear_ap_t_max_virtualline_ang_dev_rad();
  float ap_t_max_virtualline_ang_dev_rad() const;
  void set_ap_t_max_virtualline_ang_dev_rad(float value);
  private:
  float _internal_ap_t_max_virtualline_ang_dev_rad() const;
  void _internal_set_ap_t_max_virtualline_ang_dev_rad(float value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_NU = 3576;
  bool has_ap_t_ori_categ_weight_shortside_lanebound_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_shortside_lanebound_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_shortside_lanebound_nu();
  float ap_t_ori_categ_weight_shortside_lanebound_nu() const;
  void set_ap_t_ori_categ_weight_shortside_lanebound_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_shortside_lanebound_nu() const;
  void _internal_set_ap_t_ori_categ_weight_shortside_lanebound_nu(float value);
  public:

  // optional float AP_T_MAX_DEV_UPDATE_LAT_PERP_M = 3592;
  bool has_ap_t_max_dev_update_lat_perp_m() const;
  private:
  bool _internal_has_ap_t_max_dev_update_lat_perp_m() const;
  public:
  void clear_ap_t_max_dev_update_lat_perp_m();
  float ap_t_max_dev_update_lat_perp_m() const;
  void set_ap_t_max_dev_update_lat_perp_m(float value);
  private:
  float _internal_ap_t_max_dev_update_lat_perp_m() const;
  void _internal_set_ap_t_max_dev_update_lat_perp_m(float value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIRTUALLINE_NU = 3598;
  bool has_ap_t_ori_categ_weight_shortside_virtualline_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_shortside_virtualline_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_shortside_virtualline_nu();
  float ap_t_ori_categ_weight_shortside_virtualline_nu() const;
  void set_ap_t_ori_categ_weight_shortside_virtualline_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_shortside_virtualline_nu() const;
  void _internal_set_ap_t_ori_categ_weight_shortside_virtualline_nu(float value);
  public:

  // optional float AP_T_POUT_PERP_POSE_Y_R_BWD_M = 3630;
  bool has_ap_t_pout_perp_pose_y_r_bwd_m() const;
  private:
  bool _internal_has_ap_t_pout_perp_pose_y_r_bwd_m() const;
  public:
  void clear_ap_t_pout_perp_pose_y_r_bwd_m();
  float ap_t_pout_perp_pose_y_r_bwd_m() const;
  void set_ap_t_pout_perp_pose_y_r_bwd_m(float value);
  private:
  float _internal_ap_t_pout_perp_pose_y_r_bwd_m() const;
  void _internal_set_ap_t_pout_perp_pose_y_r_bwd_m(float value);
  public:

  // optional float AP_T_MIN_LENGTH_MARKING_M = 3687;
  bool has_ap_t_min_length_marking_m() const;
  private:
  bool _internal_has_ap_t_min_length_marking_m() const;
  public:
  void clear_ap_t_min_length_marking_m();
  float ap_t_min_length_marking_m() const;
  void set_ap_t_min_length_marking_m(float value);
  private:
  float _internal_ap_t_min_length_marking_m() const;
  void _internal_set_ap_t_min_length_marking_m(float value);
  public:

  // optional float AP_T_MIN_LATERAL_DEVIATION_M = 3706;
  bool has_ap_t_min_lateral_deviation_m() const;
  private:
  bool _internal_has_ap_t_min_lateral_deviation_m() const;
  public:
  void clear_ap_t_min_lateral_deviation_m();
  float ap_t_min_lateral_deviation_m() const;
  void set_ap_t_min_lateral_deviation_m(float value);
  private:
  float _internal_ap_t_min_lateral_deviation_m() const;
  void _internal_set_ap_t_min_lateral_deviation_m(float value);
  public:

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LONG_NU = 3714;
  bool has_ap_t_urgent_update_dev_factor_perp_long_nu() const;
  private:
  bool _internal_has_ap_t_urgent_update_dev_factor_perp_long_nu() const;
  public:
  void clear_ap_t_urgent_update_dev_factor_perp_long_nu();
  float ap_t_urgent_update_dev_factor_perp_long_nu() const;
  void set_ap_t_urgent_update_dev_factor_perp_long_nu(float value);
  private:
  float _internal_ap_t_urgent_update_dev_factor_perp_long_nu() const;
  void _internal_set_ap_t_urgent_update_dev_factor_perp_long_nu(float value);
  public:

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LONG_NU = 3748;
  bool has_ap_t_urgent_update_dev_factor_par_long_nu() const;
  private:
  bool _internal_has_ap_t_urgent_update_dev_factor_par_long_nu() const;
  public:
  void clear_ap_t_urgent_update_dev_factor_par_long_nu();
  float ap_t_urgent_update_dev_factor_par_long_nu() const;
  void set_ap_t_urgent_update_dev_factor_par_long_nu(float value);
  private:
  float _internal_ap_t_urgent_update_dev_factor_par_long_nu() const;
  void _internal_set_ap_t_urgent_update_dev_factor_par_long_nu(float value);
  public:

  // optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_NU = 3784;
  bool has_ap_t_urgent_update_dev_factor_perp_lat_nu() const;
  private:
  bool _internal_has_ap_t_urgent_update_dev_factor_perp_lat_nu() const;
  public:
  void clear_ap_t_urgent_update_dev_factor_perp_lat_nu();
  float ap_t_urgent_update_dev_factor_perp_lat_nu() const;
  void set_ap_t_urgent_update_dev_factor_perp_lat_nu(float value);
  private:
  float _internal_ap_t_urgent_update_dev_factor_perp_lat_nu() const;
  void _internal_set_ap_t_urgent_update_dev_factor_perp_lat_nu(float value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_FALLBACK_NU = 3820;
  bool has_ap_t_ori_categ_weight_fallback_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_fallback_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_fallback_nu();
  float ap_t_ori_categ_weight_fallback_nu() const;
  void set_ap_t_ori_categ_weight_fallback_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_fallback_nu() const;
  void _internal_set_ap_t_ori_categ_weight_fallback_nu(float value);
  public:

  // optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_CURB_NU = 3846;
  bool has_ap_t_ori_categ_weight_shortside_curb_nu() const;
  private:
  bool _internal_has_ap_t_ori_categ_weight_shortside_curb_nu() const;
  public:
  void clear_ap_t_ori_categ_weight_shortside_curb_nu();
  float ap_t_ori_categ_weight_shortside_curb_nu() const;
  void set_ap_t_ori_categ_weight_shortside_curb_nu(float value);
  private:
  float _internal_ap_t_ori_categ_weight_shortside_curb_nu() const;
  void _internal_set_ap_t_ori_categ_weight_shortside_curb_nu(float value);
  public:

  // optional float AP_T_PIN_PAR_POSE_Y_M = 3858;
  bool has_ap_t_pin_par_pose_y_m() const;
  private:
  bool _internal_has_ap_t_pin_par_pose_y_m() const;
  public:
  void clear_ap_t_pin_par_pose_y_m();
  float ap_t_pin_par_pose_y_m() const;
  void set_ap_t_pin_par_pose_y_m(float value);
  private:
  float _internal_ap_t_pin_par_pose_y_m() const;
  void _internal_set_ap_t_pin_par_pose_y_m(float value);
  public:

  // optional float AP_T_MAX_DEV_UPDATE_LONG_GP_M = 1723759;
  bool has_ap_t_max_dev_update_long_gp_m() const;
  private:
  bool _internal_has_ap_t_max_dev_update_long_gp_m() const;
  public:
  void clear_ap_t_max_dev_update_long_gp_m();
  float ap_t_max_dev_update_long_gp_m() const;
  void set_ap_t_max_dev_update_long_gp_m(float value);
  private:
  float _internal_ap_t_max_dev_update_long_gp_m() const;
  void _internal_set_ap_t_max_dev_update_long_gp_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float ap_t_max_curb_del_dist_to_roadside_par_m_;
  float ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_;
  float ap_t_gp_out_gap_entrance_m_;
  float ap_t_pout_perp_cor_offs_rear_m_;
  float ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_t_actual_length_pose_history_;
  float ap_t_gp_out_reached_m_;
  float ap_t_max_lateral_deviation_m_;
  float ap_t_pin_perp_pose_yaw_rad_;
  float ap_t_extent_max_box_roadside_m_;
  float ap_t_maxcomfpos_int_tol_m_;
  float ap_t_max_dev_update_lat_gp_m_;
  float ap_t_pout_perp_dev_yaw_rad_;
  float ap_t_pout_par_pose_x_m_;
  float ap_t_pin_perp_pose_y_m_;
  float ap_t_pout_perp_cor_offs_oppos_m_;
  float ap_t_pout_perp_cor_offs_slots_m_;
  float ap_t_pout_par_pose_y_m_;
  float ap_t_pin_par_pose_yaw_rad_;
  float ap_t_pin_perp_pose_x_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_t_min_pbox_exist_perc_;
  float ap_t_urgent_update_dev_factor_perp_ang_nu_;
  float ap_t_ori_categ_score_fallback_m_;
  float ap_t_pout_perp_cor_offs_front_m_;
  float ap_t_pout_perp_pose_y_right_m_;
  float ap_t_max_marking_ang_dev_rad_;
  float ap_t_max_dev_update_long_perp_m_;
  float ap_t_urgent_update_dev_factor_par_lat_nu_;
  float ap_t_pout_perp_pose_right_m_;
  float ap_t_wheel_dist_to_wheelstopper_m_;
  float ap_t_del_rel_otherw_curb_assignment_ratio_nu_;
  float ap_t_pin_par_pose_x_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_;
  float ap_t_max_delim_dist_to_box_m_;
  float ap_t_max_dev_upd_yaw_par_rad_;
  float ap_t_max_dev_upd_yaw_gp_rad_;
  float ap_t_ori_categ_weight_shortside_parkmarking_nu_;
  float ap_t_max_dev_update_long_par_m_;
  float ap_t_pout_par_pose_yaw_rad_;
  bool ap_t_update_pose_last_stroke_nu_;
  bool ap_t_update_long_only_par_nu_;
  bool ap_t_yaw_ang_pbox_ori_nu_;
  bool ap_t_gp_inside_lat_center_only_;
  int ap_t_pos_def_approach_;
  float ap_t_ori_categ_weight_longside_parkmarking_nu_;
  float ap_t_ori_categ_weight_longside_lanebound_nu_;
  float ap_t_axis_min_outside_garage_m_;
  float ap_t_pout_perp_dev_lat_m_;
  float ap_t_len_irrelevant_area_x_m_;
  float ap_t_pout_perp_pose_y_left_m_;
  float ap_t_ori_categ_weight_longside_curb_nu_;
  float ap_t_gp_reached_dev_box_m_;
  float ap_t_pout_perp_pose_left_m_;
  float ap_t_max_dev_upd_yaw_perp_rad_;
  float ap_t_min_ang_tresh_cmf_box_limit_angled_deg_;
  float ap_t_len_irrelevant_area_y_m_;
  float ap_t_max_dev_update_lat_par_m_;
  float ap_t_urgent_update_dev_factor_par_ang_nu_;
  float ap_t_gp_pose_freeze_radius_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_t_min_obj_exist_perc_;
  float ap_t_ori_categ_weight_longside_virtualline_nu_;
  float ap_t_max_ang_tresh_cmf_box_limit_angled_deg_;
  float ap_t_gp_reached_dev_long_m_;
  float ap_t_pout_par_safety_dist_m_;
  float ap_t_max_virtualline_ang_dev_rad_;
  float ap_t_ori_categ_weight_shortside_lanebound_nu_;
  float ap_t_max_dev_update_lat_perp_m_;
  float ap_t_ori_categ_weight_shortside_virtualline_nu_;
  float ap_t_pout_perp_pose_y_r_bwd_m_;
  float ap_t_min_length_marking_m_;
  float ap_t_min_lateral_deviation_m_;
  float ap_t_urgent_update_dev_factor_perp_long_nu_;
  float ap_t_urgent_update_dev_factor_par_long_nu_;
  float ap_t_urgent_update_dev_factor_perp_lat_nu_;
  float ap_t_ori_categ_weight_fallback_nu_;
  float ap_t_ori_categ_weight_shortside_curb_nu_;
  float ap_t_pin_par_pose_y_m_;
  float ap_t_max_dev_update_long_gp_m_;
  friend struct ::TableStruct_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FC_TAPOSD_Params_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port) */ {
 public:
  FC_TAPOSD_Params_array_port();
  virtual ~FC_TAPOSD_Params_array_port();

  FC_TAPOSD_Params_array_port(const FC_TAPOSD_Params_array_port& from);
  FC_TAPOSD_Params_array_port(FC_TAPOSD_Params_array_port&& from) noexcept
    : FC_TAPOSD_Params_array_port() {
    *this = ::std::move(from);
  }

  inline FC_TAPOSD_Params_array_port& operator=(const FC_TAPOSD_Params_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TAPOSD_Params_array_port& operator=(FC_TAPOSD_Params_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TAPOSD_Params_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TAPOSD_Params_array_port* internal_default_instance() {
    return reinterpret_cast<const FC_TAPOSD_Params_array_port*>(
               &_FC_TAPOSD_Params_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FC_TAPOSD_Params_array_port& a, FC_TAPOSD_Params_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TAPOSD_Params_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TAPOSD_Params_array_port* New() const final {
    return CreateMaybeMessage<FC_TAPOSD_Params_array_port>(nullptr);
  }

  FC_TAPOSD_Params_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TAPOSD_Params_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TAPOSD_Params_array_port& from);
  void MergeFrom(const FC_TAPOSD_Params_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TAPOSD_Params_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto);
    return ::descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1995,
  };
  // repeated .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params data = 1995;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params >*
      mutable_data();
  private:
  const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& _internal_data(int index) const;
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* _internal_add_data();
  public:
  const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& data(int index) const;
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params > data_;
  friend struct ::TableStruct_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FC_TAPOSD_Params

// optional uint32 uiVersionNumber = 2124;
inline bool FC_TAPOSD_Params::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FC_TAPOSD_Params::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FC_TAPOSD_Params::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  uiversionnumber_ = value;
}
inline void FC_TAPOSD_Params::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FC_TAPOSD_Params::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FC_TAPOSD_Params::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TAPOSD_Params::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TAPOSD_Params::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FC_TAPOSD_Params::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TAPOSD_Params::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TAPOSD_Params::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FC_TAPOSD_Params::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.sSigHeader)
}

// optional float AP_T_MAX_DEV_UPDATE_LAT_PAR_M = 3347;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_update_lat_par_m() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_update_lat_par_m() const {
  return _internal_has_ap_t_max_dev_update_lat_par_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_update_lat_par_m() {
  ap_t_max_dev_update_lat_par_m_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_update_lat_par_m() const {
  return ap_t_max_dev_update_lat_par_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_update_lat_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LAT_PAR_M)
  return _internal_ap_t_max_dev_update_lat_par_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_update_lat_par_m(float value) {
  _has_bits_[1] |= 0x04000000u;
  ap_t_max_dev_update_lat_par_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_update_lat_par_m(float value) {
  _internal_set_ap_t_max_dev_update_lat_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LAT_PAR_M)
}

// optional float AP_T_MAX_DEV_UPDATE_LONG_PAR_M = 2420;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_update_long_par_m() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_update_long_par_m() const {
  return _internal_has_ap_t_max_dev_update_long_par_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_update_long_par_m() {
  ap_t_max_dev_update_long_par_m_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_update_long_par_m() const {
  return ap_t_max_dev_update_long_par_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_update_long_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LONG_PAR_M)
  return _internal_ap_t_max_dev_update_long_par_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_update_long_par_m(float value) {
  _has_bits_[1] |= 0x00000080u;
  ap_t_max_dev_update_long_par_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_update_long_par_m(float value) {
  _internal_set_ap_t_max_dev_update_long_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LONG_PAR_M)
}

// optional float AP_T_MAX_DEV_UPD_YAW_PAR_RAD = 2204;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_upd_yaw_par_rad() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_upd_yaw_par_rad() const {
  return _internal_has_ap_t_max_dev_upd_yaw_par_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_upd_yaw_par_rad() {
  ap_t_max_dev_upd_yaw_par_rad_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_upd_yaw_par_rad() const {
  return ap_t_max_dev_upd_yaw_par_rad_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_upd_yaw_par_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPD_YAW_PAR_RAD)
  return _internal_ap_t_max_dev_upd_yaw_par_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_upd_yaw_par_rad(float value) {
  _has_bits_[1] |= 0x00000010u;
  ap_t_max_dev_upd_yaw_par_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_upd_yaw_par_rad(float value) {
  _internal_set_ap_t_max_dev_upd_yaw_par_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPD_YAW_PAR_RAD)
}

// optional uint32 AP_T_MIN_OBJ_EXIST_PERC = 3389;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_min_obj_exist_perc() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_min_obj_exist_perc() const {
  return _internal_has_ap_t_min_obj_exist_perc();
}
inline void FC_TAPOSD_Params::clear_ap_t_min_obj_exist_perc() {
  ap_t_min_obj_exist_perc_ = 0u;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::_internal_ap_t_min_obj_exist_perc() const {
  return ap_t_min_obj_exist_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::ap_t_min_obj_exist_perc() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_OBJ_EXIST_PERC)
  return _internal_ap_t_min_obj_exist_perc();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_min_obj_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x20000000u;
  ap_t_min_obj_exist_perc_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_min_obj_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_t_min_obj_exist_perc(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_OBJ_EXIST_PERC)
}

// optional .pb.ap_tp.pos_def_approach.PosDefApproach AP_T_POS_DEF_APPROACH = 2556;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pos_def_approach() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pos_def_approach() const {
  return _internal_has_ap_t_pos_def_approach();
}
inline void FC_TAPOSD_Params::clear_ap_t_pos_def_approach() {
  ap_t_pos_def_approach_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::pb::ap_tp::pos_def_approach::PosDefApproach FC_TAPOSD_Params::_internal_ap_t_pos_def_approach() const {
  return static_cast< ::pb::ap_tp::pos_def_approach::PosDefApproach >(ap_t_pos_def_approach_);
}
inline ::pb::ap_tp::pos_def_approach::PosDefApproach FC_TAPOSD_Params::ap_t_pos_def_approach() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POS_DEF_APPROACH)
  return _internal_ap_t_pos_def_approach();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pos_def_approach(::pb::ap_tp::pos_def_approach::PosDefApproach value) {
  assert(::pb::ap_tp::pos_def_approach::PosDefApproach_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  ap_t_pos_def_approach_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pos_def_approach(::pb::ap_tp::pos_def_approach::PosDefApproach value) {
  _internal_set_ap_t_pos_def_approach(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POS_DEF_APPROACH)
}

// optional float AP_T_POUT_PAR_POSE_X_M = 952;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_par_pose_x_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_par_pose_x_m() const {
  return _internal_has_ap_t_pout_par_pose_x_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_par_pose_x_m() {
  ap_t_pout_par_pose_x_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_par_pose_x_m() const {
  return ap_t_pout_par_pose_x_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_par_pose_x_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_POSE_X_M)
  return _internal_ap_t_pout_par_pose_x_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_par_pose_x_m(float value) {
  _has_bits_[0] |= 0x00004000u;
  ap_t_pout_par_pose_x_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_par_pose_x_m(float value) {
  _internal_set_ap_t_pout_par_pose_x_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_POSE_X_M)
}

// optional float AP_T_POUT_PAR_POSE_Y_M = 1160;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_par_pose_y_m() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_par_pose_y_m() const {
  return _internal_has_ap_t_pout_par_pose_y_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_par_pose_y_m() {
  ap_t_pout_par_pose_y_m_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_par_pose_y_m() const {
  return ap_t_pout_par_pose_y_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_par_pose_y_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_POSE_Y_M)
  return _internal_ap_t_pout_par_pose_y_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_par_pose_y_m(float value) {
  _has_bits_[0] |= 0x00040000u;
  ap_t_pout_par_pose_y_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_par_pose_y_m(float value) {
  _internal_set_ap_t_pout_par_pose_y_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_POSE_Y_M)
}

// optional float AP_T_POUT_PAR_POSE_YAW_RAD = 2435;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_par_pose_yaw_rad() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_par_pose_yaw_rad() const {
  return _internal_has_ap_t_pout_par_pose_yaw_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_par_pose_yaw_rad() {
  ap_t_pout_par_pose_yaw_rad_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_par_pose_yaw_rad() const {
  return ap_t_pout_par_pose_yaw_rad_;
}
inline float FC_TAPOSD_Params::ap_t_pout_par_pose_yaw_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_POSE_YAW_RAD)
  return _internal_ap_t_pout_par_pose_yaw_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_par_pose_yaw_rad(float value) {
  _has_bits_[1] |= 0x00000100u;
  ap_t_pout_par_pose_yaw_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_par_pose_yaw_rad(float value) {
  _internal_set_ap_t_pout_par_pose_yaw_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_POSE_YAW_RAD)
}

// optional float AP_T_POUT_PERP_POSE_RIGHT_M = 1813;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_pose_right_m() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_pose_right_m() const {
  return _internal_has_ap_t_pout_perp_pose_right_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_pose_right_m() {
  ap_t_pout_perp_pose_right_m_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_pose_right_m() const {
  return ap_t_pout_perp_pose_right_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_pose_right_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_RIGHT_M)
  return _internal_ap_t_pout_perp_pose_right_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_pose_right_m(float value) {
  _has_bits_[0] |= 0x20000000u;
  ap_t_pout_perp_pose_right_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_pose_right_m(float value) {
  _internal_set_ap_t_pout_perp_pose_right_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_RIGHT_M)
}

// optional float AP_T_POUT_PERP_POSE_Y_LEFT_M = 3035;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_pose_y_left_m() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_pose_y_left_m() const {
  return _internal_has_ap_t_pout_perp_pose_y_left_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_pose_y_left_m() {
  ap_t_pout_perp_pose_y_left_m_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_pose_y_left_m() const {
  return ap_t_pout_perp_pose_y_left_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_pose_y_left_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_Y_LEFT_M)
  return _internal_ap_t_pout_perp_pose_y_left_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_pose_y_left_m(float value) {
  _has_bits_[1] |= 0x00080000u;
  ap_t_pout_perp_pose_y_left_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_pose_y_left_m(float value) {
  _internal_set_ap_t_pout_perp_pose_y_left_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_Y_LEFT_M)
}

// optional float AP_T_POUT_PERP_POSE_Y_RIGHT_M = 1590;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_pose_y_right_m() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_pose_y_right_m() const {
  return _internal_has_ap_t_pout_perp_pose_y_right_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_pose_y_right_m() {
  ap_t_pout_perp_pose_y_right_m_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_pose_y_right_m() const {
  return ap_t_pout_perp_pose_y_right_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_pose_y_right_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_Y_RIGHT_M)
  return _internal_ap_t_pout_perp_pose_y_right_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_pose_y_right_m(float value) {
  _has_bits_[0] |= 0x02000000u;
  ap_t_pout_perp_pose_y_right_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_pose_y_right_m(float value) {
  _internal_set_ap_t_pout_perp_pose_y_right_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_Y_RIGHT_M)
}

// optional float AP_T_POUT_PERP_POSE_Y_R_BWD_M = 3630;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_pose_y_r_bwd_m() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_pose_y_r_bwd_m() const {
  return _internal_has_ap_t_pout_perp_pose_y_r_bwd_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_pose_y_r_bwd_m() {
  ap_t_pout_perp_pose_y_r_bwd_m_ = 0;
  _has_bits_[2] &= ~0x00000040u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_pose_y_r_bwd_m() const {
  return ap_t_pout_perp_pose_y_r_bwd_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_pose_y_r_bwd_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_Y_R_BWD_M)
  return _internal_ap_t_pout_perp_pose_y_r_bwd_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_pose_y_r_bwd_m(float value) {
  _has_bits_[2] |= 0x00000040u;
  ap_t_pout_perp_pose_y_r_bwd_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_pose_y_r_bwd_m(float value) {
  _internal_set_ap_t_pout_perp_pose_y_r_bwd_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_Y_R_BWD_M)
}

// optional float AP_T_POUT_PERP_DEV_LAT_M = 2928;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_dev_lat_m() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_dev_lat_m() const {
  return _internal_has_ap_t_pout_perp_dev_lat_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_dev_lat_m() {
  ap_t_pout_perp_dev_lat_m_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_dev_lat_m() const {
  return ap_t_pout_perp_dev_lat_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_dev_lat_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_DEV_LAT_M)
  return _internal_ap_t_pout_perp_dev_lat_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_dev_lat_m(float value) {
  _has_bits_[1] |= 0x00020000u;
  ap_t_pout_perp_dev_lat_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_dev_lat_m(float value) {
  _internal_set_ap_t_pout_perp_dev_lat_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_DEV_LAT_M)
}

// optional float AP_T_POUT_PERP_DEV_YAW_RAD = 871;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_dev_yaw_rad() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_dev_yaw_rad() const {
  return _internal_has_ap_t_pout_perp_dev_yaw_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_dev_yaw_rad() {
  ap_t_pout_perp_dev_yaw_rad_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_dev_yaw_rad() const {
  return ap_t_pout_perp_dev_yaw_rad_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_dev_yaw_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_DEV_YAW_RAD)
  return _internal_ap_t_pout_perp_dev_yaw_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_dev_yaw_rad(float value) {
  _has_bits_[0] |= 0x00002000u;
  ap_t_pout_perp_dev_yaw_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_dev_yaw_rad(float value) {
  _internal_set_ap_t_pout_perp_dev_yaw_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_DEV_YAW_RAD)
}

// optional float AP_T_POUT_PAR_SAFETY_DIST_M = 3545;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_par_safety_dist_m() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_par_safety_dist_m() const {
  return _internal_has_ap_t_pout_par_safety_dist_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_par_safety_dist_m() {
  ap_t_pout_par_safety_dist_m_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_par_safety_dist_m() const {
  return ap_t_pout_par_safety_dist_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_par_safety_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_SAFETY_DIST_M)
  return _internal_ap_t_pout_par_safety_dist_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_par_safety_dist_m(float value) {
  _has_bits_[2] |= 0x00000002u;
  ap_t_pout_par_safety_dist_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_par_safety_dist_m(float value) {
  _internal_set_ap_t_pout_par_safety_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PAR_SAFETY_DIST_M)
}

// optional float AP_T_LEN_IRRELEVANT_AREA_X_M = 3009;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_len_irrelevant_area_x_m() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_len_irrelevant_area_x_m() const {
  return _internal_has_ap_t_len_irrelevant_area_x_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_len_irrelevant_area_x_m() {
  ap_t_len_irrelevant_area_x_m_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_len_irrelevant_area_x_m() const {
  return ap_t_len_irrelevant_area_x_m_;
}
inline float FC_TAPOSD_Params::ap_t_len_irrelevant_area_x_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_LEN_IRRELEVANT_AREA_X_M)
  return _internal_ap_t_len_irrelevant_area_x_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_len_irrelevant_area_x_m(float value) {
  _has_bits_[1] |= 0x00040000u;
  ap_t_len_irrelevant_area_x_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_len_irrelevant_area_x_m(float value) {
  _internal_set_ap_t_len_irrelevant_area_x_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_LEN_IRRELEVANT_AREA_X_M)
}

// optional float AP_T_LEN_IRRELEVANT_AREA_Y_M = 3313;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_len_irrelevant_area_y_m() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_len_irrelevant_area_y_m() const {
  return _internal_has_ap_t_len_irrelevant_area_y_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_len_irrelevant_area_y_m() {
  ap_t_len_irrelevant_area_y_m_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_len_irrelevant_area_y_m() const {
  return ap_t_len_irrelevant_area_y_m_;
}
inline float FC_TAPOSD_Params::ap_t_len_irrelevant_area_y_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_LEN_IRRELEVANT_AREA_Y_M)
  return _internal_ap_t_len_irrelevant_area_y_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_len_irrelevant_area_y_m(float value) {
  _has_bits_[1] |= 0x02000000u;
  ap_t_len_irrelevant_area_y_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_len_irrelevant_area_y_m(float value) {
  _internal_set_ap_t_len_irrelevant_area_y_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_LEN_IRRELEVANT_AREA_Y_M)
}

// optional float AP_T_PIN_PAR_POSE_X_M = 2082;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pin_par_pose_x_m() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pin_par_pose_x_m() const {
  return _internal_has_ap_t_pin_par_pose_x_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pin_par_pose_x_m() {
  ap_t_pin_par_pose_x_m_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pin_par_pose_x_m() const {
  return ap_t_pin_par_pose_x_m_;
}
inline float FC_TAPOSD_Params::ap_t_pin_par_pose_x_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PAR_POSE_X_M)
  return _internal_ap_t_pin_par_pose_x_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pin_par_pose_x_m(float value) {
  _has_bits_[1] |= 0x00000001u;
  ap_t_pin_par_pose_x_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pin_par_pose_x_m(float value) {
  _internal_set_ap_t_pin_par_pose_x_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PAR_POSE_X_M)
}

// optional float AP_T_PIN_PAR_POSE_Y_M = 3858;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pin_par_pose_y_m() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pin_par_pose_y_m() const {
  return _internal_has_ap_t_pin_par_pose_y_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pin_par_pose_y_m() {
  ap_t_pin_par_pose_y_m_ = 0;
  _has_bits_[2] &= ~0x00004000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pin_par_pose_y_m() const {
  return ap_t_pin_par_pose_y_m_;
}
inline float FC_TAPOSD_Params::ap_t_pin_par_pose_y_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PAR_POSE_Y_M)
  return _internal_ap_t_pin_par_pose_y_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pin_par_pose_y_m(float value) {
  _has_bits_[2] |= 0x00004000u;
  ap_t_pin_par_pose_y_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pin_par_pose_y_m(float value) {
  _internal_set_ap_t_pin_par_pose_y_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PAR_POSE_Y_M)
}

// optional float AP_T_PIN_PAR_POSE_YAW_RAD = 1165;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pin_par_pose_yaw_rad() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pin_par_pose_yaw_rad() const {
  return _internal_has_ap_t_pin_par_pose_yaw_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_pin_par_pose_yaw_rad() {
  ap_t_pin_par_pose_yaw_rad_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pin_par_pose_yaw_rad() const {
  return ap_t_pin_par_pose_yaw_rad_;
}
inline float FC_TAPOSD_Params::ap_t_pin_par_pose_yaw_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PAR_POSE_YAW_RAD)
  return _internal_ap_t_pin_par_pose_yaw_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pin_par_pose_yaw_rad(float value) {
  _has_bits_[0] |= 0x00080000u;
  ap_t_pin_par_pose_yaw_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pin_par_pose_yaw_rad(float value) {
  _internal_set_ap_t_pin_par_pose_yaw_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PAR_POSE_YAW_RAD)
}

// optional float AP_T_PIN_PERP_POSE_X_M = 1231;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pin_perp_pose_x_m() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pin_perp_pose_x_m() const {
  return _internal_has_ap_t_pin_perp_pose_x_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pin_perp_pose_x_m() {
  ap_t_pin_perp_pose_x_m_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pin_perp_pose_x_m() const {
  return ap_t_pin_perp_pose_x_m_;
}
inline float FC_TAPOSD_Params::ap_t_pin_perp_pose_x_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PERP_POSE_X_M)
  return _internal_ap_t_pin_perp_pose_x_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pin_perp_pose_x_m(float value) {
  _has_bits_[0] |= 0x00100000u;
  ap_t_pin_perp_pose_x_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pin_perp_pose_x_m(float value) {
  _internal_set_ap_t_pin_perp_pose_x_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PERP_POSE_X_M)
}

// optional float AP_T_PIN_PERP_POSE_Y_M = 1023;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pin_perp_pose_y_m() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pin_perp_pose_y_m() const {
  return _internal_has_ap_t_pin_perp_pose_y_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pin_perp_pose_y_m() {
  ap_t_pin_perp_pose_y_m_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pin_perp_pose_y_m() const {
  return ap_t_pin_perp_pose_y_m_;
}
inline float FC_TAPOSD_Params::ap_t_pin_perp_pose_y_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PERP_POSE_Y_M)
  return _internal_ap_t_pin_perp_pose_y_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pin_perp_pose_y_m(float value) {
  _has_bits_[0] |= 0x00008000u;
  ap_t_pin_perp_pose_y_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pin_perp_pose_y_m(float value) {
  _internal_set_ap_t_pin_perp_pose_y_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PERP_POSE_Y_M)
}

// optional float AP_T_PIN_PERP_POSE_YAW_RAD = 632;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pin_perp_pose_yaw_rad() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pin_perp_pose_yaw_rad() const {
  return _internal_has_ap_t_pin_perp_pose_yaw_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_pin_perp_pose_yaw_rad() {
  ap_t_pin_perp_pose_yaw_rad_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pin_perp_pose_yaw_rad() const {
  return ap_t_pin_perp_pose_yaw_rad_;
}
inline float FC_TAPOSD_Params::ap_t_pin_perp_pose_yaw_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PERP_POSE_YAW_RAD)
  return _internal_ap_t_pin_perp_pose_yaw_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pin_perp_pose_yaw_rad(float value) {
  _has_bits_[0] |= 0x00000200u;
  ap_t_pin_perp_pose_yaw_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pin_perp_pose_yaw_rad(float value) {
  _internal_set_ap_t_pin_perp_pose_yaw_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_PIN_PERP_POSE_YAW_RAD)
}

// optional uint32 AP_T_MIN_PBOX_EXIST_PERC = 1255;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_min_pbox_exist_perc() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_min_pbox_exist_perc() const {
  return _internal_has_ap_t_min_pbox_exist_perc();
}
inline void FC_TAPOSD_Params::clear_ap_t_min_pbox_exist_perc() {
  ap_t_min_pbox_exist_perc_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::_internal_ap_t_min_pbox_exist_perc() const {
  return ap_t_min_pbox_exist_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::ap_t_min_pbox_exist_perc() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_PBOX_EXIST_PERC)
  return _internal_ap_t_min_pbox_exist_perc();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_min_pbox_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  ap_t_min_pbox_exist_perc_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_min_pbox_exist_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_t_min_pbox_exist_perc(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_PBOX_EXIST_PERC)
}

// optional bool AP_T_UPDATE_POSE_LAST_STROKE_NU = 3327;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_update_pose_last_stroke_nu() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_update_pose_last_stroke_nu() const {
  return _internal_has_ap_t_update_pose_last_stroke_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_update_pose_last_stroke_nu() {
  ap_t_update_pose_last_stroke_nu_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool FC_TAPOSD_Params::_internal_ap_t_update_pose_last_stroke_nu() const {
  return ap_t_update_pose_last_stroke_nu_;
}
inline bool FC_TAPOSD_Params::ap_t_update_pose_last_stroke_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_UPDATE_POSE_LAST_STROKE_NU)
  return _internal_ap_t_update_pose_last_stroke_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_update_pose_last_stroke_nu(bool value) {
  _has_bits_[1] |= 0x00000200u;
  ap_t_update_pose_last_stroke_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_update_pose_last_stroke_nu(bool value) {
  _internal_set_ap_t_update_pose_last_stroke_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_UPDATE_POSE_LAST_STROKE_NU)
}

// optional float AP_T_MAX_DEV_UPDATE_LAT_PERP_M = 3592;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_update_lat_perp_m() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_update_lat_perp_m() const {
  return _internal_has_ap_t_max_dev_update_lat_perp_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_update_lat_perp_m() {
  ap_t_max_dev_update_lat_perp_m_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_update_lat_perp_m() const {
  return ap_t_max_dev_update_lat_perp_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_update_lat_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LAT_PERP_M)
  return _internal_ap_t_max_dev_update_lat_perp_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_update_lat_perp_m(float value) {
  _has_bits_[2] |= 0x00000010u;
  ap_t_max_dev_update_lat_perp_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_update_lat_perp_m(float value) {
  _internal_set_ap_t_max_dev_update_lat_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LAT_PERP_M)
}

// optional float AP_T_MAX_DEV_UPDATE_LONG_PERP_M = 1683;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_update_long_perp_m() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_update_long_perp_m() const {
  return _internal_has_ap_t_max_dev_update_long_perp_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_update_long_perp_m() {
  ap_t_max_dev_update_long_perp_m_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_update_long_perp_m() const {
  return ap_t_max_dev_update_long_perp_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_update_long_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LONG_PERP_M)
  return _internal_ap_t_max_dev_update_long_perp_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_update_long_perp_m(float value) {
  _has_bits_[0] |= 0x08000000u;
  ap_t_max_dev_update_long_perp_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_update_long_perp_m(float value) {
  _internal_set_ap_t_max_dev_update_long_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LONG_PERP_M)
}

// optional float AP_T_MAX_DEV_UPD_YAW_PERP_RAD = 3263;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_upd_yaw_perp_rad() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_upd_yaw_perp_rad() const {
  return _internal_has_ap_t_max_dev_upd_yaw_perp_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_upd_yaw_perp_rad() {
  ap_t_max_dev_upd_yaw_perp_rad_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_upd_yaw_perp_rad() const {
  return ap_t_max_dev_upd_yaw_perp_rad_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_upd_yaw_perp_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPD_YAW_PERP_RAD)
  return _internal_ap_t_max_dev_upd_yaw_perp_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_upd_yaw_perp_rad(float value) {
  _has_bits_[1] |= 0x00800000u;
  ap_t_max_dev_upd_yaw_perp_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_upd_yaw_perp_rad(float value) {
  _internal_set_ap_t_max_dev_upd_yaw_perp_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPD_YAW_PERP_RAD)
}

// optional bool AP_T_UPDATE_LONG_ONLY_PAR_NU = 1977;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_update_long_only_par_nu() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_update_long_only_par_nu() const {
  return _internal_has_ap_t_update_long_only_par_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_update_long_only_par_nu() {
  ap_t_update_long_only_par_nu_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool FC_TAPOSD_Params::_internal_ap_t_update_long_only_par_nu() const {
  return ap_t_update_long_only_par_nu_;
}
inline bool FC_TAPOSD_Params::ap_t_update_long_only_par_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_UPDATE_LONG_ONLY_PAR_NU)
  return _internal_ap_t_update_long_only_par_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_update_long_only_par_nu(bool value) {
  _has_bits_[1] |= 0x00000400u;
  ap_t_update_long_only_par_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_update_long_only_par_nu(bool value) {
  _internal_set_ap_t_update_long_only_par_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_UPDATE_LONG_ONLY_PAR_NU)
}

// optional float AP_T_POUT_PERP_POSE_LEFT_M = 3138;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_pose_left_m() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_pose_left_m() const {
  return _internal_has_ap_t_pout_perp_pose_left_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_pose_left_m() {
  ap_t_pout_perp_pose_left_m_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_pose_left_m() const {
  return ap_t_pout_perp_pose_left_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_pose_left_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_LEFT_M)
  return _internal_ap_t_pout_perp_pose_left_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_pose_left_m(float value) {
  _has_bits_[1] |= 0x00400000u;
  ap_t_pout_perp_pose_left_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_pose_left_m(float value) {
  _internal_set_ap_t_pout_perp_pose_left_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_POSE_LEFT_M)
}

// optional float AP_T_MAXCOMFPOS_INT_TOL_M = 866;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_maxcomfpos_int_tol_m() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_maxcomfpos_int_tol_m() const {
  return _internal_has_ap_t_maxcomfpos_int_tol_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_maxcomfpos_int_tol_m() {
  ap_t_maxcomfpos_int_tol_m_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_maxcomfpos_int_tol_m() const {
  return ap_t_maxcomfpos_int_tol_m_;
}
inline float FC_TAPOSD_Params::ap_t_maxcomfpos_int_tol_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAXCOMFPOS_INT_TOL_M)
  return _internal_ap_t_maxcomfpos_int_tol_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_maxcomfpos_int_tol_m(float value) {
  _has_bits_[0] |= 0x00000800u;
  ap_t_maxcomfpos_int_tol_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_maxcomfpos_int_tol_m(float value) {
  _internal_set_ap_t_maxcomfpos_int_tol_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAXCOMFPOS_INT_TOL_M)
}

// optional float AP_T_MAX_LATERAL_DEVIATION_M = 610;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_lateral_deviation_m() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_lateral_deviation_m() const {
  return _internal_has_ap_t_max_lateral_deviation_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_lateral_deviation_m() {
  ap_t_max_lateral_deviation_m_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_lateral_deviation_m() const {
  return ap_t_max_lateral_deviation_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_lateral_deviation_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_LATERAL_DEVIATION_M)
  return _internal_ap_t_max_lateral_deviation_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_lateral_deviation_m(float value) {
  _has_bits_[0] |= 0x00000100u;
  ap_t_max_lateral_deviation_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_lateral_deviation_m(float value) {
  _internal_set_ap_t_max_lateral_deviation_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_LATERAL_DEVIATION_M)
}

// optional bool AP_T_YAW_ANG_PBOX_ORI_NU = 898;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_yaw_ang_pbox_ori_nu() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_yaw_ang_pbox_ori_nu() const {
  return _internal_has_ap_t_yaw_ang_pbox_ori_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_yaw_ang_pbox_ori_nu() {
  ap_t_yaw_ang_pbox_ori_nu_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool FC_TAPOSD_Params::_internal_ap_t_yaw_ang_pbox_ori_nu() const {
  return ap_t_yaw_ang_pbox_ori_nu_;
}
inline bool FC_TAPOSD_Params::ap_t_yaw_ang_pbox_ori_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_YAW_ANG_PBOX_ORI_NU)
  return _internal_ap_t_yaw_ang_pbox_ori_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_yaw_ang_pbox_ori_nu(bool value) {
  _has_bits_[1] |= 0x00000800u;
  ap_t_yaw_ang_pbox_ori_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_yaw_ang_pbox_ori_nu(bool value) {
  _internal_set_ap_t_yaw_ang_pbox_ori_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_YAW_ANG_PBOX_ORI_NU)
}

// optional float AP_T_POUT_PERP_COR_OFFS_FRONT_M = 1543;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_cor_offs_front_m() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_cor_offs_front_m() const {
  return _internal_has_ap_t_pout_perp_cor_offs_front_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_cor_offs_front_m() {
  ap_t_pout_perp_cor_offs_front_m_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_cor_offs_front_m() const {
  return ap_t_pout_perp_cor_offs_front_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_cor_offs_front_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_FRONT_M)
  return _internal_ap_t_pout_perp_cor_offs_front_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_cor_offs_front_m(float value) {
  _has_bits_[0] |= 0x01000000u;
  ap_t_pout_perp_cor_offs_front_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_cor_offs_front_m(float value) {
  _internal_set_ap_t_pout_perp_cor_offs_front_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_FRONT_M)
}

// optional float AP_T_POUT_PERP_COR_OFFS_REAR_M = 288;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_cor_offs_rear_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_cor_offs_rear_m() const {
  return _internal_has_ap_t_pout_perp_cor_offs_rear_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_cor_offs_rear_m() {
  ap_t_pout_perp_cor_offs_rear_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_cor_offs_rear_m() const {
  return ap_t_pout_perp_cor_offs_rear_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_cor_offs_rear_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_REAR_M)
  return _internal_ap_t_pout_perp_cor_offs_rear_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_cor_offs_rear_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  ap_t_pout_perp_cor_offs_rear_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_cor_offs_rear_m(float value) {
  _internal_set_ap_t_pout_perp_cor_offs_rear_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_REAR_M)
}

// optional float AP_T_POUT_PERP_COR_OFFS_SLOTS_M = 1120;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_cor_offs_slots_m() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_cor_offs_slots_m() const {
  return _internal_has_ap_t_pout_perp_cor_offs_slots_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_cor_offs_slots_m() {
  ap_t_pout_perp_cor_offs_slots_m_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_cor_offs_slots_m() const {
  return ap_t_pout_perp_cor_offs_slots_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_cor_offs_slots_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_SLOTS_M)
  return _internal_ap_t_pout_perp_cor_offs_slots_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_cor_offs_slots_m(float value) {
  _has_bits_[0] |= 0x00020000u;
  ap_t_pout_perp_cor_offs_slots_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_cor_offs_slots_m(float value) {
  _internal_set_ap_t_pout_perp_cor_offs_slots_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_SLOTS_M)
}

// optional float AP_T_POUT_PERP_COR_OFFS_OPPOS_M = 1036;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_cor_offs_oppos_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_cor_offs_oppos_m() const {
  return _internal_has_ap_t_pout_perp_cor_offs_oppos_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_cor_offs_oppos_m() {
  ap_t_pout_perp_cor_offs_oppos_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_cor_offs_oppos_m() const {
  return ap_t_pout_perp_cor_offs_oppos_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_cor_offs_oppos_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_OPPOS_M)
  return _internal_ap_t_pout_perp_cor_offs_oppos_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_cor_offs_oppos_m(float value) {
  _has_bits_[0] |= 0x00010000u;
  ap_t_pout_perp_cor_offs_oppos_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_cor_offs_oppos_m(float value) {
  _internal_set_ap_t_pout_perp_cor_offs_oppos_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_COR_OFFS_OPPOS_M)
}

// optional float AP_T_MIN_LATERAL_DEVIATION_M = 3706;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_min_lateral_deviation_m() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_min_lateral_deviation_m() const {
  return _internal_has_ap_t_min_lateral_deviation_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_min_lateral_deviation_m() {
  ap_t_min_lateral_deviation_m_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_min_lateral_deviation_m() const {
  return ap_t_min_lateral_deviation_m_;
}
inline float FC_TAPOSD_Params::ap_t_min_lateral_deviation_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_LATERAL_DEVIATION_M)
  return _internal_ap_t_min_lateral_deviation_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_min_lateral_deviation_m(float value) {
  _has_bits_[2] |= 0x00000100u;
  ap_t_min_lateral_deviation_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_min_lateral_deviation_m(float value) {
  _internal_set_ap_t_min_lateral_deviation_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_LATERAL_DEVIATION_M)
}

// optional float AP_T_MAX_MARKING_ANG_DEV_RAD = 1679;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_marking_ang_dev_rad() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_marking_ang_dev_rad() const {
  return _internal_has_ap_t_max_marking_ang_dev_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_marking_ang_dev_rad() {
  ap_t_max_marking_ang_dev_rad_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_marking_ang_dev_rad() const {
  return ap_t_max_marking_ang_dev_rad_;
}
inline float FC_TAPOSD_Params::ap_t_max_marking_ang_dev_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_MARKING_ANG_DEV_RAD)
  return _internal_ap_t_max_marking_ang_dev_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_marking_ang_dev_rad(float value) {
  _has_bits_[0] |= 0x04000000u;
  ap_t_max_marking_ang_dev_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_marking_ang_dev_rad(float value) {
  _internal_set_ap_t_max_marking_ang_dev_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_MARKING_ANG_DEV_RAD)
}

// optional float AP_T_MIN_LENGTH_MARKING_M = 3687;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_min_length_marking_m() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_min_length_marking_m() const {
  return _internal_has_ap_t_min_length_marking_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_min_length_marking_m() {
  ap_t_min_length_marking_m_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_min_length_marking_m() const {
  return ap_t_min_length_marking_m_;
}
inline float FC_TAPOSD_Params::ap_t_min_length_marking_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_LENGTH_MARKING_M)
  return _internal_ap_t_min_length_marking_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_min_length_marking_m(float value) {
  _has_bits_[2] |= 0x00000080u;
  ap_t_min_length_marking_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_min_length_marking_m(float value) {
  _internal_set_ap_t_min_length_marking_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_LENGTH_MARKING_M)
}

// optional float AP_T_EXTENT_MAX_BOX_ROADSIDE_M = 860;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_extent_max_box_roadside_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_extent_max_box_roadside_m() const {
  return _internal_has_ap_t_extent_max_box_roadside_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_extent_max_box_roadside_m() {
  ap_t_extent_max_box_roadside_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_extent_max_box_roadside_m() const {
  return ap_t_extent_max_box_roadside_m_;
}
inline float FC_TAPOSD_Params::ap_t_extent_max_box_roadside_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_EXTENT_MAX_BOX_ROADSIDE_M)
  return _internal_ap_t_extent_max_box_roadside_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_extent_max_box_roadside_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  ap_t_extent_max_box_roadside_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_extent_max_box_roadside_m(float value) {
  _internal_set_ap_t_extent_max_box_roadside_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_EXTENT_MAX_BOX_ROADSIDE_M)
}

// optional float AP_T_MAX_DELIM_DIST_TO_BOX_M = 2147;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_delim_dist_to_box_m() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_delim_dist_to_box_m() const {
  return _internal_has_ap_t_max_delim_dist_to_box_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_delim_dist_to_box_m() {
  ap_t_max_delim_dist_to_box_m_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_delim_dist_to_box_m() const {
  return ap_t_max_delim_dist_to_box_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_delim_dist_to_box_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DELIM_DIST_TO_BOX_M)
  return _internal_ap_t_max_delim_dist_to_box_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_delim_dist_to_box_m(float value) {
  _has_bits_[1] |= 0x00000008u;
  ap_t_max_delim_dist_to_box_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_delim_dist_to_box_m(float value) {
  _internal_set_ap_t_max_delim_dist_to_box_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DELIM_DIST_TO_BOX_M)
}

// optional float AP_T_GP_POSE_FREEZE_RADIUS_M = 3381;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_gp_pose_freeze_radius_m() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_gp_pose_freeze_radius_m() const {
  return _internal_has_ap_t_gp_pose_freeze_radius_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_gp_pose_freeze_radius_m() {
  ap_t_gp_pose_freeze_radius_m_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_gp_pose_freeze_radius_m() const {
  return ap_t_gp_pose_freeze_radius_m_;
}
inline float FC_TAPOSD_Params::ap_t_gp_pose_freeze_radius_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_POSE_FREEZE_RADIUS_M)
  return _internal_ap_t_gp_pose_freeze_radius_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_gp_pose_freeze_radius_m(float value) {
  _has_bits_[1] |= 0x10000000u;
  ap_t_gp_pose_freeze_radius_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_gp_pose_freeze_radius_m(float value) {
  _internal_set_ap_t_gp_pose_freeze_radius_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_POSE_FREEZE_RADIUS_M)
}

// optional float AP_T_MAX_DEV_UPDATE_LAT_GP_M = 869;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_update_lat_gp_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_update_lat_gp_m() const {
  return _internal_has_ap_t_max_dev_update_lat_gp_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_update_lat_gp_m() {
  ap_t_max_dev_update_lat_gp_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_update_lat_gp_m() const {
  return ap_t_max_dev_update_lat_gp_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_update_lat_gp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LAT_GP_M)
  return _internal_ap_t_max_dev_update_lat_gp_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_update_lat_gp_m(float value) {
  _has_bits_[0] |= 0x00001000u;
  ap_t_max_dev_update_lat_gp_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_update_lat_gp_m(float value) {
  _internal_set_ap_t_max_dev_update_lat_gp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LAT_GP_M)
}

// optional float AP_T_MAX_DEV_UPDATE_LONG_GP_M = 1723759;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_update_long_gp_m() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_update_long_gp_m() const {
  return _internal_has_ap_t_max_dev_update_long_gp_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_update_long_gp_m() {
  ap_t_max_dev_update_long_gp_m_ = 0;
  _has_bits_[2] &= ~0x00008000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_update_long_gp_m() const {
  return ap_t_max_dev_update_long_gp_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_update_long_gp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LONG_GP_M)
  return _internal_ap_t_max_dev_update_long_gp_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_update_long_gp_m(float value) {
  _has_bits_[2] |= 0x00008000u;
  ap_t_max_dev_update_long_gp_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_update_long_gp_m(float value) {
  _internal_set_ap_t_max_dev_update_long_gp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPDATE_LONG_GP_M)
}

// optional float AP_T_MAX_DEV_UPD_YAW_GP_RAD = 2263;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_dev_upd_yaw_gp_rad() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_dev_upd_yaw_gp_rad() const {
  return _internal_has_ap_t_max_dev_upd_yaw_gp_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_dev_upd_yaw_gp_rad() {
  ap_t_max_dev_upd_yaw_gp_rad_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_dev_upd_yaw_gp_rad() const {
  return ap_t_max_dev_upd_yaw_gp_rad_;
}
inline float FC_TAPOSD_Params::ap_t_max_dev_upd_yaw_gp_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPD_YAW_GP_RAD)
  return _internal_ap_t_max_dev_upd_yaw_gp_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_dev_upd_yaw_gp_rad(float value) {
  _has_bits_[1] |= 0x00000020u;
  ap_t_max_dev_upd_yaw_gp_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_dev_upd_yaw_gp_rad(float value) {
  _internal_set_ap_t_max_dev_upd_yaw_gp_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_DEV_UPD_YAW_GP_RAD)
}

// optional float AP_T_GP_OUT_GAP_ENTRANCE_M = 208;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_gp_out_gap_entrance_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_gp_out_gap_entrance_m() const {
  return _internal_has_ap_t_gp_out_gap_entrance_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_gp_out_gap_entrance_m() {
  ap_t_gp_out_gap_entrance_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_gp_out_gap_entrance_m() const {
  return ap_t_gp_out_gap_entrance_m_;
}
inline float FC_TAPOSD_Params::ap_t_gp_out_gap_entrance_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_OUT_GAP_ENTRANCE_M)
  return _internal_ap_t_gp_out_gap_entrance_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_gp_out_gap_entrance_m(float value) {
  _has_bits_[0] |= 0x00000008u;
  ap_t_gp_out_gap_entrance_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_gp_out_gap_entrance_m(float value) {
  _internal_set_ap_t_gp_out_gap_entrance_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_OUT_GAP_ENTRANCE_M)
}

// optional float AP_T_GP_OUT_REACHED_M = 590;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_gp_out_reached_m() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_gp_out_reached_m() const {
  return _internal_has_ap_t_gp_out_reached_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_gp_out_reached_m() {
  ap_t_gp_out_reached_m_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_gp_out_reached_m() const {
  return ap_t_gp_out_reached_m_;
}
inline float FC_TAPOSD_Params::ap_t_gp_out_reached_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_OUT_REACHED_M)
  return _internal_ap_t_gp_out_reached_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_gp_out_reached_m(float value) {
  _has_bits_[0] |= 0x00000080u;
  ap_t_gp_out_reached_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_gp_out_reached_m(float value) {
  _internal_set_ap_t_gp_out_reached_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_OUT_REACHED_M)
}

// optional float AP_T_GP_REACHED_DEV_BOX_M = 3129;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_gp_reached_dev_box_m() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_gp_reached_dev_box_m() const {
  return _internal_has_ap_t_gp_reached_dev_box_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_gp_reached_dev_box_m() {
  ap_t_gp_reached_dev_box_m_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_gp_reached_dev_box_m() const {
  return ap_t_gp_reached_dev_box_m_;
}
inline float FC_TAPOSD_Params::ap_t_gp_reached_dev_box_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_REACHED_DEV_BOX_M)
  return _internal_ap_t_gp_reached_dev_box_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_gp_reached_dev_box_m(float value) {
  _has_bits_[1] |= 0x00200000u;
  ap_t_gp_reached_dev_box_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_gp_reached_dev_box_m(float value) {
  _internal_set_ap_t_gp_reached_dev_box_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_REACHED_DEV_BOX_M)
}

// optional float AP_T_GP_REACHED_DEV_LONG_M = 3508;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_gp_reached_dev_long_m() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_gp_reached_dev_long_m() const {
  return _internal_has_ap_t_gp_reached_dev_long_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_gp_reached_dev_long_m() {
  ap_t_gp_reached_dev_long_m_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_gp_reached_dev_long_m() const {
  return ap_t_gp_reached_dev_long_m_;
}
inline float FC_TAPOSD_Params::ap_t_gp_reached_dev_long_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_REACHED_DEV_LONG_M)
  return _internal_ap_t_gp_reached_dev_long_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_gp_reached_dev_long_m(float value) {
  _has_bits_[2] |= 0x00000001u;
  ap_t_gp_reached_dev_long_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_gp_reached_dev_long_m(float value) {
  _internal_set_ap_t_gp_reached_dev_long_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_REACHED_DEV_LONG_M)
}

// optional bool AP_T_GP_INSIDE_LAT_CENTER_ONLY = 3710;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_gp_inside_lat_center_only() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_gp_inside_lat_center_only() const {
  return _internal_has_ap_t_gp_inside_lat_center_only();
}
inline void FC_TAPOSD_Params::clear_ap_t_gp_inside_lat_center_only() {
  ap_t_gp_inside_lat_center_only_ = false;
  _has_bits_[1] &= ~0x00001000u;
}
inline bool FC_TAPOSD_Params::_internal_ap_t_gp_inside_lat_center_only() const {
  return ap_t_gp_inside_lat_center_only_;
}
inline bool FC_TAPOSD_Params::ap_t_gp_inside_lat_center_only() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_INSIDE_LAT_CENTER_ONLY)
  return _internal_ap_t_gp_inside_lat_center_only();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_gp_inside_lat_center_only(bool value) {
  _has_bits_[1] |= 0x00001000u;
  ap_t_gp_inside_lat_center_only_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_gp_inside_lat_center_only(bool value) {
  _internal_set_ap_t_gp_inside_lat_center_only(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_GP_INSIDE_LAT_CENTER_ONLY)
}

// optional float AP_T_AXIS_MIN_OUTSIDE_GARAGE_M = 2904;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_axis_min_outside_garage_m() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_axis_min_outside_garage_m() const {
  return _internal_has_ap_t_axis_min_outside_garage_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_axis_min_outside_garage_m() {
  ap_t_axis_min_outside_garage_m_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_axis_min_outside_garage_m() const {
  return ap_t_axis_min_outside_garage_m_;
}
inline float FC_TAPOSD_Params::ap_t_axis_min_outside_garage_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_AXIS_MIN_OUTSIDE_GARAGE_M)
  return _internal_ap_t_axis_min_outside_garage_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_axis_min_outside_garage_m(float value) {
  _has_bits_[1] |= 0x00010000u;
  ap_t_axis_min_outside_garage_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_axis_min_outside_garage_m(float value) {
  _internal_set_ap_t_axis_min_outside_garage_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_AXIS_MIN_OUTSIDE_GARAGE_M)
}

// optional uint32 AP_T_ACTUAL_LENGTH_POSE_HISTORY = 575;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_actual_length_pose_history() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_actual_length_pose_history() const {
  return _internal_has_ap_t_actual_length_pose_history();
}
inline void FC_TAPOSD_Params::clear_ap_t_actual_length_pose_history() {
  ap_t_actual_length_pose_history_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::_internal_ap_t_actual_length_pose_history() const {
  return ap_t_actual_length_pose_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TAPOSD_Params::ap_t_actual_length_pose_history() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ACTUAL_LENGTH_POSE_HISTORY)
  return _internal_ap_t_actual_length_pose_history();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_actual_length_pose_history(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  ap_t_actual_length_pose_history_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_actual_length_pose_history(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_t_actual_length_pose_history(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ACTUAL_LENGTH_POSE_HISTORY)
}

// optional float AP_T_MAX_VIRTUALLINE_ANG_DEV_RAD = 3565;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_virtualline_ang_dev_rad() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_virtualline_ang_dev_rad() const {
  return _internal_has_ap_t_max_virtualline_ang_dev_rad();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_virtualline_ang_dev_rad() {
  ap_t_max_virtualline_ang_dev_rad_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_virtualline_ang_dev_rad() const {
  return ap_t_max_virtualline_ang_dev_rad_;
}
inline float FC_TAPOSD_Params::ap_t_max_virtualline_ang_dev_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_VIRTUALLINE_ANG_DEV_RAD)
  return _internal_ap_t_max_virtualline_ang_dev_rad();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_virtualline_ang_dev_rad(float value) {
  _has_bits_[2] |= 0x00000004u;
  ap_t_max_virtualline_ang_dev_rad_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_virtualline_ang_dev_rad(float value) {
  _internal_set_ap_t_max_virtualline_ang_dev_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_VIRTUALLINE_ANG_DEV_RAD)
}

// optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU = 2409;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_shortside_parkmarking_nu() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_shortside_parkmarking_nu() const {
  return _internal_has_ap_t_ori_categ_weight_shortside_parkmarking_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_shortside_parkmarking_nu() {
  ap_t_ori_categ_weight_shortside_parkmarking_nu_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_shortside_parkmarking_nu() const {
  return ap_t_ori_categ_weight_shortside_parkmarking_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_shortside_parkmarking_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU)
  return _internal_ap_t_ori_categ_weight_shortside_parkmarking_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_shortside_parkmarking_nu(float value) {
  _has_bits_[1] |= 0x00000040u;
  ap_t_ori_categ_weight_shortside_parkmarking_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_shortside_parkmarking_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_shortside_parkmarking_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_PARKMARKING_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_PARKMARKING_NU = 2565;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_longside_parkmarking_nu() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_longside_parkmarking_nu() const {
  return _internal_has_ap_t_ori_categ_weight_longside_parkmarking_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_longside_parkmarking_nu() {
  ap_t_ori_categ_weight_longside_parkmarking_nu_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_longside_parkmarking_nu() const {
  return ap_t_ori_categ_weight_longside_parkmarking_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_longside_parkmarking_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_PARKMARKING_NU)
  return _internal_ap_t_ori_categ_weight_longside_parkmarking_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_longside_parkmarking_nu(float value) {
  _has_bits_[1] |= 0x00004000u;
  ap_t_ori_categ_weight_longside_parkmarking_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_longside_parkmarking_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_longside_parkmarking_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_PARKMARKING_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_CURB_NU = 3846;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_shortside_curb_nu() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_shortside_curb_nu() const {
  return _internal_has_ap_t_ori_categ_weight_shortside_curb_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_shortside_curb_nu() {
  ap_t_ori_categ_weight_shortside_curb_nu_ = 0;
  _has_bits_[2] &= ~0x00002000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_shortside_curb_nu() const {
  return ap_t_ori_categ_weight_shortside_curb_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_shortside_curb_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_CURB_NU)
  return _internal_ap_t_ori_categ_weight_shortside_curb_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_shortside_curb_nu(float value) {
  _has_bits_[2] |= 0x00002000u;
  ap_t_ori_categ_weight_shortside_curb_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_shortside_curb_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_shortside_curb_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_CURB_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU = 3084;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_longside_curb_nu() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_longside_curb_nu() const {
  return _internal_has_ap_t_ori_categ_weight_longside_curb_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_longside_curb_nu() {
  ap_t_ori_categ_weight_longside_curb_nu_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_longside_curb_nu() const {
  return ap_t_ori_categ_weight_longside_curb_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_longside_curb_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU)
  return _internal_ap_t_ori_categ_weight_longside_curb_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_longside_curb_nu(float value) {
  _has_bits_[1] |= 0x00100000u;
  ap_t_ori_categ_weight_longside_curb_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_longside_curb_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_longside_curb_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_CURB_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIRTUALLINE_NU = 3598;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_shortside_virtualline_nu() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_shortside_virtualline_nu() const {
  return _internal_has_ap_t_ori_categ_weight_shortside_virtualline_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_shortside_virtualline_nu() {
  ap_t_ori_categ_weight_shortside_virtualline_nu_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_shortside_virtualline_nu() const {
  return ap_t_ori_categ_weight_shortside_virtualline_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_shortside_virtualline_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIRTUALLINE_NU)
  return _internal_ap_t_ori_categ_weight_shortside_virtualline_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_shortside_virtualline_nu(float value) {
  _has_bits_[2] |= 0x00000020u;
  ap_t_ori_categ_weight_shortside_virtualline_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_shortside_virtualline_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_shortside_virtualline_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_VIRTUALLINE_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_VIRTUALLINE_NU = 3426;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_longside_virtualline_nu() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_longside_virtualline_nu() const {
  return _internal_has_ap_t_ori_categ_weight_longside_virtualline_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_longside_virtualline_nu() {
  ap_t_ori_categ_weight_longside_virtualline_nu_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_longside_virtualline_nu() const {
  return ap_t_ori_categ_weight_longside_virtualline_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_longside_virtualline_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_VIRTUALLINE_NU)
  return _internal_ap_t_ori_categ_weight_longside_virtualline_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_longside_virtualline_nu(float value) {
  _has_bits_[1] |= 0x40000000u;
  ap_t_ori_categ_weight_longside_virtualline_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_longside_virtualline_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_longside_virtualline_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_VIRTUALLINE_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_NU = 3576;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_shortside_lanebound_nu() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_shortside_lanebound_nu() const {
  return _internal_has_ap_t_ori_categ_weight_shortside_lanebound_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_shortside_lanebound_nu() {
  ap_t_ori_categ_weight_shortside_lanebound_nu_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_shortside_lanebound_nu() const {
  return ap_t_ori_categ_weight_shortside_lanebound_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_shortside_lanebound_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_NU)
  return _internal_ap_t_ori_categ_weight_shortside_lanebound_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_shortside_lanebound_nu(float value) {
  _has_bits_[2] |= 0x00000008u;
  ap_t_ori_categ_weight_shortside_lanebound_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_shortside_lanebound_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_shortside_lanebound_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_SHORTSIDE_LANEBOUND_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_LONGSIDE_LANEBOUND_NU = 2793;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_longside_lanebound_nu() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_longside_lanebound_nu() const {
  return _internal_has_ap_t_ori_categ_weight_longside_lanebound_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_longside_lanebound_nu() {
  ap_t_ori_categ_weight_longside_lanebound_nu_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_longside_lanebound_nu() const {
  return ap_t_ori_categ_weight_longside_lanebound_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_longside_lanebound_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_LANEBOUND_NU)
  return _internal_ap_t_ori_categ_weight_longside_lanebound_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_longside_lanebound_nu(float value) {
  _has_bits_[1] |= 0x00008000u;
  ap_t_ori_categ_weight_longside_lanebound_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_longside_lanebound_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_longside_lanebound_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_LONGSIDE_LANEBOUND_NU)
}

// optional float AP_T_ORI_CATEG_WEIGHT_FALLBACK_NU = 3820;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_weight_fallback_nu() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_weight_fallback_nu() const {
  return _internal_has_ap_t_ori_categ_weight_fallback_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_weight_fallback_nu() {
  ap_t_ori_categ_weight_fallback_nu_ = 0;
  _has_bits_[2] &= ~0x00001000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_weight_fallback_nu() const {
  return ap_t_ori_categ_weight_fallback_nu_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_weight_fallback_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_FALLBACK_NU)
  return _internal_ap_t_ori_categ_weight_fallback_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_weight_fallback_nu(float value) {
  _has_bits_[2] |= 0x00001000u;
  ap_t_ori_categ_weight_fallback_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_weight_fallback_nu(float value) {
  _internal_set_ap_t_ori_categ_weight_fallback_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_WEIGHT_FALLBACK_NU)
}

// optional float AP_T_ORI_CATEG_SCORE_FALLBACK_M = 1511;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_ori_categ_score_fallback_m() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_ori_categ_score_fallback_m() const {
  return _internal_has_ap_t_ori_categ_score_fallback_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_ori_categ_score_fallback_m() {
  ap_t_ori_categ_score_fallback_m_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_ori_categ_score_fallback_m() const {
  return ap_t_ori_categ_score_fallback_m_;
}
inline float FC_TAPOSD_Params::ap_t_ori_categ_score_fallback_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_SCORE_FALLBACK_M)
  return _internal_ap_t_ori_categ_score_fallback_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_ori_categ_score_fallback_m(float value) {
  _has_bits_[0] |= 0x00800000u;
  ap_t_ori_categ_score_fallback_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_ori_categ_score_fallback_m(float value) {
  _internal_set_ap_t_ori_categ_score_fallback_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_ORI_CATEG_SCORE_FALLBACK_M)
}

// optional float AP_T_DEL_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU = 1889;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_del_rel_otherw_curb_assignment_ratio_nu() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_del_rel_otherw_curb_assignment_ratio_nu() const {
  return _internal_has_ap_t_del_rel_otherw_curb_assignment_ratio_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_del_rel_otherw_curb_assignment_ratio_nu() {
  ap_t_del_rel_otherw_curb_assignment_ratio_nu_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_del_rel_otherw_curb_assignment_ratio_nu() const {
  return ap_t_del_rel_otherw_curb_assignment_ratio_nu_;
}
inline float FC_TAPOSD_Params::ap_t_del_rel_otherw_curb_assignment_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_DEL_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU)
  return _internal_ap_t_del_rel_otherw_curb_assignment_ratio_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_del_rel_otherw_curb_assignment_ratio_nu(float value) {
  _has_bits_[0] |= 0x80000000u;
  ap_t_del_rel_otherw_curb_assignment_ratio_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_del_rel_otherw_curb_assignment_ratio_nu(float value) {
  _internal_set_ap_t_del_rel_otherw_curb_assignment_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_DEL_REL_OTHERW_CURB_ASSIGNMENT_RATIO_NU)
}

// optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 204;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const {
  return _internal_has_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg();
}
inline void FC_TAPOSD_Params::clear_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() {
  ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const {
  return ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_;
}
inline float FC_TAPOSD_Params::ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG)
  return _internal_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(float value) {
  _has_bits_[0] |= 0x00000004u;
  ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(float value) {
  _internal_set_ap_t_min_ang_tresh_cmf_box_limit_pa_per_deg(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG)
}

// optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG = 423;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const {
  return _internal_has_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() {
  ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const {
  return ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_;
}
inline float FC_TAPOSD_Params::ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG)
  return _internal_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(float value) {
  _has_bits_[0] |= 0x00000020u;
  ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(float value) {
  _internal_set_ap_t_max_ang_tresh_cmf_box_limit_pa_per_deg(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_PA_PER_DEG)
}

// optional float AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3306;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const {
  return _internal_has_ap_t_min_ang_tresh_cmf_box_limit_angled_deg();
}
inline void FC_TAPOSD_Params::clear_ap_t_min_ang_tresh_cmf_box_limit_angled_deg() {
  ap_t_min_ang_tresh_cmf_box_limit_angled_deg_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const {
  return ap_t_min_ang_tresh_cmf_box_limit_angled_deg_;
}
inline float FC_TAPOSD_Params::ap_t_min_ang_tresh_cmf_box_limit_angled_deg() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG)
  return _internal_ap_t_min_ang_tresh_cmf_box_limit_angled_deg();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(float value) {
  _has_bits_[1] |= 0x01000000u;
  ap_t_min_ang_tresh_cmf_box_limit_angled_deg_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(float value) {
  _internal_set_ap_t_min_ang_tresh_cmf_box_limit_angled_deg(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MIN_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG)
}

// optional float AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG = 3457;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const {
  return _internal_has_ap_t_max_ang_tresh_cmf_box_limit_angled_deg();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_ang_tresh_cmf_box_limit_angled_deg() {
  ap_t_max_ang_tresh_cmf_box_limit_angled_deg_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const {
  return ap_t_max_ang_tresh_cmf_box_limit_angled_deg_;
}
inline float FC_TAPOSD_Params::ap_t_max_ang_tresh_cmf_box_limit_angled_deg() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG)
  return _internal_ap_t_max_ang_tresh_cmf_box_limit_angled_deg();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(float value) {
  _has_bits_[1] |= 0x80000000u;
  ap_t_max_ang_tresh_cmf_box_limit_angled_deg_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(float value) {
  _internal_set_ap_t_max_ang_tresh_cmf_box_limit_angled_deg(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_ANG_TRESH_CMF_BOX_LIMIT_ANGLED_DEG)
}

// optional float AP_T_WHEEL_DIST_TO_WHEELSTOPPER_M = 1883;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_wheel_dist_to_wheelstopper_m() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_wheel_dist_to_wheelstopper_m() const {
  return _internal_has_ap_t_wheel_dist_to_wheelstopper_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_wheel_dist_to_wheelstopper_m() {
  ap_t_wheel_dist_to_wheelstopper_m_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_wheel_dist_to_wheelstopper_m() const {
  return ap_t_wheel_dist_to_wheelstopper_m_;
}
inline float FC_TAPOSD_Params::ap_t_wheel_dist_to_wheelstopper_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_WHEEL_DIST_TO_WHEELSTOPPER_M)
  return _internal_ap_t_wheel_dist_to_wheelstopper_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_wheel_dist_to_wheelstopper_m(float value) {
  _has_bits_[0] |= 0x40000000u;
  ap_t_wheel_dist_to_wheelstopper_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_wheel_dist_to_wheelstopper_m(float value) {
  _internal_set_ap_t_wheel_dist_to_wheelstopper_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_WHEEL_DIST_TO_WHEELSTOPPER_M)
}

// optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LONG_NU = 3714;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_urgent_update_dev_factor_perp_long_nu() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_urgent_update_dev_factor_perp_long_nu() const {
  return _internal_has_ap_t_urgent_update_dev_factor_perp_long_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_urgent_update_dev_factor_perp_long_nu() {
  ap_t_urgent_update_dev_factor_perp_long_nu_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_urgent_update_dev_factor_perp_long_nu() const {
  return ap_t_urgent_update_dev_factor_perp_long_nu_;
}
inline float FC_TAPOSD_Params::ap_t_urgent_update_dev_factor_perp_long_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LONG_NU)
  return _internal_ap_t_urgent_update_dev_factor_perp_long_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_urgent_update_dev_factor_perp_long_nu(float value) {
  _has_bits_[2] |= 0x00000200u;
  ap_t_urgent_update_dev_factor_perp_long_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_urgent_update_dev_factor_perp_long_nu(float value) {
  _internal_set_ap_t_urgent_update_dev_factor_perp_long_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LONG_NU)
}

// optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_NU = 3784;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_urgent_update_dev_factor_perp_lat_nu() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_urgent_update_dev_factor_perp_lat_nu() const {
  return _internal_has_ap_t_urgent_update_dev_factor_perp_lat_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_urgent_update_dev_factor_perp_lat_nu() {
  ap_t_urgent_update_dev_factor_perp_lat_nu_ = 0;
  _has_bits_[2] &= ~0x00000800u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_urgent_update_dev_factor_perp_lat_nu() const {
  return ap_t_urgent_update_dev_factor_perp_lat_nu_;
}
inline float FC_TAPOSD_Params::ap_t_urgent_update_dev_factor_perp_lat_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_NU)
  return _internal_ap_t_urgent_update_dev_factor_perp_lat_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_urgent_update_dev_factor_perp_lat_nu(float value) {
  _has_bits_[2] |= 0x00000800u;
  ap_t_urgent_update_dev_factor_perp_lat_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_urgent_update_dev_factor_perp_lat_nu(float value) {
  _internal_set_ap_t_urgent_update_dev_factor_perp_lat_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_LAT_NU)
}

// optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_ANG_NU = 1289;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_urgent_update_dev_factor_perp_ang_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_urgent_update_dev_factor_perp_ang_nu() const {
  return _internal_has_ap_t_urgent_update_dev_factor_perp_ang_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_urgent_update_dev_factor_perp_ang_nu() {
  ap_t_urgent_update_dev_factor_perp_ang_nu_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_urgent_update_dev_factor_perp_ang_nu() const {
  return ap_t_urgent_update_dev_factor_perp_ang_nu_;
}
inline float FC_TAPOSD_Params::ap_t_urgent_update_dev_factor_perp_ang_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_ANG_NU)
  return _internal_ap_t_urgent_update_dev_factor_perp_ang_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_urgent_update_dev_factor_perp_ang_nu(float value) {
  _has_bits_[0] |= 0x00400000u;
  ap_t_urgent_update_dev_factor_perp_ang_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_urgent_update_dev_factor_perp_ang_nu(float value) {
  _internal_set_ap_t_urgent_update_dev_factor_perp_ang_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PERP_ANG_NU)
}

// optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LONG_NU = 3748;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_urgent_update_dev_factor_par_long_nu() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_urgent_update_dev_factor_par_long_nu() const {
  return _internal_has_ap_t_urgent_update_dev_factor_par_long_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_urgent_update_dev_factor_par_long_nu() {
  ap_t_urgent_update_dev_factor_par_long_nu_ = 0;
  _has_bits_[2] &= ~0x00000400u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_urgent_update_dev_factor_par_long_nu() const {
  return ap_t_urgent_update_dev_factor_par_long_nu_;
}
inline float FC_TAPOSD_Params::ap_t_urgent_update_dev_factor_par_long_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LONG_NU)
  return _internal_ap_t_urgent_update_dev_factor_par_long_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_urgent_update_dev_factor_par_long_nu(float value) {
  _has_bits_[2] |= 0x00000400u;
  ap_t_urgent_update_dev_factor_par_long_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_urgent_update_dev_factor_par_long_nu(float value) {
  _internal_set_ap_t_urgent_update_dev_factor_par_long_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LONG_NU)
}

// optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU = 1748;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_urgent_update_dev_factor_par_lat_nu() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_urgent_update_dev_factor_par_lat_nu() const {
  return _internal_has_ap_t_urgent_update_dev_factor_par_lat_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_urgent_update_dev_factor_par_lat_nu() {
  ap_t_urgent_update_dev_factor_par_lat_nu_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_urgent_update_dev_factor_par_lat_nu() const {
  return ap_t_urgent_update_dev_factor_par_lat_nu_;
}
inline float FC_TAPOSD_Params::ap_t_urgent_update_dev_factor_par_lat_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU)
  return _internal_ap_t_urgent_update_dev_factor_par_lat_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_urgent_update_dev_factor_par_lat_nu(float value) {
  _has_bits_[0] |= 0x10000000u;
  ap_t_urgent_update_dev_factor_par_lat_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_urgent_update_dev_factor_par_lat_nu(float value) {
  _internal_set_ap_t_urgent_update_dev_factor_par_lat_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_LAT_NU)
}

// optional float AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_ANG_NU = 3349;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_urgent_update_dev_factor_par_ang_nu() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_urgent_update_dev_factor_par_ang_nu() const {
  return _internal_has_ap_t_urgent_update_dev_factor_par_ang_nu();
}
inline void FC_TAPOSD_Params::clear_ap_t_urgent_update_dev_factor_par_ang_nu() {
  ap_t_urgent_update_dev_factor_par_ang_nu_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_urgent_update_dev_factor_par_ang_nu() const {
  return ap_t_urgent_update_dev_factor_par_ang_nu_;
}
inline float FC_TAPOSD_Params::ap_t_urgent_update_dev_factor_par_ang_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_ANG_NU)
  return _internal_ap_t_urgent_update_dev_factor_par_ang_nu();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_urgent_update_dev_factor_par_ang_nu(float value) {
  _has_bits_[1] |= 0x08000000u;
  ap_t_urgent_update_dev_factor_par_ang_nu_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_urgent_update_dev_factor_par_ang_nu(float value) {
  _internal_set_ap_t_urgent_update_dev_factor_par_ang_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_URGENT_UPDATE_DEV_FACTOR_PAR_ANG_NU)
}

// optional float AP_T_MAX_CURB_DEL_DIST_TO_ROADSIDE_PAR_M = 78;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_max_curb_del_dist_to_roadside_par_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_max_curb_del_dist_to_roadside_par_m() const {
  return _internal_has_ap_t_max_curb_del_dist_to_roadside_par_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_max_curb_del_dist_to_roadside_par_m() {
  ap_t_max_curb_del_dist_to_roadside_par_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_max_curb_del_dist_to_roadside_par_m() const {
  return ap_t_max_curb_del_dist_to_roadside_par_m_;
}
inline float FC_TAPOSD_Params::ap_t_max_curb_del_dist_to_roadside_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_CURB_DEL_DIST_TO_ROADSIDE_PAR_M)
  return _internal_ap_t_max_curb_del_dist_to_roadside_par_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_max_curb_del_dist_to_roadside_par_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  ap_t_max_curb_del_dist_to_roadside_par_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_max_curb_del_dist_to_roadside_par_m(float value) {
  _internal_set_ap_t_max_curb_del_dist_to_roadside_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_MAX_CURB_DEL_DIST_TO_ROADSIDE_PAR_M)
}

// optional float AP_T_POUT_PERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M = 2142;
inline bool FC_TAPOSD_Params::_internal_has_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TAPOSD_Params::has_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const {
  return _internal_has_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m();
}
inline void FC_TAPOSD_Params::clear_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() {
  ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline float FC_TAPOSD_Params::_internal_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const {
  return ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_;
}
inline float FC_TAPOSD_Params::ap_t_pout_perp_max_pull_out_dist_in_road_dir_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M)
  return _internal_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m();
}
inline void FC_TAPOSD_Params::_internal_set_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(float value) {
  _has_bits_[1] |= 0x00000004u;
  ap_t_pout_perp_max_pull_out_dist_in_road_dir_m_ = value;
}
inline void FC_TAPOSD_Params::set_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(float value) {
  _internal_set_ap_t_pout_perp_max_pull_out_dist_in_road_dir_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params.AP_T_POUT_PERP_MAX_PULL_OUT_DIST_IN_ROAD_DIR_M)
}

// -------------------------------------------------------------------

// FC_TAPOSD_Params_array_port

// repeated .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params data = 1995;
inline int FC_TAPOSD_Params_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FC_TAPOSD_Params_array_port::data_size() const {
  return _internal_data_size();
}
inline void FC_TAPOSD_Params_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* FC_TAPOSD_Params_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params >*
FC_TAPOSD_Params_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port.data)
  return &data_;
}
inline const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& FC_TAPOSD_Params_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& FC_TAPOSD_Params_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* FC_TAPOSD_Params_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* FC_TAPOSD_Params_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params >&
FC_TAPOSD_Params_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fc_taposd_params
}  // namespace ap_tp
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto
