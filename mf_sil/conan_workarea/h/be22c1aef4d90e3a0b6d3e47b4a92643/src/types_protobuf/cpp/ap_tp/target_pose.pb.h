// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/target_pose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ftarget_5fpose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ftarget_5fpose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lsm_geoml/pose_pod.pb.h"
#include "ap_tp/pose_type.pb.h"
#include "ap_tp/target_side.pb.h"
#include "ap_tp/pose_reachable_status.pb.h"
#include "ap_tp/pose_fail_reason.pb.h"
#include "ap_tp/pose_obstacle_dist.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ftarget_5fpose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5ftp_2ftarget_5fpose_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto;
namespace pb {
namespace ap_tp {
namespace target_pose {
class TargetPose;
class TargetPoseDefaultTypeInternal;
extern TargetPoseDefaultTypeInternal _TargetPose_default_instance_;
class TargetPose_array_port;
class TargetPose_array_portDefaultTypeInternal;
extern TargetPose_array_portDefaultTypeInternal _TargetPose_array_port_default_instance_;
}  // namespace target_pose
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_tp::target_pose::TargetPose* Arena::CreateMaybeMessage<::pb::ap_tp::target_pose::TargetPose>(Arena*);
template<> ::pb::ap_tp::target_pose::TargetPose_array_port* Arena::CreateMaybeMessage<::pb::ap_tp::target_pose::TargetPose_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_tp {
namespace target_pose {

// ===================================================================

class TargetPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.target_pose.TargetPose) */ {
 public:
  TargetPose();
  virtual ~TargetPose();

  TargetPose(const TargetPose& from);
  TargetPose(TargetPose&& from) noexcept
    : TargetPose() {
    *this = ::std::move(from);
  }

  inline TargetPose& operator=(const TargetPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetPose& operator=(TargetPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetPose* internal_default_instance() {
    return reinterpret_cast<const TargetPose*>(
               &_TargetPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TargetPose& a, TargetPose& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetPose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetPose* New() const final {
    return CreateMaybeMessage<TargetPose>(nullptr);
  }

  TargetPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetPose& from);
  void MergeFrom(const TargetPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.target_pose.TargetPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto);
    return ::descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseObstacleDistFieldNumber = 706,
    kPoseFieldNumber = 1513,
    kRelatedParkingBoxIDFieldNumber = 215,
    kTargetSideFieldNumber = 1274,
    kReachableStatusFieldNumber = 1758,
    kPoseFailReasonFieldNumber = 2452,
    kPoseIDFieldNumber = 2647,
    kTypeFieldNumber = 3764,
  };
  // optional .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist poseObstacleDist = 706;
  bool has_poseobstacledist() const;
  private:
  bool _internal_has_poseobstacledist() const;
  public:
  void clear_poseobstacledist();
  const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& poseobstacledist() const;
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* release_poseobstacledist();
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* mutable_poseobstacledist();
  void set_allocated_poseobstacledist(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* poseobstacledist);
  private:
  const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& _internal_poseobstacledist() const;
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* _internal_mutable_poseobstacledist();
  public:

  // optional .pb.lsm_geoml.pose_pod.Pose_POD pose = 1513;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::pb::lsm_geoml::pose_pod::Pose_POD& pose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* release_pose();
  ::pb::lsm_geoml::pose_pod::Pose_POD* mutable_pose();
  void set_allocated_pose(::pb::lsm_geoml::pose_pod::Pose_POD* pose);
  private:
  const ::pb::lsm_geoml::pose_pod::Pose_POD& _internal_pose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* _internal_mutable_pose();
  public:

  // optional uint32 relatedParkingBoxID = 215;
  bool has_relatedparkingboxid() const;
  private:
  bool _internal_has_relatedparkingboxid() const;
  public:
  void clear_relatedparkingboxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 relatedparkingboxid() const;
  void set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_relatedparkingboxid() const;
  void _internal_set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.ap_tp.target_side.TargetSide targetSide = 1274;
  bool has_targetside() const;
  private:
  bool _internal_has_targetside() const;
  public:
  void clear_targetside();
  ::pb::ap_tp::target_side::TargetSide targetside() const;
  void set_targetside(::pb::ap_tp::target_side::TargetSide value);
  private:
  ::pb::ap_tp::target_side::TargetSide _internal_targetside() const;
  void _internal_set_targetside(::pb::ap_tp::target_side::TargetSide value);
  public:

  // optional .pb.ap_tp.pose_reachable_status.PoseReachableStatus reachableStatus = 1758;
  bool has_reachablestatus() const;
  private:
  bool _internal_has_reachablestatus() const;
  public:
  void clear_reachablestatus();
  ::pb::ap_tp::pose_reachable_status::PoseReachableStatus reachablestatus() const;
  void set_reachablestatus(::pb::ap_tp::pose_reachable_status::PoseReachableStatus value);
  private:
  ::pb::ap_tp::pose_reachable_status::PoseReachableStatus _internal_reachablestatus() const;
  void _internal_set_reachablestatus(::pb::ap_tp::pose_reachable_status::PoseReachableStatus value);
  public:

  // optional .pb.ap_tp.pose_fail_reason.PoseFailReason poseFailReason = 2452;
  bool has_posefailreason() const;
  private:
  bool _internal_has_posefailreason() const;
  public:
  void clear_posefailreason();
  ::pb::ap_tp::pose_fail_reason::PoseFailReason posefailreason() const;
  void set_posefailreason(::pb::ap_tp::pose_fail_reason::PoseFailReason value);
  private:
  ::pb::ap_tp::pose_fail_reason::PoseFailReason _internal_posefailreason() const;
  void _internal_set_posefailreason(::pb::ap_tp::pose_fail_reason::PoseFailReason value);
  public:

  // optional uint32 pose_ID = 2647;
  bool has_pose_id() const;
  private:
  bool _internal_has_pose_id() const;
  public:
  void clear_pose_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pose_id() const;
  void set_pose_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pose_id() const;
  void _internal_set_pose_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.ap_tp.pose_type.PoseType type = 3764;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::pb::ap_tp::pose_type::PoseType type() const;
  void set_type(::pb::ap_tp::pose_type::PoseType value);
  private:
  ::pb::ap_tp::pose_type::PoseType _internal_type() const;
  void _internal_set_type(::pb::ap_tp::pose_type::PoseType value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_tp.target_pose.TargetPose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* poseobstacledist_;
  ::pb::lsm_geoml::pose_pod::Pose_POD* pose_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relatedparkingboxid_;
  int targetside_;
  int reachablestatus_;
  int posefailreason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pose_id_;
  int type_;
  friend struct ::TableStruct_ap_5ftp_2ftarget_5fpose_2eproto;
};
// -------------------------------------------------------------------

class TargetPose_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.target_pose.TargetPose_array_port) */ {
 public:
  TargetPose_array_port();
  virtual ~TargetPose_array_port();

  TargetPose_array_port(const TargetPose_array_port& from);
  TargetPose_array_port(TargetPose_array_port&& from) noexcept
    : TargetPose_array_port() {
    *this = ::std::move(from);
  }

  inline TargetPose_array_port& operator=(const TargetPose_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetPose_array_port& operator=(TargetPose_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetPose_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetPose_array_port* internal_default_instance() {
    return reinterpret_cast<const TargetPose_array_port*>(
               &_TargetPose_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TargetPose_array_port& a, TargetPose_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetPose_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetPose_array_port* New() const final {
    return CreateMaybeMessage<TargetPose_array_port>(nullptr);
  }

  TargetPose_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetPose_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetPose_array_port& from);
  void MergeFrom(const TargetPose_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetPose_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.target_pose.TargetPose_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto);
    return ::descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3775,
  };
  // repeated .pb.ap_tp.target_pose.TargetPose data = 3775;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_tp::target_pose::TargetPose* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::target_pose::TargetPose >*
      mutable_data();
  private:
  const ::pb::ap_tp::target_pose::TargetPose& _internal_data(int index) const;
  ::pb::ap_tp::target_pose::TargetPose* _internal_add_data();
  public:
  const ::pb::ap_tp::target_pose::TargetPose& data(int index) const;
  ::pb::ap_tp::target_pose::TargetPose* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::target_pose::TargetPose >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_tp.target_pose.TargetPose_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::target_pose::TargetPose > data_;
  friend struct ::TableStruct_ap_5ftp_2ftarget_5fpose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TargetPose

// optional .pb.lsm_geoml.pose_pod.Pose_POD pose = 1513;
inline bool TargetPose::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool TargetPose::has_pose() const {
  return _internal_has_pose();
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& TargetPose::_internal_pose() const {
  const ::pb::lsm_geoml::pose_pod::Pose_POD* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      &::pb::lsm_geoml::pose_pod::_Pose_POD_default_instance_);
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& TargetPose::pose() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.pose)
  return _internal_pose();
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* TargetPose::release_pose() {
  // @@protoc_insertion_point(field_release:pb.ap_tp.target_pose.TargetPose.pose)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::lsm_geoml::pose_pod::Pose_POD* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* TargetPose::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000002u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lsm_geoml::pose_pod::Pose_POD>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* TargetPose::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.target_pose.TargetPose.pose)
  return _internal_mutable_pose();
}
inline void TargetPose::set_allocated_pose(::pb::lsm_geoml::pose_pod::Pose_POD* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_tp.target_pose.TargetPose.pose)
}

// optional uint32 pose_ID = 2647;
inline bool TargetPose::_internal_has_pose_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TargetPose::has_pose_id() const {
  return _internal_has_pose_id();
}
inline void TargetPose::clear_pose_id() {
  pose_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPose::_internal_pose_id() const {
  return pose_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPose::pose_id() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.pose_ID)
  return _internal_pose_id();
}
inline void TargetPose::_internal_set_pose_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  pose_id_ = value;
}
inline void TargetPose::set_pose_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pose_id(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.target_pose.TargetPose.pose_ID)
}

// optional uint32 relatedParkingBoxID = 215;
inline bool TargetPose::_internal_has_relatedparkingboxid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TargetPose::has_relatedparkingboxid() const {
  return _internal_has_relatedparkingboxid();
}
inline void TargetPose::clear_relatedparkingboxid() {
  relatedparkingboxid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPose::_internal_relatedparkingboxid() const {
  return relatedparkingboxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TargetPose::relatedparkingboxid() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.relatedParkingBoxID)
  return _internal_relatedparkingboxid();
}
inline void TargetPose::_internal_set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  relatedparkingboxid_ = value;
}
inline void TargetPose::set_relatedparkingboxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_relatedparkingboxid(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.target_pose.TargetPose.relatedParkingBoxID)
}

// optional .pb.ap_tp.pose_type.PoseType type = 3764;
inline bool TargetPose::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TargetPose::has_type() const {
  return _internal_has_type();
}
inline void TargetPose::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::ap_tp::pose_type::PoseType TargetPose::_internal_type() const {
  return static_cast< ::pb::ap_tp::pose_type::PoseType >(type_);
}
inline ::pb::ap_tp::pose_type::PoseType TargetPose::type() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.type)
  return _internal_type();
}
inline void TargetPose::_internal_set_type(::pb::ap_tp::pose_type::PoseType value) {
  assert(::pb::ap_tp::pose_type::PoseType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void TargetPose::set_type(::pb::ap_tp::pose_type::PoseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.target_pose.TargetPose.type)
}

// optional .pb.ap_tp.target_side.TargetSide targetSide = 1274;
inline bool TargetPose::_internal_has_targetside() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TargetPose::has_targetside() const {
  return _internal_has_targetside();
}
inline void TargetPose::clear_targetside() {
  targetside_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::ap_tp::target_side::TargetSide TargetPose::_internal_targetside() const {
  return static_cast< ::pb::ap_tp::target_side::TargetSide >(targetside_);
}
inline ::pb::ap_tp::target_side::TargetSide TargetPose::targetside() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.targetSide)
  return _internal_targetside();
}
inline void TargetPose::_internal_set_targetside(::pb::ap_tp::target_side::TargetSide value) {
  assert(::pb::ap_tp::target_side::TargetSide_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  targetside_ = value;
}
inline void TargetPose::set_targetside(::pb::ap_tp::target_side::TargetSide value) {
  _internal_set_targetside(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.target_pose.TargetPose.targetSide)
}

// optional .pb.ap_tp.pose_reachable_status.PoseReachableStatus reachableStatus = 1758;
inline bool TargetPose::_internal_has_reachablestatus() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TargetPose::has_reachablestatus() const {
  return _internal_has_reachablestatus();
}
inline void TargetPose::clear_reachablestatus() {
  reachablestatus_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::ap_tp::pose_reachable_status::PoseReachableStatus TargetPose::_internal_reachablestatus() const {
  return static_cast< ::pb::ap_tp::pose_reachable_status::PoseReachableStatus >(reachablestatus_);
}
inline ::pb::ap_tp::pose_reachable_status::PoseReachableStatus TargetPose::reachablestatus() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.reachableStatus)
  return _internal_reachablestatus();
}
inline void TargetPose::_internal_set_reachablestatus(::pb::ap_tp::pose_reachable_status::PoseReachableStatus value) {
  assert(::pb::ap_tp::pose_reachable_status::PoseReachableStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  reachablestatus_ = value;
}
inline void TargetPose::set_reachablestatus(::pb::ap_tp::pose_reachable_status::PoseReachableStatus value) {
  _internal_set_reachablestatus(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.target_pose.TargetPose.reachableStatus)
}

// optional .pb.ap_tp.pose_fail_reason.PoseFailReason poseFailReason = 2452;
inline bool TargetPose::_internal_has_posefailreason() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TargetPose::has_posefailreason() const {
  return _internal_has_posefailreason();
}
inline void TargetPose::clear_posefailreason() {
  posefailreason_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::ap_tp::pose_fail_reason::PoseFailReason TargetPose::_internal_posefailreason() const {
  return static_cast< ::pb::ap_tp::pose_fail_reason::PoseFailReason >(posefailreason_);
}
inline ::pb::ap_tp::pose_fail_reason::PoseFailReason TargetPose::posefailreason() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.poseFailReason)
  return _internal_posefailreason();
}
inline void TargetPose::_internal_set_posefailreason(::pb::ap_tp::pose_fail_reason::PoseFailReason value) {
  assert(::pb::ap_tp::pose_fail_reason::PoseFailReason_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  posefailreason_ = value;
}
inline void TargetPose::set_posefailreason(::pb::ap_tp::pose_fail_reason::PoseFailReason value) {
  _internal_set_posefailreason(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.target_pose.TargetPose.poseFailReason)
}

// optional .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist poseObstacleDist = 706;
inline bool TargetPose::_internal_has_poseobstacledist() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || poseobstacledist_ != nullptr);
  return value;
}
inline bool TargetPose::has_poseobstacledist() const {
  return _internal_has_poseobstacledist();
}
inline const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& TargetPose::_internal_poseobstacledist() const {
  const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* p = poseobstacledist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist*>(
      &::pb::ap_tp::pose_obstacle_dist::_PoseObstacleDist_default_instance_);
}
inline const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& TargetPose::poseobstacledist() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose.poseObstacleDist)
  return _internal_poseobstacledist();
}
inline ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* TargetPose::release_poseobstacledist() {
  // @@protoc_insertion_point(field_release:pb.ap_tp.target_pose.TargetPose.poseObstacleDist)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* temp = poseobstacledist_;
  poseobstacledist_ = nullptr;
  return temp;
}
inline ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* TargetPose::_internal_mutable_poseobstacledist() {
  _has_bits_[0] |= 0x00000001u;
  if (poseobstacledist_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist>(GetArenaNoVirtual());
    poseobstacledist_ = p;
  }
  return poseobstacledist_;
}
inline ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* TargetPose::mutable_poseobstacledist() {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.target_pose.TargetPose.poseObstacleDist)
  return _internal_mutable_poseobstacledist();
}
inline void TargetPose::set_allocated_poseobstacledist(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* poseobstacledist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(poseobstacledist_);
  }
  if (poseobstacledist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poseobstacledist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poseobstacledist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  poseobstacledist_ = poseobstacledist;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_tp.target_pose.TargetPose.poseObstacleDist)
}

// -------------------------------------------------------------------

// TargetPose_array_port

// repeated .pb.ap_tp.target_pose.TargetPose data = 3775;
inline int TargetPose_array_port::_internal_data_size() const {
  return data_.size();
}
inline int TargetPose_array_port::data_size() const {
  return _internal_data_size();
}
inline void TargetPose_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_tp::target_pose::TargetPose* TargetPose_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.target_pose.TargetPose_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::target_pose::TargetPose >*
TargetPose_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.target_pose.TargetPose_array_port.data)
  return &data_;
}
inline const ::pb::ap_tp::target_pose::TargetPose& TargetPose_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_tp::target_pose::TargetPose& TargetPose_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.target_pose.TargetPose_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_tp::target_pose::TargetPose* TargetPose_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_tp::target_pose::TargetPose* TargetPose_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_tp.target_pose.TargetPose_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::target_pose::TargetPose >&
TargetPose_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.target_pose.TargetPose_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace target_pose
}  // namespace ap_tp
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ftarget_5fpose_2eproto
