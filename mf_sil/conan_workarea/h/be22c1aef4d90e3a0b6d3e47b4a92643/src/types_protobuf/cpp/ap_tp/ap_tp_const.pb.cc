// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/ap_tp_const.proto

#include "ap_tp/ap_tp_const.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fap_5ftp_5fconst_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AP_TP_Const_ap_5ftp_2fap_5ftp_5fconst_2eproto;
namespace pb {
namespace ap_tp {
namespace ap_tp_const {
class AP_TP_ConstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AP_TP_Const> _instance;
} _AP_TP_Const_default_instance_;
class AP_TP_Const_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AP_TP_Const_array_port> _instance;
} _AP_TP_Const_array_port_default_instance_;
}  // namespace ap_tp_const
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_AP_TP_Const_ap_5ftp_2fap_5ftp_5fconst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::ap_tp_const::_AP_TP_Const_default_instance_;
    new (ptr) ::pb::ap_tp::ap_tp_const::AP_TP_Const();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::ap_tp_const::AP_TP_Const::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AP_TP_Const_ap_5ftp_2fap_5ftp_5fconst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AP_TP_Const_ap_5ftp_2fap_5ftp_5fconst_2eproto}, {}};

static void InitDefaultsscc_info_AP_TP_Const_array_port_ap_5ftp_2fap_5ftp_5fconst_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::ap_tp_const::_AP_TP_Const_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AP_TP_Const_array_port_ap_5ftp_2fap_5ftp_5fconst_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AP_TP_Const_array_port_ap_5ftp_2fap_5ftp_5fconst_2eproto}, {
      &scc_info_AP_TP_Const_ap_5ftp_2fap_5ftp_5fconst_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2fap_5ftp_5fconst_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2fap_5ftp_5fconst_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2fap_5ftp_5fconst_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2fap_5ftp_5fconst_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, ap_p_max_num_traj_ctrl_points_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, num_mts_debug_freespace_tp_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, ap_t_max_num_smpl_pbox_vert_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, ap_t_max_num_pose_box_data_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, num_mts_debug_freespace_tpd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, ap_p_max_num_poses_in_path_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, ap_p_max_num_segments_in_path_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, ap_p_max_num_samples_in_driven_path_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const, ap_p_max_num_samples_in_driven_path_buffer_),
  5,
  7,
  0,
  8,
  1,
  6,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::pb::ap_tp::ap_tp_const::AP_TP_Const)},
  { 23, 29, sizeof(::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::ap_tp_const::_AP_TP_Const_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::ap_tp_const::_AP_TP_Const_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2fap_5ftp_5fconst_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ap_tp/ap_tp_const.proto\022\024pb.ap_tp.ap_t"
  "p_const\"\207\003\n\013AP_TP_Const\022&\n\035AP_P_MAX_NUM_"
  "TRAJ_CTRL_POINTS\030\304\024 \001(\r\022#\n\032NUM_MTS_DEBUG"
  "_FREESPACE_TP\030\313\031 \001(\r\022\'\n\036AP_T_MAX_NUM_SMP"
  "L_PBOX_VERT_NU\030\272\035 \001(\r\022&\n\035AP_T_MAX_NUM_PO"
  "SE_BOX_DATA_NU\030\217\033 \001(\r\022$\n\033NUM_MTS_DEBUG_F"
  "REESPACE_TPD\030\365\002 \001(\r\022&\n\035AP_P_MAX_NUM_POSE"
  "S_IN_PATH_NU\030\213\027 \001(\r\022)\n AP_P_MAX_NUM_SEGM"
  "ENTS_IN_PATH_NU\030\304\r \001(\r\022,\n#AP_P_MAX_NUM_S"
  "AMPLES_IN_DRIVEN_PATH\030\367\007 \001(\r\0223\n*AP_P_MAX"
  "_NUM_SAMPLES_IN_DRIVEN_PATH_BUFFER\030\334\023 \001("
  "\r\"J\n\026AP_TP_Const_array_port\0220\n\004data\030\342\037 \003"
  "(\0132!.pb.ap_tp.ap_tp_const.AP_TP_Const"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_sccs[2] = {
  &scc_info_AP_TP_Const_ap_5ftp_2fap_5ftp_5fconst_2eproto.base,
  &scc_info_AP_TP_Const_array_port_ap_5ftp_2fap_5ftp_5fconst_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_once;
static bool descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto = {
  &descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2fap_5ftp_5fconst_2eproto, "ap_tp/ap_tp_const.proto", 517,
  &descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_once, descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_sccs, descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ap_5ftp_2fap_5ftp_5fconst_2eproto::offsets,
  file_level_metadata_ap_5ftp_2fap_5ftp_5fconst_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2fap_5ftp_5fconst_2eproto, file_level_service_descriptors_ap_5ftp_2fap_5ftp_5fconst_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2fap_5ftp_5fconst_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2fap_5ftp_5fconst_2eproto), true);
namespace pb {
namespace ap_tp {
namespace ap_tp_const {

// ===================================================================

void AP_TP_Const::InitAsDefaultInstance() {
}
class AP_TP_Const::_Internal {
 public:
  using HasBits = decltype(std::declval<AP_TP_Const>()._has_bits_);
  static void set_has_ap_p_max_num_traj_ctrl_points(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_mts_debug_freespace_tp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_t_max_num_smpl_pbox_vert_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_t_max_num_pose_box_data_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_mts_debug_freespace_tpd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ap_p_max_num_poses_in_path_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_p_max_num_segments_in_path_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_p_max_num_samples_in_driven_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_p_max_num_samples_in_driven_path_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AP_TP_Const::AP_TP_Const()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.ap_tp_const.AP_TP_Const)
}
AP_TP_Const::AP_TP_Const(const AP_TP_Const& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ap_t_max_num_smpl_pbox_vert_nu_, &from.ap_t_max_num_smpl_pbox_vert_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_t_max_num_pose_box_data_nu_) -
    reinterpret_cast<char*>(&ap_t_max_num_smpl_pbox_vert_nu_)) + sizeof(ap_t_max_num_pose_box_data_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.ap_tp_const.AP_TP_Const)
}

void AP_TP_Const::SharedCtor() {
  ::memset(&ap_t_max_num_smpl_pbox_vert_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_t_max_num_pose_box_data_nu_) -
      reinterpret_cast<char*>(&ap_t_max_num_smpl_pbox_vert_nu_)) + sizeof(ap_t_max_num_pose_box_data_nu_));
}

AP_TP_Const::~AP_TP_Const() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.ap_tp_const.AP_TP_Const)
  SharedDtor();
}

void AP_TP_Const::SharedDtor() {
}

void AP_TP_Const::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AP_TP_Const& AP_TP_Const::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AP_TP_Const_ap_5ftp_2fap_5ftp_5fconst_2eproto.base);
  return *internal_default_instance();
}


void AP_TP_Const::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.ap_tp_const.AP_TP_Const)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_t_max_num_smpl_pbox_vert_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_mts_debug_freespace_tp_) -
        reinterpret_cast<char*>(&ap_t_max_num_smpl_pbox_vert_nu_)) + sizeof(num_mts_debug_freespace_tp_));
  }
  ap_t_max_num_pose_box_data_nu_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AP_TP_Const::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 NUM_MTS_DEBUG_FREESPACE_TPD = 373;
      case 373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_num_mts_debug_freespace_tpd(&has_bits);
          num_mts_debug_freespace_tpd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH = 1015;
      case 1015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ap_p_max_num_samples_in_driven_path(&has_bits);
          ap_p_max_num_samples_in_driven_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_NUM_SEGMENTS_IN_PATH_NU = 1732;
      case 1732:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ap_p_max_num_segments_in_path_nu(&has_bits);
          ap_p_max_num_segments_in_path_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH_BUFFER = 2524;
      case 2524:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_ap_p_max_num_samples_in_driven_path_buffer(&has_bits);
          ap_p_max_num_samples_in_driven_path_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_NUM_TRAJ_CTRL_POINTS = 2628;
      case 2628:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ap_p_max_num_traj_ctrl_points(&has_bits);
          ap_p_max_num_traj_ctrl_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_NUM_POSES_IN_PATH_NU = 2955;
      case 2955:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ap_p_max_num_poses_in_path_nu(&has_bits);
          ap_p_max_num_poses_in_path_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 NUM_MTS_DEBUG_FREESPACE_TP = 3275;
      case 3275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_num_mts_debug_freespace_tp(&has_bits);
          num_mts_debug_freespace_tp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_T_MAX_NUM_POSE_BOX_DATA_NU = 3471;
      case 3471:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ap_t_max_num_pose_box_data_nu(&has_bits);
          ap_t_max_num_pose_box_data_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_T_MAX_NUM_SMPL_PBOX_VERT_NU = 3770;
      case 3770:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_ap_t_max_num_smpl_pbox_vert_nu(&has_bits);
          ap_t_max_num_smpl_pbox_vert_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AP_TP_Const::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.ap_tp_const.AP_TP_Const)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 NUM_MTS_DEBUG_FREESPACE_TPD = 373;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(373, this->_internal_num_mts_debug_freespace_tpd(), target);
  }

  // optional uint32 AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH = 1015;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1015, this->_internal_ap_p_max_num_samples_in_driven_path(), target);
  }

  // optional uint32 AP_P_MAX_NUM_SEGMENTS_IN_PATH_NU = 1732;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1732, this->_internal_ap_p_max_num_segments_in_path_nu(), target);
  }

  // optional uint32 AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH_BUFFER = 2524;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2524, this->_internal_ap_p_max_num_samples_in_driven_path_buffer(), target);
  }

  // optional uint32 AP_P_MAX_NUM_TRAJ_CTRL_POINTS = 2628;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2628, this->_internal_ap_p_max_num_traj_ctrl_points(), target);
  }

  // optional uint32 AP_P_MAX_NUM_POSES_IN_PATH_NU = 2955;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2955, this->_internal_ap_p_max_num_poses_in_path_nu(), target);
  }

  // optional uint32 NUM_MTS_DEBUG_FREESPACE_TP = 3275;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3275, this->_internal_num_mts_debug_freespace_tp(), target);
  }

  // optional uint32 AP_T_MAX_NUM_POSE_BOX_DATA_NU = 3471;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3471, this->_internal_ap_t_max_num_pose_box_data_nu(), target);
  }

  // optional uint32 AP_T_MAX_NUM_SMPL_PBOX_VERT_NU = 3770;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3770, this->_internal_ap_t_max_num_smpl_pbox_vert_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.ap_tp_const.AP_TP_Const)
  return target;
}

size_t AP_TP_Const::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.ap_tp_const.AP_TP_Const)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 AP_T_MAX_NUM_SMPL_PBOX_VERT_NU = 3770;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_t_max_num_smpl_pbox_vert_nu());
    }

    // optional uint32 NUM_MTS_DEBUG_FREESPACE_TPD = 373;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_mts_debug_freespace_tpd());
    }

    // optional uint32 AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH = 1015;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_num_samples_in_driven_path());
    }

    // optional uint32 AP_P_MAX_NUM_SEGMENTS_IN_PATH_NU = 1732;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_num_segments_in_path_nu());
    }

    // optional uint32 AP_P_MAX_NUM_SAMPLES_IN_DRIVEN_PATH_BUFFER = 2524;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_num_samples_in_driven_path_buffer());
    }

    // optional uint32 AP_P_MAX_NUM_TRAJ_CTRL_POINTS = 2628;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_num_traj_ctrl_points());
    }

    // optional uint32 AP_P_MAX_NUM_POSES_IN_PATH_NU = 2955;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_num_poses_in_path_nu());
    }

    // optional uint32 NUM_MTS_DEBUG_FREESPACE_TP = 3275;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_mts_debug_freespace_tp());
    }

  }
  // optional uint32 AP_T_MAX_NUM_POSE_BOX_DATA_NU = 3471;
  if (cached_has_bits & 0x00000100u) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ap_t_max_num_pose_box_data_nu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AP_TP_Const::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const)
  GOOGLE_DCHECK_NE(&from, this);
  const AP_TP_Const* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AP_TP_Const>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.ap_tp_const.AP_TP_Const)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.ap_tp_const.AP_TP_Const)
    MergeFrom(*source);
  }
}

void AP_TP_Const::MergeFrom(const AP_TP_Const& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_t_max_num_smpl_pbox_vert_nu_ = from.ap_t_max_num_smpl_pbox_vert_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_mts_debug_freespace_tpd_ = from.num_mts_debug_freespace_tpd_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_p_max_num_samples_in_driven_path_ = from.ap_p_max_num_samples_in_driven_path_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_p_max_num_segments_in_path_nu_ = from.ap_p_max_num_segments_in_path_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_p_max_num_samples_in_driven_path_buffer_ = from.ap_p_max_num_samples_in_driven_path_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_p_max_num_traj_ctrl_points_ = from.ap_p_max_num_traj_ctrl_points_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_p_max_num_poses_in_path_nu_ = from.ap_p_max_num_poses_in_path_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_mts_debug_freespace_tp_ = from.num_mts_debug_freespace_tp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ap_t_max_num_pose_box_data_nu(from._internal_ap_t_max_num_pose_box_data_nu());
  }
}

void AP_TP_Const::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AP_TP_Const::CopyFrom(const AP_TP_Const& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AP_TP_Const::IsInitialized() const {
  return true;
}

void AP_TP_Const::InternalSwap(AP_TP_Const* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ap_t_max_num_smpl_pbox_vert_nu_, other->ap_t_max_num_smpl_pbox_vert_nu_);
  swap(num_mts_debug_freespace_tpd_, other->num_mts_debug_freespace_tpd_);
  swap(ap_p_max_num_samples_in_driven_path_, other->ap_p_max_num_samples_in_driven_path_);
  swap(ap_p_max_num_segments_in_path_nu_, other->ap_p_max_num_segments_in_path_nu_);
  swap(ap_p_max_num_samples_in_driven_path_buffer_, other->ap_p_max_num_samples_in_driven_path_buffer_);
  swap(ap_p_max_num_traj_ctrl_points_, other->ap_p_max_num_traj_ctrl_points_);
  swap(ap_p_max_num_poses_in_path_nu_, other->ap_p_max_num_poses_in_path_nu_);
  swap(num_mts_debug_freespace_tp_, other->num_mts_debug_freespace_tp_);
  swap(ap_t_max_num_pose_box_data_nu_, other->ap_t_max_num_pose_box_data_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AP_TP_Const::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AP_TP_Const_array_port::InitAsDefaultInstance() {
}
class AP_TP_Const_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<AP_TP_Const_array_port>()._has_bits_);
};

AP_TP_Const_array_port::AP_TP_Const_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
}
AP_TP_Const_array_port::AP_TP_Const_array_port(const AP_TP_Const_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
}

void AP_TP_Const_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AP_TP_Const_array_port_ap_5ftp_2fap_5ftp_5fconst_2eproto.base);
}

AP_TP_Const_array_port::~AP_TP_Const_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  SharedDtor();
}

void AP_TP_Const_array_port::SharedDtor() {
}

void AP_TP_Const_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AP_TP_Const_array_port& AP_TP_Const_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AP_TP_Const_array_port_ap_5ftp_2fap_5ftp_5fconst_2eproto.base);
  return *internal_default_instance();
}


void AP_TP_Const_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AP_TP_Const_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.ap_tp_const.AP_TP_Const data = 4066;
      case 4066:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AP_TP_Const_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.ap_tp_const.AP_TP_Const data = 4066;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4066, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  return target;
}

size_t AP_TP_Const_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.ap_tp_const.AP_TP_Const data = 4066;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AP_TP_Const_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const AP_TP_Const_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AP_TP_Const_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
    MergeFrom(*source);
  }
}

void AP_TP_Const_array_port::MergeFrom(const AP_TP_Const_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void AP_TP_Const_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AP_TP_Const_array_port::CopyFrom(const AP_TP_Const_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.ap_tp_const.AP_TP_Const_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AP_TP_Const_array_port::IsInitialized() const {
  return true;
}

void AP_TP_Const_array_port::InternalSwap(AP_TP_Const_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AP_TP_Const_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ap_tp_const
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::ap_tp_const::AP_TP_Const* Arena::CreateMaybeMessage< ::pb::ap_tp::ap_tp_const::AP_TP_Const >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::ap_tp_const::AP_TP_Const >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::ap_tp_const::AP_TP_Const_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
