// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/planned_geometric_path_output.proto

#include "ap_tp/planned_geometric_path_output.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlannedGeometricPathOutput_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto;
namespace pb {
namespace ap_tp {
namespace planned_geometric_path_output {
class PlannedGeometricPathOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlannedGeometricPathOutput> _instance;
} _PlannedGeometricPathOutput_default_instance_;
class PlannedGeometricPathOutput_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlannedGeometricPathOutput_array_port> _instance;
} _PlannedGeometricPathOutput_array_port_default_instance_;
}  // namespace planned_geometric_path_output
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_PlannedGeometricPathOutput_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::planned_geometric_path_output::_PlannedGeometricPathOutput_default_instance_;
    new (ptr) ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlannedGeometricPathOutput_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlannedGeometricPathOutput_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto}, {}};

static void InitDefaultsscc_info_PlannedGeometricPathOutput_array_port_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::planned_geometric_path_output::_PlannedGeometricPathOutput_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlannedGeometricPathOutput_array_port_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlannedGeometricPathOutput_array_port_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto}, {
      &scc_info_PlannedGeometricPathOutput_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, startpose_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, endpose_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, turnradius_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, turnradiussecond_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, drvdir_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, steerdir_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, longvel_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, length_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, rotationcenter_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, rotationcentersecond_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput, planphase_),
  ~0u,
  ~0u,
  2,
  6,
  4,
  1,
  0,
  5,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput)},
  { 27, 33, sizeof(::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::planned_geometric_path_output::_PlannedGeometricPathOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::planned_geometric_path_output::_PlannedGeometricPathOutput_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)ap_tp/planned_geometric_path_output.pr"
  "oto\022&pb.ap_tp.planned_geometric_path_out"
  "put\"\223\002\n\032PlannedGeometricPathOutput\022\022\n\tst"
  "artPose\030\361\002 \003(\002\022\020\n\007endPose\030\336\016 \003(\002\022\025\n\014turn"
  "Radius_m\030\334\003 \001(\002\022\033\n\022turnRadiusSecond_m\030\213\r"
  " \001(\002\022\017\n\006drvDir\030\341\t \001(\r\022\021\n\010steerDir\030\253\003 \001(\r"
  "\022\024\n\013longVel_mps\030\274\021 \001(\002\022\021\n\010length_m\030\215\n \001("
  "\002\022\031\n\020rotationCenter_m\030\243\t \003(\002\022\037\n\026rotation"
  "CenterSecond_m\030\311\030 \003(\002\022\022\n\tplanPhase\030\277\010 \001("
  "\r\"z\n%PlannedGeometricPathOutput_array_po"
  "rt\022Q\n\004data\030\302\004 \003(\0132B.pb.ap_tp.planned_geo"
  "metric_path_output.PlannedGeometricPathO"
  "utput"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_sccs[2] = {
  &scc_info_PlannedGeometricPathOutput_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto.base,
  &scc_info_PlannedGeometricPathOutput_array_port_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_once;
static bool descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto = {
  &descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto, "ap_tp/planned_geometric_path_output.proto", 485,
  &descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_once, descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_sccs, descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto::offsets,
  file_level_metadata_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto, file_level_service_descriptors_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto), true);
namespace pb {
namespace ap_tp {
namespace planned_geometric_path_output {

// ===================================================================

void PlannedGeometricPathOutput::InitAsDefaultInstance() {
}
class PlannedGeometricPathOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<PlannedGeometricPathOutput>()._has_bits_);
  static void set_has_turnradius_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_turnradiussecond_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_drvdir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_steerdir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longvel_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_planphase(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PlannedGeometricPathOutput::PlannedGeometricPathOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
}
PlannedGeometricPathOutput::PlannedGeometricPathOutput(const PlannedGeometricPathOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      startpose_(from.startpose_),
      rotationcenter_m_(from.rotationcenter_m_),
      endpose_(from.endpose_),
      rotationcentersecond_m_(from.rotationcentersecond_m_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longvel_mps_, &from.longvel_mps_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnradiussecond_m_) -
    reinterpret_cast<char*>(&longvel_mps_)) + sizeof(turnradiussecond_m_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
}

void PlannedGeometricPathOutput::SharedCtor() {
  ::memset(&longvel_mps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnradiussecond_m_) -
      reinterpret_cast<char*>(&longvel_mps_)) + sizeof(turnradiussecond_m_));
}

PlannedGeometricPathOutput::~PlannedGeometricPathOutput() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  SharedDtor();
}

void PlannedGeometricPathOutput::SharedDtor() {
}

void PlannedGeometricPathOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannedGeometricPathOutput& PlannedGeometricPathOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlannedGeometricPathOutput_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto.base);
  return *internal_default_instance();
}


void PlannedGeometricPathOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  startpose_.Clear();
  rotationcenter_m_.Clear();
  endpose_.Clear();
  rotationcentersecond_m_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&longvel_mps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&turnradiussecond_m_) -
        reinterpret_cast<char*>(&longvel_mps_)) + sizeof(turnradiussecond_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlannedGeometricPathOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float startPose = 369;
      case 369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_startpose(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2957>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_startpose(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 steerDir = 427;
      case 427:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_steerdir(&has_bits);
          steerdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float turnRadius_m = 476;
      case 476:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_turnradius_m(&has_bits);
          turnradius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 planPhase = 1087;
      case 1087:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_planphase(&has_bits);
          planphase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rotationCenter_m = 1187;
      case 1187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_rotationcenter_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9501>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotationcenter_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drvDir = 1249;
      case 1249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_drvdir(&has_bits);
          drvdir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float length_m = 1293;
      case 1293:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_length_m(&has_bits);
          length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float turnRadiusSecond_m = 1675;
      case 1675:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_turnradiussecond_m(&has_bits);
          turnradiussecond_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float endPose = 1886;
      case 1886:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_endpose(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15093>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_endpose(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float longVel_mps = 2236;
      case 2236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_longvel_mps(&has_bits);
          longvel_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rotationCenterSecond_m = 3145;
      case 3145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _internal_add_rotationcentersecond_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotationcentersecond_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlannedGeometricPathOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float startPose = 369;
  for (int i = 0, n = this->_internal_startpose_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(369, this->_internal_startpose(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 steerDir = 427;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(427, this->_internal_steerdir(), target);
  }

  // optional float turnRadius_m = 476;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(476, this->_internal_turnradius_m(), target);
  }

  // optional uint32 planPhase = 1087;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1087, this->_internal_planphase(), target);
  }

  // repeated float rotationCenter_m = 1187;
  for (int i = 0, n = this->_internal_rotationcenter_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1187, this->_internal_rotationcenter_m(i), target);
  }

  // optional uint32 drvDir = 1249;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1249, this->_internal_drvdir(), target);
  }

  // optional float length_m = 1293;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1293, this->_internal_length_m(), target);
  }

  // optional float turnRadiusSecond_m = 1675;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1675, this->_internal_turnradiussecond_m(), target);
  }

  // repeated float endPose = 1886;
  for (int i = 0, n = this->_internal_endpose_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1886, this->_internal_endpose(i), target);
  }

  // optional float longVel_mps = 2236;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2236, this->_internal_longvel_mps(), target);
  }

  // repeated float rotationCenterSecond_m = 3145;
  for (int i = 0, n = this->_internal_rotationcentersecond_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3145, this->_internal_rotationcentersecond_m(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  return target;
}

size_t PlannedGeometricPathOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float startPose = 369;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_startpose_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_startpose_size());
    total_size += data_size;
  }

  // repeated float rotationCenter_m = 1187;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotationcenter_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rotationcenter_m_size());
    total_size += data_size;
  }

  // repeated float endPose = 1886;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_endpose_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_endpose_size());
    total_size += data_size;
  }

  // repeated float rotationCenterSecond_m = 3145;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotationcentersecond_m_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rotationcentersecond_m_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float longVel_mps = 2236;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional uint32 steerDir = 427;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steerdir());
    }

    // optional float turnRadius_m = 476;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional uint32 planPhase = 1087;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_planphase());
    }

    // optional uint32 drvDir = 1249;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drvdir());
    }

    // optional float length_m = 1293;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float turnRadiusSecond_m = 1675;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannedGeometricPathOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannedGeometricPathOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlannedGeometricPathOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
    MergeFrom(*source);
  }
}

void PlannedGeometricPathOutput::MergeFrom(const PlannedGeometricPathOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  startpose_.MergeFrom(from.startpose_);
  rotationcenter_m_.MergeFrom(from.rotationcenter_m_);
  endpose_.MergeFrom(from.endpose_);
  rotationcentersecond_m_.MergeFrom(from.rotationcentersecond_m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      longvel_mps_ = from.longvel_mps_;
    }
    if (cached_has_bits & 0x00000002u) {
      steerdir_ = from.steerdir_;
    }
    if (cached_has_bits & 0x00000004u) {
      turnradius_m_ = from.turnradius_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      planphase_ = from.planphase_;
    }
    if (cached_has_bits & 0x00000010u) {
      drvdir_ = from.drvdir_;
    }
    if (cached_has_bits & 0x00000020u) {
      length_m_ = from.length_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      turnradiussecond_m_ = from.turnradiussecond_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlannedGeometricPathOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannedGeometricPathOutput::CopyFrom(const PlannedGeometricPathOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannedGeometricPathOutput::IsInitialized() const {
  return true;
}

void PlannedGeometricPathOutput::InternalSwap(PlannedGeometricPathOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  startpose_.InternalSwap(&other->startpose_);
  rotationcenter_m_.InternalSwap(&other->rotationcenter_m_);
  endpose_.InternalSwap(&other->endpose_);
  rotationcentersecond_m_.InternalSwap(&other->rotationcentersecond_m_);
  swap(longvel_mps_, other->longvel_mps_);
  swap(steerdir_, other->steerdir_);
  swap(turnradius_m_, other->turnradius_m_);
  swap(planphase_, other->planphase_);
  swap(drvdir_, other->drvdir_);
  swap(length_m_, other->length_m_);
  swap(turnradiussecond_m_, other->turnradiussecond_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannedGeometricPathOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlannedGeometricPathOutput_array_port::InitAsDefaultInstance() {
}
class PlannedGeometricPathOutput_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<PlannedGeometricPathOutput_array_port>()._has_bits_);
};

PlannedGeometricPathOutput_array_port::PlannedGeometricPathOutput_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
}
PlannedGeometricPathOutput_array_port::PlannedGeometricPathOutput_array_port(const PlannedGeometricPathOutput_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
}

void PlannedGeometricPathOutput_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlannedGeometricPathOutput_array_port_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto.base);
}

PlannedGeometricPathOutput_array_port::~PlannedGeometricPathOutput_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  SharedDtor();
}

void PlannedGeometricPathOutput_array_port::SharedDtor() {
}

void PlannedGeometricPathOutput_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannedGeometricPathOutput_array_port& PlannedGeometricPathOutput_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlannedGeometricPathOutput_array_port_ap_5ftp_2fplanned_5fgeometric_5fpath_5foutput_2eproto.base);
  return *internal_default_instance();
}


void PlannedGeometricPathOutput_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlannedGeometricPathOutput_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput data = 578;
      case 578:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<4626>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlannedGeometricPathOutput_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput data = 578;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(578, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  return target;
}

size_t PlannedGeometricPathOutput_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput data = 578;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannedGeometricPathOutput_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannedGeometricPathOutput_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlannedGeometricPathOutput_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
    MergeFrom(*source);
  }
}

void PlannedGeometricPathOutput_array_port::MergeFrom(const PlannedGeometricPathOutput_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void PlannedGeometricPathOutput_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannedGeometricPathOutput_array_port::CopyFrom(const PlannedGeometricPathOutput_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.planned_geometric_path_output.PlannedGeometricPathOutput_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannedGeometricPathOutput_array_port::IsInitialized() const {
  return true;
}

void PlannedGeometricPathOutput_array_port::InternalSwap(PlannedGeometricPathOutput_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannedGeometricPathOutput_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planned_geometric_path_output
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput* Arena::CreateMaybeMessage< ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::planned_geometric_path_output::PlannedGeometricPathOutput_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
