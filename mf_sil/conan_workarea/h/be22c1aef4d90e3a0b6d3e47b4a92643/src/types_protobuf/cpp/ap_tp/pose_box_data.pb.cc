// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/pose_box_data.proto

#include "ap_tp/pose_box_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fpose_5fbox_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoseBoxData_ap_5ftp_2fpose_5fbox_5fdata_2eproto;
namespace pb {
namespace ap_tp {
namespace pose_box_data {
class PoseBoxDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseBoxData> _instance;
} _PoseBoxData_default_instance_;
class PoseBoxData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseBoxData_array_port> _instance;
} _PoseBoxData_array_port_default_instance_;
}  // namespace pose_box_data
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_PoseBoxData_ap_5ftp_2fpose_5fbox_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::pose_box_data::_PoseBoxData_default_instance_;
    new (ptr) ::pb::ap_tp::pose_box_data::PoseBoxData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::pose_box_data::PoseBoxData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoseBoxData_ap_5ftp_2fpose_5fbox_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoseBoxData_ap_5ftp_2fpose_5fbox_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_PoseBoxData_array_port_ap_5ftp_2fpose_5fbox_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::pose_box_data::_PoseBoxData_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::pose_box_data::PoseBoxData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::pose_box_data::PoseBoxData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseBoxData_array_port_ap_5ftp_2fpose_5fbox_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PoseBoxData_array_port_ap_5ftp_2fpose_5fbox_5fdata_2eproto}, {
      &scc_info_PoseBoxData_ap_5ftp_2fpose_5fbox_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2fpose_5fbox_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2fpose_5fbox_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2fpose_5fbox_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2fpose_5fbox_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, egoyawfirstdetection_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, parkingboxid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, poseinid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, poseoutid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, poseinidx_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, poseoutidx_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, parkingboxside_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, leftedgeisfront_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData, mappingvalid_nu_),
  8,
  0,
  3,
  7,
  5,
  4,
  6,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_box_data::PoseBoxData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::pb::ap_tp::pose_box_data::PoseBoxData)},
  { 23, 29, sizeof(::pb::ap_tp::pose_box_data::PoseBoxData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::pose_box_data::_PoseBoxData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::pose_box_data::_PoseBoxData_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2fpose_5fbox_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ap_tp/pose_box_data.proto\022\026pb.ap_tp.po"
  "se_box_data\032\034ap_tp/target_road_side.prot"
  "o\"\244\002\n\013PoseBoxData\022!\n\030egoYawFirstDetectio"
  "n_rad\030\322\034 \001(\002\022\030\n\017parkingBoxID_nu\030\274\003 \001(\r\022\024"
  "\n\013poseInID_nu\030\364\013 \001(\r\022\025\n\014poseOutID_nu\030\231\034 "
  "\001(\r\022\025\n\014poseInIdx_nu\030\334\022 \001(\r\022\026\n\rposeOutIdx"
  "_nu\030\206\016 \001(\r\022E\n\021parkingBoxSide_nu\030\355\024 \001(\0162)"
  ".pb.ap_tp.target_road_side.TargetRoadSid"
  "e\022\033\n\022leftEdgeIsFront_nu\030\207\022 \001(\010\022\030\n\017mappin"
  "gValid_nu\030\267\003 \001(\010\"L\n\026PoseBoxData_array_po"
  "rt\0222\n\004data\030\277\036 \003(\0132#.pb.ap_tp.pose_box_da"
  "ta.PoseBoxData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_deps[1] = {
  &::descriptor_table_ap_5ftp_2ftarget_5froad_5fside_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_sccs[2] = {
  &scc_info_PoseBoxData_ap_5ftp_2fpose_5fbox_5fdata_2eproto.base,
  &scc_info_PoseBoxData_array_port_ap_5ftp_2fpose_5fbox_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_once;
static bool descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto = {
  &descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2fpose_5fbox_5fdata_2eproto, "ap_tp/pose_box_data.proto", 454,
  &descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_once, descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_sccs, descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ap_5ftp_2fpose_5fbox_5fdata_2eproto::offsets,
  file_level_metadata_ap_5ftp_2fpose_5fbox_5fdata_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2fpose_5fbox_5fdata_2eproto, file_level_service_descriptors_ap_5ftp_2fpose_5fbox_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2fpose_5fbox_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2fpose_5fbox_5fdata_2eproto), true);
namespace pb {
namespace ap_tp {
namespace pose_box_data {

// ===================================================================

void PoseBoxData::InitAsDefaultInstance() {
}
class PoseBoxData::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseBoxData>()._has_bits_);
  static void set_has_egoyawfirstdetection_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_parkingboxid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_poseinid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_poseoutid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_poseinidx_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_poseoutidx_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parkingboxside_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_leftedgeisfront_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mappingvalid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PoseBoxData::PoseBoxData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.pose_box_data.PoseBoxData)
}
PoseBoxData::PoseBoxData(const PoseBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parkingboxid_nu_, &from.parkingboxid_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&egoyawfirstdetection_rad_) -
    reinterpret_cast<char*>(&parkingboxid_nu_)) + sizeof(egoyawfirstdetection_rad_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.pose_box_data.PoseBoxData)
}

void PoseBoxData::SharedCtor() {
  ::memset(&parkingboxid_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&egoyawfirstdetection_rad_) -
      reinterpret_cast<char*>(&parkingboxid_nu_)) + sizeof(egoyawfirstdetection_rad_));
}

PoseBoxData::~PoseBoxData() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.pose_box_data.PoseBoxData)
  SharedDtor();
}

void PoseBoxData::SharedDtor() {
}

void PoseBoxData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseBoxData& PoseBoxData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseBoxData_ap_5ftp_2fpose_5fbox_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PoseBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.pose_box_data.PoseBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&parkingboxid_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poseoutid_nu_) -
        reinterpret_cast<char*>(&parkingboxid_nu_)) + sizeof(poseoutid_nu_));
  }
  egoyawfirstdetection_rad_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PoseBoxData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool mappingValid_nu = 439;
      case 439:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_mappingvalid_nu(&has_bits);
          mappingvalid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parkingBoxID_nu = 444;
      case 444:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_parkingboxid_nu(&has_bits);
          parkingboxid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 poseInID_nu = 1524;
      case 1524:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_poseinid_nu(&has_bits);
          poseinid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 poseOutIdx_nu = 1798;
      case 1798:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_poseoutidx_nu(&has_bits);
          poseoutidx_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool leftEdgeIsFront_nu = 2311;
      case 2311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_leftedgeisfront_nu(&has_bits);
          leftedgeisfront_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 poseInIdx_nu = 2396;
      case 2396:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_poseinidx_nu(&has_bits);
          poseinidx_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.target_road_side.TargetRoadSide parkingBoxSide_nu = 2669;
      case 2669:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_tp::target_road_side::TargetRoadSide_IsValid(val))) {
            _internal_set_parkingboxside_nu(static_cast<::pb::ap_tp::target_road_side::TargetRoadSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2669, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 poseOutID_nu = 3609;
      case 3609:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_poseoutid_nu(&has_bits);
          poseoutid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float egoYawFirstDetection_rad = 3666;
      case 3666:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_egoyawfirstdetection_rad(&has_bits);
          egoyawfirstdetection_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseBoxData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.pose_box_data.PoseBoxData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool mappingValid_nu = 439;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(439, this->_internal_mappingvalid_nu(), target);
  }

  // optional uint32 parkingBoxID_nu = 444;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(444, this->_internal_parkingboxid_nu(), target);
  }

  // optional uint32 poseInID_nu = 1524;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1524, this->_internal_poseinid_nu(), target);
  }

  // optional uint32 poseOutIdx_nu = 1798;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1798, this->_internal_poseoutidx_nu(), target);
  }

  // optional bool leftEdgeIsFront_nu = 2311;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2311, this->_internal_leftedgeisfront_nu(), target);
  }

  // optional uint32 poseInIdx_nu = 2396;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2396, this->_internal_poseinidx_nu(), target);
  }

  // optional .pb.ap_tp.target_road_side.TargetRoadSide parkingBoxSide_nu = 2669;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2669, this->_internal_parkingboxside_nu(), target);
  }

  // optional uint32 poseOutID_nu = 3609;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3609, this->_internal_poseoutid_nu(), target);
  }

  // optional float egoYawFirstDetection_rad = 3666;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3666, this->_internal_egoyawfirstdetection_rad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.pose_box_data.PoseBoxData)
  return target;
}

size_t PoseBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.pose_box_data.PoseBoxData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 parkingBoxID_nu = 444;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parkingboxid_nu());
    }

    // optional bool leftEdgeIsFront_nu = 2311;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool mappingValid_nu = 439;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional uint32 poseInID_nu = 1524;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poseinid_nu());
    }

    // optional uint32 poseOutIdx_nu = 1798;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poseoutidx_nu());
    }

    // optional uint32 poseInIdx_nu = 2396;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poseinidx_nu());
    }

    // optional .pb.ap_tp.target_road_side.TargetRoadSide parkingBoxSide_nu = 2669;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parkingboxside_nu());
    }

    // optional uint32 poseOutID_nu = 3609;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poseoutid_nu());
    }

  }
  // optional float egoYawFirstDetection_rad = 3666;
  if (cached_has_bits & 0x00000100u) {
    total_size += 3 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseBoxData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.pose_box_data.PoseBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseBoxData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseBoxData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.pose_box_data.PoseBoxData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.pose_box_data.PoseBoxData)
    MergeFrom(*source);
  }
}

void PoseBoxData::MergeFrom(const PoseBoxData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.pose_box_data.PoseBoxData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      parkingboxid_nu_ = from.parkingboxid_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      leftedgeisfront_nu_ = from.leftedgeisfront_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      mappingvalid_nu_ = from.mappingvalid_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      poseinid_nu_ = from.poseinid_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      poseoutidx_nu_ = from.poseoutidx_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      poseinidx_nu_ = from.poseinidx_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      parkingboxside_nu_ = from.parkingboxside_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      poseoutid_nu_ = from.poseoutid_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_egoyawfirstdetection_rad(from._internal_egoyawfirstdetection_rad());
  }
}

void PoseBoxData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.pose_box_data.PoseBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseBoxData::CopyFrom(const PoseBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.pose_box_data.PoseBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseBoxData::IsInitialized() const {
  return true;
}

void PoseBoxData::InternalSwap(PoseBoxData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parkingboxid_nu_, other->parkingboxid_nu_);
  swap(leftedgeisfront_nu_, other->leftedgeisfront_nu_);
  swap(mappingvalid_nu_, other->mappingvalid_nu_);
  swap(poseinid_nu_, other->poseinid_nu_);
  swap(poseoutidx_nu_, other->poseoutidx_nu_);
  swap(poseinidx_nu_, other->poseinidx_nu_);
  swap(parkingboxside_nu_, other->parkingboxside_nu_);
  swap(poseoutid_nu_, other->poseoutid_nu_);
  swap(egoyawfirstdetection_rad_, other->egoyawfirstdetection_rad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseBoxData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseBoxData_array_port::InitAsDefaultInstance() {
}
class PoseBoxData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseBoxData_array_port>()._has_bits_);
};

PoseBoxData_array_port::PoseBoxData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
}
PoseBoxData_array_port::PoseBoxData_array_port(const PoseBoxData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
}

void PoseBoxData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseBoxData_array_port_ap_5ftp_2fpose_5fbox_5fdata_2eproto.base);
}

PoseBoxData_array_port::~PoseBoxData_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  SharedDtor();
}

void PoseBoxData_array_port::SharedDtor() {
}

void PoseBoxData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseBoxData_array_port& PoseBoxData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseBoxData_array_port_ap_5ftp_2fpose_5fbox_5fdata_2eproto.base);
  return *internal_default_instance();
}


void PoseBoxData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PoseBoxData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.pose_box_data.PoseBoxData data = 3903;
      case 3903:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseBoxData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.pose_box_data.PoseBoxData data = 3903;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3903, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  return target;
}

size_t PoseBoxData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.pose_box_data.PoseBoxData data = 3903;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseBoxData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseBoxData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseBoxData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
    MergeFrom(*source);
  }
}

void PoseBoxData_array_port::MergeFrom(const PoseBoxData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void PoseBoxData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseBoxData_array_port::CopyFrom(const PoseBoxData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.pose_box_data.PoseBoxData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseBoxData_array_port::IsInitialized() const {
  return true;
}

void PoseBoxData_array_port::InternalSwap(PoseBoxData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseBoxData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pose_box_data
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::pose_box_data::PoseBoxData* Arena::CreateMaybeMessage< ::pb::ap_tp::pose_box_data::PoseBoxData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::pose_box_data::PoseBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::pose_box_data::PoseBoxData_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::pose_box_data::PoseBoxData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::pose_box_data::PoseBoxData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
