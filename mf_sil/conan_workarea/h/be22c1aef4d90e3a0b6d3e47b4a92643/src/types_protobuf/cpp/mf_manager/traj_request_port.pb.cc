// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_manager/traj_request_port.proto

#include "mf_manager/traj_request_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmanager_2fmfmdriving_5fresistance_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MFMDrivingResistance_mf_5fmanager_2fmfmdriving_5fresistance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmanager_2fmfmplanned_5ftraj_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MFMPlannedTraj_mf_5fmanager_2fmfmplanned_5ftraj_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmanager_2ftraj_5frequest_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto;
namespace pb {
namespace mf_manager {
namespace traj_request_port {
class TrajRequestPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajRequestPort> _instance;
} _TrajRequestPort_default_instance_;
class TrajRequestPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajRequestPort_array_port> _instance;
} _TrajRequestPort_array_port_default_instance_;
}  // namespace traj_request_port
}  // namespace mf_manager
}  // namespace pb
static void InitDefaultsscc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_manager::traj_request_port::_TrajRequestPort_default_instance_;
    new (ptr) ::pb::mf_manager::traj_request_port::TrajRequestPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_manager::traj_request_port::TrajRequestPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_MFMPlannedTraj_mf_5fmanager_2fmfmplanned_5ftraj_2eproto.base,
      &scc_info_MFMDrivingResistance_mf_5fmanager_2fmfmdriving_5fresistance_2eproto.base,}};

static void InitDefaultsscc_info_TrajRequestPort_array_port_mf_5fmanager_2ftraj_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_manager::traj_request_port::_TrajRequestPort_array_port_default_instance_;
    new (ptr) ::pb::mf_manager::traj_request_port::TrajRequestPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_manager::traj_request_port::TrajRequestPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajRequestPort_array_port_mf_5fmanager_2ftraj_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajRequestPort_array_port_mf_5fmanager_2ftraj_5frequest_5fport_2eproto}, {
      &scc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmanager_2ftraj_5frequest_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmanager_2ftraj_5frequest_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmanager_2ftraj_5frequest_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmanager_2ftraj_5frequest_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, plannedtraj_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, trajtype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, numvalidctrlpoints_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, drivingforwardreq_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, trajvalid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, newsegmentstarted_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, islastsegment_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, stepintrajafteridx_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort, drivingresistance_),
  1,
  0,
  ~0u,
  8,
  2,
  4,
  5,
  6,
  7,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::traj_request_port::TrajRequestPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::pb::mf_manager::traj_request_port::TrajRequestPort)},
  { 27, 33, sizeof(::pb::mf_manager::traj_request_port::TrajRequestPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_manager::traj_request_port::_TrajRequestPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_manager::traj_request_port::_TrajRequestPort_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmanager_2ftraj_5frequest_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"mf_manager/traj_request_port.proto\022\037pb"
  ".mf_manager.traj_request_port\032\027eco/signa"
  "l_header.proto\032 mf_manager/mfmplanned_tr"
  "aj.proto\032%mf_manager/mfmplanned_traj_typ"
  "e.proto\032&mf_manager/mfmdriving_resistanc"
  "e.proto\"\375\003\n\017TrajRequestPort\022\030\n\017uiVersion"
  "Number\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb."
  "eco.signal_header.SignalHeader\022C\n\013planne"
  "dTraj\030\320\033 \003(\0132-.pb.mf_manager.mfmplanned_"
  "traj.MFMPlannedTraj\022L\n\013trajType_nu\030\212\r \001("
  "\01626.pb.mf_manager.mfmplanned_traj_type.M"
  "FMPlannedTrajType\022\036\n\025numValidCtrlPoints_"
  "nu\030\322\006 \001(\r\022\035\n\024drivingForwardReq_nu\030\313\030 \001(\010"
  "\022\024\n\014trajValid_nu\030} \001(\010\022\035\n\024newSegmentStar"
  "ted_nu\030\337\n \001(\010\022\031\n\020isLastSegment_nu\030\270\014 \001(\010"
  "\022\036\n\025stepInTrajAfterIdx_nu\030\317\n \001(\r\022U\n\021driv"
  "ingResistance\030\323\027 \003(\01329.pb.mf_manager.mfm"
  "driving_resistance.MFMDrivingResistance\""
  "]\n\032TrajRequestPort_array_port\022\?\n\004data\030\217\003"
  " \003(\01320.pb.mf_manager.traj_request_port.T"
  "rajRequestPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_deps[4] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_mf_5fmanager_2fmfmdriving_5fresistance_2eproto,
  &::descriptor_table_mf_5fmanager_2fmfmplanned_5ftraj_2eproto,
  &::descriptor_table_mf_5fmanager_2fmfmplanned_5ftraj_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_sccs[2] = {
  &scc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto.base,
  &scc_info_TrajRequestPort_array_port_mf_5fmanager_2ftraj_5frequest_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_once;
static bool descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto = {
  &descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_initialized, descriptor_table_protodef_mf_5fmanager_2ftraj_5frequest_5fport_2eproto, "mf_manager/traj_request_port.proto", 814,
  &descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_once, descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_sccs, descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_mf_5fmanager_2ftraj_5frequest_5fport_2eproto::offsets,
  file_level_metadata_mf_5fmanager_2ftraj_5frequest_5fport_2eproto, 2, file_level_enum_descriptors_mf_5fmanager_2ftraj_5frequest_5fport_2eproto, file_level_service_descriptors_mf_5fmanager_2ftraj_5frequest_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmanager_2ftraj_5frequest_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmanager_2ftraj_5frequest_5fport_2eproto), true);
namespace pb {
namespace mf_manager {
namespace traj_request_port {

// ===================================================================

void TrajRequestPort::InitAsDefaultInstance() {
  ::pb::mf_manager::traj_request_port::_TrajRequestPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class TrajRequestPort::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajRequestPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const TrajRequestPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trajtype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_numvalidctrlpoints_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drivingforwardreq_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trajvalid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_newsegmentstarted_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_islastsegment_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stepintrajafteridx_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
TrajRequestPort::_Internal::ssigheader(const TrajRequestPort* msg) {
  return *msg->ssigheader_;
}
void TrajRequestPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrajRequestPort::clear_plannedtraj() {
  plannedtraj_.Clear();
}
void TrajRequestPort::clear_drivingresistance() {
  drivingresistance_.Clear();
}
TrajRequestPort::TrajRequestPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_manager.traj_request_port.TrajRequestPort)
}
TrajRequestPort::TrajRequestPort(const TrajRequestPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      drivingresistance_(from.drivingresistance_),
      plannedtraj_(from.plannedtraj_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&uiversionnumber_, &from.uiversionnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajtype_nu_) -
    reinterpret_cast<char*>(&uiversionnumber_)) + sizeof(trajtype_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_manager.traj_request_port.TrajRequestPort)
}

void TrajRequestPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajtype_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(trajtype_nu_));
}

TrajRequestPort::~TrajRequestPort() {
  // @@protoc_insertion_point(destructor:pb.mf_manager.traj_request_port.TrajRequestPort)
  SharedDtor();
}

void TrajRequestPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void TrajRequestPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajRequestPort& TrajRequestPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajRequestPort_mf_5fmanager_2ftraj_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void TrajRequestPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_manager.traj_request_port.TrajRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drivingresistance_.Clear();
  plannedtraj_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&uiversionnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&islastsegment_nu_) -
        reinterpret_cast<char*>(&uiversionnumber_)) + sizeof(islastsegment_nu_));
  }
  trajtype_nu_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajRequestPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool trajValid_nu = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_trajvalid_nu(&has_bits);
          trajvalid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 numValidCtrlPoints_nu = 850;
      case 850:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_numvalidctrlpoints_nu(&has_bits);
          numvalidctrlpoints_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stepInTrajAfterIdx_nu = 1359;
      case 1359:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_stepintrajafteridx_nu(&has_bits);
          stepintrajafteridx_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool newSegmentStarted_nu = 1375;
      case 1375:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_newsegmentstarted_nu(&has_bits);
          newsegmentstarted_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isLastSegment_nu = 1592;
      case 1592:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_islastsegment_nu(&has_bits);
          islastsegment_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_manager.mfmplanned_traj_type.MFMPlannedTrajType trajType_nu = 1674;
      case 1674:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_manager::mfmplanned_traj_type::MFMPlannedTrajType_IsValid(val))) {
            _internal_set_trajtype_nu(static_cast<::pb::mf_manager::mfmplanned_traj_type::MFMPlannedTrajType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1674, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.mf_manager.mfmdriving_resistance.MFMDrivingResistance drivingResistance = 3027;
      case 3027:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_add_drivingresistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drivingForwardReq_nu = 3147;
      case 3147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_drivingforwardreq_nu(&has_bits);
          drivingforwardreq_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.mf_manager.mfmplanned_traj.MFMPlannedTraj plannedTraj = 3536;
      case 3536:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_add_plannedtraj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajRequestPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_manager.traj_request_port.TrajRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool trajValid_nu = 125;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(125, this->_internal_trajvalid_nu(), target);
  }

  // optional uint32 numValidCtrlPoints_nu = 850;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(850, this->_internal_numvalidctrlpoints_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional uint32 stepInTrajAfterIdx_nu = 1359;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1359, this->_internal_stepintrajafteridx_nu(), target);
  }

  // optional bool newSegmentStarted_nu = 1375;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1375, this->_internal_newsegmentstarted_nu(), target);
  }

  // optional bool isLastSegment_nu = 1592;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1592, this->_internal_islastsegment_nu(), target);
  }

  // optional .pb.mf_manager.mfmplanned_traj_type.MFMPlannedTrajType trajType_nu = 1674;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1674, this->_internal_trajtype_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // repeated .pb.mf_manager.mfmdriving_resistance.MFMDrivingResistance drivingResistance = 3027;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drivingresistance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3027, this->_internal_drivingresistance(i), target, stream);
  }

  // optional bool drivingForwardReq_nu = 3147;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3147, this->_internal_drivingforwardreq_nu(), target);
  }

  // repeated .pb.mf_manager.mfmplanned_traj.MFMPlannedTraj plannedTraj = 3536;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plannedtraj_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3536, this->_internal_plannedtraj(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_manager.traj_request_port.TrajRequestPort)
  return target;
}

size_t TrajRequestPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_manager.traj_request_port.TrajRequestPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_manager.mfmdriving_resistance.MFMDrivingResistance drivingResistance = 3027;
  total_size += 3UL * this->_internal_drivingresistance_size();
  for (const auto& msg : this->drivingresistance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.mf_manager.mfmplanned_traj.MFMPlannedTraj plannedTraj = 3536;
  total_size += 3UL * this->_internal_plannedtraj_size();
  for (const auto& msg : this->plannedtraj_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 numValidCtrlPoints_nu = 850;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numvalidctrlpoints_nu());
    }

    // optional uint32 stepInTrajAfterIdx_nu = 1359;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stepintrajafteridx_nu());
    }

    // optional bool drivingForwardReq_nu = 3147;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool trajValid_nu = 125;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool newSegmentStarted_nu = 1375;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool isLastSegment_nu = 1592;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional .pb.mf_manager.mfmplanned_traj_type.MFMPlannedTrajType trajType_nu = 1674;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trajtype_nu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajRequestPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_manager.traj_request_port.TrajRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajRequestPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajRequestPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_manager.traj_request_port.TrajRequestPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_manager.traj_request_port.TrajRequestPort)
    MergeFrom(*source);
  }
}

void TrajRequestPort::MergeFrom(const TrajRequestPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_manager.traj_request_port.TrajRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drivingresistance_.MergeFrom(from.drivingresistance_);
  plannedtraj_.MergeFrom(from.plannedtraj_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      numvalidctrlpoints_nu_ = from.numvalidctrlpoints_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      stepintrajafteridx_nu_ = from.stepintrajafteridx_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      drivingforwardreq_nu_ = from.drivingforwardreq_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      trajvalid_nu_ = from.trajvalid_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      newsegmentstarted_nu_ = from.newsegmentstarted_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      islastsegment_nu_ = from.islastsegment_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_trajtype_nu(from._internal_trajtype_nu());
  }
}

void TrajRequestPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_manager.traj_request_port.TrajRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajRequestPort::CopyFrom(const TrajRequestPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_manager.traj_request_port.TrajRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajRequestPort::IsInitialized() const {
  return true;
}

void TrajRequestPort::InternalSwap(TrajRequestPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  drivingresistance_.InternalSwap(&other->drivingresistance_);
  plannedtraj_.InternalSwap(&other->plannedtraj_);
  swap(ssigheader_, other->ssigheader_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(numvalidctrlpoints_nu_, other->numvalidctrlpoints_nu_);
  swap(stepintrajafteridx_nu_, other->stepintrajafteridx_nu_);
  swap(drivingforwardreq_nu_, other->drivingforwardreq_nu_);
  swap(trajvalid_nu_, other->trajvalid_nu_);
  swap(newsegmentstarted_nu_, other->newsegmentstarted_nu_);
  swap(islastsegment_nu_, other->islastsegment_nu_);
  swap(trajtype_nu_, other->trajtype_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajRequestPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajRequestPort_array_port::InitAsDefaultInstance() {
}
class TrajRequestPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajRequestPort_array_port>()._has_bits_);
};

TrajRequestPort_array_port::TrajRequestPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
}
TrajRequestPort_array_port::TrajRequestPort_array_port(const TrajRequestPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
}

void TrajRequestPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajRequestPort_array_port_mf_5fmanager_2ftraj_5frequest_5fport_2eproto.base);
}

TrajRequestPort_array_port::~TrajRequestPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  SharedDtor();
}

void TrajRequestPort_array_port::SharedDtor() {
}

void TrajRequestPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajRequestPort_array_port& TrajRequestPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajRequestPort_array_port_mf_5fmanager_2ftraj_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void TrajRequestPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajRequestPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_manager.traj_request_port.TrajRequestPort data = 399;
      case 399:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajRequestPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_manager.traj_request_port.TrajRequestPort data = 399;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(399, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  return target;
}

size_t TrajRequestPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_manager.traj_request_port.TrajRequestPort data = 399;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajRequestPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajRequestPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajRequestPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
    MergeFrom(*source);
  }
}

void TrajRequestPort_array_port::MergeFrom(const TrajRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TrajRequestPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajRequestPort_array_port::CopyFrom(const TrajRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_manager.traj_request_port.TrajRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajRequestPort_array_port::IsInitialized() const {
  return true;
}

void TrajRequestPort_array_port::InternalSwap(TrajRequestPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajRequestPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace traj_request_port
}  // namespace mf_manager
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_manager::traj_request_port::TrajRequestPort* Arena::CreateMaybeMessage< ::pb::mf_manager::traj_request_port::TrajRequestPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_manager::traj_request_port::TrajRequestPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_manager::traj_request_port::TrajRequestPort_array_port* Arena::CreateMaybeMessage< ::pb::mf_manager::traj_request_port::TrajRequestPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_manager::traj_request_port::TrajRequestPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
