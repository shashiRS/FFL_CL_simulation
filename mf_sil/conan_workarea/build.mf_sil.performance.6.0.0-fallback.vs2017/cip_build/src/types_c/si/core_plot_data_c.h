//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef SI_CORE_PLOT_DATA_C_H_
#define SI_CORE_PLOT_DATA_C_H_

#include "si/pull_corner_rect_serializable_c.h"
#include "si/pull_corner_poly_serializable_c.h"
#include "si/quadrilateral_serializable_c.h"
#include "si/core_slot_prototype_c.h"
#include "si/quadrilateral_serializable_array_c.h"
#include "si/optimization_result_serializable_c.h"
#include "si/line_segment_serializable_array_c.h"
#include "Platform_Types.h"
#include "si/new_detected_slot_candidate_serializable_c.h"
#include "si/parking_scenario_types_c.h"
#include "si/parking_scenario_side_types_c.h"
#include "si/uint16_serializable_c.h"
#include "si/sint32_serializable_c.h"
#include "eco/memset_c.h"

/// @brief SI Core Plot Data contains the debug data needed for plotting core features.
typedef struct
{
    ///@brief Array of pull corner rectangles.
    SI_PullCornerRectSerializable pullRects;
    ///@brief Array of pull corner polygons.
    SI_PullCornerPolySerializable pullPolys;
    ///@brief " TODO: Write the correct brief documentation.
    SI_QuadrilateralSerializable parkingSlotUpdateRoi;
    ///@brief " TODO: Write the correct brief documentation.
    SI_QuadrilateralSerializable parkingSlotTrackingRoi;
    ///@brief Describes a parking slot prototype in case of perpendicular parking.
    SI_CoreSlotPrototype perpendicular;
    ///@brief Describes a parking slot prototype in case of parallel parking.
    SI_CoreSlotPrototype parallel;
    ///@brief Describes a parking slot prototype in case of garage parking.
    SI_CoreSlotPrototype garage;
    ///@brief Array of raw parking boxes in a garage parking scenario.
    SI_QuadrilateralSerializableArray rawGpParkingSlots;
    ///@brief Array of detected angular slots.
    SI_QuadrilateralSerializableArray diagonalActual;
    ///@brief Array of initial slots in ego coordinates.
    SI_QuadrilateralSerializableArray positionManagerInitialSlots;
    ///@brief Array of RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray positionManagerRois;
    ///@brief Array of adjusted RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray positionManagerAdjustedRois;
    ///@brief Array of left side RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray blowUpManagerRoiLeft;
    ///@brief Array of left side adjusted RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray blowUpManagerAdjustedRoiLeft;
    ///@brief Array of right side RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray blowUpManagerRoiRight;
    ///@brief Array of right side adjusted RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray blowUpManagerAdjustedRoiRight;
    ///@brief Array of curb side RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray blowUpManagerRoiCurb;
    ///@brief Array of curb side adjusted RoIs in ego coordinates.
    SI_QuadrilateralSerializableArray blowUpManagerAdjustedRoiCurb;
    ///@brief Array containing the optimization results.
    SI_OptimizationResultSerializable collisionManagerResult;
    ///@brief Array containing the slot openings before extension.
    SI_LineSegmentSerializableArray slotOpeningBeforeExtension;
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief ID of the selected parking box.
    uint16 selectedSlot_nu;
    ///@brief The bounding box which is the perimeter of the sensing Region Of Interest.
    SI_QuadrilateralSerializable sensingArea;
    ///@brief Adjusted detection zone for left side scanning.
    SI_QuadrilateralSerializable roiLeft;
    ///@brief Adjusted detection zone for right side scanning.
    SI_QuadrilateralSerializable roiRight;
    ///@brief Adjusted detection zone for front side scanning.
    SI_QuadrilateralSerializable roiFront;
    ///@brief Initial detection zone for left side scanning before adjustment.
    SI_QuadrilateralSerializable roiLeftCore;
    ///@brief Initial detection zone for right side scanning before adjustment.
    SI_QuadrilateralSerializable roiRightCore;
    ///@brief Array of newly detected slot candidates.
    SI_NewDetectedSlotCandidateSerializable newDetectedSlotCandidate;
    ///@range{0,SI.ParkingScenarioTypes.MAX_NUM_PARKING_SCENARIO_TYPES}
    ///@unit{nu}
    ///@brief Type of the last estimated parking scenario.
    SI_ParkingScenarioTypes lastEstimatedScenario_nu;
    SI_ParkingScenarioSideTypes lastEstimatedScenarioSide_nu;
    ///@brief Array containing the IDs of irrelevant objects.
    SI_Uint16Serializable irrelevantObjId;
    ///@brief Array of performance scores of the slots.
    SI_Sint32Serializable scores;
} SI_CorePlotData;

inline SI_CorePlotData create_SI_CorePlotData(void)
{
  SI_CorePlotData m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.pullRects = create_SI_PullCornerRectSerializable();
  m.pullPolys = create_SI_PullCornerPolySerializable();
  m.parkingSlotUpdateRoi = create_SI_QuadrilateralSerializable();
  m.parkingSlotTrackingRoi = create_SI_QuadrilateralSerializable();
  m.perpendicular = create_SI_CoreSlotPrototype();
  m.parallel = create_SI_CoreSlotPrototype();
  m.garage = create_SI_CoreSlotPrototype();
  m.rawGpParkingSlots = create_SI_QuadrilateralSerializableArray();
  m.diagonalActual = create_SI_QuadrilateralSerializableArray();
  m.positionManagerInitialSlots = create_SI_QuadrilateralSerializableArray();
  m.positionManagerRois = create_SI_QuadrilateralSerializableArray();
  m.positionManagerAdjustedRois = create_SI_QuadrilateralSerializableArray();
  m.blowUpManagerRoiLeft = create_SI_QuadrilateralSerializableArray();
  m.blowUpManagerAdjustedRoiLeft = create_SI_QuadrilateralSerializableArray();
  m.blowUpManagerRoiRight = create_SI_QuadrilateralSerializableArray();
  m.blowUpManagerAdjustedRoiRight = create_SI_QuadrilateralSerializableArray();
  m.blowUpManagerRoiCurb = create_SI_QuadrilateralSerializableArray();
  m.blowUpManagerAdjustedRoiCurb = create_SI_QuadrilateralSerializableArray();
  m.collisionManagerResult = create_SI_OptimizationResultSerializable();
  m.slotOpeningBeforeExtension = create_SI_LineSegmentSerializableArray();
  m.selectedSlot_nu = 65535U;
  m.sensingArea = create_SI_QuadrilateralSerializable();
  m.roiLeft = create_SI_QuadrilateralSerializable();
  m.roiRight = create_SI_QuadrilateralSerializable();
  m.roiFront = create_SI_QuadrilateralSerializable();
  m.roiLeftCore = create_SI_QuadrilateralSerializable();
  m.roiRightCore = create_SI_QuadrilateralSerializable();
  m.newDetectedSlotCandidate = create_SI_NewDetectedSlotCandidateSerializable();
  m.lastEstimatedScenario_nu = SI_PARKING_SCENARIO_TYPES_MAX_NUM_PARKING_SCENARIO_TYPES;
  m.lastEstimatedScenarioSide_nu = SI_PARKING_SCENARIO_SIDE_TYPES_MAX_NUM_PARKING_SCENARIO_SIDE_TYPES;
  m.irrelevantObjId = create_SI_Uint16Serializable();
  m.scores = create_SI_Sint32Serializable();
  return m;
}

#endif // SI_CORE_PLOT_DATA_C_H_
