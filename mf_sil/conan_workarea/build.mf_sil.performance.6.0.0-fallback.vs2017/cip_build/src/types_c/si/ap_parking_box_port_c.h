//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef SI_AP_PARKING_BOX_PORT_C_H_
#define SI_AP_PARKING_BOX_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "si/parking_box_serializable_c.h"
#include "si/external_pose_data_c.h"
#include "eco/memset_c.h"

/// None
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///@range{0,MAX_NUM_PARKING_BOXES}
    ///number of valid parking boxes
    uint8 numValidParkingBoxes_nu;
    uint8 numValidExternalPoses;
    ///@unit{nu}
    ///description of potential parking boxes
    SI_ParkingBoxSerializable parkingBoxes[6];
    SI_ExternalPoseData extPoseData[4];
} SI_ApParkingBoxPort;

inline SI_ApParkingBoxPort create_SI_ApParkingBoxPort(void)
{
  SI_ApParkingBoxPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  m.numValidParkingBoxes_nu = 0U;
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.parkingBoxes) / sizeof(m.parkingBoxes[0])); ++i)
    {
      m.parkingBoxes[i] = create_SI_ParkingBoxSerializable();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.extPoseData) / sizeof(m.extPoseData[0])); ++i)
    {
      m.extPoseData[i] = create_SI_ExternalPoseData();
    }
  }
  return m;
}

#endif // SI_AP_PARKING_BOX_PORT_C_H_
