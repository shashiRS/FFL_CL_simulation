//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_TP_TAPOSDDEBUG_PORT_C_H_
#define AP_TP_TAPOSDDEBUG_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "ap_tp/parking_box_debug_info_c.h"
#include "ap_tp/pose_box_dataset_c.h"
#include "Platform_Types.h"
#include "eco/memset_c.h"

/// 
typedef struct
{
    ///@unit{eco.AlgoInterfaceVersionNumber}
    ///
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ///@unit{eco.SignalHeader}
    ///
    ECO_SignalHeader sSigHeader;
    ///@unit{nu}
    ///Debug information of generation of target poses for backwards parking (Index relates to input data parking box index) @min: 0 @max: 0 @unit: nu
    AP_TP_ParkingBoxDebugInfo pbDebugBackwards[6];
    ///@unit{nu}
    ///Debug information of generation of target poses for forwards parking (Index relates to input data parking box index) @min: 0 @max: 0 @unit: nu
    AP_TP_ParkingBoxDebugInfo pbDebugForwards[6];
    ///@unit{nu}
    ///Linking of all Target Poses to their Parking Boxes @min: 0 @max: 0 @unit: nu
    AP_TP_PoseBoxDataset poseBoxDataset;
    ///@range{0,100}
    ///@unit{m}
    ///(only filled at end of last stroke) Lateral distance between vehicle pose and target pose @min: 0 @max: 100 @unit: m
    float32 latDistToTarget_m;
    ///@range{0,100}
    ///@unit{m}
    ///(only filled at end of last stroke) Longitudinal distance between vehicle pose and target pose @min: 0 @max: 100 @unit: m
    float32 longDistToTarget_m;
    ///@range{-3.14,3.14}
    ///@unit{Radian}
    ///(only filled at end of last stroke) Difference in yaw angle between vehicle pose and target pose @min: -3.14 @max: 3.14 @unit: Radian
    float32 yawDiffToTarget_rad;
    ///@unit{nu}
    ///freespace for MTS debug values @min: 0 @max: 0 @unit: nu
    sint32 debugInt[10];
    ///@unit{nu}
    ///freespace for MTS debug values @min: 0 @max: 0 @unit: nu
    float32 debugFloat[10];
} AP_TP_TAPOSDDebugPort;

inline AP_TP_TAPOSDDebugPort create_AP_TP_TAPOSDDebugPort(void)
{
  AP_TP_TAPOSDDebugPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.pbDebugBackwards) / sizeof(m.pbDebugBackwards[0])); ++i)
    {
      m.pbDebugBackwards[i] = create_AP_TP_ParkingBoxDebugInfo();
    }
  }
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.pbDebugForwards) / sizeof(m.pbDebugForwards[0])); ++i)
    {
      m.pbDebugForwards[i] = create_AP_TP_ParkingBoxDebugInfo();
    }
  }
  m.poseBoxDataset = create_AP_TP_PoseBoxDataset();
  return m;
}

#endif // AP_TP_TAPOSDDEBUG_PORT_C_H_
