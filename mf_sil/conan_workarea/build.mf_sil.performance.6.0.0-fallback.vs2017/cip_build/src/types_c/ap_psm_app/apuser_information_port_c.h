//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_PSM_APP_APUSER_INFORMATION_PORT_C_H_
#define AP_PSM_APP_APUSER_INFORMATION_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "ap_psm_app/remote_mode_c.h"
#include "Platform_Types.h"
#include "ap_psm_app/max_speed10_kphwarning_c.h"
#include "ap_common/driving_direction_c.h"
#include "ap_psm_app/garage_parking_c.h"
#include "ap_commonvehsigprovider/gear_c.h"
#include "ap_psm_app/hmimessage_c.h"
#include "ap_psm_app/ppcparking_mode_c.h"
#include "ap_psm_app/apfinish_type_c.h"
#include "ap_psm_app/huintr_pause_condition_c.h"
#include "eco/memset_c.h"

typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///[Optional] Indicates the currently active mode of AP related to remote functionality
    AP_PSM_APP_RemoteMode remoteModeActive_nu;
    ///Indicates, whether the Remote App is active (= is opened and is not breaked down)
    boolean remoteAppActive_nu;
    ///True if the usage of the remote Control is authorized
    boolean remoteAppAuthorized_nu;
    ///Indicates, that the remote control is coded for the current sw
    boolean remoteAppCoded_nu;
    ///True if user selected Remote Key instead of in vehicle parking
    ///True if user selected Remote Key instead of in vehicle parking
    boolean remoteKeySelected_nu;
    ///Indicates, whether Remote Key is possible in the vehicle
    boolean remoteKeyPoss_nu;
    ///Indicates wether it is possible to continue the interrupted maneuver
    boolean continuePoss_nu;
    ///True, if remote maneuvering is possible. (In this case, user can select it via menu of the remote parking app)
    boolean remManPoss_nu;
    ///Indicates wether it is possible to undo the interrupted maneuver
    boolean undoPoss_nu;
    ///True, if the vehicle can stream a surround-view view to the remote parking app
    boolean svPoss_nu;
    ///[for Remote Maneuvering]True, if it is possible to move the ego vehicle in forward direction -> Forward-Button is active in REM_MAN-Screen
    boolean btnForwardPoss_nu;
    ///[for Remote Maneuvering]True, if it is possible to move the ego vehicle in backward direction -> Backward-Button is active in REM_MAN-Screen
    boolean btnBackwardPoss_nu;
    ///[Indicates, if Fully Automated Parking is possible (shows the corespondent button)
    boolean btnFullyAutomParkingPoss_nu;
    ///Indicates, if Semi Automated Parking is possible (shows the corespondent button)
    boolean btnSemiAutomParkingPoss_nu;
    ///Indicates, that a remote garage door opener is available and configured (true, when GARAGE_OPENER_STATUS_NU == GOS_CONFIGURED)
    boolean garageOpenerAvail_nu;
    ///Distance to next stopping point during parking maneuver (could be shown in a filling bar)
    uint8 distanceToStop_perc;
    ///For manual gear box, warning maximum speed limit : 10KPH
    AP_PSM_APP_MaxSpeed10KPHwarning maxSpeed10KPHwarning_nu;
    ///Vehicle direction for the current maneuver part
    AP_COMMON_DrivingDirection drivingDirection_nu;
    ///0: set, when either GARAGE_PARKING_CODED_NU==false or when no garage has been detected
    ///1: set, when a garage scan is active in the front of the vehicle
    ///2: set, when a garage scan is active in the back of the vehicle
    ///3: set, wehen a forward parking out situation has been detected
    ///4: set, when a backward parking out situation has been detected
    ///5: set, when a garage has been detected in the front of the vehicle
    ///6: set, when a garage has been detected in the back of the vehicle
    AP_PSM_APP_GarageParking garageParking_nu;
    ///Current gear of the ego vehicle. This information is displayed in automated vehicle guidance (AVG) mode.
    AP_COMMONVEHSIGPROVIDER_Gear currentGear_nu;
    ///general information for the User. Extended User interface. Currently NOT used. Can be used to get rid of the visualization ports
    AP_PSM_APP_HMIMessage generalUserInformation_nu;
    ///current active parking mode. Extended User interface. Currently NOT used. Can be used to get rid of the visualization ports
    AP_PSM_APP_PPCParkingMode ppcParkingMode_nu;
    ///type of the finish event. Extended User interface. Currently NOT used. Can be used to get rid of the visualization ports
    AP_PSM_APP_APFinishType finishType_nu;
    ///indicates that it is possible to switch the device at the moment (remote to hmi or the other way around)
    boolean switchInputDevPoss_nu;
    ///indicates that it is possible to activate reverse assist function
    boolean reverseAssistPoss_nu;
    ///indicates that it is possible to activate memory parking function
    boolean memoryParkingPoss_nu;
    ///to indicate easy register feature is ready
    boolean mpEasyRegisterAvailable;
    ///indicates any pre conditions for parking failed
    boolean preConditionFailureState;
    ///array of bits that represent which all pre conditions failed
    boolean preConditionFailureReason[15];
    ///This signal Indicates the Pause condition messages
    AP_PSM_APP_HUIntrPauseCondition apaIntrPauseCondition[15];
    ///This signal indicates the number of pause count
    uint8 apaInteractionPauseCount;
    ///This signal Indicates timer for the pause conditions
    uint8 apaInteractionTimer;
} AP_PSM_APP_APUserInformationPort;

inline AP_PSM_APP_APUserInformationPort create_AP_PSM_APP_APUserInformationPort(void)
{
  AP_PSM_APP_APUserInformationPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  return m;
}

#endif // AP_PSM_APP_APUSER_INFORMATION_PORT_C_H_
