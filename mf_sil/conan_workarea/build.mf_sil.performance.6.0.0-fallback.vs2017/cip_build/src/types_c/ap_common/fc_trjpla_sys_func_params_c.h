//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef AP_COMMON_FC_TRJPLA_SYS_FUNC_PARAMS_C_H_
#define AP_COMMON_FC_TRJPLA_SYS_FUNC_PARAMS_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "ap_common/traffic_side_c.h"
#include "eco/memset_c.h"

typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///(L3 AUP Core) Maximum longitudinal deceleration in automated parking mode in situations that requires no emergency stop. Source of value 0.17: Winner - Fahrdynamik
    float32 AP_G_MAX_DECEL_COMFORTABLE_MPS2;
    ///Limitation of absolute curvature step between two trajectory segments (same driving direction). In case of a larger curvature step in the planned trajectory the driving velocity limit will be reduced.
    float32 AP_G_MAX_CURV_STEP_VEL_RED_1PM;
    ///Default minimal distance of ego vehicle to obstacles in final parking position
    float32 AP_G_DIST_MIN_DEFAULT_M;
    ///Minimal distance of ego vehicle to parking box edge without delimiter in final parking position
    float32 AP_G_DIST_MIN_NO_DELIMITER_M;
    ///Minimal distance of ego vehicle to high obstacle on long side of perpendicular parking box in final parking position. Final value should be 0.36 m. Currently (2019-05-10) CEM polygons are inflated a bit.
    float32 AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M;
    ///Comfort distance of ego vehicle to high obstacle on long side of perpendicular parking box in final parking position
    float32 AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M;
    ///Minimal distance of ego vehicle to high obstacle on short side of parking box in final parking position
    float32 AP_G_DIST_MIN_SSIDE_HIGH_OBST_M;
    ///Comfort distance of ego vehicle to high obstacle on front side of parking box in final parking position
    float32 AP_G_DIST_CMF_FRONT_HIGH_OBST_M;
    ///Comfort distance of ego vehicle to high obstacle on rear side of parking box in final parking position
    float32 AP_G_DIST_CMF_REAR_HIGH_OBST_M;
    ///Minimal distance of ego vehicle to door-openable-object on long side of perpendicular parking box in final parking position
    float32 AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M;
    ///Comfort distance of ego vehicle to door-openable-object on long side of perpendicular parking box in final parking position
    float32 AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M;
    ///Minimal distance of ego vehicle to traversable obstacle on long side of perpendicular parking box in final parking position
    float32 AP_G_DIST_MIN_LSIDE_TRAV_PERP_M;
    ///Comfort distance of ego vehicle to traversable obstacle on long side of perpendicular parking box in final parking position
    float32 AP_G_DIST_CMF_LSIDE_TRAV_PERP_M;
    ///Minimal distance of ego vehicle to traversable obstacle on short side of parking box in final parking position
    float32 AP_G_DIST_MIN_SSIDE_TRAV_M;
    ///Comfort distance of ego vehicle to traversable obstacle on front side of parking box in final parking position
    float32 AP_G_DIST_CMF_FRONT_TRAV_M;
    ///Comfort distance of ego vehicle to traversable obstacle on rear side of parking box in final parking position
    float32 AP_G_DIST_CMF_REAR_TRAV_M;
    ///Minimal distance of ego vehicle to descending curbstone on long side of perpendicular parking box in final parking position.
    float32 AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M;
    ///Minimal distance of ego vehicle to descending curbstone on front side parking box in final parking position.
    float32 AP_G_DIST_MIN_FRONT_CURB_DOWN_M;
    ///Minimal distance of ego vehicle to descending curbstone on rear side of parking box in final parking position.
    float32 AP_G_DIST_MIN_REAR_CURB_DOWN_M;
    ///Comfort distance of ego vehicle to descending curbstone on long side of perpendicular parking box in final parking position.
    float32 AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M;
    ///Comfort distance of ego vehicle to descending curbstone on short side of parking box in final parking position.
    float32 AP_G_DIST_CMF_SSIDE_CURB_DOWN_M;
    ///Minimal distance of ego vehicle to lane marker in final parking position.
    float32 AP_G_DIST_MIN_LANE_M;
    ///Comfort distance of ego vehicle to lane marker in final parking position.
    float32 AP_G_DIST_CMF_LANE_M;
    ///Minimal distance of ego vehicle to parking slot marker in final parking position.
    float32 AP_G_DIST_MIN_PARKSLOT_MARKER_M;
    ///Comfort distance of ego vehicle to parking slot marker in final parking position. TODO: Differentiate more here -> Additional parameters necessary
    float32 AP_G_DIST_CMF_PARKSLOT_MARKER_M;
    ///Maximal deviation between ego vehicle position and target position in longitudinal direction that allows successful finish of parking maneuver for
    ///parallel parking slots. Final value should be around 0.1 m. Current value deactivates TAPOSD check.
    float32 AP_G_PAR_MAX_DEVIATION_LONG_M;
    ///Maximal deviation between ego vehicle position and target position in lateral direction that allows successful finish of parking maneuver for perpendicular parking slots
    float32 AP_G_PAR_MAX_DEVIATION_LAT_M;
    ///Maximal deviation between ego vehicle angle and target angle that allows successful finish of parking maneuver for parallel parking slots. (0,05 rad = 3 deg)
    float32 AP_G_PAR_MAX_DEVIATION_ANGL_RAD;
    ///Maximal deviation between ego vehicle position and target position in longitudinal direction that allows successful finish of parking maneuver for perpendicular parking
    ///slots for parallel parking slots. Final value should be around 0.1 m. Current value deactivates TAPOSD check.
    float32 AP_G_PER_MAX_DEVIATION_LONG_M;
    ///Maximal deviation between ego vehicle position and target position in lateral direction that allows successful finish of parking maneuver for perpendicular parking slots
    float32 AP_G_PER_MAX_DEVIATION_LAT_M;
    ///Maximal deviation between ego vehicle angle and target angle that allows successful finish of parking maneuverfor perpendicular parking slots  (0,05 rad = 3 deg)
    float32 AP_G_PER_MAX_DEVIATION_ANGL_RAD;
    ///Traffic side in current country
    AP_COMMON_TrafficSide AP_G_TRAFFIC_SIDE_NU;
    ///Max deviation between average scanning orientation and orientation in the final parking pose for parallel parking
    float32 AP_G_PAR_MAX_ORI_ANGLE_RAD;
    ///In the final parking pose in a perp. Parking slot, the orientation of the ego vehicle shall be in an intervall of [pi -[#PARAM], pi +[#PARAM]) with reference to the average scanning orientation
    float32 AP_G_PERP_MAX_ORI_ANGLE_RAD;
    ///Define if the EM input of the parking function shall be traced or not. It is used for the current state of the software only. Will never be part of any requirement!
    boolean AP_G_FREEZE_AP_EM_INPUT_NU;
    ///Comfort distance of ego vehicle to parking box edge without delimiter in final parking position
    float32 AP_G_DIST_CMF_NO_DELIMITER_M;
    ///Min. distance of the wheels of the ego vehicle shall keep to the curbstone, when the tires are on the level of the road (for parallel parking situations)
    float32 AP_G_WHEEL_DIST_ROAD_LVL_PAR_M;
    ///Min.  distance of the wheels of the ego vehicle shall keep to the curbstone, when the tires are on the level of the curb (for parallel parking situations)
    float32 AP_G_WHEEL_DIST_CURB_LVL_PAR_M;
    ///Min.  distance of the wheels of the ego vehicle shall keep to the curbstone, when the tires are on the level of the road (for perpendicular parking situations)
    float32 AP_G_WHEEL_DIST_ROAD_LVL_PERP_M;
    ///Min. distance of the wheels of the ego vehicle shall keep to the curbstone, when the tires are on the level of the curb(for perpendicular parking situations)
    float32 AP_G_WHEEL_DIST_CURB_LVL_PERP_M;
    ///Min. absolute orientation of the ego vehicle during a parallel parking out maneuver, in case that the parking slot is not delimited by an static obstacle in the front of the vehicle.
    float32 AP_G_PARK_OUT_PAR_MIN_ANG_RAD;
    ///If length of a parking slot minus vehicle length is bigger or equal to this value it is considered as "long".
    float32 AP_G_LONG_SLOT_REL_LENGTH_M;
    ///Max allowed deviation in case of a long parking slot.
    float32 AP_G_MAX_DEVIATION_LONG_SLOT_M;
    ///If width of a pakring slot minus vehicle width is bigger or equal to this value it is considered as "wide".
    float32 AP_G_WIDE_SLOT_REL_WIDTH_M;
    ///Max allowed deviation in case of a wide parking slot.
    float32 AP_G_MAX_DEVIATION_WIDE_SLOT_M;
    ///Minimum distance vehicle shall have to the garage door in final parking pose
    float32 AP_G_DIST_MIN_GP_ENTRANCE_CLR_M;
    ///Comfort distance vehicle shall have to the garage door in final parking pose
    float32 AP_G_DIST_CMF_GP_ENTRANCE_CLR_M;
    ///Comfort distance of ego vehicle to side wall on driver"s side in garage
    float32 AP_G_DIST_CMF_GP_DRIVER_M;
    ///Comfort distance of ego vehicle to side wall on passenger"s side in garage
    float32 AP_G_DIST_CMF_GP_PASSENGER_M;
    ///Maxiumum lateral misaligment of two objects, bordering a parallel parking slot at the first side edge and second side edge.
    float32 AP_G_PAR_MAX_LAT_MISALIGNMENT_M;
    ///Ratio of the longitudinal deviation (i.e., of AP_G_MAX_DEVIATION_LONG_SLOT_M or AP_G_PAR_MAX_DEVIATION_LONG_M) the planner is allowed to use during planning for parallel parking.
    float32 AP_G_PAR_LON_PLAN_DEV_RATIO_NU;
    ///Ratio of the lateral deviation (i.e., of AP_G_PAR_MAX_DEVIATION_LAT_M) the planner is allowed to use during planning for parallel parking.
    float32 AP_G_PAR_LAT_PLAN_DEV_RATIO_NU;
    ///Ratio of the yaw deviation (i.e., of AP_G_PAR_MAX_DEVIATION_ANGL_RAD) the planner is allowed to use during planning for parallel parking.
    float32 AP_G_PAR_YAW_PLAN_DEV_RATIO_NU;
    ///Ratio of the longitudinal deviation (i.e., of AP_G_PER_MAX_DEVIATION_LONG_M) the planner is allowed to use during planning for perpendicular parking.
    float32 AP_G_PER_LON_PLAN_DEV_RATIO_NU;
    ///Ratio of the lateral deviation (i.e., of AP_G_MAX_DEVIATION_WIDE_SLOT_M or AP_G_PER_MAX_DEVIATION_LAT_M) the planner is allowed to use during planning for perpendicular parking.
    float32 AP_G_PER_LAT_PLAN_DEV_RATIO_NU;
    ///Ratio of the yaw deviation (i.e., of AP_G_PER_MAX_DEVIATION_ANGL_RAD) the planner is allowed to use during planning for perpendicular parking.
    float32 AP_G_PER_YAW_PLAN_DEV_RATIO_NU;
    ///Ratio of the lateral deviation (i.e., of AP_T_POUT_PERP_DEV_LAT_M) the planner is allowed to use during planning for perpendicular parking out.
    float32 AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU;
    ///Ratio of the yaw deviation (i.e., of AP_T_POUT_PERP_DEV_YAW_RAD) the planner is allowed to use during planning for perpendicular parking out.
    float32 AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU;
    ///Maxiumum longitudinal misaligment of two objects, bordering a perpendicular slot at the first side edge and second side edge.
    float32 AP_G_PERP_MAX_LONG_MISALIGNMENT_M;
    ///Maxiumum longitudinal misaligment of two objects, bordering a angled parking slot at the first side edge and second side edge.
    float32 AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M;
    ///Minimal distance of ego vehicle to high obstacle on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M;
    ///Comfort distance of ego vehicle to high obstacle on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M;
    ///Minimal distance of ego vehicle to door-openable-object on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M;
    ///Comfort distance of ego vehicle to door-openable-object on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M;
    ///Minimal distance of ego vehicle to traversable obstacle on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_MIN_LSIDE_TRAV_PAR_M;
    ///Comfort distance of ego vehicle to traversable obstacle on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_CMF_LSIDE_TRAV_PAR_M;
    ///Minimal distance of ego vehicle to descending curbstone on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M;
    ///Comfort distance of ego vehicle to descending curbstone on long side of parallel parking box in final parking position.
    float32 AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M;
    ///Fallback distance of ego vehicle to high obstacle on long side of parallel/perp/angled parking box in final parking position.
    float32 AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M;
    ///Fallback distance of ego vehicle to high obstacle on short side of parallel/perp/angled parking box in final parking position.
    float32 AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M;
    ///External shift on target pose to compensate e.g. environment inaccuracies in perp/angled parking.
    float32 AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M;
    ///External shift on target pose to compensate e.g. environment inaccuracies in perp/angled parking.
    float32 AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M;
} AP_COMMON_FC_TRJPLA_Sys_Func_Params;

inline AP_COMMON_FC_TRJPLA_Sys_Func_Params create_AP_COMMON_FC_TRJPLA_Sys_Func_Params(void)
{
  AP_COMMON_FC_TRJPLA_Sys_Func_Params m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  return m;
}

#endif // AP_COMMON_FC_TRJPLA_SYS_FUNC_PARAMS_C_H_
