//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef MF_MEMPARK_RELOCALIZATION_REQUEST_PORT_C_H_
#define MF_MEMPARK_RELOCALIZATION_REQUEST_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "mf_mempark/redetection_request_c.h"
#include "eco/memset_c.h"

/// Request localization
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///indicating the number of valid relocalization requests
    uint8 numValidRequests_nu;
    ///array indicating for which map a relocalization is requested
    MF_MEMPARK_RedetectionRequest requestedRelocalizationSlots[10];
} MF_MEMPARK_RelocalizationRequestPort;

inline MF_MEMPARK_RelocalizationRequestPort create_MF_MEMPARK_RelocalizationRequestPort(void)
{
  MF_MEMPARK_RelocalizationRequestPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.requestedRelocalizationSlots) / sizeof(m.requestedRelocalizationSlots[0])); ++i)
    {
      m.requestedRelocalizationSlots[i] = create_MF_MEMPARK_RedetectionRequest();
    }
  }
  return m;
}

#endif // MF_MEMPARK_RELOCALIZATION_REQUEST_PORT_C_H_
