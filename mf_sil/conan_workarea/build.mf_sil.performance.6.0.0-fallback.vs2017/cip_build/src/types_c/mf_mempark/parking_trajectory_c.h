//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef MF_MEMPARK_PARKING_TRAJECTORY_C_H_
#define MF_MEMPARK_PARKING_TRAJECTORY_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "lsm_geoml/pose_pod_c.h"
#include "mf_mempark/trajectory_point_c.h"
#include "mf_mempark/trajectory_meta_data_c.h"
#include "eco/memset_c.h"

/// Describes the 2D path followed by the vehicle during a parking maneuver.
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    uint8 trajectoryID;
    LSM_GEOML_Pose_POD startPose;
    LSM_GEOML_Pose_POD endPose;
    uint8 numValidTrajPoints;
    MF_MEMPARK_TrajectoryPoint listOfPoints[200];
    uint8 slotID;
    MF_MEMPARK_TrajectoryMetaData metaData;
} MF_MEMPARK_ParkingTrajectory;

inline MF_MEMPARK_ParkingTrajectory create_MF_MEMPARK_ParkingTrajectory(void)
{
  MF_MEMPARK_ParkingTrajectory m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  m.startPose = create_LSM_GEOML_Pose_POD();
  m.endPose = create_LSM_GEOML_Pose_POD();
  {
    uint64 i = 0U;
    for(i = 0U; i < (sizeof(m.listOfPoints) / sizeof(m.listOfPoints[0])); ++i)
    {
      m.listOfPoints[i] = create_MF_MEMPARK_TrajectoryPoint();
    }
  }
  m.metaData = create_MF_MEMPARK_TrajectoryMetaData();
  return m;
}

#endif // MF_MEMPARK_PARKING_TRAJECTORY_C_H_
