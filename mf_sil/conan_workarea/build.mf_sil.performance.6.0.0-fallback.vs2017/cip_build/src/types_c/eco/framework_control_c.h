//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef ECO_FRAMEWORK_CONTROL_C_H_
#define ECO_FRAMEWORK_CONTROL_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "eco/op_mode_c.h"
#include "eco/algo_data_time_stamp_c.h"
#include "eco/comp_op_state_c.h"
#include "Platform_Types.h"
#include "eco/first_last_component_execution_c.h"
#include "eco/memset_c.h"

typedef struct
{
    ///Version number of interface
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ///Signal header with common signal information
    ECO_SignalHeader sSigHeader;
    ///Represents the component execution mode context  which is provided
    ///by the Framework to all components.
    ECO_OpMode opMode;
    ///Represents the time stamp at the begin of the cycle.
    ECO_AlgoDataTimeStamp cemCycleInitTimeStamp;
    ///Represents the time stamp at the end of the cycle.
    ECO_AlgoDataTimeStamp endCycleEstimatedTimeStamp;
    ///Represents the operation state of components updated by
    ///the framework
    ///through shell with return provided by the components.
    ECO_CompOpState opState;
    ///@unit{us}
    ///Represents the execution time, of the last operation mode of components (exec1() .. exec6()).
    ECO_AlgoDataTimeStamp opModeExecTime;
    ///Returned error code by the component
    uint64 errorCode;
    ///Returned functional error codes (range check results) by the component
    uint64 functionalErrorCode[4];
    ///Used for computing the time offset of the recorded data to the windows time. This reports the windows time at the
    ///start of the cycle.
    ECO_AlgoDataTimeStamp windowsCycleStart;
    ///Used for computing the time offset of the recorded data to the windows time. This reports the recorded time at the
    ///start of the cycle without the latency compensation.
    ECO_AlgoDataTimeStamp rawCycleStart;
    ///Used to determine if the execution is the first or last or both execution in the current cycle.
    ECO_FirstLastComponentExecution firstLastExecution;
    ///Used to determine if the system mode is ose mode or not.
    boolean oseMode;
} ECO_FrameworkControl;

inline ECO_FrameworkControl create_ECO_FrameworkControl(void)
{
  ECO_FrameworkControl m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  m.firstLastExecution = create_ECO_FirstLastComponentExecution();
  return m;
}

#endif // ECO_FRAMEWORK_CONTROL_C_H_
