//Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_c\struct.h.template!

#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#define ECO_C_TYPES_USED

#ifndef LSM_VEDODO_ODO_DEBUG_PORT_C_H_
#define LSM_VEDODO_ODO_DEBUG_PORT_C_H_

#include "eco/algo_interface_version_number_c.h"
#include "eco/signal_header_c.h"
#include "Platform_Types.h"
#include "eco/memset_c.h"

/// Debug Signals to be provided for debugging purposes.
typedef struct
{
    ECO_AlgoInterfaceVersionNumber uiVersionNumber;
    ECO_SignalHeader sSigHeader;
    ///@unit{rad}
    ///estimated steering wheel angle offset
    float32 steeringWheelAngleOffset_rad;
    ///@unit{rad}
    ///steer angle with applied estimated offset
    float32 steeringWheelAngleOffsetCalibrated_rad;
    ///@unit{rad/s}
    ///estimated yaw rate offset
    float32 yawRateOffset_radps;
    ///@unit{rad/s}
    ///yaw rate with applied estimated offset
    float32 yawRateOffsetCalibrated_radps;
    ///@unit{m}
    ///estimated distance driven on front axle per loop
    float32 distancePerStepRA_m;
    ///@unit{m}
    ///estimated distance driven on rear axle per loop
    float32 distancePerStepFA_m;
    ///@unit{m}
    ///driven distance on front axle
    float32 distanceFA_m;
    ///@unit{m}
    ///driven distance on rear axle
    float32 distanceRA_m;
    ///@unit{rad}
    ///estimated yaw angle per loop, derived from ackermann model
    float32 yawAnglePerStepAckermann_rad;
    ///@unit{rad}
    ///estimated yaw angle per loop, derived from yaw rate model
    float32 yawAnglePerStepYawRate_rad;
    ///@unit{rad}
    ///estimated yaw angle per loop during standstill steering
    float32 yawAnglePerStepStandstillSteer_rad;
    ///@unit{rad}
    ///estimated yaw angle per loop, derived from difference between left and right wheel distance on front axle
    float32 yawAnglePerStepWhlDistFront_rad;
    ///@unit{rad}
    ///estimated yaw angle per loop, derived from difference between left and right wheel distance on rear axle
    float32 yawAnglePerStepWhlDistRear_rad;
    ///@unit{m/ss}
    ///vehicle acceleration derived from wheel speeds
    float32 odoAccelByWheel_mps2;
    ///@unit{m}
    ///estimated distance made by each wheel
    float32 distancePerStepWheel_m[4];
    ///@unit{nu}
    ///freespace for MTS debug values
    sint32 debugInt[10];
    ///@unit{nu}
    ///freespace for MTS debug values
    float32 debugFloat[10];
    ///@unit{rad}
    ///calculated angle of wheel front left
    float32 steerAngleFL;
    ///@unit{rad}
    ///calculated angle of wheel front right
    float32 steerAngleFR;
    ///@unit{rad}
    ///calculated angle of "virtual" wheel front center.
    float32 steerAngleCTR;
    ///@unit{rad/s}
    ///estimated yaw rate by wheel combination FL RR
    float32 estimYawRateFLRR_radps;
    ///@unit{m/s}
    ///estimated velocity by wheel combination FL RR
    float32 estimVelRearAxleFLRR_mps;
    ///@unit{rad/s}
    ///estimated yaw rate by wheel combination FR RL
    float32 estimYawRateFRRL_radps;
    ///@unit{m/s}
    ///estimated velocity by wheel combination FR RL
    float32 estimVelRearAxleFRRL_mps;
    ///@unit{rad/s}
    ///estimated yaw rate by wheel combination FR RR
    float32 estimYawRateFRRR_radps;
    ///@unit{m/s}
    ///estimated velocity by wheel combination FR RR
    float32 estimVelRearAxleFRRR_mps;
    ///@unit{rad/s}
    ///estimated yaw rate by wheel combination FL RR
    float32 estimYawRateFLFR_radps;
    ///@unit{m/s}
    ///estimated velocity by wheel combination FL RR
    float32 estimVelRearAxleFLFR_mps;
    ///@unit{rad/s}
    ///estimated yaw rate by wheel combination RL RR
    float32 estimYawRateRLRR_radps;
    ///@unit{m/s}
    ///estimated velocity by wheel combination RL RR
    float32 estimVelRearAxleRLRR_mps;
    ///@unit{rad/s}
    ///estimated yaw rate by wheel combination FL RL
    float32 estimYawRateFLRL_radps;
    ///@unit{m/s}
    ///estimated velocity by wheel combination FL RL
    float32 estimVelRearAxleFLRL_mps;
    ///counted wheel tics per loop
    sint8 ticsIncrement_4_nu[4];
    ///determined vehicle driving direction based on gearbox information (-1 reverse, 0 default, 1 forward)
    sint8 drivingDirectionGear_nu;
} LSM_VEDODO_OdoDebugPort;

inline LSM_VEDODO_OdoDebugPort create_LSM_VEDODO_OdoDebugPort(void)
{
  LSM_VEDODO_OdoDebugPort m;
  (void) ECO_memset (&m, 0, sizeof(m));
  m.sSigHeader = create_ECO_SignalHeader();
  return m;
}

#endif // LSM_VEDODO_ODO_DEBUG_PORT_C_H_
