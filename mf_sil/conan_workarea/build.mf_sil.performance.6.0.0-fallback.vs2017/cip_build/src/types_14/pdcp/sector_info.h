// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_14\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP14_TYPES_USED

#ifndef PDCP_SECTOR_INFO_H_
#define PDCP_SECTOR_INFO_H_

#include "Platform_Types.h"
#include "pdcp/criticality_level.h"


namespace pdcp
{

  /// Information for the PDC sectors from the front side (numbering is done from left side towards right side)
  struct SectorInfo
  {
    ///@unit{m}
    ///@range{0,2.55}
    ///Distance between the car contour and the closest static obstacle for this sector
    float32 smallestDistance_m{};
    ///@unit{m}
    ///@range{0,2.55}
    ///Distance between the car contour and the closest dynamic obstacle for this sector
    float32 dynamicSmallestDistance_m{};
    ///@range{0,24}
    ///Sector ID (unique over all sectors)
    uint8 sectorID_nu{};
    ///@range{0,3}
    ///Criticality level for this sector (the higher the criticality, the closer the obstacle is to the car).
    CriticalityLevel criticalityLevel_nu{::pdcp::CriticalityLevel::PDC_CRIT_LVL_OUTSIDE};
    ///Indicates if this sector was scanned (scanned means that PDCP had valid information to calculate the smallestDistance_nu).
    boolean scanned_nu{};
    ///Indicates if the closest point that determines the criticality of this sector intersects the driving tube
    boolean intersectsDrvTube_nu{};
  };

} // namespace pdcp

#endif // PDCP_SECTOR_INFO_H_
