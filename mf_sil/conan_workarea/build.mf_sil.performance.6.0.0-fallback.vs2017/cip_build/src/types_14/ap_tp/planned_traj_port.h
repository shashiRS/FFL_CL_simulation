// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_14\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP14_TYPES_USED

#ifndef AP_TP_PLANNED_TRAJ_PORT_H_
#define AP_TP_PLANNED_TRAJ_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "ap_tp/planned_traj_type.h"
#include "Platform_Types.h"
#include "ap_tp/driving_resistance.h"
#include "ap_tp/planned_traj.h"


namespace ap_tp
{

  /// From TrajectoryPlanning
  struct PlannedTrajPort
  {
    ///@unit{eco.AlgoInterfaceVersionNumber}
    ///
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber{};
    ///@unit{eco.SignalHeader}
    ///
    ::eco::SignalHeader sSigHeader{};
    ///@range{0,7}
    ///The type of the output trajectory (used to trigger certain behavior in controller).
    PlannedTrajType trajType_nu{::ap_tp::PlannedTrajType::MAX_NUM_PLANNED_TRAJ_TYPES};
    ///Define the requested driving direction.
    boolean drivingForwardReq_nu{};
    ///Flag whether the trajectory data is valid.
    boolean trajValid_nu{};
    ///Flag that a new segment (e.g. new stroke) was calculated.
    boolean newSegmentStarted_nu{};
    ///Flag that the current segment is the final segment of the current trajectory
    boolean isLastSegment_nu{};
    ///@range{0,255}
    ///If there is a discontinuity in either x, y or yaw within the trajectory this will indicate the index of the point after which the discontinuity happens
    uint8 stepInTrajAfterIdx_nu{255U};
    ///@unit{nu}
    ///Driving resistance distance and type information per wheel.
    DrivingResistance drivingResistance[4]{};
    ///@range{0,MAX_NUM_TRAJ_CTRL_POINTS}
    ///Number of vali d and unique trajectory points in "plannedTraj". (e.g. if this value is 5 only the first 5 trajectory points inside "plannedTraj" are unique; the 6th,7th,... point would be equal to the 5th point)
    uint8 numValidCtrlPoints_nu{};
    ///@unit{nu}
    ///Calculated Trajectory from the Trajectory Planning with EM based velocity limit.
    PlannedTraj plannedTraj[20]{};
  };

} // namespace ap_tp

#endif // AP_TP_PLANNED_TRAJ_PORT_H_
