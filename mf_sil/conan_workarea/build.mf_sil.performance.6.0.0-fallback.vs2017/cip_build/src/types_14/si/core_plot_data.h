// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_14\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP14_TYPES_USED

#ifndef SI_CORE_PLOT_DATA_H_
#define SI_CORE_PLOT_DATA_H_

#include "si/pull_corner_rect_serializable.h"
#include "si/pull_corner_poly_serializable.h"
#include "si/quadrilateral_serializable.h"
#include "si/core_slot_prototype.h"
#include "si/quadrilateral_serializable_array.h"
#include "si/optimization_result_serializable.h"
#include "si/line_segment_serializable_array.h"
#include "Platform_Types.h"
#include "si/new_detected_slot_candidate_serializable.h"
#include "si/parking_scenario_types.h"
#include "si/parking_scenario_side_types.h"
#include "si/uint16_serializable.h"
#include "si/sint32_serializable.h"


namespace si
{

  /// @brief SI Core Plot Data contains the debug data needed for plotting core features.
  struct CorePlotData
  {
    ///@brief Array of pull corner rectangles.
    PullCornerRectSerializable pullRects{};
    ///@brief Array of pull corner polygons.
    PullCornerPolySerializable pullPolys{};
    ///@brief " TODO: Write the correct brief documentation.
    QuadrilateralSerializable parkingSlotUpdateRoi{};
    ///@brief " TODO: Write the correct brief documentation.
    QuadrilateralSerializable parkingSlotTrackingRoi{};
    ///@brief Describes a parking slot prototype in case of perpendicular parking.
    CoreSlotPrototype perpendicular{};
    ///@brief Describes a parking slot prototype in case of parallel parking.
    CoreSlotPrototype parallel{};
    ///@brief Describes a parking slot prototype in case of garage parking.
    CoreSlotPrototype garage{};
    ///@brief Array of raw parking boxes in a garage parking scenario.
    QuadrilateralSerializableArray rawGpParkingSlots{};
    ///@brief Array of detected angular slots.
    QuadrilateralSerializableArray diagonalActual{};
    ///@brief Array of initial slots in ego coordinates.
    QuadrilateralSerializableArray positionManagerInitialSlots{};
    ///@brief Array of RoIs in ego coordinates.
    QuadrilateralSerializableArray positionManagerRois{};
    ///@brief Array of adjusted RoIs in ego coordinates.
    QuadrilateralSerializableArray positionManagerAdjustedRois{};
    ///@brief Array of left side RoIs in ego coordinates.
    QuadrilateralSerializableArray blowUpManagerRoiLeft{};
    ///@brief Array of left side adjusted RoIs in ego coordinates.
    QuadrilateralSerializableArray blowUpManagerAdjustedRoiLeft{};
    ///@brief Array of right side RoIs in ego coordinates.
    QuadrilateralSerializableArray blowUpManagerRoiRight{};
    ///@brief Array of right side adjusted RoIs in ego coordinates.
    QuadrilateralSerializableArray blowUpManagerAdjustedRoiRight{};
    ///@brief Array of curb side RoIs in ego coordinates.
    QuadrilateralSerializableArray blowUpManagerRoiCurb{};
    ///@brief Array of curb side adjusted RoIs in ego coordinates.
    QuadrilateralSerializableArray blowUpManagerAdjustedRoiCurb{};
    ///@brief Array containing the optimization results.
    OptimizationResultSerializable collisionManagerResult{};
    ///@brief Array containing the slot openings before extension.
    LineSegmentSerializableArray slotOpeningBeforeExtension{};
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief ID of the selected parking box.
    uint16 selectedSlot_nu{65535U};
    ///@brief The bounding box which is the perimeter of the sensing Region Of Interest.
    QuadrilateralSerializable sensingArea{};
    ///@brief Adjusted detection zone for left side scanning.
    QuadrilateralSerializable roiLeft{};
    ///@brief Adjusted detection zone for right side scanning.
    QuadrilateralSerializable roiRight{};
    ///@brief Adjusted detection zone for front side scanning.
    QuadrilateralSerializable roiFront{};
    ///@brief Initial detection zone for left side scanning before adjustment.
    QuadrilateralSerializable roiLeftCore{};
    ///@brief Initial detection zone for right side scanning before adjustment.
    QuadrilateralSerializable roiRightCore{};
    ///@brief Array of newly detected slot candidates.
    NewDetectedSlotCandidateSerializable newDetectedSlotCandidate{};
    ///@range{0,SI.ParkingScenarioTypes.MAX_NUM_PARKING_SCENARIO_TYPES}
    ///@unit{nu}
    ///@brief Type of the last estimated parking scenario.
    ParkingScenarioTypes lastEstimatedScenario_nu{::si::ParkingScenarioTypes::MAX_NUM_PARKING_SCENARIO_TYPES};
    ParkingScenarioSideTypes lastEstimatedScenarioSide_nu{::si::ParkingScenarioSideTypes::MAX_NUM_PARKING_SCENARIO_SIDE_TYPES};
    ///@brief Array containing the IDs of irrelevant objects.
    Uint16Serializable irrelevantObjId{};
    ///@brief Array of performance scores of the slots.
    Sint32Serializable scores{};
  };

} // namespace si

#endif // SI_CORE_PLOT_DATA_H_
