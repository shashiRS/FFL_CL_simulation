// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types_14\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++14 types mixed
  #endif
#endif
#ifdef ECO_CPP_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP14_TYPES_USED

#ifndef SI_SLOT_COST_FUN_DATA_PER_OPT_PHASE_H_
#define SI_SLOT_COST_FUN_DATA_PER_OPT_PHASE_H_

#include "si/quadrilateral_serializable.h"
#include "si/virtual_line_serializable_array.h"
#include "si/virtual_line_index_serializable.h"
#include "Platform_Types.h"


namespace si
{

  struct SlotCostFunDataPerOptPhase
  {
    ///@brief Rectangular left side RoI.
    QuadrilateralSerializable roiLeft{};
    ///@brief Rectangular right side RoI.
    QuadrilateralSerializable roiRight{};
    ///@brief RoI for curb alignment.
    QuadrilateralSerializable roiCurb{};
    ///@brief Array of virtual lines.
    VirtualLineSerializableArray virtualLines{};
    ///@brief Index array for the best virtual lines.
    VirtualLineIndexSerializable bestVLIndices{};
    ///@range{0,90}
    ///@unit{°}
    ///@brief Rotation angle between the parking slot and the curb virtual line.
    float32 curbAlignment_deg{0.0F};
    ///@range{-90° * SI_params.weightCurbOrientation,0}
    ///@unit{nu}
    ///@brief Alignment performance.
    float32 curbAlignmentPerf_nu{0.0F};
    ///@range{0,3.4028237e+38}
    ///@unit{m}
    ///@brief Distance to the closest object from the front left corner of the parking slot.
    float32 closestFL_m{0.0F};
    ///@range{0,3.4028237e+38}
    ///@unit{m}
    ///@brief Distance to the closest object from the front right corner of the parking slot.
    float32 closestFR_m{0.0F};
    ///@range{-3.4028237e+38,3.4028237e+38}
    ///@unit{nu}
    ///@brief Pull performance. Currently only high objects at opening are targeted.
    float32 pullPerformFront_nu{0.0F};
    ///@range{0,3.4028237e+38}
    ///@unit{m}
    ///@brief Size of the parking slot opening.
    float32 opening_m{0.0F};
    ///@range{1.175494e-38,3.4028237e+38}
    ///@unit{nu}
    ///@brief The cost function that can be adjusted to control the slot rotation optimization.
    float32 openingPerf_nu{0.0F};
    ///@range{-90,90}
    ///@unit{°}
    ///@brief Side alignment error in degrees. Rotation angle between the side virtual line and the road normal vector. 0° means perfect alignment while +/-90° means total misalignment or no side object to align to.
    float32 sideAlignmentError_deg{0.0F};
    ///@range{-0.5F * π * SI_params.sideAlignmentWeight_mpr,1.5F * π * SI_params.sideAlignmentWeight_mpr}
    ///@unit{m}
    ///@brief Side alignment performance.
    float32 sideAlignmentPerf_m{0.0F};
    ///@range{-90,90}
    ///@unit{°}
    ///@brief Wing alignment error in degrees. Rotation angle between the wing virtual line and the road side edge. 0° means perfect alignment while +/-90° means total misalignment or no wing object to align to.
    float32 wingAlignmentError_deg{0.0F};
    ///@range{-0.5F * π * SI_params.wingAlignmentWeight_mpr,1.5F * π * SI_params.wingAlignmentWeight_mpr}
    ///@unit{m}
    ///@brief Wing alignment performance.
    float32 wingAlignmentPerf_m{0.0F};
    ///@range{-3.4028237e+38,3.4028237e+38}
    ///@unit{m}
    ///@brief Combined performance based on all cost function components.
    float32 overallPerf_m{0.0F};
  };

} // namespace si

#endif // SI_SLOT_COST_FUN_DATA_PER_OPT_PHASE_H_
