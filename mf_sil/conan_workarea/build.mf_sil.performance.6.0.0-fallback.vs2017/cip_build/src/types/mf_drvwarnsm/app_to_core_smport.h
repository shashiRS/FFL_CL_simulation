// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_DRVWARNSM_APP_TO_CORE_SMPORT_H_
#define MF_DRVWARNSM_APP_TO_CORE_SMPORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "mf_drvwarnsm/request_mode.h"
#include "eco/memset.h"


namespace mf_drvwarnsm
{

  /// Commands from customer dependent state machine(application sm) to drvwarnsm core
  struct AppToCoreSMPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,5}
    ///The PDW request mode to the core state machines
    RequestMode pdwRequestMode_nu;
    ///@range{0,5}
    ///The WHP request mode to the core state machines
    RequestMode whpRequestMode_nu;
  };

  inline ::mf_drvwarnsm::AppToCoreSMPort createAppToCoreSMPort()
  {
    AppToCoreSMPort m;
    (void)::eco::memset(&m, 0U, sizeof(AppToCoreSMPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_drvwarnsm

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_drvwarnsm::AppToCoreSMPort create_default()
  {
      return ::mf_drvwarnsm::createAppToCoreSMPort();
  }
}


#endif // MF_DRVWARNSM_APP_TO_CORE_SMPORT_H_
