// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_TP_TARGET_POSE_H_
#define AP_TP_TARGET_POSE_H_

#include "lsm_geoml/pose_pod.h"
#include "Platform_Types.h"
#include "ap_tp/pose_type.h"
#include "ap_tp/target_side.h"
#include "ap_tp/pose_reachable_status.h"
#include "ap_tp/pose_fail_reason.h"
#include "ap_tp/pose_obstacle_dist.h"
#include "eco/memset.h"


namespace ap_tp
{

  /// 
  struct TargetPose
  {
    ///@unit{nu}
    ///A pose defined by an x and y coordinate as well as a yaw angle @min: 0 @max: 0 @unit: nu
    ::lsm_geoml::Pose_POD pose;
    ///@range{0,255}
    ///@unit{Identifier}
    ///ID of target pose @min: 0 @max: 255 @unit: Identifier
    uint8 pose_ID;
    ///@range{0,65535}
    ///@unit{Identifier}
    ///To each target pose a related parking box ID is assigned. @min: 0 @max: 65535 @unit: Identifier
    uint16 relatedParkingBoxID;
    ///@range{0,21}
    ///@unit{enum PoseType}
    ///Type of target pose @min: 0 @max: 21 @unit: enum PoseType @values: enum { _T_PARALLEL_PARKING=0,_T_PERP_PARKING_FWD=1,_T_PERP_PARKING_BWD=2,_T_ANGLED_PARKING_STANDARD=3,_T_ANGLED_PARKING_REVERSE=4,_T_REM_MAN_FWD=5,_T_REM_MAN_BWD=6,_T_PERP_PARKING_OUT_FWD=7,_T_PERP_PARKING_OUT_BWD=8,_T_PAR_PARKING_OUT=9,_T_ANGLED_PARKING_STANDARD_OUT=10,_T_ANGLED_PARKING_REVERSE_OUT=11,_T_UNDO=12,_T_GP_FWD=13,_T_GP_BWD=14,_T_GP_OUT_FWD=15,_T_GP_OUT_BWD=16,_T_GP_FWD_AXIS=17,_T_GP_BWD_AXIS=18,_T_GP_OUT_FWD_AXIS=19,_T_GP_OUT_BWD_AXIS=20,_T_UNDEFINED=21 }
    PoseType type;
    ///@range{0,8}
    ///@unit{enum TargetSide}
    ///Position of target pose relative to ego vehicle @min: 0 @max: 8 @unit: enum TargetSide @values: enum { _TS_RIGHT_SIDE=0,_TS_LEFT_SIDE=1,_TS_IN_FRONT_RIGHT=2,_TS_IN_FRONT_CENTER=3,_TS_IN_FRONT_LEFT=4,_TS_IN_REAR_RIGHT=5,_TS_IN_REAR_CENTER=6,_TS_IN_REAR_LEFT=7,_TS_UNDEFINED_SIDE=8 }
    TargetSide targetSide;
    ///@range{0,6}
    ///@unit{enum PoseReachableStatus}
    ///Classification of reachability @min: 0 @max: 6 @unit: enum PoseReachableStatus @values: enum { _TP_NOT_VALID=0,_TP_NOT_REACHABLE=1,_TP_FULLY_REACHABLE=2,_TP_SAFE_ZONE_REACHABLE=3,_TP_MANUAL_FWD_REACHABLE=4,_TP_MANUAL_BWD_REACHABLE=5,_MAX_NUM_POSE_REACHABLE_STATUS=6 }
    PoseReachableStatus reachableStatus;
    ///@range{0,7}
    ///@unit{enum PoseFailReason}
    ///Reason to HMI why pose can not be provided @min: 0 @max: 7 @unit: enum PoseFailReason @values: enum { _TAPOSD_PFR_NONE=0,_TAPOSD_PFR_PARKING_BOX_WIDTH_TOO_NARROW=1,_TAPOSD_PFR_PARKING_BOX_LENGTH_TOO_SHORT=2,_TAPOSD_PFR_MAXBOX_EXCEEDED=3,_TAPOSD_PFR_WHEEL_COLLISION=4,_TAPOSD_PFR_HIGH_OBJECT_COLLISION=5,_TAPOSD_PFR_UNKNOWN=6,_MAX_NUM_POSE_FAIL_TYPES=7 }
    PoseFailReason poseFailReason;
    ///Provides the perpendicular distance from the four vehicle sides to the closest obstacles.
    PoseObstacleDist poseObstacleDist;
  };

  inline ::ap_tp::TargetPose createTargetPose()
  {
    TargetPose m;
    (void)::eco::memset(&m, 0U, sizeof(TargetPose));
    m.pose = ::lsm_geoml::createPose_POD();
    m.pose_ID = 255U;
    m.relatedParkingBoxID = 65535U;
    m.type = ::ap_tp::PoseType::T_UNDEFINED;
    m.targetSide = ::ap_tp::TargetSide::TS_UNDEFINED_SIDE;
    m.poseObstacleDist = createPoseObstacleDist();
    return m;
  }

} // namespace ap_tp

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::ap_tp::TargetPose create_default()
  {
      return ::ap_tp::createTargetPose();
  }
}


#endif // AP_TP_TARGET_POSE_H_
