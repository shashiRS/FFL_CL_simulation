// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_TP_FC_TRJPLA_PARAMS_H_
#define AP_TP_FC_TRJPLA_PARAMS_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "ap_tp/fc_taposd_params.h"
#include "ap_common/fc_trjpla_vehicle_params.h"
#include "ap_common/fc_trjpla_sys_func_params.h"
#include "eco/memset.h"


namespace ap_tp
{

  struct FC_TRJPLA_Params
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///maximum distance (in target y-direction) between the target pose and the current pose to update geometric perpendicular path
    float32 AP_P_MAX_DIST_PERP_WO_BCKT_M;
    ///maximum distance (in target x-direction) between the target pose and the current pose to try geometric parallel path
    float32 AP_P_MAX_DIST_PARA_WO_BCKT_M;
    ///used for the first (i.e., actually the very last) move when parking parallely:if there is enough space the vehicle will
    ///go back so far that it would safely pass the front object even if it was going at a minimal radius that was increased by this
    ///amount (effectively increasing the front clearance during the first stroke of parallel perking)
    float32 AP_P_SAFE_PASS_MARGIN_M;
    ///distance at which a virtual obstacle is created (i.e., distance to vehicle shape at target pose on the relevant side)
    float32 AP_P_VIRTUAL_OBJ_DIST_TO_TP_M;
    ///maximum parking velocity used by the trajectory planner when driving forwards
    float32 AP_P_MAX_PARKING_VEL_FWD_MPS;
    ///maximum parking velocity used by the trajectory planner when driving backwards
    float32 AP_P_MAX_PARKING_VEL_BWD_MPS;
    ///the minimum velocity used by the trajectory planner
    float32 AP_P_MIN_PARKING_VEL_MPS;
    ///The safty margin the vehicle will have to the critical point when parking out on the final stroke (with an value of 0.0 the vehicle would touch the obstacle)
    float32 AP_P_PARKOUT_PAR_SAFTEY_DIST_M;
    ///Preferred safety margin between ego vehicle and an object what needs to be passed without colliding at the rear axle. Typically used for perpendicular parking
    ///where the critical collisian point between e.g., the front left edge of the right object is the right end of the ego vehicle"s rear axle.
    float32 AP_P_SAFETY_TURN_RADIUS_AXIS_M;
    ///Extension of first straight path segment at the beginning of the perpendicular parking out maneuver.
    float32 AP_P_POUT_PERP_STRAIGHT_EXT_M;
    ///minimum turn radius of ego vehicle for planning arc-circle
    float32 AP_P_MIN_RADIUS_ADD_CIRCLE_M;
    ///extension for the min turn radius for the final stroke of perpendicular parking in. (Note: Extension is added to AP_P_MIN_TURN_RADIUS_EXTENSION_FOR_CIRCLE_M)
    float32 AP_P_RADIUS_EXT_PERP_FIN_STRO_M;
    ///minimum turn radius of ego vehicle for planning clothoid
    float32 AP_P_MIN_RADIUS_ADD_CLOTHOID_M;
    ///maximum deviation of a common rotation center (base circle of clothoid) having a clothoid-circle-clothoid curve
    float32 AP_P_MAX_DEVIATION_CLOTHOID_M;
    ///maximum number of for-loops for iteratively finding reachable radius on clothoid curve
    uint8 AP_P_MAX_NUM_CLOTHOID_LOOP_NU;
    ///Used for iteratively finding the fastest clothoid segment combination that can be used to replace CircleCircle or CircleStraight segment combinations
    float32 AP_P_CLOTHOID_VEL_TUNE_STEP_MPS;
    ///planner always adds this value when moving on a straight to avoid numerical porblems when detecting collisions
    float32 AP_P_PLAN_DISTANCE_MARGIN_M;
    ///The edge length of the ROI (equal legged L shape)
    float32 AP_P_ROI_EDGE_LENGTH_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking relative to the target pose
    float32 AP_P_ROI_CORNER_X_PAR_IN_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking relative to the target pose
    float32 AP_P_ROI_CORNER_Y_PAR_IN_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking relative to the target pose
    float32 AP_P_ROI_CORNER_X_PRPF_IN_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking relative to the target pose
    float32 AP_P_ROI_CORNER_Y_PRPF_IN_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking relative to the target pose
    float32 AP_P_ROI_CORNER_X_PRPB_IN_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking relative to the target pose
    float32 AP_P_ROI_CORNER_Y_PRPB_IN_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking relative to the target pose
    float32 AP_P_ROI_CORNER_X_ANGS_IN_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking relative to the target pose
    float32 AP_P_ROI_CORNER_Y_ANGS_IN_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking relative to the target pose
    float32 AP_P_ROI_CORNER_X_ANGR_IN_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking relative to the target pose
    float32 AP_P_ROI_CORNER_Y_ANGR_IN_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking out relative to the start pose
    float32 AP_P_ROI_CORNER_X_PAR_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_PAR_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking out relative to the start pose
    float32 AP_P_ROI_CORNER_X_PRPF_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_PRPF_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking out relative to the start pose
    float32 AP_P_ROI_CORNER_X_PRPB_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_PRPB_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking out relative to the start pose
    float32 AP_P_ROI_CORNER_X_ANGS_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_ANGS_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking out relative to the start pose
    float32 AP_P_ROI_CORNER_X_ANGR_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_ANGR_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_X_PAR_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_Y_PAR_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_X_PRPF_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_Y_PRPF_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_X_PRPB_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_Y_PRPB_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_X_ANGS_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_Y_ANGS_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_X_ANGR_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside relative to the target pose
    float32 AP_P_ROI_CORNER_Y_ANGR_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_X_PAR_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_PAR_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_X_PRPB_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_X_PRPF_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_X_ANGS_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_X_ANGR_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside out relative to the start pose
    float32 AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M;
    ///This rate reduces the difference of first stroke turning yaw angle between circle-planner and clothoid-planner in order to avoid the first stroke collision in forward park-in
    float32 AP_P_PRP_FWD_R_SCALE_1ST_STRK_M;
    ///Disables updating the planned path for parking spaces further away then AP_P_MAX_DIST_PERP_WO_BCKT_M or AP_P_MAX_DIST_PARA_WO_BCKT_M
    boolean AP_P_DISABLE_SCAN_GREAT_DIST_NU;
    ///the maximum parking velocity used by the trajectory planner when driving close to an obstacle
    float32 AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS;
    ///The scaling factor for the radius that is sufficient to pass an object with the outermost vertex (i.e., the found radius is multiplied by this value to actually pass the obstacle with a greater safety margin)
    float32 AP_P_OUT_VRTX_RADIUS_SCALING_NU;
    ///Minimum number of successfull path finding calls for a target pose before it is considered valid
    uint16 AP_P_MIN_NUM_VALID_TO_OUTPUT_NU;
    ///Maximum velocity within parallel parking slot (i.e. during back and forth) used by geometric planner
    float32 AP_P_MAX_VEL_IN_PAR_SLOT_MPS;
    ///Disable planner completley (only init and then run proides default outputs)
    boolean AP_P_DISABLE_PLANNER_NU;
    ///Driving distance per sampling step during direct forward planning
    float32 AP_P_DIRECT_FWD_STEP_DIST_M;
    ///Angle tolerance from target pose to try direct forward planning, negative to disable direct forward planning.
    float32 AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG;
    ///maximum number of for-loops for iteratively finding reachable velocity on clothoid curve
    uint8 AP_P_MAX_NUM_CLO_VEL_LOOP_NU;
    ///If 1, save a snapshot of current scene EM in a json file for later analysis
    uint8 AP_P_SAVE_EM_REPLANNING_NU;
    ///Minimum length of start / end clothoid in smooth curve for changing curvature from A to B
    float32 AP_P_ASY_CLO_ST_MIN_LENGTH_M;
    ///Lookuptable x-values (distance) for adaption of velocity to distance to objects
    float32 AP_P_ADAPT_VEL_X_DISTANCE_M[5];
    ///Lookuptable y-values (velocity) for adaption of velocity to distance to objects
    float32 AP_P_ADAPT_VEL_Y_VELOCITY_MPS[5];
    ///Lookuptable size for adaption of velocity to distance to objects
    uint8 AP_P_ADAPT_VEL_SIZE_NU;
    ///Straight distance added to the first stroke perpendicular to avoid the an extra step due to EM slot measurement inaccuracy
    float32 AP_P_STRAIGHT_PERP_EXTRA_DIST_M;
    ///Max number of loops to calculate the angle for the last stroke for parallel parking out
    uint8 AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP;
    ///Maximum senseful radius to align to target axis
    float32 AP_P_MAX_ALIGNMENT_RADIUS_M;
    ///Minimum senseful angle to align to target axis
    float32 AP_P_MIN_ALIGNMENT_ANGLE_RAD;
    ///Planning horizon in Garage Parking / Remote Maneuvering Mode
    float32 AP_P_PLANNING_HORIZON_M;
    ///Distance between neighbouring endPoses of candidate paths in RM Mode
    float32 AP_P_ENDPOSE_NEIGHBOUR_DIST_M;
    ///Desired minimum distance to obstacles in RM mode
    float32 AP_P_DESIRED_DIST_TO_OBST_M;
    ///Factor for determincation in cost function in RM mode
    float32 AP_P_FACTOR_DETERMINATION_NU;
    ///Factor for safety in cost function in RM mode
    float32 AP_P_FACTOR_SAFETY_NU;
    ///max. driving velocity of polynomial paths
    float32 AP_P_MAX_POLY_VEL_MPS;
    ///compensation value for EM flickering, f.e. used for going until collision (EM flickering would lead to collision-check-flickering)
    float32 AP_P_ENV_FLICKERING_COMP_M;
    ///maximum distance between start and end pose (in x-direction) to keep the old path when using the polynomial planner
    float32 AP_P_DIST_START_END_KEEP_PATH_M;
    ///maximum angle between start and endPose of an polynomial segment to consider it as a straight
    float32 AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD;
    ///maximum lenght of the straight preparation stroke in garage parking
    float32 AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M;
    ///minimum lenght of the straight preparation stroke in garage parking
    float32 AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M;
    ///minimum angular difference between a curve extremum and inflection point for polynomial paths
    float32 AP_P_MIN_ANG_DIFF_INFLECTION_RAD;
    ///Enabler for one stroke perpendicular parking
    boolean AP_P_ENABLE_ONE_STROKE_PARKING;
    ///Distance from target pose to intermediate pose in target poses" x-direction
    float32 AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M;
    ///The distance on the last stroke for which a lower velocity shall be used
    float32 AP_P_PERP_END_LIMIT_VEL_DIST_M;
    ///The distance from end to start pose in which we allow to use a symmetric S-curve. For distances larger than this, minPlanRadius is used for planning
    float32 AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M;
    ///A weight value given for the impact of the parallel lateral deviation in the overall deviation score
    float32 AP_P_PERP_FWD_IN_LAT_DEV_FCTR;
    ///A weight value given for the impact of the parallel lateral deviation in the overall deviation score
    float32 AP_P_PERP_FWD_IN_LONG_DEV_FCTR;
    ///A weight value given for the impact of the parallel lateral deviation in the overall deviation score
    float32 AP_P_PERP_FWD_IN_YAW_DEV_FCTR;
    ///A weight value given for the impact of the parallel lateral deviation in the overall deviation score
    float32 AP_P_PERP_BWD_IN_LAT_DEV_FCTR;
    ///A weight value given for the impact of the parallel lateral deviation in the overall deviation score
    float32 AP_P_PERP_BWD_IN_LONG_DEV_FCTR;
    ///A weight value given for the impact of the parallel lateral deviation in the overall deviation score
    float32 AP_P_PERP_BWD_IN_YAW_DEV_FCTR;
    ///If true planner will try to do dynamic replanning, otherwise replanning only at end of strokes.
    boolean AP_P_ENABLE_DYNAMIC_REPLANNING;
    ///Distance to stop where dyn. replanning is not allowed on the 1st scurve of the parallel parking
    float32 AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M;
    ///extending circle length of lower part of s-curve (i.e., the part within the slot) to avoid the collision if scurve out  stroke (used for dyn replynding) has a collision
    float32 AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M;
    ///Number of target pose to be evaluated by the planner
    uint8 AP_P_NUM_TA_POS_EVAL;
    ///Number of pose checks along the driven path to find the best start pose in intial planning(half before/half behind best found pose during scanning)
    uint16 AP_P_NUM_POSE_CHECK_DRVNPATH;
    ///in initial planning we check AP_P_NUM_POSE_CHECK_DRVNPATH samples along the driven path (which is sampled equidistantly with AP_P_SAMPLE_POINT_DISTANCE_M)
    ///to find the optimal planning start pose. This parameter describes that we only want to check every AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU-th of these driven path
    ///samples (i.e., it is a multiplier for the sample distance).
    uint8 AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU;
    ///Distance by which the start pose has to pass the target axis to be considered for perpendicular bwd in planning
    float32 AP_P_MIN_DIST_START_TGTAXIS_M;
    ///Decision threshold for one path better than an other one. Description how close a path is to the target pose. Weighted sum other the lat, long and yaw deviation of path end pose and target pose
    float32 AP_P_BEST_PATH_GOAL_DEV_THR_NU;
    ///Decision threshold for one path better than an other one. Overall path length
    float32 AP_P_BEST_PATH_LENGTH_THR_M;
    ///Decision threshold for one path better than an other one. Time needed for the calculated path
    float32 AP_P_BEST_PATH_TIME_THR_S;
    ///If true planner will do out in strokes in parallel dynamic replanning otherwise planner will subsequently fail and do static replanning
    boolean AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL;
    ///if true planner will do a last call maneuver for perpendicular parking
    boolean AP_P_ENABLE_LAST_CALL_MANEUVER_PERP;
    ///Distance to define the area around the target pose in which the last call maneuver for perp parking is triggered
    float32 AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP;
    ///Maximum distance of ego vehicle to target pose for a s-curve align maneuver
    float32 AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M;
    ///If true planner will allow the driver to stop earlier and try a first stroke fwd maneuver
    boolean AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD;
    ///Desired minimum straight maneuver distance for perpendicular parking
    float32 AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M;
    ///max distance between start pose and intersection with target axis that may be shortened
    ///to have an earlier steering and a steeper angle after the first stroke in first stroke fwd maneuvers
    float32 AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD;
    ///ratio of how much of AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD is shortened, required to have a smooth
    ///planning for different start poses
    float32 AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD;
    ///if true planner tries to early steer and have a steep angle after first stroke in first stroke maneuvers as required for Toyota demo
    boolean AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD;
    ///ratio of how much of the align radius for angled reverse out is added to the min planning radius
    float32 AP_P_RATIO_ADD_MIN_RADIUS_ANGLED;
    ///ratio of how much of the align radius for angled reverse out is added to the align radius; has to be greater than 1
    float32 AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED;
    ///if true planner tries to early steer and have a steep angle after first stroke in first stroke maneuvers as required for Toyota demo
    boolean AP_P_ENABLE_FIRST_STRK_FWD_PAR;
    ///Additional straight for fsf parallel maneuvers, in same direction as s-curve to improve robustness of the fsf.
    float32 AP_P_ADD_STRAIGHT_FSF_M;
    ///Added straight from target pose to wheelstopper for wheel touching feature of MoCo.
    float32 AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M;
    ///Longitudinal distance for the intermediate tapos shifted from the original wheelstopper target pose to allow for approaching the wheelstopper with non rotated wheels
    float32 AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M;
    ///Threshold for the max height of triangle to wrap up the most changeable corner-vertex of vehicle shape, in oder to detect vehicle collision when vehicle passes through a clothoid segment
    float32 AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M;
    ///Distance ratio in a snapshot to avoid collision after calculation of distance to stop of clothoid driving tube
    float32 AP_P_SNAP_RATIO_TO_AVOID_COLL;
    ///Ratio of mvoing ego a short step to build wrap-up trianlge for dominated contour in clothoid drving tube
    float32 AP_P_STEP_MOVING_RATIO_CLO_COLL;
    ///Max. attemps to find wrap-up trianlge for dominated contour in clothoid drving tube
    uint32 AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE;
    ///Indices of key car shape corners to build clothoid driving tube
    uint32 AP_P_KEY_CORNERS_CARBODY[6];
    ///Indices of key wheel shape corners to build clothoid driving tube
    uint32 AP_P_KEY_CORNERS_WHEEL[6];
    ///Longitudinal deviation between intermediate pose and new target pose after s-curve has to be bigger than this value to not add an additional straight after the s-curve for better replanning.
    float32 AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M;
    ///Lateral deviation between intermediate pose and new target pose after s-curve has to be smaller than this value to not add an additional straight after the s-curve for better replanning.
    float32 AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M;
    ///Orientation deviation between intermediate pose and new target pose after s-curve has to be smaller than this value to not add an additional straight after the s-curve for better replanning.
    float32 AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD;
    ///In parallel dynamic replanning, when driving bwd the stroke is extended until collision or if there is no collision until the maximum value set here. This is to get enough space for maneuvering afterwards.
    float32 AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M;
    ///For prepare alignment in fwd direction, the distance to intersection of ego and target is partially driven by a straight if the align radius is bigger than min planning radius, to get a proper preparation of the alignment.
    float32 AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN;
    ///In pre-prepare alignment maneuver, a very first alignment preparation of a rotated target pose axis is done to get a better position for the following alignment preparation.
    ///The rotation angle is calculated by the angle between ego and target with the here given ratio.
    float32 AP_P_RATIO_PRE_PREP_ALIGN_AXIS;
    ///Pre-prepare alignment is done in the first stroke where a bigger maneuver is possible to get a good starting point for preparation of the alignment. Therefore, the radius is enlarged here.
    float32 AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M;
    ///In PERP BWD situations, where a static obstable is opposite to the parking box, we consider the space to be confined if the available space for maneuvering after the first
    ///stroke is less than this percentage of the ego length. If the parking box is considered confined, a starting position with greater maneuvering space is chosen.
    float32 AP_P_RATIO_CONFINED_SPACE;
    ///Angle between start pose and target pose which defines the threshold if the maneuver has a misaligned start pose or not.
    float32 AP_P_MISALIGNED_START_POSE_ANGLE_RAD;
    ///In misaligned start pose maneuvers, a first stroke to a pose parallel to the road side edge of the parking box is planned. This parameter describes the distance of this pose to the parking box.
    float32 AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M;
    ///Length of long transition for clothoidizing
    float32 AP_P_LENGTH_LONG_CLO_TRANSIT_M;
    ///Length of short transition for clothoidizing
    float32 AP_P_LENGTH_SHORT_CLO_TRANSIT_M;
    ///@range{0,1}
    ///@unit{none}
    ///Enable fake objects sorrounding the ego vehicle after ignition cycle until valid EM is available from SI
    boolean AP_P_PARKOUT_ENABLE_FAKE_OBJECTS;
    ///@range{0,unbound}
    ///@unit{m}
    ///Distance between created fake objects (in front and behind ego) and ego vehicle for parallel park out after ignition cycle
    float32 AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M;
    ///@range{0,unbound}
    ///@unit{m}
    ///Distance between created fake objects (in front and behind ego) and ego vehicle for perpendicular park out after ignition cycle
    float32 AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M;
    ///@range{0,unbound}
    ///@unit{m}
    ///Distance between created fake objects (in front and behind ego) and ego vehicle for angular park out after ignition cycle
    float32 AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M;
    ///@range{0,unbound}
    ///@unit{m}
    ///Maximum distance in park out which will be driven without EM information
    float32 AP_P_PARKOUT_BLIND_DISTANCE_PERP_M;
    ///@range{0,unbound}
    ///@unit{m}
    ///Maximum distance in park out which will be driven without EM information
    float32 AP_P_PARKOUT_BLIND_DISTANCE_ANG_M;
    ///@range{0,unbound}
    ///@unit{m}
    ///Maximum distance in park out which will be driven without EM information
    float32 AP_P_PARKOUT_BLIND_DISTANCE_PAR_M;
    ///Nested struct for TAPOSD Params
    FC_TAPOSD_Params taposdParams;
    ///Nested struct for vehicle params section
    ::ap_common::FC_TRJPLA_Vehicle_Params vehicleParams;
    ///Nested struct for sys func params section
    ::ap_common::FC_TRJPLA_Sys_Func_Params sysFuncParams;
    ///The edge length of the ROI (equal legged L shape) for memory parking.
    float32 MP_P_ROI_EDGE_LENGTH_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PAR_IN_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PAR_IN_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPF_IN_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPF_IN_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPB_IN_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPB_IN_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGS_IN_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGS_IN_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGR_IN_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGR_IN_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PAR_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PAR_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPF_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPF_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPB_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPB_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGS_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGS_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGR_OUT_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGR_OUT_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PAR_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PAR_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPF_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPF_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPB_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPB_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGS_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGS_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGR_IN_OP_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside relative to the target pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGR_IN_OP_M;
    ///The corner x-position of the L-Shaped-ROI for parallel parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PAR_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for parallel parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PAR_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPB_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular forward parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_PRPF_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for perpendicular backward parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled standard (forward) parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGS_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for  angled standard (forward) parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M;
    ///The corner x-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_X_ANGR_OUT_OP_M;
    ///The corner y-position of the L-Shaped-ROI for angled reverse (backward) parking on the opposite roadside out relative to the start pose for memory parking.
    float32 MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M;
  };

  inline ::ap_tp::FC_TRJPLA_Params createFC_TRJPLA_Params()
  {
    FC_TRJPLA_Params m;
    (void)::eco::memset(&m, 0U, sizeof(FC_TRJPLA_Params));
    m.sSigHeader = ::eco::createSignalHeader();
    m.taposdParams = createFC_TAPOSD_Params();
    m.vehicleParams = ::ap_common::createFC_TRJPLA_Vehicle_Params();
    m.sysFuncParams = ::ap_common::createFC_TRJPLA_Sys_Func_Params();
    return m;
  }

} // namespace ap_tp

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::ap_tp::FC_TRJPLA_Params create_default()
  {
      return ::ap_tp::createFC_TRJPLA_Params();
  }
}


#endif // AP_TP_FC_TRJPLA_PARAMS_H_
