// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_TP_DRIVING_RESISTANCE_H_
#define AP_TP_DRIVING_RESISTANCE_H_

#include "Platform_Types.h"
#include "ap_tp/driving_resistance_type.h"
#include "eco/memset.h"


namespace ap_tp
{

  /// 
  struct DrivingResistance
  {
    ///@range{0,10}
    ///@unit{m}
    ///Distance to the wheel individual driving resistance based on the movement of the rear axle center. @min: 0 @max: 10 @unit: m
    float32 distance_m;
    ///@range{0,7}
    ///@unit{enum DrivingResistanceType}
    ///Type of the driving resistance. @min: 0 @max: 7 @unit: enum DrivingResistanceType @values: enum { _NONE=0,_FALLING_LOW=1,_FALLING_MEDIUM=2,_FALLING_HIGH=3,_RISING_LOW=4,_RISING_MEDIUM=5,_RISING_HIGH=6,_WHEEL_STOPPER=7 }
    DrivingResistanceType type_nu;
  };

  inline ::ap_tp::DrivingResistance createDrivingResistance()
  {
    DrivingResistance m;
    (void)::eco::memset(&m, 0U, sizeof(DrivingResistance));
    return m;
  }

} // namespace ap_tp

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::ap_tp::DrivingResistance create_default()
  {
      return ::ap_tp::createDrivingResistance();
  }
}


#endif // AP_TP_DRIVING_RESISTANCE_H_
