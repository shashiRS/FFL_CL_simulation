// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_LSCA_CONFIG_GENERAL_T_H_
#define MF_LSCA_CONFIG_GENERAL_T_H_

#include "Platform_Types.h"
#include "cml/vec2_df_pod.h"
#include "eco/memset.h"


namespace mf_lsca
{

  /// Struct that contains all relevant general parameter data
  struct configGeneral_t
  {
    uint32 simpleShapeActualSize_nu;
    ///4-point-shape for dynamic object calculations
    ::cml::Vec2Df_POD simpleShape[4];
    uint32 forwardLeftIndicesActualSize_nu;
    ///Indices of points for forward left motion      #maybe this can be removed, using the bodyIndexLocationInfo?
    uint8 forwardLeftIndices[17];
    uint32 forwardRightIndicesActualSize_nu;
    ///Indices of points for forward right motion     #maybe this can be removed, using the bodyIndexLocationInfo?
    uint8 forwardRightIndices[17];
    uint32 backwardLeftIndicesActualSize_nu;
    ///Indices of points for backward left motion     #maybe this can be removed, using the bodyIndexLocationInfo?
    uint8 backwardLeftIndices[17];
    uint32 backwardRightIndicesActualSize_nu;
    ///Indices of points for backward right motion    #maybe this can be removed, using the bodyIndexLocationInfo?
    uint8 backwardRightIndices[17];
    uint32 bodyIndexLocationFrontActualSize_nu;
    ///Indices of points on the body front
    uint8 bodyIndexLocationFront[2];
    uint32 bodyIndexLocationBackActualSize_nu;
    ///Indices of points on the body back
    uint8 bodyIndexLocationBack[2];
    uint32 bodyIndexLocationLeftActualSize_nu;
    ///Indices of points on the body left
    uint8 bodyIndexLocationLeft[2];
    uint32 bodyIndexLocationRightActualSize_nu;
    ///Indices of points on the body right
    uint8 bodyIndexLocationRight[2];
    uint32 bodyIndexLocationFrontLeftActualSize_nu;
    ///Indices of points on the body left-front corner
    uint8 bodyIndexLocationFrontLeft[2];
    uint32 bodyIndexLocationFrontRightActualSize_nu;
    ///Indices of points on the body right-front corner
    uint8 bodyIndexLocationFrontRight[2];
    uint32 bodyIndexLocationBackLeftActualSize_nu;
    ///Indices of points on the body left-back corner
    uint8 bodyIndexLocationBackLeft[2];
    uint32 bodyIndexLocationBackRightActualSize_nu;
    ///Indices of points on the body right-back corner
    uint8 bodyIndexLocationBackRight[2];
    ///Overall function switch
    boolean LscaActive_nu;
    ///Force lsca off when AP is off
    boolean onlyBackupMode;
    ///Steering proposal switch
    boolean proposalActive_nu;
    ///Steering resistance switch
    boolean resistanceActive_nu;
    ///Static brake switch
    boolean brakeStaticActive_nu;
    ///Dynamic brake switch
    boolean brakeDynamicActive_nu;
    ///Door opening protection switch for static objects
    boolean doorProtectionStatActive_nu;
    ///Door opening protection switch for dynamic objects
    boolean doorProtectionDynActive_nu;
    ///Reverse crossing traffic switch for dynamic objects
    boolean reverseAssistDynActive_nu;
    ///Pmp static switch
    boolean pedalMisapplicationActive_nu;
  };

  inline ::mf_lsca::configGeneral_t createconfigGeneral_t()
  {
    configGeneral_t m;
    (void)::eco::memset(&m, 0U, sizeof(configGeneral_t));
    {
      const uint64 arraysize = (sizeof(m.simpleShape) / sizeof(m.simpleShape[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.simpleShape[i] = ::cml::createVec2Df_POD();
      }
    }
    return m;
  }

} // namespace mf_lsca

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_lsca::configGeneral_t create_default()
  {
      return ::mf_lsca::createconfigGeneral_t();
  }
}


#endif // MF_LSCA_CONFIG_GENERAL_T_H_
