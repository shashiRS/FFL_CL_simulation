// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_LSCA_CONFIG_APPLICATION_FEATURES_T_H_
#define MF_LSCA_CONFIG_APPLICATION_FEATURES_T_H_

#include "Platform_Types.h"
#include "eco/memset.h"


namespace mf_lsca
{

  struct configApplicationFeatures_t
  {
    ///If more than "numberOfPedestriansUntilCrowded_nu" pedestrians (including on bicycle) are in front of the car, treat them as static objects
    boolean treatCrowdedPedestriansAsStatic_nu;
    ///Number of pedestrians (including on bicycle) until all pedestrians are considered static objects (until fewer than this number of pedestrians are detected)
    uint8 numberOfPedestriansUntilCrowded_nu;
    ///Ignore dynamic objects of type "vehicle"
    boolean ignoreDynamicVehicles_nu;
    ///Check if loDMC handshake was successful or not (and disable lsca or put it in error if not)
    boolean checkLoDmcHandshake_nu;
  };

  inline ::mf_lsca::configApplicationFeatures_t createconfigApplicationFeatures_t()
  {
    configApplicationFeatures_t m;
    (void)::eco::memset(&m, 0U, sizeof(configApplicationFeatures_t));
    return m;
  }

} // namespace mf_lsca

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_lsca::configApplicationFeatures_t create_default()
  {
      return ::mf_lsca::createconfigApplicationFeatures_t();
  }
}


#endif // MF_LSCA_CONFIG_APPLICATION_FEATURES_T_H_
