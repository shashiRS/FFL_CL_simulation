// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_LSCA_LSCA_DYNAMIC_OBJECT_PREDICTION_LIST_BRAKE_SERIALIZABLE_H_
#define MF_LSCA_LSCA_DYNAMIC_OBJECT_PREDICTION_LIST_BRAKE_SERIALIZABLE_H_

#include "Platform_Types.h"
#include "mf_lsca/lsca_dynamic_object_prediction_shape_serializable.h"
#include "eco/memset.h"


namespace mf_lsca
{

  /// Collection of dynamic object predictions (RoIs - regions of interest) for debug purposes
  struct LscaDynamicObjectPredictionListBrakeSerializable
  {
    ///Number of object predictions in this list
    uint32 actualSize;
    ///Object predictions in this list
    LscaDynamicObjectPredictionShapeSerializable rois[10];
  };

  inline ::mf_lsca::LscaDynamicObjectPredictionListBrakeSerializable createLscaDynamicObjectPredictionListBrakeSerializable()
  {
    LscaDynamicObjectPredictionListBrakeSerializable m;
    (void)::eco::memset(&m, 0U, sizeof(LscaDynamicObjectPredictionListBrakeSerializable));
    {
      const uint64 arraysize = (sizeof(m.rois) / sizeof(m.rois[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.rois[i] = createLscaDynamicObjectPredictionShapeSerializable();
      }
    }
    return m;
  }

} // namespace mf_lsca

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_lsca::LscaDynamicObjectPredictionListBrakeSerializable create_default()
  {
      return ::mf_lsca::createLscaDynamicObjectPredictionListBrakeSerializable();
  }
}


#endif // MF_LSCA_LSCA_DYNAMIC_OBJECT_PREDICTION_LIST_BRAKE_SERIALIZABLE_H_
