// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef SI_SLOT_DIMENSION_H_
#define SI_SLOT_DIMENSION_H_

#include "Platform_Types.h"
#include "eco/memset.h"


namespace si
{

  /// @brief Structure containing the minimum, typical and maximum of a given dimension.
  struct SlotDimension
  {
    ///@range{0,100}
    ///@unit{m}
    ///@brief Minimum value for the dimension.
    float32 min_m;
    ///@range{0,100}
    ///@unit{m}
    ///@brief Typical value for the dimension.
    float32 typical_m;
    ///@range{0,100}
    ///@unit{m}
    ///@brief Maximum value for the dimension.
    float32 max_m;
  };

  inline ::si::SlotDimension createSlotDimension()
  {
    SlotDimension m;
    (void)::eco::memset(&m, 0U, sizeof(SlotDimension));
    m.min_m = 100.0F;
    m.typical_m = 100.0F;
    m.max_m = 100.0F;
    return m;
  }

} // namespace si

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::si::SlotDimension create_default()
  {
      return ::si::createSlotDimension();
  }
}


#endif // SI_SLOT_DIMENSION_H_
