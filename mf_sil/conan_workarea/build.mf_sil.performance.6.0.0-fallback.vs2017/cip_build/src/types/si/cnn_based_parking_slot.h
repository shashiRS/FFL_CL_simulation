// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef SI_CNN_BASED_PARKING_SLOT_H_
#define SI_CNN_BASED_PARKING_SLOT_H_

#include "Platform_Types.h"
#include "si/quadrilateral_serializable.h"
#include "si/parking_scenario_confidence.h"
#include "eco/memset.h"


namespace si
{

  /// @brief Aggregate structure containing all CNN based parking slot related information.
  struct CnnBasedParkingSlot
  {
    ///@range{0,65535}
    ///@unit{nu}
    ///@brief Defines the ID of the corresponding slot.
    uint16 slotId_nu;
    ///@unit{m}
    ///@brief Describes the shape of the corresponding parking slot.
    QuadrilateralSerializable slotShape_m;
    ///@range{0,100}
    ///@unit{%}
    ///@brief Defines the existence probability of the corresponding slot.
    uint8 existenceProb_perc;
    ///@unit{%}
    ///@brief Defines the confidence in the different types of parking scenarios for the corresponding slot.
    ParkingScenarioConfidence parkingScenarioConfidence_perc;
  };

  inline ::si::CnnBasedParkingSlot createCnnBasedParkingSlot()
  {
    CnnBasedParkingSlot m;
    (void)::eco::memset(&m, 0U, sizeof(CnnBasedParkingSlot));
    m.slotId_nu = 65535U;
    m.slotShape_m = createQuadrilateralSerializable();
    m.existenceProb_perc = 0U;
    m.parkingScenarioConfidence_perc = createParkingScenarioConfidence();
    return m;
  }

} // namespace si

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::si::CnnBasedParkingSlot create_default()
  {
      return ::si::createCnnBasedParkingSlot();
  }
}


#endif // SI_CNN_BASED_PARKING_SLOT_H_
