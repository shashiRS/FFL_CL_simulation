// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_WHLPROTECTPROC_WHPPROC_OUTPUT_PORT_H_
#define MF_WHLPROTECTPROC_WHPPROC_OUTPUT_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "mf_whlprotectproc/whl_warning_level.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace mf_whlprotectproc
{

  /// Signals from Wheel Protection Processing containg the information about wheels warning levels
  struct WHPProcOutputPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,4}
    ///Wheel warning level for each wheel. Positions front left: 0, front right: 1, rear left: 2; rear right: 3, to be defined in an enum.
    WhlWarningLevel whlWarningLevel_nu[4];
    ///true - warnings (any wheel) present; false - warnings (any wheel) not present
    boolean whlWarningPresent_nu;
    ///PDCP error information
    boolean processingError_nu;
  };

  inline ::mf_whlprotectproc::WHPProcOutputPort createWHPProcOutputPort()
  {
    WHPProcOutputPort m;
    (void)::eco::memset(&m, 0U, sizeof(WHPProcOutputPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_whlprotectproc

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_whlprotectproc::WHPProcOutputPort create_default()
  {
      return ::mf_whlprotectproc::createWHPProcOutputPort();
  }
}


#endif // MF_WHLPROTECTPROC_WHPPROC_OUTPUT_PORT_H_
