// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef PDCP_PDCPSECTORS_PORT_H_
#define PDCP_PDCPSECTORS_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "pdcp/sector_info.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace pdcp
{

  /// Signals from PDC Processing containg the information about sectors
  struct PDCPSectorsPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@unit{nu}
    ///Information for the PDC sectors from the front side (numbering is done from left side towards right side)
    SectorInfo sectorsFront[4];
    ///@unit{nu}
    ///Information for the PDC sectors from the rear side (numbering is done from left side towards right side)
    SectorInfo sectorsRear[4];
    ///@unit{nu}
    ///Information for the PDC sectors from the left side (numbering is done from front towards rear)
    SectorInfo sectorsLeft[4];
    ///@unit{nu}
    ///Information for the PDC sectors from the right side (numbering is done from front towards rear)
    SectorInfo sectorsRight[4];
    ///The x coordinates of the inner sectors contour
    float32 PDC_P_SECTOR_INNER_COORDS_X_M[16];
    ///The y coordinates of the inner sectors contour
    float32 PDC_P_SECTOR_INNER_COORDS_Y_M[16];
    ///The x coordinates of the outer sectors contour
    float32 PDC_P_SECTOR_OUTER_COORDS_X_M[16];
    ///The y coordinates of the outer sectors contour
    float32 PDC_P_SECTOR_OUTER_COORDS_Y_M[16];
  };

  inline ::pdcp::PDCPSectorsPort createPDCPSectorsPort()
  {
    PDCPSectorsPort m;
    (void)::eco::memset(&m, 0U, sizeof(PDCPSectorsPort));
    m.sSigHeader = ::eco::createSignalHeader();
    {
      const uint64 arraysize = (sizeof(m.sectorsFront) / sizeof(m.sectorsFront[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sectorsFront[i] = createSectorInfo();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.sectorsRear) / sizeof(m.sectorsRear[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sectorsRear[i] = createSectorInfo();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.sectorsLeft) / sizeof(m.sectorsLeft[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sectorsLeft[i] = createSectorInfo();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.sectorsRight) / sizeof(m.sectorsRight[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sectorsRight[i] = createSectorInfo();
      }
    }
    return m;
  }

} // namespace pdcp

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::pdcp::PDCPSectorsPort create_default()
  {
      return ::pdcp::createPDCPSectorsPort();
  }
}


#endif // PDCP_PDCPSECTORS_PORT_H_
