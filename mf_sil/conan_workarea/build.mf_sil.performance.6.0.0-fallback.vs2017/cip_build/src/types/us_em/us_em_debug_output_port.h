// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_EM_US_EM_DEBUG_OUTPUT_PORT_H_
#define US_EM_US_EM_DEBUG_OUTPUT_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "us_em/us_em_point.h"
#include "us_em/us_em_position.h"
#include "us_em/us_em_dec_data.h"
#include "eco/memset.h"


namespace us_em
{

  struct UsEmDebugOutputPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    uint16 numberOfPoints;
    UsEmPoint usEmPointList[500];
    UsEmPosition vehicleBoundingBoxes[4];
    UsEmDecData decayData[32];
    uint32 cycleCounter;
  };

  inline ::us_em::UsEmDebugOutputPort createUsEmDebugOutputPort()
  {
    UsEmDebugOutputPort m;
    (void)::eco::memset(&m, 0U, sizeof(UsEmDebugOutputPort));
    m.sSigHeader = ::eco::createSignalHeader();
    {
      const uint64 arraysize = (sizeof(m.usEmPointList) / sizeof(m.usEmPointList[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.usEmPointList[i] = createUsEmPoint();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.vehicleBoundingBoxes) / sizeof(m.vehicleBoundingBoxes[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.vehicleBoundingBoxes[i] = createUsEmPosition();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.decayData) / sizeof(m.decayData[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.decayData[i] = createUsEmDecData();
      }
    }
    return m;
  }

} // namespace us_em

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::us_em::UsEmDebugOutputPort create_default()
  {
      return ::us_em::createUsEmDebugOutputPort();
  }
}


#endif // US_EM_US_EM_DEBUG_OUTPUT_PORT_H_
