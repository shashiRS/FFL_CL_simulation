// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_DRV_US_DRV_RUNTIME_CONFIGURATION_H_
#define US_DRV_US_DRV_RUNTIME_CONFIGURATION_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "us_drv/us_drv_sensor_request.h"
#include "us_drv/us_drv_runtime_sensor_configuration.h"
#include "eco/memset.h"


namespace us_drv
{

  struct UsDrvRuntimeConfiguration
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///@range{0,255}
    ///@unit{nu}
    ///Request sequence number
    uint8 sequence;
    ///Request for each sensor
    UsDrvSensorRequest sensorRequests[18];
    ///@range{0,255}
    ///@unit{nu}
    ///Sub state of response
    uint8 responseSubState;
    ///@range{0,US_DRV_MAX_NUM_SENSORS}
    ///@unit{nu}
    ///Number of configurations
    uint8 numConfigurations;
    ///Array of sensor configurations
    UsDrvRuntimeSensorConfiguration sensorConfigurations[18];
  };

  inline ::us_drv::UsDrvRuntimeConfiguration createUsDrvRuntimeConfiguration()
  {
    UsDrvRuntimeConfiguration m;
    (void)::eco::memset(&m, 0U, sizeof(UsDrvRuntimeConfiguration));
    m.sSigHeader = ::eco::createSignalHeader();
    {
      const uint64 arraysize = (sizeof(m.sensorRequests) / sizeof(m.sensorRequests[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sensorRequests[i] = createUsDrvSensorRequest();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.sensorConfigurations) / sizeof(m.sensorConfigurations[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sensorConfigurations[i] = createUsDrvRuntimeSensorConfiguration();
      }
    }
    return m;
  }

} // namespace us_drv

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::us_drv::UsDrvRuntimeConfiguration create_default()
  {
      return ::us_drv::createUsDrvRuntimeConfiguration();
  }
}


#endif // US_DRV_US_DRV_RUNTIME_CONFIGURATION_H_
