// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_DRV_US_DRV_ASIC_ERRORS_H_
#define US_DRV_US_DRV_ASIC_ERRORS_H_

#include "us_drv/us_drv_asic_status_errors.h"
#include "us_drv/us_drv_spi_comm_errors.h"
#include "us_drv/us_drv_dsi_comm_errors.h"
#include "us_drv/us_drv_crm_mode_errors.h"
#include "us_drv/us_drv_pdcm_frame_format_errors.h"
#include "us_drv/us_drv_dsi_packet_errors.h"
#include "eco/memset.h"


namespace us_drv
{

  struct UsDrvAsicErrors
  {
    UsDrvAsicStatusErrors asicStatusErrors;
    UsDrvSpiCommErrors spiCommErrors;
    UsDrvDsiCommErrors dsiCommErrors[2];
    UsDrvCrmModeErrors crmModeErrors[2];
    UsDrvPdcmFrameFormatErrors pdcmFrameFormatErrors[2];
    UsDrvDsiPacketErrors dsiPacketErrors[2];
  };

  inline ::us_drv::UsDrvAsicErrors createUsDrvAsicErrors()
  {
    UsDrvAsicErrors m;
    (void)::eco::memset(&m, 0U, sizeof(UsDrvAsicErrors));
    m.asicStatusErrors = createUsDrvAsicStatusErrors();
    m.spiCommErrors = createUsDrvSpiCommErrors();
    {
      const uint64 arraysize = (sizeof(m.dsiCommErrors) / sizeof(m.dsiCommErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.dsiCommErrors[i] = createUsDrvDsiCommErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.crmModeErrors) / sizeof(m.crmModeErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.crmModeErrors[i] = createUsDrvCrmModeErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.pdcmFrameFormatErrors) / sizeof(m.pdcmFrameFormatErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.pdcmFrameFormatErrors[i] = createUsDrvPdcmFrameFormatErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.dsiPacketErrors) / sizeof(m.dsiPacketErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.dsiPacketErrors[i] = createUsDrvDsiPacketErrors();
      }
    }
    return m;
  }

} // namespace us_drv

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::us_drv::UsDrvAsicErrors create_default()
  {
      return ::us_drv::createUsDrvAsicErrors();
  }
}


#endif // US_DRV_US_DRV_ASIC_ERRORS_H_
