// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MEMPARK_TPSTATUS_H_
#define MF_MEMPARK_TPSTATUS_H_

#include "Platform_Types.h"
#include "mf_mempark/trained_path.h"
#include "mf_mempark/memorized_parking_status.h"
#include "mf_mempark/training_status.h"
#include "mf_mempark/localization_status.h"
#include "eco/memset.h"


namespace mf_mempark
{

  /// The elements for Trained Parking Status
  struct TPStatus
  {
    uint8 numberStoredTrainedParkingPaths;
    TrainedPath trainedPaths[5];
    MemorizedParkingStatus memoryParkingState;
    TrainingStatus trainingStatus;
    LocalizationStatus localizationStatus;
  };

  inline ::mf_mempark::TPStatus createTPStatus()
  {
    TPStatus m;
    (void)::eco::memset(&m, 0U, sizeof(TPStatus));
    {
      const uint64 arraysize = (sizeof(m.trainedPaths) / sizeof(m.trainedPaths[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.trainedPaths[i] = createTrainedPath();
      }
    }
    return m;
  }

} // namespace mf_mempark

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_mempark::TPStatus create_default()
  {
      return ::mf_mempark::createTPStatus();
  }
}


#endif // MF_MEMPARK_TPSTATUS_H_
