// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MEMPARK_MEMORY_PARKING_DATA_REQUEST_PORT_H_
#define MF_MEMPARK_MEMORY_PARKING_DATA_REQUEST_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace mf_mempark
{

  /// The request for an operation issued to the Parameter Handler when map data is ready (event-based triggering).
  struct MemoryParkingDataRequestPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ///The unique identifier map to save.
    uint8 metaMapIdSave;
    ///The Id of the map is valid.
    boolean isValidToSave;
    ///The unique identifier map to load.
    uint8 metaMapIdLoad;
    ///The Id of the map is valid.
    boolean isValidToLoad;
    ///The unique identifier map to delete.
    uint8 metaMapIdDelete;
    ///The Id of the map is valid.
    boolean isValidToDelete;
  };

  inline ::mf_mempark::MemoryParkingDataRequestPort createMemoryParkingDataRequestPort()
  {
    MemoryParkingDataRequestPort m;
    (void)::eco::memset(&m, 0U, sizeof(MemoryParkingDataRequestPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_mempark

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_mempark::MemoryParkingDataRequestPort create_default()
  {
      return ::mf_mempark::createMemoryParkingDataRequestPort();
  }
}


#endif // MF_MEMPARK_MEMORY_PARKING_DATA_REQUEST_PORT_H_
