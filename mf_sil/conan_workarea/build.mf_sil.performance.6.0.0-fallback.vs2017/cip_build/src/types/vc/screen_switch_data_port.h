// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef VC_SCREEN_SWITCH_DATA_PORT_H_
#define VC_SCREEN_SWITCH_DATA_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "ap_hmitoap/screen_types.h"
#include "vc/blind_spot_view_status.h"
#include "Platform_Types.h"
#include "vc/transparency_preset.h"
#include "eco/memset.h"


namespace vc
{

  struct ScreenSwitchDataPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    ::ap_hmitoap::ScreenTypes HmiOutUserActScreenReq_u8;
    BlindSpotViewStatus blindSpotViewType;
    ::ap_hmitoap::ScreenTypes currentViewMode;
    uint8 ClusterScreenResponse_nu_u8;
    boolean deactivateView;
    TransparencyPreset transparencyPreset;
  };

  inline ::vc::ScreenSwitchDataPort createScreenSwitchDataPort()
  {
    ScreenSwitchDataPort m;
    (void)::eco::memset(&m, 0U, sizeof(ScreenSwitchDataPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace vc

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::vc::ScreenSwitchDataPort create_default()
  {
      return ::vc::createScreenSwitchDataPort();
  }
}


#endif // VC_SCREEN_SWITCH_DATA_PORT_H_
