// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MANAGER_LA_CTRL_REQUEST_PORT_H_
#define MF_MANAGER_LA_CTRL_REQUEST_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "mf_manager/la_ctrl_request_type.h"
#include "mf_manager/la_ctrl_request_source.h"
#include "eco/memset.h"


namespace mf_manager
{

  struct LaCtrlRequestPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    boolean activateLaCtrl;
    LaCtrlRequestType laCtrlRequestType;
    float32 steerAngReqFront_rad;
    float32 steerAngReqRear_rad;
    float32 steerTorqueReq_Nm;
    float32 curvatureReq_1pm;
    laCtrlRequestSource laCtrlRequestSource_nu;
  };

  inline ::mf_manager::LaCtrlRequestPort createLaCtrlRequestPort()
  {
    LaCtrlRequestPort m;
    (void)::eco::memset(&m, 0U, sizeof(LaCtrlRequestPort));
    m.sSigHeader = ::eco::createSignalHeader();
    return m;
  }

} // namespace mf_manager

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_manager::LaCtrlRequestPort create_default()
  {
      return ::mf_manager::createLaCtrlRequestPort();
  }
}


#endif // MF_MANAGER_LA_CTRL_REQUEST_PORT_H_
