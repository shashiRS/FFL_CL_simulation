// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_MANAGER_TRAJ_REQUEST_PORT_H_
#define MF_MANAGER_TRAJ_REQUEST_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "mf_manager/mfmplanned_traj.h"
#include "mf_manager/mfmplanned_traj_type.h"
#include "Platform_Types.h"
#include "mf_manager/mfmdriving_resistance.h"
#include "eco/memset.h"


namespace mf_manager
{

  struct TrajRequestPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    MFMPlannedTraj plannedTraj[20];
    MFMPlannedTrajType trajType_nu;
    uint8 numValidCtrlPoints_nu;
    boolean drivingForwardReq_nu;
    boolean trajValid_nu;
    boolean newSegmentStarted_nu;
    boolean isLastSegment_nu;
    uint8 stepInTrajAfterIdx_nu;
    MFMDrivingResistance drivingResistance[4];
  };

  inline ::mf_manager::TrajRequestPort createTrajRequestPort()
  {
    TrajRequestPort m;
    (void)::eco::memset(&m, 0U, sizeof(TrajRequestPort));
    m.sSigHeader = ::eco::createSignalHeader();
    {
      const uint64 arraysize = (sizeof(m.plannedTraj) / sizeof(m.plannedTraj[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.plannedTraj[i] = createMFMPlannedTraj();
      }
    }
    m.trajType_nu = ::mf_manager::MFMPlannedTrajType::MFM_REMOTE_MAN_TRAJ;
    m.stepInTrajAfterIdx_nu = 255U;
    {
      const uint64 arraysize = (sizeof(m.drivingResistance) / sizeof(m.drivingResistance[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.drivingResistance[i] = createMFMDrivingResistance();
      }
    }
    return m;
  }

} // namespace mf_manager

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_manager::TrajRequestPort create_default()
  {
      return ::mf_manager::createTrajRequestPort();
  }
}


#endif // MF_MANAGER_TRAJ_REQUEST_PORT_H_
