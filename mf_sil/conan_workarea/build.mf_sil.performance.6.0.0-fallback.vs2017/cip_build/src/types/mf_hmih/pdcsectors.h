// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef MF_HMIH_PDCSECTORS_H_
#define MF_HMIH_PDCSECTORS_H_

#include "mf_hmih/pdcsector_info.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace mf_hmih
{

  /// Information for the PDC sectors
  struct PDCSectors
  {
    ///@unit{0}
    ///Information for the PDC sectors from the left side (numbering is done from front towards rear)
    PDCSectorInfo left[4];
    ///@unit{0}
    ///Information for the PDC sectors from the right side (numbering is done from front towards rear)
    PDCSectorInfo right[4];
    ///@unit{0}
    ///Information for the PDC sectors from the front (numbering is done from left side towards right side)
    PDCSectorInfo front[4];
    ///@unit{0}
    ///Information for the PDC sectors from the rear (numbering is done from left side towards right side)
    PDCSectorInfo rear[4];
    ///The x coordinates of the inner sectors contour
    float32 PDC_P_SECTOR_INNER_COORDS_X_M[16];
    ///The y coordinates of the inner sectors contour
    float32 PDC_P_SECTOR_INNER_COORDS_Y_M[16];
    ///The x coordinates of the outer sectors contour
    float32 PDC_P_SECTOR_OUTER_COORDS_X_M[16];
    ///The y coordinates of the outer sectors contour
    float32 PDC_P_SECTOR_OUTER_COORDS_Y_M[16];
  };

  inline ::mf_hmih::PDCSectors createPDCSectors()
  {
    PDCSectors m;
    (void)::eco::memset(&m, 0U, sizeof(PDCSectors));
    {
      const uint64 arraysize = (sizeof(m.left) / sizeof(m.left[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.left[i] = createPDCSectorInfo();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.right) / sizeof(m.right[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.right[i] = createPDCSectorInfo();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.front) / sizeof(m.front[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.front[i] = createPDCSectorInfo();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.rear) / sizeof(m.rear[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.rear[i] = createPDCSectorInfo();
      }
    }
    return m;
  }

} // namespace mf_hmih

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::mf_hmih::PDCSectors create_default()
  {
      return ::mf_hmih::createPDCSectors();
  }
}


#endif // MF_HMIH_PDCSECTORS_H_
