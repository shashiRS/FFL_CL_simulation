// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_HMITOAP_SCREEN_TYPES_H_
#define AP_HMITOAP_SCREEN_TYPES_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace ap_hmitoap
{
  /// \cond HIDDEN_ENUMS
  class ScreenTypes
  {
  public:
    typedef uint16 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      BLANK_SCREEN = 0U,
      BOWL_VIEW_1 = 1U,
      BOWL_VIEW_2 = 2U,
      BOWL_VIEW_3 = 3U,
      BOWL_VIEW_4 = 4U,
      BOWL_VIEW_5 = 5U,
      BOWL_VIEW_6 = 6U,
      BOWL_VIEW_7 = 7U,
      BOWL_VIEW_8 = 8U,
      BOWL_VIEW_9 = 9U,
      BOWL_VIEW_10 = 10U,
      BOWL_VIEW_11 = 11U,
      BOWL_VIEW_12 = 12U,
      BOWL_VIEW_13 = 13U,
      BOWL_VIEW_14 = 14U,
      BOWL_VIEW_MODIFIED = 15U,
      FRONT_VIEW_FULL = 16U,
      FRONT_VIEW_SPLIT = 17U,
      PANORAMIC_FRONT_VIEW = 18U,
      BLACK_SCREEN = 19U,
      FRONT_TOP_ZOOM = 20U,
      LAST_FRONT_VIEW = 30U,
      TOP_VIEW = 31U,
      TOP_VIEW_SFM = 32U,
      TOP_VIEW_PSD = 33U,
      TOP_VIEW_PMD = 34U,
      LAST_TOP_VIEW = 45U,
      REAR_VIEW_FULL = 46U,
      REAR_VIEW_SPLIT = 47U,
      PANORAMIC_REAR_VIEW = 48U,
      TRAILER_VIEW = 49U,
      REAR_TOP_ZOOM = 50U,
      LAST_REAR_VIEW = 60U,
      KERB_VIEW_FRONT = 61U,
      KERB_VIEW_REAR = 62U,
      LAST_KERB_VIEW = 75U,
      ARA_REAR_NORMAL = 76U,
      ARA_REAR_IRREGULAR = 77U,
      ARA_PANORAMIC_NORMAL = 78U,
      ARA_PANORAMIC_IRREGULAR = 79U,
      LEFT_VIEW_SPLIT = 80U,
      LEFT_VIEW_FULL = 81U,
      PANORAMIC_LEFT_VIEW = 82U,
      RIGHT_VIEW_SPLIT = 83U,
      RIGHT_VIEW_FULL = 84U,
      PANORAMIC_RIGHT_VIEW = 85U,
      LAST_ARA_VIEW = 90U,
      IPA_FRONT_VIEW = 91U,
      IPA_REAR_VIEW = 92U,
      IPA_TOP_VIEW = 93U,
      PARK_FRONT_VIEW = 94U,
      PARK_REAR_VIEW = 95U,
      PARK_TOP_VIEW = 96U,
      PARK_SPACES_TOP_VIEW = 97U,
      PARK_WARN_TOP_VIEW = 98U,
      PARK_TRANSPARENT_PDW = 99U,
      LAST_IPA_VIEW = 105U,
      MORPH_FRONT = 106U,
      MORPH_FRONT_FULL = 107U,
      LAST_MORPH_FRONT = 120U,
      MORPH_REAR = 121U,
      MORPH_REAR_FULL = 122U,
      MORPH_ARA = 123U,
      LAST_MORPH_VIEW = 135U,
      SMARTPHONE_VIEW = 151U,
      BLIND_SPOT_LEFT = 152U,
      BLIND_SPOT_RIGHT = 153U,
      LAST_SPECIAL_VIEW = 165U,
      TRANSPARENT_HOOD = 166U,
      TRANSPARENT_ALPHA = 167U,
      TRANSPARENT_GHOST = 168U,
      TRANSPARENT_TRUNK = 169U,
      TRANSPARENT_ALPHA_SPLIT = 170U,
      TRANSPARENT_HOOD_SPLIT = 171U,
      TRANSPARENT_TRUNK_SPLIT = 172U,
      ADAPTIVE_FULL_BOWL = 173U,
      STATIC_BOWL = 174U,
      ADAPTIVE_SPLIT_BOWL = 175U,
      STATIC_SPLIT_BOWL = 176U,
      RAW_CAMERAS = 181U,
      RAW_CAMERAS_SFM = 182U,
      DEBUG_FRONT_CAMERA_EXTERN = 200U,
      DEBUG_FRONT_CAMERA_VECTORS = 201U,
      DEBUG_FRONT_CAMERA_EDGES = 202U,
      DEBUG_FRONT_CAMERA_CLEANING = 203U,
      DEBUG_REAR_CAMERA_EXTERN = 204U,
      DEBUG_REAR_CAMERA_VECTORS = 205U,
      DEBUG_REAR_CAMERA_EDGES = 206U,
      DEBUG_REAR_CAMERA_CLEANING = 207U,
      DEBUG_LEFT_CAMERA_EXTERN = 208U,
      DEBUG_LEFT_CAMERA_VECTORS = 209U,
      DEBUG_LEFT_CAMERA_EDGES = 210U,
      DEBUG_LEFT_CAMERA_CLEANING = 211U,
      DEBUG_RIGHT_CAMERA_EXTERN = 212U,
      DEBUG_RIGHT_CAMERA_VECTORS = 213U,
      DEBUG_RIGHT_CAMERA_EDGES = 214U,
      DEBUG_RIGHT_CAMERA_CLEANING = 215U,
      DEBUG_CALIBRATION_FLMC_QUAD_VIEW = 216U,
      DEBUG_CALIBRATION_PGM_QUAD_VIEW = 217U,
      DEBUG_TESTSCREEN_4_CAMS = 218U,
      DEBUG_CALIBRATION_OLMC_QUAD_VIEW = 219U,
      DEBUG_COLOUR_BARS = 220U,
      DEBUG_RAW_CAMERAS = 221U,
      DEBUG_RAW_CAMERAS_SFM = 222U,
      DEBUG_CURB_MESH_DEMO = 223U,
      DEBUG_HEIGHT_MAP = 224U,
      DEBUG_PGM_QUAD_OVERLAY = 225U,
      DEBUG_IMAGE_HARMONIZATION = 226U,
      PARKING_IN_SLOT_SELECTION_VIEW = 227U,
      PARKING_IN_SLOT_CONFIRMATION_VIEW = 228U,
      PARKING_IN_MANEUVER_PHASE_FORWARD_VIEW = 229U,
      PARKING_IN_MANEUVER_PHASE_BACKWARD_VIEW = 230U,
      PARKING_IN_MANEUVER_APPROACH_PHASE_VIEW = 231U,
      PARKING_IN_MANEUVER_APPROACH_WHEELSTOPPER_PHASE_FORWARD_VIEW = 232U,
      PARKING_IN_MANEUVER_APPROACH_WHEELSTOPPER_PHASE_BACKWARD_VIEW = 233U,
      PARKING_OUT_DIRECTION_SELECTION_VIEW = 234U,
      PARKING_OUT_MANEUVER_FORWARD_VIEW = 235U,
      PARKING_OUT_MANEUVER_BACKWARD_VIEW = 236U,
      PARKING_OUT_MANEUVER_FINISH_PHASE_VIEW = 237U,
      NO_STREAM_CHANGE = 255U,
      SIZE = 256U
    };

    ScreenTypes() :
      value(static_cast< underlying_type >(BLANK_SCREEN))
    {
    }

    ScreenTypes(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    ScreenTypes(const ScreenTypes& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END ScreenTypes(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    ScreenTypes& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(ScreenTypes&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    ScreenTypes& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    ScreenTypes& operator=(const ScreenTypes& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(ScreenTypes&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace ap_hmitoap

// PRQA S 2180 --

#endif // AP_HMITOAP_SCREEN_TYPES_H_
