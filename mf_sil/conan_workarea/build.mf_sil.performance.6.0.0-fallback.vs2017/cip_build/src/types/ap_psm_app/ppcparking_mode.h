// Attention, this file is generated by Cobolt from template: D:\.bbs_conan\c029a0\1\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef AP_PSM_APP_PPCPARKING_MODE_H_
#define AP_PSM_APP_PPCPARKING_MODE_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace ap_psm_app
{
  /// \cond HIDDEN_ENUMS
  class PPCParkingMode
  {
  public:
    typedef uint8 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      PARKING_MODE_NOT_VALID = 0U,
      PARK_IN_FULL_MANEUVERING_AREA = 1U,
      PARK_IN_RESTRICTED_MANEUVERING_AREA = 13U,
      PARK_OUT_UNTIL_CRITICAL_POINT_REACHED = 2U,
      PARK_OUT_TO_TARGET_POSE = 14U,
      GARAGE_PARKING_IN = 3U,
      GARAGE_PARKING_OUT = 4U,
      TRAINED_PARKING_TRAIN = 5U,
      TRAINED_PARKING_EXEC = 6U,
      REMOTE_MANEUVERING = 7U,
      MEMORY_PARKING_TRAIN = 8U,
      MEMORY_PARKING_EXEC = 9U,
      UNDO_MANEUVER = 10U,
      REVERSE_ASSIST_ACTIVE = 11U,
      REMOTE_SELF_TEST = 12U
    };

    PPCParkingMode() :
      value(static_cast< underlying_type >(PARKING_MODE_NOT_VALID))
    {
    }

    PPCParkingMode(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    PPCParkingMode(const PPCParkingMode& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END PPCParkingMode(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    PPCParkingMode& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(PPCParkingMode&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    PPCParkingMode& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    PPCParkingMode& operator=(const PPCParkingMode& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(PPCParkingMode&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace ap_psm_app

// PRQA S 2180 --

#endif // AP_PSM_APP_PPCPARKING_MODE_H_
