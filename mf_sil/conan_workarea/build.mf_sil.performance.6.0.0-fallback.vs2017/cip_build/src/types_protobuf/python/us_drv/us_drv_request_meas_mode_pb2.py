# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: us_drv/us_drv_request_meas_mode.proto

from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='us_drv/us_drv_request_meas_mode.proto',
  package='pb.us_drv.us_drv_request_meas_mode',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=b'\n%us_drv/us_drv_request_meas_mode.proto\x12\"pb.us_drv.us_drv_request_meas_mode*p\n\x14UsDrvRequestMeasMode\x12 \n\x1cUS_MEASMODE_NEAR_RANGE_FIELD\x10\x00\x12\x1f\n\x1bUS_MEASMODE_FAR_RANGE_FIELD\x10\x01\x12\x15\n\x11US_MEASMODE_COUNT\x10\x02'
)

_USDRVREQUESTMEASMODE = _descriptor.EnumDescriptor(
  name='UsDrvRequestMeasMode',
  full_name='pb.us_drv.us_drv_request_meas_mode.UsDrvRequestMeasMode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='US_MEASMODE_NEAR_RANGE_FIELD', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='US_MEASMODE_FAR_RANGE_FIELD', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='US_MEASMODE_COUNT', index=2, number=2,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=77,
  serialized_end=189,
)
_sym_db.RegisterEnumDescriptor(_USDRVREQUESTMEASMODE)

UsDrvRequestMeasMode = enum_type_wrapper.EnumTypeWrapper(_USDRVREQUESTMEASMODE)
US_MEASMODE_NEAR_RANGE_FIELD = 0
US_MEASMODE_FAR_RANGE_FIELD = 1
US_MEASMODE_COUNT = 2


DESCRIPTOR.enum_types_by_name['UsDrvRequestMeasMode'] = _USDRVREQUESTMEASMODE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)


# @@protoc_insertion_point(module_scope)
