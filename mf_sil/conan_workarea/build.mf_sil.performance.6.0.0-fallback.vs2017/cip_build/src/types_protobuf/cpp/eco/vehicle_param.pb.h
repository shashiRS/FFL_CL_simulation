// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eco/vehicle_param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eco_2fvehicle_5fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eco_2fvehicle_5fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eco_2fvehicle_5fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eco_2fvehicle_5fparam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eco_2fvehicle_5fparam_2eproto;
namespace pb {
namespace eco {
namespace vehicle_param {
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
class VehicleParam_array_port;
class VehicleParam_array_portDefaultTypeInternal;
extern VehicleParam_array_portDefaultTypeInternal _VehicleParam_array_port_default_instance_;
}  // namespace vehicle_param
}  // namespace eco
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::eco::vehicle_param::VehicleParam* Arena::CreateMaybeMessage<::pb::eco::vehicle_param::VehicleParam>(Arena*);
template<> ::pb::eco::vehicle_param::VehicleParam_array_port* Arena::CreateMaybeMessage<::pb::eco::vehicle_param::VehicleParam_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace eco {
namespace vehicle_param {

// ===================================================================

class VehicleParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.vehicle_param.VehicleParam) */ {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(nullptr);
  }

  VehicleParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.vehicle_param.VehicleParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fvehicle_5fparam_2eproto);
    return ::descriptor_table_eco_2fvehicle_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigHeaderFieldNumber = 1450,
    kOverhangFrontFieldNumber = 212,
    kOverhangRearFieldNumber = 557,
    kAxisLoadDistrFieldNumber = 691,
    kIsCenterOfGravityYAvailableFieldNumber = 1410,
    kIsCenterOfGravityZAvailableFieldNumber = 1101,
    kIsVehicleMassAvailableFieldNumber = 208,
    kIsAxisLoadDistrAvailableFieldNumber = 1370,
    kIsLengthAvailableFieldNumber = 2675,
    kIsWidthAvailableFieldNumber = 3171,
    kLengthFieldNumber = 2010,
    kWheelbaseFieldNumber = 2088,
    kIsWheelbaseAvailableFieldNumber = 1529,
    kIsTrackWidthFrontAvailableFieldNumber = 907,
    kIsTrackWidthRearAvailableFieldNumber = 3278,
    kIsOverhangFrontAvailableFieldNumber = 2659,
    kVehicleMassFieldNumber = 2477,
    kWheelCircumferenceRearFieldNumber = 2794,
    kIsOverhangRearAvailableFieldNumber = 2730,
    kIsWheelCircumferenceFrontAvailableFieldNumber = 3220,
    kIsWheelCircumferenceRearAvailableFieldNumber = 3134,
    kIsCenterOfGravityXAvailableFieldNumber = 2759,
    kWheelCircumferenceFrontFieldNumber = 3113,
    kTrackWidthFrontFieldNumber = 3702,
    kTrackWidthRearFieldNumber = 3727,
    kWidthFieldNumber = 3759,
    kCenterOfGravityZFieldNumber = 3973,
    kCenterOfGravityXFieldNumber = 4039,
    kCenterOfGravityYFieldNumber = 4070,
  };
  // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
  bool has_sigheader() const;
  private:
  bool _internal_has_sigheader() const;
  public:
  void clear_sigheader();
  const ::pb::eco::signal_header::SignalHeader& sigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_sigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_sigheader();
  void set_allocated_sigheader(::pb::eco::signal_header::SignalHeader* sigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_sigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_sigheader();
  public:

  // optional float overhangFront = 212;
  bool has_overhangfront() const;
  private:
  bool _internal_has_overhangfront() const;
  public:
  void clear_overhangfront();
  float overhangfront() const;
  void set_overhangfront(float value);
  private:
  float _internal_overhangfront() const;
  void _internal_set_overhangfront(float value);
  public:

  // optional float overhangRear = 557;
  bool has_overhangrear() const;
  private:
  bool _internal_has_overhangrear() const;
  public:
  void clear_overhangrear();
  float overhangrear() const;
  void set_overhangrear(float value);
  private:
  float _internal_overhangrear() const;
  void _internal_set_overhangrear(float value);
  public:

  // optional float axisLoadDistr = 691;
  bool has_axisloaddistr() const;
  private:
  bool _internal_has_axisloaddistr() const;
  public:
  void clear_axisloaddistr();
  float axisloaddistr() const;
  void set_axisloaddistr(float value);
  private:
  float _internal_axisloaddistr() const;
  void _internal_set_axisloaddistr(float value);
  public:

  // optional bool isCenterOfGravityYAvailable = 1410;
  bool has_iscenterofgravityyavailable() const;
  private:
  bool _internal_has_iscenterofgravityyavailable() const;
  public:
  void clear_iscenterofgravityyavailable();
  bool iscenterofgravityyavailable() const;
  void set_iscenterofgravityyavailable(bool value);
  private:
  bool _internal_iscenterofgravityyavailable() const;
  void _internal_set_iscenterofgravityyavailable(bool value);
  public:

  // optional bool isCenterOfGravityZAvailable = 1101;
  bool has_iscenterofgravityzavailable() const;
  private:
  bool _internal_has_iscenterofgravityzavailable() const;
  public:
  void clear_iscenterofgravityzavailable();
  bool iscenterofgravityzavailable() const;
  void set_iscenterofgravityzavailable(bool value);
  private:
  bool _internal_iscenterofgravityzavailable() const;
  void _internal_set_iscenterofgravityzavailable(bool value);
  public:

  // optional bool isVehicleMassAvailable = 208;
  bool has_isvehiclemassavailable() const;
  private:
  bool _internal_has_isvehiclemassavailable() const;
  public:
  void clear_isvehiclemassavailable();
  bool isvehiclemassavailable() const;
  void set_isvehiclemassavailable(bool value);
  private:
  bool _internal_isvehiclemassavailable() const;
  void _internal_set_isvehiclemassavailable(bool value);
  public:

  // optional bool isAxisLoadDistrAvailable = 1370;
  bool has_isaxisloaddistravailable() const;
  private:
  bool _internal_has_isaxisloaddistravailable() const;
  public:
  void clear_isaxisloaddistravailable();
  bool isaxisloaddistravailable() const;
  void set_isaxisloaddistravailable(bool value);
  private:
  bool _internal_isaxisloaddistravailable() const;
  void _internal_set_isaxisloaddistravailable(bool value);
  public:

  // optional bool isLengthAvailable = 2675;
  bool has_islengthavailable() const;
  private:
  bool _internal_has_islengthavailable() const;
  public:
  void clear_islengthavailable();
  bool islengthavailable() const;
  void set_islengthavailable(bool value);
  private:
  bool _internal_islengthavailable() const;
  void _internal_set_islengthavailable(bool value);
  public:

  // optional bool isWidthAvailable = 3171;
  bool has_iswidthavailable() const;
  private:
  bool _internal_has_iswidthavailable() const;
  public:
  void clear_iswidthavailable();
  bool iswidthavailable() const;
  void set_iswidthavailable(bool value);
  private:
  bool _internal_iswidthavailable() const;
  void _internal_set_iswidthavailable(bool value);
  public:

  // optional float length = 2010;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // optional float wheelbase = 2088;
  bool has_wheelbase() const;
  private:
  bool _internal_has_wheelbase() const;
  public:
  void clear_wheelbase();
  float wheelbase() const;
  void set_wheelbase(float value);
  private:
  float _internal_wheelbase() const;
  void _internal_set_wheelbase(float value);
  public:

  // optional bool isWheelbaseAvailable = 1529;
  bool has_iswheelbaseavailable() const;
  private:
  bool _internal_has_iswheelbaseavailable() const;
  public:
  void clear_iswheelbaseavailable();
  bool iswheelbaseavailable() const;
  void set_iswheelbaseavailable(bool value);
  private:
  bool _internal_iswheelbaseavailable() const;
  void _internal_set_iswheelbaseavailable(bool value);
  public:

  // optional bool isTrackWidthFrontAvailable = 907;
  bool has_istrackwidthfrontavailable() const;
  private:
  bool _internal_has_istrackwidthfrontavailable() const;
  public:
  void clear_istrackwidthfrontavailable();
  bool istrackwidthfrontavailable() const;
  void set_istrackwidthfrontavailable(bool value);
  private:
  bool _internal_istrackwidthfrontavailable() const;
  void _internal_set_istrackwidthfrontavailable(bool value);
  public:

  // optional bool isTrackWidthRearAvailable = 3278;
  bool has_istrackwidthrearavailable() const;
  private:
  bool _internal_has_istrackwidthrearavailable() const;
  public:
  void clear_istrackwidthrearavailable();
  bool istrackwidthrearavailable() const;
  void set_istrackwidthrearavailable(bool value);
  private:
  bool _internal_istrackwidthrearavailable() const;
  void _internal_set_istrackwidthrearavailable(bool value);
  public:

  // optional bool isOverhangFrontAvailable = 2659;
  bool has_isoverhangfrontavailable() const;
  private:
  bool _internal_has_isoverhangfrontavailable() const;
  public:
  void clear_isoverhangfrontavailable();
  bool isoverhangfrontavailable() const;
  void set_isoverhangfrontavailable(bool value);
  private:
  bool _internal_isoverhangfrontavailable() const;
  void _internal_set_isoverhangfrontavailable(bool value);
  public:

  // optional float vehicleMass = 2477;
  bool has_vehiclemass() const;
  private:
  bool _internal_has_vehiclemass() const;
  public:
  void clear_vehiclemass();
  float vehiclemass() const;
  void set_vehiclemass(float value);
  private:
  float _internal_vehiclemass() const;
  void _internal_set_vehiclemass(float value);
  public:

  // optional float wheelCircumferenceRear = 2794;
  bool has_wheelcircumferencerear() const;
  private:
  bool _internal_has_wheelcircumferencerear() const;
  public:
  void clear_wheelcircumferencerear();
  float wheelcircumferencerear() const;
  void set_wheelcircumferencerear(float value);
  private:
  float _internal_wheelcircumferencerear() const;
  void _internal_set_wheelcircumferencerear(float value);
  public:

  // optional bool isOverhangRearAvailable = 2730;
  bool has_isoverhangrearavailable() const;
  private:
  bool _internal_has_isoverhangrearavailable() const;
  public:
  void clear_isoverhangrearavailable();
  bool isoverhangrearavailable() const;
  void set_isoverhangrearavailable(bool value);
  private:
  bool _internal_isoverhangrearavailable() const;
  void _internal_set_isoverhangrearavailable(bool value);
  public:

  // optional bool isWheelCircumferenceFrontAvailable = 3220;
  bool has_iswheelcircumferencefrontavailable() const;
  private:
  bool _internal_has_iswheelcircumferencefrontavailable() const;
  public:
  void clear_iswheelcircumferencefrontavailable();
  bool iswheelcircumferencefrontavailable() const;
  void set_iswheelcircumferencefrontavailable(bool value);
  private:
  bool _internal_iswheelcircumferencefrontavailable() const;
  void _internal_set_iswheelcircumferencefrontavailable(bool value);
  public:

  // optional bool isWheelCircumferenceRearAvailable = 3134;
  bool has_iswheelcircumferencerearavailable() const;
  private:
  bool _internal_has_iswheelcircumferencerearavailable() const;
  public:
  void clear_iswheelcircumferencerearavailable();
  bool iswheelcircumferencerearavailable() const;
  void set_iswheelcircumferencerearavailable(bool value);
  private:
  bool _internal_iswheelcircumferencerearavailable() const;
  void _internal_set_iswheelcircumferencerearavailable(bool value);
  public:

  // optional bool isCenterOfGravityXAvailable = 2759;
  bool has_iscenterofgravityxavailable() const;
  private:
  bool _internal_has_iscenterofgravityxavailable() const;
  public:
  void clear_iscenterofgravityxavailable();
  bool iscenterofgravityxavailable() const;
  void set_iscenterofgravityxavailable(bool value);
  private:
  bool _internal_iscenterofgravityxavailable() const;
  void _internal_set_iscenterofgravityxavailable(bool value);
  public:

  // optional float wheelCircumferenceFront = 3113;
  bool has_wheelcircumferencefront() const;
  private:
  bool _internal_has_wheelcircumferencefront() const;
  public:
  void clear_wheelcircumferencefront();
  float wheelcircumferencefront() const;
  void set_wheelcircumferencefront(float value);
  private:
  float _internal_wheelcircumferencefront() const;
  void _internal_set_wheelcircumferencefront(float value);
  public:

  // optional float trackWidthFront = 3702;
  bool has_trackwidthfront() const;
  private:
  bool _internal_has_trackwidthfront() const;
  public:
  void clear_trackwidthfront();
  float trackwidthfront() const;
  void set_trackwidthfront(float value);
  private:
  float _internal_trackwidthfront() const;
  void _internal_set_trackwidthfront(float value);
  public:

  // optional float trackWidthRear = 3727;
  bool has_trackwidthrear() const;
  private:
  bool _internal_has_trackwidthrear() const;
  public:
  void clear_trackwidthrear();
  float trackwidthrear() const;
  void set_trackwidthrear(float value);
  private:
  float _internal_trackwidthrear() const;
  void _internal_set_trackwidthrear(float value);
  public:

  // optional float width = 3759;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // optional float centerOfGravityZ = 3973;
  bool has_centerofgravityz() const;
  private:
  bool _internal_has_centerofgravityz() const;
  public:
  void clear_centerofgravityz();
  float centerofgravityz() const;
  void set_centerofgravityz(float value);
  private:
  float _internal_centerofgravityz() const;
  void _internal_set_centerofgravityz(float value);
  public:

  // optional float centerOfGravityX = 4039;
  bool has_centerofgravityx() const;
  private:
  bool _internal_has_centerofgravityx() const;
  public:
  void clear_centerofgravityx();
  float centerofgravityx() const;
  void set_centerofgravityx(float value);
  private:
  float _internal_centerofgravityx() const;
  void _internal_set_centerofgravityx(float value);
  public:

  // optional float centerOfGravityY = 4070;
  bool has_centerofgravityy() const;
  private:
  bool _internal_has_centerofgravityy() const;
  public:
  void clear_centerofgravityy();
  float centerofgravityy() const;
  void set_centerofgravityy(float value);
  private:
  float _internal_centerofgravityy() const;
  void _internal_set_centerofgravityy(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.eco.vehicle_param.VehicleParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* sigheader_;
  float overhangfront_;
  float overhangrear_;
  float axisloaddistr_;
  bool iscenterofgravityyavailable_;
  bool iscenterofgravityzavailable_;
  bool isvehiclemassavailable_;
  bool isaxisloaddistravailable_;
  bool islengthavailable_;
  bool iswidthavailable_;
  float length_;
  float wheelbase_;
  bool iswheelbaseavailable_;
  bool istrackwidthfrontavailable_;
  bool istrackwidthrearavailable_;
  bool isoverhangfrontavailable_;
  float vehiclemass_;
  float wheelcircumferencerear_;
  bool isoverhangrearavailable_;
  bool iswheelcircumferencefrontavailable_;
  bool iswheelcircumferencerearavailable_;
  bool iscenterofgravityxavailable_;
  float wheelcircumferencefront_;
  float trackwidthfront_;
  float trackwidthrear_;
  float width_;
  float centerofgravityz_;
  float centerofgravityx_;
  float centerofgravityy_;
  friend struct ::TableStruct_eco_2fvehicle_5fparam_2eproto;
};
// -------------------------------------------------------------------

class VehicleParam_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.vehicle_param.VehicleParam_array_port) */ {
 public:
  VehicleParam_array_port();
  virtual ~VehicleParam_array_port();

  VehicleParam_array_port(const VehicleParam_array_port& from);
  VehicleParam_array_port(VehicleParam_array_port&& from) noexcept
    : VehicleParam_array_port() {
    *this = ::std::move(from);
  }

  inline VehicleParam_array_port& operator=(const VehicleParam_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleParam_array_port& operator=(VehicleParam_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleParam_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam_array_port* internal_default_instance() {
    return reinterpret_cast<const VehicleParam_array_port*>(
               &_VehicleParam_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleParam_array_port& a, VehicleParam_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleParam_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam_array_port* New() const final {
    return CreateMaybeMessage<VehicleParam_array_port>(nullptr);
  }

  VehicleParam_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleParam_array_port& from);
  void MergeFrom(const VehicleParam_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.vehicle_param.VehicleParam_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fvehicle_5fparam_2eproto);
    return ::descriptor_table_eco_2fvehicle_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3174,
  };
  // repeated .pb.eco.vehicle_param.VehicleParam data = 3174;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::eco::vehicle_param::VehicleParam* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::vehicle_param::VehicleParam >*
      mutable_data();
  private:
  const ::pb::eco::vehicle_param::VehicleParam& _internal_data(int index) const;
  ::pb::eco::vehicle_param::VehicleParam* _internal_add_data();
  public:
  const ::pb::eco::vehicle_param::VehicleParam& data(int index) const;
  ::pb::eco::vehicle_param::VehicleParam* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::vehicle_param::VehicleParam >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.eco.vehicle_param.VehicleParam_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::vehicle_param::VehicleParam > data_;
  friend struct ::TableStruct_eco_2fvehicle_5fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleParam

// optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
inline bool VehicleParam::_internal_has_sigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sigheader_ != nullptr);
  return value;
}
inline bool VehicleParam::has_sigheader() const {
  return _internal_has_sigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& VehicleParam::_internal_sigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = sigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& VehicleParam::sigheader() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.sigHeader)
  return _internal_sigheader();
}
inline ::pb::eco::signal_header::SignalHeader* VehicleParam::release_sigheader() {
  // @@protoc_insertion_point(field_release:pb.eco.vehicle_param.VehicleParam.sigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = sigheader_;
  sigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* VehicleParam::_internal_mutable_sigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (sigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    sigheader_ = p;
  }
  return sigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* VehicleParam::mutable_sigheader() {
  // @@protoc_insertion_point(field_mutable:pb.eco.vehicle_param.VehicleParam.sigHeader)
  return _internal_mutable_sigheader();
}
inline void VehicleParam::set_allocated_sigheader(::pb::eco::signal_header::SignalHeader* sigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigheader_);
  }
  if (sigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sigheader_ = sigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.eco.vehicle_param.VehicleParam.sigHeader)
}

// optional float vehicleMass = 2477;
inline bool VehicleParam::_internal_has_vehiclemass() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool VehicleParam::has_vehiclemass() const {
  return _internal_has_vehiclemass();
}
inline void VehicleParam::clear_vehiclemass() {
  vehiclemass_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float VehicleParam::_internal_vehiclemass() const {
  return vehiclemass_;
}
inline float VehicleParam::vehiclemass() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.vehicleMass)
  return _internal_vehiclemass();
}
inline void VehicleParam::_internal_set_vehiclemass(float value) {
  _has_bits_[0] |= 0x00010000u;
  vehiclemass_ = value;
}
inline void VehicleParam::set_vehiclemass(float value) {
  _internal_set_vehiclemass(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.vehicleMass)
}

// optional float axisLoadDistr = 691;
inline bool VehicleParam::_internal_has_axisloaddistr() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleParam::has_axisloaddistr() const {
  return _internal_has_axisloaddistr();
}
inline void VehicleParam::clear_axisloaddistr() {
  axisloaddistr_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float VehicleParam::_internal_axisloaddistr() const {
  return axisloaddistr_;
}
inline float VehicleParam::axisloaddistr() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.axisLoadDistr)
  return _internal_axisloaddistr();
}
inline void VehicleParam::_internal_set_axisloaddistr(float value) {
  _has_bits_[0] |= 0x00000008u;
  axisloaddistr_ = value;
}
inline void VehicleParam::set_axisloaddistr(float value) {
  _internal_set_axisloaddistr(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.axisLoadDistr)
}

// optional float length = 2010;
inline bool VehicleParam::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VehicleParam::has_length() const {
  return _internal_has_length();
}
inline void VehicleParam::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float VehicleParam::_internal_length() const {
  return length_;
}
inline float VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.length)
  return _internal_length();
}
inline void VehicleParam::_internal_set_length(float value) {
  _has_bits_[0] |= 0x00000400u;
  length_ = value;
}
inline void VehicleParam::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.length)
}

// optional float width = 3759;
inline bool VehicleParam::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool VehicleParam::has_width() const {
  return _internal_has_width();
}
inline void VehicleParam::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float VehicleParam::_internal_width() const {
  return width_;
}
inline float VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.width)
  return _internal_width();
}
inline void VehicleParam::_internal_set_width(float value) {
  _has_bits_[0] |= 0x02000000u;
  width_ = value;
}
inline void VehicleParam::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.width)
}

// optional float wheelbase = 2088;
inline bool VehicleParam::_internal_has_wheelbase() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VehicleParam::has_wheelbase() const {
  return _internal_has_wheelbase();
}
inline void VehicleParam::clear_wheelbase() {
  wheelbase_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float VehicleParam::_internal_wheelbase() const {
  return wheelbase_;
}
inline float VehicleParam::wheelbase() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.wheelbase)
  return _internal_wheelbase();
}
inline void VehicleParam::_internal_set_wheelbase(float value) {
  _has_bits_[0] |= 0x00000800u;
  wheelbase_ = value;
}
inline void VehicleParam::set_wheelbase(float value) {
  _internal_set_wheelbase(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.wheelbase)
}

// optional float trackWidthFront = 3702;
inline bool VehicleParam::_internal_has_trackwidthfront() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool VehicleParam::has_trackwidthfront() const {
  return _internal_has_trackwidthfront();
}
inline void VehicleParam::clear_trackwidthfront() {
  trackwidthfront_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float VehicleParam::_internal_trackwidthfront() const {
  return trackwidthfront_;
}
inline float VehicleParam::trackwidthfront() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.trackWidthFront)
  return _internal_trackwidthfront();
}
inline void VehicleParam::_internal_set_trackwidthfront(float value) {
  _has_bits_[0] |= 0x00800000u;
  trackwidthfront_ = value;
}
inline void VehicleParam::set_trackwidthfront(float value) {
  _internal_set_trackwidthfront(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.trackWidthFront)
}

// optional float trackWidthRear = 3727;
inline bool VehicleParam::_internal_has_trackwidthrear() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool VehicleParam::has_trackwidthrear() const {
  return _internal_has_trackwidthrear();
}
inline void VehicleParam::clear_trackwidthrear() {
  trackwidthrear_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float VehicleParam::_internal_trackwidthrear() const {
  return trackwidthrear_;
}
inline float VehicleParam::trackwidthrear() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.trackWidthRear)
  return _internal_trackwidthrear();
}
inline void VehicleParam::_internal_set_trackwidthrear(float value) {
  _has_bits_[0] |= 0x01000000u;
  trackwidthrear_ = value;
}
inline void VehicleParam::set_trackwidthrear(float value) {
  _internal_set_trackwidthrear(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.trackWidthRear)
}

// optional float overhangFront = 212;
inline bool VehicleParam::_internal_has_overhangfront() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleParam::has_overhangfront() const {
  return _internal_has_overhangfront();
}
inline void VehicleParam::clear_overhangfront() {
  overhangfront_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float VehicleParam::_internal_overhangfront() const {
  return overhangfront_;
}
inline float VehicleParam::overhangfront() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.overhangFront)
  return _internal_overhangfront();
}
inline void VehicleParam::_internal_set_overhangfront(float value) {
  _has_bits_[0] |= 0x00000002u;
  overhangfront_ = value;
}
inline void VehicleParam::set_overhangfront(float value) {
  _internal_set_overhangfront(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.overhangFront)
}

// optional float overhangRear = 557;
inline bool VehicleParam::_internal_has_overhangrear() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleParam::has_overhangrear() const {
  return _internal_has_overhangrear();
}
inline void VehicleParam::clear_overhangrear() {
  overhangrear_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float VehicleParam::_internal_overhangrear() const {
  return overhangrear_;
}
inline float VehicleParam::overhangrear() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.overhangRear)
  return _internal_overhangrear();
}
inline void VehicleParam::_internal_set_overhangrear(float value) {
  _has_bits_[0] |= 0x00000004u;
  overhangrear_ = value;
}
inline void VehicleParam::set_overhangrear(float value) {
  _internal_set_overhangrear(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.overhangRear)
}

// optional float wheelCircumferenceFront = 3113;
inline bool VehicleParam::_internal_has_wheelcircumferencefront() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool VehicleParam::has_wheelcircumferencefront() const {
  return _internal_has_wheelcircumferencefront();
}
inline void VehicleParam::clear_wheelcircumferencefront() {
  wheelcircumferencefront_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float VehicleParam::_internal_wheelcircumferencefront() const {
  return wheelcircumferencefront_;
}
inline float VehicleParam::wheelcircumferencefront() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.wheelCircumferenceFront)
  return _internal_wheelcircumferencefront();
}
inline void VehicleParam::_internal_set_wheelcircumferencefront(float value) {
  _has_bits_[0] |= 0x00400000u;
  wheelcircumferencefront_ = value;
}
inline void VehicleParam::set_wheelcircumferencefront(float value) {
  _internal_set_wheelcircumferencefront(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.wheelCircumferenceFront)
}

// optional float wheelCircumferenceRear = 2794;
inline bool VehicleParam::_internal_has_wheelcircumferencerear() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool VehicleParam::has_wheelcircumferencerear() const {
  return _internal_has_wheelcircumferencerear();
}
inline void VehicleParam::clear_wheelcircumferencerear() {
  wheelcircumferencerear_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float VehicleParam::_internal_wheelcircumferencerear() const {
  return wheelcircumferencerear_;
}
inline float VehicleParam::wheelcircumferencerear() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.wheelCircumferenceRear)
  return _internal_wheelcircumferencerear();
}
inline void VehicleParam::_internal_set_wheelcircumferencerear(float value) {
  _has_bits_[0] |= 0x00020000u;
  wheelcircumferencerear_ = value;
}
inline void VehicleParam::set_wheelcircumferencerear(float value) {
  _internal_set_wheelcircumferencerear(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.wheelCircumferenceRear)
}

// optional float centerOfGravityX = 4039;
inline bool VehicleParam::_internal_has_centerofgravityx() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool VehicleParam::has_centerofgravityx() const {
  return _internal_has_centerofgravityx();
}
inline void VehicleParam::clear_centerofgravityx() {
  centerofgravityx_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float VehicleParam::_internal_centerofgravityx() const {
  return centerofgravityx_;
}
inline float VehicleParam::centerofgravityx() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.centerOfGravityX)
  return _internal_centerofgravityx();
}
inline void VehicleParam::_internal_set_centerofgravityx(float value) {
  _has_bits_[0] |= 0x08000000u;
  centerofgravityx_ = value;
}
inline void VehicleParam::set_centerofgravityx(float value) {
  _internal_set_centerofgravityx(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.centerOfGravityX)
}

// optional float centerOfGravityY = 4070;
inline bool VehicleParam::_internal_has_centerofgravityy() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool VehicleParam::has_centerofgravityy() const {
  return _internal_has_centerofgravityy();
}
inline void VehicleParam::clear_centerofgravityy() {
  centerofgravityy_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float VehicleParam::_internal_centerofgravityy() const {
  return centerofgravityy_;
}
inline float VehicleParam::centerofgravityy() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.centerOfGravityY)
  return _internal_centerofgravityy();
}
inline void VehicleParam::_internal_set_centerofgravityy(float value) {
  _has_bits_[0] |= 0x10000000u;
  centerofgravityy_ = value;
}
inline void VehicleParam::set_centerofgravityy(float value) {
  _internal_set_centerofgravityy(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.centerOfGravityY)
}

// optional float centerOfGravityZ = 3973;
inline bool VehicleParam::_internal_has_centerofgravityz() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool VehicleParam::has_centerofgravityz() const {
  return _internal_has_centerofgravityz();
}
inline void VehicleParam::clear_centerofgravityz() {
  centerofgravityz_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float VehicleParam::_internal_centerofgravityz() const {
  return centerofgravityz_;
}
inline float VehicleParam::centerofgravityz() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.centerOfGravityZ)
  return _internal_centerofgravityz();
}
inline void VehicleParam::_internal_set_centerofgravityz(float value) {
  _has_bits_[0] |= 0x04000000u;
  centerofgravityz_ = value;
}
inline void VehicleParam::set_centerofgravityz(float value) {
  _internal_set_centerofgravityz(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.centerOfGravityZ)
}

// optional bool isVehicleMassAvailable = 208;
inline bool VehicleParam::_internal_has_isvehiclemassavailable() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehicleParam::has_isvehiclemassavailable() const {
  return _internal_has_isvehiclemassavailable();
}
inline void VehicleParam::clear_isvehiclemassavailable() {
  isvehiclemassavailable_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool VehicleParam::_internal_isvehiclemassavailable() const {
  return isvehiclemassavailable_;
}
inline bool VehicleParam::isvehiclemassavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isVehicleMassAvailable)
  return _internal_isvehiclemassavailable();
}
inline void VehicleParam::_internal_set_isvehiclemassavailable(bool value) {
  _has_bits_[0] |= 0x00000040u;
  isvehiclemassavailable_ = value;
}
inline void VehicleParam::set_isvehiclemassavailable(bool value) {
  _internal_set_isvehiclemassavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isVehicleMassAvailable)
}

// optional bool isAxisLoadDistrAvailable = 1370;
inline bool VehicleParam::_internal_has_isaxisloaddistravailable() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehicleParam::has_isaxisloaddistravailable() const {
  return _internal_has_isaxisloaddistravailable();
}
inline void VehicleParam::clear_isaxisloaddistravailable() {
  isaxisloaddistravailable_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool VehicleParam::_internal_isaxisloaddistravailable() const {
  return isaxisloaddistravailable_;
}
inline bool VehicleParam::isaxisloaddistravailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isAxisLoadDistrAvailable)
  return _internal_isaxisloaddistravailable();
}
inline void VehicleParam::_internal_set_isaxisloaddistravailable(bool value) {
  _has_bits_[0] |= 0x00000080u;
  isaxisloaddistravailable_ = value;
}
inline void VehicleParam::set_isaxisloaddistravailable(bool value) {
  _internal_set_isaxisloaddistravailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isAxisLoadDistrAvailable)
}

// optional bool isLengthAvailable = 2675;
inline bool VehicleParam::_internal_has_islengthavailable() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehicleParam::has_islengthavailable() const {
  return _internal_has_islengthavailable();
}
inline void VehicleParam::clear_islengthavailable() {
  islengthavailable_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool VehicleParam::_internal_islengthavailable() const {
  return islengthavailable_;
}
inline bool VehicleParam::islengthavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isLengthAvailable)
  return _internal_islengthavailable();
}
inline void VehicleParam::_internal_set_islengthavailable(bool value) {
  _has_bits_[0] |= 0x00000100u;
  islengthavailable_ = value;
}
inline void VehicleParam::set_islengthavailable(bool value) {
  _internal_set_islengthavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isLengthAvailable)
}

// optional bool isWidthAvailable = 3171;
inline bool VehicleParam::_internal_has_iswidthavailable() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehicleParam::has_iswidthavailable() const {
  return _internal_has_iswidthavailable();
}
inline void VehicleParam::clear_iswidthavailable() {
  iswidthavailable_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool VehicleParam::_internal_iswidthavailable() const {
  return iswidthavailable_;
}
inline bool VehicleParam::iswidthavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isWidthAvailable)
  return _internal_iswidthavailable();
}
inline void VehicleParam::_internal_set_iswidthavailable(bool value) {
  _has_bits_[0] |= 0x00000200u;
  iswidthavailable_ = value;
}
inline void VehicleParam::set_iswidthavailable(bool value) {
  _internal_set_iswidthavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isWidthAvailable)
}

// optional bool isWheelbaseAvailable = 1529;
inline bool VehicleParam::_internal_has_iswheelbaseavailable() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VehicleParam::has_iswheelbaseavailable() const {
  return _internal_has_iswheelbaseavailable();
}
inline void VehicleParam::clear_iswheelbaseavailable() {
  iswheelbaseavailable_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool VehicleParam::_internal_iswheelbaseavailable() const {
  return iswheelbaseavailable_;
}
inline bool VehicleParam::iswheelbaseavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isWheelbaseAvailable)
  return _internal_iswheelbaseavailable();
}
inline void VehicleParam::_internal_set_iswheelbaseavailable(bool value) {
  _has_bits_[0] |= 0x00001000u;
  iswheelbaseavailable_ = value;
}
inline void VehicleParam::set_iswheelbaseavailable(bool value) {
  _internal_set_iswheelbaseavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isWheelbaseAvailable)
}

// optional bool isTrackWidthFrontAvailable = 907;
inline bool VehicleParam::_internal_has_istrackwidthfrontavailable() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VehicleParam::has_istrackwidthfrontavailable() const {
  return _internal_has_istrackwidthfrontavailable();
}
inline void VehicleParam::clear_istrackwidthfrontavailable() {
  istrackwidthfrontavailable_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool VehicleParam::_internal_istrackwidthfrontavailable() const {
  return istrackwidthfrontavailable_;
}
inline bool VehicleParam::istrackwidthfrontavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isTrackWidthFrontAvailable)
  return _internal_istrackwidthfrontavailable();
}
inline void VehicleParam::_internal_set_istrackwidthfrontavailable(bool value) {
  _has_bits_[0] |= 0x00002000u;
  istrackwidthfrontavailable_ = value;
}
inline void VehicleParam::set_istrackwidthfrontavailable(bool value) {
  _internal_set_istrackwidthfrontavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isTrackWidthFrontAvailable)
}

// optional bool isTrackWidthRearAvailable = 3278;
inline bool VehicleParam::_internal_has_istrackwidthrearavailable() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VehicleParam::has_istrackwidthrearavailable() const {
  return _internal_has_istrackwidthrearavailable();
}
inline void VehicleParam::clear_istrackwidthrearavailable() {
  istrackwidthrearavailable_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool VehicleParam::_internal_istrackwidthrearavailable() const {
  return istrackwidthrearavailable_;
}
inline bool VehicleParam::istrackwidthrearavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isTrackWidthRearAvailable)
  return _internal_istrackwidthrearavailable();
}
inline void VehicleParam::_internal_set_istrackwidthrearavailable(bool value) {
  _has_bits_[0] |= 0x00004000u;
  istrackwidthrearavailable_ = value;
}
inline void VehicleParam::set_istrackwidthrearavailable(bool value) {
  _internal_set_istrackwidthrearavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isTrackWidthRearAvailable)
}

// optional bool isOverhangFrontAvailable = 2659;
inline bool VehicleParam::_internal_has_isoverhangfrontavailable() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool VehicleParam::has_isoverhangfrontavailable() const {
  return _internal_has_isoverhangfrontavailable();
}
inline void VehicleParam::clear_isoverhangfrontavailable() {
  isoverhangfrontavailable_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool VehicleParam::_internal_isoverhangfrontavailable() const {
  return isoverhangfrontavailable_;
}
inline bool VehicleParam::isoverhangfrontavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isOverhangFrontAvailable)
  return _internal_isoverhangfrontavailable();
}
inline void VehicleParam::_internal_set_isoverhangfrontavailable(bool value) {
  _has_bits_[0] |= 0x00008000u;
  isoverhangfrontavailable_ = value;
}
inline void VehicleParam::set_isoverhangfrontavailable(bool value) {
  _internal_set_isoverhangfrontavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isOverhangFrontAvailable)
}

// optional bool isOverhangRearAvailable = 2730;
inline bool VehicleParam::_internal_has_isoverhangrearavailable() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool VehicleParam::has_isoverhangrearavailable() const {
  return _internal_has_isoverhangrearavailable();
}
inline void VehicleParam::clear_isoverhangrearavailable() {
  isoverhangrearavailable_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool VehicleParam::_internal_isoverhangrearavailable() const {
  return isoverhangrearavailable_;
}
inline bool VehicleParam::isoverhangrearavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isOverhangRearAvailable)
  return _internal_isoverhangrearavailable();
}
inline void VehicleParam::_internal_set_isoverhangrearavailable(bool value) {
  _has_bits_[0] |= 0x00040000u;
  isoverhangrearavailable_ = value;
}
inline void VehicleParam::set_isoverhangrearavailable(bool value) {
  _internal_set_isoverhangrearavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isOverhangRearAvailable)
}

// optional bool isWheelCircumferenceFrontAvailable = 3220;
inline bool VehicleParam::_internal_has_iswheelcircumferencefrontavailable() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool VehicleParam::has_iswheelcircumferencefrontavailable() const {
  return _internal_has_iswheelcircumferencefrontavailable();
}
inline void VehicleParam::clear_iswheelcircumferencefrontavailable() {
  iswheelcircumferencefrontavailable_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool VehicleParam::_internal_iswheelcircumferencefrontavailable() const {
  return iswheelcircumferencefrontavailable_;
}
inline bool VehicleParam::iswheelcircumferencefrontavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isWheelCircumferenceFrontAvailable)
  return _internal_iswheelcircumferencefrontavailable();
}
inline void VehicleParam::_internal_set_iswheelcircumferencefrontavailable(bool value) {
  _has_bits_[0] |= 0x00080000u;
  iswheelcircumferencefrontavailable_ = value;
}
inline void VehicleParam::set_iswheelcircumferencefrontavailable(bool value) {
  _internal_set_iswheelcircumferencefrontavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isWheelCircumferenceFrontAvailable)
}

// optional bool isWheelCircumferenceRearAvailable = 3134;
inline bool VehicleParam::_internal_has_iswheelcircumferencerearavailable() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool VehicleParam::has_iswheelcircumferencerearavailable() const {
  return _internal_has_iswheelcircumferencerearavailable();
}
inline void VehicleParam::clear_iswheelcircumferencerearavailable() {
  iswheelcircumferencerearavailable_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool VehicleParam::_internal_iswheelcircumferencerearavailable() const {
  return iswheelcircumferencerearavailable_;
}
inline bool VehicleParam::iswheelcircumferencerearavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isWheelCircumferenceRearAvailable)
  return _internal_iswheelcircumferencerearavailable();
}
inline void VehicleParam::_internal_set_iswheelcircumferencerearavailable(bool value) {
  _has_bits_[0] |= 0x00100000u;
  iswheelcircumferencerearavailable_ = value;
}
inline void VehicleParam::set_iswheelcircumferencerearavailable(bool value) {
  _internal_set_iswheelcircumferencerearavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isWheelCircumferenceRearAvailable)
}

// optional bool isCenterOfGravityXAvailable = 2759;
inline bool VehicleParam::_internal_has_iscenterofgravityxavailable() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool VehicleParam::has_iscenterofgravityxavailable() const {
  return _internal_has_iscenterofgravityxavailable();
}
inline void VehicleParam::clear_iscenterofgravityxavailable() {
  iscenterofgravityxavailable_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool VehicleParam::_internal_iscenterofgravityxavailable() const {
  return iscenterofgravityxavailable_;
}
inline bool VehicleParam::iscenterofgravityxavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isCenterOfGravityXAvailable)
  return _internal_iscenterofgravityxavailable();
}
inline void VehicleParam::_internal_set_iscenterofgravityxavailable(bool value) {
  _has_bits_[0] |= 0x00200000u;
  iscenterofgravityxavailable_ = value;
}
inline void VehicleParam::set_iscenterofgravityxavailable(bool value) {
  _internal_set_iscenterofgravityxavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isCenterOfGravityXAvailable)
}

// optional bool isCenterOfGravityYAvailable = 1410;
inline bool VehicleParam::_internal_has_iscenterofgravityyavailable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehicleParam::has_iscenterofgravityyavailable() const {
  return _internal_has_iscenterofgravityyavailable();
}
inline void VehicleParam::clear_iscenterofgravityyavailable() {
  iscenterofgravityyavailable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool VehicleParam::_internal_iscenterofgravityyavailable() const {
  return iscenterofgravityyavailable_;
}
inline bool VehicleParam::iscenterofgravityyavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isCenterOfGravityYAvailable)
  return _internal_iscenterofgravityyavailable();
}
inline void VehicleParam::_internal_set_iscenterofgravityyavailable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  iscenterofgravityyavailable_ = value;
}
inline void VehicleParam::set_iscenterofgravityyavailable(bool value) {
  _internal_set_iscenterofgravityyavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isCenterOfGravityYAvailable)
}

// optional bool isCenterOfGravityZAvailable = 1101;
inline bool VehicleParam::_internal_has_iscenterofgravityzavailable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehicleParam::has_iscenterofgravityzavailable() const {
  return _internal_has_iscenterofgravityzavailable();
}
inline void VehicleParam::clear_iscenterofgravityzavailable() {
  iscenterofgravityzavailable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VehicleParam::_internal_iscenterofgravityzavailable() const {
  return iscenterofgravityzavailable_;
}
inline bool VehicleParam::iscenterofgravityzavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam.isCenterOfGravityZAvailable)
  return _internal_iscenterofgravityzavailable();
}
inline void VehicleParam::_internal_set_iscenterofgravityzavailable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  iscenterofgravityzavailable_ = value;
}
inline void VehicleParam::set_iscenterofgravityzavailable(bool value) {
  _internal_set_iscenterofgravityzavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.vehicle_param.VehicleParam.isCenterOfGravityZAvailable)
}

// -------------------------------------------------------------------

// VehicleParam_array_port

// repeated .pb.eco.vehicle_param.VehicleParam data = 3174;
inline int VehicleParam_array_port::_internal_data_size() const {
  return data_.size();
}
inline int VehicleParam_array_port::data_size() const {
  return _internal_data_size();
}
inline void VehicleParam_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::eco::vehicle_param::VehicleParam* VehicleParam_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.eco.vehicle_param.VehicleParam_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::vehicle_param::VehicleParam >*
VehicleParam_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.eco.vehicle_param.VehicleParam_array_port.data)
  return &data_;
}
inline const ::pb::eco::vehicle_param::VehicleParam& VehicleParam_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::eco::vehicle_param::VehicleParam& VehicleParam_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.eco.vehicle_param.VehicleParam_array_port.data)
  return _internal_data(index);
}
inline ::pb::eco::vehicle_param::VehicleParam* VehicleParam_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::eco::vehicle_param::VehicleParam* VehicleParam_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.eco.vehicle_param.VehicleParam_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::vehicle_param::VehicleParam >&
VehicleParam_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.eco.vehicle_param.VehicleParam_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vehicle_param
}  // namespace eco
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eco_2fvehicle_5fparam_2eproto
