// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eco/vehicle_param.proto

#include "eco/vehicle_param.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fvehicle_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto;
namespace pb {
namespace eco {
namespace vehicle_param {
class VehicleParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleParam> _instance;
} _VehicleParam_default_instance_;
class VehicleParam_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleParam_array_port> _instance;
} _VehicleParam_array_port_default_instance_;
}  // namespace vehicle_param
}  // namespace eco
}  // namespace pb
static void InitDefaultsscc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::eco::vehicle_param::_VehicleParam_default_instance_;
    new (ptr) ::pb::eco::vehicle_param::VehicleParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::eco::vehicle_param::VehicleParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_VehicleParam_array_port_eco_2fvehicle_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::eco::vehicle_param::_VehicleParam_array_port_default_instance_;
    new (ptr) ::pb::eco::vehicle_param::VehicleParam_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::eco::vehicle_param::VehicleParam_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleParam_array_port_eco_2fvehicle_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleParam_array_port_eco_2fvehicle_5fparam_2eproto}, {
      &scc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_eco_2fvehicle_5fparam_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_eco_2fvehicle_5fparam_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_eco_2fvehicle_5fparam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_eco_2fvehicle_5fparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, sigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, vehiclemass_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, axisloaddistr_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, length_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, width_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, wheelbase_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, trackwidthfront_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, trackwidthrear_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, overhangfront_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, overhangrear_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, wheelcircumferencefront_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, wheelcircumferencerear_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, centerofgravityx_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, centerofgravityy_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, centerofgravityz_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, isvehiclemassavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, isaxisloaddistravailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, islengthavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, iswidthavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, iswheelbaseavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, istrackwidthfrontavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, istrackwidthrearavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, isoverhangfrontavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, isoverhangrearavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, iswheelcircumferencefrontavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, iswheelcircumferencerearavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, iscenterofgravityxavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, iscenterofgravityyavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam, iscenterofgravityzavailable_),
  0,
  16,
  3,
  10,
  25,
  11,
  23,
  24,
  1,
  2,
  22,
  17,
  27,
  28,
  26,
  6,
  7,
  8,
  9,
  12,
  13,
  14,
  15,
  18,
  19,
  20,
  21,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::eco::vehicle_param::VehicleParam_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 34, sizeof(::pb::eco::vehicle_param::VehicleParam)},
  { 63, 69, sizeof(::pb::eco::vehicle_param::VehicleParam_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::eco::vehicle_param::_VehicleParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::eco::vehicle_param::_VehicleParam_array_port_default_instance_),
};

const char descriptor_table_protodef_eco_2fvehicle_5fparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027eco/vehicle_param.proto\022\024pb.eco.vehicl"
  "e_param\032\027eco/signal_header.proto\"\222\007\n\014Veh"
  "icleParam\0226\n\tsigHeader\030\252\013 \001(\0132\".pb.eco.s"
  "ignal_header.SignalHeader\022\024\n\013vehicleMass"
  "\030\255\023 \001(\002\022\026\n\raxisLoadDistr\030\263\005 \001(\002\022\017\n\006lengt"
  "h\030\332\017 \001(\002\022\016\n\005width\030\257\035 \001(\002\022\022\n\twheelbase\030\250\020"
  " \001(\002\022\030\n\017trackWidthFront\030\366\034 \001(\002\022\027\n\016trackW"
  "idthRear\030\217\035 \001(\002\022\026\n\roverhangFront\030\324\001 \001(\002\022"
  "\025\n\014overhangRear\030\255\004 \001(\002\022 \n\027wheelCircumfer"
  "enceFront\030\251\030 \001(\002\022\037\n\026wheelCircumferenceRe"
  "ar\030\352\025 \001(\002\022\031\n\020centerOfGravityX\030\307\037 \001(\002\022\031\n\020"
  "centerOfGravityY\030\346\037 \001(\002\022\031\n\020centerOfGravi"
  "tyZ\030\205\037 \001(\002\022\037\n\026isVehicleMassAvailable\030\320\001 "
  "\001(\010\022!\n\030isAxisLoadDistrAvailable\030\332\n \001(\010\022\032"
  "\n\021isLengthAvailable\030\363\024 \001(\010\022\031\n\020isWidthAva"
  "ilable\030\343\030 \001(\010\022\035\n\024isWheelbaseAvailable\030\371\013"
  " \001(\010\022#\n\032isTrackWidthFrontAvailable\030\213\007 \001("
  "\010\022\"\n\031isTrackWidthRearAvailable\030\316\031 \001(\010\022!\n"
  "\030isOverhangFrontAvailable\030\343\024 \001(\010\022 \n\027isOv"
  "erhangRearAvailable\030\252\025 \001(\010\022+\n\"isWheelCir"
  "cumferenceFrontAvailable\030\224\031 \001(\010\022*\n!isWhe"
  "elCircumferenceRearAvailable\030\276\030 \001(\010\022$\n\033i"
  "sCenterOfGravityXAvailable\030\307\025 \001(\010\022$\n\033isC"
  "enterOfGravityYAvailable\030\202\013 \001(\010\022$\n\033isCen"
  "terOfGravityZAvailable\030\315\010 \001(\010\"L\n\027Vehicle"
  "Param_array_port\0221\n\004data\030\346\030 \003(\0132\".pb.eco"
  ".vehicle_param.VehicleParam"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_eco_2fvehicle_5fparam_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_eco_2fvehicle_5fparam_2eproto_sccs[2] = {
  &scc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto.base,
  &scc_info_VehicleParam_array_port_eco_2fvehicle_5fparam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_eco_2fvehicle_5fparam_2eproto_once;
static bool descriptor_table_eco_2fvehicle_5fparam_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eco_2fvehicle_5fparam_2eproto = {
  &descriptor_table_eco_2fvehicle_5fparam_2eproto_initialized, descriptor_table_protodef_eco_2fvehicle_5fparam_2eproto, "eco/vehicle_param.proto", 1067,
  &descriptor_table_eco_2fvehicle_5fparam_2eproto_once, descriptor_table_eco_2fvehicle_5fparam_2eproto_sccs, descriptor_table_eco_2fvehicle_5fparam_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_eco_2fvehicle_5fparam_2eproto::offsets,
  file_level_metadata_eco_2fvehicle_5fparam_2eproto, 2, file_level_enum_descriptors_eco_2fvehicle_5fparam_2eproto, file_level_service_descriptors_eco_2fvehicle_5fparam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_eco_2fvehicle_5fparam_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_eco_2fvehicle_5fparam_2eproto), true);
namespace pb {
namespace eco {
namespace vehicle_param {

// ===================================================================

void VehicleParam::InitAsDefaultInstance() {
  ::pb::eco::vehicle_param::_VehicleParam_default_instance_._instance.get_mutable()->sigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class VehicleParam::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleParam>()._has_bits_);
  static const ::pb::eco::signal_header::SignalHeader& sigheader(const VehicleParam* msg);
  static void set_has_sigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehiclemass(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_axisloaddistr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_wheelbase(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_trackwidthfront(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_trackwidthrear(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_overhangfront(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overhangrear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheelcircumferencefront(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_wheelcircumferencerear(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_centerofgravityx(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_centerofgravityy(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_centerofgravityz(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_isvehiclemassavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isaxisloaddistravailable(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_islengthavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_iswidthavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_iswheelbaseavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_istrackwidthfrontavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_istrackwidthrearavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_isoverhangfrontavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_isoverhangrearavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_iswheelcircumferencefrontavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_iswheelcircumferencerearavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_iscenterofgravityxavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_iscenterofgravityyavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iscenterofgravityzavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
VehicleParam::_Internal::sigheader(const VehicleParam* msg) {
  return *msg->sigheader_;
}
void VehicleParam::clear_sigheader() {
  if (sigheader_ != nullptr) sigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VehicleParam::VehicleParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.eco.vehicle_param.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sigheader()) {
    sigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.sigheader_);
  } else {
    sigheader_ = nullptr;
  }
  ::memcpy(&overhangfront_, &from.overhangfront_,
    static_cast<size_t>(reinterpret_cast<char*>(&centerofgravityy_) -
    reinterpret_cast<char*>(&overhangfront_)) + sizeof(centerofgravityy_));
  // @@protoc_insertion_point(copy_constructor:pb.eco.vehicle_param.VehicleParam)
}

void VehicleParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto.base);
  ::memset(&sigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&centerofgravityy_) -
      reinterpret_cast<char*>(&sigheader_)) + sizeof(centerofgravityy_));
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:pb.eco.vehicle_param.VehicleParam)
  SharedDtor();
}

void VehicleParam::SharedDtor() {
  if (this != internal_default_instance()) delete sigheader_;
}

void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleParam& VehicleParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleParam_eco_2fvehicle_5fparam_2eproto.base);
  return *internal_default_instance();
}


void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.eco.vehicle_param.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sigheader_ != nullptr);
    sigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&overhangfront_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isaxisloaddistravailable_) -
        reinterpret_cast<char*>(&overhangfront_)) + sizeof(isaxisloaddistravailable_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&islengthavailable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isoverhangfrontavailable_) -
        reinterpret_cast<char*>(&islengthavailable_)) + sizeof(isoverhangfrontavailable_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&vehiclemass_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trackwidthfront_) -
        reinterpret_cast<char*>(&vehiclemass_)) + sizeof(trackwidthfront_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&trackwidthrear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&centerofgravityy_) -
        reinterpret_cast<char*>(&trackwidthrear_)) + sizeof(centerofgravityy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isVehicleMassAvailable = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_isvehiclemassavailable(&has_bits);
          isvehiclemassavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float overhangFront = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_overhangfront(&has_bits);
          overhangfront_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overhangRear = 557;
      case 557:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_overhangrear(&has_bits);
          overhangrear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float axisLoadDistr = 691;
      case 691:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_axisloaddistr(&has_bits);
          axisloaddistr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool isTrackWidthFrontAvailable = 907;
      case 907:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_istrackwidthfrontavailable(&has_bits);
          istrackwidthfrontavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isCenterOfGravityZAvailable = 1101;
      case 1101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_iscenterofgravityzavailable(&has_bits);
          iscenterofgravityzavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAxisLoadDistrAvailable = 1370;
      case 1370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_isaxisloaddistravailable(&has_bits);
          isaxisloaddistravailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isCenterOfGravityYAvailable = 1410;
      case 1410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_iscenterofgravityyavailable(&has_bits);
          iscenterofgravityyavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
      case 1450:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isWheelbaseAvailable = 1529;
      case 1529:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_iswheelbaseavailable(&has_bits);
          iswheelbaseavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float length = 2010;
      case 2010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wheelbase = 2088;
      case 2088:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_wheelbase(&has_bits);
          wheelbase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicleMass = 2477;
      case 2477:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_vehiclemass(&has_bits);
          vehiclemass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool isOverhangFrontAvailable = 2659;
      case 2659:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isoverhangfrontavailable(&has_bits);
          isoverhangfrontavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isLengthAvailable = 2675;
      case 2675:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_islengthavailable(&has_bits);
          islengthavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isOverhangRearAvailable = 2730;
      case 2730:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_isoverhangrearavailable(&has_bits);
          isoverhangrearavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isCenterOfGravityXAvailable = 2759;
      case 2759:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_iscenterofgravityxavailable(&has_bits);
          iscenterofgravityxavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float wheelCircumferenceRear = 2794;
      case 2794:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_wheelcircumferencerear(&has_bits);
          wheelcircumferencerear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wheelCircumferenceFront = 3113;
      case 3113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_wheelcircumferencefront(&has_bits);
          wheelcircumferencefront_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool isWheelCircumferenceRearAvailable = 3134;
      case 3134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_iswheelcircumferencerearavailable(&has_bits);
          iswheelcircumferencerearavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isWidthAvailable = 3171;
      case 3171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_iswidthavailable(&has_bits);
          iswidthavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isWheelCircumferenceFrontAvailable = 3220;
      case 3220:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_iswheelcircumferencefrontavailable(&has_bits);
          iswheelcircumferencefrontavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isTrackWidthRearAvailable = 3278;
      case 3278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_istrackwidthrearavailable(&has_bits);
          istrackwidthrearavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float trackWidthFront = 3702;
      case 3702:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_trackwidthfront(&has_bits);
          trackwidthfront_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float trackWidthRear = 3727;
      case 3727:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_trackwidthrear(&has_bits);
          trackwidthrear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float width = 3759;
      case 3759:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float centerOfGravityZ = 3973;
      case 3973:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_centerofgravityz(&has_bits);
          centerofgravityz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float centerOfGravityX = 4039;
      case 4039:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_centerofgravityx(&has_bits);
          centerofgravityx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float centerOfGravityY = 4070;
      case 4070:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_centerofgravityy(&has_bits);
          centerofgravityy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.eco.vehicle_param.VehicleParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isVehicleMassAvailable = 208;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(208, this->_internal_isvehiclemassavailable(), target);
  }

  // optional float overhangFront = 212;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(212, this->_internal_overhangfront(), target);
  }

  // optional float overhangRear = 557;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(557, this->_internal_overhangrear(), target);
  }

  // optional float axisLoadDistr = 691;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(691, this->_internal_axisloaddistr(), target);
  }

  // optional bool isTrackWidthFrontAvailable = 907;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(907, this->_internal_istrackwidthfrontavailable(), target);
  }

  // optional bool isCenterOfGravityZAvailable = 1101;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1101, this->_internal_iscenterofgravityzavailable(), target);
  }

  // optional bool isAxisLoadDistrAvailable = 1370;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1370, this->_internal_isaxisloaddistravailable(), target);
  }

  // optional bool isCenterOfGravityYAvailable = 1410;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1410, this->_internal_iscenterofgravityyavailable(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1450, _Internal::sigheader(this), target, stream);
  }

  // optional bool isWheelbaseAvailable = 1529;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1529, this->_internal_iswheelbaseavailable(), target);
  }

  // optional float length = 2010;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2010, this->_internal_length(), target);
  }

  // optional float wheelbase = 2088;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2088, this->_internal_wheelbase(), target);
  }

  // optional float vehicleMass = 2477;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2477, this->_internal_vehiclemass(), target);
  }

  // optional bool isOverhangFrontAvailable = 2659;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2659, this->_internal_isoverhangfrontavailable(), target);
  }

  // optional bool isLengthAvailable = 2675;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2675, this->_internal_islengthavailable(), target);
  }

  // optional bool isOverhangRearAvailable = 2730;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2730, this->_internal_isoverhangrearavailable(), target);
  }

  // optional bool isCenterOfGravityXAvailable = 2759;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2759, this->_internal_iscenterofgravityxavailable(), target);
  }

  // optional float wheelCircumferenceRear = 2794;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2794, this->_internal_wheelcircumferencerear(), target);
  }

  // optional float wheelCircumferenceFront = 3113;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3113, this->_internal_wheelcircumferencefront(), target);
  }

  // optional bool isWheelCircumferenceRearAvailable = 3134;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3134, this->_internal_iswheelcircumferencerearavailable(), target);
  }

  // optional bool isWidthAvailable = 3171;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3171, this->_internal_iswidthavailable(), target);
  }

  // optional bool isWheelCircumferenceFrontAvailable = 3220;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3220, this->_internal_iswheelcircumferencefrontavailable(), target);
  }

  // optional bool isTrackWidthRearAvailable = 3278;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3278, this->_internal_istrackwidthrearavailable(), target);
  }

  // optional float trackWidthFront = 3702;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3702, this->_internal_trackwidthfront(), target);
  }

  // optional float trackWidthRear = 3727;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3727, this->_internal_trackwidthrear(), target);
  }

  // optional float width = 3759;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3759, this->_internal_width(), target);
  }

  // optional float centerOfGravityZ = 3973;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3973, this->_internal_centerofgravityz(), target);
  }

  // optional float centerOfGravityX = 4039;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4039, this->_internal_centerofgravityx(), target);
  }

  // optional float centerOfGravityY = 4070;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4070, this->_internal_centerofgravityy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.eco.vehicle_param.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.eco.vehicle_param.VehicleParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sigheader_);
    }

    // optional float overhangFront = 212;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float overhangRear = 557;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float axisLoadDistr = 691;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional bool isCenterOfGravityYAvailable = 1410;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool isCenterOfGravityZAvailable = 1101;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool isVehicleMassAvailable = 208;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool isAxisLoadDistrAvailable = 1370;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool isLengthAvailable = 2675;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional bool isWidthAvailable = 3171;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional float length = 2010;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float wheelbase = 2088;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional bool isWheelbaseAvailable = 1529;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool isTrackWidthFrontAvailable = 907;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool isTrackWidthRearAvailable = 3278;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool isOverhangFrontAvailable = 2659;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float vehicleMass = 2477;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float wheelCircumferenceRear = 2794;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional bool isOverhangRearAvailable = 2730;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool isWheelCircumferenceFrontAvailable = 3220;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 1;
    }

    // optional bool isWheelCircumferenceRearAvailable = 3134;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional bool isCenterOfGravityXAvailable = 2759;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 1;
    }

    // optional float wheelCircumferenceFront = 3113;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float trackWidthFront = 3702;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional float trackWidthRear = 3727;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float width = 3759;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float centerOfGravityZ = 3973;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float centerOfGravityX = 4039;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float centerOfGravityY = 4070;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.eco.vehicle_param.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.eco.vehicle_param.VehicleParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.eco.vehicle_param.VehicleParam)
    MergeFrom(*source);
  }
}

void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.eco.vehicle_param.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_sigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      overhangfront_ = from.overhangfront_;
    }
    if (cached_has_bits & 0x00000004u) {
      overhangrear_ = from.overhangrear_;
    }
    if (cached_has_bits & 0x00000008u) {
      axisloaddistr_ = from.axisloaddistr_;
    }
    if (cached_has_bits & 0x00000010u) {
      iscenterofgravityyavailable_ = from.iscenterofgravityyavailable_;
    }
    if (cached_has_bits & 0x00000020u) {
      iscenterofgravityzavailable_ = from.iscenterofgravityzavailable_;
    }
    if (cached_has_bits & 0x00000040u) {
      isvehiclemassavailable_ = from.isvehiclemassavailable_;
    }
    if (cached_has_bits & 0x00000080u) {
      isaxisloaddistravailable_ = from.isaxisloaddistravailable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      islengthavailable_ = from.islengthavailable_;
    }
    if (cached_has_bits & 0x00000200u) {
      iswidthavailable_ = from.iswidthavailable_;
    }
    if (cached_has_bits & 0x00000400u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheelbase_ = from.wheelbase_;
    }
    if (cached_has_bits & 0x00001000u) {
      iswheelbaseavailable_ = from.iswheelbaseavailable_;
    }
    if (cached_has_bits & 0x00002000u) {
      istrackwidthfrontavailable_ = from.istrackwidthfrontavailable_;
    }
    if (cached_has_bits & 0x00004000u) {
      istrackwidthrearavailable_ = from.istrackwidthrearavailable_;
    }
    if (cached_has_bits & 0x00008000u) {
      isoverhangfrontavailable_ = from.isoverhangfrontavailable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      vehiclemass_ = from.vehiclemass_;
    }
    if (cached_has_bits & 0x00020000u) {
      wheelcircumferencerear_ = from.wheelcircumferencerear_;
    }
    if (cached_has_bits & 0x00040000u) {
      isoverhangrearavailable_ = from.isoverhangrearavailable_;
    }
    if (cached_has_bits & 0x00080000u) {
      iswheelcircumferencefrontavailable_ = from.iswheelcircumferencefrontavailable_;
    }
    if (cached_has_bits & 0x00100000u) {
      iswheelcircumferencerearavailable_ = from.iswheelcircumferencerearavailable_;
    }
    if (cached_has_bits & 0x00200000u) {
      iscenterofgravityxavailable_ = from.iscenterofgravityxavailable_;
    }
    if (cached_has_bits & 0x00400000u) {
      wheelcircumferencefront_ = from.wheelcircumferencefront_;
    }
    if (cached_has_bits & 0x00800000u) {
      trackwidthfront_ = from.trackwidthfront_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      trackwidthrear_ = from.trackwidthrear_;
    }
    if (cached_has_bits & 0x02000000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x04000000u) {
      centerofgravityz_ = from.centerofgravityz_;
    }
    if (cached_has_bits & 0x08000000u) {
      centerofgravityx_ = from.centerofgravityx_;
    }
    if (cached_has_bits & 0x10000000u) {
      centerofgravityy_ = from.centerofgravityy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.eco.vehicle_param.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.eco.vehicle_param.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sigheader_, other->sigheader_);
  swap(overhangfront_, other->overhangfront_);
  swap(overhangrear_, other->overhangrear_);
  swap(axisloaddistr_, other->axisloaddistr_);
  swap(iscenterofgravityyavailable_, other->iscenterofgravityyavailable_);
  swap(iscenterofgravityzavailable_, other->iscenterofgravityzavailable_);
  swap(isvehiclemassavailable_, other->isvehiclemassavailable_);
  swap(isaxisloaddistravailable_, other->isaxisloaddistravailable_);
  swap(islengthavailable_, other->islengthavailable_);
  swap(iswidthavailable_, other->iswidthavailable_);
  swap(length_, other->length_);
  swap(wheelbase_, other->wheelbase_);
  swap(iswheelbaseavailable_, other->iswheelbaseavailable_);
  swap(istrackwidthfrontavailable_, other->istrackwidthfrontavailable_);
  swap(istrackwidthrearavailable_, other->istrackwidthrearavailable_);
  swap(isoverhangfrontavailable_, other->isoverhangfrontavailable_);
  swap(vehiclemass_, other->vehiclemass_);
  swap(wheelcircumferencerear_, other->wheelcircumferencerear_);
  swap(isoverhangrearavailable_, other->isoverhangrearavailable_);
  swap(iswheelcircumferencefrontavailable_, other->iswheelcircumferencefrontavailable_);
  swap(iswheelcircumferencerearavailable_, other->iswheelcircumferencerearavailable_);
  swap(iscenterofgravityxavailable_, other->iscenterofgravityxavailable_);
  swap(wheelcircumferencefront_, other->wheelcircumferencefront_);
  swap(trackwidthfront_, other->trackwidthfront_);
  swap(trackwidthrear_, other->trackwidthrear_);
  swap(width_, other->width_);
  swap(centerofgravityz_, other->centerofgravityz_);
  swap(centerofgravityx_, other->centerofgravityx_);
  swap(centerofgravityy_, other->centerofgravityy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleParam_array_port::InitAsDefaultInstance() {
}
class VehicleParam_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleParam_array_port>()._has_bits_);
};

VehicleParam_array_port::VehicleParam_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.eco.vehicle_param.VehicleParam_array_port)
}
VehicleParam_array_port::VehicleParam_array_port(const VehicleParam_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.eco.vehicle_param.VehicleParam_array_port)
}

void VehicleParam_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleParam_array_port_eco_2fvehicle_5fparam_2eproto.base);
}

VehicleParam_array_port::~VehicleParam_array_port() {
  // @@protoc_insertion_point(destructor:pb.eco.vehicle_param.VehicleParam_array_port)
  SharedDtor();
}

void VehicleParam_array_port::SharedDtor() {
}

void VehicleParam_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleParam_array_port& VehicleParam_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleParam_array_port_eco_2fvehicle_5fparam_2eproto.base);
  return *internal_default_instance();
}


void VehicleParam_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.eco.vehicle_param.VehicleParam_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleParam_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.eco.vehicle_param.VehicleParam data = 3174;
      case 3174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleParam_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.eco.vehicle_param.VehicleParam_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.eco.vehicle_param.VehicleParam data = 3174;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3174, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.eco.vehicle_param.VehicleParam_array_port)
  return target;
}

size_t VehicleParam_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.eco.vehicle_param.VehicleParam_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.eco.vehicle_param.VehicleParam data = 3174;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParam_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.eco.vehicle_param.VehicleParam_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParam_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleParam_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.eco.vehicle_param.VehicleParam_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.eco.vehicle_param.VehicleParam_array_port)
    MergeFrom(*source);
  }
}

void VehicleParam_array_port::MergeFrom(const VehicleParam_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.eco.vehicle_param.VehicleParam_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void VehicleParam_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.eco.vehicle_param.VehicleParam_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParam_array_port::CopyFrom(const VehicleParam_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.eco.vehicle_param.VehicleParam_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam_array_port::IsInitialized() const {
  return true;
}

void VehicleParam_array_port::InternalSwap(VehicleParam_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParam_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vehicle_param
}  // namespace eco
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::eco::vehicle_param::VehicleParam* Arena::CreateMaybeMessage< ::pb::eco::vehicle_param::VehicleParam >(Arena* arena) {
  return Arena::CreateInternal< ::pb::eco::vehicle_param::VehicleParam >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::eco::vehicle_param::VehicleParam_array_port* Arena::CreateMaybeMessage< ::pb::eco::vehicle_param::VehicleParam_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::eco::vehicle_param::VehicleParam_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
