// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eco/framework_control.proto

#include "eco/framework_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2ffirst_5flast_5fcomponent_5fexecution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirstLastComponentExecution_eco_2ffirst_5flast_5fcomponent_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fframework_5fcontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace eco {
namespace framework_control {
class FrameworkControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameworkControl> _instance;
} _FrameworkControl_default_instance_;
class FrameworkControl_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameworkControl_array_port> _instance;
} _FrameworkControl_array_port_default_instance_;
}  // namespace framework_control
}  // namespace eco
}  // namespace pb
static void InitDefaultsscc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::eco::framework_control::_FrameworkControl_default_instance_;
    new (ptr) ::pb::eco::framework_control::FrameworkControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::eco::framework_control::FrameworkControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_FirstLastComponentExecution_eco_2ffirst_5flast_5fcomponent_5fexecution_2eproto.base,}};

static void InitDefaultsscc_info_FrameworkControl_array_port_eco_2fframework_5fcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::eco::framework_control::_FrameworkControl_array_port_default_instance_;
    new (ptr) ::pb::eco::framework_control::FrameworkControl_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::eco::framework_control::FrameworkControl_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameworkControl_array_port_eco_2fframework_5fcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameworkControl_array_port_eco_2fframework_5fcontrol_2eproto}, {
      &scc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_eco_2fframework_5fcontrol_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_eco_2fframework_5fcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_eco_2fframework_5fcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_eco_2fframework_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, opmode_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, cemcycleinittimestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, endcycleestimatedtimestamp_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, opstate_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, opmodeexectime_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, errorcode_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, functionalerrorcode_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, windowscyclestart_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, rawcyclestart_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, firstlastexecution_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl, osemode_),
  6,
  0,
  7,
  9,
  2,
  8,
  4,
  3,
  ~0u,
  11,
  10,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::eco::framework_control::FrameworkControl_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::pb::eco::framework_control::FrameworkControl)},
  { 31, 37, sizeof(::pb::eco::framework_control::FrameworkControl_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::eco::framework_control::_FrameworkControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::eco::framework_control::_FrameworkControl_array_port_default_instance_),
};

const char descriptor_table_protodef_eco_2fframework_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033eco/framework_control.proto\022\030pb.eco.fr"
  "amework_control\032\027eco/signal_header.proto"
  "\032\021eco/op_mode.proto\032\027eco/comp_op_state.p"
  "roto\032(eco/first_last_component_execution"
  ".proto\"\372\003\n\020FrameworkControl\022\030\n\017uiVersion"
  "Number\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb."
  "eco.signal_header.SignalHeader\022\'\n\006opMode"
  "\030\335\021 \001(\0162\026.pb.eco.op_mode.OpMode\022\036\n\025cemCy"
  "cleInitTimeStamp\030\246\032 \001(\004\022#\n\032endCycleEstim"
  "atedTimeStamp\030\332\002 \001(\004\0223\n\007opState\030\357\036 \001(\0162!"
  ".pb.eco.comp_op_state.CompOpState\022\027\n\016opM"
  "odeExecTime\030\336\010 \001(\004\022\022\n\terrorCode\030\247\004 \001(\004\022\034"
  "\n\023functionalErrorCode\030\274\n \003(\004\022\032\n\021windowsC"
  "ycleStart\030\374\036 \001(\004\022\026\n\rrawCycleStart\030\345\032 \001(\004"
  "\022_\n\022firstLastExecution\030\332\025 \001(\0132B.pb.eco.f"
  "irst_last_component_execution.FirstLastC"
  "omponentExecution\022\020\n\007oseMode\030\241\017 \001(\010\"X\n\033F"
  "rameworkControl_array_port\0229\n\004data\030\236\036 \003("
  "\0132*.pb.eco.framework_control.FrameworkCo"
  "ntrol"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_eco_2fframework_5fcontrol_2eproto_deps[4] = {
  &::descriptor_table_eco_2fcomp_5fop_5fstate_2eproto,
  &::descriptor_table_eco_2ffirst_5flast_5fcomponent_5fexecution_2eproto,
  &::descriptor_table_eco_2fop_5fmode_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_eco_2fframework_5fcontrol_2eproto_sccs[2] = {
  &scc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto.base,
  &scc_info_FrameworkControl_array_port_eco_2fframework_5fcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_eco_2fframework_5fcontrol_2eproto_once;
static bool descriptor_table_eco_2fframework_5fcontrol_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eco_2fframework_5fcontrol_2eproto = {
  &descriptor_table_eco_2fframework_5fcontrol_2eproto_initialized, descriptor_table_protodef_eco_2fframework_5fcontrol_2eproto, "eco/framework_control.proto", 765,
  &descriptor_table_eco_2fframework_5fcontrol_2eproto_once, descriptor_table_eco_2fframework_5fcontrol_2eproto_sccs, descriptor_table_eco_2fframework_5fcontrol_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_eco_2fframework_5fcontrol_2eproto::offsets,
  file_level_metadata_eco_2fframework_5fcontrol_2eproto, 2, file_level_enum_descriptors_eco_2fframework_5fcontrol_2eproto, file_level_service_descriptors_eco_2fframework_5fcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_eco_2fframework_5fcontrol_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_eco_2fframework_5fcontrol_2eproto), true);
namespace pb {
namespace eco {
namespace framework_control {

// ===================================================================

void FrameworkControl::InitAsDefaultInstance() {
  ::pb::eco::framework_control::_FrameworkControl_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::eco::framework_control::_FrameworkControl_default_instance_._instance.get_mutable()->firstlastexecution_ = const_cast< ::pb::eco::first_last_component_execution::FirstLastComponentExecution*>(
      ::pb::eco::first_last_component_execution::FirstLastComponentExecution::internal_default_instance());
}
class FrameworkControl::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameworkControl>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FrameworkControl* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opmode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cemcycleinittimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_endcycleestimatedtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opstate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_opmodeexectime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_windowscyclestart(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rawcyclestart(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::pb::eco::first_last_component_execution::FirstLastComponentExecution& firstlastexecution(const FrameworkControl* msg);
  static void set_has_firstlastexecution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_osemode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FrameworkControl::_Internal::ssigheader(const FrameworkControl* msg) {
  return *msg->ssigheader_;
}
const ::pb::eco::first_last_component_execution::FirstLastComponentExecution&
FrameworkControl::_Internal::firstlastexecution(const FrameworkControl* msg) {
  return *msg->firstlastexecution_;
}
void FrameworkControl::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FrameworkControl::clear_firstlastexecution() {
  if (firstlastexecution_ != nullptr) firstlastexecution_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FrameworkControl::FrameworkControl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.eco.framework_control.FrameworkControl)
}
FrameworkControl::FrameworkControl(const FrameworkControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      functionalerrorcode_(from.functionalerrorcode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_firstlastexecution()) {
    firstlastexecution_ = new ::pb::eco::first_last_component_execution::FirstLastComponentExecution(*from.firstlastexecution_);
  } else {
    firstlastexecution_ = nullptr;
  }
  ::memcpy(&endcycleestimatedtimestamp_, &from.endcycleestimatedtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&windowscyclestart_) -
    reinterpret_cast<char*>(&endcycleestimatedtimestamp_)) + sizeof(windowscyclestart_));
  // @@protoc_insertion_point(copy_constructor:pb.eco.framework_control.FrameworkControl)
}

void FrameworkControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&windowscyclestart_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(windowscyclestart_));
}

FrameworkControl::~FrameworkControl() {
  // @@protoc_insertion_point(destructor:pb.eco.framework_control.FrameworkControl)
  SharedDtor();
}

void FrameworkControl::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete firstlastexecution_;
}

void FrameworkControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameworkControl& FrameworkControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameworkControl_eco_2fframework_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void FrameworkControl::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.eco.framework_control.FrameworkControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  functionalerrorcode_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(firstlastexecution_ != nullptr);
      firstlastexecution_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&endcycleestimatedtimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opmode_) -
        reinterpret_cast<char*>(&endcycleestimatedtimestamp_)) + sizeof(opmode_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&opstate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&windowscyclestart_) -
        reinterpret_cast<char*>(&opstate_)) + sizeof(windowscyclestart_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FrameworkControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 endCycleEstimatedTimeStamp = 346;
      case 346:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_endcycleestimatedtimestamp(&has_bits);
          endcycleestimatedtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 errorCode = 551;
      case 551:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 opModeExecTime = 1118;
      case 1118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_opmodeexectime(&has_bits);
          opmodeexectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 functionalErrorCode = 1340;
      case 1340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_functionalerrorcode(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10720>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_functionalerrorcode(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool oseMode = 1953;
      case 1953:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_osemode(&has_bits);
          osemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.op_mode.OpMode opMode = 2269;
      case 2269:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::eco::op_mode::OpMode_IsValid(val))) {
            _internal_set_opmode(static_cast<::pb::eco::op_mode::OpMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2269, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.first_last_component_execution.FirstLastComponentExecution firstLastExecution = 2778;
      case 2778:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_firstlastexecution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 cemCycleInitTimeStamp = 3366;
      case 3366:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cemcycleinittimestamp(&has_bits);
          cemcycleinittimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rawCycleStart = 3429;
      case 3429:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rawcyclestart(&has_bits);
          rawcyclestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.comp_op_state.CompOpState opState = 3951;
      case 3951:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::eco::comp_op_state::CompOpState_IsValid(val))) {
            _internal_set_opstate(static_cast<::pb::eco::comp_op_state::CompOpState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3951, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 windowsCycleStart = 3964;
      case 3964:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_windowscyclestart(&has_bits);
          windowscyclestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameworkControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.eco.framework_control.FrameworkControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 endCycleEstimatedTimeStamp = 346;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(346, this->_internal_endcycleestimatedtimestamp(), target);
  }

  // optional uint64 errorCode = 551;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(551, this->_internal_errorcode(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional uint64 opModeExecTime = 1118;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1118, this->_internal_opmodeexectime(), target);
  }

  // repeated uint64 functionalErrorCode = 1340;
  for (int i = 0, n = this->_internal_functionalerrorcode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1340, this->_internal_functionalerrorcode(i), target);
  }

  // optional bool oseMode = 1953;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1953, this->_internal_osemode(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional .pb.eco.op_mode.OpMode opMode = 2269;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2269, this->_internal_opmode(), target);
  }

  // optional .pb.eco.first_last_component_execution.FirstLastComponentExecution firstLastExecution = 2778;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2778, _Internal::firstlastexecution(this), target, stream);
  }

  // optional uint64 cemCycleInitTimeStamp = 3366;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3366, this->_internal_cemcycleinittimestamp(), target);
  }

  // optional uint64 rawCycleStart = 3429;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3429, this->_internal_rawcyclestart(), target);
  }

  // optional .pb.eco.comp_op_state.CompOpState opState = 3951;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3951, this->_internal_opstate(), target);
  }

  // optional uint64 windowsCycleStart = 3964;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3964, this->_internal_windowscyclestart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.eco.framework_control.FrameworkControl)
  return target;
}

size_t FrameworkControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.eco.framework_control.FrameworkControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 functionalErrorCode = 1340;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->functionalerrorcode_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_functionalerrorcode_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.eco.first_last_component_execution.FirstLastComponentExecution firstLastExecution = 2778;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *firstlastexecution_);
    }

    // optional uint64 endCycleEstimatedTimeStamp = 346;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_endcycleestimatedtimestamp());
    }

    // optional uint64 errorCode = 551;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_errorcode());
    }

    // optional uint64 opModeExecTime = 1118;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_opmodeexectime());
    }

    // optional bool oseMode = 1953;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional .pb.eco.op_mode.OpMode opMode = 2269;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opmode());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .pb.eco.comp_op_state.CompOpState opState = 3951;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opstate());
    }

    // optional uint64 cemCycleInitTimeStamp = 3366;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_cemcycleinittimestamp());
    }

    // optional uint64 rawCycleStart = 3429;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rawcyclestart());
    }

    // optional uint64 windowsCycleStart = 3964;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_windowscyclestart());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameworkControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.eco.framework_control.FrameworkControl)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameworkControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameworkControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.eco.framework_control.FrameworkControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.eco.framework_control.FrameworkControl)
    MergeFrom(*source);
  }
}

void FrameworkControl::MergeFrom(const FrameworkControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.eco.framework_control.FrameworkControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  functionalerrorcode_.MergeFrom(from.functionalerrorcode_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_firstlastexecution()->::pb::eco::first_last_component_execution::FirstLastComponentExecution::MergeFrom(from._internal_firstlastexecution());
    }
    if (cached_has_bits & 0x00000004u) {
      endcycleestimatedtimestamp_ = from.endcycleestimatedtimestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      errorcode_ = from.errorcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      opmodeexectime_ = from.opmodeexectime_;
    }
    if (cached_has_bits & 0x00000020u) {
      osemode_ = from.osemode_;
    }
    if (cached_has_bits & 0x00000040u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      opmode_ = from.opmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      opstate_ = from.opstate_;
    }
    if (cached_has_bits & 0x00000200u) {
      cemcycleinittimestamp_ = from.cemcycleinittimestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      rawcyclestart_ = from.rawcyclestart_;
    }
    if (cached_has_bits & 0x00000800u) {
      windowscyclestart_ = from.windowscyclestart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameworkControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.eco.framework_control.FrameworkControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkControl::CopyFrom(const FrameworkControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.eco.framework_control.FrameworkControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkControl::IsInitialized() const {
  return true;
}

void FrameworkControl::InternalSwap(FrameworkControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  functionalerrorcode_.InternalSwap(&other->functionalerrorcode_);
  swap(ssigheader_, other->ssigheader_);
  swap(firstlastexecution_, other->firstlastexecution_);
  swap(endcycleestimatedtimestamp_, other->endcycleestimatedtimestamp_);
  swap(errorcode_, other->errorcode_);
  swap(opmodeexectime_, other->opmodeexectime_);
  swap(osemode_, other->osemode_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(opmode_, other->opmode_);
  swap(opstate_, other->opstate_);
  swap(cemcycleinittimestamp_, other->cemcycleinittimestamp_);
  swap(rawcyclestart_, other->rawcyclestart_);
  swap(windowscyclestart_, other->windowscyclestart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameworkControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameworkControl_array_port::InitAsDefaultInstance() {
}
class FrameworkControl_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameworkControl_array_port>()._has_bits_);
};

FrameworkControl_array_port::FrameworkControl_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.eco.framework_control.FrameworkControl_array_port)
}
FrameworkControl_array_port::FrameworkControl_array_port(const FrameworkControl_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.eco.framework_control.FrameworkControl_array_port)
}

void FrameworkControl_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameworkControl_array_port_eco_2fframework_5fcontrol_2eproto.base);
}

FrameworkControl_array_port::~FrameworkControl_array_port() {
  // @@protoc_insertion_point(destructor:pb.eco.framework_control.FrameworkControl_array_port)
  SharedDtor();
}

void FrameworkControl_array_port::SharedDtor() {
}

void FrameworkControl_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameworkControl_array_port& FrameworkControl_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameworkControl_array_port_eco_2fframework_5fcontrol_2eproto.base);
  return *internal_default_instance();
}


void FrameworkControl_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.eco.framework_control.FrameworkControl_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FrameworkControl_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.eco.framework_control.FrameworkControl data = 3870;
      case 3870:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameworkControl_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.eco.framework_control.FrameworkControl_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.eco.framework_control.FrameworkControl data = 3870;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3870, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.eco.framework_control.FrameworkControl_array_port)
  return target;
}

size_t FrameworkControl_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.eco.framework_control.FrameworkControl_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.eco.framework_control.FrameworkControl data = 3870;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameworkControl_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.eco.framework_control.FrameworkControl_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameworkControl_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameworkControl_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.eco.framework_control.FrameworkControl_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.eco.framework_control.FrameworkControl_array_port)
    MergeFrom(*source);
  }
}

void FrameworkControl_array_port::MergeFrom(const FrameworkControl_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.eco.framework_control.FrameworkControl_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FrameworkControl_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.eco.framework_control.FrameworkControl_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkControl_array_port::CopyFrom(const FrameworkControl_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.eco.framework_control.FrameworkControl_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkControl_array_port::IsInitialized() const {
  return true;
}

void FrameworkControl_array_port::InternalSwap(FrameworkControl_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameworkControl_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace framework_control
}  // namespace eco
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::eco::framework_control::FrameworkControl* Arena::CreateMaybeMessage< ::pb::eco::framework_control::FrameworkControl >(Arena* arena) {
  return Arena::CreateInternal< ::pb::eco::framework_control::FrameworkControl >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::eco::framework_control::FrameworkControl_array_port* Arena::CreateMaybeMessage< ::pb::eco::framework_control::FrameworkControl_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::eco::framework_control::FrameworkControl_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
