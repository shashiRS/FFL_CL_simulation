// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eco/sensor_mount_position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eco_2fsensor_5fmount_5fposition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eco_2fsensor_5fmount_5fposition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "eco/sensor_mounting_position_detailed.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eco_2fsensor_5fmount_5fposition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eco_2fsensor_5fmount_5fposition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eco_2fsensor_5fmount_5fposition_2eproto;
namespace pb {
namespace eco {
namespace sensor_mount_position {
class SensorMountPosition;
class SensorMountPositionDefaultTypeInternal;
extern SensorMountPositionDefaultTypeInternal _SensorMountPosition_default_instance_;
class SensorMountPosition_array_port;
class SensorMountPosition_array_portDefaultTypeInternal;
extern SensorMountPosition_array_portDefaultTypeInternal _SensorMountPosition_array_port_default_instance_;
}  // namespace sensor_mount_position
}  // namespace eco
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::eco::sensor_mount_position::SensorMountPosition* Arena::CreateMaybeMessage<::pb::eco::sensor_mount_position::SensorMountPosition>(Arena*);
template<> ::pb::eco::sensor_mount_position::SensorMountPosition_array_port* Arena::CreateMaybeMessage<::pb::eco::sensor_mount_position::SensorMountPosition_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace eco {
namespace sensor_mount_position {

// ===================================================================

class SensorMountPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.sensor_mount_position.SensorMountPosition) */ {
 public:
  SensorMountPosition();
  virtual ~SensorMountPosition();

  SensorMountPosition(const SensorMountPosition& from);
  SensorMountPosition(SensorMountPosition&& from) noexcept
    : SensorMountPosition() {
    *this = ::std::move(from);
  }

  inline SensorMountPosition& operator=(const SensorMountPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorMountPosition& operator=(SensorMountPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorMountPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMountPosition* internal_default_instance() {
    return reinterpret_cast<const SensorMountPosition*>(
               &_SensorMountPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorMountPosition& a, SensorMountPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorMountPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorMountPosition* New() const final {
    return CreateMaybeMessage<SensorMountPosition>(nullptr);
  }

  SensorMountPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorMountPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorMountPosition& from);
  void MergeFrom(const SensorMountPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMountPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.sensor_mount_position.SensorMountPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fsensor_5fmount_5fposition_2eproto);
    return ::descriptor_table_eco_2fsensor_5fmount_5fposition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigHeaderFieldNumber = 1450,
    kSensorMountPosFieldNumber = 2549,
    kIsSensorMountPosAvailableFieldNumber = 502,
    kSensorIdFieldNumber = 1529,
  };
  // optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
  bool has_sigheader() const;
  private:
  bool _internal_has_sigheader() const;
  public:
  void clear_sigheader();
  const ::pb::eco::signal_header::SignalHeader& sigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_sigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_sigheader();
  void set_allocated_sigheader(::pb::eco::signal_header::SignalHeader* sigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_sigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_sigheader();
  public:

  // optional .pb.eco.sensor_mounting_position_detailed.SensorMountingPositionDetailed sensorMountPos = 2549;
  bool has_sensormountpos() const;
  private:
  bool _internal_has_sensormountpos() const;
  public:
  void clear_sensormountpos();
  const ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed& sensormountpos() const;
  ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* release_sensormountpos();
  ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* mutable_sensormountpos();
  void set_allocated_sensormountpos(::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* sensormountpos);
  private:
  const ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed& _internal_sensormountpos() const;
  ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* _internal_mutable_sensormountpos();
  public:

  // optional bool isSensorMountPosAvailable = 502;
  bool has_issensormountposavailable() const;
  private:
  bool _internal_has_issensormountposavailable() const;
  public:
  void clear_issensormountposavailable();
  bool issensormountposavailable() const;
  void set_issensormountposavailable(bool value);
  private:
  bool _internal_issensormountposavailable() const;
  void _internal_set_issensormountposavailable(bool value);
  public:

  // optional uint32 sensorId = 1529;
  bool has_sensorid() const;
  private:
  bool _internal_has_sensorid() const;
  public:
  void clear_sensorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid() const;
  void set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensorid() const;
  void _internal_set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.eco.sensor_mount_position.SensorMountPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* sigheader_;
  ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* sensormountpos_;
  bool issensormountposavailable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorid_;
  friend struct ::TableStruct_eco_2fsensor_5fmount_5fposition_2eproto;
};
// -------------------------------------------------------------------

class SensorMountPosition_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.sensor_mount_position.SensorMountPosition_array_port) */ {
 public:
  SensorMountPosition_array_port();
  virtual ~SensorMountPosition_array_port();

  SensorMountPosition_array_port(const SensorMountPosition_array_port& from);
  SensorMountPosition_array_port(SensorMountPosition_array_port&& from) noexcept
    : SensorMountPosition_array_port() {
    *this = ::std::move(from);
  }

  inline SensorMountPosition_array_port& operator=(const SensorMountPosition_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorMountPosition_array_port& operator=(SensorMountPosition_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorMountPosition_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMountPosition_array_port* internal_default_instance() {
    return reinterpret_cast<const SensorMountPosition_array_port*>(
               &_SensorMountPosition_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorMountPosition_array_port& a, SensorMountPosition_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorMountPosition_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorMountPosition_array_port* New() const final {
    return CreateMaybeMessage<SensorMountPosition_array_port>(nullptr);
  }

  SensorMountPosition_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorMountPosition_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorMountPosition_array_port& from);
  void MergeFrom(const SensorMountPosition_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMountPosition_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.sensor_mount_position.SensorMountPosition_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fsensor_5fmount_5fposition_2eproto);
    return ::descriptor_table_eco_2fsensor_5fmount_5fposition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1758,
  };
  // repeated .pb.eco.sensor_mount_position.SensorMountPosition data = 1758;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::eco::sensor_mount_position::SensorMountPosition* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::sensor_mount_position::SensorMountPosition >*
      mutable_data();
  private:
  const ::pb::eco::sensor_mount_position::SensorMountPosition& _internal_data(int index) const;
  ::pb::eco::sensor_mount_position::SensorMountPosition* _internal_add_data();
  public:
  const ::pb::eco::sensor_mount_position::SensorMountPosition& data(int index) const;
  ::pb::eco::sensor_mount_position::SensorMountPosition* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::sensor_mount_position::SensorMountPosition >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.eco.sensor_mount_position.SensorMountPosition_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::sensor_mount_position::SensorMountPosition > data_;
  friend struct ::TableStruct_eco_2fsensor_5fmount_5fposition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorMountPosition

// optional .pb.eco.signal_header.SignalHeader sigHeader = 1450;
inline bool SensorMountPosition::_internal_has_sigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sigheader_ != nullptr);
  return value;
}
inline bool SensorMountPosition::has_sigheader() const {
  return _internal_has_sigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& SensorMountPosition::_internal_sigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = sigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& SensorMountPosition::sigheader() const {
  // @@protoc_insertion_point(field_get:pb.eco.sensor_mount_position.SensorMountPosition.sigHeader)
  return _internal_sigheader();
}
inline ::pb::eco::signal_header::SignalHeader* SensorMountPosition::release_sigheader() {
  // @@protoc_insertion_point(field_release:pb.eco.sensor_mount_position.SensorMountPosition.sigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = sigheader_;
  sigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* SensorMountPosition::_internal_mutable_sigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (sigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    sigheader_ = p;
  }
  return sigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* SensorMountPosition::mutable_sigheader() {
  // @@protoc_insertion_point(field_mutable:pb.eco.sensor_mount_position.SensorMountPosition.sigHeader)
  return _internal_mutable_sigheader();
}
inline void SensorMountPosition::set_allocated_sigheader(::pb::eco::signal_header::SignalHeader* sigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigheader_);
  }
  if (sigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sigheader_ = sigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.eco.sensor_mount_position.SensorMountPosition.sigHeader)
}

// optional uint32 sensorId = 1529;
inline bool SensorMountPosition::_internal_has_sensorid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SensorMountPosition::has_sensorid() const {
  return _internal_has_sensorid();
}
inline void SensorMountPosition::clear_sensorid() {
  sensorid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorMountPosition::_internal_sensorid() const {
  return sensorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorMountPosition::sensorid() const {
  // @@protoc_insertion_point(field_get:pb.eco.sensor_mount_position.SensorMountPosition.sensorId)
  return _internal_sensorid();
}
inline void SensorMountPosition::_internal_set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  sensorid_ = value;
}
inline void SensorMountPosition::set_sensorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensorid(value);
  // @@protoc_insertion_point(field_set:pb.eco.sensor_mount_position.SensorMountPosition.sensorId)
}

// optional .pb.eco.sensor_mounting_position_detailed.SensorMountingPositionDetailed sensorMountPos = 2549;
inline bool SensorMountPosition::_internal_has_sensormountpos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sensormountpos_ != nullptr);
  return value;
}
inline bool SensorMountPosition::has_sensormountpos() const {
  return _internal_has_sensormountpos();
}
inline const ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed& SensorMountPosition::_internal_sensormountpos() const {
  const ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* p = sensormountpos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed*>(
      &::pb::eco::sensor_mounting_position_detailed::_SensorMountingPositionDetailed_default_instance_);
}
inline const ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed& SensorMountPosition::sensormountpos() const {
  // @@protoc_insertion_point(field_get:pb.eco.sensor_mount_position.SensorMountPosition.sensorMountPos)
  return _internal_sensormountpos();
}
inline ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* SensorMountPosition::release_sensormountpos() {
  // @@protoc_insertion_point(field_release:pb.eco.sensor_mount_position.SensorMountPosition.sensorMountPos)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* temp = sensormountpos_;
  sensormountpos_ = nullptr;
  return temp;
}
inline ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* SensorMountPosition::_internal_mutable_sensormountpos() {
  _has_bits_[0] |= 0x00000002u;
  if (sensormountpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed>(GetArenaNoVirtual());
    sensormountpos_ = p;
  }
  return sensormountpos_;
}
inline ::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* SensorMountPosition::mutable_sensormountpos() {
  // @@protoc_insertion_point(field_mutable:pb.eco.sensor_mount_position.SensorMountPosition.sensorMountPos)
  return _internal_mutable_sensormountpos();
}
inline void SensorMountPosition::set_allocated_sensormountpos(::pb::eco::sensor_mounting_position_detailed::SensorMountingPositionDetailed* sensormountpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sensormountpos_);
  }
  if (sensormountpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensormountpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensormountpos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sensormountpos_ = sensormountpos;
  // @@protoc_insertion_point(field_set_allocated:pb.eco.sensor_mount_position.SensorMountPosition.sensorMountPos)
}

// optional bool isSensorMountPosAvailable = 502;
inline bool SensorMountPosition::_internal_has_issensormountposavailable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SensorMountPosition::has_issensormountposavailable() const {
  return _internal_has_issensormountposavailable();
}
inline void SensorMountPosition::clear_issensormountposavailable() {
  issensormountposavailable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SensorMountPosition::_internal_issensormountposavailable() const {
  return issensormountposavailable_;
}
inline bool SensorMountPosition::issensormountposavailable() const {
  // @@protoc_insertion_point(field_get:pb.eco.sensor_mount_position.SensorMountPosition.isSensorMountPosAvailable)
  return _internal_issensormountposavailable();
}
inline void SensorMountPosition::_internal_set_issensormountposavailable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  issensormountposavailable_ = value;
}
inline void SensorMountPosition::set_issensormountposavailable(bool value) {
  _internal_set_issensormountposavailable(value);
  // @@protoc_insertion_point(field_set:pb.eco.sensor_mount_position.SensorMountPosition.isSensorMountPosAvailable)
}

// -------------------------------------------------------------------

// SensorMountPosition_array_port

// repeated .pb.eco.sensor_mount_position.SensorMountPosition data = 1758;
inline int SensorMountPosition_array_port::_internal_data_size() const {
  return data_.size();
}
inline int SensorMountPosition_array_port::data_size() const {
  return _internal_data_size();
}
inline void SensorMountPosition_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::eco::sensor_mount_position::SensorMountPosition* SensorMountPosition_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.eco.sensor_mount_position.SensorMountPosition_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::sensor_mount_position::SensorMountPosition >*
SensorMountPosition_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.eco.sensor_mount_position.SensorMountPosition_array_port.data)
  return &data_;
}
inline const ::pb::eco::sensor_mount_position::SensorMountPosition& SensorMountPosition_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::eco::sensor_mount_position::SensorMountPosition& SensorMountPosition_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.eco.sensor_mount_position.SensorMountPosition_array_port.data)
  return _internal_data(index);
}
inline ::pb::eco::sensor_mount_position::SensorMountPosition* SensorMountPosition_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::eco::sensor_mount_position::SensorMountPosition* SensorMountPosition_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.eco.sensor_mount_position.SensorMountPosition_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::sensor_mount_position::SensorMountPosition >&
SensorMountPosition_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.eco.sensor_mount_position.SensorMountPosition_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_mount_position
}  // namespace eco
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eco_2fsensor_5fmount_5fposition_2eproto
