// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eco/signal_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eco_2fsignal_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eco_2fsignal_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/algo_signal_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eco_2fsignal_5fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace eco {
namespace signal_header {
class SignalHeader;
class SignalHeaderDefaultTypeInternal;
extern SignalHeaderDefaultTypeInternal _SignalHeader_default_instance_;
class SignalHeader_array_port;
class SignalHeader_array_portDefaultTypeInternal;
extern SignalHeader_array_portDefaultTypeInternal _SignalHeader_array_port_default_instance_;
}  // namespace signal_header
}  // namespace eco
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::eco::signal_header::SignalHeader* Arena::CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(Arena*);
template<> ::pb::eco::signal_header::SignalHeader_array_port* Arena::CreateMaybeMessage<::pb::eco::signal_header::SignalHeader_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace eco {
namespace signal_header {

// ===================================================================

class SignalHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.signal_header.SignalHeader) */ {
 public:
  SignalHeader();
  virtual ~SignalHeader();

  SignalHeader(const SignalHeader& from);
  SignalHeader(SignalHeader&& from) noexcept
    : SignalHeader() {
    *this = ::std::move(from);
  }

  inline SignalHeader& operator=(const SignalHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalHeader& operator=(SignalHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalHeader* internal_default_instance() {
    return reinterpret_cast<const SignalHeader*>(
               &_SignalHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignalHeader& a, SignalHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalHeader* New() const final {
    return CreateMaybeMessage<SignalHeader>(nullptr);
  }

  SignalHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalHeader& from);
  void MergeFrom(const SignalHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.signal_header.SignalHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fsignal_5fheader_2eproto);
    return ::descriptor_table_eco_2fsignal_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiMeasurementCounterFieldNumber = 3754,
    kESigStatusFieldNumber = 722,
    kUiCycleCounterFieldNumber = 1597,
    kUiTimeStampFieldNumber = 2263,
  };
  // optional uint32 uiMeasurementCounter = 3754;
  bool has_uimeasurementcounter() const;
  private:
  bool _internal_has_uimeasurementcounter() const;
  public:
  void clear_uimeasurementcounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 uimeasurementcounter() const;
  void set_uimeasurementcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uimeasurementcounter() const;
  void _internal_set_uimeasurementcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.eco.algo_signal_state.AlgoSignalState eSigStatus = 722;
  bool has_esigstatus() const;
  private:
  bool _internal_has_esigstatus() const;
  public:
  void clear_esigstatus();
  ::pb::eco::algo_signal_state::AlgoSignalState esigstatus() const;
  void set_esigstatus(::pb::eco::algo_signal_state::AlgoSignalState value);
  private:
  ::pb::eco::algo_signal_state::AlgoSignalState _internal_esigstatus() const;
  void _internal_set_esigstatus(::pb::eco::algo_signal_state::AlgoSignalState value);
  public:

  // optional uint32 uiCycleCounter = 1597;
  bool has_uicyclecounter() const;
  private:
  bool _internal_has_uicyclecounter() const;
  public:
  void clear_uicyclecounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 uicyclecounter() const;
  void set_uicyclecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uicyclecounter() const;
  void _internal_set_uicyclecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 uiTimeStamp = 2263;
  bool has_uitimestamp() const;
  private:
  bool _internal_has_uitimestamp() const;
  public:
  void clear_uitimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 uitimestamp() const;
  void set_uitimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uitimestamp() const;
  void _internal_set_uitimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.eco.signal_header.SignalHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uimeasurementcounter_;
  int esigstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uicyclecounter_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uitimestamp_;
  friend struct ::TableStruct_eco_2fsignal_5fheader_2eproto;
};
// -------------------------------------------------------------------

class SignalHeader_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.signal_header.SignalHeader_array_port) */ {
 public:
  SignalHeader_array_port();
  virtual ~SignalHeader_array_port();

  SignalHeader_array_port(const SignalHeader_array_port& from);
  SignalHeader_array_port(SignalHeader_array_port&& from) noexcept
    : SignalHeader_array_port() {
    *this = ::std::move(from);
  }

  inline SignalHeader_array_port& operator=(const SignalHeader_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalHeader_array_port& operator=(SignalHeader_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalHeader_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalHeader_array_port* internal_default_instance() {
    return reinterpret_cast<const SignalHeader_array_port*>(
               &_SignalHeader_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignalHeader_array_port& a, SignalHeader_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalHeader_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalHeader_array_port* New() const final {
    return CreateMaybeMessage<SignalHeader_array_port>(nullptr);
  }

  SignalHeader_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalHeader_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalHeader_array_port& from);
  void MergeFrom(const SignalHeader_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalHeader_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.signal_header.SignalHeader_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fsignal_5fheader_2eproto);
    return ::descriptor_table_eco_2fsignal_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3179,
  };
  // repeated .pb.eco.signal_header.SignalHeader data = 3179;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::eco::signal_header::SignalHeader* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::signal_header::SignalHeader >*
      mutable_data();
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_data(int index) const;
  ::pb::eco::signal_header::SignalHeader* _internal_add_data();
  public:
  const ::pb::eco::signal_header::SignalHeader& data(int index) const;
  ::pb::eco::signal_header::SignalHeader* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::signal_header::SignalHeader >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.eco.signal_header.SignalHeader_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::signal_header::SignalHeader > data_;
  friend struct ::TableStruct_eco_2fsignal_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignalHeader

// optional uint64 uiTimeStamp = 2263;
inline bool SignalHeader::_internal_has_uitimestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SignalHeader::has_uitimestamp() const {
  return _internal_has_uitimestamp();
}
inline void SignalHeader::clear_uitimestamp() {
  uitimestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalHeader::_internal_uitimestamp() const {
  return uitimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignalHeader::uitimestamp() const {
  // @@protoc_insertion_point(field_get:pb.eco.signal_header.SignalHeader.uiTimeStamp)
  return _internal_uitimestamp();
}
inline void SignalHeader::_internal_set_uitimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  uitimestamp_ = value;
}
inline void SignalHeader::set_uitimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uitimestamp(value);
  // @@protoc_insertion_point(field_set:pb.eco.signal_header.SignalHeader.uiTimeStamp)
}

// optional uint32 uiMeasurementCounter = 3754;
inline bool SignalHeader::_internal_has_uimeasurementcounter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalHeader::has_uimeasurementcounter() const {
  return _internal_has_uimeasurementcounter();
}
inline void SignalHeader::clear_uimeasurementcounter() {
  uimeasurementcounter_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignalHeader::_internal_uimeasurementcounter() const {
  return uimeasurementcounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignalHeader::uimeasurementcounter() const {
  // @@protoc_insertion_point(field_get:pb.eco.signal_header.SignalHeader.uiMeasurementCounter)
  return _internal_uimeasurementcounter();
}
inline void SignalHeader::_internal_set_uimeasurementcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  uimeasurementcounter_ = value;
}
inline void SignalHeader::set_uimeasurementcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uimeasurementcounter(value);
  // @@protoc_insertion_point(field_set:pb.eco.signal_header.SignalHeader.uiMeasurementCounter)
}

// optional uint32 uiCycleCounter = 1597;
inline bool SignalHeader::_internal_has_uicyclecounter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignalHeader::has_uicyclecounter() const {
  return _internal_has_uicyclecounter();
}
inline void SignalHeader::clear_uicyclecounter() {
  uicyclecounter_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignalHeader::_internal_uicyclecounter() const {
  return uicyclecounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignalHeader::uicyclecounter() const {
  // @@protoc_insertion_point(field_get:pb.eco.signal_header.SignalHeader.uiCycleCounter)
  return _internal_uicyclecounter();
}
inline void SignalHeader::_internal_set_uicyclecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  uicyclecounter_ = value;
}
inline void SignalHeader::set_uicyclecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uicyclecounter(value);
  // @@protoc_insertion_point(field_set:pb.eco.signal_header.SignalHeader.uiCycleCounter)
}

// optional .pb.eco.algo_signal_state.AlgoSignalState eSigStatus = 722;
inline bool SignalHeader::_internal_has_esigstatus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignalHeader::has_esigstatus() const {
  return _internal_has_esigstatus();
}
inline void SignalHeader::clear_esigstatus() {
  esigstatus_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::eco::algo_signal_state::AlgoSignalState SignalHeader::_internal_esigstatus() const {
  return static_cast< ::pb::eco::algo_signal_state::AlgoSignalState >(esigstatus_);
}
inline ::pb::eco::algo_signal_state::AlgoSignalState SignalHeader::esigstatus() const {
  // @@protoc_insertion_point(field_get:pb.eco.signal_header.SignalHeader.eSigStatus)
  return _internal_esigstatus();
}
inline void SignalHeader::_internal_set_esigstatus(::pb::eco::algo_signal_state::AlgoSignalState value) {
  assert(::pb::eco::algo_signal_state::AlgoSignalState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  esigstatus_ = value;
}
inline void SignalHeader::set_esigstatus(::pb::eco::algo_signal_state::AlgoSignalState value) {
  _internal_set_esigstatus(value);
  // @@protoc_insertion_point(field_set:pb.eco.signal_header.SignalHeader.eSigStatus)
}

// -------------------------------------------------------------------

// SignalHeader_array_port

// repeated .pb.eco.signal_header.SignalHeader data = 3179;
inline int SignalHeader_array_port::_internal_data_size() const {
  return data_.size();
}
inline int SignalHeader_array_port::data_size() const {
  return _internal_data_size();
}
inline void SignalHeader_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::eco::signal_header::SignalHeader* SignalHeader_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.eco.signal_header.SignalHeader_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::signal_header::SignalHeader >*
SignalHeader_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.eco.signal_header.SignalHeader_array_port.data)
  return &data_;
}
inline const ::pb::eco::signal_header::SignalHeader& SignalHeader_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::eco::signal_header::SignalHeader& SignalHeader_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.eco.signal_header.SignalHeader_array_port.data)
  return _internal_data(index);
}
inline ::pb::eco::signal_header::SignalHeader* SignalHeader_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::eco::signal_header::SignalHeader* SignalHeader_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.eco.signal_header.SignalHeader_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::signal_header::SignalHeader >&
SignalHeader_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.eco.signal_header.SignalHeader_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace signal_header
}  // namespace eco
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eco_2fsignal_5fheader_2eproto
