// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eco/framework_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eco_2fframework_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eco_2fframework_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "eco/op_mode.pb.h"
#include "eco/comp_op_state.pb.h"
#include "eco/first_last_component_execution.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eco_2fframework_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eco_2fframework_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eco_2fframework_5fcontrol_2eproto;
namespace pb {
namespace eco {
namespace framework_control {
class FrameworkControl;
class FrameworkControlDefaultTypeInternal;
extern FrameworkControlDefaultTypeInternal _FrameworkControl_default_instance_;
class FrameworkControl_array_port;
class FrameworkControl_array_portDefaultTypeInternal;
extern FrameworkControl_array_portDefaultTypeInternal _FrameworkControl_array_port_default_instance_;
}  // namespace framework_control
}  // namespace eco
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::eco::framework_control::FrameworkControl* Arena::CreateMaybeMessage<::pb::eco::framework_control::FrameworkControl>(Arena*);
template<> ::pb::eco::framework_control::FrameworkControl_array_port* Arena::CreateMaybeMessage<::pb::eco::framework_control::FrameworkControl_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace eco {
namespace framework_control {

// ===================================================================

class FrameworkControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.framework_control.FrameworkControl) */ {
 public:
  FrameworkControl();
  virtual ~FrameworkControl();

  FrameworkControl(const FrameworkControl& from);
  FrameworkControl(FrameworkControl&& from) noexcept
    : FrameworkControl() {
    *this = ::std::move(from);
  }

  inline FrameworkControl& operator=(const FrameworkControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameworkControl& operator=(FrameworkControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameworkControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameworkControl* internal_default_instance() {
    return reinterpret_cast<const FrameworkControl*>(
               &_FrameworkControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameworkControl& a, FrameworkControl& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameworkControl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameworkControl* New() const final {
    return CreateMaybeMessage<FrameworkControl>(nullptr);
  }

  FrameworkControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameworkControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameworkControl& from);
  void MergeFrom(const FrameworkControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameworkControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.framework_control.FrameworkControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fframework_5fcontrol_2eproto);
    return ::descriptor_table_eco_2fframework_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionalErrorCodeFieldNumber = 1340,
    kSSigHeaderFieldNumber = 1033,
    kFirstLastExecutionFieldNumber = 2778,
    kEndCycleEstimatedTimeStampFieldNumber = 346,
    kErrorCodeFieldNumber = 551,
    kOpModeExecTimeFieldNumber = 1118,
    kOseModeFieldNumber = 1953,
    kUiVersionNumberFieldNumber = 2124,
    kOpModeFieldNumber = 2269,
    kOpStateFieldNumber = 3951,
    kCemCycleInitTimeStampFieldNumber = 3366,
    kRawCycleStartFieldNumber = 3429,
    kWindowsCycleStartFieldNumber = 3964,
  };
  // repeated uint64 functionalErrorCode = 1340;
  int functionalerrorcode_size() const;
  private:
  int _internal_functionalerrorcode_size() const;
  public:
  void clear_functionalerrorcode();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_functionalerrorcode(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_functionalerrorcode() const;
  void _internal_add_functionalerrorcode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_functionalerrorcode();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 functionalerrorcode(int index) const;
  void set_functionalerrorcode(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_functionalerrorcode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      functionalerrorcode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_functionalerrorcode();

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.eco.first_last_component_execution.FirstLastComponentExecution firstLastExecution = 2778;
  bool has_firstlastexecution() const;
  private:
  bool _internal_has_firstlastexecution() const;
  public:
  void clear_firstlastexecution();
  const ::pb::eco::first_last_component_execution::FirstLastComponentExecution& firstlastexecution() const;
  ::pb::eco::first_last_component_execution::FirstLastComponentExecution* release_firstlastexecution();
  ::pb::eco::first_last_component_execution::FirstLastComponentExecution* mutable_firstlastexecution();
  void set_allocated_firstlastexecution(::pb::eco::first_last_component_execution::FirstLastComponentExecution* firstlastexecution);
  private:
  const ::pb::eco::first_last_component_execution::FirstLastComponentExecution& _internal_firstlastexecution() const;
  ::pb::eco::first_last_component_execution::FirstLastComponentExecution* _internal_mutable_firstlastexecution();
  public:

  // optional uint64 endCycleEstimatedTimeStamp = 346;
  bool has_endcycleestimatedtimestamp() const;
  private:
  bool _internal_has_endcycleestimatedtimestamp() const;
  public:
  void clear_endcycleestimatedtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 endcycleestimatedtimestamp() const;
  void set_endcycleestimatedtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_endcycleestimatedtimestamp() const;
  void _internal_set_endcycleestimatedtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 errorCode = 551;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint64 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 opModeExecTime = 1118;
  bool has_opmodeexectime() const;
  private:
  bool _internal_has_opmodeexectime() const;
  public:
  void clear_opmodeexectime();
  ::PROTOBUF_NAMESPACE_ID::uint64 opmodeexectime() const;
  void set_opmodeexectime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opmodeexectime() const;
  void _internal_set_opmodeexectime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool oseMode = 1953;
  bool has_osemode() const;
  private:
  bool _internal_has_osemode() const;
  public:
  void clear_osemode();
  bool osemode() const;
  void set_osemode(bool value);
  private:
  bool _internal_osemode() const;
  void _internal_set_osemode(bool value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.eco.op_mode.OpMode opMode = 2269;
  bool has_opmode() const;
  private:
  bool _internal_has_opmode() const;
  public:
  void clear_opmode();
  ::pb::eco::op_mode::OpMode opmode() const;
  void set_opmode(::pb::eco::op_mode::OpMode value);
  private:
  ::pb::eco::op_mode::OpMode _internal_opmode() const;
  void _internal_set_opmode(::pb::eco::op_mode::OpMode value);
  public:

  // optional .pb.eco.comp_op_state.CompOpState opState = 3951;
  bool has_opstate() const;
  private:
  bool _internal_has_opstate() const;
  public:
  void clear_opstate();
  ::pb::eco::comp_op_state::CompOpState opstate() const;
  void set_opstate(::pb::eco::comp_op_state::CompOpState value);
  private:
  ::pb::eco::comp_op_state::CompOpState _internal_opstate() const;
  void _internal_set_opstate(::pb::eco::comp_op_state::CompOpState value);
  public:

  // optional uint64 cemCycleInitTimeStamp = 3366;
  bool has_cemcycleinittimestamp() const;
  private:
  bool _internal_has_cemcycleinittimestamp() const;
  public:
  void clear_cemcycleinittimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 cemcycleinittimestamp() const;
  void set_cemcycleinittimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cemcycleinittimestamp() const;
  void _internal_set_cemcycleinittimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 rawCycleStart = 3429;
  bool has_rawcyclestart() const;
  private:
  bool _internal_has_rawcyclestart() const;
  public:
  void clear_rawcyclestart();
  ::PROTOBUF_NAMESPACE_ID::uint64 rawcyclestart() const;
  void set_rawcyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rawcyclestart() const;
  void _internal_set_rawcyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 windowsCycleStart = 3964;
  bool has_windowscyclestart() const;
  private:
  bool _internal_has_windowscyclestart() const;
  public:
  void clear_windowscyclestart();
  ::PROTOBUF_NAMESPACE_ID::uint64 windowscyclestart() const;
  void set_windowscyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_windowscyclestart() const;
  void _internal_set_windowscyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.eco.framework_control.FrameworkControl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > functionalerrorcode_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::pb::eco::first_last_component_execution::FirstLastComponentExecution* firstlastexecution_;
  ::PROTOBUF_NAMESPACE_ID::uint64 endcycleestimatedtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 errorcode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opmodeexectime_;
  bool osemode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  int opmode_;
  int opstate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cemcycleinittimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rawcyclestart_;
  ::PROTOBUF_NAMESPACE_ID::uint64 windowscyclestart_;
  friend struct ::TableStruct_eco_2fframework_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class FrameworkControl_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.eco.framework_control.FrameworkControl_array_port) */ {
 public:
  FrameworkControl_array_port();
  virtual ~FrameworkControl_array_port();

  FrameworkControl_array_port(const FrameworkControl_array_port& from);
  FrameworkControl_array_port(FrameworkControl_array_port&& from) noexcept
    : FrameworkControl_array_port() {
    *this = ::std::move(from);
  }

  inline FrameworkControl_array_port& operator=(const FrameworkControl_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameworkControl_array_port& operator=(FrameworkControl_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameworkControl_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameworkControl_array_port* internal_default_instance() {
    return reinterpret_cast<const FrameworkControl_array_port*>(
               &_FrameworkControl_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameworkControl_array_port& a, FrameworkControl_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameworkControl_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameworkControl_array_port* New() const final {
    return CreateMaybeMessage<FrameworkControl_array_port>(nullptr);
  }

  FrameworkControl_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameworkControl_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameworkControl_array_port& from);
  void MergeFrom(const FrameworkControl_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameworkControl_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.eco.framework_control.FrameworkControl_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eco_2fframework_5fcontrol_2eproto);
    return ::descriptor_table_eco_2fframework_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3870,
  };
  // repeated .pb.eco.framework_control.FrameworkControl data = 3870;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::eco::framework_control::FrameworkControl* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::framework_control::FrameworkControl >*
      mutable_data();
  private:
  const ::pb::eco::framework_control::FrameworkControl& _internal_data(int index) const;
  ::pb::eco::framework_control::FrameworkControl* _internal_add_data();
  public:
  const ::pb::eco::framework_control::FrameworkControl& data(int index) const;
  ::pb::eco::framework_control::FrameworkControl* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::framework_control::FrameworkControl >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.eco.framework_control.FrameworkControl_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::framework_control::FrameworkControl > data_;
  friend struct ::TableStruct_eco_2fframework_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameworkControl

// optional uint32 uiVersionNumber = 2124;
inline bool FrameworkControl::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FrameworkControl::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FrameworkControl::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameworkControl::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameworkControl::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FrameworkControl::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  uiversionnumber_ = value;
}
inline void FrameworkControl::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FrameworkControl::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FrameworkControl::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FrameworkControl::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FrameworkControl::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FrameworkControl::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.eco.framework_control.FrameworkControl.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FrameworkControl::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FrameworkControl::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.eco.framework_control.FrameworkControl.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FrameworkControl::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.eco.framework_control.FrameworkControl.sSigHeader)
}

// optional .pb.eco.op_mode.OpMode opMode = 2269;
inline bool FrameworkControl::_internal_has_opmode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FrameworkControl::has_opmode() const {
  return _internal_has_opmode();
}
inline void FrameworkControl::clear_opmode() {
  opmode_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::eco::op_mode::OpMode FrameworkControl::_internal_opmode() const {
  return static_cast< ::pb::eco::op_mode::OpMode >(opmode_);
}
inline ::pb::eco::op_mode::OpMode FrameworkControl::opmode() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.opMode)
  return _internal_opmode();
}
inline void FrameworkControl::_internal_set_opmode(::pb::eco::op_mode::OpMode value) {
  assert(::pb::eco::op_mode::OpMode_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  opmode_ = value;
}
inline void FrameworkControl::set_opmode(::pb::eco::op_mode::OpMode value) {
  _internal_set_opmode(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.opMode)
}

// optional uint64 cemCycleInitTimeStamp = 3366;
inline bool FrameworkControl::_internal_has_cemcycleinittimestamp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FrameworkControl::has_cemcycleinittimestamp() const {
  return _internal_has_cemcycleinittimestamp();
}
inline void FrameworkControl::clear_cemcycleinittimestamp() {
  cemcycleinittimestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::_internal_cemcycleinittimestamp() const {
  return cemcycleinittimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::cemcycleinittimestamp() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.cemCycleInitTimeStamp)
  return _internal_cemcycleinittimestamp();
}
inline void FrameworkControl::_internal_set_cemcycleinittimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  cemcycleinittimestamp_ = value;
}
inline void FrameworkControl::set_cemcycleinittimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cemcycleinittimestamp(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.cemCycleInitTimeStamp)
}

// optional uint64 endCycleEstimatedTimeStamp = 346;
inline bool FrameworkControl::_internal_has_endcycleestimatedtimestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrameworkControl::has_endcycleestimatedtimestamp() const {
  return _internal_has_endcycleestimatedtimestamp();
}
inline void FrameworkControl::clear_endcycleestimatedtimestamp() {
  endcycleestimatedtimestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::_internal_endcycleestimatedtimestamp() const {
  return endcycleestimatedtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::endcycleestimatedtimestamp() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.endCycleEstimatedTimeStamp)
  return _internal_endcycleestimatedtimestamp();
}
inline void FrameworkControl::_internal_set_endcycleestimatedtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  endcycleestimatedtimestamp_ = value;
}
inline void FrameworkControl::set_endcycleestimatedtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_endcycleestimatedtimestamp(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.endCycleEstimatedTimeStamp)
}

// optional .pb.eco.comp_op_state.CompOpState opState = 3951;
inline bool FrameworkControl::_internal_has_opstate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FrameworkControl::has_opstate() const {
  return _internal_has_opstate();
}
inline void FrameworkControl::clear_opstate() {
  opstate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::pb::eco::comp_op_state::CompOpState FrameworkControl::_internal_opstate() const {
  return static_cast< ::pb::eco::comp_op_state::CompOpState >(opstate_);
}
inline ::pb::eco::comp_op_state::CompOpState FrameworkControl::opstate() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.opState)
  return _internal_opstate();
}
inline void FrameworkControl::_internal_set_opstate(::pb::eco::comp_op_state::CompOpState value) {
  assert(::pb::eco::comp_op_state::CompOpState_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  opstate_ = value;
}
inline void FrameworkControl::set_opstate(::pb::eco::comp_op_state::CompOpState value) {
  _internal_set_opstate(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.opState)
}

// optional uint64 opModeExecTime = 1118;
inline bool FrameworkControl::_internal_has_opmodeexectime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FrameworkControl::has_opmodeexectime() const {
  return _internal_has_opmodeexectime();
}
inline void FrameworkControl::clear_opmodeexectime() {
  opmodeexectime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::_internal_opmodeexectime() const {
  return opmodeexectime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::opmodeexectime() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.opModeExecTime)
  return _internal_opmodeexectime();
}
inline void FrameworkControl::_internal_set_opmodeexectime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  opmodeexectime_ = value;
}
inline void FrameworkControl::set_opmodeexectime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opmodeexectime(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.opModeExecTime)
}

// optional uint64 errorCode = 551;
inline bool FrameworkControl::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FrameworkControl::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void FrameworkControl::clear_errorcode() {
  errorcode_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::errorcode() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.errorCode)
  return _internal_errorcode();
}
inline void FrameworkControl::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  errorcode_ = value;
}
inline void FrameworkControl::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.errorCode)
}

// repeated uint64 functionalErrorCode = 1340;
inline int FrameworkControl::_internal_functionalerrorcode_size() const {
  return functionalerrorcode_.size();
}
inline int FrameworkControl::functionalerrorcode_size() const {
  return _internal_functionalerrorcode_size();
}
inline void FrameworkControl::clear_functionalerrorcode() {
  functionalerrorcode_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::_internal_functionalerrorcode(int index) const {
  return functionalerrorcode_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::functionalerrorcode(int index) const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.functionalErrorCode)
  return _internal_functionalerrorcode(index);
}
inline void FrameworkControl::set_functionalerrorcode(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  functionalerrorcode_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.functionalErrorCode)
}
inline void FrameworkControl::_internal_add_functionalerrorcode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  functionalerrorcode_.Add(value);
}
inline void FrameworkControl::add_functionalerrorcode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_functionalerrorcode(value);
  // @@protoc_insertion_point(field_add:pb.eco.framework_control.FrameworkControl.functionalErrorCode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FrameworkControl::_internal_functionalerrorcode() const {
  return functionalerrorcode_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FrameworkControl::functionalerrorcode() const {
  // @@protoc_insertion_point(field_list:pb.eco.framework_control.FrameworkControl.functionalErrorCode)
  return _internal_functionalerrorcode();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FrameworkControl::_internal_mutable_functionalerrorcode() {
  return &functionalerrorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FrameworkControl::mutable_functionalerrorcode() {
  // @@protoc_insertion_point(field_mutable_list:pb.eco.framework_control.FrameworkControl.functionalErrorCode)
  return _internal_mutable_functionalerrorcode();
}

// optional uint64 windowsCycleStart = 3964;
inline bool FrameworkControl::_internal_has_windowscyclestart() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FrameworkControl::has_windowscyclestart() const {
  return _internal_has_windowscyclestart();
}
inline void FrameworkControl::clear_windowscyclestart() {
  windowscyclestart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::_internal_windowscyclestart() const {
  return windowscyclestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::windowscyclestart() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.windowsCycleStart)
  return _internal_windowscyclestart();
}
inline void FrameworkControl::_internal_set_windowscyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  windowscyclestart_ = value;
}
inline void FrameworkControl::set_windowscyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_windowscyclestart(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.windowsCycleStart)
}

// optional uint64 rawCycleStart = 3429;
inline bool FrameworkControl::_internal_has_rawcyclestart() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FrameworkControl::has_rawcyclestart() const {
  return _internal_has_rawcyclestart();
}
inline void FrameworkControl::clear_rawcyclestart() {
  rawcyclestart_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::_internal_rawcyclestart() const {
  return rawcyclestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrameworkControl::rawcyclestart() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.rawCycleStart)
  return _internal_rawcyclestart();
}
inline void FrameworkControl::_internal_set_rawcyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  rawcyclestart_ = value;
}
inline void FrameworkControl::set_rawcyclestart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rawcyclestart(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.rawCycleStart)
}

// optional .pb.eco.first_last_component_execution.FirstLastComponentExecution firstLastExecution = 2778;
inline bool FrameworkControl::_internal_has_firstlastexecution() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || firstlastexecution_ != nullptr);
  return value;
}
inline bool FrameworkControl::has_firstlastexecution() const {
  return _internal_has_firstlastexecution();
}
inline const ::pb::eco::first_last_component_execution::FirstLastComponentExecution& FrameworkControl::_internal_firstlastexecution() const {
  const ::pb::eco::first_last_component_execution::FirstLastComponentExecution* p = firstlastexecution_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::first_last_component_execution::FirstLastComponentExecution*>(
      &::pb::eco::first_last_component_execution::_FirstLastComponentExecution_default_instance_);
}
inline const ::pb::eco::first_last_component_execution::FirstLastComponentExecution& FrameworkControl::firstlastexecution() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.firstLastExecution)
  return _internal_firstlastexecution();
}
inline ::pb::eco::first_last_component_execution::FirstLastComponentExecution* FrameworkControl::release_firstlastexecution() {
  // @@protoc_insertion_point(field_release:pb.eco.framework_control.FrameworkControl.firstLastExecution)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::eco::first_last_component_execution::FirstLastComponentExecution* temp = firstlastexecution_;
  firstlastexecution_ = nullptr;
  return temp;
}
inline ::pb::eco::first_last_component_execution::FirstLastComponentExecution* FrameworkControl::_internal_mutable_firstlastexecution() {
  _has_bits_[0] |= 0x00000002u;
  if (firstlastexecution_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::first_last_component_execution::FirstLastComponentExecution>(GetArenaNoVirtual());
    firstlastexecution_ = p;
  }
  return firstlastexecution_;
}
inline ::pb::eco::first_last_component_execution::FirstLastComponentExecution* FrameworkControl::mutable_firstlastexecution() {
  // @@protoc_insertion_point(field_mutable:pb.eco.framework_control.FrameworkControl.firstLastExecution)
  return _internal_mutable_firstlastexecution();
}
inline void FrameworkControl::set_allocated_firstlastexecution(::pb::eco::first_last_component_execution::FirstLastComponentExecution* firstlastexecution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(firstlastexecution_);
  }
  if (firstlastexecution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      firstlastexecution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firstlastexecution, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  firstlastexecution_ = firstlastexecution;
  // @@protoc_insertion_point(field_set_allocated:pb.eco.framework_control.FrameworkControl.firstLastExecution)
}

// optional bool oseMode = 1953;
inline bool FrameworkControl::_internal_has_osemode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FrameworkControl::has_osemode() const {
  return _internal_has_osemode();
}
inline void FrameworkControl::clear_osemode() {
  osemode_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FrameworkControl::_internal_osemode() const {
  return osemode_;
}
inline bool FrameworkControl::osemode() const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl.oseMode)
  return _internal_osemode();
}
inline void FrameworkControl::_internal_set_osemode(bool value) {
  _has_bits_[0] |= 0x00000020u;
  osemode_ = value;
}
inline void FrameworkControl::set_osemode(bool value) {
  _internal_set_osemode(value);
  // @@protoc_insertion_point(field_set:pb.eco.framework_control.FrameworkControl.oseMode)
}

// -------------------------------------------------------------------

// FrameworkControl_array_port

// repeated .pb.eco.framework_control.FrameworkControl data = 3870;
inline int FrameworkControl_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FrameworkControl_array_port::data_size() const {
  return _internal_data_size();
}
inline void FrameworkControl_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::eco::framework_control::FrameworkControl* FrameworkControl_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.eco.framework_control.FrameworkControl_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::framework_control::FrameworkControl >*
FrameworkControl_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.eco.framework_control.FrameworkControl_array_port.data)
  return &data_;
}
inline const ::pb::eco::framework_control::FrameworkControl& FrameworkControl_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::eco::framework_control::FrameworkControl& FrameworkControl_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.eco.framework_control.FrameworkControl_array_port.data)
  return _internal_data(index);
}
inline ::pb::eco::framework_control::FrameworkControl* FrameworkControl_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::eco::framework_control::FrameworkControl* FrameworkControl_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.eco.framework_control.FrameworkControl_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::eco::framework_control::FrameworkControl >&
FrameworkControl_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.eco.framework_control.FrameworkControl_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace framework_control
}  // namespace eco
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eco_2fframework_5fcontrol_2eproto
