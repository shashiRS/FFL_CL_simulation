// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_drvwarnsm/fc_drv_warn_sm_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto;
namespace pb {
namespace mf_drvwarnsm {
namespace fc_drv_warn_sm_params {
class FC_DrvWarnSM_Params;
class FC_DrvWarnSM_ParamsDefaultTypeInternal;
extern FC_DrvWarnSM_ParamsDefaultTypeInternal _FC_DrvWarnSM_Params_default_instance_;
class FC_DrvWarnSM_Params_array_port;
class FC_DrvWarnSM_Params_array_portDefaultTypeInternal;
extern FC_DrvWarnSM_Params_array_portDefaultTypeInternal _FC_DrvWarnSM_Params_array_port_default_instance_;
}  // namespace fc_drv_warn_sm_params
}  // namespace mf_drvwarnsm
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* Arena::CreateMaybeMessage<::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params>(Arena*);
template<> ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port* Arena::CreateMaybeMessage<::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_drvwarnsm {
namespace fc_drv_warn_sm_params {

// ===================================================================

class FC_DrvWarnSM_Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params) */ {
 public:
  FC_DrvWarnSM_Params();
  virtual ~FC_DrvWarnSM_Params();

  FC_DrvWarnSM_Params(const FC_DrvWarnSM_Params& from);
  FC_DrvWarnSM_Params(FC_DrvWarnSM_Params&& from) noexcept
    : FC_DrvWarnSM_Params() {
    *this = ::std::move(from);
  }

  inline FC_DrvWarnSM_Params& operator=(const FC_DrvWarnSM_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_DrvWarnSM_Params& operator=(FC_DrvWarnSM_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_DrvWarnSM_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_DrvWarnSM_Params* internal_default_instance() {
    return reinterpret_cast<const FC_DrvWarnSM_Params*>(
               &_FC_DrvWarnSM_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FC_DrvWarnSM_Params& a, FC_DrvWarnSM_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_DrvWarnSM_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_DrvWarnSM_Params* New() const final {
    return CreateMaybeMessage<FC_DrvWarnSM_Params>(nullptr);
  }

  FC_DrvWarnSM_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_DrvWarnSM_Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_DrvWarnSM_Params& from);
  void MergeFrom(const FC_DrvWarnSM_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_DrvWarnSM_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto);
    return ::descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kPDWLSTANDSTILLCONTTIMESFieldNumber = 3975,
    kPDWLSTANDSTILLTIMESFieldNumber = 46,
    kPDWLMAXDISTCONTTONEMFieldNumber = 273,
    kPDWLINITTIMESFieldNumber = 667,
    kPDWLACTPDWBYAPNUFieldNumber = 486,
    kWHPLDEACTWHPBYAPNUFieldNumber = 17,
    kDWFLTONESUPPRESSBYAPNUFieldNumber = 1775,
    kDWFLTONEREDUCTINTERSTANDSTILLNUFieldNumber = 1803,
    kDWFLSPEEDHYSTERESISMPSFieldNumber = 1092,
    kPDWLROLLBACKWOOBSTDISTMFieldNumber = 1113,
    kPDWLREVGEARDEBTIMEMANSFieldNumber = 1195,
    kPDWLMAXDISTCONTTONEREARMFieldNumber = 1580,
    kPDWLMAXDISTCONTTONELATMFieldNumber = 1756,
    kDWFLTONEREDUCTCONTSTANDSTILLNUFieldNumber = 2254,
    kPDWLAUTOACTIVCRITICALNUFieldNumber = 277,
    kPDWLCONTDISTEXTENDNUFieldNumber = 1731,
    kPDWLCRITACTPDWBYAPNUFieldNumber = 3169,
    kPDWLFRONTSECTACTIVNUFieldNumber = 263,
    kPDWLLATSECTACTIVNUFieldNumber = 1676,
    kPDWLREARSECTACTIVNUFieldNumber = 3832,
    kUiVersionNumberFieldNumber = 2124,
    kPDWLAUTOMACTIVSTANDSTILLNUFieldNumber = 2635,
    kPDWLROLLBACKACTIVATIONNUFieldNumber = 632,
    kPDWLDEACTIVBYPGEARNUFieldNumber = 3865,
    kPDWLDEACTIVBYEPBNUFieldNumber = 2199,
    kPDWAUTOACTIVTHRESHOLDFieldNumber = 2347,
    kPDWLSTABILIZATONWAITTIMESFieldNumber = 2598,
    kDWFCTRANSMISSIONTYPENUFieldNumber = 3700,
    kPDWLDRIVINGTUBENUFieldNumber = 2320,
    kPDWLAUTOMATICACTIVATIONNUFieldNumber = 2442,
    kPDWLAUTOACTBUTTONNUFieldNumber = 1931,
    kPDWLREVGEARDEBTIMEAUTSFieldNumber = 2676,
    kPDWLPGEARRESETAUTOACTNUFieldNumber = 1378,
    kPDWLEPBRESETAUTOACTNUFieldNumber = 2257,
    kPDWLROLLBACKFULLVIEWNUFieldNumber = 3707,
    kPDWLROLLBACKTRAILERNUFieldNumber = 3745,
    kPDWLVELTHRESHOFFMPSFieldNumber = 3112,
    kPDWLROLLBACKWOBSTDISTMFieldNumber = 3486,
    kWHPLMINWHLANGLEDIFFRADFieldNumber = 3500,
    kPDWLSTANDSTILLINTERTIMESFieldNumber = 3514,
    kWHPLMAXSPEEDMPSFieldNumber = 3576,
    kDWFCOPSVARIANTNUFieldNumber = 3619,
    kPDWLMAXDISTCONTTONEFWDMFieldNumber = 3887,
    kPDWLMINDISTREARSENSORSMFieldNumber = 3927,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float PDW_L_STANDSTILL_CONT_TIME_S = 3975;
  bool has_pdw_l_standstill_cont_time_s() const;
  private:
  bool _internal_has_pdw_l_standstill_cont_time_s() const;
  public:
  void clear_pdw_l_standstill_cont_time_s();
  float pdw_l_standstill_cont_time_s() const;
  void set_pdw_l_standstill_cont_time_s(float value);
  private:
  float _internal_pdw_l_standstill_cont_time_s() const;
  void _internal_set_pdw_l_standstill_cont_time_s(float value);
  public:

  // optional float PDW_L_STANDSTILL_TIME_S = 46;
  bool has_pdw_l_standstill_time_s() const;
  private:
  bool _internal_has_pdw_l_standstill_time_s() const;
  public:
  void clear_pdw_l_standstill_time_s();
  float pdw_l_standstill_time_s() const;
  void set_pdw_l_standstill_time_s(float value);
  private:
  float _internal_pdw_l_standstill_time_s() const;
  void _internal_set_pdw_l_standstill_time_s(float value);
  public:

  // optional float PDW_L_MAX_DIST_CONT_TONE_M = 273;
  bool has_pdw_l_max_dist_cont_tone_m() const;
  private:
  bool _internal_has_pdw_l_max_dist_cont_tone_m() const;
  public:
  void clear_pdw_l_max_dist_cont_tone_m();
  float pdw_l_max_dist_cont_tone_m() const;
  void set_pdw_l_max_dist_cont_tone_m(float value);
  private:
  float _internal_pdw_l_max_dist_cont_tone_m() const;
  void _internal_set_pdw_l_max_dist_cont_tone_m(float value);
  public:

  // optional float PDW_L_INIT_TIME_S = 667;
  bool has_pdw_l_init_time_s() const;
  private:
  bool _internal_has_pdw_l_init_time_s() const;
  public:
  void clear_pdw_l_init_time_s();
  float pdw_l_init_time_s() const;
  void set_pdw_l_init_time_s(float value);
  private:
  float _internal_pdw_l_init_time_s() const;
  void _internal_set_pdw_l_init_time_s(float value);
  public:

  // optional bool PDW_L_ACT_PDW_BY_AP_NU = 486;
  bool has_pdw_l_act_pdw_by_ap_nu() const;
  private:
  bool _internal_has_pdw_l_act_pdw_by_ap_nu() const;
  public:
  void clear_pdw_l_act_pdw_by_ap_nu();
  bool pdw_l_act_pdw_by_ap_nu() const;
  void set_pdw_l_act_pdw_by_ap_nu(bool value);
  private:
  bool _internal_pdw_l_act_pdw_by_ap_nu() const;
  void _internal_set_pdw_l_act_pdw_by_ap_nu(bool value);
  public:

  // optional bool WHP_L_DEACT_WHP_BY_AP_NU = 17;
  bool has_whp_l_deact_whp_by_ap_nu() const;
  private:
  bool _internal_has_whp_l_deact_whp_by_ap_nu() const;
  public:
  void clear_whp_l_deact_whp_by_ap_nu();
  bool whp_l_deact_whp_by_ap_nu() const;
  void set_whp_l_deact_whp_by_ap_nu(bool value);
  private:
  bool _internal_whp_l_deact_whp_by_ap_nu() const;
  void _internal_set_whp_l_deact_whp_by_ap_nu(bool value);
  public:

  // optional bool DWF_L_TONE_SUPPRESS_BY_AP_NU = 1775;
  bool has_dwf_l_tone_suppress_by_ap_nu() const;
  private:
  bool _internal_has_dwf_l_tone_suppress_by_ap_nu() const;
  public:
  void clear_dwf_l_tone_suppress_by_ap_nu();
  bool dwf_l_tone_suppress_by_ap_nu() const;
  void set_dwf_l_tone_suppress_by_ap_nu(bool value);
  private:
  bool _internal_dwf_l_tone_suppress_by_ap_nu() const;
  void _internal_set_dwf_l_tone_suppress_by_ap_nu(bool value);
  public:

  // optional bool DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU = 1803;
  bool has_dwf_l_tone_reduct_inter_standstill_nu() const;
  private:
  bool _internal_has_dwf_l_tone_reduct_inter_standstill_nu() const;
  public:
  void clear_dwf_l_tone_reduct_inter_standstill_nu();
  bool dwf_l_tone_reduct_inter_standstill_nu() const;
  void set_dwf_l_tone_reduct_inter_standstill_nu(bool value);
  private:
  bool _internal_dwf_l_tone_reduct_inter_standstill_nu() const;
  void _internal_set_dwf_l_tone_reduct_inter_standstill_nu(bool value);
  public:

  // optional float DWF_L_SPEED_HYSTERESIS_MPS = 1092;
  bool has_dwf_l_speed_hysteresis_mps() const;
  private:
  bool _internal_has_dwf_l_speed_hysteresis_mps() const;
  public:
  void clear_dwf_l_speed_hysteresis_mps();
  float dwf_l_speed_hysteresis_mps() const;
  void set_dwf_l_speed_hysteresis_mps(float value);
  private:
  float _internal_dwf_l_speed_hysteresis_mps() const;
  void _internal_set_dwf_l_speed_hysteresis_mps(float value);
  public:

  // optional float PDW_L_ROLLBACK_WO_OBST_DIST_M = 1113;
  bool has_pdw_l_rollback_wo_obst_dist_m() const;
  private:
  bool _internal_has_pdw_l_rollback_wo_obst_dist_m() const;
  public:
  void clear_pdw_l_rollback_wo_obst_dist_m();
  float pdw_l_rollback_wo_obst_dist_m() const;
  void set_pdw_l_rollback_wo_obst_dist_m(float value);
  private:
  float _internal_pdw_l_rollback_wo_obst_dist_m() const;
  void _internal_set_pdw_l_rollback_wo_obst_dist_m(float value);
  public:

  // optional float PDW_L_REV_GEAR_DEB_TIME_MAN_S = 1195;
  bool has_pdw_l_rev_gear_deb_time_man_s() const;
  private:
  bool _internal_has_pdw_l_rev_gear_deb_time_man_s() const;
  public:
  void clear_pdw_l_rev_gear_deb_time_man_s();
  float pdw_l_rev_gear_deb_time_man_s() const;
  void set_pdw_l_rev_gear_deb_time_man_s(float value);
  private:
  float _internal_pdw_l_rev_gear_deb_time_man_s() const;
  void _internal_set_pdw_l_rev_gear_deb_time_man_s(float value);
  public:

  // optional float PDW_L_MAX_DIST_CONT_TONE_REAR_M = 1580;
  bool has_pdw_l_max_dist_cont_tone_rear_m() const;
  private:
  bool _internal_has_pdw_l_max_dist_cont_tone_rear_m() const;
  public:
  void clear_pdw_l_max_dist_cont_tone_rear_m();
  float pdw_l_max_dist_cont_tone_rear_m() const;
  void set_pdw_l_max_dist_cont_tone_rear_m(float value);
  private:
  float _internal_pdw_l_max_dist_cont_tone_rear_m() const;
  void _internal_set_pdw_l_max_dist_cont_tone_rear_m(float value);
  public:

  // optional float PDW_L_MAX_DIST_CONT_TONE_LAT_M = 1756;
  bool has_pdw_l_max_dist_cont_tone_lat_m() const;
  private:
  bool _internal_has_pdw_l_max_dist_cont_tone_lat_m() const;
  public:
  void clear_pdw_l_max_dist_cont_tone_lat_m();
  float pdw_l_max_dist_cont_tone_lat_m() const;
  void set_pdw_l_max_dist_cont_tone_lat_m(float value);
  private:
  float _internal_pdw_l_max_dist_cont_tone_lat_m() const;
  void _internal_set_pdw_l_max_dist_cont_tone_lat_m(float value);
  public:

  // optional bool DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU = 2254;
  bool has_dwf_l_tone_reduct_cont_standstill_nu() const;
  private:
  bool _internal_has_dwf_l_tone_reduct_cont_standstill_nu() const;
  public:
  void clear_dwf_l_tone_reduct_cont_standstill_nu();
  bool dwf_l_tone_reduct_cont_standstill_nu() const;
  void set_dwf_l_tone_reduct_cont_standstill_nu(bool value);
  private:
  bool _internal_dwf_l_tone_reduct_cont_standstill_nu() const;
  void _internal_set_dwf_l_tone_reduct_cont_standstill_nu(bool value);
  public:

  // optional bool PDW_L_AUTO_ACTIV_CRITICAL_NU = 277;
  bool has_pdw_l_auto_activ_critical_nu() const;
  private:
  bool _internal_has_pdw_l_auto_activ_critical_nu() const;
  public:
  void clear_pdw_l_auto_activ_critical_nu();
  bool pdw_l_auto_activ_critical_nu() const;
  void set_pdw_l_auto_activ_critical_nu(bool value);
  private:
  bool _internal_pdw_l_auto_activ_critical_nu() const;
  void _internal_set_pdw_l_auto_activ_critical_nu(bool value);
  public:

  // optional bool PDW_L_CONT_DIST_EXTEND_NU = 1731;
  bool has_pdw_l_cont_dist_extend_nu() const;
  private:
  bool _internal_has_pdw_l_cont_dist_extend_nu() const;
  public:
  void clear_pdw_l_cont_dist_extend_nu();
  bool pdw_l_cont_dist_extend_nu() const;
  void set_pdw_l_cont_dist_extend_nu(bool value);
  private:
  bool _internal_pdw_l_cont_dist_extend_nu() const;
  void _internal_set_pdw_l_cont_dist_extend_nu(bool value);
  public:

  // optional bool PDW_L_CRIT_ACT_PDW_BY_AP_NU = 3169;
  bool has_pdw_l_crit_act_pdw_by_ap_nu() const;
  private:
  bool _internal_has_pdw_l_crit_act_pdw_by_ap_nu() const;
  public:
  void clear_pdw_l_crit_act_pdw_by_ap_nu();
  bool pdw_l_crit_act_pdw_by_ap_nu() const;
  void set_pdw_l_crit_act_pdw_by_ap_nu(bool value);
  private:
  bool _internal_pdw_l_crit_act_pdw_by_ap_nu() const;
  void _internal_set_pdw_l_crit_act_pdw_by_ap_nu(bool value);
  public:

  // optional bool PDW_L_FRONT_SECT_ACTIV_NU = 263;
  bool has_pdw_l_front_sect_activ_nu() const;
  private:
  bool _internal_has_pdw_l_front_sect_activ_nu() const;
  public:
  void clear_pdw_l_front_sect_activ_nu();
  bool pdw_l_front_sect_activ_nu() const;
  void set_pdw_l_front_sect_activ_nu(bool value);
  private:
  bool _internal_pdw_l_front_sect_activ_nu() const;
  void _internal_set_pdw_l_front_sect_activ_nu(bool value);
  public:

  // optional bool PDW_L_LAT_SECT_ACTIV_NU = 1676;
  bool has_pdw_l_lat_sect_activ_nu() const;
  private:
  bool _internal_has_pdw_l_lat_sect_activ_nu() const;
  public:
  void clear_pdw_l_lat_sect_activ_nu();
  bool pdw_l_lat_sect_activ_nu() const;
  void set_pdw_l_lat_sect_activ_nu(bool value);
  private:
  bool _internal_pdw_l_lat_sect_activ_nu() const;
  void _internal_set_pdw_l_lat_sect_activ_nu(bool value);
  public:

  // optional bool PDW_L_REAR_SECT_ACTIV_NU = 3832;
  bool has_pdw_l_rear_sect_activ_nu() const;
  private:
  bool _internal_has_pdw_l_rear_sect_activ_nu() const;
  public:
  void clear_pdw_l_rear_sect_activ_nu();
  bool pdw_l_rear_sect_activ_nu() const;
  void set_pdw_l_rear_sect_activ_nu(bool value);
  private:
  bool _internal_pdw_l_rear_sect_activ_nu() const;
  void _internal_set_pdw_l_rear_sect_activ_nu(bool value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool PDW_L_AUTOM_ACTIV_STANDSTILL_NU = 2635;
  bool has_pdw_l_autom_activ_standstill_nu() const;
  private:
  bool _internal_has_pdw_l_autom_activ_standstill_nu() const;
  public:
  void clear_pdw_l_autom_activ_standstill_nu();
  bool pdw_l_autom_activ_standstill_nu() const;
  void set_pdw_l_autom_activ_standstill_nu(bool value);
  private:
  bool _internal_pdw_l_autom_activ_standstill_nu() const;
  void _internal_set_pdw_l_autom_activ_standstill_nu(bool value);
  public:

  // optional bool PDW_L_ROLLBACK_ACTIVATION_NU = 632;
  bool has_pdw_l_rollback_activation_nu() const;
  private:
  bool _internal_has_pdw_l_rollback_activation_nu() const;
  public:
  void clear_pdw_l_rollback_activation_nu();
  bool pdw_l_rollback_activation_nu() const;
  void set_pdw_l_rollback_activation_nu(bool value);
  private:
  bool _internal_pdw_l_rollback_activation_nu() const;
  void _internal_set_pdw_l_rollback_activation_nu(bool value);
  public:

  // optional bool PDW_L_DEACTIV_BY_P_GEAR_NU = 3865;
  bool has_pdw_l_deactiv_by_p_gear_nu() const;
  private:
  bool _internal_has_pdw_l_deactiv_by_p_gear_nu() const;
  public:
  void clear_pdw_l_deactiv_by_p_gear_nu();
  bool pdw_l_deactiv_by_p_gear_nu() const;
  void set_pdw_l_deactiv_by_p_gear_nu(bool value);
  private:
  bool _internal_pdw_l_deactiv_by_p_gear_nu() const;
  void _internal_set_pdw_l_deactiv_by_p_gear_nu(bool value);
  public:

  // optional bool PDW_L_DEACTIV_BY_EPB_NU = 2199;
  bool has_pdw_l_deactiv_by_epb_nu() const;
  private:
  bool _internal_has_pdw_l_deactiv_by_epb_nu() const;
  public:
  void clear_pdw_l_deactiv_by_epb_nu();
  bool pdw_l_deactiv_by_epb_nu() const;
  void set_pdw_l_deactiv_by_epb_nu(bool value);
  private:
  bool _internal_pdw_l_deactiv_by_epb_nu() const;
  void _internal_set_pdw_l_deactiv_by_epb_nu(bool value);
  public:

  // optional float PDW_AUTO_ACTIV_THRESHOLD = 2347;
  bool has_pdw_auto_activ_threshold() const;
  private:
  bool _internal_has_pdw_auto_activ_threshold() const;
  public:
  void clear_pdw_auto_activ_threshold();
  float pdw_auto_activ_threshold() const;
  void set_pdw_auto_activ_threshold(float value);
  private:
  float _internal_pdw_auto_activ_threshold() const;
  void _internal_set_pdw_auto_activ_threshold(float value);
  public:

  // optional float PDW_L_STABILIZATON_WAIT_TIME_S = 2598;
  bool has_pdw_l_stabilizaton_wait_time_s() const;
  private:
  bool _internal_has_pdw_l_stabilizaton_wait_time_s() const;
  public:
  void clear_pdw_l_stabilizaton_wait_time_s();
  float pdw_l_stabilizaton_wait_time_s() const;
  void set_pdw_l_stabilizaton_wait_time_s(float value);
  private:
  float _internal_pdw_l_stabilizaton_wait_time_s() const;
  void _internal_set_pdw_l_stabilizaton_wait_time_s(float value);
  public:

  // optional bool DWF_C_TRANSMISSION_TYPE_NU = 3700;
  bool has_dwf_c_transmission_type_nu() const;
  private:
  bool _internal_has_dwf_c_transmission_type_nu() const;
  public:
  void clear_dwf_c_transmission_type_nu();
  bool dwf_c_transmission_type_nu() const;
  void set_dwf_c_transmission_type_nu(bool value);
  private:
  bool _internal_dwf_c_transmission_type_nu() const;
  void _internal_set_dwf_c_transmission_type_nu(bool value);
  public:

  // optional bool PDW_L_DRIVING_TUBE_NU = 2320;
  bool has_pdw_l_driving_tube_nu() const;
  private:
  bool _internal_has_pdw_l_driving_tube_nu() const;
  public:
  void clear_pdw_l_driving_tube_nu();
  bool pdw_l_driving_tube_nu() const;
  void set_pdw_l_driving_tube_nu(bool value);
  private:
  bool _internal_pdw_l_driving_tube_nu() const;
  void _internal_set_pdw_l_driving_tube_nu(bool value);
  public:

  // optional bool PDW_L_AUTOMATIC_ACTIVATION_NU = 2442;
  bool has_pdw_l_automatic_activation_nu() const;
  private:
  bool _internal_has_pdw_l_automatic_activation_nu() const;
  public:
  void clear_pdw_l_automatic_activation_nu();
  bool pdw_l_automatic_activation_nu() const;
  void set_pdw_l_automatic_activation_nu(bool value);
  private:
  bool _internal_pdw_l_automatic_activation_nu() const;
  void _internal_set_pdw_l_automatic_activation_nu(bool value);
  public:

  // optional bool PDW_L_AUTO_ACT_BUTTON_NU = 1931;
  bool has_pdw_l_auto_act_button_nu() const;
  private:
  bool _internal_has_pdw_l_auto_act_button_nu() const;
  public:
  void clear_pdw_l_auto_act_button_nu();
  bool pdw_l_auto_act_button_nu() const;
  void set_pdw_l_auto_act_button_nu(bool value);
  private:
  bool _internal_pdw_l_auto_act_button_nu() const;
  void _internal_set_pdw_l_auto_act_button_nu(bool value);
  public:

  // optional float PDW_L_REV_GEAR_DEB_TIME_AUT_S = 2676;
  bool has_pdw_l_rev_gear_deb_time_aut_s() const;
  private:
  bool _internal_has_pdw_l_rev_gear_deb_time_aut_s() const;
  public:
  void clear_pdw_l_rev_gear_deb_time_aut_s();
  float pdw_l_rev_gear_deb_time_aut_s() const;
  void set_pdw_l_rev_gear_deb_time_aut_s(float value);
  private:
  float _internal_pdw_l_rev_gear_deb_time_aut_s() const;
  void _internal_set_pdw_l_rev_gear_deb_time_aut_s(float value);
  public:

  // optional bool PDW_L_P_GEAR_RESET_AUTO_ACT_NU = 1378;
  bool has_pdw_l_p_gear_reset_auto_act_nu() const;
  private:
  bool _internal_has_pdw_l_p_gear_reset_auto_act_nu() const;
  public:
  void clear_pdw_l_p_gear_reset_auto_act_nu();
  bool pdw_l_p_gear_reset_auto_act_nu() const;
  void set_pdw_l_p_gear_reset_auto_act_nu(bool value);
  private:
  bool _internal_pdw_l_p_gear_reset_auto_act_nu() const;
  void _internal_set_pdw_l_p_gear_reset_auto_act_nu(bool value);
  public:

  // optional bool PDW_L_EPB_RESET_AUTO_ACT_NU = 2257;
  bool has_pdw_l_epb_reset_auto_act_nu() const;
  private:
  bool _internal_has_pdw_l_epb_reset_auto_act_nu() const;
  public:
  void clear_pdw_l_epb_reset_auto_act_nu();
  bool pdw_l_epb_reset_auto_act_nu() const;
  void set_pdw_l_epb_reset_auto_act_nu(bool value);
  private:
  bool _internal_pdw_l_epb_reset_auto_act_nu() const;
  void _internal_set_pdw_l_epb_reset_auto_act_nu(bool value);
  public:

  // optional bool PDW_L_ROLLBACK_FULL_VIEW_NU = 3707;
  bool has_pdw_l_rollback_full_view_nu() const;
  private:
  bool _internal_has_pdw_l_rollback_full_view_nu() const;
  public:
  void clear_pdw_l_rollback_full_view_nu();
  bool pdw_l_rollback_full_view_nu() const;
  void set_pdw_l_rollback_full_view_nu(bool value);
  private:
  bool _internal_pdw_l_rollback_full_view_nu() const;
  void _internal_set_pdw_l_rollback_full_view_nu(bool value);
  public:

  // optional bool PDW_L_ROLLBACK_TRAILER_NU = 3745;
  bool has_pdw_l_rollback_trailer_nu() const;
  private:
  bool _internal_has_pdw_l_rollback_trailer_nu() const;
  public:
  void clear_pdw_l_rollback_trailer_nu();
  bool pdw_l_rollback_trailer_nu() const;
  void set_pdw_l_rollback_trailer_nu(bool value);
  private:
  bool _internal_pdw_l_rollback_trailer_nu() const;
  void _internal_set_pdw_l_rollback_trailer_nu(bool value);
  public:

  // optional float PDW_L_VEL_THRESH_OFF_MPS = 3112;
  bool has_pdw_l_vel_thresh_off_mps() const;
  private:
  bool _internal_has_pdw_l_vel_thresh_off_mps() const;
  public:
  void clear_pdw_l_vel_thresh_off_mps();
  float pdw_l_vel_thresh_off_mps() const;
  void set_pdw_l_vel_thresh_off_mps(float value);
  private:
  float _internal_pdw_l_vel_thresh_off_mps() const;
  void _internal_set_pdw_l_vel_thresh_off_mps(float value);
  public:

  // optional float PDW_L_ROLLBACK_W_OBST_DIST_M = 3486;
  bool has_pdw_l_rollback_w_obst_dist_m() const;
  private:
  bool _internal_has_pdw_l_rollback_w_obst_dist_m() const;
  public:
  void clear_pdw_l_rollback_w_obst_dist_m();
  float pdw_l_rollback_w_obst_dist_m() const;
  void set_pdw_l_rollback_w_obst_dist_m(float value);
  private:
  float _internal_pdw_l_rollback_w_obst_dist_m() const;
  void _internal_set_pdw_l_rollback_w_obst_dist_m(float value);
  public:

  // optional float WHP_L_MIN_WHL_ANGLE_DIFF_RAD = 3500;
  bool has_whp_l_min_whl_angle_diff_rad() const;
  private:
  bool _internal_has_whp_l_min_whl_angle_diff_rad() const;
  public:
  void clear_whp_l_min_whl_angle_diff_rad();
  float whp_l_min_whl_angle_diff_rad() const;
  void set_whp_l_min_whl_angle_diff_rad(float value);
  private:
  float _internal_whp_l_min_whl_angle_diff_rad() const;
  void _internal_set_whp_l_min_whl_angle_diff_rad(float value);
  public:

  // optional float PDW_L_STANDSTILL_INTER_TIME_S = 3514;
  bool has_pdw_l_standstill_inter_time_s() const;
  private:
  bool _internal_has_pdw_l_standstill_inter_time_s() const;
  public:
  void clear_pdw_l_standstill_inter_time_s();
  float pdw_l_standstill_inter_time_s() const;
  void set_pdw_l_standstill_inter_time_s(float value);
  private:
  float _internal_pdw_l_standstill_inter_time_s() const;
  void _internal_set_pdw_l_standstill_inter_time_s(float value);
  public:

  // optional float WHP_L_MAX_SPEED_MPS = 3576;
  bool has_whp_l_max_speed_mps() const;
  private:
  bool _internal_has_whp_l_max_speed_mps() const;
  public:
  void clear_whp_l_max_speed_mps();
  float whp_l_max_speed_mps() const;
  void set_whp_l_max_speed_mps(float value);
  private:
  float _internal_whp_l_max_speed_mps() const;
  void _internal_set_whp_l_max_speed_mps(float value);
  public:

  // optional uint32 DWF_C_OPS_VARIANT_NU = 3619;
  bool has_dwf_c_ops_variant_nu() const;
  private:
  bool _internal_has_dwf_c_ops_variant_nu() const;
  public:
  void clear_dwf_c_ops_variant_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 dwf_c_ops_variant_nu() const;
  void set_dwf_c_ops_variant_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dwf_c_ops_variant_nu() const;
  void _internal_set_dwf_c_ops_variant_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float PDW_L_MAX_DIST_CONT_TONE_FWD_M = 3887;
  bool has_pdw_l_max_dist_cont_tone_fwd_m() const;
  private:
  bool _internal_has_pdw_l_max_dist_cont_tone_fwd_m() const;
  public:
  void clear_pdw_l_max_dist_cont_tone_fwd_m();
  float pdw_l_max_dist_cont_tone_fwd_m() const;
  void set_pdw_l_max_dist_cont_tone_fwd_m(float value);
  private:
  float _internal_pdw_l_max_dist_cont_tone_fwd_m() const;
  void _internal_set_pdw_l_max_dist_cont_tone_fwd_m(float value);
  public:

  // optional float PDW_L_MIN_DIST_REAR_SENSORS_M = 3927;
  bool has_pdw_l_min_dist_rear_sensors_m() const;
  private:
  bool _internal_has_pdw_l_min_dist_rear_sensors_m() const;
  public:
  void clear_pdw_l_min_dist_rear_sensors_m();
  float pdw_l_min_dist_rear_sensors_m() const;
  void set_pdw_l_min_dist_rear_sensors_m(float value);
  private:
  float _internal_pdw_l_min_dist_rear_sensors_m() const;
  void _internal_set_pdw_l_min_dist_rear_sensors_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float pdw_l_standstill_cont_time_s_;
  float pdw_l_standstill_time_s_;
  float pdw_l_max_dist_cont_tone_m_;
  float pdw_l_init_time_s_;
  bool pdw_l_act_pdw_by_ap_nu_;
  bool whp_l_deact_whp_by_ap_nu_;
  bool dwf_l_tone_suppress_by_ap_nu_;
  bool dwf_l_tone_reduct_inter_standstill_nu_;
  float dwf_l_speed_hysteresis_mps_;
  float pdw_l_rollback_wo_obst_dist_m_;
  float pdw_l_rev_gear_deb_time_man_s_;
  float pdw_l_max_dist_cont_tone_rear_m_;
  float pdw_l_max_dist_cont_tone_lat_m_;
  bool dwf_l_tone_reduct_cont_standstill_nu_;
  bool pdw_l_auto_activ_critical_nu_;
  bool pdw_l_cont_dist_extend_nu_;
  bool pdw_l_crit_act_pdw_by_ap_nu_;
  bool pdw_l_front_sect_activ_nu_;
  bool pdw_l_lat_sect_activ_nu_;
  bool pdw_l_rear_sect_activ_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  bool pdw_l_autom_activ_standstill_nu_;
  bool pdw_l_rollback_activation_nu_;
  bool pdw_l_deactiv_by_p_gear_nu_;
  bool pdw_l_deactiv_by_epb_nu_;
  float pdw_auto_activ_threshold_;
  float pdw_l_stabilizaton_wait_time_s_;
  bool dwf_c_transmission_type_nu_;
  bool pdw_l_driving_tube_nu_;
  bool pdw_l_automatic_activation_nu_;
  bool pdw_l_auto_act_button_nu_;
  float pdw_l_rev_gear_deb_time_aut_s_;
  bool pdw_l_p_gear_reset_auto_act_nu_;
  bool pdw_l_epb_reset_auto_act_nu_;
  bool pdw_l_rollback_full_view_nu_;
  bool pdw_l_rollback_trailer_nu_;
  float pdw_l_vel_thresh_off_mps_;
  float pdw_l_rollback_w_obst_dist_m_;
  float whp_l_min_whl_angle_diff_rad_;
  float pdw_l_standstill_inter_time_s_;
  float whp_l_max_speed_mps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dwf_c_ops_variant_nu_;
  float pdw_l_max_dist_cont_tone_fwd_m_;
  float pdw_l_min_dist_rear_sensors_m_;
  friend struct ::TableStruct_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FC_DrvWarnSM_Params_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port) */ {
 public:
  FC_DrvWarnSM_Params_array_port();
  virtual ~FC_DrvWarnSM_Params_array_port();

  FC_DrvWarnSM_Params_array_port(const FC_DrvWarnSM_Params_array_port& from);
  FC_DrvWarnSM_Params_array_port(FC_DrvWarnSM_Params_array_port&& from) noexcept
    : FC_DrvWarnSM_Params_array_port() {
    *this = ::std::move(from);
  }

  inline FC_DrvWarnSM_Params_array_port& operator=(const FC_DrvWarnSM_Params_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_DrvWarnSM_Params_array_port& operator=(FC_DrvWarnSM_Params_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_DrvWarnSM_Params_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_DrvWarnSM_Params_array_port* internal_default_instance() {
    return reinterpret_cast<const FC_DrvWarnSM_Params_array_port*>(
               &_FC_DrvWarnSM_Params_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FC_DrvWarnSM_Params_array_port& a, FC_DrvWarnSM_Params_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_DrvWarnSM_Params_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_DrvWarnSM_Params_array_port* New() const final {
    return CreateMaybeMessage<FC_DrvWarnSM_Params_array_port>(nullptr);
  }

  FC_DrvWarnSM_Params_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_DrvWarnSM_Params_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_DrvWarnSM_Params_array_port& from);
  void MergeFrom(const FC_DrvWarnSM_Params_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_DrvWarnSM_Params_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto);
    return ::descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3981,
  };
  // repeated .pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params data = 3981;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params >*
      mutable_data();
  private:
  const ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params& _internal_data(int index) const;
  ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* _internal_add_data();
  public:
  const ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params& data(int index) const;
  ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params > data_;
  friend struct ::TableStruct_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FC_DrvWarnSM_Params

// optional uint32 uiVersionNumber = 2124;
inline bool FC_DrvWarnSM_Params::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FC_DrvWarnSM_Params::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_DrvWarnSM_Params::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_DrvWarnSM_Params::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FC_DrvWarnSM_Params::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  uiversionnumber_ = value;
}
inline void FC_DrvWarnSM_Params::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FC_DrvWarnSM_Params::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FC_DrvWarnSM_Params::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FC_DrvWarnSM_Params::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FC_DrvWarnSM_Params::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FC_DrvWarnSM_Params::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FC_DrvWarnSM_Params::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FC_DrvWarnSM_Params::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FC_DrvWarnSM_Params::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.sSigHeader)
}

// optional float DWF_L_SPEED_HYSTERESIS_MPS = 1092;
inline bool FC_DrvWarnSM_Params::_internal_has_dwf_l_speed_hysteresis_mps() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_dwf_l_speed_hysteresis_mps() const {
  return _internal_has_dwf_l_speed_hysteresis_mps();
}
inline void FC_DrvWarnSM_Params::clear_dwf_l_speed_hysteresis_mps() {
  dwf_l_speed_hysteresis_mps_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float FC_DrvWarnSM_Params::_internal_dwf_l_speed_hysteresis_mps() const {
  return dwf_l_speed_hysteresis_mps_;
}
inline float FC_DrvWarnSM_Params::dwf_l_speed_hysteresis_mps() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_SPEED_HYSTERESIS_MPS)
  return _internal_dwf_l_speed_hysteresis_mps();
}
inline void FC_DrvWarnSM_Params::_internal_set_dwf_l_speed_hysteresis_mps(float value) {
  _has_bits_[0] |= 0x00000200u;
  dwf_l_speed_hysteresis_mps_ = value;
}
inline void FC_DrvWarnSM_Params::set_dwf_l_speed_hysteresis_mps(float value) {
  _internal_set_dwf_l_speed_hysteresis_mps(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_SPEED_HYSTERESIS_MPS)
}

// optional float PDW_L_INIT_TIME_S = 667;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_init_time_s() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_init_time_s() const {
  return _internal_has_pdw_l_init_time_s();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_init_time_s() {
  pdw_l_init_time_s_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_init_time_s() const {
  return pdw_l_init_time_s_;
}
inline float FC_DrvWarnSM_Params::pdw_l_init_time_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_INIT_TIME_S)
  return _internal_pdw_l_init_time_s();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_init_time_s(float value) {
  _has_bits_[0] |= 0x00000010u;
  pdw_l_init_time_s_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_init_time_s(float value) {
  _internal_set_pdw_l_init_time_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_INIT_TIME_S)
}

// optional float PDW_L_STABILIZATON_WAIT_TIME_S = 2598;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_stabilizaton_wait_time_s() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_stabilizaton_wait_time_s() const {
  return _internal_has_pdw_l_stabilizaton_wait_time_s();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_stabilizaton_wait_time_s() {
  pdw_l_stabilizaton_wait_time_s_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_stabilizaton_wait_time_s() const {
  return pdw_l_stabilizaton_wait_time_s_;
}
inline float FC_DrvWarnSM_Params::pdw_l_stabilizaton_wait_time_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STABILIZATON_WAIT_TIME_S)
  return _internal_pdw_l_stabilizaton_wait_time_s();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_stabilizaton_wait_time_s(float value) {
  _has_bits_[0] |= 0x08000000u;
  pdw_l_stabilizaton_wait_time_s_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_stabilizaton_wait_time_s(float value) {
  _internal_set_pdw_l_stabilizaton_wait_time_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STABILIZATON_WAIT_TIME_S)
}

// optional float PDW_L_STANDSTILL_TIME_S = 46;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_standstill_time_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_standstill_time_s() const {
  return _internal_has_pdw_l_standstill_time_s();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_standstill_time_s() {
  pdw_l_standstill_time_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_standstill_time_s() const {
  return pdw_l_standstill_time_s_;
}
inline float FC_DrvWarnSM_Params::pdw_l_standstill_time_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STANDSTILL_TIME_S)
  return _internal_pdw_l_standstill_time_s();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_standstill_time_s(float value) {
  _has_bits_[0] |= 0x00000004u;
  pdw_l_standstill_time_s_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_standstill_time_s(float value) {
  _internal_set_pdw_l_standstill_time_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STANDSTILL_TIME_S)
}

// optional float PDW_L_REV_GEAR_DEB_TIME_MAN_S = 1195;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rev_gear_deb_time_man_s() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rev_gear_deb_time_man_s() const {
  return _internal_has_pdw_l_rev_gear_deb_time_man_s();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rev_gear_deb_time_man_s() {
  pdw_l_rev_gear_deb_time_man_s_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_rev_gear_deb_time_man_s() const {
  return pdw_l_rev_gear_deb_time_man_s_;
}
inline float FC_DrvWarnSM_Params::pdw_l_rev_gear_deb_time_man_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_REV_GEAR_DEB_TIME_MAN_S)
  return _internal_pdw_l_rev_gear_deb_time_man_s();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rev_gear_deb_time_man_s(float value) {
  _has_bits_[0] |= 0x00000800u;
  pdw_l_rev_gear_deb_time_man_s_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rev_gear_deb_time_man_s(float value) {
  _internal_set_pdw_l_rev_gear_deb_time_man_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_REV_GEAR_DEB_TIME_MAN_S)
}

// optional float PDW_L_REV_GEAR_DEB_TIME_AUT_S = 2676;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rev_gear_deb_time_aut_s() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rev_gear_deb_time_aut_s() const {
  return _internal_has_pdw_l_rev_gear_deb_time_aut_s();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rev_gear_deb_time_aut_s() {
  pdw_l_rev_gear_deb_time_aut_s_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_rev_gear_deb_time_aut_s() const {
  return pdw_l_rev_gear_deb_time_aut_s_;
}
inline float FC_DrvWarnSM_Params::pdw_l_rev_gear_deb_time_aut_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_REV_GEAR_DEB_TIME_AUT_S)
  return _internal_pdw_l_rev_gear_deb_time_aut_s();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rev_gear_deb_time_aut_s(float value) {
  _has_bits_[1] |= 0x00000001u;
  pdw_l_rev_gear_deb_time_aut_s_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rev_gear_deb_time_aut_s(float value) {
  _internal_set_pdw_l_rev_gear_deb_time_aut_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_REV_GEAR_DEB_TIME_AUT_S)
}

// optional float PDW_L_VEL_THRESH_OFF_MPS = 3112;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_vel_thresh_off_mps() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_vel_thresh_off_mps() const {
  return _internal_has_pdw_l_vel_thresh_off_mps();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_vel_thresh_off_mps() {
  pdw_l_vel_thresh_off_mps_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_vel_thresh_off_mps() const {
  return pdw_l_vel_thresh_off_mps_;
}
inline float FC_DrvWarnSM_Params::pdw_l_vel_thresh_off_mps() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_VEL_THRESH_OFF_MPS)
  return _internal_pdw_l_vel_thresh_off_mps();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_vel_thresh_off_mps(float value) {
  _has_bits_[1] |= 0x00000020u;
  pdw_l_vel_thresh_off_mps_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_vel_thresh_off_mps(float value) {
  _internal_set_pdw_l_vel_thresh_off_mps(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_VEL_THRESH_OFF_MPS)
}

// optional float WHP_L_MAX_SPEED_MPS = 3576;
inline bool FC_DrvWarnSM_Params::_internal_has_whp_l_max_speed_mps() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_whp_l_max_speed_mps() const {
  return _internal_has_whp_l_max_speed_mps();
}
inline void FC_DrvWarnSM_Params::clear_whp_l_max_speed_mps() {
  whp_l_max_speed_mps_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float FC_DrvWarnSM_Params::_internal_whp_l_max_speed_mps() const {
  return whp_l_max_speed_mps_;
}
inline float FC_DrvWarnSM_Params::whp_l_max_speed_mps() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.WHP_L_MAX_SPEED_MPS)
  return _internal_whp_l_max_speed_mps();
}
inline void FC_DrvWarnSM_Params::_internal_set_whp_l_max_speed_mps(float value) {
  _has_bits_[1] |= 0x00000200u;
  whp_l_max_speed_mps_ = value;
}
inline void FC_DrvWarnSM_Params::set_whp_l_max_speed_mps(float value) {
  _internal_set_whp_l_max_speed_mps(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.WHP_L_MAX_SPEED_MPS)
}

// optional float WHP_L_MIN_WHL_ANGLE_DIFF_RAD = 3500;
inline bool FC_DrvWarnSM_Params::_internal_has_whp_l_min_whl_angle_diff_rad() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_whp_l_min_whl_angle_diff_rad() const {
  return _internal_has_whp_l_min_whl_angle_diff_rad();
}
inline void FC_DrvWarnSM_Params::clear_whp_l_min_whl_angle_diff_rad() {
  whp_l_min_whl_angle_diff_rad_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float FC_DrvWarnSM_Params::_internal_whp_l_min_whl_angle_diff_rad() const {
  return whp_l_min_whl_angle_diff_rad_;
}
inline float FC_DrvWarnSM_Params::whp_l_min_whl_angle_diff_rad() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.WHP_L_MIN_WHL_ANGLE_DIFF_RAD)
  return _internal_whp_l_min_whl_angle_diff_rad();
}
inline void FC_DrvWarnSM_Params::_internal_set_whp_l_min_whl_angle_diff_rad(float value) {
  _has_bits_[1] |= 0x00000080u;
  whp_l_min_whl_angle_diff_rad_ = value;
}
inline void FC_DrvWarnSM_Params::set_whp_l_min_whl_angle_diff_rad(float value) {
  _internal_set_whp_l_min_whl_angle_diff_rad(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.WHP_L_MIN_WHL_ANGLE_DIFF_RAD)
}

// optional float PDW_L_ROLLBACK_W_OBST_DIST_M = 3486;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rollback_w_obst_dist_m() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rollback_w_obst_dist_m() const {
  return _internal_has_pdw_l_rollback_w_obst_dist_m();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rollback_w_obst_dist_m() {
  pdw_l_rollback_w_obst_dist_m_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_rollback_w_obst_dist_m() const {
  return pdw_l_rollback_w_obst_dist_m_;
}
inline float FC_DrvWarnSM_Params::pdw_l_rollback_w_obst_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_W_OBST_DIST_M)
  return _internal_pdw_l_rollback_w_obst_dist_m();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rollback_w_obst_dist_m(float value) {
  _has_bits_[1] |= 0x00000040u;
  pdw_l_rollback_w_obst_dist_m_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rollback_w_obst_dist_m(float value) {
  _internal_set_pdw_l_rollback_w_obst_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_W_OBST_DIST_M)
}

// optional float PDW_L_ROLLBACK_WO_OBST_DIST_M = 1113;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rollback_wo_obst_dist_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rollback_wo_obst_dist_m() const {
  return _internal_has_pdw_l_rollback_wo_obst_dist_m();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rollback_wo_obst_dist_m() {
  pdw_l_rollback_wo_obst_dist_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_rollback_wo_obst_dist_m() const {
  return pdw_l_rollback_wo_obst_dist_m_;
}
inline float FC_DrvWarnSM_Params::pdw_l_rollback_wo_obst_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_WO_OBST_DIST_M)
  return _internal_pdw_l_rollback_wo_obst_dist_m();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rollback_wo_obst_dist_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  pdw_l_rollback_wo_obst_dist_m_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rollback_wo_obst_dist_m(float value) {
  _internal_set_pdw_l_rollback_wo_obst_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_WO_OBST_DIST_M)
}

// optional float PDW_L_MAX_DIST_CONT_TONE_M = 273;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_max_dist_cont_tone_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_max_dist_cont_tone_m() const {
  return _internal_has_pdw_l_max_dist_cont_tone_m();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_max_dist_cont_tone_m() {
  pdw_l_max_dist_cont_tone_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_max_dist_cont_tone_m() const {
  return pdw_l_max_dist_cont_tone_m_;
}
inline float FC_DrvWarnSM_Params::pdw_l_max_dist_cont_tone_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_M)
  return _internal_pdw_l_max_dist_cont_tone_m();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_max_dist_cont_tone_m(float value) {
  _has_bits_[0] |= 0x00000008u;
  pdw_l_max_dist_cont_tone_m_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_max_dist_cont_tone_m(float value) {
  _internal_set_pdw_l_max_dist_cont_tone_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_M)
}

// optional float PDW_L_MIN_DIST_REAR_SENSORS_M = 3927;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_min_dist_rear_sensors_m() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_min_dist_rear_sensors_m() const {
  return _internal_has_pdw_l_min_dist_rear_sensors_m();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_min_dist_rear_sensors_m() {
  pdw_l_min_dist_rear_sensors_m_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_min_dist_rear_sensors_m() const {
  return pdw_l_min_dist_rear_sensors_m_;
}
inline float FC_DrvWarnSM_Params::pdw_l_min_dist_rear_sensors_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MIN_DIST_REAR_SENSORS_M)
  return _internal_pdw_l_min_dist_rear_sensors_m();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_min_dist_rear_sensors_m(float value) {
  _has_bits_[1] |= 0x00001000u;
  pdw_l_min_dist_rear_sensors_m_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_min_dist_rear_sensors_m(float value) {
  _internal_set_pdw_l_min_dist_rear_sensors_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MIN_DIST_REAR_SENSORS_M)
}

// optional uint32 DWF_C_OPS_VARIANT_NU = 3619;
inline bool FC_DrvWarnSM_Params::_internal_has_dwf_c_ops_variant_nu() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_dwf_c_ops_variant_nu() const {
  return _internal_has_dwf_c_ops_variant_nu();
}
inline void FC_DrvWarnSM_Params::clear_dwf_c_ops_variant_nu() {
  dwf_c_ops_variant_nu_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_DrvWarnSM_Params::_internal_dwf_c_ops_variant_nu() const {
  return dwf_c_ops_variant_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_DrvWarnSM_Params::dwf_c_ops_variant_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_C_OPS_VARIANT_NU)
  return _internal_dwf_c_ops_variant_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_dwf_c_ops_variant_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  dwf_c_ops_variant_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_dwf_c_ops_variant_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dwf_c_ops_variant_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_C_OPS_VARIANT_NU)
}

// optional bool DWF_C_TRANSMISSION_TYPE_NU = 3700;
inline bool FC_DrvWarnSM_Params::_internal_has_dwf_c_transmission_type_nu() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_dwf_c_transmission_type_nu() const {
  return _internal_has_dwf_c_transmission_type_nu();
}
inline void FC_DrvWarnSM_Params::clear_dwf_c_transmission_type_nu() {
  dwf_c_transmission_type_nu_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool FC_DrvWarnSM_Params::_internal_dwf_c_transmission_type_nu() const {
  return dwf_c_transmission_type_nu_;
}
inline bool FC_DrvWarnSM_Params::dwf_c_transmission_type_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_C_TRANSMISSION_TYPE_NU)
  return _internal_dwf_c_transmission_type_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_dwf_c_transmission_type_nu(bool value) {
  _has_bits_[0] |= 0x10000000u;
  dwf_c_transmission_type_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_dwf_c_transmission_type_nu(bool value) {
  _internal_set_dwf_c_transmission_type_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_C_TRANSMISSION_TYPE_NU)
}

// optional bool PDW_L_DRIVING_TUBE_NU = 2320;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_driving_tube_nu() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_driving_tube_nu() const {
  return _internal_has_pdw_l_driving_tube_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_driving_tube_nu() {
  pdw_l_driving_tube_nu_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_driving_tube_nu() const {
  return pdw_l_driving_tube_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_driving_tube_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_DRIVING_TUBE_NU)
  return _internal_pdw_l_driving_tube_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_driving_tube_nu(bool value) {
  _has_bits_[0] |= 0x20000000u;
  pdw_l_driving_tube_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_driving_tube_nu(bool value) {
  _internal_set_pdw_l_driving_tube_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_DRIVING_TUBE_NU)
}

// optional bool PDW_L_AUTOMATIC_ACTIVATION_NU = 2442;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_automatic_activation_nu() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_automatic_activation_nu() const {
  return _internal_has_pdw_l_automatic_activation_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_automatic_activation_nu() {
  pdw_l_automatic_activation_nu_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_automatic_activation_nu() const {
  return pdw_l_automatic_activation_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_automatic_activation_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTOMATIC_ACTIVATION_NU)
  return _internal_pdw_l_automatic_activation_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_automatic_activation_nu(bool value) {
  _has_bits_[0] |= 0x40000000u;
  pdw_l_automatic_activation_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_automatic_activation_nu(bool value) {
  _internal_set_pdw_l_automatic_activation_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTOMATIC_ACTIVATION_NU)
}

// optional bool PDW_L_AUTO_ACT_BUTTON_NU = 1931;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_auto_act_button_nu() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_auto_act_button_nu() const {
  return _internal_has_pdw_l_auto_act_button_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_auto_act_button_nu() {
  pdw_l_auto_act_button_nu_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_auto_act_button_nu() const {
  return pdw_l_auto_act_button_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_auto_act_button_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTO_ACT_BUTTON_NU)
  return _internal_pdw_l_auto_act_button_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_auto_act_button_nu(bool value) {
  _has_bits_[0] |= 0x80000000u;
  pdw_l_auto_act_button_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_auto_act_button_nu(bool value) {
  _internal_set_pdw_l_auto_act_button_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTO_ACT_BUTTON_NU)
}

// optional bool PDW_L_AUTOM_ACTIV_STANDSTILL_NU = 2635;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_autom_activ_standstill_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_autom_activ_standstill_nu() const {
  return _internal_has_pdw_l_autom_activ_standstill_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_autom_activ_standstill_nu() {
  pdw_l_autom_activ_standstill_nu_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_autom_activ_standstill_nu() const {
  return pdw_l_autom_activ_standstill_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_autom_activ_standstill_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTOM_ACTIV_STANDSTILL_NU)
  return _internal_pdw_l_autom_activ_standstill_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_autom_activ_standstill_nu(bool value) {
  _has_bits_[0] |= 0x00400000u;
  pdw_l_autom_activ_standstill_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_autom_activ_standstill_nu(bool value) {
  _internal_set_pdw_l_autom_activ_standstill_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTOM_ACTIV_STANDSTILL_NU)
}

// optional bool PDW_L_ROLLBACK_ACTIVATION_NU = 632;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rollback_activation_nu() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rollback_activation_nu() const {
  return _internal_has_pdw_l_rollback_activation_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rollback_activation_nu() {
  pdw_l_rollback_activation_nu_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_rollback_activation_nu() const {
  return pdw_l_rollback_activation_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_rollback_activation_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_ACTIVATION_NU)
  return _internal_pdw_l_rollback_activation_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rollback_activation_nu(bool value) {
  _has_bits_[0] |= 0x00800000u;
  pdw_l_rollback_activation_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rollback_activation_nu(bool value) {
  _internal_set_pdw_l_rollback_activation_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_ACTIVATION_NU)
}

// optional bool PDW_L_DEACTIV_BY_P_GEAR_NU = 3865;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_deactiv_by_p_gear_nu() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_deactiv_by_p_gear_nu() const {
  return _internal_has_pdw_l_deactiv_by_p_gear_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_deactiv_by_p_gear_nu() {
  pdw_l_deactiv_by_p_gear_nu_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_deactiv_by_p_gear_nu() const {
  return pdw_l_deactiv_by_p_gear_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_deactiv_by_p_gear_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_DEACTIV_BY_P_GEAR_NU)
  return _internal_pdw_l_deactiv_by_p_gear_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_deactiv_by_p_gear_nu(bool value) {
  _has_bits_[0] |= 0x01000000u;
  pdw_l_deactiv_by_p_gear_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_deactiv_by_p_gear_nu(bool value) {
  _internal_set_pdw_l_deactiv_by_p_gear_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_DEACTIV_BY_P_GEAR_NU)
}

// optional bool PDW_L_DEACTIV_BY_EPB_NU = 2199;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_deactiv_by_epb_nu() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_deactiv_by_epb_nu() const {
  return _internal_has_pdw_l_deactiv_by_epb_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_deactiv_by_epb_nu() {
  pdw_l_deactiv_by_epb_nu_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_deactiv_by_epb_nu() const {
  return pdw_l_deactiv_by_epb_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_deactiv_by_epb_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_DEACTIV_BY_EPB_NU)
  return _internal_pdw_l_deactiv_by_epb_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_deactiv_by_epb_nu(bool value) {
  _has_bits_[0] |= 0x02000000u;
  pdw_l_deactiv_by_epb_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_deactiv_by_epb_nu(bool value) {
  _internal_set_pdw_l_deactiv_by_epb_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_DEACTIV_BY_EPB_NU)
}

// optional bool PDW_L_P_GEAR_RESET_AUTO_ACT_NU = 1378;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_p_gear_reset_auto_act_nu() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_p_gear_reset_auto_act_nu() const {
  return _internal_has_pdw_l_p_gear_reset_auto_act_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_p_gear_reset_auto_act_nu() {
  pdw_l_p_gear_reset_auto_act_nu_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_p_gear_reset_auto_act_nu() const {
  return pdw_l_p_gear_reset_auto_act_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_p_gear_reset_auto_act_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_P_GEAR_RESET_AUTO_ACT_NU)
  return _internal_pdw_l_p_gear_reset_auto_act_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_p_gear_reset_auto_act_nu(bool value) {
  _has_bits_[1] |= 0x00000002u;
  pdw_l_p_gear_reset_auto_act_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_p_gear_reset_auto_act_nu(bool value) {
  _internal_set_pdw_l_p_gear_reset_auto_act_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_P_GEAR_RESET_AUTO_ACT_NU)
}

// optional bool PDW_L_EPB_RESET_AUTO_ACT_NU = 2257;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_epb_reset_auto_act_nu() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_epb_reset_auto_act_nu() const {
  return _internal_has_pdw_l_epb_reset_auto_act_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_epb_reset_auto_act_nu() {
  pdw_l_epb_reset_auto_act_nu_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_epb_reset_auto_act_nu() const {
  return pdw_l_epb_reset_auto_act_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_epb_reset_auto_act_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_EPB_RESET_AUTO_ACT_NU)
  return _internal_pdw_l_epb_reset_auto_act_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_epb_reset_auto_act_nu(bool value) {
  _has_bits_[1] |= 0x00000004u;
  pdw_l_epb_reset_auto_act_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_epb_reset_auto_act_nu(bool value) {
  _internal_set_pdw_l_epb_reset_auto_act_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_EPB_RESET_AUTO_ACT_NU)
}

// optional bool PDW_L_ROLLBACK_FULL_VIEW_NU = 3707;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rollback_full_view_nu() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rollback_full_view_nu() const {
  return _internal_has_pdw_l_rollback_full_view_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rollback_full_view_nu() {
  pdw_l_rollback_full_view_nu_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_rollback_full_view_nu() const {
  return pdw_l_rollback_full_view_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_rollback_full_view_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_FULL_VIEW_NU)
  return _internal_pdw_l_rollback_full_view_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rollback_full_view_nu(bool value) {
  _has_bits_[1] |= 0x00000008u;
  pdw_l_rollback_full_view_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rollback_full_view_nu(bool value) {
  _internal_set_pdw_l_rollback_full_view_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_FULL_VIEW_NU)
}

// optional bool PDW_L_ROLLBACK_TRAILER_NU = 3745;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rollback_trailer_nu() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rollback_trailer_nu() const {
  return _internal_has_pdw_l_rollback_trailer_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rollback_trailer_nu() {
  pdw_l_rollback_trailer_nu_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_rollback_trailer_nu() const {
  return pdw_l_rollback_trailer_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_rollback_trailer_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_TRAILER_NU)
  return _internal_pdw_l_rollback_trailer_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rollback_trailer_nu(bool value) {
  _has_bits_[1] |= 0x00000010u;
  pdw_l_rollback_trailer_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rollback_trailer_nu(bool value) {
  _internal_set_pdw_l_rollback_trailer_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ROLLBACK_TRAILER_NU)
}

// optional bool PDW_L_ACT_PDW_BY_AP_NU = 486;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_act_pdw_by_ap_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_act_pdw_by_ap_nu() const {
  return _internal_has_pdw_l_act_pdw_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_act_pdw_by_ap_nu() {
  pdw_l_act_pdw_by_ap_nu_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_act_pdw_by_ap_nu() const {
  return pdw_l_act_pdw_by_ap_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_act_pdw_by_ap_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ACT_PDW_BY_AP_NU)
  return _internal_pdw_l_act_pdw_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_act_pdw_by_ap_nu(bool value) {
  _has_bits_[0] |= 0x00000020u;
  pdw_l_act_pdw_by_ap_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_act_pdw_by_ap_nu(bool value) {
  _internal_set_pdw_l_act_pdw_by_ap_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_ACT_PDW_BY_AP_NU)
}

// optional bool WHP_L_DEACT_WHP_BY_AP_NU = 17;
inline bool FC_DrvWarnSM_Params::_internal_has_whp_l_deact_whp_by_ap_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_whp_l_deact_whp_by_ap_nu() const {
  return _internal_has_whp_l_deact_whp_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::clear_whp_l_deact_whp_by_ap_nu() {
  whp_l_deact_whp_by_ap_nu_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool FC_DrvWarnSM_Params::_internal_whp_l_deact_whp_by_ap_nu() const {
  return whp_l_deact_whp_by_ap_nu_;
}
inline bool FC_DrvWarnSM_Params::whp_l_deact_whp_by_ap_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.WHP_L_DEACT_WHP_BY_AP_NU)
  return _internal_whp_l_deact_whp_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_whp_l_deact_whp_by_ap_nu(bool value) {
  _has_bits_[0] |= 0x00000040u;
  whp_l_deact_whp_by_ap_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_whp_l_deact_whp_by_ap_nu(bool value) {
  _internal_set_whp_l_deact_whp_by_ap_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.WHP_L_DEACT_WHP_BY_AP_NU)
}

// optional bool DWF_L_TONE_SUPPRESS_BY_AP_NU = 1775;
inline bool FC_DrvWarnSM_Params::_internal_has_dwf_l_tone_suppress_by_ap_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_dwf_l_tone_suppress_by_ap_nu() const {
  return _internal_has_dwf_l_tone_suppress_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::clear_dwf_l_tone_suppress_by_ap_nu() {
  dwf_l_tone_suppress_by_ap_nu_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FC_DrvWarnSM_Params::_internal_dwf_l_tone_suppress_by_ap_nu() const {
  return dwf_l_tone_suppress_by_ap_nu_;
}
inline bool FC_DrvWarnSM_Params::dwf_l_tone_suppress_by_ap_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_TONE_SUPPRESS_BY_AP_NU)
  return _internal_dwf_l_tone_suppress_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_dwf_l_tone_suppress_by_ap_nu(bool value) {
  _has_bits_[0] |= 0x00000080u;
  dwf_l_tone_suppress_by_ap_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_dwf_l_tone_suppress_by_ap_nu(bool value) {
  _internal_set_dwf_l_tone_suppress_by_ap_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_TONE_SUPPRESS_BY_AP_NU)
}

// optional bool DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU = 1803;
inline bool FC_DrvWarnSM_Params::_internal_has_dwf_l_tone_reduct_inter_standstill_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_dwf_l_tone_reduct_inter_standstill_nu() const {
  return _internal_has_dwf_l_tone_reduct_inter_standstill_nu();
}
inline void FC_DrvWarnSM_Params::clear_dwf_l_tone_reduct_inter_standstill_nu() {
  dwf_l_tone_reduct_inter_standstill_nu_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FC_DrvWarnSM_Params::_internal_dwf_l_tone_reduct_inter_standstill_nu() const {
  return dwf_l_tone_reduct_inter_standstill_nu_;
}
inline bool FC_DrvWarnSM_Params::dwf_l_tone_reduct_inter_standstill_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU)
  return _internal_dwf_l_tone_reduct_inter_standstill_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_dwf_l_tone_reduct_inter_standstill_nu(bool value) {
  _has_bits_[0] |= 0x00000100u;
  dwf_l_tone_reduct_inter_standstill_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_dwf_l_tone_reduct_inter_standstill_nu(bool value) {
  _internal_set_dwf_l_tone_reduct_inter_standstill_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU)
}

// optional bool DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU = 2254;
inline bool FC_DrvWarnSM_Params::_internal_has_dwf_l_tone_reduct_cont_standstill_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_dwf_l_tone_reduct_cont_standstill_nu() const {
  return _internal_has_dwf_l_tone_reduct_cont_standstill_nu();
}
inline void FC_DrvWarnSM_Params::clear_dwf_l_tone_reduct_cont_standstill_nu() {
  dwf_l_tone_reduct_cont_standstill_nu_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool FC_DrvWarnSM_Params::_internal_dwf_l_tone_reduct_cont_standstill_nu() const {
  return dwf_l_tone_reduct_cont_standstill_nu_;
}
inline bool FC_DrvWarnSM_Params::dwf_l_tone_reduct_cont_standstill_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU)
  return _internal_dwf_l_tone_reduct_cont_standstill_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_dwf_l_tone_reduct_cont_standstill_nu(bool value) {
  _has_bits_[0] |= 0x00004000u;
  dwf_l_tone_reduct_cont_standstill_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_dwf_l_tone_reduct_cont_standstill_nu(bool value) {
  _internal_set_dwf_l_tone_reduct_cont_standstill_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU)
}

// optional float PDW_L_STANDSTILL_INTER_TIME_S = 3514;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_standstill_inter_time_s() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_standstill_inter_time_s() const {
  return _internal_has_pdw_l_standstill_inter_time_s();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_standstill_inter_time_s() {
  pdw_l_standstill_inter_time_s_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_standstill_inter_time_s() const {
  return pdw_l_standstill_inter_time_s_;
}
inline float FC_DrvWarnSM_Params::pdw_l_standstill_inter_time_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STANDSTILL_INTER_TIME_S)
  return _internal_pdw_l_standstill_inter_time_s();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_standstill_inter_time_s(float value) {
  _has_bits_[1] |= 0x00000100u;
  pdw_l_standstill_inter_time_s_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_standstill_inter_time_s(float value) {
  _internal_set_pdw_l_standstill_inter_time_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STANDSTILL_INTER_TIME_S)
}

// optional float PDW_L_STANDSTILL_CONT_TIME_S = 3975;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_standstill_cont_time_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_standstill_cont_time_s() const {
  return _internal_has_pdw_l_standstill_cont_time_s();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_standstill_cont_time_s() {
  pdw_l_standstill_cont_time_s_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_standstill_cont_time_s() const {
  return pdw_l_standstill_cont_time_s_;
}
inline float FC_DrvWarnSM_Params::pdw_l_standstill_cont_time_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STANDSTILL_CONT_TIME_S)
  return _internal_pdw_l_standstill_cont_time_s();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_standstill_cont_time_s(float value) {
  _has_bits_[0] |= 0x00000002u;
  pdw_l_standstill_cont_time_s_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_standstill_cont_time_s(float value) {
  _internal_set_pdw_l_standstill_cont_time_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_STANDSTILL_CONT_TIME_S)
}

// optional bool PDW_L_AUTO_ACTIV_CRITICAL_NU = 277;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_auto_activ_critical_nu() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_auto_activ_critical_nu() const {
  return _internal_has_pdw_l_auto_activ_critical_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_auto_activ_critical_nu() {
  pdw_l_auto_activ_critical_nu_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_auto_activ_critical_nu() const {
  return pdw_l_auto_activ_critical_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_auto_activ_critical_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTO_ACTIV_CRITICAL_NU)
  return _internal_pdw_l_auto_activ_critical_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_auto_activ_critical_nu(bool value) {
  _has_bits_[0] |= 0x00008000u;
  pdw_l_auto_activ_critical_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_auto_activ_critical_nu(bool value) {
  _internal_set_pdw_l_auto_activ_critical_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_AUTO_ACTIV_CRITICAL_NU)
}

// optional float PDW_L_MAX_DIST_CONT_TONE_FWD_M = 3887;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_max_dist_cont_tone_fwd_m() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_max_dist_cont_tone_fwd_m() const {
  return _internal_has_pdw_l_max_dist_cont_tone_fwd_m();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_max_dist_cont_tone_fwd_m() {
  pdw_l_max_dist_cont_tone_fwd_m_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_max_dist_cont_tone_fwd_m() const {
  return pdw_l_max_dist_cont_tone_fwd_m_;
}
inline float FC_DrvWarnSM_Params::pdw_l_max_dist_cont_tone_fwd_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_FWD_M)
  return _internal_pdw_l_max_dist_cont_tone_fwd_m();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_max_dist_cont_tone_fwd_m(float value) {
  _has_bits_[1] |= 0x00000800u;
  pdw_l_max_dist_cont_tone_fwd_m_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_max_dist_cont_tone_fwd_m(float value) {
  _internal_set_pdw_l_max_dist_cont_tone_fwd_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_FWD_M)
}

// optional float PDW_L_MAX_DIST_CONT_TONE_REAR_M = 1580;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_max_dist_cont_tone_rear_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_max_dist_cont_tone_rear_m() const {
  return _internal_has_pdw_l_max_dist_cont_tone_rear_m();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_max_dist_cont_tone_rear_m() {
  pdw_l_max_dist_cont_tone_rear_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_max_dist_cont_tone_rear_m() const {
  return pdw_l_max_dist_cont_tone_rear_m_;
}
inline float FC_DrvWarnSM_Params::pdw_l_max_dist_cont_tone_rear_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_REAR_M)
  return _internal_pdw_l_max_dist_cont_tone_rear_m();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_max_dist_cont_tone_rear_m(float value) {
  _has_bits_[0] |= 0x00001000u;
  pdw_l_max_dist_cont_tone_rear_m_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_max_dist_cont_tone_rear_m(float value) {
  _internal_set_pdw_l_max_dist_cont_tone_rear_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_REAR_M)
}

// optional float PDW_L_MAX_DIST_CONT_TONE_LAT_M = 1756;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_max_dist_cont_tone_lat_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_max_dist_cont_tone_lat_m() const {
  return _internal_has_pdw_l_max_dist_cont_tone_lat_m();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_max_dist_cont_tone_lat_m() {
  pdw_l_max_dist_cont_tone_lat_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_l_max_dist_cont_tone_lat_m() const {
  return pdw_l_max_dist_cont_tone_lat_m_;
}
inline float FC_DrvWarnSM_Params::pdw_l_max_dist_cont_tone_lat_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_LAT_M)
  return _internal_pdw_l_max_dist_cont_tone_lat_m();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_max_dist_cont_tone_lat_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  pdw_l_max_dist_cont_tone_lat_m_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_max_dist_cont_tone_lat_m(float value) {
  _internal_set_pdw_l_max_dist_cont_tone_lat_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_MAX_DIST_CONT_TONE_LAT_M)
}

// optional bool PDW_L_CONT_DIST_EXTEND_NU = 1731;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_cont_dist_extend_nu() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_cont_dist_extend_nu() const {
  return _internal_has_pdw_l_cont_dist_extend_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_cont_dist_extend_nu() {
  pdw_l_cont_dist_extend_nu_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_cont_dist_extend_nu() const {
  return pdw_l_cont_dist_extend_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_cont_dist_extend_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_CONT_DIST_EXTEND_NU)
  return _internal_pdw_l_cont_dist_extend_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_cont_dist_extend_nu(bool value) {
  _has_bits_[0] |= 0x00010000u;
  pdw_l_cont_dist_extend_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_cont_dist_extend_nu(bool value) {
  _internal_set_pdw_l_cont_dist_extend_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_CONT_DIST_EXTEND_NU)
}

// optional float PDW_AUTO_ACTIV_THRESHOLD = 2347;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_auto_activ_threshold() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_auto_activ_threshold() const {
  return _internal_has_pdw_auto_activ_threshold();
}
inline void FC_DrvWarnSM_Params::clear_pdw_auto_activ_threshold() {
  pdw_auto_activ_threshold_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float FC_DrvWarnSM_Params::_internal_pdw_auto_activ_threshold() const {
  return pdw_auto_activ_threshold_;
}
inline float FC_DrvWarnSM_Params::pdw_auto_activ_threshold() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_AUTO_ACTIV_THRESHOLD)
  return _internal_pdw_auto_activ_threshold();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_auto_activ_threshold(float value) {
  _has_bits_[0] |= 0x04000000u;
  pdw_auto_activ_threshold_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_auto_activ_threshold(float value) {
  _internal_set_pdw_auto_activ_threshold(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_AUTO_ACTIV_THRESHOLD)
}

// optional bool PDW_L_CRIT_ACT_PDW_BY_AP_NU = 3169;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_crit_act_pdw_by_ap_nu() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_crit_act_pdw_by_ap_nu() const {
  return _internal_has_pdw_l_crit_act_pdw_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_crit_act_pdw_by_ap_nu() {
  pdw_l_crit_act_pdw_by_ap_nu_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_crit_act_pdw_by_ap_nu() const {
  return pdw_l_crit_act_pdw_by_ap_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_crit_act_pdw_by_ap_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_CRIT_ACT_PDW_BY_AP_NU)
  return _internal_pdw_l_crit_act_pdw_by_ap_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_crit_act_pdw_by_ap_nu(bool value) {
  _has_bits_[0] |= 0x00020000u;
  pdw_l_crit_act_pdw_by_ap_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_crit_act_pdw_by_ap_nu(bool value) {
  _internal_set_pdw_l_crit_act_pdw_by_ap_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_CRIT_ACT_PDW_BY_AP_NU)
}

// optional bool PDW_L_FRONT_SECT_ACTIV_NU = 263;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_front_sect_activ_nu() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_front_sect_activ_nu() const {
  return _internal_has_pdw_l_front_sect_activ_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_front_sect_activ_nu() {
  pdw_l_front_sect_activ_nu_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_front_sect_activ_nu() const {
  return pdw_l_front_sect_activ_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_front_sect_activ_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_FRONT_SECT_ACTIV_NU)
  return _internal_pdw_l_front_sect_activ_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_front_sect_activ_nu(bool value) {
  _has_bits_[0] |= 0x00040000u;
  pdw_l_front_sect_activ_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_front_sect_activ_nu(bool value) {
  _internal_set_pdw_l_front_sect_activ_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_FRONT_SECT_ACTIV_NU)
}

// optional bool PDW_L_LAT_SECT_ACTIV_NU = 1676;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_lat_sect_activ_nu() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_lat_sect_activ_nu() const {
  return _internal_has_pdw_l_lat_sect_activ_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_lat_sect_activ_nu() {
  pdw_l_lat_sect_activ_nu_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_lat_sect_activ_nu() const {
  return pdw_l_lat_sect_activ_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_lat_sect_activ_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_LAT_SECT_ACTIV_NU)
  return _internal_pdw_l_lat_sect_activ_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_lat_sect_activ_nu(bool value) {
  _has_bits_[0] |= 0x00080000u;
  pdw_l_lat_sect_activ_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_lat_sect_activ_nu(bool value) {
  _internal_set_pdw_l_lat_sect_activ_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_LAT_SECT_ACTIV_NU)
}

// optional bool PDW_L_REAR_SECT_ACTIV_NU = 3832;
inline bool FC_DrvWarnSM_Params::_internal_has_pdw_l_rear_sect_activ_nu() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FC_DrvWarnSM_Params::has_pdw_l_rear_sect_activ_nu() const {
  return _internal_has_pdw_l_rear_sect_activ_nu();
}
inline void FC_DrvWarnSM_Params::clear_pdw_l_rear_sect_activ_nu() {
  pdw_l_rear_sect_activ_nu_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool FC_DrvWarnSM_Params::_internal_pdw_l_rear_sect_activ_nu() const {
  return pdw_l_rear_sect_activ_nu_;
}
inline bool FC_DrvWarnSM_Params::pdw_l_rear_sect_activ_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_REAR_SECT_ACTIV_NU)
  return _internal_pdw_l_rear_sect_activ_nu();
}
inline void FC_DrvWarnSM_Params::_internal_set_pdw_l_rear_sect_activ_nu(bool value) {
  _has_bits_[0] |= 0x00100000u;
  pdw_l_rear_sect_activ_nu_ = value;
}
inline void FC_DrvWarnSM_Params::set_pdw_l_rear_sect_activ_nu(bool value) {
  _internal_set_pdw_l_rear_sect_activ_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params.PDW_L_REAR_SECT_ACTIV_NU)
}

// -------------------------------------------------------------------

// FC_DrvWarnSM_Params_array_port

// repeated .pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params data = 3981;
inline int FC_DrvWarnSM_Params_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FC_DrvWarnSM_Params_array_port::data_size() const {
  return _internal_data_size();
}
inline void FC_DrvWarnSM_Params_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* FC_DrvWarnSM_Params_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params >*
FC_DrvWarnSM_Params_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port.data)
  return &data_;
}
inline const ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params& FC_DrvWarnSM_Params_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params& FC_DrvWarnSM_Params_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* FC_DrvWarnSM_Params_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* FC_DrvWarnSM_Params_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params >&
FC_DrvWarnSM_Params_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fc_drv_warn_sm_params
}  // namespace mf_drvwarnsm
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto
