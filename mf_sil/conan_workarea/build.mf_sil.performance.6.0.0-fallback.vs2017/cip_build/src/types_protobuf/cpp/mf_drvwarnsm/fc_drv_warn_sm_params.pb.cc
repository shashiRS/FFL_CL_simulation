// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_drvwarnsm/fc_drv_warn_sm_params.proto

#include "mf_drvwarnsm/fc_drv_warn_sm_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto;
namespace pb {
namespace mf_drvwarnsm {
namespace fc_drv_warn_sm_params {
class FC_DrvWarnSM_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_DrvWarnSM_Params> _instance;
} _FC_DrvWarnSM_Params_default_instance_;
class FC_DrvWarnSM_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_DrvWarnSM_Params_array_port> _instance;
} _FC_DrvWarnSM_Params_array_port_default_instance_;
}  // namespace fc_drv_warn_sm_params
}  // namespace mf_drvwarnsm
}  // namespace pb
static void InitDefaultsscc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_drvwarnsm::fc_drv_warn_sm_params::_FC_DrvWarnSM_Params_default_instance_;
    new (ptr) ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_DrvWarnSM_Params_array_port_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_drvwarnsm::fc_drv_warn_sm_params::_FC_DrvWarnSM_Params_array_port_default_instance_;
    new (ptr) ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_DrvWarnSM_Params_array_port_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_DrvWarnSM_Params_array_port_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto}, {
      &scc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, dwf_l_speed_hysteresis_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_init_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_stabilizaton_wait_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_standstill_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rev_gear_deb_time_man_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rev_gear_deb_time_aut_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_vel_thresh_off_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, whp_l_max_speed_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, whp_l_min_whl_angle_diff_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rollback_w_obst_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rollback_wo_obst_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_max_dist_cont_tone_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_min_dist_rear_sensors_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, dwf_c_ops_variant_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, dwf_c_transmission_type_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_driving_tube_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_automatic_activation_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_auto_act_button_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_autom_activ_standstill_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rollback_activation_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_deactiv_by_p_gear_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_deactiv_by_epb_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_p_gear_reset_auto_act_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_epb_reset_auto_act_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rollback_full_view_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rollback_trailer_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_act_pdw_by_ap_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, whp_l_deact_whp_by_ap_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, dwf_l_tone_suppress_by_ap_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, dwf_l_tone_reduct_inter_standstill_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, dwf_l_tone_reduct_cont_standstill_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_standstill_inter_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_standstill_cont_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_auto_activ_critical_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_max_dist_cont_tone_fwd_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_max_dist_cont_tone_rear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_max_dist_cont_tone_lat_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_cont_dist_extend_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_auto_activ_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_crit_act_pdw_by_ap_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_front_sect_activ_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_lat_sect_activ_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params, pdw_l_rear_sect_activ_nu_),
  21,
  0,
  9,
  4,
  27,
  2,
  11,
  32,
  37,
  41,
  39,
  38,
  10,
  3,
  44,
  42,
  28,
  29,
  30,
  31,
  22,
  23,
  24,
  25,
  33,
  34,
  35,
  36,
  5,
  6,
  7,
  8,
  14,
  40,
  1,
  15,
  43,
  12,
  13,
  16,
  26,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 50, sizeof(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params)},
  { 95, 101, sizeof(::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_drvwarnsm::fc_drv_warn_sm_params::_FC_DrvWarnSM_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_drvwarnsm::fc_drv_warn_sm_params::_FC_DrvWarnSM_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(mf_drvwarnsm/fc_drv_warn_sm_params.pro"
  "to\022%pb.mf_drvwarnsm.fc_drv_warn_sm_param"
  "s\032\027eco/signal_header.proto\"\270\r\n\023FC_DrvWar"
  "nSM_Params\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\n"
  "sSigHeader\030\211\010 \001(\0132\".pb.eco.signal_header"
  ".SignalHeader\022#\n\032DWF_L_SPEED_HYSTERESIS_"
  "MPS\030\304\010 \001(\002\022\032\n\021PDW_L_INIT_TIME_S\030\233\005 \001(\002\022\'"
  "\n\036PDW_L_STABILIZATON_WAIT_TIME_S\030\246\024 \001(\002\022"
  "\037\n\027PDW_L_STANDSTILL_TIME_S\030. \001(\002\022&\n\035PDW_"
  "L_REV_GEAR_DEB_TIME_MAN_S\030\253\t \001(\002\022&\n\035PDW_"
  "L_REV_GEAR_DEB_TIME_AUT_S\030\364\024 \001(\002\022!\n\030PDW_"
  "L_VEL_THRESH_OFF_MPS\030\250\030 \001(\002\022\034\n\023WHP_L_MAX"
  "_SPEED_MPS\030\370\033 \001(\002\022%\n\034WHP_L_MIN_WHL_ANGLE"
  "_DIFF_RAD\030\254\033 \001(\002\022%\n\034PDW_L_ROLLBACK_W_OBS"
  "T_DIST_M\030\236\033 \001(\002\022&\n\035PDW_L_ROLLBACK_WO_OBS"
  "T_DIST_M\030\331\010 \001(\002\022#\n\032PDW_L_MAX_DIST_CONT_T"
  "ONE_M\030\221\002 \001(\002\022&\n\035PDW_L_MIN_DIST_REAR_SENS"
  "ORS_M\030\327\036 \001(\002\022\035\n\024DWF_C_OPS_VARIANT_NU\030\243\034 "
  "\001(\r\022#\n\032DWF_C_TRANSMISSION_TYPE_NU\030\364\034 \001(\010"
  "\022\036\n\025PDW_L_DRIVING_TUBE_NU\030\220\022 \001(\010\022&\n\035PDW_"
  "L_AUTOMATIC_ACTIVATION_NU\030\212\023 \001(\010\022!\n\030PDW_"
  "L_AUTO_ACT_BUTTON_NU\030\213\017 \001(\010\022(\n\037PDW_L_AUT"
  "OM_ACTIV_STANDSTILL_NU\030\313\024 \001(\010\022%\n\034PDW_L_R"
  "OLLBACK_ACTIVATION_NU\030\370\004 \001(\010\022#\n\032PDW_L_DE"
  "ACTIV_BY_P_GEAR_NU\030\231\036 \001(\010\022 \n\027PDW_L_DEACT"
  "IV_BY_EPB_NU\030\227\021 \001(\010\022\'\n\036PDW_L_P_GEAR_RESE"
  "T_AUTO_ACT_NU\030\342\n \001(\010\022$\n\033PDW_L_EPB_RESET_"
  "AUTO_ACT_NU\030\321\021 \001(\010\022$\n\033PDW_L_ROLLBACK_FUL"
  "L_VIEW_NU\030\373\034 \001(\010\022\"\n\031PDW_L_ROLLBACK_TRAIL"
  "ER_NU\030\241\035 \001(\010\022\037\n\026PDW_L_ACT_PDW_BY_AP_NU\030\346"
  "\003 \001(\010\022 \n\030WHP_L_DEACT_WHP_BY_AP_NU\030\021 \001(\010\022"
  "%\n\034DWF_L_TONE_SUPPRESS_BY_AP_NU\030\357\r \001(\010\022."
  "\n%DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU\030"
  "\213\016 \001(\010\022-\n$DWF_L_TONE_REDUCT_CONT_STANDST"
  "ILL_NU\030\316\021 \001(\010\022&\n\035PDW_L_STANDSTILL_INTER_"
  "TIME_S\030\272\033 \001(\002\022%\n\034PDW_L_STANDSTILL_CONT_T"
  "IME_S\030\207\037 \001(\002\022%\n\034PDW_L_AUTO_ACTIV_CRITICA"
  "L_NU\030\225\002 \001(\010\022\'\n\036PDW_L_MAX_DIST_CONT_TONE_"
  "FWD_M\030\257\036 \001(\002\022(\n\037PDW_L_MAX_DIST_CONT_TONE"
  "_REAR_M\030\254\014 \001(\002\022\'\n\036PDW_L_MAX_DIST_CONT_TO"
  "NE_LAT_M\030\334\r \001(\002\022\"\n\031PDW_L_CONT_DIST_EXTEN"
  "D_NU\030\303\r \001(\010\022!\n\030PDW_AUTO_ACTIV_THRESHOLD\030"
  "\253\022 \001(\002\022$\n\033PDW_L_CRIT_ACT_PDW_BY_AP_NU\030\341\030"
  " \001(\010\022\"\n\031PDW_L_FRONT_SECT_ACTIV_NU\030\207\002 \001(\010"
  "\022 \n\027PDW_L_LAT_SECT_ACTIV_NU\030\214\r \001(\010\022!\n\030PD"
  "W_L_REAR_SECT_ACTIV_NU\030\370\035 \001(\010\"k\n\036FC_DrvW"
  "arnSM_Params_array_port\022I\n\004data\030\215\037 \003(\0132:"
  ".pb.mf_drvwarnsm.fc_drv_warn_sm_params.F"
  "C_DrvWarnSM_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.base,
  &scc_info_FC_DrvWarnSM_Params_array_port_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_once;
static bool descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto = {
  &descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_initialized, descriptor_table_protodef_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto, "mf_drvwarnsm/fc_drv_warn_sm_params.proto", 1938,
  &descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_once, descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_sccs, descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto::offsets,
  file_level_metadata_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto, 2, file_level_enum_descriptors_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto, file_level_service_descriptors_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto), true);
namespace pb {
namespace mf_drvwarnsm {
namespace fc_drv_warn_sm_params {

// ===================================================================

void FC_DrvWarnSM_Params::InitAsDefaultInstance() {
  ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::_FC_DrvWarnSM_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_DrvWarnSM_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_DrvWarnSM_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_DrvWarnSM_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dwf_l_speed_hysteresis_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pdw_l_init_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pdw_l_stabilizaton_wait_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_pdw_l_standstill_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pdw_l_rev_gear_deb_time_man_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_pdw_l_rev_gear_deb_time_aut_s(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_pdw_l_vel_thresh_off_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_whp_l_max_speed_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_whp_l_min_whl_angle_diff_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_pdw_l_rollback_w_obst_dist_m(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_pdw_l_rollback_wo_obst_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pdw_l_max_dist_cont_tone_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pdw_l_min_dist_rear_sensors_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_dwf_c_ops_variant_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_dwf_c_transmission_type_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_pdw_l_driving_tube_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_pdw_l_automatic_activation_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_pdw_l_auto_act_button_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_pdw_l_autom_activ_standstill_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_pdw_l_rollback_activation_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_pdw_l_deactiv_by_p_gear_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_pdw_l_deactiv_by_epb_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pdw_l_p_gear_reset_auto_act_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_pdw_l_epb_reset_auto_act_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_pdw_l_rollback_full_view_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_pdw_l_rollback_trailer_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_pdw_l_act_pdw_by_ap_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_whp_l_deact_whp_by_ap_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dwf_l_tone_suppress_by_ap_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dwf_l_tone_reduct_inter_standstill_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dwf_l_tone_reduct_cont_standstill_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_pdw_l_standstill_inter_time_s(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_pdw_l_standstill_cont_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pdw_l_auto_activ_critical_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pdw_l_max_dist_cont_tone_fwd_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_pdw_l_max_dist_cont_tone_rear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pdw_l_max_dist_cont_tone_lat_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pdw_l_cont_dist_extend_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pdw_auto_activ_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_pdw_l_crit_act_pdw_by_ap_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_pdw_l_front_sect_activ_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_pdw_l_lat_sect_activ_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_pdw_l_rear_sect_activ_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_DrvWarnSM_Params::_Internal::ssigheader(const FC_DrvWarnSM_Params* msg) {
  return *msg->ssigheader_;
}
void FC_DrvWarnSM_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_DrvWarnSM_Params::FC_DrvWarnSM_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
}
FC_DrvWarnSM_Params::FC_DrvWarnSM_Params(const FC_DrvWarnSM_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&pdw_l_standstill_cont_time_s_, &from.pdw_l_standstill_cont_time_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdw_l_min_dist_rear_sensors_m_) -
    reinterpret_cast<char*>(&pdw_l_standstill_cont_time_s_)) + sizeof(pdw_l_min_dist_rear_sensors_m_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
}

void FC_DrvWarnSM_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdw_l_min_dist_rear_sensors_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(pdw_l_min_dist_rear_sensors_m_));
}

FC_DrvWarnSM_Params::~FC_DrvWarnSM_Params() {
  // @@protoc_insertion_point(destructor:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  SharedDtor();
}

void FC_DrvWarnSM_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_DrvWarnSM_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_DrvWarnSM_Params& FC_DrvWarnSM_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_DrvWarnSM_Params_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_DrvWarnSM_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&pdw_l_standstill_cont_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dwf_l_tone_suppress_by_ap_nu_) -
        reinterpret_cast<char*>(&pdw_l_standstill_cont_time_s_)) + sizeof(dwf_l_tone_suppress_by_ap_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&dwf_l_tone_reduct_inter_standstill_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdw_l_auto_activ_critical_nu_) -
        reinterpret_cast<char*>(&dwf_l_tone_reduct_inter_standstill_nu_)) + sizeof(pdw_l_auto_activ_critical_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&pdw_l_cont_dist_extend_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdw_l_rollback_activation_nu_) -
        reinterpret_cast<char*>(&pdw_l_cont_dist_extend_nu_)) + sizeof(pdw_l_rollback_activation_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&pdw_l_deactiv_by_p_gear_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdw_l_auto_act_button_nu_) -
        reinterpret_cast<char*>(&pdw_l_deactiv_by_p_gear_nu_)) + sizeof(pdw_l_auto_act_button_nu_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pdw_l_rev_gear_deb_time_aut_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whp_l_min_whl_angle_diff_rad_) -
        reinterpret_cast<char*>(&pdw_l_rev_gear_deb_time_aut_s_)) + sizeof(whp_l_min_whl_angle_diff_rad_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&pdw_l_standstill_inter_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdw_l_min_dist_rear_sensors_m_) -
        reinterpret_cast<char*>(&pdw_l_standstill_inter_time_s_)) + sizeof(pdw_l_min_dist_rear_sensors_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_DrvWarnSM_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool WHP_L_DEACT_WHP_BY_AP_NU = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_whp_l_deact_whp_by_ap_nu(&_has_bits_);
          whp_l_deact_whp_by_ap_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_STANDSTILL_TIME_S = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_pdw_l_standstill_time_s(&_has_bits_);
          pdw_l_standstill_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_FRONT_SECT_ACTIV_NU = 263;
      case 263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pdw_l_front_sect_activ_nu(&_has_bits_);
          pdw_l_front_sect_activ_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_MAX_DIST_CONT_TONE_M = 273;
      case 273:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_pdw_l_max_dist_cont_tone_m(&_has_bits_);
          pdw_l_max_dist_cont_tone_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_AUTO_ACTIV_CRITICAL_NU = 277;
      case 277:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_pdw_l_auto_activ_critical_nu(&_has_bits_);
          pdw_l_auto_activ_critical_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_ACT_PDW_BY_AP_NU = 486;
      case 486:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pdw_l_act_pdw_by_ap_nu(&_has_bits_);
          pdw_l_act_pdw_by_ap_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_ROLLBACK_ACTIVATION_NU = 632;
      case 632:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_pdw_l_rollback_activation_nu(&_has_bits_);
          pdw_l_rollback_activation_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_INIT_TIME_S = 667;
      case 667:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_pdw_l_init_time_s(&_has_bits_);
          pdw_l_init_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float DWF_L_SPEED_HYSTERESIS_MPS = 1092;
      case 1092:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_dwf_l_speed_hysteresis_mps(&_has_bits_);
          dwf_l_speed_hysteresis_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_ROLLBACK_WO_OBST_DIST_M = 1113;
      case 1113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_pdw_l_rollback_wo_obst_dist_m(&_has_bits_);
          pdw_l_rollback_wo_obst_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_REV_GEAR_DEB_TIME_MAN_S = 1195;
      case 1195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_pdw_l_rev_gear_deb_time_man_s(&_has_bits_);
          pdw_l_rev_gear_deb_time_man_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_P_GEAR_RESET_AUTO_ACT_NU = 1378;
      case 1378:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pdw_l_p_gear_reset_auto_act_nu(&_has_bits_);
          pdw_l_p_gear_reset_auto_act_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_MAX_DIST_CONT_TONE_REAR_M = 1580;
      case 1580:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_pdw_l_max_dist_cont_tone_rear_m(&_has_bits_);
          pdw_l_max_dist_cont_tone_rear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_LAT_SECT_ACTIV_NU = 1676;
      case 1676:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_pdw_l_lat_sect_activ_nu(&_has_bits_);
          pdw_l_lat_sect_activ_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_CONT_DIST_EXTEND_NU = 1731;
      case 1731:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pdw_l_cont_dist_extend_nu(&_has_bits_);
          pdw_l_cont_dist_extend_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_MAX_DIST_CONT_TONE_LAT_M = 1756;
      case 1756:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_pdw_l_max_dist_cont_tone_lat_m(&_has_bits_);
          pdw_l_max_dist_cont_tone_lat_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool DWF_L_TONE_SUPPRESS_BY_AP_NU = 1775;
      case 1775:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dwf_l_tone_suppress_by_ap_nu(&_has_bits_);
          dwf_l_tone_suppress_by_ap_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU = 1803;
      case 1803:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_dwf_l_tone_reduct_inter_standstill_nu(&_has_bits_);
          dwf_l_tone_reduct_inter_standstill_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_AUTO_ACT_BUTTON_NU = 1931;
      case 1931:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_pdw_l_auto_act_button_nu(&_has_bits_);
          pdw_l_auto_act_button_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_DEACTIV_BY_EPB_NU = 2199;
      case 2199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_pdw_l_deactiv_by_epb_nu(&_has_bits_);
          pdw_l_deactiv_by_epb_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU = 2254;
      case 2254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dwf_l_tone_reduct_cont_standstill_nu(&_has_bits_);
          dwf_l_tone_reduct_cont_standstill_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_EPB_RESET_AUTO_ACT_NU = 2257;
      case 2257:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_pdw_l_epb_reset_auto_act_nu(&_has_bits_);
          pdw_l_epb_reset_auto_act_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_DRIVING_TUBE_NU = 2320;
      case 2320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pdw_l_driving_tube_nu(&_has_bits_);
          pdw_l_driving_tube_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_AUTO_ACTIV_THRESHOLD = 2347;
      case 2347:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_pdw_auto_activ_threshold(&_has_bits_);
          pdw_auto_activ_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_AUTOMATIC_ACTIVATION_NU = 2442;
      case 2442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pdw_l_automatic_activation_nu(&_has_bits_);
          pdw_l_automatic_activation_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_STABILIZATON_WAIT_TIME_S = 2598;
      case 2598:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_pdw_l_stabilizaton_wait_time_s(&_has_bits_);
          pdw_l_stabilizaton_wait_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_AUTOM_ACTIV_STANDSTILL_NU = 2635;
      case 2635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_pdw_l_autom_activ_standstill_nu(&_has_bits_);
          pdw_l_autom_activ_standstill_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_REV_GEAR_DEB_TIME_AUT_S = 2676;
      case 2676:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_pdw_l_rev_gear_deb_time_aut_s(&_has_bits_);
          pdw_l_rev_gear_deb_time_aut_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_VEL_THRESH_OFF_MPS = 3112;
      case 3112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_pdw_l_vel_thresh_off_mps(&_has_bits_);
          pdw_l_vel_thresh_off_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_CRIT_ACT_PDW_BY_AP_NU = 3169;
      case 3169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pdw_l_crit_act_pdw_by_ap_nu(&_has_bits_);
          pdw_l_crit_act_pdw_by_ap_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_ROLLBACK_W_OBST_DIST_M = 3486;
      case 3486:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_pdw_l_rollback_w_obst_dist_m(&_has_bits_);
          pdw_l_rollback_w_obst_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_L_MIN_WHL_ANGLE_DIFF_RAD = 3500;
      case 3500:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_whp_l_min_whl_angle_diff_rad(&_has_bits_);
          whp_l_min_whl_angle_diff_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_STANDSTILL_INTER_TIME_S = 3514;
      case 3514:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_pdw_l_standstill_inter_time_s(&_has_bits_);
          pdw_l_standstill_inter_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_L_MAX_SPEED_MPS = 3576;
      case 3576:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_whp_l_max_speed_mps(&_has_bits_);
          whp_l_max_speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 DWF_C_OPS_VARIANT_NU = 3619;
      case 3619:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dwf_c_ops_variant_nu(&_has_bits_);
          dwf_c_ops_variant_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DWF_C_TRANSMISSION_TYPE_NU = 3700;
      case 3700:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_dwf_c_transmission_type_nu(&_has_bits_);
          dwf_c_transmission_type_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_ROLLBACK_FULL_VIEW_NU = 3707;
      case 3707:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_pdw_l_rollback_full_view_nu(&_has_bits_);
          pdw_l_rollback_full_view_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_ROLLBACK_TRAILER_NU = 3745;
      case 3745:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pdw_l_rollback_trailer_nu(&_has_bits_);
          pdw_l_rollback_trailer_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_REAR_SECT_ACTIV_NU = 3832;
      case 3832:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_pdw_l_rear_sect_activ_nu(&_has_bits_);
          pdw_l_rear_sect_activ_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool PDW_L_DEACTIV_BY_P_GEAR_NU = 3865;
      case 3865:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_pdw_l_deactiv_by_p_gear_nu(&_has_bits_);
          pdw_l_deactiv_by_p_gear_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_MAX_DIST_CONT_TONE_FWD_M = 3887;
      case 3887:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_pdw_l_max_dist_cont_tone_fwd_m(&_has_bits_);
          pdw_l_max_dist_cont_tone_fwd_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_MIN_DIST_REAR_SENSORS_M = 3927;
      case 3927:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_pdw_l_min_dist_rear_sensors_m(&_has_bits_);
          pdw_l_min_dist_rear_sensors_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float PDW_L_STANDSTILL_CONT_TIME_S = 3975;
      case 3975:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_pdw_l_standstill_cont_time_s(&_has_bits_);
          pdw_l_standstill_cont_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_DrvWarnSM_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool WHP_L_DEACT_WHP_BY_AP_NU = 17;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_whp_l_deact_whp_by_ap_nu(), target);
  }

  // optional float PDW_L_STANDSTILL_TIME_S = 46;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_pdw_l_standstill_time_s(), target);
  }

  // optional bool PDW_L_FRONT_SECT_ACTIV_NU = 263;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(263, this->_internal_pdw_l_front_sect_activ_nu(), target);
  }

  // optional float PDW_L_MAX_DIST_CONT_TONE_M = 273;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(273, this->_internal_pdw_l_max_dist_cont_tone_m(), target);
  }

  // optional bool PDW_L_AUTO_ACTIV_CRITICAL_NU = 277;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(277, this->_internal_pdw_l_auto_activ_critical_nu(), target);
  }

  // optional bool PDW_L_ACT_PDW_BY_AP_NU = 486;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(486, this->_internal_pdw_l_act_pdw_by_ap_nu(), target);
  }

  // optional bool PDW_L_ROLLBACK_ACTIVATION_NU = 632;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(632, this->_internal_pdw_l_rollback_activation_nu(), target);
  }

  // optional float PDW_L_INIT_TIME_S = 667;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(667, this->_internal_pdw_l_init_time_s(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float DWF_L_SPEED_HYSTERESIS_MPS = 1092;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1092, this->_internal_dwf_l_speed_hysteresis_mps(), target);
  }

  // optional float PDW_L_ROLLBACK_WO_OBST_DIST_M = 1113;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1113, this->_internal_pdw_l_rollback_wo_obst_dist_m(), target);
  }

  // optional float PDW_L_REV_GEAR_DEB_TIME_MAN_S = 1195;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1195, this->_internal_pdw_l_rev_gear_deb_time_man_s(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool PDW_L_P_GEAR_RESET_AUTO_ACT_NU = 1378;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1378, this->_internal_pdw_l_p_gear_reset_auto_act_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float PDW_L_MAX_DIST_CONT_TONE_REAR_M = 1580;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1580, this->_internal_pdw_l_max_dist_cont_tone_rear_m(), target);
  }

  // optional bool PDW_L_LAT_SECT_ACTIV_NU = 1676;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1676, this->_internal_pdw_l_lat_sect_activ_nu(), target);
  }

  // optional bool PDW_L_CONT_DIST_EXTEND_NU = 1731;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1731, this->_internal_pdw_l_cont_dist_extend_nu(), target);
  }

  // optional float PDW_L_MAX_DIST_CONT_TONE_LAT_M = 1756;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1756, this->_internal_pdw_l_max_dist_cont_tone_lat_m(), target);
  }

  // optional bool DWF_L_TONE_SUPPRESS_BY_AP_NU = 1775;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1775, this->_internal_dwf_l_tone_suppress_by_ap_nu(), target);
  }

  // optional bool DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU = 1803;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1803, this->_internal_dwf_l_tone_reduct_inter_standstill_nu(), target);
  }

  // optional bool PDW_L_AUTO_ACT_BUTTON_NU = 1931;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1931, this->_internal_pdw_l_auto_act_button_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool PDW_L_DEACTIV_BY_EPB_NU = 2199;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2199, this->_internal_pdw_l_deactiv_by_epb_nu(), target);
  }

  // optional bool DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU = 2254;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2254, this->_internal_dwf_l_tone_reduct_cont_standstill_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool PDW_L_EPB_RESET_AUTO_ACT_NU = 2257;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2257, this->_internal_pdw_l_epb_reset_auto_act_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool PDW_L_DRIVING_TUBE_NU = 2320;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2320, this->_internal_pdw_l_driving_tube_nu(), target);
  }

  // optional float PDW_AUTO_ACTIV_THRESHOLD = 2347;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2347, this->_internal_pdw_auto_activ_threshold(), target);
  }

  // optional bool PDW_L_AUTOMATIC_ACTIVATION_NU = 2442;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2442, this->_internal_pdw_l_automatic_activation_nu(), target);
  }

  // optional float PDW_L_STABILIZATON_WAIT_TIME_S = 2598;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2598, this->_internal_pdw_l_stabilizaton_wait_time_s(), target);
  }

  // optional bool PDW_L_AUTOM_ACTIV_STANDSTILL_NU = 2635;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2635, this->_internal_pdw_l_autom_activ_standstill_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float PDW_L_REV_GEAR_DEB_TIME_AUT_S = 2676;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2676, this->_internal_pdw_l_rev_gear_deb_time_aut_s(), target);
  }

  // optional float PDW_L_VEL_THRESH_OFF_MPS = 3112;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3112, this->_internal_pdw_l_vel_thresh_off_mps(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool PDW_L_CRIT_ACT_PDW_BY_AP_NU = 3169;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3169, this->_internal_pdw_l_crit_act_pdw_by_ap_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float PDW_L_ROLLBACK_W_OBST_DIST_M = 3486;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3486, this->_internal_pdw_l_rollback_w_obst_dist_m(), target);
  }

  // optional float WHP_L_MIN_WHL_ANGLE_DIFF_RAD = 3500;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3500, this->_internal_whp_l_min_whl_angle_diff_rad(), target);
  }

  // optional float PDW_L_STANDSTILL_INTER_TIME_S = 3514;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3514, this->_internal_pdw_l_standstill_inter_time_s(), target);
  }

  // optional float WHP_L_MAX_SPEED_MPS = 3576;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3576, this->_internal_whp_l_max_speed_mps(), target);
  }

  // optional uint32 DWF_C_OPS_VARIANT_NU = 3619;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3619, this->_internal_dwf_c_ops_variant_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool DWF_C_TRANSMISSION_TYPE_NU = 3700;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3700, this->_internal_dwf_c_transmission_type_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool PDW_L_ROLLBACK_FULL_VIEW_NU = 3707;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3707, this->_internal_pdw_l_rollback_full_view_nu(), target);
  }

  // optional bool PDW_L_ROLLBACK_TRAILER_NU = 3745;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3745, this->_internal_pdw_l_rollback_trailer_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool PDW_L_REAR_SECT_ACTIV_NU = 3832;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3832, this->_internal_pdw_l_rear_sect_activ_nu(), target);
  }

  // optional bool PDW_L_DEACTIV_BY_P_GEAR_NU = 3865;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3865, this->_internal_pdw_l_deactiv_by_p_gear_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float PDW_L_MAX_DIST_CONT_TONE_FWD_M = 3887;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3887, this->_internal_pdw_l_max_dist_cont_tone_fwd_m(), target);
  }

  // optional float PDW_L_MIN_DIST_REAR_SENSORS_M = 3927;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3927, this->_internal_pdw_l_min_dist_rear_sensors_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float PDW_L_STANDSTILL_CONT_TIME_S = 3975;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3975, this->_internal_pdw_l_standstill_cont_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  return target;
}

size_t FC_DrvWarnSM_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float PDW_L_STANDSTILL_CONT_TIME_S = 3975;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float PDW_L_STANDSTILL_TIME_S = 46;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float PDW_L_MAX_DIST_CONT_TONE_M = 273;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float PDW_L_INIT_TIME_S = 667;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional bool PDW_L_ACT_PDW_BY_AP_NU = 486;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool WHP_L_DEACT_WHP_BY_AP_NU = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool DWF_L_TONE_SUPPRESS_BY_AP_NU = 1775;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool DWF_L_TONE_REDUCT_INTER_STANDSTILL_NU = 1803;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional float DWF_L_SPEED_HYSTERESIS_MPS = 1092;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float PDW_L_ROLLBACK_WO_OBST_DIST_M = 1113;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float PDW_L_REV_GEAR_DEB_TIME_MAN_S = 1195;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float PDW_L_MAX_DIST_CONT_TONE_REAR_M = 1580;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float PDW_L_MAX_DIST_CONT_TONE_LAT_M = 1756;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional bool DWF_L_TONE_REDUCT_CONT_STANDSTILL_NU = 2254;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_AUTO_ACTIV_CRITICAL_NU = 277;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool PDW_L_CONT_DIST_EXTEND_NU = 1731;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool PDW_L_CRIT_ACT_PDW_BY_AP_NU = 3169;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_FRONT_SECT_ACTIV_NU = 263;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool PDW_L_LAT_SECT_ACTIV_NU = 1676;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool PDW_L_REAR_SECT_ACTIV_NU = 3832;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional bool PDW_L_AUTOM_ACTIV_STANDSTILL_NU = 2635;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_ROLLBACK_ACTIVATION_NU = 632;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool PDW_L_DEACTIV_BY_P_GEAR_NU = 3865;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_DEACTIV_BY_EPB_NU = 2199;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional float PDW_AUTO_ACTIV_THRESHOLD = 2347;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float PDW_L_STABILIZATON_WAIT_TIME_S = 2598;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional bool DWF_C_TRANSMISSION_TYPE_NU = 3700;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_DRIVING_TUBE_NU = 2320;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_AUTOMATIC_ACTIVATION_NU = 2442;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_AUTO_ACT_BUTTON_NU = 1931;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float PDW_L_REV_GEAR_DEB_TIME_AUT_S = 2676;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional bool PDW_L_P_GEAR_RESET_AUTO_ACT_NU = 1378;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool PDW_L_EPB_RESET_AUTO_ACT_NU = 2257;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_ROLLBACK_FULL_VIEW_NU = 3707;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool PDW_L_ROLLBACK_TRAILER_NU = 3745;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional float PDW_L_VEL_THRESH_OFF_MPS = 3112;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float PDW_L_ROLLBACK_W_OBST_DIST_M = 3486;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float WHP_L_MIN_WHL_ANGLE_DIFF_RAD = 3500;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float PDW_L_STANDSTILL_INTER_TIME_S = 3514;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float WHP_L_MAX_SPEED_MPS = 3576;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional uint32 DWF_C_OPS_VARIANT_NU = 3619;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dwf_c_ops_variant_nu());
    }

    // optional float PDW_L_MAX_DIST_CONT_TONE_FWD_M = 3887;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float PDW_L_MIN_DIST_REAR_SENSORS_M = 3927;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_DrvWarnSM_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_DrvWarnSM_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_DrvWarnSM_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
    MergeFrom(*source);
  }
}

void FC_DrvWarnSM_Params::MergeFrom(const FC_DrvWarnSM_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      pdw_l_standstill_cont_time_s_ = from.pdw_l_standstill_cont_time_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      pdw_l_standstill_time_s_ = from.pdw_l_standstill_time_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      pdw_l_max_dist_cont_tone_m_ = from.pdw_l_max_dist_cont_tone_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      pdw_l_init_time_s_ = from.pdw_l_init_time_s_;
    }
    if (cached_has_bits & 0x00000020u) {
      pdw_l_act_pdw_by_ap_nu_ = from.pdw_l_act_pdw_by_ap_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      whp_l_deact_whp_by_ap_nu_ = from.whp_l_deact_whp_by_ap_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      dwf_l_tone_suppress_by_ap_nu_ = from.dwf_l_tone_suppress_by_ap_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      dwf_l_tone_reduct_inter_standstill_nu_ = from.dwf_l_tone_reduct_inter_standstill_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      dwf_l_speed_hysteresis_mps_ = from.dwf_l_speed_hysteresis_mps_;
    }
    if (cached_has_bits & 0x00000400u) {
      pdw_l_rollback_wo_obst_dist_m_ = from.pdw_l_rollback_wo_obst_dist_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      pdw_l_rev_gear_deb_time_man_s_ = from.pdw_l_rev_gear_deb_time_man_s_;
    }
    if (cached_has_bits & 0x00001000u) {
      pdw_l_max_dist_cont_tone_rear_m_ = from.pdw_l_max_dist_cont_tone_rear_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      pdw_l_max_dist_cont_tone_lat_m_ = from.pdw_l_max_dist_cont_tone_lat_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      dwf_l_tone_reduct_cont_standstill_nu_ = from.dwf_l_tone_reduct_cont_standstill_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      pdw_l_auto_activ_critical_nu_ = from.pdw_l_auto_activ_critical_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      pdw_l_cont_dist_extend_nu_ = from.pdw_l_cont_dist_extend_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      pdw_l_crit_act_pdw_by_ap_nu_ = from.pdw_l_crit_act_pdw_by_ap_nu_;
    }
    if (cached_has_bits & 0x00040000u) {
      pdw_l_front_sect_activ_nu_ = from.pdw_l_front_sect_activ_nu_;
    }
    if (cached_has_bits & 0x00080000u) {
      pdw_l_lat_sect_activ_nu_ = from.pdw_l_lat_sect_activ_nu_;
    }
    if (cached_has_bits & 0x00100000u) {
      pdw_l_rear_sect_activ_nu_ = from.pdw_l_rear_sect_activ_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00400000u) {
      pdw_l_autom_activ_standstill_nu_ = from.pdw_l_autom_activ_standstill_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      pdw_l_rollback_activation_nu_ = from.pdw_l_rollback_activation_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      pdw_l_deactiv_by_p_gear_nu_ = from.pdw_l_deactiv_by_p_gear_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      pdw_l_deactiv_by_epb_nu_ = from.pdw_l_deactiv_by_epb_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      pdw_auto_activ_threshold_ = from.pdw_auto_activ_threshold_;
    }
    if (cached_has_bits & 0x08000000u) {
      pdw_l_stabilizaton_wait_time_s_ = from.pdw_l_stabilizaton_wait_time_s_;
    }
    if (cached_has_bits & 0x10000000u) {
      dwf_c_transmission_type_nu_ = from.dwf_c_transmission_type_nu_;
    }
    if (cached_has_bits & 0x20000000u) {
      pdw_l_driving_tube_nu_ = from.pdw_l_driving_tube_nu_;
    }
    if (cached_has_bits & 0x40000000u) {
      pdw_l_automatic_activation_nu_ = from.pdw_l_automatic_activation_nu_;
    }
    if (cached_has_bits & 0x80000000u) {
      pdw_l_auto_act_button_nu_ = from.pdw_l_auto_act_button_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pdw_l_rev_gear_deb_time_aut_s_ = from.pdw_l_rev_gear_deb_time_aut_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      pdw_l_p_gear_reset_auto_act_nu_ = from.pdw_l_p_gear_reset_auto_act_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      pdw_l_epb_reset_auto_act_nu_ = from.pdw_l_epb_reset_auto_act_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      pdw_l_rollback_full_view_nu_ = from.pdw_l_rollback_full_view_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      pdw_l_rollback_trailer_nu_ = from.pdw_l_rollback_trailer_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      pdw_l_vel_thresh_off_mps_ = from.pdw_l_vel_thresh_off_mps_;
    }
    if (cached_has_bits & 0x00000040u) {
      pdw_l_rollback_w_obst_dist_m_ = from.pdw_l_rollback_w_obst_dist_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      whp_l_min_whl_angle_diff_rad_ = from.whp_l_min_whl_angle_diff_rad_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      pdw_l_standstill_inter_time_s_ = from.pdw_l_standstill_inter_time_s_;
    }
    if (cached_has_bits & 0x00000200u) {
      whp_l_max_speed_mps_ = from.whp_l_max_speed_mps_;
    }
    if (cached_has_bits & 0x00000400u) {
      dwf_c_ops_variant_nu_ = from.dwf_c_ops_variant_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      pdw_l_max_dist_cont_tone_fwd_m_ = from.pdw_l_max_dist_cont_tone_fwd_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      pdw_l_min_dist_rear_sensors_m_ = from.pdw_l_min_dist_rear_sensors_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void FC_DrvWarnSM_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_DrvWarnSM_Params::CopyFrom(const FC_DrvWarnSM_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_DrvWarnSM_Params::IsInitialized() const {
  return true;
}

void FC_DrvWarnSM_Params::InternalSwap(FC_DrvWarnSM_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(ssigheader_, other->ssigheader_);
  swap(pdw_l_standstill_cont_time_s_, other->pdw_l_standstill_cont_time_s_);
  swap(pdw_l_standstill_time_s_, other->pdw_l_standstill_time_s_);
  swap(pdw_l_max_dist_cont_tone_m_, other->pdw_l_max_dist_cont_tone_m_);
  swap(pdw_l_init_time_s_, other->pdw_l_init_time_s_);
  swap(pdw_l_act_pdw_by_ap_nu_, other->pdw_l_act_pdw_by_ap_nu_);
  swap(whp_l_deact_whp_by_ap_nu_, other->whp_l_deact_whp_by_ap_nu_);
  swap(dwf_l_tone_suppress_by_ap_nu_, other->dwf_l_tone_suppress_by_ap_nu_);
  swap(dwf_l_tone_reduct_inter_standstill_nu_, other->dwf_l_tone_reduct_inter_standstill_nu_);
  swap(dwf_l_speed_hysteresis_mps_, other->dwf_l_speed_hysteresis_mps_);
  swap(pdw_l_rollback_wo_obst_dist_m_, other->pdw_l_rollback_wo_obst_dist_m_);
  swap(pdw_l_rev_gear_deb_time_man_s_, other->pdw_l_rev_gear_deb_time_man_s_);
  swap(pdw_l_max_dist_cont_tone_rear_m_, other->pdw_l_max_dist_cont_tone_rear_m_);
  swap(pdw_l_max_dist_cont_tone_lat_m_, other->pdw_l_max_dist_cont_tone_lat_m_);
  swap(dwf_l_tone_reduct_cont_standstill_nu_, other->dwf_l_tone_reduct_cont_standstill_nu_);
  swap(pdw_l_auto_activ_critical_nu_, other->pdw_l_auto_activ_critical_nu_);
  swap(pdw_l_cont_dist_extend_nu_, other->pdw_l_cont_dist_extend_nu_);
  swap(pdw_l_crit_act_pdw_by_ap_nu_, other->pdw_l_crit_act_pdw_by_ap_nu_);
  swap(pdw_l_front_sect_activ_nu_, other->pdw_l_front_sect_activ_nu_);
  swap(pdw_l_lat_sect_activ_nu_, other->pdw_l_lat_sect_activ_nu_);
  swap(pdw_l_rear_sect_activ_nu_, other->pdw_l_rear_sect_activ_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(pdw_l_autom_activ_standstill_nu_, other->pdw_l_autom_activ_standstill_nu_);
  swap(pdw_l_rollback_activation_nu_, other->pdw_l_rollback_activation_nu_);
  swap(pdw_l_deactiv_by_p_gear_nu_, other->pdw_l_deactiv_by_p_gear_nu_);
  swap(pdw_l_deactiv_by_epb_nu_, other->pdw_l_deactiv_by_epb_nu_);
  swap(pdw_auto_activ_threshold_, other->pdw_auto_activ_threshold_);
  swap(pdw_l_stabilizaton_wait_time_s_, other->pdw_l_stabilizaton_wait_time_s_);
  swap(dwf_c_transmission_type_nu_, other->dwf_c_transmission_type_nu_);
  swap(pdw_l_driving_tube_nu_, other->pdw_l_driving_tube_nu_);
  swap(pdw_l_automatic_activation_nu_, other->pdw_l_automatic_activation_nu_);
  swap(pdw_l_auto_act_button_nu_, other->pdw_l_auto_act_button_nu_);
  swap(pdw_l_rev_gear_deb_time_aut_s_, other->pdw_l_rev_gear_deb_time_aut_s_);
  swap(pdw_l_p_gear_reset_auto_act_nu_, other->pdw_l_p_gear_reset_auto_act_nu_);
  swap(pdw_l_epb_reset_auto_act_nu_, other->pdw_l_epb_reset_auto_act_nu_);
  swap(pdw_l_rollback_full_view_nu_, other->pdw_l_rollback_full_view_nu_);
  swap(pdw_l_rollback_trailer_nu_, other->pdw_l_rollback_trailer_nu_);
  swap(pdw_l_vel_thresh_off_mps_, other->pdw_l_vel_thresh_off_mps_);
  swap(pdw_l_rollback_w_obst_dist_m_, other->pdw_l_rollback_w_obst_dist_m_);
  swap(whp_l_min_whl_angle_diff_rad_, other->whp_l_min_whl_angle_diff_rad_);
  swap(pdw_l_standstill_inter_time_s_, other->pdw_l_standstill_inter_time_s_);
  swap(whp_l_max_speed_mps_, other->whp_l_max_speed_mps_);
  swap(dwf_c_ops_variant_nu_, other->dwf_c_ops_variant_nu_);
  swap(pdw_l_max_dist_cont_tone_fwd_m_, other->pdw_l_max_dist_cont_tone_fwd_m_);
  swap(pdw_l_min_dist_rear_sensors_m_, other->pdw_l_min_dist_rear_sensors_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_DrvWarnSM_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_DrvWarnSM_Params_array_port::InitAsDefaultInstance() {
}
class FC_DrvWarnSM_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_DrvWarnSM_Params_array_port>()._has_bits_);
};

FC_DrvWarnSM_Params_array_port::FC_DrvWarnSM_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
}
FC_DrvWarnSM_Params_array_port::FC_DrvWarnSM_Params_array_port(const FC_DrvWarnSM_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
}

void FC_DrvWarnSM_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_DrvWarnSM_Params_array_port_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.base);
}

FC_DrvWarnSM_Params_array_port::~FC_DrvWarnSM_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  SharedDtor();
}

void FC_DrvWarnSM_Params_array_port::SharedDtor() {
}

void FC_DrvWarnSM_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_DrvWarnSM_Params_array_port& FC_DrvWarnSM_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_DrvWarnSM_Params_array_port_mf_5fdrvwarnsm_2ffc_5fdrv_5fwarn_5fsm_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_DrvWarnSM_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_DrvWarnSM_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params data = 3981;
      case 3981:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_DrvWarnSM_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params data = 3981;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3981, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  return target;
}

size_t FC_DrvWarnSM_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params data = 3981;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_DrvWarnSM_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_DrvWarnSM_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_DrvWarnSM_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_DrvWarnSM_Params_array_port::MergeFrom(const FC_DrvWarnSM_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_DrvWarnSM_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_DrvWarnSM_Params_array_port::CopyFrom(const FC_DrvWarnSM_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_drvwarnsm.fc_drv_warn_sm_params.FC_DrvWarnSM_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_DrvWarnSM_Params_array_port::IsInitialized() const {
  return true;
}

void FC_DrvWarnSM_Params_array_port::InternalSwap(FC_DrvWarnSM_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_DrvWarnSM_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_drv_warn_sm_params
}  // namespace mf_drvwarnsm
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params* Arena::CreateMaybeMessage< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port* Arena::CreateMaybeMessage< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_drvwarnsm::fc_drv_warn_sm_params::FC_DrvWarnSM_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
