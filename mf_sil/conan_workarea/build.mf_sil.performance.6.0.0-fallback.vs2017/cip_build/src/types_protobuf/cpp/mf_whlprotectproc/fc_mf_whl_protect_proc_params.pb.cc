// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_whlprotectproc/fc_mf_whl_protect_proc_params.proto

#include "mf_whlprotectproc/fc_mf_whl_protect_proc_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto;
namespace pb {
namespace mf_whlprotectproc {
namespace fc_mf_whl_protect_proc_params {
class FC_MF_WhlProtectProc_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_MF_WhlProtectProc_Params> _instance;
} _FC_MF_WhlProtectProc_Params_default_instance_;
class FC_MF_WhlProtectProc_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_MF_WhlProtectProc_Params_array_port> _instance;
} _FC_MF_WhlProtectProc_Params_array_port_default_instance_;
}  // namespace fc_mf_whl_protect_proc_params
}  // namespace mf_whlprotectproc
}  // namespace pb
static void InitDefaultsscc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::_FC_MF_WhlProtectProc_Params_default_instance_;
    new (ptr) ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_MF_WhlProtectProc_Params_array_port_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::_FC_MF_WhlProtectProc_Params_array_port_default_instance_;
    new (ptr) ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MF_WhlProtectProc_Params_array_port_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_MF_WhlProtectProc_Params_array_port_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto}, {
      &scc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_ext_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_ext_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_ext_crit_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_ext_crit_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_int_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_int_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_int_crit_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_width_int_crit_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_agddir_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_agddir_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_agddir_crit_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_agddir_crit_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_ddir_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_ddir_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_ddir_crit_off_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_box_len_ddir_crit_on_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_obj_max_static_height_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_obj_min_existance_prob_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_obj_min_height_conf_prob_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_circ_sect_poly_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_already_run_over_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_curved_boxes_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params, whp_p_3_stage_warn_nu_),
  10,
  0,
  8,
  15,
  13,
  12,
  22,
  23,
  9,
  16,
  5,
  11,
  21,
  7,
  24,
  4,
  2,
  1,
  6,
  14,
  17,
  3,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params)},
  { 55, 61, sizeof(::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::_FC_MF_WhlProtectProc_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::_FC_MF_WhlProtectProc_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5mf_whlprotectproc/fc_mf_whl_protect_pr"
  "oc_params.proto\0222pb.mf_whlprotectproc.fc"
  "_mf_whl_protect_proc_params\032\027eco/signal_"
  "header.proto\"\323\007\n\033FC_MF_WhlProtectProc_Pa"
  "rams\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHe"
  "ader\030\211\010 \001(\0132\".pb.eco.signal_header.Signa"
  "lHeader\022\"\n\031WHP_P_BOX_WIDTH_EXT_OFF_M\030\321\n "
  "\001(\002\022!\n\030WHP_P_BOX_WIDTH_EXT_ON_M\030\362\023 \001(\002\022\'"
  "\n\036WHP_P_BOX_WIDTH_EXT_CRIT_OFF_M\030\215\022 \001(\002\022"
  "&\n\035WHP_P_BOX_WIDTH_EXT_CRIT_ON_M\030\325\021 \001(\002\022"
  "\"\n\031WHP_P_BOX_WIDTH_INT_OFF_M\030\276\032 \001(\002\022!\n\030W"
  "HP_P_BOX_WIDTH_INT_ON_M\030\233\034 \001(\002\022\'\n\036WHP_P_"
  "BOX_WIDTH_INT_CRIT_OFF_M\030\234\014 \001(\002\022&\n\035WHP_P"
  "_BOX_WIDTH_INT_CRIT_ON_M\030\314\024 \001(\002\022#\n\032WHP_P"
  "_BOX_LEN_AGDDIR_OFF_M\030\326\003 \001(\002\022\"\n\031WHP_P_BO"
  "X_LEN_AGDDIR_ON_M\030\332\020 \001(\002\022(\n\037WHP_P_BOX_LE"
  "N_AGDDIR_CRIT_OFF_M\030\374\027 \001(\002\022\'\n\036WHP_P_BOX_"
  "LEN_AGDDIR_CRIT_ON_M\030\355\t \001(\002\022!\n\030WHP_P_BOX"
  "_LEN_DDIR_OFF_M\030\340\037 \001(\002\022 \n\027WHP_P_BOX_LEN_"
  "DDIR_ON_M\030\232\003 \001(\002\022&\n\035WHP_P_BOX_LEN_DDIR_C"
  "RIT_OFF_M\030\232\002 \001(\002\022$\n\034WHP_P_BOX_LEN_DDIR_C"
  "RIT_ON_M\030c \001(\002\022&\n\035WHP_P_OBJ_MAX_STATIC_H"
  "EIGHT_M\030\304\006 \001(\002\022(\n\037WHP_P_OBJ_MIN_EXISTANC"
  "E_PROB_NU\030\240\023 \001(\002\022*\n!WHP_P_OBJ_MIN_HEIGHT"
  "_CONF_PROB_NU\030\361\025 \001(\002\022 \n\027WHP_P_CIRC_SECT_"
  "POLY_NU\030\321\002 \001(\r\022\"\n\031WHP_P_ALREADY_RUN_OVER"
  "_NU\030\232\026 \001(\010\022\036\n\025WHP_P_CURVED_BOXES_NU\030\235\035 \001"
  "(\010\022\036\n\025WHP_P_3_STAGE_WARN_NU\030\213\022 \001(\010\"\210\001\n&F"
  "C_MF_WhlProtectProc_Params_array_port\022^\n"
  "\004data\030\302\006 \003(\0132O.pb.mf_whlprotectproc.fc_m"
  "f_whl_protect_proc_params.FC_MF_WhlProte"
  "ctProc_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto.base,
  &scc_info_FC_MF_WhlProtectProc_Params_array_port_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_once;
static bool descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto = {
  &descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_initialized, descriptor_table_protodef_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto, "mf_whlprotectproc/fc_mf_whl_protect_proc_params.proto", 1253,
  &descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_once, descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_sccs, descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto::offsets,
  file_level_metadata_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto, 2, file_level_enum_descriptors_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto, file_level_service_descriptors_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto), true);
namespace pb {
namespace mf_whlprotectproc {
namespace fc_mf_whl_protect_proc_params {

// ===================================================================

void FC_MF_WhlProtectProc_Params::InitAsDefaultInstance() {
  ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::_FC_MF_WhlProtectProc_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_MF_WhlProtectProc_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_MF_WhlProtectProc_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_MF_WhlProtectProc_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_whp_p_box_width_ext_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_whp_p_box_width_ext_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_whp_p_box_width_ext_crit_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_whp_p_box_width_ext_crit_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_whp_p_box_width_int_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_whp_p_box_width_int_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_whp_p_box_width_int_crit_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_whp_p_box_width_int_crit_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_whp_p_box_len_agddir_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_whp_p_box_len_agddir_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_whp_p_box_len_agddir_crit_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_whp_p_box_len_agddir_crit_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_whp_p_box_len_ddir_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_whp_p_box_len_ddir_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_whp_p_box_len_ddir_crit_off_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_whp_p_box_len_ddir_crit_on_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_whp_p_obj_max_static_height_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_whp_p_obj_min_existance_prob_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_whp_p_obj_min_height_conf_prob_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_whp_p_circ_sect_poly_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_whp_p_already_run_over_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_whp_p_curved_boxes_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_whp_p_3_stage_warn_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_MF_WhlProtectProc_Params::_Internal::ssigheader(const FC_MF_WhlProtectProc_Params* msg) {
  return *msg->ssigheader_;
}
void FC_MF_WhlProtectProc_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_MF_WhlProtectProc_Params::FC_MF_WhlProtectProc_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
}
FC_MF_WhlProtectProc_Params::FC_MF_WhlProtectProc_Params(const FC_MF_WhlProtectProc_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&whp_p_box_len_ddir_crit_on_m_, &from.whp_p_box_len_ddir_crit_on_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&whp_p_box_len_ddir_off_m_) -
    reinterpret_cast<char*>(&whp_p_box_len_ddir_crit_on_m_)) + sizeof(whp_p_box_len_ddir_off_m_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
}

void FC_MF_WhlProtectProc_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&whp_p_box_len_ddir_off_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(whp_p_box_len_ddir_off_m_));
}

FC_MF_WhlProtectProc_Params::~FC_MF_WhlProtectProc_Params() {
  // @@protoc_insertion_point(destructor:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  SharedDtor();
}

void FC_MF_WhlProtectProc_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_MF_WhlProtectProc_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_MF_WhlProtectProc_Params& FC_MF_WhlProtectProc_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_MF_WhlProtectProc_Params_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_MF_WhlProtectProc_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&whp_p_box_len_ddir_crit_on_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whp_p_box_len_agddir_crit_on_m_) -
        reinterpret_cast<char*>(&whp_p_box_len_ddir_crit_on_m_)) + sizeof(whp_p_box_len_agddir_crit_on_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&whp_p_box_width_ext_off_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whp_p_box_width_ext_on_m_) -
        reinterpret_cast<char*>(&whp_p_box_width_ext_off_m_)) + sizeof(whp_p_box_width_ext_on_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&whp_p_box_width_int_crit_on_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whp_p_box_width_int_on_m_) -
        reinterpret_cast<char*>(&whp_p_box_width_int_crit_on_m_)) + sizeof(whp_p_box_width_int_on_m_));
  }
  whp_p_box_len_ddir_off_m_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_MF_WhlProtectProc_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float WHP_P_BOX_LEN_DDIR_CRIT_ON_M = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_whp_p_box_len_ddir_crit_on_m(&has_bits);
          whp_p_box_len_ddir_crit_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_LEN_DDIR_CRIT_OFF_M = 282;
      case 282:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_whp_p_box_len_ddir_crit_off_m(&has_bits);
          whp_p_box_len_ddir_crit_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 WHP_P_CIRC_SECT_POLY_NU = 337;
      case 337:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_whp_p_circ_sect_poly_nu(&has_bits);
          whp_p_circ_sect_poly_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_LEN_DDIR_ON_M = 410;
      case 410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_whp_p_box_len_ddir_on_m(&has_bits);
          whp_p_box_len_ddir_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_LEN_AGDDIR_OFF_M = 470;
      case 470:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_whp_p_box_len_agddir_off_m(&has_bits);
          whp_p_box_len_agddir_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_OBJ_MAX_STATIC_HEIGHT_M = 836;
      case 836:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_whp_p_obj_max_static_height_m(&has_bits);
          whp_p_obj_max_static_height_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_LEN_AGDDIR_CRIT_ON_M = 1261;
      case 1261:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_whp_p_box_len_agddir_crit_on_m(&has_bits);
          whp_p_box_len_agddir_crit_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_EXT_OFF_M = 1361;
      case 1361:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_whp_p_box_width_ext_off_m(&has_bits);
          whp_p_box_width_ext_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_INT_CRIT_OFF_M = 1564;
      case 1564:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_whp_p_box_width_int_crit_off_m(&has_bits);
          whp_p_box_width_int_crit_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_LEN_AGDDIR_ON_M = 2138;
      case 2138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_whp_p_box_len_agddir_on_m(&has_bits);
          whp_p_box_len_agddir_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_EXT_CRIT_ON_M = 2261;
      case 2261:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_whp_p_box_width_ext_crit_on_m(&has_bits);
          whp_p_box_width_ext_crit_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool WHP_P_3_STAGE_WARN_NU = 2315;
      case 2315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_whp_p_3_stage_warn_nu(&has_bits);
          whp_p_3_stage_warn_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_EXT_CRIT_OFF_M = 2317;
      case 2317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_whp_p_box_width_ext_crit_off_m(&has_bits);
          whp_p_box_width_ext_crit_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_OBJ_MIN_EXISTANCE_PROB_NU = 2464;
      case 2464:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_whp_p_obj_min_existance_prob_nu(&has_bits);
          whp_p_obj_min_existance_prob_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_EXT_ON_M = 2546;
      case 2546:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_whp_p_box_width_ext_on_m(&has_bits);
          whp_p_box_width_ext_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_INT_CRIT_ON_M = 2636;
      case 2636:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_whp_p_box_width_int_crit_on_m(&has_bits);
          whp_p_box_width_int_crit_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_OBJ_MIN_HEIGHT_CONF_PROB_NU = 2801;
      case 2801:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_whp_p_obj_min_height_conf_prob_nu(&has_bits);
          whp_p_obj_min_height_conf_prob_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool WHP_P_ALREADY_RUN_OVER_NU = 2842;
      case 2842:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_whp_p_already_run_over_nu(&has_bits);
          whp_p_already_run_over_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_LEN_AGDDIR_CRIT_OFF_M = 3068;
      case 3068:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_whp_p_box_len_agddir_crit_off_m(&has_bits);
          whp_p_box_len_agddir_crit_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_INT_OFF_M = 3390;
      case 3390:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_whp_p_box_width_int_off_m(&has_bits);
          whp_p_box_width_int_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_WIDTH_INT_ON_M = 3611;
      case 3611:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_whp_p_box_width_int_on_m(&has_bits);
          whp_p_box_width_int_on_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool WHP_P_CURVED_BOXES_NU = 3741;
      case 3741:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_whp_p_curved_boxes_nu(&has_bits);
          whp_p_curved_boxes_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float WHP_P_BOX_LEN_DDIR_OFF_M = 4064;
      case 4064:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_whp_p_box_len_ddir_off_m(&has_bits);
          whp_p_box_len_ddir_off_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_MF_WhlProtectProc_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float WHP_P_BOX_LEN_DDIR_CRIT_ON_M = 99;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(99, this->_internal_whp_p_box_len_ddir_crit_on_m(), target);
  }

  // optional float WHP_P_BOX_LEN_DDIR_CRIT_OFF_M = 282;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(282, this->_internal_whp_p_box_len_ddir_crit_off_m(), target);
  }

  // optional uint32 WHP_P_CIRC_SECT_POLY_NU = 337;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(337, this->_internal_whp_p_circ_sect_poly_nu(), target);
  }

  // optional float WHP_P_BOX_LEN_DDIR_ON_M = 410;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(410, this->_internal_whp_p_box_len_ddir_on_m(), target);
  }

  // optional float WHP_P_BOX_LEN_AGDDIR_OFF_M = 470;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(470, this->_internal_whp_p_box_len_agddir_off_m(), target);
  }

  // optional float WHP_P_OBJ_MAX_STATIC_HEIGHT_M = 836;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(836, this->_internal_whp_p_obj_max_static_height_m(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float WHP_P_BOX_LEN_AGDDIR_CRIT_ON_M = 1261;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1261, this->_internal_whp_p_box_len_agddir_crit_on_m(), target);
  }

  // optional float WHP_P_BOX_WIDTH_EXT_OFF_M = 1361;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1361, this->_internal_whp_p_box_width_ext_off_m(), target);
  }

  // optional float WHP_P_BOX_WIDTH_INT_CRIT_OFF_M = 1564;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1564, this->_internal_whp_p_box_width_int_crit_off_m(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float WHP_P_BOX_LEN_AGDDIR_ON_M = 2138;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2138, this->_internal_whp_p_box_len_agddir_on_m(), target);
  }

  // optional float WHP_P_BOX_WIDTH_EXT_CRIT_ON_M = 2261;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2261, this->_internal_whp_p_box_width_ext_crit_on_m(), target);
  }

  // optional bool WHP_P_3_STAGE_WARN_NU = 2315;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2315, this->_internal_whp_p_3_stage_warn_nu(), target);
  }

  // optional float WHP_P_BOX_WIDTH_EXT_CRIT_OFF_M = 2317;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2317, this->_internal_whp_p_box_width_ext_crit_off_m(), target);
  }

  // optional float WHP_P_OBJ_MIN_EXISTANCE_PROB_NU = 2464;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2464, this->_internal_whp_p_obj_min_existance_prob_nu(), target);
  }

  // optional float WHP_P_BOX_WIDTH_EXT_ON_M = 2546;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2546, this->_internal_whp_p_box_width_ext_on_m(), target);
  }

  // optional float WHP_P_BOX_WIDTH_INT_CRIT_ON_M = 2636;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2636, this->_internal_whp_p_box_width_int_crit_on_m(), target);
  }

  // optional float WHP_P_OBJ_MIN_HEIGHT_CONF_PROB_NU = 2801;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2801, this->_internal_whp_p_obj_min_height_conf_prob_nu(), target);
  }

  // optional bool WHP_P_ALREADY_RUN_OVER_NU = 2842;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2842, this->_internal_whp_p_already_run_over_nu(), target);
  }

  // optional float WHP_P_BOX_LEN_AGDDIR_CRIT_OFF_M = 3068;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3068, this->_internal_whp_p_box_len_agddir_crit_off_m(), target);
  }

  // optional float WHP_P_BOX_WIDTH_INT_OFF_M = 3390;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3390, this->_internal_whp_p_box_width_int_off_m(), target);
  }

  // optional float WHP_P_BOX_WIDTH_INT_ON_M = 3611;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3611, this->_internal_whp_p_box_width_int_on_m(), target);
  }

  // optional bool WHP_P_CURVED_BOXES_NU = 3741;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3741, this->_internal_whp_p_curved_boxes_nu(), target);
  }

  // optional float WHP_P_BOX_LEN_DDIR_OFF_M = 4064;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4064, this->_internal_whp_p_box_len_ddir_off_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  return target;
}

size_t FC_MF_WhlProtectProc_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float WHP_P_BOX_LEN_DDIR_CRIT_ON_M = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float WHP_P_BOX_LEN_DDIR_CRIT_OFF_M = 282;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional uint32 WHP_P_CIRC_SECT_POLY_NU = 337;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_whp_p_circ_sect_poly_nu());
    }

    // optional float WHP_P_BOX_LEN_DDIR_ON_M = 410;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float WHP_P_BOX_LEN_AGDDIR_OFF_M = 470;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float WHP_P_OBJ_MAX_STATIC_HEIGHT_M = 836;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float WHP_P_BOX_LEN_AGDDIR_CRIT_ON_M = 1261;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float WHP_P_BOX_WIDTH_EXT_OFF_M = 1361;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float WHP_P_BOX_WIDTH_INT_CRIT_OFF_M = 1564;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float WHP_P_BOX_LEN_AGDDIR_ON_M = 2138;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float WHP_P_BOX_WIDTH_EXT_CRIT_ON_M = 2261;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float WHP_P_BOX_WIDTH_EXT_CRIT_OFF_M = 2317;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float WHP_P_OBJ_MIN_EXISTANCE_PROB_NU = 2464;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float WHP_P_BOX_WIDTH_EXT_ON_M = 2546;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float WHP_P_BOX_WIDTH_INT_CRIT_ON_M = 2636;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float WHP_P_OBJ_MIN_HEIGHT_CONF_PROB_NU = 2801;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional bool WHP_P_ALREADY_RUN_OVER_NU = 2842;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool WHP_P_CURVED_BOXES_NU = 3741;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 1;
    }

    // optional bool WHP_P_3_STAGE_WARN_NU = 2315;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional float WHP_P_BOX_LEN_AGDDIR_CRIT_OFF_M = 3068;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float WHP_P_BOX_WIDTH_INT_OFF_M = 3390;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float WHP_P_BOX_WIDTH_INT_ON_M = 3611;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  // optional float WHP_P_BOX_LEN_DDIR_OFF_M = 4064;
  if (cached_has_bits & 0x01000000u) {
    total_size += 3 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_MF_WhlProtectProc_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_MF_WhlProtectProc_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_MF_WhlProtectProc_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
    MergeFrom(*source);
  }
}

void FC_MF_WhlProtectProc_Params::MergeFrom(const FC_MF_WhlProtectProc_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      whp_p_box_len_ddir_crit_on_m_ = from.whp_p_box_len_ddir_crit_on_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      whp_p_box_len_ddir_crit_off_m_ = from.whp_p_box_len_ddir_crit_off_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      whp_p_circ_sect_poly_nu_ = from.whp_p_circ_sect_poly_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      whp_p_box_len_ddir_on_m_ = from.whp_p_box_len_ddir_on_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      whp_p_box_len_agddir_off_m_ = from.whp_p_box_len_agddir_off_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      whp_p_obj_max_static_height_m_ = from.whp_p_obj_max_static_height_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      whp_p_box_len_agddir_crit_on_m_ = from.whp_p_box_len_agddir_crit_on_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      whp_p_box_width_ext_off_m_ = from.whp_p_box_width_ext_off_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      whp_p_box_width_int_crit_off_m_ = from.whp_p_box_width_int_crit_off_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000800u) {
      whp_p_box_len_agddir_on_m_ = from.whp_p_box_len_agddir_on_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      whp_p_box_width_ext_crit_on_m_ = from.whp_p_box_width_ext_crit_on_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      whp_p_box_width_ext_crit_off_m_ = from.whp_p_box_width_ext_crit_off_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      whp_p_obj_min_existance_prob_nu_ = from.whp_p_obj_min_existance_prob_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      whp_p_box_width_ext_on_m_ = from.whp_p_box_width_ext_on_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      whp_p_box_width_int_crit_on_m_ = from.whp_p_box_width_int_crit_on_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      whp_p_obj_min_height_conf_prob_nu_ = from.whp_p_obj_min_height_conf_prob_nu_;
    }
    if (cached_has_bits & 0x00040000u) {
      whp_p_already_run_over_nu_ = from.whp_p_already_run_over_nu_;
    }
    if (cached_has_bits & 0x00080000u) {
      whp_p_curved_boxes_nu_ = from.whp_p_curved_boxes_nu_;
    }
    if (cached_has_bits & 0x00100000u) {
      whp_p_3_stage_warn_nu_ = from.whp_p_3_stage_warn_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      whp_p_box_len_agddir_crit_off_m_ = from.whp_p_box_len_agddir_crit_off_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      whp_p_box_width_int_off_m_ = from.whp_p_box_width_int_off_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      whp_p_box_width_int_on_m_ = from.whp_p_box_width_int_on_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_whp_p_box_len_ddir_off_m(from._internal_whp_p_box_len_ddir_off_m());
  }
}

void FC_MF_WhlProtectProc_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_MF_WhlProtectProc_Params::CopyFrom(const FC_MF_WhlProtectProc_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_MF_WhlProtectProc_Params::IsInitialized() const {
  return true;
}

void FC_MF_WhlProtectProc_Params::InternalSwap(FC_MF_WhlProtectProc_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(whp_p_box_len_ddir_crit_on_m_, other->whp_p_box_len_ddir_crit_on_m_);
  swap(whp_p_box_len_ddir_crit_off_m_, other->whp_p_box_len_ddir_crit_off_m_);
  swap(whp_p_circ_sect_poly_nu_, other->whp_p_circ_sect_poly_nu_);
  swap(whp_p_box_len_ddir_on_m_, other->whp_p_box_len_ddir_on_m_);
  swap(whp_p_box_len_agddir_off_m_, other->whp_p_box_len_agddir_off_m_);
  swap(whp_p_obj_max_static_height_m_, other->whp_p_obj_max_static_height_m_);
  swap(whp_p_box_len_agddir_crit_on_m_, other->whp_p_box_len_agddir_crit_on_m_);
  swap(whp_p_box_width_ext_off_m_, other->whp_p_box_width_ext_off_m_);
  swap(whp_p_box_width_int_crit_off_m_, other->whp_p_box_width_int_crit_off_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(whp_p_box_len_agddir_on_m_, other->whp_p_box_len_agddir_on_m_);
  swap(whp_p_box_width_ext_crit_on_m_, other->whp_p_box_width_ext_crit_on_m_);
  swap(whp_p_box_width_ext_crit_off_m_, other->whp_p_box_width_ext_crit_off_m_);
  swap(whp_p_obj_min_existance_prob_nu_, other->whp_p_obj_min_existance_prob_nu_);
  swap(whp_p_box_width_ext_on_m_, other->whp_p_box_width_ext_on_m_);
  swap(whp_p_box_width_int_crit_on_m_, other->whp_p_box_width_int_crit_on_m_);
  swap(whp_p_obj_min_height_conf_prob_nu_, other->whp_p_obj_min_height_conf_prob_nu_);
  swap(whp_p_already_run_over_nu_, other->whp_p_already_run_over_nu_);
  swap(whp_p_curved_boxes_nu_, other->whp_p_curved_boxes_nu_);
  swap(whp_p_3_stage_warn_nu_, other->whp_p_3_stage_warn_nu_);
  swap(whp_p_box_len_agddir_crit_off_m_, other->whp_p_box_len_agddir_crit_off_m_);
  swap(whp_p_box_width_int_off_m_, other->whp_p_box_width_int_off_m_);
  swap(whp_p_box_width_int_on_m_, other->whp_p_box_width_int_on_m_);
  swap(whp_p_box_len_ddir_off_m_, other->whp_p_box_len_ddir_off_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_MF_WhlProtectProc_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_MF_WhlProtectProc_Params_array_port::InitAsDefaultInstance() {
}
class FC_MF_WhlProtectProc_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_MF_WhlProtectProc_Params_array_port>()._has_bits_);
};

FC_MF_WhlProtectProc_Params_array_port::FC_MF_WhlProtectProc_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
}
FC_MF_WhlProtectProc_Params_array_port::FC_MF_WhlProtectProc_Params_array_port(const FC_MF_WhlProtectProc_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
}

void FC_MF_WhlProtectProc_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_MF_WhlProtectProc_Params_array_port_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto.base);
}

FC_MF_WhlProtectProc_Params_array_port::~FC_MF_WhlProtectProc_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  SharedDtor();
}

void FC_MF_WhlProtectProc_Params_array_port::SharedDtor() {
}

void FC_MF_WhlProtectProc_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_MF_WhlProtectProc_Params_array_port& FC_MF_WhlProtectProc_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_MF_WhlProtectProc_Params_array_port_mf_5fwhlprotectproc_2ffc_5fmf_5fwhl_5fprotect_5fproc_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_MF_WhlProtectProc_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_MF_WhlProtectProc_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params data = 834;
      case 834:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<6674>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_MF_WhlProtectProc_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params data = 834;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(834, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  return target;
}

size_t FC_MF_WhlProtectProc_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params data = 834;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_MF_WhlProtectProc_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_MF_WhlProtectProc_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_MF_WhlProtectProc_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_MF_WhlProtectProc_Params_array_port::MergeFrom(const FC_MF_WhlProtectProc_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_MF_WhlProtectProc_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_MF_WhlProtectProc_Params_array_port::CopyFrom(const FC_MF_WhlProtectProc_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_whlprotectproc.fc_mf_whl_protect_proc_params.FC_MF_WhlProtectProc_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_MF_WhlProtectProc_Params_array_port::IsInitialized() const {
  return true;
}

void FC_MF_WhlProtectProc_Params_array_port::InternalSwap(FC_MF_WhlProtectProc_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_MF_WhlProtectProc_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_mf_whl_protect_proc_params
}  // namespace mf_whlprotectproc
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params* Arena::CreateMaybeMessage< ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port* Arena::CreateMaybeMessage< ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_whlprotectproc::fc_mf_whl_protect_proc_params::FC_MF_WhlProtectProc_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
