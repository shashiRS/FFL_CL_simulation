// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_crm_mode_errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "us_drv/us_drv_error_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_crm_mode_errors {
class UsDrvCrmModeErrors;
class UsDrvCrmModeErrorsDefaultTypeInternal;
extern UsDrvCrmModeErrorsDefaultTypeInternal _UsDrvCrmModeErrors_default_instance_;
class UsDrvCrmModeErrors_array_port;
class UsDrvCrmModeErrors_array_portDefaultTypeInternal;
extern UsDrvCrmModeErrors_array_portDefaultTypeInternal _UsDrvCrmModeErrors_array_port_default_instance_;
}  // namespace us_drv_crm_mode_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors>(Arena*);
template<> ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_drv {
namespace us_drv_crm_mode_errors {

// ===================================================================

class UsDrvCrmModeErrors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors) */ {
 public:
  UsDrvCrmModeErrors();
  virtual ~UsDrvCrmModeErrors();

  UsDrvCrmModeErrors(const UsDrvCrmModeErrors& from);
  UsDrvCrmModeErrors(UsDrvCrmModeErrors&& from) noexcept
    : UsDrvCrmModeErrors() {
    *this = ::std::move(from);
  }

  inline UsDrvCrmModeErrors& operator=(const UsDrvCrmModeErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvCrmModeErrors& operator=(UsDrvCrmModeErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvCrmModeErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvCrmModeErrors* internal_default_instance() {
    return reinterpret_cast<const UsDrvCrmModeErrors*>(
               &_UsDrvCrmModeErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsDrvCrmModeErrors& a, UsDrvCrmModeErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvCrmModeErrors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvCrmModeErrors* New() const final {
    return CreateMaybeMessage<UsDrvCrmModeErrors>(nullptr);
  }

  UsDrvCrmModeErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvCrmModeErrors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvCrmModeErrors& from);
  void MergeFrom(const UsDrvCrmModeErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvCrmModeErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataLateErrorFieldNumber = 288,
    kCrcErrorFieldNumber = 291,
    kSpiCmdSequenceFailureFieldNumber = 362,
    kCrmCmdFailureFieldNumber = 575,
    kDsiPinUndervoltageFieldNumber = 764,
    kCrmCmdFailureDetailsFieldNumber = 1337,
    kSymbolCodingErrorFieldNumber = 2292,
    kSymbolCountErrorFieldNumber = 2547,
    kClkRefErrorFieldNumber = 3027,
    kDataEarlyErrorFieldNumber = 3182,
  };
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataLateError = 288;
  bool has_datalateerror() const;
  private:
  bool _internal_has_datalateerror() const;
  public:
  void clear_datalateerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus datalateerror() const;
  void set_datalateerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_datalateerror() const;
  void _internal_set_datalateerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crcError = 291;
  bool has_crcerror() const;
  private:
  bool _internal_has_crcerror() const;
  public:
  void clear_crcerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus crcerror() const;
  void set_crcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_crcerror() const;
  void _internal_set_crcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiCmdSequenceFailure = 362;
  bool has_spicmdsequencefailure() const;
  private:
  bool _internal_has_spicmdsequencefailure() const;
  public:
  void clear_spicmdsequencefailure();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus spicmdsequencefailure() const;
  void set_spicmdsequencefailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_spicmdsequencefailure() const;
  void _internal_set_spicmdsequencefailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crmCmdFailure = 575;
  bool has_crmcmdfailure() const;
  private:
  bool _internal_has_crmcmdfailure() const;
  public:
  void clear_crmcmdfailure();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus crmcmdfailure() const;
  void set_crmcmdfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_crmcmdfailure() const;
  void _internal_set_crmcmdfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiPinUndervoltage = 764;
  bool has_dsipinundervoltage() const;
  private:
  bool _internal_has_dsipinundervoltage() const;
  public:
  void clear_dsipinundervoltage();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus dsipinundervoltage() const;
  void set_dsipinundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_dsipinundervoltage() const;
  void _internal_set_dsipinundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 crmCmdFailureDetails = 1337;
  bool has_crmcmdfailuredetails() const;
  private:
  bool _internal_has_crmcmdfailuredetails() const;
  public:
  void clear_crmcmdfailuredetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 crmcmdfailuredetails() const;
  void set_crmcmdfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crmcmdfailuredetails() const;
  void _internal_set_crmcmdfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCodingError = 2292;
  bool has_symbolcodingerror() const;
  private:
  bool _internal_has_symbolcodingerror() const;
  public:
  void clear_symbolcodingerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus symbolcodingerror() const;
  void set_symbolcodingerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_symbolcodingerror() const;
  void _internal_set_symbolcodingerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCountError = 2547;
  bool has_symbolcounterror() const;
  private:
  bool _internal_has_symbolcounterror() const;
  public:
  void clear_symbolcounterror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus symbolcounterror() const;
  void set_symbolcounterror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_symbolcounterror() const;
  void _internal_set_symbolcounterror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus clkRefError = 3027;
  bool has_clkreferror() const;
  private:
  bool _internal_has_clkreferror() const;
  public:
  void clear_clkreferror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus clkreferror() const;
  void set_clkreferror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_clkreferror() const;
  void _internal_set_clkreferror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataEarlyError = 3182;
  bool has_dataearlyerror() const;
  private:
  bool _internal_has_dataearlyerror() const;
  public:
  void clear_dataearlyerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus dataearlyerror() const;
  void set_dataearlyerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_dataearlyerror() const;
  void _internal_set_dataearlyerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int datalateerror_;
  int crcerror_;
  int spicmdsequencefailure_;
  int crmcmdfailure_;
  int dsipinundervoltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crmcmdfailuredetails_;
  int symbolcodingerror_;
  int symbolcounterror_;
  int clkreferror_;
  int dataearlyerror_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto;
};
// -------------------------------------------------------------------

class UsDrvCrmModeErrors_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port) */ {
 public:
  UsDrvCrmModeErrors_array_port();
  virtual ~UsDrvCrmModeErrors_array_port();

  UsDrvCrmModeErrors_array_port(const UsDrvCrmModeErrors_array_port& from);
  UsDrvCrmModeErrors_array_port(UsDrvCrmModeErrors_array_port&& from) noexcept
    : UsDrvCrmModeErrors_array_port() {
    *this = ::std::move(from);
  }

  inline UsDrvCrmModeErrors_array_port& operator=(const UsDrvCrmModeErrors_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvCrmModeErrors_array_port& operator=(UsDrvCrmModeErrors_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvCrmModeErrors_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvCrmModeErrors_array_port* internal_default_instance() {
    return reinterpret_cast<const UsDrvCrmModeErrors_array_port*>(
               &_UsDrvCrmModeErrors_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsDrvCrmModeErrors_array_port& a, UsDrvCrmModeErrors_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvCrmModeErrors_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvCrmModeErrors_array_port* New() const final {
    return CreateMaybeMessage<UsDrvCrmModeErrors_array_port>(nullptr);
  }

  UsDrvCrmModeErrors_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvCrmModeErrors_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvCrmModeErrors_array_port& from);
  void MergeFrom(const UsDrvCrmModeErrors_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvCrmModeErrors_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1493,
  };
  // repeated .pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors data = 1493;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors >*
      mutable_data();
  private:
  const ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors& _internal_data(int index) const;
  ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* _internal_add_data();
  public:
  const ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors& data(int index) const;
  ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors > data_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsDrvCrmModeErrors

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crmCmdFailure = 575;
inline bool UsDrvCrmModeErrors::_internal_has_crmcmdfailure() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_crmcmdfailure() const {
  return _internal_has_crmcmdfailure();
}
inline void UsDrvCrmModeErrors::clear_crmcmdfailure() {
  crmcmdfailure_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_crmcmdfailure() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(crmcmdfailure_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::crmcmdfailure() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.crmCmdFailure)
  return _internal_crmcmdfailure();
}
inline void UsDrvCrmModeErrors::_internal_set_crmcmdfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  crmcmdfailure_ = value;
}
inline void UsDrvCrmModeErrors::set_crmcmdfailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_crmcmdfailure(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.crmCmdFailure)
}

// optional uint32 crmCmdFailureDetails = 1337;
inline bool UsDrvCrmModeErrors::_internal_has_crmcmdfailuredetails() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_crmcmdfailuredetails() const {
  return _internal_has_crmcmdfailuredetails();
}
inline void UsDrvCrmModeErrors::clear_crmcmdfailuredetails() {
  crmcmdfailuredetails_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvCrmModeErrors::_internal_crmcmdfailuredetails() const {
  return crmcmdfailuredetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvCrmModeErrors::crmcmdfailuredetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.crmCmdFailureDetails)
  return _internal_crmcmdfailuredetails();
}
inline void UsDrvCrmModeErrors::_internal_set_crmcmdfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  crmcmdfailuredetails_ = value;
}
inline void UsDrvCrmModeErrors::set_crmcmdfailuredetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crmcmdfailuredetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.crmCmdFailureDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataEarlyError = 3182;
inline bool UsDrvCrmModeErrors::_internal_has_dataearlyerror() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_dataearlyerror() const {
  return _internal_has_dataearlyerror();
}
inline void UsDrvCrmModeErrors::clear_dataearlyerror() {
  dataearlyerror_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_dataearlyerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(dataearlyerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::dataearlyerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.dataEarlyError)
  return _internal_dataearlyerror();
}
inline void UsDrvCrmModeErrors::_internal_set_dataearlyerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  dataearlyerror_ = value;
}
inline void UsDrvCrmModeErrors::set_dataearlyerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_dataearlyerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.dataEarlyError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataLateError = 288;
inline bool UsDrvCrmModeErrors::_internal_has_datalateerror() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_datalateerror() const {
  return _internal_has_datalateerror();
}
inline void UsDrvCrmModeErrors::clear_datalateerror() {
  datalateerror_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_datalateerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(datalateerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::datalateerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.dataLateError)
  return _internal_datalateerror();
}
inline void UsDrvCrmModeErrors::_internal_set_datalateerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  datalateerror_ = value;
}
inline void UsDrvCrmModeErrors::set_datalateerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_datalateerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.dataLateError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCountError = 2547;
inline bool UsDrvCrmModeErrors::_internal_has_symbolcounterror() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_symbolcounterror() const {
  return _internal_has_symbolcounterror();
}
inline void UsDrvCrmModeErrors::clear_symbolcounterror() {
  symbolcounterror_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_symbolcounterror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(symbolcounterror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::symbolcounterror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.symbolCountError)
  return _internal_symbolcounterror();
}
inline void UsDrvCrmModeErrors::_internal_set_symbolcounterror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  symbolcounterror_ = value;
}
inline void UsDrvCrmModeErrors::set_symbolcounterror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_symbolcounterror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.symbolCountError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crcError = 291;
inline bool UsDrvCrmModeErrors::_internal_has_crcerror() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_crcerror() const {
  return _internal_has_crcerror();
}
inline void UsDrvCrmModeErrors::clear_crcerror() {
  crcerror_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_crcerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(crcerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::crcerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.crcError)
  return _internal_crcerror();
}
inline void UsDrvCrmModeErrors::_internal_set_crcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  crcerror_ = value;
}
inline void UsDrvCrmModeErrors::set_crcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_crcerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.crcError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiCmdSequenceFailure = 362;
inline bool UsDrvCrmModeErrors::_internal_has_spicmdsequencefailure() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_spicmdsequencefailure() const {
  return _internal_has_spicmdsequencefailure();
}
inline void UsDrvCrmModeErrors::clear_spicmdsequencefailure() {
  spicmdsequencefailure_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_spicmdsequencefailure() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(spicmdsequencefailure_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::spicmdsequencefailure() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.spiCmdSequenceFailure)
  return _internal_spicmdsequencefailure();
}
inline void UsDrvCrmModeErrors::_internal_set_spicmdsequencefailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  spicmdsequencefailure_ = value;
}
inline void UsDrvCrmModeErrors::set_spicmdsequencefailure(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_spicmdsequencefailure(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.spiCmdSequenceFailure)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCodingError = 2292;
inline bool UsDrvCrmModeErrors::_internal_has_symbolcodingerror() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_symbolcodingerror() const {
  return _internal_has_symbolcodingerror();
}
inline void UsDrvCrmModeErrors::clear_symbolcodingerror() {
  symbolcodingerror_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_symbolcodingerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(symbolcodingerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::symbolcodingerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.symbolCodingError)
  return _internal_symbolcodingerror();
}
inline void UsDrvCrmModeErrors::_internal_set_symbolcodingerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  symbolcodingerror_ = value;
}
inline void UsDrvCrmModeErrors::set_symbolcodingerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_symbolcodingerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.symbolCodingError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiPinUndervoltage = 764;
inline bool UsDrvCrmModeErrors::_internal_has_dsipinundervoltage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_dsipinundervoltage() const {
  return _internal_has_dsipinundervoltage();
}
inline void UsDrvCrmModeErrors::clear_dsipinundervoltage() {
  dsipinundervoltage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_dsipinundervoltage() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(dsipinundervoltage_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::dsipinundervoltage() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.dsiPinUndervoltage)
  return _internal_dsipinundervoltage();
}
inline void UsDrvCrmModeErrors::_internal_set_dsipinundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dsipinundervoltage_ = value;
}
inline void UsDrvCrmModeErrors::set_dsipinundervoltage(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_dsipinundervoltage(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.dsiPinUndervoltage)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus clkRefError = 3027;
inline bool UsDrvCrmModeErrors::_internal_has_clkreferror() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UsDrvCrmModeErrors::has_clkreferror() const {
  return _internal_has_clkreferror();
}
inline void UsDrvCrmModeErrors::clear_clkreferror() {
  clkreferror_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::_internal_clkreferror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(clkreferror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvCrmModeErrors::clkreferror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.clkRefError)
  return _internal_clkreferror();
}
inline void UsDrvCrmModeErrors::_internal_set_clkreferror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  clkreferror_ = value;
}
inline void UsDrvCrmModeErrors::set_clkreferror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_clkreferror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors.clkRefError)
}

// -------------------------------------------------------------------

// UsDrvCrmModeErrors_array_port

// repeated .pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors data = 1493;
inline int UsDrvCrmModeErrors_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsDrvCrmModeErrors_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsDrvCrmModeErrors_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* UsDrvCrmModeErrors_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors >*
UsDrvCrmModeErrors_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port.data)
  return &data_;
}
inline const ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors& UsDrvCrmModeErrors_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors& UsDrvCrmModeErrors_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* UsDrvCrmModeErrors_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* UsDrvCrmModeErrors_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors >&
UsDrvCrmModeErrors_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_drv_crm_mode_errors
}  // namespace us_drv
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto
