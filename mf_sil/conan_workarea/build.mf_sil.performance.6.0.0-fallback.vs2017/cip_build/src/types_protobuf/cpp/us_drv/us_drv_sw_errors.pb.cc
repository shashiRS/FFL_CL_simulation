// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_sw_errors.proto

#include "us_drv/us_drv_sw_errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSwErrors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_sw_errors {
class UsDrvSwErrorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSwErrors> _instance;
} _UsDrvSwErrors_default_instance_;
class UsDrvSwErrors_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSwErrors_array_port> _instance;
} _UsDrvSwErrors_array_port_default_instance_;
}  // namespace us_drv_sw_errors
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvSwErrors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sw_errors::_UsDrvSwErrors_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSwErrors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsDrvSwErrors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto}, {}};

static void InitDefaultsscc_info_UsDrvSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sw_errors::_UsDrvSwErrors_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto}, {
      &scc_info_UsDrvSwErrors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, usdrivernotready_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, usdrivernotreadydetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, spidriveropfailure_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, spidriveropfailuredetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, inputportnull_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, inputportnulldetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, inputportinvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, inputportinvaliddetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, inputportfreezed_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, inputportfreezeddetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, outputportnull_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, outputportnulldetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, configurationnull_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, configurationinvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, configurationinvaliddetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, spidrivernull_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors, spidriverincompatible_),
  7,
  15,
  11,
  12,
  8,
  0,
  2,
  10,
  14,
  4,
  5,
  6,
  3,
  13,
  1,
  16,
  9,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors)},
  { 39, 45, sizeof(::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sw_errors::_UsDrvSwErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sw_errors::_UsDrvSwErrors_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035us_drv/us_drv_sw_errors.proto\022\032pb.us_d"
  "rv.us_drv_sw_errors\032 us_drv/us_drv_error"
  "_status.proto\"\371\007\n\rUsDrvSwErrors\022J\n\020usDri"
  "verNotReady\030\320\n \001(\0162/.pb.us_drv.us_drv_er"
  "ror_status.UsDrvErrorStatus\022 \n\027usDriverN"
  "otReadyDetails\030\373\033 \001(\r\022L\n\022spiDriverOpFail"
  "ure\030\347\020 \001(\0162/.pb.us_drv.us_drv_error_stat"
  "us.UsDrvErrorStatus\022\"\n\031spiDriverOpFailur"
  "eDetails\030\327\021 \001(\r\022G\n\rinputPortNull\030\210\013 \001(\0162"
  "/.pb.us_drv.us_drv_error_status.UsDrvErr"
  "orStatus\022\035\n\024inputPortNullDetails\030\220\037 \001(\r\022"
  "J\n\020inputPortInvalid\030\250\004 \001(\0162/.pb.us_drv.u"
  "s_drv_error_status.UsDrvErrorStatus\022 \n\027i"
  "nputPortInvalidDetails\030\366\r \001(\r\022J\n\020inputPo"
  "rtFreezed\030\361\032 \001(\0162/.pb.us_drv.us_drv_erro"
  "r_status.UsDrvErrorStatus\022 \n\027inputPortFr"
  "eezedDetails\030\351\010 \001(\r\022H\n\016outputPortNull\030\324\t"
  " \001(\0162/.pb.us_drv.us_drv_error_status.UsD"
  "rvErrorStatus\022\036\n\025outputPortNullDetails\030\364"
  "\t \001(\r\022K\n\021configurationNull\030\260\010 \001(\0162/.pb.u"
  "s_drv.us_drv_error_status.UsDrvErrorStat"
  "us\022N\n\024configurationInvalid\030\346\023 \001(\0162/.pb.u"
  "s_drv.us_drv_error_status.UsDrvErrorStat"
  "us\022#\n\033configurationInvalidDetails\0304 \001(\r\022"
  "G\n\rspiDriverNull\030\350\035 \001(\0162/.pb.us_drv.us_d"
  "rv_error_status.UsDrvErrorStatus\022O\n\025spiD"
  "riverIncompatible\030\307\013 \001(\0162/.pb.us_drv.us_"
  "drv_error_status.UsDrvErrorStatus\"T\n\030UsD"
  "rvSwErrors_array_port\0228\n\004data\030\373\026 \003(\0132).p"
  "b.us_drv.us_drv_sw_errors.UsDrvSwErrors"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_deps[1] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5ferror_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_sccs[2] = {
  &scc_info_UsDrvSwErrors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.base,
  &scc_info_UsDrvSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto, "us_drv/us_drv_sw_errors.proto", 1199,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_sw_errors {

// ===================================================================

void UsDrvSwErrors::InitAsDefaultInstance() {
}
class UsDrvSwErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSwErrors>()._has_bits_);
  static void set_has_usdrivernotready(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_usdrivernotreadydetails(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_spidriveropfailure(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_spidriveropfailuredetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_inputportnull(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_inputportnulldetails(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inputportinvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inputportinvaliddetails(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_inputportfreezed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_inputportfreezeddetails(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_outputportnull(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_outputportnulldetails(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_configurationnull(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_configurationinvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_configurationinvaliddetails(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spidrivernull(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_spidriverincompatible(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

UsDrvSwErrors::UsDrvSwErrors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
}
UsDrvSwErrors::UsDrvSwErrors(const UsDrvSwErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&inputportnulldetails_, &from.inputportnulldetails_,
    static_cast<size_t>(reinterpret_cast<char*>(&spidrivernull_) -
    reinterpret_cast<char*>(&inputportnulldetails_)) + sizeof(spidrivernull_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
}

void UsDrvSwErrors::SharedCtor() {
  ::memset(&inputportnulldetails_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spidrivernull_) -
      reinterpret_cast<char*>(&inputportnulldetails_)) + sizeof(spidrivernull_));
}

UsDrvSwErrors::~UsDrvSwErrors() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  SharedDtor();
}

void UsDrvSwErrors::SharedDtor() {
}

void UsDrvSwErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSwErrors& UsDrvSwErrors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSwErrors_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSwErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&inputportnulldetails_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usdrivernotready_) -
        reinterpret_cast<char*>(&inputportnulldetails_)) + sizeof(usdrivernotready_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&inputportnull_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usdrivernotreadydetails_) -
        reinterpret_cast<char*>(&inputportnull_)) + sizeof(usdrivernotreadydetails_));
  }
  spidrivernull_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSwErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 configurationInvalidDetails = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_configurationinvaliddetails(&has_bits);
          configurationinvaliddetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortInvalid = 552;
      case 552:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_inputportinvalid(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(552, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationNull = 1072;
      case 1072:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_configurationnull(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1072, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 inputPortFreezedDetails = 1129;
      case 1129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_inputportfreezeddetails(&has_bits);
          inputportfreezeddetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus outputPortNull = 1236;
      case 1236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_outputportnull(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1236, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 outputPortNullDetails = 1268;
      case 1268:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_outputportnulldetails(&has_bits);
          outputportnulldetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus usDriverNotReady = 1360;
      case 1360:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_usdrivernotready(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1360, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortNull = 1416;
      case 1416:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_inputportnull(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1416, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverIncompatible = 1479;
      case 1479:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_spidriverincompatible(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1479, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 inputPortInvalidDetails = 1782;
      case 1782:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_inputportinvaliddetails(&has_bits);
          inputportinvaliddetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverOpFailure = 2151;
      case 2151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_spidriveropfailure(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2151, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 spiDriverOpFailureDetails = 2263;
      case 2263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_spidriveropfailuredetails(&has_bits);
          spidriveropfailuredetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationInvalid = 2534;
      case 2534:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_configurationinvalid(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2534, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortFreezed = 3441;
      case 3441:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_inputportfreezed(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3441, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 usDriverNotReadyDetails = 3579;
      case 3579:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_usdrivernotreadydetails(&has_bits);
          usdrivernotreadydetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverNull = 3816;
      case 3816:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_spidrivernull(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3816, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 inputPortNullDetails = 3984;
      case 3984:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_inputportnulldetails(&has_bits);
          inputportnulldetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSwErrors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 configurationInvalidDetails = 52;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_configurationinvaliddetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortInvalid = 552;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      552, this->_internal_inputportinvalid(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationNull = 1072;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1072, this->_internal_configurationnull(), target);
  }

  // optional uint32 inputPortFreezedDetails = 1129;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1129, this->_internal_inputportfreezeddetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus outputPortNull = 1236;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1236, this->_internal_outputportnull(), target);
  }

  // optional uint32 outputPortNullDetails = 1268;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1268, this->_internal_outputportnulldetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus usDriverNotReady = 1360;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1360, this->_internal_usdrivernotready(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortNull = 1416;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1416, this->_internal_inputportnull(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverIncompatible = 1479;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1479, this->_internal_spidriverincompatible(), target);
  }

  // optional uint32 inputPortInvalidDetails = 1782;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1782, this->_internal_inputportinvaliddetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverOpFailure = 2151;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2151, this->_internal_spidriveropfailure(), target);
  }

  // optional uint32 spiDriverOpFailureDetails = 2263;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2263, this->_internal_spidriveropfailuredetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationInvalid = 2534;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2534, this->_internal_configurationinvalid(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortFreezed = 3441;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3441, this->_internal_inputportfreezed(), target);
  }

  // optional uint32 usDriverNotReadyDetails = 3579;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3579, this->_internal_usdrivernotreadydetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverNull = 3816;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3816, this->_internal_spidrivernull(), target);
  }

  // optional uint32 inputPortNullDetails = 3984;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3984, this->_internal_inputportnulldetails(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  return target;
}

size_t UsDrvSwErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 inputPortNullDetails = 3984;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inputportnulldetails());
    }

    // optional uint32 configurationInvalidDetails = 52;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_configurationinvaliddetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortInvalid = 552;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inputportinvalid());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationNull = 1072;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_configurationnull());
    }

    // optional uint32 inputPortFreezedDetails = 1129;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inputportfreezeddetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus outputPortNull = 1236;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outputportnull());
    }

    // optional uint32 outputPortNullDetails = 1268;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outputportnulldetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus usDriverNotReady = 1360;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usdrivernotready());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortNull = 1416;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inputportnull());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverIncompatible = 1479;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spidriverincompatible());
    }

    // optional uint32 inputPortInvalidDetails = 1782;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inputportinvaliddetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverOpFailure = 2151;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spidriveropfailure());
    }

    // optional uint32 spiDriverOpFailureDetails = 2263;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spidriveropfailuredetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus configurationInvalid = 2534;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_configurationinvalid());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus inputPortFreezed = 3441;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inputportfreezed());
    }

    // optional uint32 usDriverNotReadyDetails = 3579;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usdrivernotreadydetails());
    }

  }
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiDriverNull = 3816;
  if (cached_has_bits & 0x00010000u) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spidrivernull());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSwErrors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSwErrors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSwErrors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
    MergeFrom(*source);
  }
}

void UsDrvSwErrors::MergeFrom(const UsDrvSwErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      inputportnulldetails_ = from.inputportnulldetails_;
    }
    if (cached_has_bits & 0x00000002u) {
      configurationinvaliddetails_ = from.configurationinvaliddetails_;
    }
    if (cached_has_bits & 0x00000004u) {
      inputportinvalid_ = from.inputportinvalid_;
    }
    if (cached_has_bits & 0x00000008u) {
      configurationnull_ = from.configurationnull_;
    }
    if (cached_has_bits & 0x00000010u) {
      inputportfreezeddetails_ = from.inputportfreezeddetails_;
    }
    if (cached_has_bits & 0x00000020u) {
      outputportnull_ = from.outputportnull_;
    }
    if (cached_has_bits & 0x00000040u) {
      outputportnulldetails_ = from.outputportnulldetails_;
    }
    if (cached_has_bits & 0x00000080u) {
      usdrivernotready_ = from.usdrivernotready_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      inputportnull_ = from.inputportnull_;
    }
    if (cached_has_bits & 0x00000200u) {
      spidriverincompatible_ = from.spidriverincompatible_;
    }
    if (cached_has_bits & 0x00000400u) {
      inputportinvaliddetails_ = from.inputportinvaliddetails_;
    }
    if (cached_has_bits & 0x00000800u) {
      spidriveropfailure_ = from.spidriveropfailure_;
    }
    if (cached_has_bits & 0x00001000u) {
      spidriveropfailuredetails_ = from.spidriveropfailuredetails_;
    }
    if (cached_has_bits & 0x00002000u) {
      configurationinvalid_ = from.configurationinvalid_;
    }
    if (cached_has_bits & 0x00004000u) {
      inputportfreezed_ = from.inputportfreezed_;
    }
    if (cached_has_bits & 0x00008000u) {
      usdrivernotreadydetails_ = from.usdrivernotreadydetails_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_spidrivernull(from._internal_spidrivernull());
  }
}

void UsDrvSwErrors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSwErrors::CopyFrom(const UsDrvSwErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSwErrors::IsInitialized() const {
  return true;
}

void UsDrvSwErrors::InternalSwap(UsDrvSwErrors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(inputportnulldetails_, other->inputportnulldetails_);
  swap(configurationinvaliddetails_, other->configurationinvaliddetails_);
  swap(inputportinvalid_, other->inputportinvalid_);
  swap(configurationnull_, other->configurationnull_);
  swap(inputportfreezeddetails_, other->inputportfreezeddetails_);
  swap(outputportnull_, other->outputportnull_);
  swap(outputportnulldetails_, other->outputportnulldetails_);
  swap(usdrivernotready_, other->usdrivernotready_);
  swap(inputportnull_, other->inputportnull_);
  swap(spidriverincompatible_, other->spidriverincompatible_);
  swap(inputportinvaliddetails_, other->inputportinvaliddetails_);
  swap(spidriveropfailure_, other->spidriveropfailure_);
  swap(spidriveropfailuredetails_, other->spidriveropfailuredetails_);
  swap(configurationinvalid_, other->configurationinvalid_);
  swap(inputportfreezed_, other->inputportfreezed_);
  swap(usdrivernotreadydetails_, other->usdrivernotreadydetails_);
  swap(spidrivernull_, other->spidrivernull_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSwErrors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvSwErrors_array_port::InitAsDefaultInstance() {
}
class UsDrvSwErrors_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSwErrors_array_port>()._has_bits_);
};

UsDrvSwErrors_array_port::UsDrvSwErrors_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
}
UsDrvSwErrors_array_port::UsDrvSwErrors_array_port(const UsDrvSwErrors_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
}

void UsDrvSwErrors_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.base);
}

UsDrvSwErrors_array_port::~UsDrvSwErrors_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  SharedDtor();
}

void UsDrvSwErrors_array_port::SharedDtor() {
}

void UsDrvSwErrors_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSwErrors_array_port& UsDrvSwErrors_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSwErrors_array_port_us_5fdrv_2fus_5fdrv_5fsw_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSwErrors_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSwErrors_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_sw_errors.UsDrvSwErrors data = 2939;
      case 2939:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSwErrors_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sw_errors.UsDrvSwErrors data = 2939;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2939, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  return target;
}

size_t UsDrvSwErrors_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sw_errors.UsDrvSwErrors data = 2939;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSwErrors_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSwErrors_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSwErrors_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
    MergeFrom(*source);
  }
}

void UsDrvSwErrors_array_port::MergeFrom(const UsDrvSwErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvSwErrors_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSwErrors_array_port::CopyFrom(const UsDrvSwErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sw_errors.UsDrvSwErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSwErrors_array_port::IsInitialized() const {
  return true;
}

void UsDrvSwErrors_array_port::InternalSwap(UsDrvSwErrors_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSwErrors_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_sw_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sw_errors::UsDrvSwErrors_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
