// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_dsi_comm_errors.proto

#include "us_drv/us_drv_dsi_comm_errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvDsiCommErrors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_dsi_comm_errors {
class UsDrvDsiCommErrorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDsiCommErrors> _instance;
} _UsDrvDsiCommErrors_default_instance_;
class UsDrvDsiCommErrors_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDsiCommErrors_array_port> _instance;
} _UsDrvDsiCommErrors_array_port_default_instance_;
}  // namespace us_drv_dsi_comm_errors
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvDsiCommErrors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_dsi_comm_errors::_UsDrvDsiCommErrors_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvDsiCommErrors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsDrvDsiCommErrors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto}, {}};

static void InitDefaultsscc_info_UsDrvDsiCommErrors_array_port_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_dsi_comm_errors::_UsDrvDsiCommErrors_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvDsiCommErrors_array_port_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvDsiCommErrors_array_port_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto}, {
      &scc_info_UsDrvDsiCommErrors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors, discoverwrongsensorcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors, discoverwrongsensorcountdetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors, dsiundervoltage_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors, dsicmdoverrun_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors, dsicrcbistfailed_),
  0,
  2,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors)},
  { 15, 21, sizeof(::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_dsi_comm_errors::_UsDrvDsiCommErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_dsi_comm_errors::_UsDrvDsiCommErrors_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#us_drv/us_drv_dsi_comm_errors.proto\022 p"
  "b.us_drv.us_drv_dsi_comm_errors\032 us_drv/"
  "us_drv_error_status.proto\"\362\002\n\022UsDrvDsiCo"
  "mmErrors\022R\n\030discoverWrongSensorCount\030\266\035 "
  "\001(\0162/.pb.us_drv.us_drv_error_status.UsDr"
  "vErrorStatus\022(\n\037discoverWrongSensorCount"
  "Details\030\337\005 \001(\r\022I\n\017dsiUndervoltage\030\250\013 \001(\016"
  "2/.pb.us_drv.us_drv_error_status.UsDrvEr"
  "rorStatus\022G\n\rdsiCmdOverrun\030\266\031 \001(\0162/.pb.u"
  "s_drv.us_drv_error_status.UsDrvErrorStat"
  "us\022J\n\020dsiCrcBistFailed\030\225\001 \001(\0162/.pb.us_dr"
  "v.us_drv_error_status.UsDrvErrorStatus\"d"
  "\n\035UsDrvDsiCommErrors_array_port\022C\n\004data\030"
  "\223\017 \003(\01324.pb.us_drv.us_drv_dsi_comm_error"
  "s.UsDrvDsiCommErrors"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_deps[1] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5ferror_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_sccs[2] = {
  &scc_info_UsDrvDsiCommErrors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.base,
  &scc_info_UsDrvDsiCommErrors_array_port_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto, "us_drv/us_drv_dsi_comm_errors.proto", 580,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_dsi_comm_errors {

// ===================================================================

void UsDrvDsiCommErrors::InitAsDefaultInstance() {
}
class UsDrvDsiCommErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDsiCommErrors>()._has_bits_);
  static void set_has_discoverwrongsensorcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_discoverwrongsensorcountdetails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dsiundervoltage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dsicmdoverrun(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dsicrcbistfailed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UsDrvDsiCommErrors::UsDrvDsiCommErrors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
}
UsDrvDsiCommErrors::UsDrvDsiCommErrors(const UsDrvDsiCommErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&discoverwrongsensorcount_, &from.discoverwrongsensorcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&dsicmdoverrun_) -
    reinterpret_cast<char*>(&discoverwrongsensorcount_)) + sizeof(dsicmdoverrun_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
}

void UsDrvDsiCommErrors::SharedCtor() {
  ::memset(&discoverwrongsensorcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dsicmdoverrun_) -
      reinterpret_cast<char*>(&discoverwrongsensorcount_)) + sizeof(dsicmdoverrun_));
}

UsDrvDsiCommErrors::~UsDrvDsiCommErrors() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  SharedDtor();
}

void UsDrvDsiCommErrors::SharedDtor() {
}

void UsDrvDsiCommErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDsiCommErrors& UsDrvDsiCommErrors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDsiCommErrors_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDsiCommErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&discoverwrongsensorcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dsicmdoverrun_) -
        reinterpret_cast<char*>(&discoverwrongsensorcount_)) + sizeof(dsicmdoverrun_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDsiCommErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCrcBistFailed = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_dsicrcbistfailed(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(149, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 discoverWrongSensorCountDetails = 735;
      case 735:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_discoverwrongsensorcountdetails(&has_bits);
          discoverwrongsensorcountdetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiUndervoltage = 1448;
      case 1448:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_dsiundervoltage(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1448, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCmdOverrun = 3254;
      case 3254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_dsicmdoverrun(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3254, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus discoverWrongSensorCount = 3766;
      case 3766:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_discoverwrongsensorcount(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3766, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDsiCommErrors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCrcBistFailed = 149;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      149, this->_internal_dsicrcbistfailed(), target);
  }

  // optional uint32 discoverWrongSensorCountDetails = 735;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(735, this->_internal_discoverwrongsensorcountdetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiUndervoltage = 1448;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1448, this->_internal_dsiundervoltage(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCmdOverrun = 3254;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3254, this->_internal_dsicmdoverrun(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus discoverWrongSensorCount = 3766;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3766, this->_internal_discoverwrongsensorcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  return target;
}

size_t UsDrvDsiCommErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus discoverWrongSensorCount = 3766;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_discoverwrongsensorcount());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCrcBistFailed = 149;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dsicrcbistfailed());
    }

    // optional uint32 discoverWrongSensorCountDetails = 735;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_discoverwrongsensorcountdetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiUndervoltage = 1448;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dsiundervoltage());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiCmdOverrun = 3254;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dsicmdoverrun());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDsiCommErrors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDsiCommErrors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDsiCommErrors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
    MergeFrom(*source);
  }
}

void UsDrvDsiCommErrors::MergeFrom(const UsDrvDsiCommErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      discoverwrongsensorcount_ = from.discoverwrongsensorcount_;
    }
    if (cached_has_bits & 0x00000002u) {
      dsicrcbistfailed_ = from.dsicrcbistfailed_;
    }
    if (cached_has_bits & 0x00000004u) {
      discoverwrongsensorcountdetails_ = from.discoverwrongsensorcountdetails_;
    }
    if (cached_has_bits & 0x00000008u) {
      dsiundervoltage_ = from.dsiundervoltage_;
    }
    if (cached_has_bits & 0x00000010u) {
      dsicmdoverrun_ = from.dsicmdoverrun_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvDsiCommErrors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDsiCommErrors::CopyFrom(const UsDrvDsiCommErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDsiCommErrors::IsInitialized() const {
  return true;
}

void UsDrvDsiCommErrors::InternalSwap(UsDrvDsiCommErrors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(discoverwrongsensorcount_, other->discoverwrongsensorcount_);
  swap(dsicrcbistfailed_, other->dsicrcbistfailed_);
  swap(discoverwrongsensorcountdetails_, other->discoverwrongsensorcountdetails_);
  swap(dsiundervoltage_, other->dsiundervoltage_);
  swap(dsicmdoverrun_, other->dsicmdoverrun_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDsiCommErrors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvDsiCommErrors_array_port::InitAsDefaultInstance() {
}
class UsDrvDsiCommErrors_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDsiCommErrors_array_port>()._has_bits_);
};

UsDrvDsiCommErrors_array_port::UsDrvDsiCommErrors_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
}
UsDrvDsiCommErrors_array_port::UsDrvDsiCommErrors_array_port(const UsDrvDsiCommErrors_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
}

void UsDrvDsiCommErrors_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvDsiCommErrors_array_port_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.base);
}

UsDrvDsiCommErrors_array_port::~UsDrvDsiCommErrors_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  SharedDtor();
}

void UsDrvDsiCommErrors_array_port::SharedDtor() {
}

void UsDrvDsiCommErrors_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDsiCommErrors_array_port& UsDrvDsiCommErrors_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDsiCommErrors_array_port_us_5fdrv_2fus_5fdrv_5fdsi_5fcomm_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDsiCommErrors_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDsiCommErrors_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors data = 1939;
      case 1939:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15514>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDsiCommErrors_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors data = 1939;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1939, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  return target;
}

size_t UsDrvDsiCommErrors_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors data = 1939;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDsiCommErrors_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDsiCommErrors_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDsiCommErrors_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
    MergeFrom(*source);
  }
}

void UsDrvDsiCommErrors_array_port::MergeFrom(const UsDrvDsiCommErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvDsiCommErrors_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDsiCommErrors_array_port::CopyFrom(const UsDrvDsiCommErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_dsi_comm_errors.UsDrvDsiCommErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDsiCommErrors_array_port::IsInitialized() const {
  return true;
}

void UsDrvDsiCommErrors_array_port::InternalSwap(UsDrvDsiCommErrors_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDsiCommErrors_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_dsi_comm_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_dsi_comm_errors::UsDrvDsiCommErrors_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
