// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_debug_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "us_drv/us_drv_debug_port_bus.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_debug_port {
class UsDrvDebugPort;
class UsDrvDebugPortDefaultTypeInternal;
extern UsDrvDebugPortDefaultTypeInternal _UsDrvDebugPort_default_instance_;
class UsDrvDebugPort_array_port;
class UsDrvDebugPort_array_portDefaultTypeInternal;
extern UsDrvDebugPort_array_portDefaultTypeInternal _UsDrvDebugPort_array_port_default_instance_;
}  // namespace us_drv_debug_port
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_debug_port::UsDrvDebugPort>(Arena*);
template<> ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_drv {
namespace us_drv_debug_port {

// ===================================================================

class UsDrvDebugPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_debug_port.UsDrvDebugPort) */ {
 public:
  UsDrvDebugPort();
  virtual ~UsDrvDebugPort();

  UsDrvDebugPort(const UsDrvDebugPort& from);
  UsDrvDebugPort(UsDrvDebugPort&& from) noexcept
    : UsDrvDebugPort() {
    *this = ::std::move(from);
  }

  inline UsDrvDebugPort& operator=(const UsDrvDebugPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvDebugPort& operator=(UsDrvDebugPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvDebugPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvDebugPort* internal_default_instance() {
    return reinterpret_cast<const UsDrvDebugPort*>(
               &_UsDrvDebugPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsDrvDebugPort& a, UsDrvDebugPort& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvDebugPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvDebugPort* New() const final {
    return CreateMaybeMessage<UsDrvDebugPort>(nullptr);
  }

  UsDrvDebugPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvDebugPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvDebugPort& from);
  void MergeFrom(const UsDrvDebugPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvDebugPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_debug_port.UsDrvDebugPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusDebugFieldNumber = 1087,
    kSSigHeaderFieldNumber = 1033,
    kCrmCountTotalRearFieldNumber = 379,
    kSpiCommandCountFieldNumber = 813,
    kCrmErrorCountTotalFrontFieldNumber = 941,
    kPdcmErrorCountTotalFrontFieldNumber = 1007,
    kPdcmCountTotalRearFieldNumber = 1527,
    kErrorStatusCountFieldNumber = 1729,
    kPdcmCountTotalFrontFieldNumber = 2050,
    kCrmCountTotalFrontFieldNumber = 2080,
    kUiVersionNumberFieldNumber = 2124,
    kSpiCrcErrorCountFieldNumber = 2420,
    kPdcmErrorCountTotalRearFieldNumber = 3301,
    kCrmErrorCountTotalRearFieldNumber = 3637,
  };
  // repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus busDebug = 1087;
  int busdebug_size() const;
  private:
  int _internal_busdebug_size() const;
  public:
  void clear_busdebug();
  ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus* mutable_busdebug(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus >*
      mutable_busdebug();
  private:
  const ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus& _internal_busdebug(int index) const;
  ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus* _internal_add_busdebug();
  public:
  const ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus& busdebug(int index) const;
  ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus* add_busdebug();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus >&
      busdebug() const;

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional uint32 crmCountTotalRear = 379;
  bool has_crmcounttotalrear() const;
  private:
  bool _internal_has_crmcounttotalrear() const;
  public:
  void clear_crmcounttotalrear();
  ::PROTOBUF_NAMESPACE_ID::uint32 crmcounttotalrear() const;
  void set_crmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crmcounttotalrear() const;
  void _internal_set_crmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spiCommandCount = 813;
  bool has_spicommandcount() const;
  private:
  bool _internal_has_spicommandcount() const;
  public:
  void clear_spicommandcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 spicommandcount() const;
  void set_spicommandcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spicommandcount() const;
  void _internal_set_spicommandcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crmErrorCountTotalFront = 941;
  bool has_crmerrorcounttotalfront() const;
  private:
  bool _internal_has_crmerrorcounttotalfront() const;
  public:
  void clear_crmerrorcounttotalfront();
  ::PROTOBUF_NAMESPACE_ID::uint32 crmerrorcounttotalfront() const;
  void set_crmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crmerrorcounttotalfront() const;
  void _internal_set_crmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pdcmErrorCountTotalFront = 1007;
  bool has_pdcmerrorcounttotalfront() const;
  private:
  bool _internal_has_pdcmerrorcounttotalfront() const;
  public:
  void clear_pdcmerrorcounttotalfront();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmerrorcounttotalfront() const;
  void set_pdcmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcmerrorcounttotalfront() const;
  void _internal_set_pdcmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pdcmCountTotalRear = 1527;
  bool has_pdcmcounttotalrear() const;
  private:
  bool _internal_has_pdcmcounttotalrear() const;
  public:
  void clear_pdcmcounttotalrear();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmcounttotalrear() const;
  void set_pdcmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcmcounttotalrear() const;
  void _internal_set_pdcmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 errorStatusCount = 1729;
  bool has_errorstatuscount() const;
  private:
  bool _internal_has_errorstatuscount() const;
  public:
  void clear_errorstatuscount();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorstatuscount() const;
  void set_errorstatuscount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorstatuscount() const;
  void _internal_set_errorstatuscount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pdcmCountTotalFront = 2050;
  bool has_pdcmcounttotalfront() const;
  private:
  bool _internal_has_pdcmcounttotalfront() const;
  public:
  void clear_pdcmcounttotalfront();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmcounttotalfront() const;
  void set_pdcmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcmcounttotalfront() const;
  void _internal_set_pdcmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crmCountTotalFront = 2080;
  bool has_crmcounttotalfront() const;
  private:
  bool _internal_has_crmcounttotalfront() const;
  public:
  void clear_crmcounttotalfront();
  ::PROTOBUF_NAMESPACE_ID::uint32 crmcounttotalfront() const;
  void set_crmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crmcounttotalfront() const;
  void _internal_set_crmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spiCrcErrorCount = 2420;
  bool has_spicrcerrorcount() const;
  private:
  bool _internal_has_spicrcerrorcount() const;
  public:
  void clear_spicrcerrorcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 spicrcerrorcount() const;
  void set_spicrcerrorcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spicrcerrorcount() const;
  void _internal_set_spicrcerrorcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pdcmErrorCountTotalRear = 3301;
  bool has_pdcmerrorcounttotalrear() const;
  private:
  bool _internal_has_pdcmerrorcounttotalrear() const;
  public:
  void clear_pdcmerrorcounttotalrear();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmerrorcounttotalrear() const;
  void set_pdcmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcmerrorcounttotalrear() const;
  void _internal_set_pdcmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crmErrorCountTotalRear = 3637;
  bool has_crmerrorcounttotalrear() const;
  private:
  bool _internal_has_crmerrorcounttotalrear() const;
  public:
  void clear_crmerrorcounttotalrear();
  ::PROTOBUF_NAMESPACE_ID::uint32 crmerrorcounttotalrear() const;
  void set_crmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crmerrorcounttotalrear() const;
  void _internal_set_crmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus > busdebug_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crmcounttotalrear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spicommandcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crmerrorcounttotalfront_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmerrorcounttotalfront_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmcounttotalrear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorstatuscount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmcounttotalfront_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crmcounttotalfront_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spicrcerrorcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcmerrorcounttotalrear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crmerrorcounttotalrear_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto;
};
// -------------------------------------------------------------------

class UsDrvDebugPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port) */ {
 public:
  UsDrvDebugPort_array_port();
  virtual ~UsDrvDebugPort_array_port();

  UsDrvDebugPort_array_port(const UsDrvDebugPort_array_port& from);
  UsDrvDebugPort_array_port(UsDrvDebugPort_array_port&& from) noexcept
    : UsDrvDebugPort_array_port() {
    *this = ::std::move(from);
  }

  inline UsDrvDebugPort_array_port& operator=(const UsDrvDebugPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvDebugPort_array_port& operator=(UsDrvDebugPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvDebugPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvDebugPort_array_port* internal_default_instance() {
    return reinterpret_cast<const UsDrvDebugPort_array_port*>(
               &_UsDrvDebugPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsDrvDebugPort_array_port& a, UsDrvDebugPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvDebugPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvDebugPort_array_port* New() const final {
    return CreateMaybeMessage<UsDrvDebugPort_array_port>(nullptr);
  }

  UsDrvDebugPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvDebugPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvDebugPort_array_port& from);
  void MergeFrom(const UsDrvDebugPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvDebugPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1631,
  };
  // repeated .pb.us_drv.us_drv_debug_port.UsDrvDebugPort data = 1631;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort >*
      mutable_data();
  private:
  const ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort& _internal_data(int index) const;
  ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* _internal_add_data();
  public:
  const ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort& data(int index) const;
  ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort > data_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsDrvDebugPort

// optional uint32 uiVersionNumber = 2124;
inline bool UsDrvDebugPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void UsDrvDebugPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void UsDrvDebugPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  uiversionnumber_ = value;
}
inline void UsDrvDebugPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool UsDrvDebugPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool UsDrvDebugPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& UsDrvDebugPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& UsDrvDebugPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* UsDrvDebugPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* UsDrvDebugPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* UsDrvDebugPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void UsDrvDebugPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.sSigHeader)
}

// optional uint32 spiCommandCount = 813;
inline bool UsDrvDebugPort::_internal_has_spicommandcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_spicommandcount() const {
  return _internal_has_spicommandcount();
}
inline void UsDrvDebugPort::clear_spicommandcount() {
  spicommandcount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_spicommandcount() const {
  return spicommandcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::spicommandcount() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.spiCommandCount)
  return _internal_spicommandcount();
}
inline void UsDrvDebugPort::_internal_set_spicommandcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  spicommandcount_ = value;
}
inline void UsDrvDebugPort::set_spicommandcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spicommandcount(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.spiCommandCount)
}

// optional uint32 spiCrcErrorCount = 2420;
inline bool UsDrvDebugPort::_internal_has_spicrcerrorcount() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_spicrcerrorcount() const {
  return _internal_has_spicrcerrorcount();
}
inline void UsDrvDebugPort::clear_spicrcerrorcount() {
  spicrcerrorcount_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_spicrcerrorcount() const {
  return spicrcerrorcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::spicrcerrorcount() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.spiCrcErrorCount)
  return _internal_spicrcerrorcount();
}
inline void UsDrvDebugPort::_internal_set_spicrcerrorcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  spicrcerrorcount_ = value;
}
inline void UsDrvDebugPort::set_spicrcerrorcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spicrcerrorcount(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.spiCrcErrorCount)
}

// optional uint32 errorStatusCount = 1729;
inline bool UsDrvDebugPort::_internal_has_errorstatuscount() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_errorstatuscount() const {
  return _internal_has_errorstatuscount();
}
inline void UsDrvDebugPort::clear_errorstatuscount() {
  errorstatuscount_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_errorstatuscount() const {
  return errorstatuscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::errorstatuscount() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.errorStatusCount)
  return _internal_errorstatuscount();
}
inline void UsDrvDebugPort::_internal_set_errorstatuscount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  errorstatuscount_ = value;
}
inline void UsDrvDebugPort::set_errorstatuscount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorstatuscount(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.errorStatusCount)
}

// optional uint32 pdcmCountTotalFront = 2050;
inline bool UsDrvDebugPort::_internal_has_pdcmcounttotalfront() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_pdcmcounttotalfront() const {
  return _internal_has_pdcmcounttotalfront();
}
inline void UsDrvDebugPort::clear_pdcmcounttotalfront() {
  pdcmcounttotalfront_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_pdcmcounttotalfront() const {
  return pdcmcounttotalfront_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::pdcmcounttotalfront() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmCountTotalFront)
  return _internal_pdcmcounttotalfront();
}
inline void UsDrvDebugPort::_internal_set_pdcmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  pdcmcounttotalfront_ = value;
}
inline void UsDrvDebugPort::set_pdcmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcmcounttotalfront(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmCountTotalFront)
}

// optional uint32 pdcmErrorCountTotalFront = 1007;
inline bool UsDrvDebugPort::_internal_has_pdcmerrorcounttotalfront() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_pdcmerrorcounttotalfront() const {
  return _internal_has_pdcmerrorcounttotalfront();
}
inline void UsDrvDebugPort::clear_pdcmerrorcounttotalfront() {
  pdcmerrorcounttotalfront_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_pdcmerrorcounttotalfront() const {
  return pdcmerrorcounttotalfront_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::pdcmerrorcounttotalfront() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmErrorCountTotalFront)
  return _internal_pdcmerrorcounttotalfront();
}
inline void UsDrvDebugPort::_internal_set_pdcmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pdcmerrorcounttotalfront_ = value;
}
inline void UsDrvDebugPort::set_pdcmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcmerrorcounttotalfront(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmErrorCountTotalFront)
}

// optional uint32 crmCountTotalFront = 2080;
inline bool UsDrvDebugPort::_internal_has_crmcounttotalfront() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_crmcounttotalfront() const {
  return _internal_has_crmcounttotalfront();
}
inline void UsDrvDebugPort::clear_crmcounttotalfront() {
  crmcounttotalfront_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_crmcounttotalfront() const {
  return crmcounttotalfront_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::crmcounttotalfront() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmCountTotalFront)
  return _internal_crmcounttotalfront();
}
inline void UsDrvDebugPort::_internal_set_crmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  crmcounttotalfront_ = value;
}
inline void UsDrvDebugPort::set_crmcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crmcounttotalfront(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmCountTotalFront)
}

// optional uint32 crmErrorCountTotalFront = 941;
inline bool UsDrvDebugPort::_internal_has_crmerrorcounttotalfront() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_crmerrorcounttotalfront() const {
  return _internal_has_crmerrorcounttotalfront();
}
inline void UsDrvDebugPort::clear_crmerrorcounttotalfront() {
  crmerrorcounttotalfront_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_crmerrorcounttotalfront() const {
  return crmerrorcounttotalfront_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::crmerrorcounttotalfront() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmErrorCountTotalFront)
  return _internal_crmerrorcounttotalfront();
}
inline void UsDrvDebugPort::_internal_set_crmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  crmerrorcounttotalfront_ = value;
}
inline void UsDrvDebugPort::set_crmerrorcounttotalfront(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crmerrorcounttotalfront(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmErrorCountTotalFront)
}

// optional uint32 pdcmCountTotalRear = 1527;
inline bool UsDrvDebugPort::_internal_has_pdcmcounttotalrear() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_pdcmcounttotalrear() const {
  return _internal_has_pdcmcounttotalrear();
}
inline void UsDrvDebugPort::clear_pdcmcounttotalrear() {
  pdcmcounttotalrear_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_pdcmcounttotalrear() const {
  return pdcmcounttotalrear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::pdcmcounttotalrear() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmCountTotalRear)
  return _internal_pdcmcounttotalrear();
}
inline void UsDrvDebugPort::_internal_set_pdcmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  pdcmcounttotalrear_ = value;
}
inline void UsDrvDebugPort::set_pdcmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcmcounttotalrear(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmCountTotalRear)
}

// optional uint32 pdcmErrorCountTotalRear = 3301;
inline bool UsDrvDebugPort::_internal_has_pdcmerrorcounttotalrear() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_pdcmerrorcounttotalrear() const {
  return _internal_has_pdcmerrorcounttotalrear();
}
inline void UsDrvDebugPort::clear_pdcmerrorcounttotalrear() {
  pdcmerrorcounttotalrear_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_pdcmerrorcounttotalrear() const {
  return pdcmerrorcounttotalrear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::pdcmerrorcounttotalrear() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmErrorCountTotalRear)
  return _internal_pdcmerrorcounttotalrear();
}
inline void UsDrvDebugPort::_internal_set_pdcmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  pdcmerrorcounttotalrear_ = value;
}
inline void UsDrvDebugPort::set_pdcmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcmerrorcounttotalrear(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.pdcmErrorCountTotalRear)
}

// optional uint32 crmCountTotalRear = 379;
inline bool UsDrvDebugPort::_internal_has_crmcounttotalrear() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_crmcounttotalrear() const {
  return _internal_has_crmcounttotalrear();
}
inline void UsDrvDebugPort::clear_crmcounttotalrear() {
  crmcounttotalrear_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_crmcounttotalrear() const {
  return crmcounttotalrear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::crmcounttotalrear() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmCountTotalRear)
  return _internal_crmcounttotalrear();
}
inline void UsDrvDebugPort::_internal_set_crmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  crmcounttotalrear_ = value;
}
inline void UsDrvDebugPort::set_crmcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crmcounttotalrear(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmCountTotalRear)
}

// optional uint32 crmErrorCountTotalRear = 3637;
inline bool UsDrvDebugPort::_internal_has_crmerrorcounttotalrear() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UsDrvDebugPort::has_crmerrorcounttotalrear() const {
  return _internal_has_crmerrorcounttotalrear();
}
inline void UsDrvDebugPort::clear_crmerrorcounttotalrear() {
  crmerrorcounttotalrear_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::_internal_crmerrorcounttotalrear() const {
  return crmerrorcounttotalrear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvDebugPort::crmerrorcounttotalrear() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmErrorCountTotalRear)
  return _internal_crmerrorcounttotalrear();
}
inline void UsDrvDebugPort::_internal_set_crmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  crmerrorcounttotalrear_ = value;
}
inline void UsDrvDebugPort::set_crmerrorcounttotalrear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crmerrorcounttotalrear(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.crmErrorCountTotalRear)
}

// repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus busDebug = 1087;
inline int UsDrvDebugPort::_internal_busdebug_size() const {
  return busdebug_.size();
}
inline int UsDrvDebugPort::busdebug_size() const {
  return _internal_busdebug_size();
}
inline ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus* UsDrvDebugPort::mutable_busdebug(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.busDebug)
  return busdebug_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus >*
UsDrvDebugPort::mutable_busdebug() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.busDebug)
  return &busdebug_;
}
inline const ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus& UsDrvDebugPort::_internal_busdebug(int index) const {
  return busdebug_.Get(index);
}
inline const ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus& UsDrvDebugPort::busdebug(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.busDebug)
  return _internal_busdebug(index);
}
inline ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus* UsDrvDebugPort::_internal_add_busdebug() {
  return busdebug_.Add();
}
inline ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus* UsDrvDebugPort::add_busdebug() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.busDebug)
  return _internal_add_busdebug();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port_bus::UsDrvDebugPortBus >&
UsDrvDebugPort::busdebug() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_debug_port.UsDrvDebugPort.busDebug)
  return busdebug_;
}

// -------------------------------------------------------------------

// UsDrvDebugPort_array_port

// repeated .pb.us_drv.us_drv_debug_port.UsDrvDebugPort data = 1631;
inline int UsDrvDebugPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsDrvDebugPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsDrvDebugPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* UsDrvDebugPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort >*
UsDrvDebugPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port.data)
  return &data_;
}
inline const ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort& UsDrvDebugPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort& UsDrvDebugPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* UsDrvDebugPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* UsDrvDebugPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort >&
UsDrvDebugPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_drv_debug_port
}  // namespace us_drv
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto
