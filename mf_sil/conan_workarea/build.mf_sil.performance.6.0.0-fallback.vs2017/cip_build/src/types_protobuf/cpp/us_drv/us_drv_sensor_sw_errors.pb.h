// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_sensor_sw_errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "us_drv/us_drv_error_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_sensor_sw_errors {
class UsDrvSensorSwErrors;
class UsDrvSensorSwErrorsDefaultTypeInternal;
extern UsDrvSensorSwErrorsDefaultTypeInternal _UsDrvSensorSwErrors_default_instance_;
class UsDrvSensorSwErrors_array_port;
class UsDrvSensorSwErrors_array_portDefaultTypeInternal;
extern UsDrvSensorSwErrors_array_portDefaultTypeInternal _UsDrvSensorSwErrors_array_port_default_instance_;
}  // namespace us_drv_sensor_sw_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors>(Arena*);
template<> ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_drv {
namespace us_drv_sensor_sw_errors {

// ===================================================================

class UsDrvSensorSwErrors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors) */ {
 public:
  UsDrvSensorSwErrors();
  virtual ~UsDrvSensorSwErrors();

  UsDrvSensorSwErrors(const UsDrvSensorSwErrors& from);
  UsDrvSensorSwErrors(UsDrvSensorSwErrors&& from) noexcept
    : UsDrvSensorSwErrors() {
    *this = ::std::move(from);
  }

  inline UsDrvSensorSwErrors& operator=(const UsDrvSensorSwErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvSensorSwErrors& operator=(UsDrvSensorSwErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvSensorSwErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvSensorSwErrors* internal_default_instance() {
    return reinterpret_cast<const UsDrvSensorSwErrors*>(
               &_UsDrvSensorSwErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsDrvSensorSwErrors& a, UsDrvSensorSwErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvSensorSwErrors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvSensorSwErrors* New() const final {
    return CreateMaybeMessage<UsDrvSensorSwErrors>(nullptr);
  }

  UsDrvSensorSwErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvSensorSwErrors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvSensorSwErrors& from);
  void MergeFrom(const UsDrvSensorSwErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvSensorSwErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorFwVersionIncompatibleFieldNumber = 106,
    kSensorInitBusErrorFieldNumber = 511,
    kSensorInitReceivingSchemeSendFailFieldNumber = 824,
    kSensorHwVersionIncompatibleFieldNumber = 874,
    kSensorInitScodeIncorrectFieldNumber = 1291,
    kSensorInitTimeoutDetailsFieldNumber = 1498,
    kUnexpectedMeasModeRecfgFieldNumber = 2087,
    kSensorPdcmCommTimeoutFieldNumber = 2090,
    kSensorInitFiringSchemeSendFailFieldNumber = 2539,
    kSensorInitTimeoutFieldNumber = 3192,
  };
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorFwVersionIncompatible = 106;
  bool has_sensorfwversionincompatible() const;
  private:
  bool _internal_has_sensorfwversionincompatible() const;
  public:
  void clear_sensorfwversionincompatible();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorfwversionincompatible() const;
  void set_sensorfwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorfwversionincompatible() const;
  void _internal_set_sensorfwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitBusError = 511;
  bool has_sensorinitbuserror() const;
  private:
  bool _internal_has_sensorinitbuserror() const;
  public:
  void clear_sensorinitbuserror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorinitbuserror() const;
  void set_sensorinitbuserror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorinitbuserror() const;
  void _internal_set_sensorinitbuserror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitReceivingSchemeSendFail = 824;
  bool has_sensorinitreceivingschemesendfail() const;
  private:
  bool _internal_has_sensorinitreceivingschemesendfail() const;
  public:
  void clear_sensorinitreceivingschemesendfail();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorinitreceivingschemesendfail() const;
  void set_sensorinitreceivingschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorinitreceivingschemesendfail() const;
  void _internal_set_sensorinitreceivingschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorHwVersionIncompatible = 874;
  bool has_sensorhwversionincompatible() const;
  private:
  bool _internal_has_sensorhwversionincompatible() const;
  public:
  void clear_sensorhwversionincompatible();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorhwversionincompatible() const;
  void set_sensorhwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorhwversionincompatible() const;
  void _internal_set_sensorhwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitScodeIncorrect = 1291;
  bool has_sensorinitscodeincorrect() const;
  private:
  bool _internal_has_sensorinitscodeincorrect() const;
  public:
  void clear_sensorinitscodeincorrect();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorinitscodeincorrect() const;
  void set_sensorinitscodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorinitscodeincorrect() const;
  void _internal_set_sensorinitscodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional uint32 sensorInitTimeoutDetails = 1498;
  bool has_sensorinittimeoutdetails() const;
  private:
  bool _internal_has_sensorinittimeoutdetails() const;
  public:
  void clear_sensorinittimeoutdetails();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorinittimeoutdetails() const;
  void set_sensorinittimeoutdetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensorinittimeoutdetails() const;
  void _internal_set_sensorinittimeoutdetails(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus unexpectedMeasModeRecfg = 2087;
  bool has_unexpectedmeasmoderecfg() const;
  private:
  bool _internal_has_unexpectedmeasmoderecfg() const;
  public:
  void clear_unexpectedmeasmoderecfg();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus unexpectedmeasmoderecfg() const;
  void set_unexpectedmeasmoderecfg(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_unexpectedmeasmoderecfg() const;
  void _internal_set_unexpectedmeasmoderecfg(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorPdcmCommTimeout = 2090;
  bool has_sensorpdcmcommtimeout() const;
  private:
  bool _internal_has_sensorpdcmcommtimeout() const;
  public:
  void clear_sensorpdcmcommtimeout();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorpdcmcommtimeout() const;
  void set_sensorpdcmcommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorpdcmcommtimeout() const;
  void _internal_set_sensorpdcmcommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitFiringSchemeSendFail = 2539;
  bool has_sensorinitfiringschemesendfail() const;
  private:
  bool _internal_has_sensorinitfiringschemesendfail() const;
  public:
  void clear_sensorinitfiringschemesendfail();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorinitfiringschemesendfail() const;
  void set_sensorinitfiringschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorinitfiringschemesendfail() const;
  void _internal_set_sensorinitfiringschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitTimeout = 3192;
  bool has_sensorinittimeout() const;
  private:
  bool _internal_has_sensorinittimeout() const;
  public:
  void clear_sensorinittimeout();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus sensorinittimeout() const;
  void set_sensorinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_sensorinittimeout() const;
  void _internal_set_sensorinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int sensorfwversionincompatible_;
  int sensorinitbuserror_;
  int sensorinitreceivingschemesendfail_;
  int sensorhwversionincompatible_;
  int sensorinitscodeincorrect_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensorinittimeoutdetails_;
  int unexpectedmeasmoderecfg_;
  int sensorpdcmcommtimeout_;
  int sensorinitfiringschemesendfail_;
  int sensorinittimeout_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto;
};
// -------------------------------------------------------------------

class UsDrvSensorSwErrors_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port) */ {
 public:
  UsDrvSensorSwErrors_array_port();
  virtual ~UsDrvSensorSwErrors_array_port();

  UsDrvSensorSwErrors_array_port(const UsDrvSensorSwErrors_array_port& from);
  UsDrvSensorSwErrors_array_port(UsDrvSensorSwErrors_array_port&& from) noexcept
    : UsDrvSensorSwErrors_array_port() {
    *this = ::std::move(from);
  }

  inline UsDrvSensorSwErrors_array_port& operator=(const UsDrvSensorSwErrors_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvSensorSwErrors_array_port& operator=(UsDrvSensorSwErrors_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvSensorSwErrors_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvSensorSwErrors_array_port* internal_default_instance() {
    return reinterpret_cast<const UsDrvSensorSwErrors_array_port*>(
               &_UsDrvSensorSwErrors_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsDrvSensorSwErrors_array_port& a, UsDrvSensorSwErrors_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvSensorSwErrors_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvSensorSwErrors_array_port* New() const final {
    return CreateMaybeMessage<UsDrvSensorSwErrors_array_port>(nullptr);
  }

  UsDrvSensorSwErrors_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvSensorSwErrors_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvSensorSwErrors_array_port& from);
  void MergeFrom(const UsDrvSensorSwErrors_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvSensorSwErrors_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1001,
  };
  // repeated .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors data = 1001;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors >*
      mutable_data();
  private:
  const ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors& _internal_data(int index) const;
  ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* _internal_add_data();
  public:
  const ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors& data(int index) const;
  ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors > data_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsDrvSensorSwErrors

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitTimeout = 3192;
inline bool UsDrvSensorSwErrors::_internal_has_sensorinittimeout() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorinittimeout() const {
  return _internal_has_sensorinittimeout();
}
inline void UsDrvSensorSwErrors::clear_sensorinittimeout() {
  sensorinittimeout_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorinittimeout() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorinittimeout_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorinittimeout() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitTimeout)
  return _internal_sensorinittimeout();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  sensorinittimeout_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorinittimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorinittimeout(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitTimeout)
}

// optional uint32 sensorInitTimeoutDetails = 1498;
inline bool UsDrvSensorSwErrors::_internal_has_sensorinittimeoutdetails() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorinittimeoutdetails() const {
  return _internal_has_sensorinittimeoutdetails();
}
inline void UsDrvSensorSwErrors::clear_sensorinittimeoutdetails() {
  sensorinittimeoutdetails_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSensorSwErrors::_internal_sensorinittimeoutdetails() const {
  return sensorinittimeoutdetails_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UsDrvSensorSwErrors::sensorinittimeoutdetails() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitTimeoutDetails)
  return _internal_sensorinittimeoutdetails();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorinittimeoutdetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  sensorinittimeoutdetails_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorinittimeoutdetails(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensorinittimeoutdetails(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitTimeoutDetails)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorFwVersionIncompatible = 106;
inline bool UsDrvSensorSwErrors::_internal_has_sensorfwversionincompatible() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorfwversionincompatible() const {
  return _internal_has_sensorfwversionincompatible();
}
inline void UsDrvSensorSwErrors::clear_sensorfwversionincompatible() {
  sensorfwversionincompatible_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorfwversionincompatible() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorfwversionincompatible_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorfwversionincompatible() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorFwVersionIncompatible)
  return _internal_sensorfwversionincompatible();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorfwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  sensorfwversionincompatible_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorfwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorfwversionincompatible(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorFwVersionIncompatible)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorHwVersionIncompatible = 874;
inline bool UsDrvSensorSwErrors::_internal_has_sensorhwversionincompatible() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorhwversionincompatible() const {
  return _internal_has_sensorhwversionincompatible();
}
inline void UsDrvSensorSwErrors::clear_sensorhwversionincompatible() {
  sensorhwversionincompatible_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorhwversionincompatible() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorhwversionincompatible_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorhwversionincompatible() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorHwVersionIncompatible)
  return _internal_sensorhwversionincompatible();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorhwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  sensorhwversionincompatible_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorhwversionincompatible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorhwversionincompatible(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorHwVersionIncompatible)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitFiringSchemeSendFail = 2539;
inline bool UsDrvSensorSwErrors::_internal_has_sensorinitfiringschemesendfail() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorinitfiringschemesendfail() const {
  return _internal_has_sensorinitfiringschemesendfail();
}
inline void UsDrvSensorSwErrors::clear_sensorinitfiringschemesendfail() {
  sensorinitfiringschemesendfail_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorinitfiringschemesendfail() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorinitfiringschemesendfail_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorinitfiringschemesendfail() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitFiringSchemeSendFail)
  return _internal_sensorinitfiringschemesendfail();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorinitfiringschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  sensorinitfiringschemesendfail_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorinitfiringschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorinitfiringschemesendfail(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitFiringSchemeSendFail)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitReceivingSchemeSendFail = 824;
inline bool UsDrvSensorSwErrors::_internal_has_sensorinitreceivingschemesendfail() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorinitreceivingschemesendfail() const {
  return _internal_has_sensorinitreceivingschemesendfail();
}
inline void UsDrvSensorSwErrors::clear_sensorinitreceivingschemesendfail() {
  sensorinitreceivingschemesendfail_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorinitreceivingschemesendfail() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorinitreceivingschemesendfail_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorinitreceivingschemesendfail() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitReceivingSchemeSendFail)
  return _internal_sensorinitreceivingschemesendfail();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorinitreceivingschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  sensorinitreceivingschemesendfail_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorinitreceivingschemesendfail(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorinitreceivingschemesendfail(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitReceivingSchemeSendFail)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitBusError = 511;
inline bool UsDrvSensorSwErrors::_internal_has_sensorinitbuserror() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorinitbuserror() const {
  return _internal_has_sensorinitbuserror();
}
inline void UsDrvSensorSwErrors::clear_sensorinitbuserror() {
  sensorinitbuserror_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorinitbuserror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorinitbuserror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorinitbuserror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitBusError)
  return _internal_sensorinitbuserror();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorinitbuserror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  sensorinitbuserror_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorinitbuserror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorinitbuserror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitBusError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorInitScodeIncorrect = 1291;
inline bool UsDrvSensorSwErrors::_internal_has_sensorinitscodeincorrect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorinitscodeincorrect() const {
  return _internal_has_sensorinitscodeincorrect();
}
inline void UsDrvSensorSwErrors::clear_sensorinitscodeincorrect() {
  sensorinitscodeincorrect_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorinitscodeincorrect() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorinitscodeincorrect_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorinitscodeincorrect() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitScodeIncorrect)
  return _internal_sensorinitscodeincorrect();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorinitscodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  sensorinitscodeincorrect_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorinitscodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorinitscodeincorrect(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorInitScodeIncorrect)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus sensorPdcmCommTimeout = 2090;
inline bool UsDrvSensorSwErrors::_internal_has_sensorpdcmcommtimeout() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_sensorpdcmcommtimeout() const {
  return _internal_has_sensorpdcmcommtimeout();
}
inline void UsDrvSensorSwErrors::clear_sensorpdcmcommtimeout() {
  sensorpdcmcommtimeout_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_sensorpdcmcommtimeout() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(sensorpdcmcommtimeout_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::sensorpdcmcommtimeout() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorPdcmCommTimeout)
  return _internal_sensorpdcmcommtimeout();
}
inline void UsDrvSensorSwErrors::_internal_set_sensorpdcmcommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  sensorpdcmcommtimeout_ = value;
}
inline void UsDrvSensorSwErrors::set_sensorpdcmcommtimeout(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_sensorpdcmcommtimeout(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.sensorPdcmCommTimeout)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus unexpectedMeasModeRecfg = 2087;
inline bool UsDrvSensorSwErrors::_internal_has_unexpectedmeasmoderecfg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsDrvSensorSwErrors::has_unexpectedmeasmoderecfg() const {
  return _internal_has_unexpectedmeasmoderecfg();
}
inline void UsDrvSensorSwErrors::clear_unexpectedmeasmoderecfg() {
  unexpectedmeasmoderecfg_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::_internal_unexpectedmeasmoderecfg() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(unexpectedmeasmoderecfg_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorSwErrors::unexpectedmeasmoderecfg() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.unexpectedMeasModeRecfg)
  return _internal_unexpectedmeasmoderecfg();
}
inline void UsDrvSensorSwErrors::_internal_set_unexpectedmeasmoderecfg(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  unexpectedmeasmoderecfg_ = value;
}
inline void UsDrvSensorSwErrors::set_unexpectedmeasmoderecfg(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_unexpectedmeasmoderecfg(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors.unexpectedMeasModeRecfg)
}

// -------------------------------------------------------------------

// UsDrvSensorSwErrors_array_port

// repeated .pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors data = 1001;
inline int UsDrvSensorSwErrors_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsDrvSensorSwErrors_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsDrvSensorSwErrors_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* UsDrvSensorSwErrors_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors >*
UsDrvSensorSwErrors_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port.data)
  return &data_;
}
inline const ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors& UsDrvSensorSwErrors_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors& UsDrvSensorSwErrors_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* UsDrvSensorSwErrors_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors* UsDrvSensorSwErrors_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_sw_errors::UsDrvSensorSwErrors >&
UsDrvSensorSwErrors_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_sensor_sw_errors.UsDrvSensorSwErrors_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_drv_sensor_sw_errors
}  // namespace us_drv
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsensor_5fsw_5ferrors_2eproto
