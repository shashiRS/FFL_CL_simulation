// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_debug_port.proto

#include "us_drv/us_drv_debug_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_debug_port {
class UsDrvDebugPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDebugPort> _instance;
} _UsDrvDebugPort_default_instance_;
class UsDrvDebugPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvDebugPort_array_port> _instance;
} _UsDrvDebugPort_array_port_default_instance_;
}  // namespace us_drv_debug_port
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_debug_port::_UsDrvDebugPort_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_UsDrvDebugPortBus_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto.base,}};

static void InitDefaultsscc_info_UsDrvDebugPort_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_debug_port::_UsDrvDebugPort_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvDebugPort_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvDebugPort_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto}, {
      &scc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, spicommandcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, spicrcerrorcount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, errorstatuscount_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, pdcmcounttotalfront_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, pdcmerrorcounttotalfront_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, crmcounttotalfront_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, crmerrorcounttotalfront_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, pdcmcounttotalrear_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, pdcmerrorcounttotalrear_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, crmcounttotalrear_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, crmerrorcounttotalrear_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort, busdebug_),
  9,
  0,
  2,
  10,
  6,
  7,
  4,
  8,
  3,
  5,
  11,
  1,
  12,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort)},
  { 33, 39, sizeof(::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_debug_port::_UsDrvDebugPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_debug_port::_UsDrvDebugPort_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036us_drv/us_drv_debug_port.proto\022\033pb.us_"
  "drv.us_drv_debug_port\032\027eco/signal_header"
  ".proto\032\"us_drv/us_drv_debug_port_bus.pro"
  "to\"\366\003\n\016UsDrvDebugPort\022\030\n\017uiVersionNumber"
  "\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.eco.si"
  "gnal_header.SignalHeader\022\030\n\017spiCommandCo"
  "unt\030\255\006 \001(\r\022\031\n\020spiCrcErrorCount\030\364\022 \001(\r\022\031\n"
  "\020errorStatusCount\030\301\r \001(\r\022\034\n\023pdcmCountTot"
  "alFront\030\202\020 \001(\r\022!\n\030pdcmErrorCountTotalFro"
  "nt\030\357\007 \001(\r\022\033\n\022crmCountTotalFront\030\240\020 \001(\r\022 "
  "\n\027crmErrorCountTotalFront\030\255\007 \001(\r\022\033\n\022pdcm"
  "CountTotalRear\030\367\013 \001(\r\022 \n\027pdcmErrorCountT"
  "otalRear\030\345\031 \001(\r\022\032\n\021crmCountTotalRear\030\373\002 "
  "\001(\r\022\037\n\026crmErrorCountTotalRear\030\265\034 \001(\r\022E\n\010"
  "busDebug\030\277\010 \003(\01322.pb.us_drv.us_drv_debug"
  "_port_bus.UsDrvDebugPortBus\"W\n\031UsDrvDebu"
  "gPort_array_port\022:\n\004data\030\337\014 \003(\0132+.pb.us_"
  "drv.us_drv_debug_port.UsDrvDebugPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_deps[2] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_5fbus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_sccs[2] = {
  &scc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.base,
  &scc_info_UsDrvDebugPort_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto, "us_drv/us_drv_debug_port.proto", 716,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_debug_port {

// ===================================================================

void UsDrvDebugPort::InitAsDefaultInstance() {
  ::pb::us_drv::us_drv_debug_port::_UsDrvDebugPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class UsDrvDebugPort::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDebugPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const UsDrvDebugPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spicommandcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spicrcerrorcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_errorstatuscount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pdcmcounttotalfront(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pdcmerrorcounttotalfront(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crmcounttotalfront(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_crmerrorcounttotalfront(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pdcmcounttotalrear(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pdcmerrorcounttotalrear(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_crmcounttotalrear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crmerrorcounttotalrear(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
UsDrvDebugPort::_Internal::ssigheader(const UsDrvDebugPort* msg) {
  return *msg->ssigheader_;
}
void UsDrvDebugPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UsDrvDebugPort::clear_busdebug() {
  busdebug_.Clear();
}
UsDrvDebugPort::UsDrvDebugPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
}
UsDrvDebugPort::UsDrvDebugPort(const UsDrvDebugPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      busdebug_(from.busdebug_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&crmcounttotalrear_, &from.crmcounttotalrear_,
    static_cast<size_t>(reinterpret_cast<char*>(&crmerrorcounttotalrear_) -
    reinterpret_cast<char*>(&crmcounttotalrear_)) + sizeof(crmerrorcounttotalrear_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
}

void UsDrvDebugPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crmerrorcounttotalrear_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(crmerrorcounttotalrear_));
}

UsDrvDebugPort::~UsDrvDebugPort() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  SharedDtor();
}

void UsDrvDebugPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void UsDrvDebugPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDebugPort& UsDrvDebugPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDebugPort_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDebugPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  busdebug_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&crmcounttotalrear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdcmcounttotalfront_) -
        reinterpret_cast<char*>(&crmcounttotalrear_)) + sizeof(pdcmcounttotalfront_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&crmcounttotalfront_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crmerrorcounttotalrear_) -
        reinterpret_cast<char*>(&crmcounttotalfront_)) + sizeof(crmerrorcounttotalrear_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDebugPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 crmCountTotalRear = 379;
      case 379:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_crmcounttotalrear(&has_bits);
          crmcounttotalrear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spiCommandCount = 813;
      case 813:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_spicommandcount(&has_bits);
          spicommandcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crmErrorCountTotalFront = 941;
      case 941:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_crmerrorcounttotalfront(&has_bits);
          crmerrorcounttotalfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmErrorCountTotalFront = 1007;
      case 1007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_pdcmerrorcounttotalfront(&has_bits);
          pdcmerrorcounttotalfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus busDebug = 1087;
      case 1087:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_busdebug(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8698>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmCountTotalRear = 1527;
      case 1527:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_pdcmcounttotalrear(&has_bits);
          pdcmcounttotalrear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 errorStatusCount = 1729;
      case 1729:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorstatuscount(&has_bits);
          errorstatuscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmCountTotalFront = 2050;
      case 2050:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pdcmcounttotalfront(&has_bits);
          pdcmcounttotalfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crmCountTotalFront = 2080;
      case 2080:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_crmcounttotalfront(&has_bits);
          crmcounttotalfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spiCrcErrorCount = 2420;
      case 2420:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_spicrcerrorcount(&has_bits);
          spicrcerrorcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcmErrorCountTotalRear = 3301;
      case 3301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pdcmerrorcounttotalrear(&has_bits);
          pdcmerrorcounttotalrear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crmErrorCountTotalRear = 3637;
      case 3637:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_crmerrorcounttotalrear(&has_bits);
          crmerrorcounttotalrear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDebugPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 crmCountTotalRear = 379;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(379, this->_internal_crmcounttotalrear(), target);
  }

  // optional uint32 spiCommandCount = 813;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(813, this->_internal_spicommandcount(), target);
  }

  // optional uint32 crmErrorCountTotalFront = 941;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(941, this->_internal_crmerrorcounttotalfront(), target);
  }

  // optional uint32 pdcmErrorCountTotalFront = 1007;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1007, this->_internal_pdcmerrorcounttotalfront(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus busDebug = 1087;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_busdebug_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1087, this->_internal_busdebug(i), target, stream);
  }

  // optional uint32 pdcmCountTotalRear = 1527;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1527, this->_internal_pdcmcounttotalrear(), target);
  }

  // optional uint32 errorStatusCount = 1729;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1729, this->_internal_errorstatuscount(), target);
  }

  // optional uint32 pdcmCountTotalFront = 2050;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2050, this->_internal_pdcmcounttotalfront(), target);
  }

  // optional uint32 crmCountTotalFront = 2080;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2080, this->_internal_crmcounttotalfront(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional uint32 spiCrcErrorCount = 2420;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2420, this->_internal_spicrcerrorcount(), target);
  }

  // optional uint32 pdcmErrorCountTotalRear = 3301;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3301, this->_internal_pdcmerrorcounttotalrear(), target);
  }

  // optional uint32 crmErrorCountTotalRear = 3637;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3637, this->_internal_crmerrorcounttotalrear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  return target;
}

size_t UsDrvDebugPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_debug_port_bus.UsDrvDebugPortBus busDebug = 1087;
  total_size += 2UL * this->_internal_busdebug_size();
  for (const auto& msg : this->busdebug_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional uint32 crmCountTotalRear = 379;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crmcounttotalrear());
    }

    // optional uint32 spiCommandCount = 813;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spicommandcount());
    }

    // optional uint32 crmErrorCountTotalFront = 941;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crmerrorcounttotalfront());
    }

    // optional uint32 pdcmErrorCountTotalFront = 1007;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmerrorcounttotalfront());
    }

    // optional uint32 pdcmCountTotalRear = 1527;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmcounttotalrear());
    }

    // optional uint32 errorStatusCount = 1729;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errorstatuscount());
    }

    // optional uint32 pdcmCountTotalFront = 2050;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmcounttotalfront());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 crmCountTotalFront = 2080;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crmcounttotalfront());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 spiCrcErrorCount = 2420;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spicrcerrorcount());
    }

    // optional uint32 pdcmErrorCountTotalRear = 3301;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcmerrorcounttotalrear());
    }

    // optional uint32 crmErrorCountTotalRear = 3637;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crmerrorcounttotalrear());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDebugPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDebugPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDebugPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
    MergeFrom(*source);
  }
}

void UsDrvDebugPort::MergeFrom(const UsDrvDebugPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  busdebug_.MergeFrom(from.busdebug_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      crmcounttotalrear_ = from.crmcounttotalrear_;
    }
    if (cached_has_bits & 0x00000004u) {
      spicommandcount_ = from.spicommandcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      crmerrorcounttotalfront_ = from.crmerrorcounttotalfront_;
    }
    if (cached_has_bits & 0x00000010u) {
      pdcmerrorcounttotalfront_ = from.pdcmerrorcounttotalfront_;
    }
    if (cached_has_bits & 0x00000020u) {
      pdcmcounttotalrear_ = from.pdcmcounttotalrear_;
    }
    if (cached_has_bits & 0x00000040u) {
      errorstatuscount_ = from.errorstatuscount_;
    }
    if (cached_has_bits & 0x00000080u) {
      pdcmcounttotalfront_ = from.pdcmcounttotalfront_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      crmcounttotalfront_ = from.crmcounttotalfront_;
    }
    if (cached_has_bits & 0x00000200u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000400u) {
      spicrcerrorcount_ = from.spicrcerrorcount_;
    }
    if (cached_has_bits & 0x00000800u) {
      pdcmerrorcounttotalrear_ = from.pdcmerrorcounttotalrear_;
    }
    if (cached_has_bits & 0x00001000u) {
      crmerrorcounttotalrear_ = from.crmerrorcounttotalrear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvDebugPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDebugPort::CopyFrom(const UsDrvDebugPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDebugPort::IsInitialized() const {
  return true;
}

void UsDrvDebugPort::InternalSwap(UsDrvDebugPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  busdebug_.InternalSwap(&other->busdebug_);
  swap(ssigheader_, other->ssigheader_);
  swap(crmcounttotalrear_, other->crmcounttotalrear_);
  swap(spicommandcount_, other->spicommandcount_);
  swap(crmerrorcounttotalfront_, other->crmerrorcounttotalfront_);
  swap(pdcmerrorcounttotalfront_, other->pdcmerrorcounttotalfront_);
  swap(pdcmcounttotalrear_, other->pdcmcounttotalrear_);
  swap(errorstatuscount_, other->errorstatuscount_);
  swap(pdcmcounttotalfront_, other->pdcmcounttotalfront_);
  swap(crmcounttotalfront_, other->crmcounttotalfront_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(spicrcerrorcount_, other->spicrcerrorcount_);
  swap(pdcmerrorcounttotalrear_, other->pdcmerrorcounttotalrear_);
  swap(crmerrorcounttotalrear_, other->crmerrorcounttotalrear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDebugPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvDebugPort_array_port::InitAsDefaultInstance() {
}
class UsDrvDebugPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvDebugPort_array_port>()._has_bits_);
};

UsDrvDebugPort_array_port::UsDrvDebugPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
}
UsDrvDebugPort_array_port::UsDrvDebugPort_array_port(const UsDrvDebugPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
}

void UsDrvDebugPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvDebugPort_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.base);
}

UsDrvDebugPort_array_port::~UsDrvDebugPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  SharedDtor();
}

void UsDrvDebugPort_array_port::SharedDtor() {
}

void UsDrvDebugPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvDebugPort_array_port& UsDrvDebugPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvDebugPort_array_port_us_5fdrv_2fus_5fdrv_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void UsDrvDebugPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvDebugPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_debug_port.UsDrvDebugPort data = 1631;
      case 1631:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13050>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvDebugPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_debug_port.UsDrvDebugPort data = 1631;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1631, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  return target;
}

size_t UsDrvDebugPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_debug_port.UsDrvDebugPort data = 1631;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvDebugPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvDebugPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvDebugPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
    MergeFrom(*source);
  }
}

void UsDrvDebugPort_array_port::MergeFrom(const UsDrvDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvDebugPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvDebugPort_array_port::CopyFrom(const UsDrvDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_debug_port.UsDrvDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvDebugPort_array_port::IsInitialized() const {
  return true;
}

void UsDrvDebugPort_array_port::InternalSwap(UsDrvDebugPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvDebugPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_debug_port
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_debug_port::UsDrvDebugPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
