// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_sensor_diag_errors.proto

#include "us_drv/us_drv_sensor_diag_errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_sensor_diag_errors {
class UsDrvSensorDiagErrorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSensorDiagErrors> _instance;
} _UsDrvSensorDiagErrors_default_instance_;
class UsDrvSensorDiagErrors_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvSensorDiagErrors_array_port> _instance;
} _UsDrvSensorDiagErrors_array_port_default_instance_;
}  // namespace us_drv_sensor_diag_errors
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sensor_diag_errors::_UsDrvSensorDiagErrors_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto}, {}};

static void InitDefaultsscc_info_UsDrvSensorDiagErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_sensor_diag_errors::_UsDrvSensorDiagErrors_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvSensorDiagErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvSensorDiagErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto}, {
      &scc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, bursterrorflag_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, burstpeakvoltageerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, ringingtimetooshort_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, ringingfreqmeasnotpossible_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, ringingfreqoutofrange_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, tempoutofrange_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, transducervoltagelimitation_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, rawsignaloutoftoleranceduringburst_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, burstlengthoutoftolerance_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, drivervoltagemonitoringerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, overvoltageerrordrv1drv2drvsvdrv_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, vdrvundervoltageerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, vdrvovervoltageerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, vsupundervoltageerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, vsupovervoltageerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, scodeincorrect_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, firingschememissing_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, receivingschememissing_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, pdcmpulseinvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, commandcrcerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, dsi3fccfailed_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors, dsi3synccrmcommandfailed_),
  8,
  15,
  7,
  4,
  16,
  0,
  19,
  1,
  10,
  14,
  9,
  12,
  21,
  17,
  13,
  18,
  5,
  20,
  6,
  3,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors)},
  { 49, 55, sizeof(::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sensor_diag_errors::_UsDrvSensorDiagErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_sensor_diag_errors::_UsDrvSensorDiagErrors_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&us_drv/us_drv_sensor_diag_errors.proto"
  "\022#pb.us_drv.us_drv_sensor_diag_errors\032 u"
  "s_drv/us_drv_error_status.proto\"\221\016\n\025UsDr"
  "vSensorDiagErrors\022H\n\016burstErrorFlag\030\240\n \001"
  "(\0162/.pb.us_drv.us_drv_error_status.UsDrv"
  "ErrorStatus\022O\n\025burstPeakVoltageError\030\247\033 "
  "\001(\0162/.pb.us_drv.us_drv_error_status.UsDr"
  "vErrorStatus\022M\n\023ringingTimeTooShort\030\234\n \001"
  "(\0162/.pb.us_drv.us_drv_error_status.UsDrv"
  "ErrorStatus\022T\n\032ringingFreqMeasNotPossibl"
  "e\030\234\006 \001(\0162/.pb.us_drv.us_drv_error_status"
  ".UsDrvErrorStatus\022O\n\025ringingFreqOutOfRan"
  "ge\030\336\034 \001(\0162/.pb.us_drv.us_drv_error_statu"
  "s.UsDrvErrorStatus\022H\n\016tempOutOfRange\030\255\003 "
  "\001(\0162/.pb.us_drv.us_drv_error_status.UsDr"
  "vErrorStatus\022U\n\033transducerVoltageLimitat"
  "ion\030\321\036 \001(\0162/.pb.us_drv.us_drv_error_stat"
  "us.UsDrvErrorStatus\022\\\n\"rawSignalOutOfTol"
  "eranceDuringBurst\030\320\004 \001(\0162/.pb.us_drv.us_"
  "drv_error_status.UsDrvErrorStatus\022S\n\031bur"
  "stLengthOutOfTolerance\030\345\n \001(\0162/.pb.us_dr"
  "v.us_drv_error_status.UsDrvErrorStatus\022V"
  "\n\034driverVoltageMonitoringError\030\215\033 \001(\0162/."
  "pb.us_drv.us_drv_error_status.UsDrvError"
  "Status\022Z\n overvoltageErrorDrv1Drv2DrvsVd"
  "rv\030\245\n \001(\0162/.pb.us_drv.us_drv_error_statu"
  "s.UsDrvErrorStatus\022O\n\025vdrvUndervoltageEr"
  "ror\030\223\016 \001(\0162/.pb.us_drv.us_drv_error_stat"
  "us.UsDrvErrorStatus\022N\n\024vdrvOvervoltageEr"
  "ror\030\341\037 \001(\0162/.pb.us_drv.us_drv_error_stat"
  "us.UsDrvErrorStatus\022O\n\025vsupUndervoltageE"
  "rror\030\242\035 \001(\0162/.pb.us_drv.us_drv_error_sta"
  "tus.UsDrvErrorStatus\022N\n\024vsupOvervoltageE"
  "rror\030\272\016 \001(\0162/.pb.us_drv.us_drv_error_sta"
  "tus.UsDrvErrorStatus\022H\n\016scodeIncorrect\030\323"
  "\035 \001(\0162/.pb.us_drv.us_drv_error_status.Us"
  "DrvErrorStatus\022M\n\023firingSchemeMissing\030\310\006"
  " \001(\0162/.pb.us_drv.us_drv_error_status.UsD"
  "rvErrorStatus\022P\n\026receivingSchemeMissing\030"
  "\300\037 \001(\0162/.pb.us_drv.us_drv_error_status.U"
  "sDrvErrorStatus\022J\n\020pdcmPulseInvalid\030\256\010 \001"
  "(\0162/.pb.us_drv.us_drv_error_status.UsDrv"
  "ErrorStatus\022I\n\017commandCrcError\030\225\006 \001(\0162/."
  "pb.us_drv.us_drv_error_status.UsDrvError"
  "Status\022G\n\rdsi3FccFailed\030\234\005 \001(\0162/.pb.us_d"
  "rv.us_drv_error_status.UsDrvErrorStatus\022"
  "R\n\030dsi3SyncCrmCommandFailed\030\365\n \001(\0162/.pb."
  "us_drv.us_drv_error_status.UsDrvErrorSta"
  "tus\"l\n UsDrvSensorDiagErrors_array_port\022"
  "H\n\004data\030\033 \003(\0132:.pb.us_drv.us_drv_sensor_"
  "diag_errors.UsDrvSensorDiagErrors"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_deps[1] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5ferror_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_sccs[2] = {
  &scc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.base,
  &scc_info_UsDrvSensorDiagErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto, "us_drv/us_drv_sensor_diag_errors.proto", 2033,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_sensor_diag_errors {

// ===================================================================

void UsDrvSensorDiagErrors::InitAsDefaultInstance() {
}
class UsDrvSensorDiagErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSensorDiagErrors>()._has_bits_);
  static void set_has_bursterrorflag(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_burstpeakvoltageerror(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ringingtimetooshort(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ringingfreqmeasnotpossible(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ringingfreqoutofrange(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tempoutofrange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transducervoltagelimitation(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_rawsignaloutoftoleranceduringburst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_burstlengthoutoftolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_drivervoltagemonitoringerror(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_overvoltageerrordrv1drv2drvsvdrv(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vdrvundervoltageerror(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_vdrvovervoltageerror(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_vsupundervoltageerror(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vsupovervoltageerror(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_scodeincorrect(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_firingschememissing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_receivingschememissing(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_pdcmpulseinvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_commandcrcerror(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dsi3fccfailed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dsi3synccrmcommandfailed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

UsDrvSensorDiagErrors::UsDrvSensorDiagErrors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
}
UsDrvSensorDiagErrors::UsDrvSensorDiagErrors(const UsDrvSensorDiagErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempoutofrange_, &from.tempoutofrange_,
    static_cast<size_t>(reinterpret_cast<char*>(&vdrvovervoltageerror_) -
    reinterpret_cast<char*>(&tempoutofrange_)) + sizeof(vdrvovervoltageerror_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
}

void UsDrvSensorDiagErrors::SharedCtor() {
  ::memset(&tempoutofrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vdrvovervoltageerror_) -
      reinterpret_cast<char*>(&tempoutofrange_)) + sizeof(vdrvovervoltageerror_));
}

UsDrvSensorDiagErrors::~UsDrvSensorDiagErrors() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  SharedDtor();
}

void UsDrvSensorDiagErrors::SharedDtor() {
}

void UsDrvSensorDiagErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSensorDiagErrors& UsDrvSensorDiagErrors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSensorDiagErrors_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSensorDiagErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tempoutofrange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ringingtimetooshort_) -
        reinterpret_cast<char*>(&tempoutofrange_)) + sizeof(ringingtimetooshort_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bursterrorflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&burstpeakvoltageerror_) -
        reinterpret_cast<char*>(&bursterrorflag_)) + sizeof(burstpeakvoltageerror_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&ringingfreqoutofrange_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vdrvovervoltageerror_) -
        reinterpret_cast<char*>(&ringingfreqoutofrange_)) + sizeof(vdrvovervoltageerror_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSensorDiagErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus tempOutOfRange = 429;
      case 429:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_tempoutofrange(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(429, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus rawSignalOutOfToleranceDuringBurst = 592;
      case 592:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_rawsignaloutoftoleranceduringburst(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(592, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3FccFailed = 668;
      case 668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_dsi3fccfailed(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(668, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus commandCrcError = 789;
      case 789:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_commandcrcerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(789, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqMeasNotPossible = 796;
      case 796:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_ringingfreqmeasnotpossible(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(796, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus firingSchemeMissing = 840;
      case 840:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_firingschememissing(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(840, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus pdcmPulseInvalid = 1070;
      case 1070:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_pdcmpulseinvalid(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1070, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingTimeTooShort = 1308;
      case 1308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_ringingtimetooshort(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1308, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstErrorFlag = 1312;
      case 1312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_bursterrorflag(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1312, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus overvoltageErrorDrv1Drv2DrvsVdrv = 1317;
      case 1317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_overvoltageerrordrv1drv2drvsvdrv(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1317, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstLengthOutOfTolerance = 1381;
      case 1381:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_burstlengthoutoftolerance(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1381, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3SyncCrmCommandFailed = 1397;
      case 1397:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_dsi3synccrmcommandfailed(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1397, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvUndervoltageError = 1811;
      case 1811:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_vdrvundervoltageerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1811, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupOvervoltageError = 1850;
      case 1850:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_vsupovervoltageerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1850, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus driverVoltageMonitoringError = 3469;
      case 3469:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_drivervoltagemonitoringerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3469, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstPeakVoltageError = 3495;
      case 3495:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_burstpeakvoltageerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3495, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqOutOfRange = 3678;
      case 3678:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_ringingfreqoutofrange(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3678, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupUndervoltageError = 3746;
      case 3746:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_vsupundervoltageerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3746, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus scodeIncorrect = 3795;
      case 3795:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_scodeincorrect(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3795, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus transducerVoltageLimitation = 3921;
      case 3921:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_transducervoltagelimitation(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3921, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus receivingSchemeMissing = 4032;
      case 4032:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_receivingschememissing(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4032, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvOvervoltageError = 4065;
      case 4065:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_vdrvovervoltageerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4065, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSensorDiagErrors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus tempOutOfRange = 429;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      429, this->_internal_tempoutofrange(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus rawSignalOutOfToleranceDuringBurst = 592;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      592, this->_internal_rawsignaloutoftoleranceduringburst(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3FccFailed = 668;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      668, this->_internal_dsi3fccfailed(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus commandCrcError = 789;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      789, this->_internal_commandcrcerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqMeasNotPossible = 796;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      796, this->_internal_ringingfreqmeasnotpossible(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus firingSchemeMissing = 840;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      840, this->_internal_firingschememissing(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus pdcmPulseInvalid = 1070;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1070, this->_internal_pdcmpulseinvalid(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingTimeTooShort = 1308;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1308, this->_internal_ringingtimetooshort(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstErrorFlag = 1312;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1312, this->_internal_bursterrorflag(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus overvoltageErrorDrv1Drv2DrvsVdrv = 1317;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1317, this->_internal_overvoltageerrordrv1drv2drvsvdrv(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstLengthOutOfTolerance = 1381;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1381, this->_internal_burstlengthoutoftolerance(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3SyncCrmCommandFailed = 1397;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1397, this->_internal_dsi3synccrmcommandfailed(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvUndervoltageError = 1811;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1811, this->_internal_vdrvundervoltageerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupOvervoltageError = 1850;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1850, this->_internal_vsupovervoltageerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus driverVoltageMonitoringError = 3469;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3469, this->_internal_drivervoltagemonitoringerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstPeakVoltageError = 3495;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3495, this->_internal_burstpeakvoltageerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqOutOfRange = 3678;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3678, this->_internal_ringingfreqoutofrange(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupUndervoltageError = 3746;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3746, this->_internal_vsupundervoltageerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus scodeIncorrect = 3795;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3795, this->_internal_scodeincorrect(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus transducerVoltageLimitation = 3921;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3921, this->_internal_transducervoltagelimitation(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus receivingSchemeMissing = 4032;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4032, this->_internal_receivingschememissing(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvOvervoltageError = 4065;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4065, this->_internal_vdrvovervoltageerror(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  return target;
}

size_t UsDrvSensorDiagErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus tempOutOfRange = 429;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tempoutofrange());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus rawSignalOutOfToleranceDuringBurst = 592;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rawsignaloutoftoleranceduringburst());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3FccFailed = 668;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dsi3fccfailed());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus commandCrcError = 789;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commandcrcerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqMeasNotPossible = 796;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ringingfreqmeasnotpossible());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus firingSchemeMissing = 840;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_firingschememissing());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus pdcmPulseInvalid = 1070;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pdcmpulseinvalid());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingTimeTooShort = 1308;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ringingtimetooshort());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstErrorFlag = 1312;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bursterrorflag());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus overvoltageErrorDrv1Drv2DrvsVdrv = 1317;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_overvoltageerrordrv1drv2drvsvdrv());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstLengthOutOfTolerance = 1381;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_burstlengthoutoftolerance());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3SyncCrmCommandFailed = 1397;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dsi3synccrmcommandfailed());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvUndervoltageError = 1811;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vdrvundervoltageerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupOvervoltageError = 1850;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vsupovervoltageerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus driverVoltageMonitoringError = 3469;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_drivervoltagemonitoringerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstPeakVoltageError = 3495;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_burstpeakvoltageerror());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqOutOfRange = 3678;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ringingfreqoutofrange());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupUndervoltageError = 3746;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vsupundervoltageerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus scodeIncorrect = 3795;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scodeincorrect());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus transducerVoltageLimitation = 3921;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transducervoltagelimitation());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus receivingSchemeMissing = 4032;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_receivingschememissing());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvOvervoltageError = 4065;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vdrvovervoltageerror());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSensorDiagErrors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSensorDiagErrors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSensorDiagErrors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
    MergeFrom(*source);
  }
}

void UsDrvSensorDiagErrors::MergeFrom(const UsDrvSensorDiagErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tempoutofrange_ = from.tempoutofrange_;
    }
    if (cached_has_bits & 0x00000002u) {
      rawsignaloutoftoleranceduringburst_ = from.rawsignaloutoftoleranceduringburst_;
    }
    if (cached_has_bits & 0x00000004u) {
      dsi3fccfailed_ = from.dsi3fccfailed_;
    }
    if (cached_has_bits & 0x00000008u) {
      commandcrcerror_ = from.commandcrcerror_;
    }
    if (cached_has_bits & 0x00000010u) {
      ringingfreqmeasnotpossible_ = from.ringingfreqmeasnotpossible_;
    }
    if (cached_has_bits & 0x00000020u) {
      firingschememissing_ = from.firingschememissing_;
    }
    if (cached_has_bits & 0x00000040u) {
      pdcmpulseinvalid_ = from.pdcmpulseinvalid_;
    }
    if (cached_has_bits & 0x00000080u) {
      ringingtimetooshort_ = from.ringingtimetooshort_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bursterrorflag_ = from.bursterrorflag_;
    }
    if (cached_has_bits & 0x00000200u) {
      overvoltageerrordrv1drv2drvsvdrv_ = from.overvoltageerrordrv1drv2drvsvdrv_;
    }
    if (cached_has_bits & 0x00000400u) {
      burstlengthoutoftolerance_ = from.burstlengthoutoftolerance_;
    }
    if (cached_has_bits & 0x00000800u) {
      dsi3synccrmcommandfailed_ = from.dsi3synccrmcommandfailed_;
    }
    if (cached_has_bits & 0x00001000u) {
      vdrvundervoltageerror_ = from.vdrvundervoltageerror_;
    }
    if (cached_has_bits & 0x00002000u) {
      vsupovervoltageerror_ = from.vsupovervoltageerror_;
    }
    if (cached_has_bits & 0x00004000u) {
      drivervoltagemonitoringerror_ = from.drivervoltagemonitoringerror_;
    }
    if (cached_has_bits & 0x00008000u) {
      burstpeakvoltageerror_ = from.burstpeakvoltageerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ringingfreqoutofrange_ = from.ringingfreqoutofrange_;
    }
    if (cached_has_bits & 0x00020000u) {
      vsupundervoltageerror_ = from.vsupundervoltageerror_;
    }
    if (cached_has_bits & 0x00040000u) {
      scodeincorrect_ = from.scodeincorrect_;
    }
    if (cached_has_bits & 0x00080000u) {
      transducervoltagelimitation_ = from.transducervoltagelimitation_;
    }
    if (cached_has_bits & 0x00100000u) {
      receivingschememissing_ = from.receivingschememissing_;
    }
    if (cached_has_bits & 0x00200000u) {
      vdrvovervoltageerror_ = from.vdrvovervoltageerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvSensorDiagErrors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSensorDiagErrors::CopyFrom(const UsDrvSensorDiagErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSensorDiagErrors::IsInitialized() const {
  return true;
}

void UsDrvSensorDiagErrors::InternalSwap(UsDrvSensorDiagErrors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempoutofrange_, other->tempoutofrange_);
  swap(rawsignaloutoftoleranceduringburst_, other->rawsignaloutoftoleranceduringburst_);
  swap(dsi3fccfailed_, other->dsi3fccfailed_);
  swap(commandcrcerror_, other->commandcrcerror_);
  swap(ringingfreqmeasnotpossible_, other->ringingfreqmeasnotpossible_);
  swap(firingschememissing_, other->firingschememissing_);
  swap(pdcmpulseinvalid_, other->pdcmpulseinvalid_);
  swap(ringingtimetooshort_, other->ringingtimetooshort_);
  swap(bursterrorflag_, other->bursterrorflag_);
  swap(overvoltageerrordrv1drv2drvsvdrv_, other->overvoltageerrordrv1drv2drvsvdrv_);
  swap(burstlengthoutoftolerance_, other->burstlengthoutoftolerance_);
  swap(dsi3synccrmcommandfailed_, other->dsi3synccrmcommandfailed_);
  swap(vdrvundervoltageerror_, other->vdrvundervoltageerror_);
  swap(vsupovervoltageerror_, other->vsupovervoltageerror_);
  swap(drivervoltagemonitoringerror_, other->drivervoltagemonitoringerror_);
  swap(burstpeakvoltageerror_, other->burstpeakvoltageerror_);
  swap(ringingfreqoutofrange_, other->ringingfreqoutofrange_);
  swap(vsupundervoltageerror_, other->vsupundervoltageerror_);
  swap(scodeincorrect_, other->scodeincorrect_);
  swap(transducervoltagelimitation_, other->transducervoltagelimitation_);
  swap(receivingschememissing_, other->receivingschememissing_);
  swap(vdrvovervoltageerror_, other->vdrvovervoltageerror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSensorDiagErrors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvSensorDiagErrors_array_port::InitAsDefaultInstance() {
}
class UsDrvSensorDiagErrors_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvSensorDiagErrors_array_port>()._has_bits_);
};

UsDrvSensorDiagErrors_array_port::UsDrvSensorDiagErrors_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
}
UsDrvSensorDiagErrors_array_port::UsDrvSensorDiagErrors_array_port(const UsDrvSensorDiagErrors_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
}

void UsDrvSensorDiagErrors_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvSensorDiagErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.base);
}

UsDrvSensorDiagErrors_array_port::~UsDrvSensorDiagErrors_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  SharedDtor();
}

void UsDrvSensorDiagErrors_array_port::SharedDtor() {
}

void UsDrvSensorDiagErrors_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvSensorDiagErrors_array_port& UsDrvSensorDiagErrors_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvSensorDiagErrors_array_port_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvSensorDiagErrors_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvSensorDiagErrors_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors data = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvSensorDiagErrors_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors data = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  return target;
}

size_t UsDrvSensorDiagErrors_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors data = 27;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvSensorDiagErrors_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvSensorDiagErrors_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvSensorDiagErrors_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
    MergeFrom(*source);
  }
}

void UsDrvSensorDiagErrors_array_port::MergeFrom(const UsDrvSensorDiagErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvSensorDiagErrors_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvSensorDiagErrors_array_port::CopyFrom(const UsDrvSensorDiagErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvSensorDiagErrors_array_port::IsInitialized() const {
  return true;
}

void UsDrvSensorDiagErrors_array_port::InternalSwap(UsDrvSensorDiagErrors_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvSensorDiagErrors_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_sensor_diag_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
