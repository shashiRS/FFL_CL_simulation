// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_crm_mode_errors.proto

#include "us_drv/us_drv_crm_mode_errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvCrmModeErrors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_crm_mode_errors {
class UsDrvCrmModeErrorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvCrmModeErrors> _instance;
} _UsDrvCrmModeErrors_default_instance_;
class UsDrvCrmModeErrors_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsDrvCrmModeErrors_array_port> _instance;
} _UsDrvCrmModeErrors_array_port_default_instance_;
}  // namespace us_drv_crm_mode_errors
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_UsDrvCrmModeErrors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_crm_mode_errors::_UsDrvCrmModeErrors_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsDrvCrmModeErrors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsDrvCrmModeErrors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto}, {}};

static void InitDefaultsscc_info_UsDrvCrmModeErrors_array_port_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_crm_mode_errors::_UsDrvCrmModeErrors_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsDrvCrmModeErrors_array_port_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsDrvCrmModeErrors_array_port_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto}, {
      &scc_info_UsDrvCrmModeErrors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, crmcmdfailure_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, crmcmdfailuredetails_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, dataearlyerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, datalateerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, symbolcounterror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, crcerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, spicmdsequencefailure_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, symbolcodingerror_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, dsipinundervoltage_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors, clkreferror_),
  3,
  5,
  9,
  0,
  7,
  1,
  2,
  6,
  4,
  8,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors)},
  { 25, 31, sizeof(::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_crm_mode_errors::_UsDrvCrmModeErrors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_crm_mode_errors::_UsDrvCrmModeErrors_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#us_drv/us_drv_crm_mode_errors.proto\022 p"
  "b.us_drv.us_drv_crm_mode_errors\032 us_drv/"
  "us_drv_error_status.proto\"\322\005\n\022UsDrvCrmMo"
  "deErrors\022G\n\rcrmCmdFailure\030\277\004 \001(\0162/.pb.us"
  "_drv.us_drv_error_status.UsDrvErrorStatu"
  "s\022\035\n\024crmCmdFailureDetails\030\271\n \001(\r\022H\n\016data"
  "EarlyError\030\356\030 \001(\0162/.pb.us_drv.us_drv_err"
  "or_status.UsDrvErrorStatus\022G\n\rdataLateEr"
  "ror\030\240\002 \001(\0162/.pb.us_drv.us_drv_error_stat"
  "us.UsDrvErrorStatus\022J\n\020symbolCountError\030"
  "\363\023 \001(\0162/.pb.us_drv.us_drv_error_status.U"
  "sDrvErrorStatus\022B\n\010crcError\030\243\002 \001(\0162/.pb."
  "us_drv.us_drv_error_status.UsDrvErrorSta"
  "tus\022O\n\025spiCmdSequenceFailure\030\352\002 \001(\0162/.pb"
  ".us_drv.us_drv_error_status.UsDrvErrorSt"
  "atus\022K\n\021symbolCodingError\030\364\021 \001(\0162/.pb.us"
  "_drv.us_drv_error_status.UsDrvErrorStatu"
  "s\022L\n\022dsiPinUndervoltage\030\374\005 \001(\0162/.pb.us_d"
  "rv.us_drv_error_status.UsDrvErrorStatus\022"
  "E\n\013clkRefError\030\323\027 \001(\0162/.pb.us_drv.us_drv"
  "_error_status.UsDrvErrorStatus\"d\n\035UsDrvC"
  "rmModeErrors_array_port\022C\n\004data\030\325\013 \003(\01324"
  ".pb.us_drv.us_drv_crm_mode_errors.UsDrvC"
  "rmModeErrors"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_deps[1] = {
  &::descriptor_table_us_5fdrv_2fus_5fdrv_5ferror_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_sccs[2] = {
  &scc_info_UsDrvCrmModeErrors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.base,
  &scc_info_UsDrvCrmModeErrors_array_port_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto, "us_drv/us_drv_crm_mode_errors.proto", 932,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_crm_mode_errors {

// ===================================================================

void UsDrvCrmModeErrors::InitAsDefaultInstance() {
}
class UsDrvCrmModeErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvCrmModeErrors>()._has_bits_);
  static void set_has_crmcmdfailure(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crmcmdfailuredetails(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dataearlyerror(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_datalateerror(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbolcounterror(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_crcerror(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spicmdsequencefailure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_symbolcodingerror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dsipinundervoltage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clkreferror(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

UsDrvCrmModeErrors::UsDrvCrmModeErrors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
}
UsDrvCrmModeErrors::UsDrvCrmModeErrors(const UsDrvCrmModeErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datalateerror_, &from.datalateerror_,
    static_cast<size_t>(reinterpret_cast<char*>(&dataearlyerror_) -
    reinterpret_cast<char*>(&datalateerror_)) + sizeof(dataearlyerror_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
}

void UsDrvCrmModeErrors::SharedCtor() {
  ::memset(&datalateerror_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dataearlyerror_) -
      reinterpret_cast<char*>(&datalateerror_)) + sizeof(dataearlyerror_));
}

UsDrvCrmModeErrors::~UsDrvCrmModeErrors() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  SharedDtor();
}

void UsDrvCrmModeErrors::SharedDtor() {
}

void UsDrvCrmModeErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvCrmModeErrors& UsDrvCrmModeErrors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvCrmModeErrors_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvCrmModeErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&datalateerror_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&symbolcounterror_) -
        reinterpret_cast<char*>(&datalateerror_)) + sizeof(symbolcounterror_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&clkreferror_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dataearlyerror_) -
        reinterpret_cast<char*>(&clkreferror_)) + sizeof(dataearlyerror_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvCrmModeErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataLateError = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_datalateerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(288, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crcError = 291;
      case 291:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_crcerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(291, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiCmdSequenceFailure = 362;
      case 362:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_spicmdsequencefailure(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(362, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crmCmdFailure = 575;
      case 575:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_crmcmdfailure(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(575, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiPinUndervoltage = 764;
      case 764:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_dsipinundervoltage(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(764, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 crmCmdFailureDetails = 1337;
      case 1337:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_crmcmdfailuredetails(&has_bits);
          crmcmdfailuredetails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCodingError = 2292;
      case 2292:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_symbolcodingerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2292, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCountError = 2547;
      case 2547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_symbolcounterror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2547, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus clkRefError = 3027;
      case 3027:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_clkreferror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3027, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataEarlyError = 3182;
      case 3182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(val))) {
            _internal_set_dataearlyerror(static_cast<::pb::us_drv::us_drv_error_status::UsDrvErrorStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3182, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvCrmModeErrors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataLateError = 288;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      288, this->_internal_datalateerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crcError = 291;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      291, this->_internal_crcerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiCmdSequenceFailure = 362;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      362, this->_internal_spicmdsequencefailure(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crmCmdFailure = 575;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      575, this->_internal_crmcmdfailure(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiPinUndervoltage = 764;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      764, this->_internal_dsipinundervoltage(), target);
  }

  // optional uint32 crmCmdFailureDetails = 1337;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1337, this->_internal_crmcmdfailuredetails(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCodingError = 2292;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2292, this->_internal_symbolcodingerror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCountError = 2547;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2547, this->_internal_symbolcounterror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus clkRefError = 3027;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3027, this->_internal_clkreferror(), target);
  }

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataEarlyError = 3182;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3182, this->_internal_dataearlyerror(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  return target;
}

size_t UsDrvCrmModeErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataLateError = 288;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datalateerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crcError = 291;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crcerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus spiCmdSequenceFailure = 362;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spicmdsequencefailure());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus crmCmdFailure = 575;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crmcmdfailure());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsiPinUndervoltage = 764;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dsipinundervoltage());
    }

    // optional uint32 crmCmdFailureDetails = 1337;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crmcmdfailuredetails());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCodingError = 2292;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_symbolcodingerror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus symbolCountError = 2547;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_symbolcounterror());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus clkRefError = 3027;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clkreferror());
    }

    // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dataEarlyError = 3182;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dataearlyerror());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvCrmModeErrors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvCrmModeErrors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvCrmModeErrors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
    MergeFrom(*source);
  }
}

void UsDrvCrmModeErrors::MergeFrom(const UsDrvCrmModeErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      datalateerror_ = from.datalateerror_;
    }
    if (cached_has_bits & 0x00000002u) {
      crcerror_ = from.crcerror_;
    }
    if (cached_has_bits & 0x00000004u) {
      spicmdsequencefailure_ = from.spicmdsequencefailure_;
    }
    if (cached_has_bits & 0x00000008u) {
      crmcmdfailure_ = from.crmcmdfailure_;
    }
    if (cached_has_bits & 0x00000010u) {
      dsipinundervoltage_ = from.dsipinundervoltage_;
    }
    if (cached_has_bits & 0x00000020u) {
      crmcmdfailuredetails_ = from.crmcmdfailuredetails_;
    }
    if (cached_has_bits & 0x00000040u) {
      symbolcodingerror_ = from.symbolcodingerror_;
    }
    if (cached_has_bits & 0x00000080u) {
      symbolcounterror_ = from.symbolcounterror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      clkreferror_ = from.clkreferror_;
    }
    if (cached_has_bits & 0x00000200u) {
      dataearlyerror_ = from.dataearlyerror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsDrvCrmModeErrors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvCrmModeErrors::CopyFrom(const UsDrvCrmModeErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvCrmModeErrors::IsInitialized() const {
  return true;
}

void UsDrvCrmModeErrors::InternalSwap(UsDrvCrmModeErrors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(datalateerror_, other->datalateerror_);
  swap(crcerror_, other->crcerror_);
  swap(spicmdsequencefailure_, other->spicmdsequencefailure_);
  swap(crmcmdfailure_, other->crmcmdfailure_);
  swap(dsipinundervoltage_, other->dsipinundervoltage_);
  swap(crmcmdfailuredetails_, other->crmcmdfailuredetails_);
  swap(symbolcodingerror_, other->symbolcodingerror_);
  swap(symbolcounterror_, other->symbolcounterror_);
  swap(clkreferror_, other->clkreferror_);
  swap(dataearlyerror_, other->dataearlyerror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvCrmModeErrors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsDrvCrmModeErrors_array_port::InitAsDefaultInstance() {
}
class UsDrvCrmModeErrors_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsDrvCrmModeErrors_array_port>()._has_bits_);
};

UsDrvCrmModeErrors_array_port::UsDrvCrmModeErrors_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
}
UsDrvCrmModeErrors_array_port::UsDrvCrmModeErrors_array_port(const UsDrvCrmModeErrors_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
}

void UsDrvCrmModeErrors_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsDrvCrmModeErrors_array_port_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.base);
}

UsDrvCrmModeErrors_array_port::~UsDrvCrmModeErrors_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  SharedDtor();
}

void UsDrvCrmModeErrors_array_port::SharedDtor() {
}

void UsDrvCrmModeErrors_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsDrvCrmModeErrors_array_port& UsDrvCrmModeErrors_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsDrvCrmModeErrors_array_port_us_5fdrv_2fus_5fdrv_5fcrm_5fmode_5ferrors_2eproto.base);
  return *internal_default_instance();
}


void UsDrvCrmModeErrors_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsDrvCrmModeErrors_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors data = 1493;
      case 1493:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<11946>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsDrvCrmModeErrors_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors data = 1493;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1493, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  return target;
}

size_t UsDrvCrmModeErrors_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors data = 1493;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsDrvCrmModeErrors_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsDrvCrmModeErrors_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsDrvCrmModeErrors_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
    MergeFrom(*source);
  }
}

void UsDrvCrmModeErrors_array_port::MergeFrom(const UsDrvCrmModeErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsDrvCrmModeErrors_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsDrvCrmModeErrors_array_port::CopyFrom(const UsDrvCrmModeErrors_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_crm_mode_errors.UsDrvCrmModeErrors_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsDrvCrmModeErrors_array_port::IsInitialized() const {
  return true;
}

void UsDrvCrmModeErrors_array_port::InternalSwap(UsDrvCrmModeErrors_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsDrvCrmModeErrors_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_crm_mode_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_crm_mode_errors::UsDrvCrmModeErrors_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
