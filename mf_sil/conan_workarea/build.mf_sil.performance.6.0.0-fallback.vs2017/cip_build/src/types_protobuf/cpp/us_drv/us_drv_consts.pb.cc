// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_consts.proto

#include "us_drv/us_drv_consts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fconsts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_US_DRV_Consts_us_5fdrv_2fus_5fdrv_5fconsts_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_consts {
class US_DRV_ConstsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<US_DRV_Consts> _instance;
} _US_DRV_Consts_default_instance_;
class US_DRV_Consts_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<US_DRV_Consts_array_port> _instance;
} _US_DRV_Consts_array_port_default_instance_;
}  // namespace us_drv_consts
}  // namespace us_drv
}  // namespace pb
static void InitDefaultsscc_info_US_DRV_Consts_us_5fdrv_2fus_5fdrv_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_consts::_US_DRV_Consts_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_consts::US_DRV_Consts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_consts::US_DRV_Consts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_US_DRV_Consts_us_5fdrv_2fus_5fdrv_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_US_DRV_Consts_us_5fdrv_2fus_5fdrv_5fconsts_2eproto}, {}};

static void InitDefaultsscc_info_US_DRV_Consts_array_port_us_5fdrv_2fus_5fdrv_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_drv::us_drv_consts::_US_DRV_Consts_array_port_default_instance_;
    new (ptr) ::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_US_DRV_Consts_array_port_us_5fdrv_2fus_5fdrv_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_US_DRV_Consts_array_port_us_5fdrv_2fus_5fdrv_5fconsts_2eproto}, {
      &scc_info_US_DRV_Consts_us_5fdrv_2fus_5fdrv_5fconsts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fdrv_2fus_5fdrv_5fconsts_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fconsts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fconsts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fdrv_2fus_5fdrv_5fconsts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_asic_command_words_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_sensors_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_stochastic_codes_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_detections_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_signal_paths_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_samples_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_asics_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts, us_drv_max_num_dsi_channels_),
  4,
  2,
  7,
  6,
  1,
  3,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::us_drv::us_drv_consts::US_DRV_Consts)},
  { 21, 27, sizeof(::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_consts::_US_DRV_Consts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_drv::us_drv_consts::_US_DRV_Consts_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fconsts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032us_drv/us_drv_consts.proto\022\027pb.us_drv."
  "us_drv_consts\"\265\002\n\rUS_DRV_Consts\022*\n!US_DR"
  "V_MAX_NUM_ASIC_COMMAND_WORDS\030\215\026 \001(\r\022\037\n\026U"
  "S_DRV_MAX_NUM_SENSORS\030\313\005 \001(\r\022(\n\037US_DRV_M"
  "AX_NUM_STOCHASTIC_CODES\030\346\037 \001(\r\022\"\n\031US_DRV"
  "_MAX_NUM_DETECTIONS\030\315\033 \001(\r\022$\n\033US_DRV_MAX"
  "_NUM_SIGNAL_PATHS\030\204\002 \001(\r\022\037\n\026US_DRV_MAX_N"
  "UM_SAMPLES\030\320\005 \001(\r\022\034\n\024US_DRV_MAX_NUM_ASIC"
  "S\030# \001(\r\022$\n\033US_DRV_MAX_NUM_DSI_CHANNELS\030\372"
  "\027 \001(\r\"Q\n\030US_DRV_Consts_array_port\0225\n\004dat"
  "a\030\342\032 \003(\0132&.pb.us_drv.us_drv_consts.US_DR"
  "V_Consts"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_sccs[2] = {
  &scc_info_US_DRV_Consts_us_5fdrv_2fus_5fdrv_5fconsts_2eproto.base,
  &scc_info_US_DRV_Consts_array_port_us_5fdrv_2fus_5fdrv_5fconsts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_once;
static bool descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto = {
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_initialized, descriptor_table_protodef_us_5fdrv_2fus_5fdrv_5fconsts_2eproto, "us_drv/us_drv_consts.proto", 448,
  &descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_once, descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_sccs, descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fdrv_2fus_5fdrv_5fconsts_2eproto::offsets,
  file_level_metadata_us_5fdrv_2fus_5fdrv_5fconsts_2eproto, 2, file_level_enum_descriptors_us_5fdrv_2fus_5fdrv_5fconsts_2eproto, file_level_service_descriptors_us_5fdrv_2fus_5fdrv_5fconsts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fdrv_2fus_5fdrv_5fconsts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fdrv_2fus_5fdrv_5fconsts_2eproto), true);
namespace pb {
namespace us_drv {
namespace us_drv_consts {

// ===================================================================

void US_DRV_Consts::InitAsDefaultInstance() {
}
class US_DRV_Consts::_Internal {
 public:
  using HasBits = decltype(std::declval<US_DRV_Consts>()._has_bits_);
  static void set_has_us_drv_max_num_asic_command_words(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_us_drv_max_num_sensors(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_us_drv_max_num_stochastic_codes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_us_drv_max_num_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_us_drv_max_num_signal_paths(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_us_drv_max_num_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_us_drv_max_num_asics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_us_drv_max_num_dsi_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

US_DRV_Consts::US_DRV_Consts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_consts.US_DRV_Consts)
}
US_DRV_Consts::US_DRV_Consts(const US_DRV_Consts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&us_drv_max_num_asics_, &from.us_drv_max_num_asics_,
    static_cast<size_t>(reinterpret_cast<char*>(&us_drv_max_num_stochastic_codes_) -
    reinterpret_cast<char*>(&us_drv_max_num_asics_)) + sizeof(us_drv_max_num_stochastic_codes_));
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_consts.US_DRV_Consts)
}

void US_DRV_Consts::SharedCtor() {
  ::memset(&us_drv_max_num_asics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&us_drv_max_num_stochastic_codes_) -
      reinterpret_cast<char*>(&us_drv_max_num_asics_)) + sizeof(us_drv_max_num_stochastic_codes_));
}

US_DRV_Consts::~US_DRV_Consts() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_consts.US_DRV_Consts)
  SharedDtor();
}

void US_DRV_Consts::SharedDtor() {
}

void US_DRV_Consts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const US_DRV_Consts& US_DRV_Consts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_US_DRV_Consts_us_5fdrv_2fus_5fdrv_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void US_DRV_Consts::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_consts.US_DRV_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&us_drv_max_num_asics_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&us_drv_max_num_stochastic_codes_) -
        reinterpret_cast<char*>(&us_drv_max_num_asics_)) + sizeof(us_drv_max_num_stochastic_codes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* US_DRV_Consts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 US_DRV_MAX_NUM_ASICS = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_us_drv_max_num_asics(&has_bits);
          us_drv_max_num_asics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 US_DRV_MAX_NUM_SIGNAL_PATHS = 260;
      case 260:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_us_drv_max_num_signal_paths(&has_bits);
          us_drv_max_num_signal_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 US_DRV_MAX_NUM_SENSORS = 715;
      case 715:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_us_drv_max_num_sensors(&has_bits);
          us_drv_max_num_sensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 US_DRV_MAX_NUM_SAMPLES = 720;
      case 720:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_us_drv_max_num_samples(&has_bits);
          us_drv_max_num_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 US_DRV_MAX_NUM_ASIC_COMMAND_WORDS = 2829;
      case 2829:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_us_drv_max_num_asic_command_words(&has_bits);
          us_drv_max_num_asic_command_words_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 US_DRV_MAX_NUM_DSI_CHANNELS = 3066;
      case 3066:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_us_drv_max_num_dsi_channels(&has_bits);
          us_drv_max_num_dsi_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 US_DRV_MAX_NUM_DETECTIONS = 3533;
      case 3533:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_us_drv_max_num_detections(&has_bits);
          us_drv_max_num_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 US_DRV_MAX_NUM_STOCHASTIC_CODES = 4070;
      case 4070:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_us_drv_max_num_stochastic_codes(&has_bits);
          us_drv_max_num_stochastic_codes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* US_DRV_Consts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_consts.US_DRV_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 US_DRV_MAX_NUM_ASICS = 35;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_us_drv_max_num_asics(), target);
  }

  // optional uint32 US_DRV_MAX_NUM_SIGNAL_PATHS = 260;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(260, this->_internal_us_drv_max_num_signal_paths(), target);
  }

  // optional uint32 US_DRV_MAX_NUM_SENSORS = 715;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(715, this->_internal_us_drv_max_num_sensors(), target);
  }

  // optional uint32 US_DRV_MAX_NUM_SAMPLES = 720;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(720, this->_internal_us_drv_max_num_samples(), target);
  }

  // optional uint32 US_DRV_MAX_NUM_ASIC_COMMAND_WORDS = 2829;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2829, this->_internal_us_drv_max_num_asic_command_words(), target);
  }

  // optional uint32 US_DRV_MAX_NUM_DSI_CHANNELS = 3066;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3066, this->_internal_us_drv_max_num_dsi_channels(), target);
  }

  // optional uint32 US_DRV_MAX_NUM_DETECTIONS = 3533;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3533, this->_internal_us_drv_max_num_detections(), target);
  }

  // optional uint32 US_DRV_MAX_NUM_STOCHASTIC_CODES = 4070;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4070, this->_internal_us_drv_max_num_stochastic_codes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_consts.US_DRV_Consts)
  return target;
}

size_t US_DRV_Consts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_consts.US_DRV_Consts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 US_DRV_MAX_NUM_ASICS = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_asics());
    }

    // optional uint32 US_DRV_MAX_NUM_SIGNAL_PATHS = 260;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_signal_paths());
    }

    // optional uint32 US_DRV_MAX_NUM_SENSORS = 715;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_sensors());
    }

    // optional uint32 US_DRV_MAX_NUM_SAMPLES = 720;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_samples());
    }

    // optional uint32 US_DRV_MAX_NUM_ASIC_COMMAND_WORDS = 2829;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_asic_command_words());
    }

    // optional uint32 US_DRV_MAX_NUM_DSI_CHANNELS = 3066;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_dsi_channels());
    }

    // optional uint32 US_DRV_MAX_NUM_DETECTIONS = 3533;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_detections());
    }

    // optional uint32 US_DRV_MAX_NUM_STOCHASTIC_CODES = 4070;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_us_drv_max_num_stochastic_codes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void US_DRV_Consts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  const US_DRV_Consts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<US_DRV_Consts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_consts.US_DRV_Consts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_consts.US_DRV_Consts)
    MergeFrom(*source);
  }
}

void US_DRV_Consts::MergeFrom(const US_DRV_Consts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      us_drv_max_num_asics_ = from.us_drv_max_num_asics_;
    }
    if (cached_has_bits & 0x00000002u) {
      us_drv_max_num_signal_paths_ = from.us_drv_max_num_signal_paths_;
    }
    if (cached_has_bits & 0x00000004u) {
      us_drv_max_num_sensors_ = from.us_drv_max_num_sensors_;
    }
    if (cached_has_bits & 0x00000008u) {
      us_drv_max_num_samples_ = from.us_drv_max_num_samples_;
    }
    if (cached_has_bits & 0x00000010u) {
      us_drv_max_num_asic_command_words_ = from.us_drv_max_num_asic_command_words_;
    }
    if (cached_has_bits & 0x00000020u) {
      us_drv_max_num_dsi_channels_ = from.us_drv_max_num_dsi_channels_;
    }
    if (cached_has_bits & 0x00000040u) {
      us_drv_max_num_detections_ = from.us_drv_max_num_detections_;
    }
    if (cached_has_bits & 0x00000080u) {
      us_drv_max_num_stochastic_codes_ = from.us_drv_max_num_stochastic_codes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void US_DRV_Consts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void US_DRV_Consts::CopyFrom(const US_DRV_Consts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool US_DRV_Consts::IsInitialized() const {
  return true;
}

void US_DRV_Consts::InternalSwap(US_DRV_Consts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(us_drv_max_num_asics_, other->us_drv_max_num_asics_);
  swap(us_drv_max_num_signal_paths_, other->us_drv_max_num_signal_paths_);
  swap(us_drv_max_num_sensors_, other->us_drv_max_num_sensors_);
  swap(us_drv_max_num_samples_, other->us_drv_max_num_samples_);
  swap(us_drv_max_num_asic_command_words_, other->us_drv_max_num_asic_command_words_);
  swap(us_drv_max_num_dsi_channels_, other->us_drv_max_num_dsi_channels_);
  swap(us_drv_max_num_detections_, other->us_drv_max_num_detections_);
  swap(us_drv_max_num_stochastic_codes_, other->us_drv_max_num_stochastic_codes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata US_DRV_Consts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void US_DRV_Consts_array_port::InitAsDefaultInstance() {
}
class US_DRV_Consts_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<US_DRV_Consts_array_port>()._has_bits_);
};

US_DRV_Consts_array_port::US_DRV_Consts_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
}
US_DRV_Consts_array_port::US_DRV_Consts_array_port(const US_DRV_Consts_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
}

void US_DRV_Consts_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_US_DRV_Consts_array_port_us_5fdrv_2fus_5fdrv_5fconsts_2eproto.base);
}

US_DRV_Consts_array_port::~US_DRV_Consts_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  SharedDtor();
}

void US_DRV_Consts_array_port::SharedDtor() {
}

void US_DRV_Consts_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const US_DRV_Consts_array_port& US_DRV_Consts_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_US_DRV_Consts_array_port_us_5fdrv_2fus_5fdrv_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void US_DRV_Consts_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* US_DRV_Consts_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_drv.us_drv_consts.US_DRV_Consts data = 3426;
      case 3426:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* US_DRV_Consts_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_consts.US_DRV_Consts data = 3426;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3426, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  return target;
}

size_t US_DRV_Consts_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_drv.us_drv_consts.US_DRV_Consts data = 3426;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void US_DRV_Consts_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const US_DRV_Consts_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<US_DRV_Consts_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
    MergeFrom(*source);
  }
}

void US_DRV_Consts_array_port::MergeFrom(const US_DRV_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void US_DRV_Consts_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void US_DRV_Consts_array_port::CopyFrom(const US_DRV_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_drv.us_drv_consts.US_DRV_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool US_DRV_Consts_array_port::IsInitialized() const {
  return true;
}

void US_DRV_Consts_array_port::InternalSwap(US_DRV_Consts_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata US_DRV_Consts_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_drv_consts
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_consts::US_DRV_Consts* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_consts::US_DRV_Consts >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_consts::US_DRV_Consts >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port* Arena::CreateMaybeMessage< ::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_drv::us_drv_consts::US_DRV_Consts_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
