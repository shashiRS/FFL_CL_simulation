// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_drv/us_drv_sensor_diag_errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "us_drv/us_drv_error_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto;
namespace pb {
namespace us_drv {
namespace us_drv_sensor_diag_errors {
class UsDrvSensorDiagErrors;
class UsDrvSensorDiagErrorsDefaultTypeInternal;
extern UsDrvSensorDiagErrorsDefaultTypeInternal _UsDrvSensorDiagErrors_default_instance_;
class UsDrvSensorDiagErrors_array_port;
class UsDrvSensorDiagErrors_array_portDefaultTypeInternal;
extern UsDrvSensorDiagErrors_array_portDefaultTypeInternal _UsDrvSensorDiagErrors_array_port_default_instance_;
}  // namespace us_drv_sensor_diag_errors
}  // namespace us_drv
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors>(Arena*);
template<> ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port* Arena::CreateMaybeMessage<::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace us_drv {
namespace us_drv_sensor_diag_errors {

// ===================================================================

class UsDrvSensorDiagErrors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors) */ {
 public:
  UsDrvSensorDiagErrors();
  virtual ~UsDrvSensorDiagErrors();

  UsDrvSensorDiagErrors(const UsDrvSensorDiagErrors& from);
  UsDrvSensorDiagErrors(UsDrvSensorDiagErrors&& from) noexcept
    : UsDrvSensorDiagErrors() {
    *this = ::std::move(from);
  }

  inline UsDrvSensorDiagErrors& operator=(const UsDrvSensorDiagErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvSensorDiagErrors& operator=(UsDrvSensorDiagErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvSensorDiagErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvSensorDiagErrors* internal_default_instance() {
    return reinterpret_cast<const UsDrvSensorDiagErrors*>(
               &_UsDrvSensorDiagErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UsDrvSensorDiagErrors& a, UsDrvSensorDiagErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvSensorDiagErrors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvSensorDiagErrors* New() const final {
    return CreateMaybeMessage<UsDrvSensorDiagErrors>(nullptr);
  }

  UsDrvSensorDiagErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvSensorDiagErrors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvSensorDiagErrors& from);
  void MergeFrom(const UsDrvSensorDiagErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvSensorDiagErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempOutOfRangeFieldNumber = 429,
    kRawSignalOutOfToleranceDuringBurstFieldNumber = 592,
    kDsi3FccFailedFieldNumber = 668,
    kCommandCrcErrorFieldNumber = 789,
    kRingingFreqMeasNotPossibleFieldNumber = 796,
    kFiringSchemeMissingFieldNumber = 840,
    kPdcmPulseInvalidFieldNumber = 1070,
    kRingingTimeTooShortFieldNumber = 1308,
    kBurstErrorFlagFieldNumber = 1312,
    kOvervoltageErrorDrv1Drv2DrvsVdrvFieldNumber = 1317,
    kBurstLengthOutOfToleranceFieldNumber = 1381,
    kDsi3SyncCrmCommandFailedFieldNumber = 1397,
    kVdrvUndervoltageErrorFieldNumber = 1811,
    kVsupOvervoltageErrorFieldNumber = 1850,
    kDriverVoltageMonitoringErrorFieldNumber = 3469,
    kBurstPeakVoltageErrorFieldNumber = 3495,
    kRingingFreqOutOfRangeFieldNumber = 3678,
    kVsupUndervoltageErrorFieldNumber = 3746,
    kScodeIncorrectFieldNumber = 3795,
    kTransducerVoltageLimitationFieldNumber = 3921,
    kReceivingSchemeMissingFieldNumber = 4032,
    kVdrvOvervoltageErrorFieldNumber = 4065,
  };
  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus tempOutOfRange = 429;
  bool has_tempoutofrange() const;
  private:
  bool _internal_has_tempoutofrange() const;
  public:
  void clear_tempoutofrange();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus tempoutofrange() const;
  void set_tempoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_tempoutofrange() const;
  void _internal_set_tempoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus rawSignalOutOfToleranceDuringBurst = 592;
  bool has_rawsignaloutoftoleranceduringburst() const;
  private:
  bool _internal_has_rawsignaloutoftoleranceduringburst() const;
  public:
  void clear_rawsignaloutoftoleranceduringburst();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus rawsignaloutoftoleranceduringburst() const;
  void set_rawsignaloutoftoleranceduringburst(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_rawsignaloutoftoleranceduringburst() const;
  void _internal_set_rawsignaloutoftoleranceduringburst(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3FccFailed = 668;
  bool has_dsi3fccfailed() const;
  private:
  bool _internal_has_dsi3fccfailed() const;
  public:
  void clear_dsi3fccfailed();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus dsi3fccfailed() const;
  void set_dsi3fccfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_dsi3fccfailed() const;
  void _internal_set_dsi3fccfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus commandCrcError = 789;
  bool has_commandcrcerror() const;
  private:
  bool _internal_has_commandcrcerror() const;
  public:
  void clear_commandcrcerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus commandcrcerror() const;
  void set_commandcrcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_commandcrcerror() const;
  void _internal_set_commandcrcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqMeasNotPossible = 796;
  bool has_ringingfreqmeasnotpossible() const;
  private:
  bool _internal_has_ringingfreqmeasnotpossible() const;
  public:
  void clear_ringingfreqmeasnotpossible();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus ringingfreqmeasnotpossible() const;
  void set_ringingfreqmeasnotpossible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_ringingfreqmeasnotpossible() const;
  void _internal_set_ringingfreqmeasnotpossible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus firingSchemeMissing = 840;
  bool has_firingschememissing() const;
  private:
  bool _internal_has_firingschememissing() const;
  public:
  void clear_firingschememissing();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus firingschememissing() const;
  void set_firingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_firingschememissing() const;
  void _internal_set_firingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus pdcmPulseInvalid = 1070;
  bool has_pdcmpulseinvalid() const;
  private:
  bool _internal_has_pdcmpulseinvalid() const;
  public:
  void clear_pdcmpulseinvalid();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus pdcmpulseinvalid() const;
  void set_pdcmpulseinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_pdcmpulseinvalid() const;
  void _internal_set_pdcmpulseinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingTimeTooShort = 1308;
  bool has_ringingtimetooshort() const;
  private:
  bool _internal_has_ringingtimetooshort() const;
  public:
  void clear_ringingtimetooshort();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus ringingtimetooshort() const;
  void set_ringingtimetooshort(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_ringingtimetooshort() const;
  void _internal_set_ringingtimetooshort(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstErrorFlag = 1312;
  bool has_bursterrorflag() const;
  private:
  bool _internal_has_bursterrorflag() const;
  public:
  void clear_bursterrorflag();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus bursterrorflag() const;
  void set_bursterrorflag(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_bursterrorflag() const;
  void _internal_set_bursterrorflag(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus overvoltageErrorDrv1Drv2DrvsVdrv = 1317;
  bool has_overvoltageerrordrv1drv2drvsvdrv() const;
  private:
  bool _internal_has_overvoltageerrordrv1drv2drvsvdrv() const;
  public:
  void clear_overvoltageerrordrv1drv2drvsvdrv();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus overvoltageerrordrv1drv2drvsvdrv() const;
  void set_overvoltageerrordrv1drv2drvsvdrv(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_overvoltageerrordrv1drv2drvsvdrv() const;
  void _internal_set_overvoltageerrordrv1drv2drvsvdrv(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstLengthOutOfTolerance = 1381;
  bool has_burstlengthoutoftolerance() const;
  private:
  bool _internal_has_burstlengthoutoftolerance() const;
  public:
  void clear_burstlengthoutoftolerance();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus burstlengthoutoftolerance() const;
  void set_burstlengthoutoftolerance(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_burstlengthoutoftolerance() const;
  void _internal_set_burstlengthoutoftolerance(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3SyncCrmCommandFailed = 1397;
  bool has_dsi3synccrmcommandfailed() const;
  private:
  bool _internal_has_dsi3synccrmcommandfailed() const;
  public:
  void clear_dsi3synccrmcommandfailed();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus dsi3synccrmcommandfailed() const;
  void set_dsi3synccrmcommandfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_dsi3synccrmcommandfailed() const;
  void _internal_set_dsi3synccrmcommandfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvUndervoltageError = 1811;
  bool has_vdrvundervoltageerror() const;
  private:
  bool _internal_has_vdrvundervoltageerror() const;
  public:
  void clear_vdrvundervoltageerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus vdrvundervoltageerror() const;
  void set_vdrvundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_vdrvundervoltageerror() const;
  void _internal_set_vdrvundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupOvervoltageError = 1850;
  bool has_vsupovervoltageerror() const;
  private:
  bool _internal_has_vsupovervoltageerror() const;
  public:
  void clear_vsupovervoltageerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus vsupovervoltageerror() const;
  void set_vsupovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_vsupovervoltageerror() const;
  void _internal_set_vsupovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus driverVoltageMonitoringError = 3469;
  bool has_drivervoltagemonitoringerror() const;
  private:
  bool _internal_has_drivervoltagemonitoringerror() const;
  public:
  void clear_drivervoltagemonitoringerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus drivervoltagemonitoringerror() const;
  void set_drivervoltagemonitoringerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_drivervoltagemonitoringerror() const;
  void _internal_set_drivervoltagemonitoringerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstPeakVoltageError = 3495;
  bool has_burstpeakvoltageerror() const;
  private:
  bool _internal_has_burstpeakvoltageerror() const;
  public:
  void clear_burstpeakvoltageerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus burstpeakvoltageerror() const;
  void set_burstpeakvoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_burstpeakvoltageerror() const;
  void _internal_set_burstpeakvoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqOutOfRange = 3678;
  bool has_ringingfreqoutofrange() const;
  private:
  bool _internal_has_ringingfreqoutofrange() const;
  public:
  void clear_ringingfreqoutofrange();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus ringingfreqoutofrange() const;
  void set_ringingfreqoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_ringingfreqoutofrange() const;
  void _internal_set_ringingfreqoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupUndervoltageError = 3746;
  bool has_vsupundervoltageerror() const;
  private:
  bool _internal_has_vsupundervoltageerror() const;
  public:
  void clear_vsupundervoltageerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus vsupundervoltageerror() const;
  void set_vsupundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_vsupundervoltageerror() const;
  void _internal_set_vsupundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus scodeIncorrect = 3795;
  bool has_scodeincorrect() const;
  private:
  bool _internal_has_scodeincorrect() const;
  public:
  void clear_scodeincorrect();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus scodeincorrect() const;
  void set_scodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_scodeincorrect() const;
  void _internal_set_scodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus transducerVoltageLimitation = 3921;
  bool has_transducervoltagelimitation() const;
  private:
  bool _internal_has_transducervoltagelimitation() const;
  public:
  void clear_transducervoltagelimitation();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus transducervoltagelimitation() const;
  void set_transducervoltagelimitation(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_transducervoltagelimitation() const;
  void _internal_set_transducervoltagelimitation(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus receivingSchemeMissing = 4032;
  bool has_receivingschememissing() const;
  private:
  bool _internal_has_receivingschememissing() const;
  public:
  void clear_receivingschememissing();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus receivingschememissing() const;
  void set_receivingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_receivingschememissing() const;
  void _internal_set_receivingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvOvervoltageError = 4065;
  bool has_vdrvovervoltageerror() const;
  private:
  bool _internal_has_vdrvovervoltageerror() const;
  public:
  void clear_vdrvovervoltageerror();
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus vdrvovervoltageerror() const;
  void set_vdrvovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  private:
  ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus _internal_vdrvovervoltageerror() const;
  void _internal_set_vdrvovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int tempoutofrange_;
  int rawsignaloutoftoleranceduringburst_;
  int dsi3fccfailed_;
  int commandcrcerror_;
  int ringingfreqmeasnotpossible_;
  int firingschememissing_;
  int pdcmpulseinvalid_;
  int ringingtimetooshort_;
  int bursterrorflag_;
  int overvoltageerrordrv1drv2drvsvdrv_;
  int burstlengthoutoftolerance_;
  int dsi3synccrmcommandfailed_;
  int vdrvundervoltageerror_;
  int vsupovervoltageerror_;
  int drivervoltagemonitoringerror_;
  int burstpeakvoltageerror_;
  int ringingfreqoutofrange_;
  int vsupundervoltageerror_;
  int scodeincorrect_;
  int transducervoltagelimitation_;
  int receivingschememissing_;
  int vdrvovervoltageerror_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto;
};
// -------------------------------------------------------------------

class UsDrvSensorDiagErrors_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port) */ {
 public:
  UsDrvSensorDiagErrors_array_port();
  virtual ~UsDrvSensorDiagErrors_array_port();

  UsDrvSensorDiagErrors_array_port(const UsDrvSensorDiagErrors_array_port& from);
  UsDrvSensorDiagErrors_array_port(UsDrvSensorDiagErrors_array_port&& from) noexcept
    : UsDrvSensorDiagErrors_array_port() {
    *this = ::std::move(from);
  }

  inline UsDrvSensorDiagErrors_array_port& operator=(const UsDrvSensorDiagErrors_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsDrvSensorDiagErrors_array_port& operator=(UsDrvSensorDiagErrors_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsDrvSensorDiagErrors_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsDrvSensorDiagErrors_array_port* internal_default_instance() {
    return reinterpret_cast<const UsDrvSensorDiagErrors_array_port*>(
               &_UsDrvSensorDiagErrors_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsDrvSensorDiagErrors_array_port& a, UsDrvSensorDiagErrors_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(UsDrvSensorDiagErrors_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsDrvSensorDiagErrors_array_port* New() const final {
    return CreateMaybeMessage<UsDrvSensorDiagErrors_array_port>(nullptr);
  }

  UsDrvSensorDiagErrors_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsDrvSensorDiagErrors_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsDrvSensorDiagErrors_array_port& from);
  void MergeFrom(const UsDrvSensorDiagErrors_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsDrvSensorDiagErrors_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto);
    return ::descriptor_table_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 27,
  };
  // repeated .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors data = 27;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors >*
      mutable_data();
  private:
  const ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors& _internal_data(int index) const;
  ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* _internal_add_data();
  public:
  const ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors& data(int index) const;
  ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors > data_;
  friend struct ::TableStruct_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UsDrvSensorDiagErrors

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstErrorFlag = 1312;
inline bool UsDrvSensorDiagErrors::_internal_has_bursterrorflag() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_bursterrorflag() const {
  return _internal_has_bursterrorflag();
}
inline void UsDrvSensorDiagErrors::clear_bursterrorflag() {
  bursterrorflag_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_bursterrorflag() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(bursterrorflag_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::bursterrorflag() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.burstErrorFlag)
  return _internal_bursterrorflag();
}
inline void UsDrvSensorDiagErrors::_internal_set_bursterrorflag(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  bursterrorflag_ = value;
}
inline void UsDrvSensorDiagErrors::set_bursterrorflag(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_bursterrorflag(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.burstErrorFlag)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstPeakVoltageError = 3495;
inline bool UsDrvSensorDiagErrors::_internal_has_burstpeakvoltageerror() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_burstpeakvoltageerror() const {
  return _internal_has_burstpeakvoltageerror();
}
inline void UsDrvSensorDiagErrors::clear_burstpeakvoltageerror() {
  burstpeakvoltageerror_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_burstpeakvoltageerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(burstpeakvoltageerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::burstpeakvoltageerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.burstPeakVoltageError)
  return _internal_burstpeakvoltageerror();
}
inline void UsDrvSensorDiagErrors::_internal_set_burstpeakvoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  burstpeakvoltageerror_ = value;
}
inline void UsDrvSensorDiagErrors::set_burstpeakvoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_burstpeakvoltageerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.burstPeakVoltageError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingTimeTooShort = 1308;
inline bool UsDrvSensorDiagErrors::_internal_has_ringingtimetooshort() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_ringingtimetooshort() const {
  return _internal_has_ringingtimetooshort();
}
inline void UsDrvSensorDiagErrors::clear_ringingtimetooshort() {
  ringingtimetooshort_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_ringingtimetooshort() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(ringingtimetooshort_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::ringingtimetooshort() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.ringingTimeTooShort)
  return _internal_ringingtimetooshort();
}
inline void UsDrvSensorDiagErrors::_internal_set_ringingtimetooshort(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  ringingtimetooshort_ = value;
}
inline void UsDrvSensorDiagErrors::set_ringingtimetooshort(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_ringingtimetooshort(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.ringingTimeTooShort)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqMeasNotPossible = 796;
inline bool UsDrvSensorDiagErrors::_internal_has_ringingfreqmeasnotpossible() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_ringingfreqmeasnotpossible() const {
  return _internal_has_ringingfreqmeasnotpossible();
}
inline void UsDrvSensorDiagErrors::clear_ringingfreqmeasnotpossible() {
  ringingfreqmeasnotpossible_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_ringingfreqmeasnotpossible() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(ringingfreqmeasnotpossible_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::ringingfreqmeasnotpossible() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.ringingFreqMeasNotPossible)
  return _internal_ringingfreqmeasnotpossible();
}
inline void UsDrvSensorDiagErrors::_internal_set_ringingfreqmeasnotpossible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  ringingfreqmeasnotpossible_ = value;
}
inline void UsDrvSensorDiagErrors::set_ringingfreqmeasnotpossible(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_ringingfreqmeasnotpossible(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.ringingFreqMeasNotPossible)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus ringingFreqOutOfRange = 3678;
inline bool UsDrvSensorDiagErrors::_internal_has_ringingfreqoutofrange() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_ringingfreqoutofrange() const {
  return _internal_has_ringingfreqoutofrange();
}
inline void UsDrvSensorDiagErrors::clear_ringingfreqoutofrange() {
  ringingfreqoutofrange_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_ringingfreqoutofrange() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(ringingfreqoutofrange_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::ringingfreqoutofrange() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.ringingFreqOutOfRange)
  return _internal_ringingfreqoutofrange();
}
inline void UsDrvSensorDiagErrors::_internal_set_ringingfreqoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  ringingfreqoutofrange_ = value;
}
inline void UsDrvSensorDiagErrors::set_ringingfreqoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_ringingfreqoutofrange(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.ringingFreqOutOfRange)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus tempOutOfRange = 429;
inline bool UsDrvSensorDiagErrors::_internal_has_tempoutofrange() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_tempoutofrange() const {
  return _internal_has_tempoutofrange();
}
inline void UsDrvSensorDiagErrors::clear_tempoutofrange() {
  tempoutofrange_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_tempoutofrange() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(tempoutofrange_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::tempoutofrange() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.tempOutOfRange)
  return _internal_tempoutofrange();
}
inline void UsDrvSensorDiagErrors::_internal_set_tempoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  tempoutofrange_ = value;
}
inline void UsDrvSensorDiagErrors::set_tempoutofrange(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_tempoutofrange(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.tempOutOfRange)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus transducerVoltageLimitation = 3921;
inline bool UsDrvSensorDiagErrors::_internal_has_transducervoltagelimitation() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_transducervoltagelimitation() const {
  return _internal_has_transducervoltagelimitation();
}
inline void UsDrvSensorDiagErrors::clear_transducervoltagelimitation() {
  transducervoltagelimitation_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_transducervoltagelimitation() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(transducervoltagelimitation_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::transducervoltagelimitation() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.transducerVoltageLimitation)
  return _internal_transducervoltagelimitation();
}
inline void UsDrvSensorDiagErrors::_internal_set_transducervoltagelimitation(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  transducervoltagelimitation_ = value;
}
inline void UsDrvSensorDiagErrors::set_transducervoltagelimitation(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_transducervoltagelimitation(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.transducerVoltageLimitation)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus rawSignalOutOfToleranceDuringBurst = 592;
inline bool UsDrvSensorDiagErrors::_internal_has_rawsignaloutoftoleranceduringburst() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_rawsignaloutoftoleranceduringburst() const {
  return _internal_has_rawsignaloutoftoleranceduringburst();
}
inline void UsDrvSensorDiagErrors::clear_rawsignaloutoftoleranceduringburst() {
  rawsignaloutoftoleranceduringburst_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_rawsignaloutoftoleranceduringburst() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(rawsignaloutoftoleranceduringburst_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::rawsignaloutoftoleranceduringburst() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.rawSignalOutOfToleranceDuringBurst)
  return _internal_rawsignaloutoftoleranceduringburst();
}
inline void UsDrvSensorDiagErrors::_internal_set_rawsignaloutoftoleranceduringburst(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  rawsignaloutoftoleranceduringburst_ = value;
}
inline void UsDrvSensorDiagErrors::set_rawsignaloutoftoleranceduringburst(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_rawsignaloutoftoleranceduringburst(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.rawSignalOutOfToleranceDuringBurst)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus burstLengthOutOfTolerance = 1381;
inline bool UsDrvSensorDiagErrors::_internal_has_burstlengthoutoftolerance() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_burstlengthoutoftolerance() const {
  return _internal_has_burstlengthoutoftolerance();
}
inline void UsDrvSensorDiagErrors::clear_burstlengthoutoftolerance() {
  burstlengthoutoftolerance_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_burstlengthoutoftolerance() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(burstlengthoutoftolerance_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::burstlengthoutoftolerance() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.burstLengthOutOfTolerance)
  return _internal_burstlengthoutoftolerance();
}
inline void UsDrvSensorDiagErrors::_internal_set_burstlengthoutoftolerance(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  burstlengthoutoftolerance_ = value;
}
inline void UsDrvSensorDiagErrors::set_burstlengthoutoftolerance(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_burstlengthoutoftolerance(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.burstLengthOutOfTolerance)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus driverVoltageMonitoringError = 3469;
inline bool UsDrvSensorDiagErrors::_internal_has_drivervoltagemonitoringerror() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_drivervoltagemonitoringerror() const {
  return _internal_has_drivervoltagemonitoringerror();
}
inline void UsDrvSensorDiagErrors::clear_drivervoltagemonitoringerror() {
  drivervoltagemonitoringerror_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_drivervoltagemonitoringerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(drivervoltagemonitoringerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::drivervoltagemonitoringerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.driverVoltageMonitoringError)
  return _internal_drivervoltagemonitoringerror();
}
inline void UsDrvSensorDiagErrors::_internal_set_drivervoltagemonitoringerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  drivervoltagemonitoringerror_ = value;
}
inline void UsDrvSensorDiagErrors::set_drivervoltagemonitoringerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_drivervoltagemonitoringerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.driverVoltageMonitoringError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus overvoltageErrorDrv1Drv2DrvsVdrv = 1317;
inline bool UsDrvSensorDiagErrors::_internal_has_overvoltageerrordrv1drv2drvsvdrv() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_overvoltageerrordrv1drv2drvsvdrv() const {
  return _internal_has_overvoltageerrordrv1drv2drvsvdrv();
}
inline void UsDrvSensorDiagErrors::clear_overvoltageerrordrv1drv2drvsvdrv() {
  overvoltageerrordrv1drv2drvsvdrv_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_overvoltageerrordrv1drv2drvsvdrv() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(overvoltageerrordrv1drv2drvsvdrv_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::overvoltageerrordrv1drv2drvsvdrv() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.overvoltageErrorDrv1Drv2DrvsVdrv)
  return _internal_overvoltageerrordrv1drv2drvsvdrv();
}
inline void UsDrvSensorDiagErrors::_internal_set_overvoltageerrordrv1drv2drvsvdrv(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  overvoltageerrordrv1drv2drvsvdrv_ = value;
}
inline void UsDrvSensorDiagErrors::set_overvoltageerrordrv1drv2drvsvdrv(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_overvoltageerrordrv1drv2drvsvdrv(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.overvoltageErrorDrv1Drv2DrvsVdrv)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvUndervoltageError = 1811;
inline bool UsDrvSensorDiagErrors::_internal_has_vdrvundervoltageerror() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_vdrvundervoltageerror() const {
  return _internal_has_vdrvundervoltageerror();
}
inline void UsDrvSensorDiagErrors::clear_vdrvundervoltageerror() {
  vdrvundervoltageerror_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_vdrvundervoltageerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(vdrvundervoltageerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::vdrvundervoltageerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vdrvUndervoltageError)
  return _internal_vdrvundervoltageerror();
}
inline void UsDrvSensorDiagErrors::_internal_set_vdrvundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  vdrvundervoltageerror_ = value;
}
inline void UsDrvSensorDiagErrors::set_vdrvundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_vdrvundervoltageerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vdrvUndervoltageError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vdrvOvervoltageError = 4065;
inline bool UsDrvSensorDiagErrors::_internal_has_vdrvovervoltageerror() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_vdrvovervoltageerror() const {
  return _internal_has_vdrvovervoltageerror();
}
inline void UsDrvSensorDiagErrors::clear_vdrvovervoltageerror() {
  vdrvovervoltageerror_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_vdrvovervoltageerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(vdrvovervoltageerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::vdrvovervoltageerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vdrvOvervoltageError)
  return _internal_vdrvovervoltageerror();
}
inline void UsDrvSensorDiagErrors::_internal_set_vdrvovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  vdrvovervoltageerror_ = value;
}
inline void UsDrvSensorDiagErrors::set_vdrvovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_vdrvovervoltageerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vdrvOvervoltageError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupUndervoltageError = 3746;
inline bool UsDrvSensorDiagErrors::_internal_has_vsupundervoltageerror() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_vsupundervoltageerror() const {
  return _internal_has_vsupundervoltageerror();
}
inline void UsDrvSensorDiagErrors::clear_vsupundervoltageerror() {
  vsupundervoltageerror_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_vsupundervoltageerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(vsupundervoltageerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::vsupundervoltageerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vsupUndervoltageError)
  return _internal_vsupundervoltageerror();
}
inline void UsDrvSensorDiagErrors::_internal_set_vsupundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  vsupundervoltageerror_ = value;
}
inline void UsDrvSensorDiagErrors::set_vsupundervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_vsupundervoltageerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vsupUndervoltageError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus vsupOvervoltageError = 1850;
inline bool UsDrvSensorDiagErrors::_internal_has_vsupovervoltageerror() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_vsupovervoltageerror() const {
  return _internal_has_vsupovervoltageerror();
}
inline void UsDrvSensorDiagErrors::clear_vsupovervoltageerror() {
  vsupovervoltageerror_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_vsupovervoltageerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(vsupovervoltageerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::vsupovervoltageerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vsupOvervoltageError)
  return _internal_vsupovervoltageerror();
}
inline void UsDrvSensorDiagErrors::_internal_set_vsupovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  vsupovervoltageerror_ = value;
}
inline void UsDrvSensorDiagErrors::set_vsupovervoltageerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_vsupovervoltageerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.vsupOvervoltageError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus scodeIncorrect = 3795;
inline bool UsDrvSensorDiagErrors::_internal_has_scodeincorrect() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_scodeincorrect() const {
  return _internal_has_scodeincorrect();
}
inline void UsDrvSensorDiagErrors::clear_scodeincorrect() {
  scodeincorrect_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_scodeincorrect() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(scodeincorrect_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::scodeincorrect() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.scodeIncorrect)
  return _internal_scodeincorrect();
}
inline void UsDrvSensorDiagErrors::_internal_set_scodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  scodeincorrect_ = value;
}
inline void UsDrvSensorDiagErrors::set_scodeincorrect(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_scodeincorrect(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.scodeIncorrect)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus firingSchemeMissing = 840;
inline bool UsDrvSensorDiagErrors::_internal_has_firingschememissing() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_firingschememissing() const {
  return _internal_has_firingschememissing();
}
inline void UsDrvSensorDiagErrors::clear_firingschememissing() {
  firingschememissing_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_firingschememissing() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(firingschememissing_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::firingschememissing() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.firingSchemeMissing)
  return _internal_firingschememissing();
}
inline void UsDrvSensorDiagErrors::_internal_set_firingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  firingschememissing_ = value;
}
inline void UsDrvSensorDiagErrors::set_firingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_firingschememissing(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.firingSchemeMissing)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus receivingSchemeMissing = 4032;
inline bool UsDrvSensorDiagErrors::_internal_has_receivingschememissing() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_receivingschememissing() const {
  return _internal_has_receivingschememissing();
}
inline void UsDrvSensorDiagErrors::clear_receivingschememissing() {
  receivingschememissing_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_receivingschememissing() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(receivingschememissing_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::receivingschememissing() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.receivingSchemeMissing)
  return _internal_receivingschememissing();
}
inline void UsDrvSensorDiagErrors::_internal_set_receivingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  receivingschememissing_ = value;
}
inline void UsDrvSensorDiagErrors::set_receivingschememissing(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_receivingschememissing(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.receivingSchemeMissing)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus pdcmPulseInvalid = 1070;
inline bool UsDrvSensorDiagErrors::_internal_has_pdcmpulseinvalid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_pdcmpulseinvalid() const {
  return _internal_has_pdcmpulseinvalid();
}
inline void UsDrvSensorDiagErrors::clear_pdcmpulseinvalid() {
  pdcmpulseinvalid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_pdcmpulseinvalid() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(pdcmpulseinvalid_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::pdcmpulseinvalid() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.pdcmPulseInvalid)
  return _internal_pdcmpulseinvalid();
}
inline void UsDrvSensorDiagErrors::_internal_set_pdcmpulseinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  pdcmpulseinvalid_ = value;
}
inline void UsDrvSensorDiagErrors::set_pdcmpulseinvalid(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_pdcmpulseinvalid(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.pdcmPulseInvalid)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus commandCrcError = 789;
inline bool UsDrvSensorDiagErrors::_internal_has_commandcrcerror() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_commandcrcerror() const {
  return _internal_has_commandcrcerror();
}
inline void UsDrvSensorDiagErrors::clear_commandcrcerror() {
  commandcrcerror_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_commandcrcerror() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(commandcrcerror_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::commandcrcerror() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.commandCrcError)
  return _internal_commandcrcerror();
}
inline void UsDrvSensorDiagErrors::_internal_set_commandcrcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  commandcrcerror_ = value;
}
inline void UsDrvSensorDiagErrors::set_commandcrcerror(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_commandcrcerror(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.commandCrcError)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3FccFailed = 668;
inline bool UsDrvSensorDiagErrors::_internal_has_dsi3fccfailed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_dsi3fccfailed() const {
  return _internal_has_dsi3fccfailed();
}
inline void UsDrvSensorDiagErrors::clear_dsi3fccfailed() {
  dsi3fccfailed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_dsi3fccfailed() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(dsi3fccfailed_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::dsi3fccfailed() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.dsi3FccFailed)
  return _internal_dsi3fccfailed();
}
inline void UsDrvSensorDiagErrors::_internal_set_dsi3fccfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  dsi3fccfailed_ = value;
}
inline void UsDrvSensorDiagErrors::set_dsi3fccfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_dsi3fccfailed(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.dsi3FccFailed)
}

// optional .pb.us_drv.us_drv_error_status.UsDrvErrorStatus dsi3SyncCrmCommandFailed = 1397;
inline bool UsDrvSensorDiagErrors::_internal_has_dsi3synccrmcommandfailed() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UsDrvSensorDiagErrors::has_dsi3synccrmcommandfailed() const {
  return _internal_has_dsi3synccrmcommandfailed();
}
inline void UsDrvSensorDiagErrors::clear_dsi3synccrmcommandfailed() {
  dsi3synccrmcommandfailed_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::_internal_dsi3synccrmcommandfailed() const {
  return static_cast< ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus >(dsi3synccrmcommandfailed_);
}
inline ::pb::us_drv::us_drv_error_status::UsDrvErrorStatus UsDrvSensorDiagErrors::dsi3synccrmcommandfailed() const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.dsi3SyncCrmCommandFailed)
  return _internal_dsi3synccrmcommandfailed();
}
inline void UsDrvSensorDiagErrors::_internal_set_dsi3synccrmcommandfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  assert(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  dsi3synccrmcommandfailed_ = value;
}
inline void UsDrvSensorDiagErrors::set_dsi3synccrmcommandfailed(::pb::us_drv::us_drv_error_status::UsDrvErrorStatus value) {
  _internal_set_dsi3synccrmcommandfailed(value);
  // @@protoc_insertion_point(field_set:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors.dsi3SyncCrmCommandFailed)
}

// -------------------------------------------------------------------

// UsDrvSensorDiagErrors_array_port

// repeated .pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors data = 27;
inline int UsDrvSensorDiagErrors_array_port::_internal_data_size() const {
  return data_.size();
}
inline int UsDrvSensorDiagErrors_array_port::data_size() const {
  return _internal_data_size();
}
inline void UsDrvSensorDiagErrors_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* UsDrvSensorDiagErrors_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors >*
UsDrvSensorDiagErrors_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port.data)
  return &data_;
}
inline const ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors& UsDrvSensorDiagErrors_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors& UsDrvSensorDiagErrors_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port.data)
  return _internal_data(index);
}
inline ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* UsDrvSensorDiagErrors_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors* UsDrvSensorDiagErrors_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::us_drv::us_drv_sensor_diag_errors::UsDrvSensorDiagErrors >&
UsDrvSensorDiagErrors_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.us_drv.us_drv_sensor_diag_errors.UsDrvSensorDiagErrors_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace us_drv_sensor_diag_errors
}  // namespace us_drv
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_us_5fdrv_2fus_5fdrv_5fsensor_5fdiag_5ferrors_2eproto
