// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_reflection_tracking_cfg.proto

#include "us_processing/us_processing_reflection_tracking_cfg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingReflectionTrackingCfg_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_reflection_tracking_cfg {
class UsProcessingReflectionTrackingCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingReflectionTrackingCfg> _instance;
} _UsProcessingReflectionTrackingCfg_default_instance_;
class UsProcessingReflectionTrackingCfg_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingReflectionTrackingCfg_array_port> _instance;
} _UsProcessingReflectionTrackingCfg_array_port_default_instance_;
}  // namespace us_processing_reflection_tracking_cfg
}  // namespace us_processing
}  // namespace pb
static void InitDefaultsscc_info_UsProcessingReflectionTrackingCfg_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_reflection_tracking_cfg::_UsProcessingReflectionTrackingCfg_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingReflectionTrackingCfg_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsProcessingReflectionTrackingCfg_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto}, {}};

static void InitDefaultsscc_info_UsProcessingReflectionTrackingCfg_array_port_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_reflection_tracking_cfg::_UsProcessingReflectionTrackingCfg_array_port_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingReflectionTrackingCfg_array_port_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsProcessingReflectionTrackingCfg_array_port_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto}, {
      &scc_info_UsProcessingReflectionTrackingCfg_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, fovdeviation_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, measurementdistanceuncertainty_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, halflifetime_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, halflifetimemultiplicator_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, unbindtrackerdirsigmaincrease_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, singletrackerrelaxdirsigma_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, singletrackerrelaxrange_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, dualtrackerrelaxdirsigma_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, tripletrackerrelaxdirsigma_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, convexsaturationmaximumincrement_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, convexsaturationincrementlimit_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, convexsaturationincrementmultiplicator_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, rftroutputfilterradiusanglesigma_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, rftroutputfilterconvexsaturationlimit_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, multiplicityfractionacceptance_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, multiplicitymaxradius_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, multiplicitymaxdistancesincelastupdate_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, measurementuncertaintymodifiermax_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, measurementuncertaintymultplier_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg, stabletrackermeasurementnumber_),
  6,
  3,
  5,
  12,
  13,
  19,
  11,
  18,
  14,
  10,
  1,
  8,
  9,
  7,
  16,
  2,
  4,
  15,
  17,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg)},
  { 45, 51, sizeof(::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_reflection_tracking_cfg::_UsProcessingReflectionTrackingCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_reflection_tracking_cfg::_UsProcessingReflectionTrackingCfg_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9us_processing/us_processing_reflection"
  "_tracking_cfg.proto\0226pb.us_processing.us"
  "_processing_reflection_tracking_cfg\"\256\006\n!"
  "UsProcessingReflectionTrackingCfg\022\025\n\014fov"
  "Deviation\030\302\014 \001(\002\022\'\n\036measurementDistanceU"
  "ncertainty\030\214\007 \001(\002\022\025\n\014halfLifeTime\030\257\010 \001(\004"
  "\022\"\n\031halfLifeTimeMultiplicator\030\236\026 \001(\002\022&\n\035"
  "unbindTrackerDirSigmaIncrease\030\243\027 \001(\002\022#\n\032"
  "singleTrackerRelaxDirSigma\030\245\037 \001(\002\022 \n\027sin"
  "gleTrackerRelaxRange\030\270\025 \001(\002\022!\n\030dualTrack"
  "erRelaxDirSigma\030\231\037 \001(\002\022#\n\032tripleTrackerR"
  "elaxDirSigma\030\364\030 \001(\002\022)\n convexSaturationM"
  "aximumIncrement\030\302\022 \001(\002\022\'\n\036convexSaturati"
  "onIncrementLimit\030\220\004 \001(\002\022/\n&convexSaturat"
  "ionIncrementMultiplicator\030\345\017 \001(\002\022)\n rftr"
  "OutputFilterRadiusAngleSigma\030\373\021 \001(\002\022.\n%r"
  "ftrOutputFilterConvexSaturationLimit\030\352\014 "
  "\001(\002\022\'\n\036multiplicityFractionAcceptance\030\335\035"
  " \001(\002\022\036\n\025multiplicityMaxRadius\030\245\004 \001(\002\022/\n&"
  "multiplicityMaxDistanceSinceLastUpdate\030\332"
  "\010 \001(\002\022*\n!measurementUncertaintyModifierM"
  "ax\030\237\034 \001(\002\022(\n\037measurementUncertaintyMultp"
  "lier\030\213\037 \001(\002\022\'\n\036stableTrackerMeasurementN"
  "umber\030\340\037 \001(\r\"\230\001\n,UsProcessingReflectionT"
  "rackingCfg_array_port\022h\n\004data\030\266\006 \003(\0132Y.p"
  "b.us_processing.us_processing_reflection"
  "_tracking_cfg.UsProcessingReflectionTrac"
  "kingCfg"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_sccs[2] = {
  &scc_info_UsProcessingReflectionTrackingCfg_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.base,
  &scc_info_UsProcessingReflectionTrackingCfg_array_port_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_once;
static bool descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto = {
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_initialized, descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto, "us_processing/us_processing_reflection_tracking_cfg.proto", 1087,
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_once, descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_sccs, descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto::offsets,
  file_level_metadata_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto, 2, file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto, file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto), true);
namespace pb {
namespace us_processing {
namespace us_processing_reflection_tracking_cfg {

// ===================================================================

void UsProcessingReflectionTrackingCfg::InitAsDefaultInstance() {
}
class UsProcessingReflectionTrackingCfg::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingReflectionTrackingCfg>()._has_bits_);
  static void set_has_fovdeviation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_measurementdistanceuncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_halflifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_halflifetimemultiplicator(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unbindtrackerdirsigmaincrease(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_singletrackerrelaxdirsigma(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_singletrackerrelaxrange(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dualtrackerrelaxdirsigma(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tripletrackerrelaxdirsigma(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_convexsaturationmaximumincrement(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_convexsaturationincrementlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_convexsaturationincrementmultiplicator(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rftroutputfilterradiusanglesigma(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rftroutputfilterconvexsaturationlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_multiplicityfractionacceptance(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_multiplicitymaxradius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_multiplicitymaxdistancesincelastupdate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_measurementuncertaintymodifiermax(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_measurementuncertaintymultplier(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_stabletrackermeasurementnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UsProcessingReflectionTrackingCfg::UsProcessingReflectionTrackingCfg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
}
UsProcessingReflectionTrackingCfg::UsProcessingReflectionTrackingCfg(const UsProcessingReflectionTrackingCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stabletrackermeasurementnumber_, &from.stabletrackermeasurementnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&singletrackerrelaxdirsigma_) -
    reinterpret_cast<char*>(&stabletrackermeasurementnumber_)) + sizeof(singletrackerrelaxdirsigma_));
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
}

void UsProcessingReflectionTrackingCfg::SharedCtor() {
  ::memset(&stabletrackermeasurementnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&singletrackerrelaxdirsigma_) -
      reinterpret_cast<char*>(&stabletrackermeasurementnumber_)) + sizeof(singletrackerrelaxdirsigma_));
}

UsProcessingReflectionTrackingCfg::~UsProcessingReflectionTrackingCfg() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  SharedDtor();
}

void UsProcessingReflectionTrackingCfg::SharedDtor() {
}

void UsProcessingReflectionTrackingCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingReflectionTrackingCfg& UsProcessingReflectionTrackingCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingReflectionTrackingCfg_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingReflectionTrackingCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&stabletrackermeasurementnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rftroutputfilterconvexsaturationlimit_) -
        reinterpret_cast<char*>(&stabletrackermeasurementnumber_)) + sizeof(rftroutputfilterconvexsaturationlimit_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&convexsaturationincrementmultiplicator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&measurementuncertaintymodifiermax_) -
        reinterpret_cast<char*>(&convexsaturationincrementmultiplicator_)) + sizeof(measurementuncertaintymodifiermax_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&multiplicityfractionacceptance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&singletrackerrelaxdirsigma_) -
        reinterpret_cast<char*>(&multiplicityfractionacceptance_)) + sizeof(singletrackerrelaxdirsigma_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingReflectionTrackingCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float convexSaturationIncrementLimit = 528;
      case 528:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_convexsaturationincrementlimit(&has_bits);
          convexsaturationincrementlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float multiplicityMaxRadius = 549;
      case 549:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_multiplicitymaxradius(&has_bits);
          multiplicitymaxradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float measurementDistanceUncertainty = 908;
      case 908:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_measurementdistanceuncertainty(&has_bits);
          measurementdistanceuncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 halfLifeTime = 1071;
      case 1071:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_halflifetime(&has_bits);
          halflifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float multiplicityMaxDistanceSinceLastUpdate = 1114;
      case 1114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_multiplicitymaxdistancesincelastupdate(&has_bits);
          multiplicitymaxdistancesincelastupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fovDeviation = 1602;
      case 1602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fovdeviation(&has_bits);
          fovdeviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rftrOutputFilterConvexSaturationLimit = 1642;
      case 1642:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_rftroutputfilterconvexsaturationlimit(&has_bits);
          rftroutputfilterconvexsaturationlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float convexSaturationIncrementMultiplicator = 2021;
      case 2021:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_convexsaturationincrementmultiplicator(&has_bits);
          convexsaturationincrementmultiplicator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rftrOutputFilterRadiusAngleSigma = 2299;
      case 2299:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_rftroutputfilterradiusanglesigma(&has_bits);
          rftroutputfilterradiusanglesigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float convexSaturationMaximumIncrement = 2370;
      case 2370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_convexsaturationmaximumincrement(&has_bits);
          convexsaturationmaximumincrement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float singleTrackerRelaxRange = 2744;
      case 2744:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_singletrackerrelaxrange(&has_bits);
          singletrackerrelaxrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float halfLifeTimeMultiplicator = 2846;
      case 2846:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_halflifetimemultiplicator(&has_bits);
          halflifetimemultiplicator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float unbindTrackerDirSigmaIncrease = 2979;
      case 2979:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_unbindtrackerdirsigmaincrease(&has_bits);
          unbindtrackerdirsigmaincrease_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tripleTrackerRelaxDirSigma = 3188;
      case 3188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_tripletrackerrelaxdirsigma(&has_bits);
          tripletrackerrelaxdirsigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float measurementUncertaintyModifierMax = 3615;
      case 3615:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_measurementuncertaintymodifiermax(&has_bits);
          measurementuncertaintymodifiermax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float multiplicityFractionAcceptance = 3805;
      case 3805:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_multiplicityfractionacceptance(&has_bits);
          multiplicityfractionacceptance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float measurementUncertaintyMultplier = 3979;
      case 3979:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_measurementuncertaintymultplier(&has_bits);
          measurementuncertaintymultplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dualTrackerRelaxDirSigma = 3993;
      case 3993:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_dualtrackerrelaxdirsigma(&has_bits);
          dualtrackerrelaxdirsigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float singleTrackerRelaxDirSigma = 4005;
      case 4005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_singletrackerrelaxdirsigma(&has_bits);
          singletrackerrelaxdirsigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 stableTrackerMeasurementNumber = 4064;
      case 4064:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_stabletrackermeasurementnumber(&has_bits);
          stabletrackermeasurementnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingReflectionTrackingCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float convexSaturationIncrementLimit = 528;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(528, this->_internal_convexsaturationincrementlimit(), target);
  }

  // optional float multiplicityMaxRadius = 549;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(549, this->_internal_multiplicitymaxradius(), target);
  }

  // optional float measurementDistanceUncertainty = 908;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(908, this->_internal_measurementdistanceuncertainty(), target);
  }

  // optional uint64 halfLifeTime = 1071;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1071, this->_internal_halflifetime(), target);
  }

  // optional float multiplicityMaxDistanceSinceLastUpdate = 1114;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1114, this->_internal_multiplicitymaxdistancesincelastupdate(), target);
  }

  // optional float fovDeviation = 1602;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1602, this->_internal_fovdeviation(), target);
  }

  // optional float rftrOutputFilterConvexSaturationLimit = 1642;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1642, this->_internal_rftroutputfilterconvexsaturationlimit(), target);
  }

  // optional float convexSaturationIncrementMultiplicator = 2021;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2021, this->_internal_convexsaturationincrementmultiplicator(), target);
  }

  // optional float rftrOutputFilterRadiusAngleSigma = 2299;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2299, this->_internal_rftroutputfilterradiusanglesigma(), target);
  }

  // optional float convexSaturationMaximumIncrement = 2370;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2370, this->_internal_convexsaturationmaximumincrement(), target);
  }

  // optional float singleTrackerRelaxRange = 2744;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2744, this->_internal_singletrackerrelaxrange(), target);
  }

  // optional float halfLifeTimeMultiplicator = 2846;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2846, this->_internal_halflifetimemultiplicator(), target);
  }

  // optional float unbindTrackerDirSigmaIncrease = 2979;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2979, this->_internal_unbindtrackerdirsigmaincrease(), target);
  }

  // optional float tripleTrackerRelaxDirSigma = 3188;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3188, this->_internal_tripletrackerrelaxdirsigma(), target);
  }

  // optional float measurementUncertaintyModifierMax = 3615;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3615, this->_internal_measurementuncertaintymodifiermax(), target);
  }

  // optional float multiplicityFractionAcceptance = 3805;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3805, this->_internal_multiplicityfractionacceptance(), target);
  }

  // optional float measurementUncertaintyMultplier = 3979;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3979, this->_internal_measurementuncertaintymultplier(), target);
  }

  // optional float dualTrackerRelaxDirSigma = 3993;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3993, this->_internal_dualtrackerrelaxdirsigma(), target);
  }

  // optional float singleTrackerRelaxDirSigma = 4005;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4005, this->_internal_singletrackerrelaxdirsigma(), target);
  }

  // optional uint32 stableTrackerMeasurementNumber = 4064;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4064, this->_internal_stabletrackermeasurementnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  return target;
}

size_t UsProcessingReflectionTrackingCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 stableTrackerMeasurementNumber = 4064;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stabletrackermeasurementnumber());
    }

    // optional float convexSaturationIncrementLimit = 528;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float multiplicityMaxRadius = 549;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float measurementDistanceUncertainty = 908;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float multiplicityMaxDistanceSinceLastUpdate = 1114;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional uint64 halfLifeTime = 1071;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_halflifetime());
    }

    // optional float fovDeviation = 1602;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float rftrOutputFilterConvexSaturationLimit = 1642;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float convexSaturationIncrementMultiplicator = 2021;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float rftrOutputFilterRadiusAngleSigma = 2299;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float convexSaturationMaximumIncrement = 2370;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float singleTrackerRelaxRange = 2744;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float halfLifeTimeMultiplicator = 2846;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float unbindTrackerDirSigmaIncrease = 2979;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float tripleTrackerRelaxDirSigma = 3188;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float measurementUncertaintyModifierMax = 3615;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float multiplicityFractionAcceptance = 3805;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float measurementUncertaintyMultplier = 3979;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float dualTrackerRelaxDirSigma = 3993;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float singleTrackerRelaxDirSigma = 4005;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingReflectionTrackingCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingReflectionTrackingCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingReflectionTrackingCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
    MergeFrom(*source);
  }
}

void UsProcessingReflectionTrackingCfg::MergeFrom(const UsProcessingReflectionTrackingCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stabletrackermeasurementnumber_ = from.stabletrackermeasurementnumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      convexsaturationincrementlimit_ = from.convexsaturationincrementlimit_;
    }
    if (cached_has_bits & 0x00000004u) {
      multiplicitymaxradius_ = from.multiplicitymaxradius_;
    }
    if (cached_has_bits & 0x00000008u) {
      measurementdistanceuncertainty_ = from.measurementdistanceuncertainty_;
    }
    if (cached_has_bits & 0x00000010u) {
      multiplicitymaxdistancesincelastupdate_ = from.multiplicitymaxdistancesincelastupdate_;
    }
    if (cached_has_bits & 0x00000020u) {
      halflifetime_ = from.halflifetime_;
    }
    if (cached_has_bits & 0x00000040u) {
      fovdeviation_ = from.fovdeviation_;
    }
    if (cached_has_bits & 0x00000080u) {
      rftroutputfilterconvexsaturationlimit_ = from.rftroutputfilterconvexsaturationlimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      convexsaturationincrementmultiplicator_ = from.convexsaturationincrementmultiplicator_;
    }
    if (cached_has_bits & 0x00000200u) {
      rftroutputfilterradiusanglesigma_ = from.rftroutputfilterradiusanglesigma_;
    }
    if (cached_has_bits & 0x00000400u) {
      convexsaturationmaximumincrement_ = from.convexsaturationmaximumincrement_;
    }
    if (cached_has_bits & 0x00000800u) {
      singletrackerrelaxrange_ = from.singletrackerrelaxrange_;
    }
    if (cached_has_bits & 0x00001000u) {
      halflifetimemultiplicator_ = from.halflifetimemultiplicator_;
    }
    if (cached_has_bits & 0x00002000u) {
      unbindtrackerdirsigmaincrease_ = from.unbindtrackerdirsigmaincrease_;
    }
    if (cached_has_bits & 0x00004000u) {
      tripletrackerrelaxdirsigma_ = from.tripletrackerrelaxdirsigma_;
    }
    if (cached_has_bits & 0x00008000u) {
      measurementuncertaintymodifiermax_ = from.measurementuncertaintymodifiermax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      multiplicityfractionacceptance_ = from.multiplicityfractionacceptance_;
    }
    if (cached_has_bits & 0x00020000u) {
      measurementuncertaintymultplier_ = from.measurementuncertaintymultplier_;
    }
    if (cached_has_bits & 0x00040000u) {
      dualtrackerrelaxdirsigma_ = from.dualtrackerrelaxdirsigma_;
    }
    if (cached_has_bits & 0x00080000u) {
      singletrackerrelaxdirsigma_ = from.singletrackerrelaxdirsigma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsProcessingReflectionTrackingCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingReflectionTrackingCfg::CopyFrom(const UsProcessingReflectionTrackingCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingReflectionTrackingCfg::IsInitialized() const {
  return true;
}

void UsProcessingReflectionTrackingCfg::InternalSwap(UsProcessingReflectionTrackingCfg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stabletrackermeasurementnumber_, other->stabletrackermeasurementnumber_);
  swap(convexsaturationincrementlimit_, other->convexsaturationincrementlimit_);
  swap(multiplicitymaxradius_, other->multiplicitymaxradius_);
  swap(measurementdistanceuncertainty_, other->measurementdistanceuncertainty_);
  swap(multiplicitymaxdistancesincelastupdate_, other->multiplicitymaxdistancesincelastupdate_);
  swap(halflifetime_, other->halflifetime_);
  swap(fovdeviation_, other->fovdeviation_);
  swap(rftroutputfilterconvexsaturationlimit_, other->rftroutputfilterconvexsaturationlimit_);
  swap(convexsaturationincrementmultiplicator_, other->convexsaturationincrementmultiplicator_);
  swap(rftroutputfilterradiusanglesigma_, other->rftroutputfilterradiusanglesigma_);
  swap(convexsaturationmaximumincrement_, other->convexsaturationmaximumincrement_);
  swap(singletrackerrelaxrange_, other->singletrackerrelaxrange_);
  swap(halflifetimemultiplicator_, other->halflifetimemultiplicator_);
  swap(unbindtrackerdirsigmaincrease_, other->unbindtrackerdirsigmaincrease_);
  swap(tripletrackerrelaxdirsigma_, other->tripletrackerrelaxdirsigma_);
  swap(measurementuncertaintymodifiermax_, other->measurementuncertaintymodifiermax_);
  swap(multiplicityfractionacceptance_, other->multiplicityfractionacceptance_);
  swap(measurementuncertaintymultplier_, other->measurementuncertaintymultplier_);
  swap(dualtrackerrelaxdirsigma_, other->dualtrackerrelaxdirsigma_);
  swap(singletrackerrelaxdirsigma_, other->singletrackerrelaxdirsigma_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingReflectionTrackingCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsProcessingReflectionTrackingCfg_array_port::InitAsDefaultInstance() {
}
class UsProcessingReflectionTrackingCfg_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingReflectionTrackingCfg_array_port>()._has_bits_);
};

UsProcessingReflectionTrackingCfg_array_port::UsProcessingReflectionTrackingCfg_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
}
UsProcessingReflectionTrackingCfg_array_port::UsProcessingReflectionTrackingCfg_array_port(const UsProcessingReflectionTrackingCfg_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
}

void UsProcessingReflectionTrackingCfg_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsProcessingReflectionTrackingCfg_array_port_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.base);
}

UsProcessingReflectionTrackingCfg_array_port::~UsProcessingReflectionTrackingCfg_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  SharedDtor();
}

void UsProcessingReflectionTrackingCfg_array_port::SharedDtor() {
}

void UsProcessingReflectionTrackingCfg_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingReflectionTrackingCfg_array_port& UsProcessingReflectionTrackingCfg_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingReflectionTrackingCfg_array_port_us_5fprocessing_2fus_5fprocessing_5freflection_5ftracking_5fcfg_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingReflectionTrackingCfg_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingReflectionTrackingCfg_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg data = 822;
      case 822:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<6578>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingReflectionTrackingCfg_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg data = 822;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(822, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  return target;
}

size_t UsProcessingReflectionTrackingCfg_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg data = 822;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingReflectionTrackingCfg_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingReflectionTrackingCfg_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingReflectionTrackingCfg_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
    MergeFrom(*source);
  }
}

void UsProcessingReflectionTrackingCfg_array_port::MergeFrom(const UsProcessingReflectionTrackingCfg_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsProcessingReflectionTrackingCfg_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingReflectionTrackingCfg_array_port::CopyFrom(const UsProcessingReflectionTrackingCfg_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_reflection_tracking_cfg.UsProcessingReflectionTrackingCfg_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingReflectionTrackingCfg_array_port::IsInitialized() const {
  return true;
}

void UsProcessingReflectionTrackingCfg_array_port::InternalSwap(UsProcessingReflectionTrackingCfg_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingReflectionTrackingCfg_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_processing_reflection_tracking_cfg
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_reflection_tracking_cfg::UsProcessingReflectionTrackingCfg_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
