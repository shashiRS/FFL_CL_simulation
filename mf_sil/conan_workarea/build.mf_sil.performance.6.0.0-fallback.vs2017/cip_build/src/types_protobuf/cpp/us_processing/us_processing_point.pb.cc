// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_point.proto

#include "us_processing/us_processing_point.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingPoint_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_point {
class UsProcessingPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingPoint> _instance;
} _UsProcessingPoint_default_instance_;
class UsProcessingPoint_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingPoint_array_port> _instance;
} _UsProcessingPoint_array_port_default_instance_;
}  // namespace us_processing_point
}  // namespace us_processing
}  // namespace pb
static void InitDefaultsscc_info_UsProcessingPoint_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_point::_UsProcessingPoint_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_point::UsProcessingPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_point::UsProcessingPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingPoint_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsProcessingPoint_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_UsProcessingPoint_array_port_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_point::_UsProcessingPoint_array_port_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_point::UsProcessingPoint_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_point::UsProcessingPoint_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingPoint_array_port_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsProcessingPoint_array_port_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto}, {
      &scc_info_UsProcessingPoint_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, timestamp_us_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, xposition_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, yposition_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, varxposition_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, varyposition_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, xypositioncovar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, directionvariance_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, trackcurvature_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, vartrackcurvature_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, probabilityhigh_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, heightconfidence_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, xsensorpos_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, ysensorpos_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, sensordirection_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, sensormask_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, rawmeasrange_m_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, trackid_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint, pointcountintrack_),
  18,
  1,
  10,
  7,
  0,
  12,
  8,
  9,
  17,
  4,
  14,
  6,
  13,
  11,
  2,
  5,
  15,
  3,
  16,
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_point::UsProcessingPoint_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::pb::us_processing::us_processing_point::UsProcessingPoint)},
  { 43, 49, sizeof(::pb::us_processing::us_processing_point::UsProcessingPoint_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_point::_UsProcessingPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_point::_UsProcessingPoint_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'us_processing/us_processing_point.prot"
  "o\022$pb.us_processing.us_processing_point\""
  "\341\003\n\021UsProcessingPoint\022\025\n\014timestamp_us\030\230\036"
  " \001(\004\022\024\n\013xPosition_m\030\237\003 \001(\002\022\024\n\013yPosition_"
  "m\030\326\023 \001(\002\022\027\n\016varXposition_m\030\206\020 \001(\002\022\026\n\016var"
  "Yposition_m\030O \001(\002\022\032\n\021xyPositionCovar_m\030\222"
  "\024 \001(\002\022\022\n\tdirection\030\355\020 \001(\002\022\032\n\021directionVa"
  "riance\030\254\021 \001(\002\022\027\n\016trackCurvature\030\275\037 \001(\002\022\032"
  "\n\021varTrackCurvature\030\216\014 \001(\002\022\030\n\017probabilit"
  "yHigh\030\312\026 \001(\002\022\031\n\020heightConfidence\030\326\017 \001(\002\022"
  "\025\n\014xSensorPos_m\030\212\025 \001(\002\022\025\n\014ySensorPos_m\030\377"
  "\023 \001(\002\022\030\n\017sensorDirection\030\365\004 \001(\002\022\023\n\nsenso"
  "rMask\030\343\r \001(\r\022\027\n\016rawMeasRange_m\030\341\026 \001(\002\022\020\n"
  "\007trackId\030\221\n \001(\r\022\032\n\021pointCountInTrack\030\314\034 "
  "\001(\r\"f\n\034UsProcessingPoint_array_port\022F\n\004d"
  "ata\030\332\036 \003(\01327.pb.us_processing.us_process"
  "ing_point.UsProcessingPoint"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_sccs[2] = {
  &scc_info_UsProcessingPoint_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.base,
  &scc_info_UsProcessingPoint_array_port_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_once;
static bool descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto = {
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_initialized, descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto, "us_processing/us_processing_point.proto", 667,
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_once, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_sccs, descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto::offsets,
  file_level_metadata_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto, 2, file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto, file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto), true);
namespace pb {
namespace us_processing {
namespace us_processing_point {

// ===================================================================

void UsProcessingPoint::InitAsDefaultInstance() {
}
class UsProcessingPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingPoint>()._has_bits_);
  static void set_has_timestamp_us(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_xposition_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yposition_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_varxposition_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_varyposition_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xypositioncovar_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_directionvariance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_trackcurvature(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vartrackcurvature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_probabilityhigh(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_heightconfidence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_xsensorpos_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ysensorpos_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sensordirection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sensormask(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rawmeasrange_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_trackid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pointcountintrack(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

UsProcessingPoint::UsProcessingPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_point.UsProcessingPoint)
}
UsProcessingPoint::UsProcessingPoint(const UsProcessingPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&varyposition_m_, &from.varyposition_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_us_) -
    reinterpret_cast<char*>(&varyposition_m_)) + sizeof(timestamp_us_));
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_point.UsProcessingPoint)
}

void UsProcessingPoint::SharedCtor() {
  ::memset(&varyposition_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_us_) -
      reinterpret_cast<char*>(&varyposition_m_)) + sizeof(timestamp_us_));
}

UsProcessingPoint::~UsProcessingPoint() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_point.UsProcessingPoint)
  SharedDtor();
}

void UsProcessingPoint::SharedDtor() {
}

void UsProcessingPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingPoint& UsProcessingPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingPoint_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_point.UsProcessingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&varyposition_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&varxposition_m_) -
        reinterpret_cast<char*>(&varyposition_m_)) + sizeof(varxposition_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rawmeasrange_m_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(rawmeasrange_m_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&pointcountintrack_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_us_) -
        reinterpret_cast<char*>(&pointcountintrack_)) + sizeof(timestamp_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float varYposition_m = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_varyposition_m(&has_bits);
          varyposition_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xPosition_m = 415;
      case 415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_xposition_m(&has_bits);
          xposition_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sensorDirection = 629;
      case 629:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_sensordirection(&has_bits);
          sensordirection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 trackId = 1297;
      case 1297:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_trackid(&has_bits);
          trackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float varTrackCurvature = 1550;
      case 1550:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_vartrackcurvature(&has_bits);
          vartrackcurvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 sensorMask = 1763;
      case 1763:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sensormask(&has_bits);
          sensormask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float heightConfidence = 2006;
      case 2006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_heightconfidence(&has_bits);
          heightconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float varXposition_m = 2054;
      case 2054:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_varxposition_m(&has_bits);
          varxposition_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float direction = 2157;
      case 2157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float directionVariance = 2220;
      case 2220:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_directionvariance(&has_bits);
          directionvariance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yPosition_m = 2518;
      case 2518:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_yposition_m(&has_bits);
          yposition_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ySensorPos_m = 2559;
      case 2559:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ysensorpos_m(&has_bits);
          ysensorpos_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xyPositionCovar_m = 2578;
      case 2578:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_xypositioncovar_m(&has_bits);
          xypositioncovar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xSensorPos_m = 2698;
      case 2698:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_xsensorpos_m(&has_bits);
          xsensorpos_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float probabilityHigh = 2890;
      case 2890:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_probabilityhigh(&has_bits);
          probabilityhigh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rawMeasRange_m = 2913;
      case 2913:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_rawmeasrange_m(&has_bits);
          rawmeasrange_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 pointCountInTrack = 3660;
      case 3660:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_pointcountintrack(&has_bits);
          pointcountintrack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp_us = 3864;
      case 3864:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_timestamp_us(&has_bits);
          timestamp_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float trackCurvature = 4029;
      case 4029:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_trackcurvature(&has_bits);
          trackcurvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_point.UsProcessingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float varYposition_m = 79;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(79, this->_internal_varyposition_m(), target);
  }

  // optional float xPosition_m = 415;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(415, this->_internal_xposition_m(), target);
  }

  // optional float sensorDirection = 629;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(629, this->_internal_sensordirection(), target);
  }

  // optional uint32 trackId = 1297;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1297, this->_internal_trackid(), target);
  }

  // optional float varTrackCurvature = 1550;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1550, this->_internal_vartrackcurvature(), target);
  }

  // optional uint32 sensorMask = 1763;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1763, this->_internal_sensormask(), target);
  }

  // optional float heightConfidence = 2006;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2006, this->_internal_heightconfidence(), target);
  }

  // optional float varXposition_m = 2054;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2054, this->_internal_varxposition_m(), target);
  }

  // optional float direction = 2157;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2157, this->_internal_direction(), target);
  }

  // optional float directionVariance = 2220;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2220, this->_internal_directionvariance(), target);
  }

  // optional float yPosition_m = 2518;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2518, this->_internal_yposition_m(), target);
  }

  // optional float ySensorPos_m = 2559;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2559, this->_internal_ysensorpos_m(), target);
  }

  // optional float xyPositionCovar_m = 2578;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2578, this->_internal_xypositioncovar_m(), target);
  }

  // optional float xSensorPos_m = 2698;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2698, this->_internal_xsensorpos_m(), target);
  }

  // optional float probabilityHigh = 2890;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2890, this->_internal_probabilityhigh(), target);
  }

  // optional float rawMeasRange_m = 2913;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2913, this->_internal_rawmeasrange_m(), target);
  }

  // optional uint32 pointCountInTrack = 3660;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3660, this->_internal_pointcountintrack(), target);
  }

  // optional uint64 timestamp_us = 3864;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3864, this->_internal_timestamp_us(), target);
  }

  // optional float trackCurvature = 4029;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4029, this->_internal_trackcurvature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_point.UsProcessingPoint)
  return target;
}

size_t UsProcessingPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_point.UsProcessingPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float varYposition_m = 79;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float xPosition_m = 415;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float sensorDirection = 629;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional uint32 trackId = 1297;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trackid());
    }

    // optional float varTrackCurvature = 1550;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional uint32 sensorMask = 1763;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sensormask());
    }

    // optional float heightConfidence = 2006;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float varXposition_m = 2054;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float direction = 2157;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float directionVariance = 2220;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float yPosition_m = 2518;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float ySensorPos_m = 2559;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float xyPositionCovar_m = 2578;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float xSensorPos_m = 2698;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float probabilityHigh = 2890;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float rawMeasRange_m = 2913;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 pointCountInTrack = 3660;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pointcountintrack());
    }

    // optional float trackCurvature = 4029;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional uint64 timestamp_us = 3864;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp_us());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_point.UsProcessingPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_point.UsProcessingPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_point.UsProcessingPoint)
    MergeFrom(*source);
  }
}

void UsProcessingPoint::MergeFrom(const UsProcessingPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_point.UsProcessingPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      varyposition_m_ = from.varyposition_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      xposition_m_ = from.xposition_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensordirection_ = from.sensordirection_;
    }
    if (cached_has_bits & 0x00000008u) {
      trackid_ = from.trackid_;
    }
    if (cached_has_bits & 0x00000010u) {
      vartrackcurvature_ = from.vartrackcurvature_;
    }
    if (cached_has_bits & 0x00000020u) {
      sensormask_ = from.sensormask_;
    }
    if (cached_has_bits & 0x00000040u) {
      heightconfidence_ = from.heightconfidence_;
    }
    if (cached_has_bits & 0x00000080u) {
      varxposition_m_ = from.varxposition_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      directionvariance_ = from.directionvariance_;
    }
    if (cached_has_bits & 0x00000400u) {
      yposition_m_ = from.yposition_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ysensorpos_m_ = from.ysensorpos_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      xypositioncovar_m_ = from.xypositioncovar_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      xsensorpos_m_ = from.xsensorpos_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      probabilityhigh_ = from.probabilityhigh_;
    }
    if (cached_has_bits & 0x00008000u) {
      rawmeasrange_m_ = from.rawmeasrange_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      pointcountintrack_ = from.pointcountintrack_;
    }
    if (cached_has_bits & 0x00020000u) {
      trackcurvature_ = from.trackcurvature_;
    }
    if (cached_has_bits & 0x00040000u) {
      timestamp_us_ = from.timestamp_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsProcessingPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_point.UsProcessingPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingPoint::CopyFrom(const UsProcessingPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_point.UsProcessingPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingPoint::IsInitialized() const {
  return true;
}

void UsProcessingPoint::InternalSwap(UsProcessingPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(varyposition_m_, other->varyposition_m_);
  swap(xposition_m_, other->xposition_m_);
  swap(sensordirection_, other->sensordirection_);
  swap(trackid_, other->trackid_);
  swap(vartrackcurvature_, other->vartrackcurvature_);
  swap(sensormask_, other->sensormask_);
  swap(heightconfidence_, other->heightconfidence_);
  swap(varxposition_m_, other->varxposition_m_);
  swap(direction_, other->direction_);
  swap(directionvariance_, other->directionvariance_);
  swap(yposition_m_, other->yposition_m_);
  swap(ysensorpos_m_, other->ysensorpos_m_);
  swap(xypositioncovar_m_, other->xypositioncovar_m_);
  swap(xsensorpos_m_, other->xsensorpos_m_);
  swap(probabilityhigh_, other->probabilityhigh_);
  swap(rawmeasrange_m_, other->rawmeasrange_m_);
  swap(pointcountintrack_, other->pointcountintrack_);
  swap(trackcurvature_, other->trackcurvature_);
  swap(timestamp_us_, other->timestamp_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsProcessingPoint_array_port::InitAsDefaultInstance() {
}
class UsProcessingPoint_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingPoint_array_port>()._has_bits_);
};

UsProcessingPoint_array_port::UsProcessingPoint_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
}
UsProcessingPoint_array_port::UsProcessingPoint_array_port(const UsProcessingPoint_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
}

void UsProcessingPoint_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsProcessingPoint_array_port_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.base);
}

UsProcessingPoint_array_port::~UsProcessingPoint_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  SharedDtor();
}

void UsProcessingPoint_array_port::SharedDtor() {
}

void UsProcessingPoint_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingPoint_array_port& UsProcessingPoint_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingPoint_array_port_us_5fprocessing_2fus_5fprocessing_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingPoint_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingPoint_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_processing.us_processing_point.UsProcessingPoint data = 3930;
      case 3930:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingPoint_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_point.UsProcessingPoint data = 3930;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3930, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  return target;
}

size_t UsProcessingPoint_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_point.UsProcessingPoint data = 3930;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingPoint_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingPoint_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingPoint_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
    MergeFrom(*source);
  }
}

void UsProcessingPoint_array_port::MergeFrom(const UsProcessingPoint_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsProcessingPoint_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingPoint_array_port::CopyFrom(const UsProcessingPoint_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_point.UsProcessingPoint_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingPoint_array_port::IsInitialized() const {
  return true;
}

void UsProcessingPoint_array_port::InternalSwap(UsProcessingPoint_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingPoint_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_processing_point
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_point::UsProcessingPoint* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_point::UsProcessingPoint >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_point::UsProcessingPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_point::UsProcessingPoint_array_port* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_point::UsProcessingPoint_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_point::UsProcessingPoint_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
