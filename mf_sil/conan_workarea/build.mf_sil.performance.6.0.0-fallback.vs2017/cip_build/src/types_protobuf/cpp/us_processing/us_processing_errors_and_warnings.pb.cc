// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: us_processing/us_processing_errors_and_warnings.proto

#include "us_processing/us_processing_errors_and_warnings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingErrorsAndWarnings_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto;
namespace pb {
namespace us_processing {
namespace us_processing_errors_and_warnings {
class UsProcessingErrorsAndWarningsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingErrorsAndWarnings> _instance;
} _UsProcessingErrorsAndWarnings_default_instance_;
class UsProcessingErrorsAndWarnings_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UsProcessingErrorsAndWarnings_array_port> _instance;
} _UsProcessingErrorsAndWarnings_array_port_default_instance_;
}  // namespace us_processing_errors_and_warnings
}  // namespace us_processing
}  // namespace pb
static void InitDefaultsscc_info_UsProcessingErrorsAndWarnings_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_errors_and_warnings::_UsProcessingErrorsAndWarnings_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UsProcessingErrorsAndWarnings_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UsProcessingErrorsAndWarnings_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto}, {}};

static void InitDefaultsscc_info_UsProcessingErrorsAndWarnings_array_port_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::us_processing::us_processing_errors_and_warnings::_UsProcessingErrorsAndWarnings_array_port_default_instance_;
    new (ptr) ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UsProcessingErrorsAndWarnings_array_port_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UsProcessingErrorsAndWarnings_array_port_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto}, {
      &scc_info_UsProcessingErrorsAndWarnings_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, lasterrorsts_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, lastwarnsts_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, usperrors_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, stcfgwarnings_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, dyncfgwarnings_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, inputwarnings_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, sensorwarnings_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings, outputwarnings_),
  4,
  7,
  6,
  0,
  3,
  2,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings)},
  { 21, 27, sizeof(::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_errors_and_warnings::_UsProcessingErrorsAndWarnings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::us_processing::us_processing_errors_and_warnings::_UsProcessingErrorsAndWarnings_array_port_default_instance_),
};

const char descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5us_processing/us_processing_errors_and"
  "_warnings.proto\0222pb.us_processing.us_pro"
  "cessing_errors_and_warnings\"\333\001\n\035UsProces"
  "singErrorsAndWarnings\022\025\n\014lastErrorsTs\030\234\020"
  " \001(\004\022\024\n\013lastWarnsTs\030\207\036 \001(\004\022\022\n\tuspErrors\030"
  "\311\027 \001(\r\022\026\n\rstCfgWarnings\030\205\010 \001(\r\022\027\n\016dynCfg"
  "Warnings\030\306\013 \001(\r\022\026\n\rinputWarnings\030\341\n \001(\r\022"
  "\027\n\016sensorWarnings\030\217\n \001(\r\022\027\n\016outputWarnin"
  "gs\030\265\027 \001(\r\"\214\001\n(UsProcessingErrorsAndWarni"
  "ngs_array_port\022`\n\004data\030\353\014 \003(\0132Q.pb.us_pr"
  "ocessing.us_processing_errors_and_warnin"
  "gs.UsProcessingErrorsAndWarnings"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_sccs[2] = {
  &scc_info_UsProcessingErrorsAndWarnings_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto.base,
  &scc_info_UsProcessingErrorsAndWarnings_array_port_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_once;
static bool descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto = {
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_initialized, descriptor_table_protodef_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto, "us_processing/us_processing_errors_and_warnings.proto", 472,
  &descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_once, descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_sccs, descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto::offsets,
  file_level_metadata_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto, 2, file_level_enum_descriptors_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto, file_level_service_descriptors_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto), true);
namespace pb {
namespace us_processing {
namespace us_processing_errors_and_warnings {

// ===================================================================

void UsProcessingErrorsAndWarnings::InitAsDefaultInstance() {
}
class UsProcessingErrorsAndWarnings::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingErrorsAndWarnings>()._has_bits_);
  static void set_has_lasterrorsts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lastwarnsts(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_usperrors(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stcfgwarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dyncfgwarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inputwarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sensorwarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_outputwarnings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

UsProcessingErrorsAndWarnings::UsProcessingErrorsAndWarnings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
}
UsProcessingErrorsAndWarnings::UsProcessingErrorsAndWarnings(const UsProcessingErrorsAndWarnings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stcfgwarnings_, &from.stcfgwarnings_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastwarnsts_) -
    reinterpret_cast<char*>(&stcfgwarnings_)) + sizeof(lastwarnsts_));
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
}

void UsProcessingErrorsAndWarnings::SharedCtor() {
  ::memset(&stcfgwarnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastwarnsts_) -
      reinterpret_cast<char*>(&stcfgwarnings_)) + sizeof(lastwarnsts_));
}

UsProcessingErrorsAndWarnings::~UsProcessingErrorsAndWarnings() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  SharedDtor();
}

void UsProcessingErrorsAndWarnings::SharedDtor() {
}

void UsProcessingErrorsAndWarnings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingErrorsAndWarnings& UsProcessingErrorsAndWarnings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingErrorsAndWarnings_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingErrorsAndWarnings::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&stcfgwarnings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastwarnsts_) -
        reinterpret_cast<char*>(&stcfgwarnings_)) + sizeof(lastwarnsts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingErrorsAndWarnings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stCfgWarnings = 1029;
      case 1029:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stcfgwarnings(&has_bits);
          stcfgwarnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sensorWarnings = 1295;
      case 1295:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_sensorwarnings(&has_bits);
          sensorwarnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 inputWarnings = 1377;
      case 1377:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_inputwarnings(&has_bits);
          inputwarnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dynCfgWarnings = 1478;
      case 1478:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dyncfgwarnings(&has_bits);
          dyncfgwarnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lastErrorsTs = 2076;
      case 2076:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_lasterrorsts(&has_bits);
          lasterrorsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 outputWarnings = 2997;
      case 2997:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_outputwarnings(&has_bits);
          outputwarnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uspErrors = 3017;
      case 3017:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_usperrors(&has_bits);
          usperrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lastWarnsTs = 3847;
      case 3847:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lastwarnsts(&has_bits);
          lastwarnsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingErrorsAndWarnings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stCfgWarnings = 1029;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1029, this->_internal_stcfgwarnings(), target);
  }

  // optional uint32 sensorWarnings = 1295;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1295, this->_internal_sensorwarnings(), target);
  }

  // optional uint32 inputWarnings = 1377;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1377, this->_internal_inputwarnings(), target);
  }

  // optional uint32 dynCfgWarnings = 1478;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1478, this->_internal_dyncfgwarnings(), target);
  }

  // optional uint64 lastErrorsTs = 2076;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2076, this->_internal_lasterrorsts(), target);
  }

  // optional uint32 outputWarnings = 2997;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2997, this->_internal_outputwarnings(), target);
  }

  // optional uint32 uspErrors = 3017;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3017, this->_internal_usperrors(), target);
  }

  // optional uint64 lastWarnsTs = 3847;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3847, this->_internal_lastwarnsts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  return target;
}

size_t UsProcessingErrorsAndWarnings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 stCfgWarnings = 1029;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stcfgwarnings());
    }

    // optional uint32 sensorWarnings = 1295;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sensorwarnings());
    }

    // optional uint32 inputWarnings = 1377;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inputwarnings());
    }

    // optional uint32 dynCfgWarnings = 1478;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dyncfgwarnings());
    }

    // optional uint64 lastErrorsTs = 2076;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lasterrorsts());
    }

    // optional uint32 outputWarnings = 2997;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outputwarnings());
    }

    // optional uint32 uspErrors = 3017;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usperrors());
    }

    // optional uint64 lastWarnsTs = 3847;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lastwarnsts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingErrorsAndWarnings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingErrorsAndWarnings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingErrorsAndWarnings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
    MergeFrom(*source);
  }
}

void UsProcessingErrorsAndWarnings::MergeFrom(const UsProcessingErrorsAndWarnings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stcfgwarnings_ = from.stcfgwarnings_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensorwarnings_ = from.sensorwarnings_;
    }
    if (cached_has_bits & 0x00000004u) {
      inputwarnings_ = from.inputwarnings_;
    }
    if (cached_has_bits & 0x00000008u) {
      dyncfgwarnings_ = from.dyncfgwarnings_;
    }
    if (cached_has_bits & 0x00000010u) {
      lasterrorsts_ = from.lasterrorsts_;
    }
    if (cached_has_bits & 0x00000020u) {
      outputwarnings_ = from.outputwarnings_;
    }
    if (cached_has_bits & 0x00000040u) {
      usperrors_ = from.usperrors_;
    }
    if (cached_has_bits & 0x00000080u) {
      lastwarnsts_ = from.lastwarnsts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UsProcessingErrorsAndWarnings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingErrorsAndWarnings::CopyFrom(const UsProcessingErrorsAndWarnings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingErrorsAndWarnings::IsInitialized() const {
  return true;
}

void UsProcessingErrorsAndWarnings::InternalSwap(UsProcessingErrorsAndWarnings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stcfgwarnings_, other->stcfgwarnings_);
  swap(sensorwarnings_, other->sensorwarnings_);
  swap(inputwarnings_, other->inputwarnings_);
  swap(dyncfgwarnings_, other->dyncfgwarnings_);
  swap(lasterrorsts_, other->lasterrorsts_);
  swap(outputwarnings_, other->outputwarnings_);
  swap(usperrors_, other->usperrors_);
  swap(lastwarnsts_, other->lastwarnsts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingErrorsAndWarnings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UsProcessingErrorsAndWarnings_array_port::InitAsDefaultInstance() {
}
class UsProcessingErrorsAndWarnings_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<UsProcessingErrorsAndWarnings_array_port>()._has_bits_);
};

UsProcessingErrorsAndWarnings_array_port::UsProcessingErrorsAndWarnings_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
}
UsProcessingErrorsAndWarnings_array_port::UsProcessingErrorsAndWarnings_array_port(const UsProcessingErrorsAndWarnings_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
}

void UsProcessingErrorsAndWarnings_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UsProcessingErrorsAndWarnings_array_port_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto.base);
}

UsProcessingErrorsAndWarnings_array_port::~UsProcessingErrorsAndWarnings_array_port() {
  // @@protoc_insertion_point(destructor:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  SharedDtor();
}

void UsProcessingErrorsAndWarnings_array_port::SharedDtor() {
}

void UsProcessingErrorsAndWarnings_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UsProcessingErrorsAndWarnings_array_port& UsProcessingErrorsAndWarnings_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UsProcessingErrorsAndWarnings_array_port_us_5fprocessing_2fus_5fprocessing_5ferrors_5fand_5fwarnings_2eproto.base);
  return *internal_default_instance();
}


void UsProcessingErrorsAndWarnings_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UsProcessingErrorsAndWarnings_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings data = 1643;
      case 1643:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsProcessingErrorsAndWarnings_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings data = 1643;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1643, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  return target;
}

size_t UsProcessingErrorsAndWarnings_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings data = 1643;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UsProcessingErrorsAndWarnings_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const UsProcessingErrorsAndWarnings_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UsProcessingErrorsAndWarnings_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
    MergeFrom(*source);
  }
}

void UsProcessingErrorsAndWarnings_array_port::MergeFrom(const UsProcessingErrorsAndWarnings_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UsProcessingErrorsAndWarnings_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsProcessingErrorsAndWarnings_array_port::CopyFrom(const UsProcessingErrorsAndWarnings_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.us_processing.us_processing_errors_and_warnings.UsProcessingErrorsAndWarnings_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsProcessingErrorsAndWarnings_array_port::IsInitialized() const {
  return true;
}

void UsProcessingErrorsAndWarnings_array_port::InternalSwap(UsProcessingErrorsAndWarnings_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsProcessingErrorsAndWarnings_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace us_processing_errors_and_warnings
}  // namespace us_processing
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port* Arena::CreateMaybeMessage< ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::us_processing::us_processing_errors_and_warnings::UsProcessingErrorsAndWarnings_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
