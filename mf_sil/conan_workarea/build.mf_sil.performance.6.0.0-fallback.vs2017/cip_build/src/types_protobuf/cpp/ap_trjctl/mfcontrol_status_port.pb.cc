// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/mfcontrol_status_port.proto

#include "ap_trjctl/mfcontrol_status_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_trjctl {
namespace mfcontrol_status_port {
class MFControlStatusPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MFControlStatusPort> _instance;
} _MFControlStatusPort_default_instance_;
class MFControlStatusPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MFControlStatusPort_array_port> _instance;
} _MFControlStatusPort_array_port_default_instance_;
}  // namespace mfcontrol_status_port
}  // namespace ap_trjctl
}  // namespace pb
static void InitDefaultsscc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::mfcontrol_status_port::_MFControlStatusPort_default_instance_;
    new (ptr) ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_MFControlStatusPort_array_port_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::mfcontrol_status_port::_MFControlStatusPort_array_port_default_instance_;
    new (ptr) ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MFControlStatusPort_array_port_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MFControlStatusPort_array_port_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto}, {
      &scc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, numusedctrlpoints_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, lodmchandshakefailedstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, ladmchandshakefailedstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, correctgearengaged_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, longitudinalcontrolfinished_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, lateralcontrolfinished_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, longitudinalcontrolfailed_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, lateralpathcontrolfailed_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, longitudinalpathcontrolfailed_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, lateralcontrolfailed_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, longitudinalcontrolsaturated_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, lateralcontrolsaturationstatus_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, vehstandstillhold_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, vehstandstillsecured_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort, driversteerintervdetected_nu_),
  10,
  0,
  11,
  16,
  4,
  12,
  13,
  14,
  15,
  6,
  7,
  8,
  9,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort)},
  { 39, 45, sizeof(::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::mfcontrol_status_port::_MFControlStatusPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::mfcontrol_status_port::_MFControlStatusPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%ap_trjctl/mfcontrol_status_port.proto\022"
  "\"pb.ap_trjctl.mfcontrol_status_port\032\027eco"
  "/signal_header.proto\032-ap_trjctl/lodmc_ha"
  "ndshake_failed_status.proto\032-ap_trjctl/l"
  "admc_handshake_failed_status.proto\0321ap_t"
  "rjctl/lateral_control_saturation_status."
  "proto\"\374\006\n\023MFControlStatusPort\022\030\n\017uiVersi"
  "onNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".p"
  "b.eco.signal_header.SignalHeader\022\035\n\024numU"
  "sedCtrlPoints_nu\030\227\021 \001(\r\022n\n\035lodmcHandshak"
  "eFailedStatus_nu\030\206\026 \001(\0162F.pb.ap_trjctl.l"
  "odmc_handshake_failed_status.LodmcHandsh"
  "akeFailedStatus\022n\n\035ladmcHandshakeFailedS"
  "tatus_nu\030\222\013 \001(\0162F.pb.ap_trjctl.ladmc_han"
  "dshake_failed_status.LadmcHandshakeFaile"
  "dStatus\022\036\n\025correctGearEngaged_nu\030\322\014 \001(\010\022"
  "\'\n\036longitudinalControlFinished_nu\030\273\026 \001(\010"
  "\022\"\n\031lateralControlFinished_nu\030\314\030 \001(\010\022%\n\034"
  "longitudinalControlFailed_nu\030\306\021 \001(\010\022$\n\033l"
  "ateralPathControlFailed_nu\030\376\032 \001(\010\022)\n lon"
  "gitudinalPathControlFailed_nu\030\300\005 \001(\010\022 \n\027"
  "lateralControlFailed_nu\030\236\014 \001(\010\022(\n\037longit"
  "udinalControlSaturated_nu\030\210\003 \001(\010\022z\n!late"
  "ralControlSaturationStatus_nu\030\263\013 \001(\0162N.p"
  "b.ap_trjctl.lateral_control_saturation_s"
  "tatus.LateralControlSaturationStatus\022\035\n\024"
  "vehStandstillHold_nu\030\212\023 \001(\010\022 \n\027vehStands"
  "tillSecured_nu\030\250\010 \001(\010\022%\n\034driverSteerInte"
  "rvDetected_nu\030\227\003 \001(\010\"h\n\036MFControlStatusP"
  "ort_array_port\022F\n\004data\030\300\030 \003(\01327.pb.ap_tr"
  "jctl.mfcontrol_status_port.MFControlStat"
  "usPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_deps[4] = {
  &::descriptor_table_ap_5ftrjctl_2fladmc_5fhandshake_5ffailed_5fstatus_2eproto,
  &::descriptor_table_ap_5ftrjctl_2flateral_5fcontrol_5fsaturation_5fstatus_2eproto,
  &::descriptor_table_ap_5ftrjctl_2flodmc_5fhandshake_5ffailed_5fstatus_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_sccs[2] = {
  &scc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.base,
  &scc_info_MFControlStatusPort_array_port_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_once;
static bool descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto = {
  &descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_initialized, descriptor_table_protodef_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto, "ap_trjctl/mfcontrol_status_port.proto", 1246,
  &descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_once, descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_sccs, descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto::offsets,
  file_level_metadata_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto, 2, file_level_enum_descriptors_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto, file_level_service_descriptors_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto), true);
namespace pb {
namespace ap_trjctl {
namespace mfcontrol_status_port {

// ===================================================================

void MFControlStatusPort::InitAsDefaultInstance() {
  ::pb::ap_trjctl::mfcontrol_status_port::_MFControlStatusPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class MFControlStatusPort::_Internal {
 public:
  using HasBits = decltype(std::declval<MFControlStatusPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const MFControlStatusPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_numusedctrlpoints_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lodmchandshakefailedstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ladmchandshakefailedstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_correctgearengaged_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_longitudinalcontrolfinished_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lateralcontrolfinished_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_longitudinalcontrolfailed_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lateralpathcontrolfailed_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_longitudinalpathcontrolfailed_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lateralcontrolfailed_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_longitudinalcontrolsaturated_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lateralcontrolsaturationstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vehstandstillhold_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vehstandstillsecured_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driversteerintervdetected_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
MFControlStatusPort::_Internal::ssigheader(const MFControlStatusPort* msg) {
  return *msg->ssigheader_;
}
void MFControlStatusPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MFControlStatusPort::MFControlStatusPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
}
MFControlStatusPort::MFControlStatusPort(const MFControlStatusPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&vehstandstillhold_nu_, &from.vehstandstillhold_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&lodmchandshakefailedstatus_nu_) -
    reinterpret_cast<char*>(&vehstandstillhold_nu_)) + sizeof(lodmchandshakefailedstatus_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
}

void MFControlStatusPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lodmchandshakefailedstatus_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(lodmchandshakefailedstatus_nu_));
}

MFControlStatusPort::~MFControlStatusPort() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  SharedDtor();
}

void MFControlStatusPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void MFControlStatusPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MFControlStatusPort& MFControlStatusPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MFControlStatusPort_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.base);
  return *internal_default_instance();
}


void MFControlStatusPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&vehstandstillhold_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitudinalpathcontrolfailed_nu_) -
        reinterpret_cast<char*>(&vehstandstillhold_nu_)) + sizeof(longitudinalpathcontrolfailed_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&lateralcontrolfailed_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitudinalcontrolfailed_nu_) -
        reinterpret_cast<char*>(&lateralcontrolfailed_nu_)) + sizeof(longitudinalcontrolfailed_nu_));
  }
  lodmchandshakefailedstatus_nu_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MFControlStatusPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool longitudinalControlSaturated_nu = 392;
      case 392:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_longitudinalcontrolsaturated_nu(&has_bits);
          longitudinalcontrolsaturated_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driverSteerIntervDetected_nu = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_driversteerintervdetected_nu(&has_bits);
          driversteerintervdetected_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool longitudinalPathControlFailed_nu = 704;
      case 704:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_longitudinalpathcontrolfailed_nu(&has_bits);
          longitudinalpathcontrolfailed_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vehStandstillSecured_nu = 1064;
      case 1064:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vehstandstillsecured_nu(&has_bits);
          vehstandstillsecured_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.ladmc_handshake_failed_status.LadmcHandshakeFailedStatus ladmcHandshakeFailedStatus_nu = 1426;
      case 1426:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus_IsValid(val))) {
            _internal_set_ladmchandshakefailedstatus_nu(static_cast<::pb::ap_trjctl::ladmc_handshake_failed_status::LadmcHandshakeFailedStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1426, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.lateral_control_saturation_status.LateralControlSaturationStatus lateralControlSaturationStatus_nu = 1459;
      case 1459:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus_IsValid(val))) {
            _internal_set_lateralcontrolsaturationstatus_nu(static_cast<::pb::ap_trjctl::lateral_control_saturation_status::LateralControlSaturationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1459, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool lateralControlFailed_nu = 1566;
      case 1566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_lateralcontrolfailed_nu(&has_bits);
          lateralcontrolfailed_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool correctGearEngaged_nu = 1618;
      case 1618:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_correctgearengaged_nu(&has_bits);
          correctgearengaged_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 numUsedCtrlPoints_nu = 2199;
      case 2199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_numusedctrlpoints_nu(&has_bits);
          numusedctrlpoints_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool longitudinalControlFailed_nu = 2246;
      case 2246:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_longitudinalcontrolfailed_nu(&has_bits);
          longitudinalcontrolfailed_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vehStandstillHold_nu = 2442;
      case 2442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_vehstandstillhold_nu(&has_bits);
          vehstandstillhold_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.lodmc_handshake_failed_status.LodmcHandshakeFailedStatus lodmcHandshakeFailedStatus_nu = 2822;
      case 2822:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus_IsValid(val))) {
            _internal_set_lodmchandshakefailedstatus_nu(static_cast<::pb::ap_trjctl::lodmc_handshake_failed_status::LodmcHandshakeFailedStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2822, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool longitudinalControlFinished_nu = 2875;
      case 2875:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_longitudinalcontrolfinished_nu(&has_bits);
          longitudinalcontrolfinished_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lateralControlFinished_nu = 3148;
      case 3148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_lateralcontrolfinished_nu(&has_bits);
          lateralcontrolfinished_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lateralPathControlFailed_nu = 3454;
      case 3454:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_lateralpathcontrolfailed_nu(&has_bits);
          lateralpathcontrolfailed_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MFControlStatusPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool longitudinalControlSaturated_nu = 392;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(392, this->_internal_longitudinalcontrolsaturated_nu(), target);
  }

  // optional bool driverSteerIntervDetected_nu = 407;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(407, this->_internal_driversteerintervdetected_nu(), target);
  }

  // optional bool longitudinalPathControlFailed_nu = 704;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(704, this->_internal_longitudinalpathcontrolfailed_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional bool vehStandstillSecured_nu = 1064;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1064, this->_internal_vehstandstillsecured_nu(), target);
  }

  // optional .pb.ap_trjctl.ladmc_handshake_failed_status.LadmcHandshakeFailedStatus ladmcHandshakeFailedStatus_nu = 1426;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1426, this->_internal_ladmchandshakefailedstatus_nu(), target);
  }

  // optional .pb.ap_trjctl.lateral_control_saturation_status.LateralControlSaturationStatus lateralControlSaturationStatus_nu = 1459;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1459, this->_internal_lateralcontrolsaturationstatus_nu(), target);
  }

  // optional bool lateralControlFailed_nu = 1566;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1566, this->_internal_lateralcontrolfailed_nu(), target);
  }

  // optional bool correctGearEngaged_nu = 1618;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1618, this->_internal_correctgearengaged_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional uint32 numUsedCtrlPoints_nu = 2199;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2199, this->_internal_numusedctrlpoints_nu(), target);
  }

  // optional bool longitudinalControlFailed_nu = 2246;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2246, this->_internal_longitudinalcontrolfailed_nu(), target);
  }

  // optional bool vehStandstillHold_nu = 2442;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2442, this->_internal_vehstandstillhold_nu(), target);
  }

  // optional .pb.ap_trjctl.lodmc_handshake_failed_status.LodmcHandshakeFailedStatus lodmcHandshakeFailedStatus_nu = 2822;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2822, this->_internal_lodmchandshakefailedstatus_nu(), target);
  }

  // optional bool longitudinalControlFinished_nu = 2875;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2875, this->_internal_longitudinalcontrolfinished_nu(), target);
  }

  // optional bool lateralControlFinished_nu = 3148;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3148, this->_internal_lateralcontrolfinished_nu(), target);
  }

  // optional bool lateralPathControlFailed_nu = 3454;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3454, this->_internal_lateralpathcontrolfailed_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  return target;
}

size_t MFControlStatusPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional bool vehStandstillHold_nu = 2442;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 1;
    }

    // optional bool vehStandstillSecured_nu = 1064;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool driverSteerIntervDetected_nu = 407;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional .pb.ap_trjctl.ladmc_handshake_failed_status.LadmcHandshakeFailedStatus ladmcHandshakeFailedStatus_nu = 1426;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ladmchandshakefailedstatus_nu());
    }

    // optional .pb.ap_trjctl.lateral_control_saturation_status.LateralControlSaturationStatus lateralControlSaturationStatus_nu = 1459;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lateralcontrolsaturationstatus_nu());
    }

    // optional bool lateralPathControlFailed_nu = 3454;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional bool longitudinalPathControlFailed_nu = 704;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool lateralControlFailed_nu = 1566;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool longitudinalControlSaturated_nu = 392;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 numUsedCtrlPoints_nu = 2199;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numusedctrlpoints_nu());
    }

    // optional bool correctGearEngaged_nu = 1618;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool longitudinalControlFinished_nu = 2875;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional bool lateralControlFinished_nu = 3148;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool longitudinalControlFailed_nu = 2246;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  // optional .pb.ap_trjctl.lodmc_handshake_failed_status.LodmcHandshakeFailedStatus lodmcHandshakeFailedStatus_nu = 2822;
  if (cached_has_bits & 0x00010000u) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lodmchandshakefailedstatus_nu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MFControlStatusPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  const MFControlStatusPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MFControlStatusPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
    MergeFrom(*source);
  }
}

void MFControlStatusPort::MergeFrom(const MFControlStatusPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      vehstandstillhold_nu_ = from.vehstandstillhold_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      vehstandstillsecured_nu_ = from.vehstandstillsecured_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      driversteerintervdetected_nu_ = from.driversteerintervdetected_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      ladmchandshakefailedstatus_nu_ = from.ladmchandshakefailedstatus_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      lateralcontrolsaturationstatus_nu_ = from.lateralcontrolsaturationstatus_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateralpathcontrolfailed_nu_ = from.lateralpathcontrolfailed_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      longitudinalpathcontrolfailed_nu_ = from.longitudinalpathcontrolfailed_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      lateralcontrolfailed_nu_ = from.lateralcontrolfailed_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      longitudinalcontrolsaturated_nu_ = from.longitudinalcontrolsaturated_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000800u) {
      numusedctrlpoints_nu_ = from.numusedctrlpoints_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      correctgearengaged_nu_ = from.correctgearengaged_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      longitudinalcontrolfinished_nu_ = from.longitudinalcontrolfinished_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      lateralcontrolfinished_nu_ = from.lateralcontrolfinished_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      longitudinalcontrolfailed_nu_ = from.longitudinalcontrolfailed_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_lodmchandshakefailedstatus_nu(from._internal_lodmchandshakefailedstatus_nu());
  }
}

void MFControlStatusPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFControlStatusPort::CopyFrom(const MFControlStatusPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFControlStatusPort::IsInitialized() const {
  return true;
}

void MFControlStatusPort::InternalSwap(MFControlStatusPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(vehstandstillhold_nu_, other->vehstandstillhold_nu_);
  swap(vehstandstillsecured_nu_, other->vehstandstillsecured_nu_);
  swap(driversteerintervdetected_nu_, other->driversteerintervdetected_nu_);
  swap(ladmchandshakefailedstatus_nu_, other->ladmchandshakefailedstatus_nu_);
  swap(lateralcontrolsaturationstatus_nu_, other->lateralcontrolsaturationstatus_nu_);
  swap(lateralpathcontrolfailed_nu_, other->lateralpathcontrolfailed_nu_);
  swap(longitudinalpathcontrolfailed_nu_, other->longitudinalpathcontrolfailed_nu_);
  swap(lateralcontrolfailed_nu_, other->lateralcontrolfailed_nu_);
  swap(longitudinalcontrolsaturated_nu_, other->longitudinalcontrolsaturated_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(numusedctrlpoints_nu_, other->numusedctrlpoints_nu_);
  swap(correctgearengaged_nu_, other->correctgearengaged_nu_);
  swap(longitudinalcontrolfinished_nu_, other->longitudinalcontrolfinished_nu_);
  swap(lateralcontrolfinished_nu_, other->lateralcontrolfinished_nu_);
  swap(longitudinalcontrolfailed_nu_, other->longitudinalcontrolfailed_nu_);
  swap(lodmchandshakefailedstatus_nu_, other->lodmchandshakefailedstatus_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MFControlStatusPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MFControlStatusPort_array_port::InitAsDefaultInstance() {
}
class MFControlStatusPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<MFControlStatusPort_array_port>()._has_bits_);
};

MFControlStatusPort_array_port::MFControlStatusPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
}
MFControlStatusPort_array_port::MFControlStatusPort_array_port(const MFControlStatusPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
}

void MFControlStatusPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MFControlStatusPort_array_port_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.base);
}

MFControlStatusPort_array_port::~MFControlStatusPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  SharedDtor();
}

void MFControlStatusPort_array_port::SharedDtor() {
}

void MFControlStatusPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MFControlStatusPort_array_port& MFControlStatusPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MFControlStatusPort_array_port_ap_5ftrjctl_2fmfcontrol_5fstatus_5fport_2eproto.base);
  return *internal_default_instance();
}


void MFControlStatusPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MFControlStatusPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort data = 3136;
      case 3136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MFControlStatusPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort data = 3136;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3136, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  return target;
}

size_t MFControlStatusPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort data = 3136;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MFControlStatusPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const MFControlStatusPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MFControlStatusPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
    MergeFrom(*source);
  }
}

void MFControlStatusPort_array_port::MergeFrom(const MFControlStatusPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MFControlStatusPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFControlStatusPort_array_port::CopyFrom(const MFControlStatusPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.mfcontrol_status_port.MFControlStatusPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFControlStatusPort_array_port::IsInitialized() const {
  return true;
}

void MFControlStatusPort_array_port::InternalSwap(MFControlStatusPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MFControlStatusPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mfcontrol_status_port
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort* Arena::CreateMaybeMessage< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::mfcontrol_status_port::MFControlStatusPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
