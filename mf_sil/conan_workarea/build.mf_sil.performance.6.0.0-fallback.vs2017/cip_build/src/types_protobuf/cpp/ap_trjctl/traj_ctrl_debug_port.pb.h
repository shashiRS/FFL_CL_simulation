// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/traj_ctrl_debug_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto;
namespace pb {
namespace ap_trjctl {
namespace traj_ctrl_debug_port {
class TrajCtrlDebugPort;
class TrajCtrlDebugPortDefaultTypeInternal;
extern TrajCtrlDebugPortDefaultTypeInternal _TrajCtrlDebugPort_default_instance_;
class TrajCtrlDebugPort_array_port;
class TrajCtrlDebugPort_array_portDefaultTypeInternal;
extern TrajCtrlDebugPort_array_portDefaultTypeInternal _TrajCtrlDebugPort_array_port_default_instance_;
}  // namespace traj_ctrl_debug_port
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* Arena::CreateMaybeMessage<::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort>(Arena*);
template<> ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port* Arena::CreateMaybeMessage<::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_trjctl {
namespace traj_ctrl_debug_port {

// ===================================================================

class TrajCtrlDebugPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort) */ {
 public:
  TrajCtrlDebugPort();
  virtual ~TrajCtrlDebugPort();

  TrajCtrlDebugPort(const TrajCtrlDebugPort& from);
  TrajCtrlDebugPort(TrajCtrlDebugPort&& from) noexcept
    : TrajCtrlDebugPort() {
    *this = ::std::move(from);
  }

  inline TrajCtrlDebugPort& operator=(const TrajCtrlDebugPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajCtrlDebugPort& operator=(TrajCtrlDebugPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajCtrlDebugPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajCtrlDebugPort* internal_default_instance() {
    return reinterpret_cast<const TrajCtrlDebugPort*>(
               &_TrajCtrlDebugPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajCtrlDebugPort& a, TrajCtrlDebugPort& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajCtrlDebugPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajCtrlDebugPort* New() const final {
    return CreateMaybeMessage<TrajCtrlDebugPort>(nullptr);
  }

  TrajCtrlDebugPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajCtrlDebugPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajCtrlDebugPort& from);
  void MergeFrom(const TrajCtrlDebugPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajCtrlDebugPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto);
    return ::descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugIntFieldNumber = 1230,
    kDebugFloatFieldNumber = 2041,
    kSSigHeaderFieldNumber = 1033,
    kCurrentDeviationMFieldNumber = 275,
    kOrientationErrorRadFieldNumber = 288,
    kComfStandstillSteeringExtrapolationModeNuFieldNumber = 495,
    kXInterpolTrajMFieldNumber = 1492,
    kDriverInterventionProcessedNuFieldNumber = 3469,
    kDriverInterventionDetectedNuFieldNumber = 1957,
    kFree1FieldNumber = 304,
    kFree2FieldNumber = 339,
    kFinalVehicleStateReachedNuFieldNumber = 880,
    kOutsideTrajectoryStartNuFieldNumber = 1122,
    kOutsideTrajectoryEndNuFieldNumber = 2694,
    kSteerAngReqLateralDeviationRadFieldNumber = 1656,
    kGearCorrectNuFieldNumber = 1631,
    kStandstillSteeringDesiredNuFieldNumber = 3161,
    kDistanceControlFinishedNuFieldNumber = 348,
    kStandstillHoldCurNuFieldNumber = 2401,
    kDistanceToStopReqInterExtrapolTrajMFieldNumber = 1927,
    kVelocityLimitReqInterpolTrajMpsFieldNumber = 1936,
    kSteerAngReqCurvatureRadFieldNumber = 1998,
    kUiVersionNumberFieldNumber = 2124,
    kRateAndAccelerationLimitatModeFieldNumber = 2303,
    kRawSteerAngleRequestModeNuFieldNumber = 2356,
    kCurvaturePreviewed1PmFieldNumber = 2690,
    kYInterpolTrajMFieldNumber = 2856,
    kSteerAngReqYawDeviationRadFieldNumber = 2976,
    kFilteredSteerInterventionNuFieldNumber = 3148,
    kPathControlRequestModeNuFieldNumber = 3162,
    kCurvatureInterpolTraj1PmFieldNumber = 3245,
    kTrajIntermediateValueRawPercFieldNumber = 3332,
    kSteerAngReqRawRadFieldNumber = 3658,
    kComfStandStillSteeringModeNuFieldNumber = 3748,
    kCurrentTrajectoryIndexNuFieldNumber = 3781,
  };
  // repeated sint32 debugInt = 1230;
  int debugint_size() const;
  private:
  int _internal_debugint_size() const;
  public:
  void clear_debugint();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_debugint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_debugint() const;
  void _internal_add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_debugint();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 debugint(int index) const;
  void set_debugint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      debugint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_debugint();

  // repeated float debugFloat = 2041;
  int debugfloat_size() const;
  private:
  int _internal_debugfloat_size() const;
  public:
  void clear_debugfloat();
  private:
  float _internal_debugfloat(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_debugfloat() const;
  void _internal_add_debugfloat(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_debugfloat();
  public:
  float debugfloat(int index) const;
  void set_debugfloat(int index, float value);
  void add_debugfloat(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      debugfloat() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_debugfloat();

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float currentDeviation_m = 275;
  bool has_currentdeviation_m() const;
  private:
  bool _internal_has_currentdeviation_m() const;
  public:
  void clear_currentdeviation_m();
  float currentdeviation_m() const;
  void set_currentdeviation_m(float value);
  private:
  float _internal_currentdeviation_m() const;
  void _internal_set_currentdeviation_m(float value);
  public:

  // optional float orientationError_rad = 288;
  bool has_orientationerror_rad() const;
  private:
  bool _internal_has_orientationerror_rad() const;
  public:
  void clear_orientationerror_rad();
  float orientationerror_rad() const;
  void set_orientationerror_rad(float value);
  private:
  float _internal_orientationerror_rad() const;
  void _internal_set_orientationerror_rad(float value);
  public:

  // optional uint32 comfStandstillSteeringExtrapolationMode_nu = 495;
  bool has_comfstandstillsteeringextrapolationmode_nu() const;
  private:
  bool _internal_has_comfstandstillsteeringextrapolationmode_nu() const;
  public:
  void clear_comfstandstillsteeringextrapolationmode_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 comfstandstillsteeringextrapolationmode_nu() const;
  void set_comfstandstillsteeringextrapolationmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_comfstandstillsteeringextrapolationmode_nu() const;
  void _internal_set_comfstandstillsteeringextrapolationmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float xInterpolTraj_m = 1492;
  bool has_xinterpoltraj_m() const;
  private:
  bool _internal_has_xinterpoltraj_m() const;
  public:
  void clear_xinterpoltraj_m();
  float xinterpoltraj_m() const;
  void set_xinterpoltraj_m(float value);
  private:
  float _internal_xinterpoltraj_m() const;
  void _internal_set_xinterpoltraj_m(float value);
  public:

  // optional bool driverInterventionProcessed_nu = 3469;
  bool has_driverinterventionprocessed_nu() const;
  private:
  bool _internal_has_driverinterventionprocessed_nu() const;
  public:
  void clear_driverinterventionprocessed_nu();
  bool driverinterventionprocessed_nu() const;
  void set_driverinterventionprocessed_nu(bool value);
  private:
  bool _internal_driverinterventionprocessed_nu() const;
  void _internal_set_driverinterventionprocessed_nu(bool value);
  public:

  // optional bool driverInterventionDetected_nu = 1957;
  bool has_driverinterventiondetected_nu() const;
  private:
  bool _internal_has_driverinterventiondetected_nu() const;
  public:
  void clear_driverinterventiondetected_nu();
  bool driverinterventiondetected_nu() const;
  void set_driverinterventiondetected_nu(bool value);
  private:
  bool _internal_driverinterventiondetected_nu() const;
  void _internal_set_driverinterventiondetected_nu(bool value);
  public:

  // optional bool free1 = 304;
  bool has_free1() const;
  private:
  bool _internal_has_free1() const;
  public:
  void clear_free1();
  bool free1() const;
  void set_free1(bool value);
  private:
  bool _internal_free1() const;
  void _internal_set_free1(bool value);
  public:

  // optional bool free2 = 339;
  bool has_free2() const;
  private:
  bool _internal_has_free2() const;
  public:
  void clear_free2();
  bool free2() const;
  void set_free2(bool value);
  private:
  bool _internal_free2() const;
  void _internal_set_free2(bool value);
  public:

  // optional bool finalVehicleStateReached_nu = 880;
  bool has_finalvehiclestatereached_nu() const;
  private:
  bool _internal_has_finalvehiclestatereached_nu() const;
  public:
  void clear_finalvehiclestatereached_nu();
  bool finalvehiclestatereached_nu() const;
  void set_finalvehiclestatereached_nu(bool value);
  private:
  bool _internal_finalvehiclestatereached_nu() const;
  void _internal_set_finalvehiclestatereached_nu(bool value);
  public:

  // optional bool outsideTrajectoryStart_nu = 1122;
  bool has_outsidetrajectorystart_nu() const;
  private:
  bool _internal_has_outsidetrajectorystart_nu() const;
  public:
  void clear_outsidetrajectorystart_nu();
  bool outsidetrajectorystart_nu() const;
  void set_outsidetrajectorystart_nu(bool value);
  private:
  bool _internal_outsidetrajectorystart_nu() const;
  void _internal_set_outsidetrajectorystart_nu(bool value);
  public:

  // optional bool outsideTrajectoryEnd_nu = 2694;
  bool has_outsidetrajectoryend_nu() const;
  private:
  bool _internal_has_outsidetrajectoryend_nu() const;
  public:
  void clear_outsidetrajectoryend_nu();
  bool outsidetrajectoryend_nu() const;
  void set_outsidetrajectoryend_nu(bool value);
  private:
  bool _internal_outsidetrajectoryend_nu() const;
  void _internal_set_outsidetrajectoryend_nu(bool value);
  public:

  // optional float steerAngReqLateralDeviation_rad = 1656;
  bool has_steerangreqlateraldeviation_rad() const;
  private:
  bool _internal_has_steerangreqlateraldeviation_rad() const;
  public:
  void clear_steerangreqlateraldeviation_rad();
  float steerangreqlateraldeviation_rad() const;
  void set_steerangreqlateraldeviation_rad(float value);
  private:
  float _internal_steerangreqlateraldeviation_rad() const;
  void _internal_set_steerangreqlateraldeviation_rad(float value);
  public:

  // optional bool gearCorrect_nu = 1631;
  bool has_gearcorrect_nu() const;
  private:
  bool _internal_has_gearcorrect_nu() const;
  public:
  void clear_gearcorrect_nu();
  bool gearcorrect_nu() const;
  void set_gearcorrect_nu(bool value);
  private:
  bool _internal_gearcorrect_nu() const;
  void _internal_set_gearcorrect_nu(bool value);
  public:

  // optional bool standstillSteeringDesired_nu = 3161;
  bool has_standstillsteeringdesired_nu() const;
  private:
  bool _internal_has_standstillsteeringdesired_nu() const;
  public:
  void clear_standstillsteeringdesired_nu();
  bool standstillsteeringdesired_nu() const;
  void set_standstillsteeringdesired_nu(bool value);
  private:
  bool _internal_standstillsteeringdesired_nu() const;
  void _internal_set_standstillsteeringdesired_nu(bool value);
  public:

  // optional bool distanceControlFinished_nu = 348;
  bool has_distancecontrolfinished_nu() const;
  private:
  bool _internal_has_distancecontrolfinished_nu() const;
  public:
  void clear_distancecontrolfinished_nu();
  bool distancecontrolfinished_nu() const;
  void set_distancecontrolfinished_nu(bool value);
  private:
  bool _internal_distancecontrolfinished_nu() const;
  void _internal_set_distancecontrolfinished_nu(bool value);
  public:

  // optional bool standstillHoldCur_nu = 2401;
  bool has_standstillholdcur_nu() const;
  private:
  bool _internal_has_standstillholdcur_nu() const;
  public:
  void clear_standstillholdcur_nu();
  bool standstillholdcur_nu() const;
  void set_standstillholdcur_nu(bool value);
  private:
  bool _internal_standstillholdcur_nu() const;
  void _internal_set_standstillholdcur_nu(bool value);
  public:

  // optional float distanceToStopReqInterExtrapolTraj_m = 1927;
  bool has_distancetostopreqinterextrapoltraj_m() const;
  private:
  bool _internal_has_distancetostopreqinterextrapoltraj_m() const;
  public:
  void clear_distancetostopreqinterextrapoltraj_m();
  float distancetostopreqinterextrapoltraj_m() const;
  void set_distancetostopreqinterextrapoltraj_m(float value);
  private:
  float _internal_distancetostopreqinterextrapoltraj_m() const;
  void _internal_set_distancetostopreqinterextrapoltraj_m(float value);
  public:

  // optional float velocityLimitReqInterpolTraj_mps = 1936;
  bool has_velocitylimitreqinterpoltraj_mps() const;
  private:
  bool _internal_has_velocitylimitreqinterpoltraj_mps() const;
  public:
  void clear_velocitylimitreqinterpoltraj_mps();
  float velocitylimitreqinterpoltraj_mps() const;
  void set_velocitylimitreqinterpoltraj_mps(float value);
  private:
  float _internal_velocitylimitreqinterpoltraj_mps() const;
  void _internal_set_velocitylimitreqinterpoltraj_mps(float value);
  public:

  // optional float steerAngReqCurvature_rad = 1998;
  bool has_steerangreqcurvature_rad() const;
  private:
  bool _internal_has_steerangreqcurvature_rad() const;
  public:
  void clear_steerangreqcurvature_rad();
  float steerangreqcurvature_rad() const;
  void set_steerangreqcurvature_rad(float value);
  private:
  float _internal_steerangreqcurvature_rad() const;
  void _internal_set_steerangreqcurvature_rad(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rateAndAccelerationLimitatMode = 2303;
  bool has_rateandaccelerationlimitatmode() const;
  private:
  bool _internal_has_rateandaccelerationlimitatmode() const;
  public:
  void clear_rateandaccelerationlimitatmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 rateandaccelerationlimitatmode() const;
  void set_rateandaccelerationlimitatmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rateandaccelerationlimitatmode() const;
  void _internal_set_rateandaccelerationlimitatmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rawSteerAngleRequestMode_nu = 2356;
  bool has_rawsteeranglerequestmode_nu() const;
  private:
  bool _internal_has_rawsteeranglerequestmode_nu() const;
  public:
  void clear_rawsteeranglerequestmode_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 rawsteeranglerequestmode_nu() const;
  void set_rawsteeranglerequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rawsteeranglerequestmode_nu() const;
  void _internal_set_rawsteeranglerequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float curvaturePreviewed_1pm = 2690;
  bool has_curvaturepreviewed_1pm() const;
  private:
  bool _internal_has_curvaturepreviewed_1pm() const;
  public:
  void clear_curvaturepreviewed_1pm();
  float curvaturepreviewed_1pm() const;
  void set_curvaturepreviewed_1pm(float value);
  private:
  float _internal_curvaturepreviewed_1pm() const;
  void _internal_set_curvaturepreviewed_1pm(float value);
  public:

  // optional float yInterpolTraj_m = 2856;
  bool has_yinterpoltraj_m() const;
  private:
  bool _internal_has_yinterpoltraj_m() const;
  public:
  void clear_yinterpoltraj_m();
  float yinterpoltraj_m() const;
  void set_yinterpoltraj_m(float value);
  private:
  float _internal_yinterpoltraj_m() const;
  void _internal_set_yinterpoltraj_m(float value);
  public:

  // optional float steerAngReqYawDeviation_rad = 2976;
  bool has_steerangreqyawdeviation_rad() const;
  private:
  bool _internal_has_steerangreqyawdeviation_rad() const;
  public:
  void clear_steerangreqyawdeviation_rad();
  float steerangreqyawdeviation_rad() const;
  void set_steerangreqyawdeviation_rad(float value);
  private:
  float _internal_steerangreqyawdeviation_rad() const;
  void _internal_set_steerangreqyawdeviation_rad(float value);
  public:

  // optional float filteredSteerIntervention_nu = 3148;
  bool has_filteredsteerintervention_nu() const;
  private:
  bool _internal_has_filteredsteerintervention_nu() const;
  public:
  void clear_filteredsteerintervention_nu();
  float filteredsteerintervention_nu() const;
  void set_filteredsteerintervention_nu(float value);
  private:
  float _internal_filteredsteerintervention_nu() const;
  void _internal_set_filteredsteerintervention_nu(float value);
  public:

  // optional uint32 pathControlRequestMode_nu = 3162;
  bool has_pathcontrolrequestmode_nu() const;
  private:
  bool _internal_has_pathcontrolrequestmode_nu() const;
  public:
  void clear_pathcontrolrequestmode_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathcontrolrequestmode_nu() const;
  void set_pathcontrolrequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pathcontrolrequestmode_nu() const;
  void _internal_set_pathcontrolrequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float curvatureInterpolTraj_1pm = 3245;
  bool has_curvatureinterpoltraj_1pm() const;
  private:
  bool _internal_has_curvatureinterpoltraj_1pm() const;
  public:
  void clear_curvatureinterpoltraj_1pm();
  float curvatureinterpoltraj_1pm() const;
  void set_curvatureinterpoltraj_1pm(float value);
  private:
  float _internal_curvatureinterpoltraj_1pm() const;
  void _internal_set_curvatureinterpoltraj_1pm(float value);
  public:

  // optional float trajIntermediateValueRaw_perc = 3332;
  bool has_trajintermediatevalueraw_perc() const;
  private:
  bool _internal_has_trajintermediatevalueraw_perc() const;
  public:
  void clear_trajintermediatevalueraw_perc();
  float trajintermediatevalueraw_perc() const;
  void set_trajintermediatevalueraw_perc(float value);
  private:
  float _internal_trajintermediatevalueraw_perc() const;
  void _internal_set_trajintermediatevalueraw_perc(float value);
  public:

  // optional float steerAngReqRaw_rad = 3658;
  bool has_steerangreqraw_rad() const;
  private:
  bool _internal_has_steerangreqraw_rad() const;
  public:
  void clear_steerangreqraw_rad();
  float steerangreqraw_rad() const;
  void set_steerangreqraw_rad(float value);
  private:
  float _internal_steerangreqraw_rad() const;
  void _internal_set_steerangreqraw_rad(float value);
  public:

  // optional uint32 comfStandStillSteeringMode_nu = 3748;
  bool has_comfstandstillsteeringmode_nu() const;
  private:
  bool _internal_has_comfstandstillsteeringmode_nu() const;
  public:
  void clear_comfstandstillsteeringmode_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 comfstandstillsteeringmode_nu() const;
  void set_comfstandstillsteeringmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_comfstandstillsteeringmode_nu() const;
  void _internal_set_comfstandstillsteeringmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 currentTrajectoryIndex_nu = 3781;
  bool has_currenttrajectoryindex_nu() const;
  private:
  bool _internal_has_currenttrajectoryindex_nu() const;
  public:
  void clear_currenttrajectoryindex_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 currenttrajectoryindex_nu() const;
  void set_currenttrajectoryindex_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_currenttrajectoryindex_nu() const;
  void _internal_set_currenttrajectoryindex_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > debugint_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > debugfloat_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float currentdeviation_m_;
  float orientationerror_rad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 comfstandstillsteeringextrapolationmode_nu_;
  float xinterpoltraj_m_;
  bool driverinterventionprocessed_nu_;
  bool driverinterventiondetected_nu_;
  bool free1_;
  bool free2_;
  bool finalvehiclestatereached_nu_;
  bool outsidetrajectorystart_nu_;
  bool outsidetrajectoryend_nu_;
  float steerangreqlateraldeviation_rad_;
  bool gearcorrect_nu_;
  bool standstillsteeringdesired_nu_;
  bool distancecontrolfinished_nu_;
  bool standstillholdcur_nu_;
  float distancetostopreqinterextrapoltraj_m_;
  float velocitylimitreqinterpoltraj_mps_;
  float steerangreqcurvature_rad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rateandaccelerationlimitatmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rawsteeranglerequestmode_nu_;
  float curvaturepreviewed_1pm_;
  float yinterpoltraj_m_;
  float steerangreqyawdeviation_rad_;
  float filteredsteerintervention_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathcontrolrequestmode_nu_;
  float curvatureinterpoltraj_1pm_;
  float trajintermediatevalueraw_perc_;
  float steerangreqraw_rad_;
  ::PROTOBUF_NAMESPACE_ID::uint32 comfstandstillsteeringmode_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currenttrajectoryindex_nu_;
  friend struct ::TableStruct_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto;
};
// -------------------------------------------------------------------

class TrajCtrlDebugPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port) */ {
 public:
  TrajCtrlDebugPort_array_port();
  virtual ~TrajCtrlDebugPort_array_port();

  TrajCtrlDebugPort_array_port(const TrajCtrlDebugPort_array_port& from);
  TrajCtrlDebugPort_array_port(TrajCtrlDebugPort_array_port&& from) noexcept
    : TrajCtrlDebugPort_array_port() {
    *this = ::std::move(from);
  }

  inline TrajCtrlDebugPort_array_port& operator=(const TrajCtrlDebugPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajCtrlDebugPort_array_port& operator=(TrajCtrlDebugPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajCtrlDebugPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajCtrlDebugPort_array_port* internal_default_instance() {
    return reinterpret_cast<const TrajCtrlDebugPort_array_port*>(
               &_TrajCtrlDebugPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrajCtrlDebugPort_array_port& a, TrajCtrlDebugPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajCtrlDebugPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajCtrlDebugPort_array_port* New() const final {
    return CreateMaybeMessage<TrajCtrlDebugPort_array_port>(nullptr);
  }

  TrajCtrlDebugPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajCtrlDebugPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajCtrlDebugPort_array_port& from);
  void MergeFrom(const TrajCtrlDebugPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajCtrlDebugPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto);
    return ::descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2703,
  };
  // repeated .pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort data = 2703;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort >*
      mutable_data();
  private:
  const ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort& _internal_data(int index) const;
  ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* _internal_add_data();
  public:
  const ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort& data(int index) const;
  ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort > data_;
  friend struct ::TableStruct_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajCtrlDebugPort

// optional uint32 uiVersionNumber = 2124;
inline bool TrajCtrlDebugPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void TrajCtrlDebugPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void TrajCtrlDebugPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  uiversionnumber_ = value;
}
inline void TrajCtrlDebugPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool TrajCtrlDebugPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool TrajCtrlDebugPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& TrajCtrlDebugPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& TrajCtrlDebugPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* TrajCtrlDebugPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* TrajCtrlDebugPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* TrajCtrlDebugPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void TrajCtrlDebugPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.sSigHeader)
}

// repeated sint32 debugInt = 1230;
inline int TrajCtrlDebugPort::_internal_debugint_size() const {
  return debugint_.size();
}
inline int TrajCtrlDebugPort::debugint_size() const {
  return _internal_debugint_size();
}
inline void TrajCtrlDebugPort::clear_debugint() {
  debugint_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrajCtrlDebugPort::_internal_debugint(int index) const {
  return debugint_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrajCtrlDebugPort::debugint(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugInt)
  return _internal_debugint(index);
}
inline void TrajCtrlDebugPort::set_debugint(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  debugint_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugInt)
}
inline void TrajCtrlDebugPort::_internal_add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  debugint_.Add(value);
}
inline void TrajCtrlDebugPort::add_debugint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_debugint(value);
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugInt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrajCtrlDebugPort::_internal_debugint() const {
  return debugint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TrajCtrlDebugPort::debugint() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugInt)
  return _internal_debugint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrajCtrlDebugPort::_internal_mutable_debugint() {
  return &debugint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TrajCtrlDebugPort::mutable_debugint() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugInt)
  return _internal_mutable_debugint();
}

// repeated float debugFloat = 2041;
inline int TrajCtrlDebugPort::_internal_debugfloat_size() const {
  return debugfloat_.size();
}
inline int TrajCtrlDebugPort::debugfloat_size() const {
  return _internal_debugfloat_size();
}
inline void TrajCtrlDebugPort::clear_debugfloat() {
  debugfloat_.Clear();
}
inline float TrajCtrlDebugPort::_internal_debugfloat(int index) const {
  return debugfloat_.Get(index);
}
inline float TrajCtrlDebugPort::debugfloat(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugFloat)
  return _internal_debugfloat(index);
}
inline void TrajCtrlDebugPort::set_debugfloat(int index, float value) {
  debugfloat_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugFloat)
}
inline void TrajCtrlDebugPort::_internal_add_debugfloat(float value) {
  debugfloat_.Add(value);
}
inline void TrajCtrlDebugPort::add_debugfloat(float value) {
  _internal_add_debugfloat(value);
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugFloat)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrajCtrlDebugPort::_internal_debugfloat() const {
  return debugfloat_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrajCtrlDebugPort::debugfloat() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugFloat)
  return _internal_debugfloat();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrajCtrlDebugPort::_internal_mutable_debugfloat() {
  return &debugfloat_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrajCtrlDebugPort::mutable_debugfloat() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.debugFloat)
  return _internal_mutable_debugfloat();
}

// optional float currentDeviation_m = 275;
inline bool TrajCtrlDebugPort::_internal_has_currentdeviation_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_currentdeviation_m() const {
  return _internal_has_currentdeviation_m();
}
inline void TrajCtrlDebugPort::clear_currentdeviation_m() {
  currentdeviation_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TrajCtrlDebugPort::_internal_currentdeviation_m() const {
  return currentdeviation_m_;
}
inline float TrajCtrlDebugPort::currentdeviation_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.currentDeviation_m)
  return _internal_currentdeviation_m();
}
inline void TrajCtrlDebugPort::_internal_set_currentdeviation_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  currentdeviation_m_ = value;
}
inline void TrajCtrlDebugPort::set_currentdeviation_m(float value) {
  _internal_set_currentdeviation_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.currentDeviation_m)
}

// optional float orientationError_rad = 288;
inline bool TrajCtrlDebugPort::_internal_has_orientationerror_rad() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_orientationerror_rad() const {
  return _internal_has_orientationerror_rad();
}
inline void TrajCtrlDebugPort::clear_orientationerror_rad() {
  orientationerror_rad_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrajCtrlDebugPort::_internal_orientationerror_rad() const {
  return orientationerror_rad_;
}
inline float TrajCtrlDebugPort::orientationerror_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.orientationError_rad)
  return _internal_orientationerror_rad();
}
inline void TrajCtrlDebugPort::_internal_set_orientationerror_rad(float value) {
  _has_bits_[0] |= 0x00000004u;
  orientationerror_rad_ = value;
}
inline void TrajCtrlDebugPort::set_orientationerror_rad(float value) {
  _internal_set_orientationerror_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.orientationError_rad)
}

// optional float velocityLimitReqInterpolTraj_mps = 1936;
inline bool TrajCtrlDebugPort::_internal_has_velocitylimitreqinterpoltraj_mps() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_velocitylimitreqinterpoltraj_mps() const {
  return _internal_has_velocitylimitreqinterpoltraj_mps();
}
inline void TrajCtrlDebugPort::clear_velocitylimitreqinterpoltraj_mps() {
  velocitylimitreqinterpoltraj_mps_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float TrajCtrlDebugPort::_internal_velocitylimitreqinterpoltraj_mps() const {
  return velocitylimitreqinterpoltraj_mps_;
}
inline float TrajCtrlDebugPort::velocitylimitreqinterpoltraj_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.velocityLimitReqInterpolTraj_mps)
  return _internal_velocitylimitreqinterpoltraj_mps();
}
inline void TrajCtrlDebugPort::_internal_set_velocitylimitreqinterpoltraj_mps(float value) {
  _has_bits_[0] |= 0x00040000u;
  velocitylimitreqinterpoltraj_mps_ = value;
}
inline void TrajCtrlDebugPort::set_velocitylimitreqinterpoltraj_mps(float value) {
  _internal_set_velocitylimitreqinterpoltraj_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.velocityLimitReqInterpolTraj_mps)
}

// optional float distanceToStopReqInterExtrapolTraj_m = 1927;
inline bool TrajCtrlDebugPort::_internal_has_distancetostopreqinterextrapoltraj_m() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_distancetostopreqinterextrapoltraj_m() const {
  return _internal_has_distancetostopreqinterextrapoltraj_m();
}
inline void TrajCtrlDebugPort::clear_distancetostopreqinterextrapoltraj_m() {
  distancetostopreqinterextrapoltraj_m_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TrajCtrlDebugPort::_internal_distancetostopreqinterextrapoltraj_m() const {
  return distancetostopreqinterextrapoltraj_m_;
}
inline float TrajCtrlDebugPort::distancetostopreqinterextrapoltraj_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.distanceToStopReqInterExtrapolTraj_m)
  return _internal_distancetostopreqinterextrapoltraj_m();
}
inline void TrajCtrlDebugPort::_internal_set_distancetostopreqinterextrapoltraj_m(float value) {
  _has_bits_[0] |= 0x00020000u;
  distancetostopreqinterextrapoltraj_m_ = value;
}
inline void TrajCtrlDebugPort::set_distancetostopreqinterextrapoltraj_m(float value) {
  _internal_set_distancetostopreqinterextrapoltraj_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.distanceToStopReqInterExtrapolTraj_m)
}

// optional float xInterpolTraj_m = 1492;
inline bool TrajCtrlDebugPort::_internal_has_xinterpoltraj_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_xinterpoltraj_m() const {
  return _internal_has_xinterpoltraj_m();
}
inline void TrajCtrlDebugPort::clear_xinterpoltraj_m() {
  xinterpoltraj_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrajCtrlDebugPort::_internal_xinterpoltraj_m() const {
  return xinterpoltraj_m_;
}
inline float TrajCtrlDebugPort::xinterpoltraj_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.xInterpolTraj_m)
  return _internal_xinterpoltraj_m();
}
inline void TrajCtrlDebugPort::_internal_set_xinterpoltraj_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  xinterpoltraj_m_ = value;
}
inline void TrajCtrlDebugPort::set_xinterpoltraj_m(float value) {
  _internal_set_xinterpoltraj_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.xInterpolTraj_m)
}

// optional float yInterpolTraj_m = 2856;
inline bool TrajCtrlDebugPort::_internal_has_yinterpoltraj_m() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_yinterpoltraj_m() const {
  return _internal_has_yinterpoltraj_m();
}
inline void TrajCtrlDebugPort::clear_yinterpoltraj_m() {
  yinterpoltraj_m_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float TrajCtrlDebugPort::_internal_yinterpoltraj_m() const {
  return yinterpoltraj_m_;
}
inline float TrajCtrlDebugPort::yinterpoltraj_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.yInterpolTraj_m)
  return _internal_yinterpoltraj_m();
}
inline void TrajCtrlDebugPort::_internal_set_yinterpoltraj_m(float value) {
  _has_bits_[0] |= 0x01000000u;
  yinterpoltraj_m_ = value;
}
inline void TrajCtrlDebugPort::set_yinterpoltraj_m(float value) {
  _internal_set_yinterpoltraj_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.yInterpolTraj_m)
}

// optional float curvatureInterpolTraj_1pm = 3245;
inline bool TrajCtrlDebugPort::_internal_has_curvatureinterpoltraj_1pm() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_curvatureinterpoltraj_1pm() const {
  return _internal_has_curvatureinterpoltraj_1pm();
}
inline void TrajCtrlDebugPort::clear_curvatureinterpoltraj_1pm() {
  curvatureinterpoltraj_1pm_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float TrajCtrlDebugPort::_internal_curvatureinterpoltraj_1pm() const {
  return curvatureinterpoltraj_1pm_;
}
inline float TrajCtrlDebugPort::curvatureinterpoltraj_1pm() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.curvatureInterpolTraj_1pm)
  return _internal_curvatureinterpoltraj_1pm();
}
inline void TrajCtrlDebugPort::_internal_set_curvatureinterpoltraj_1pm(float value) {
  _has_bits_[0] |= 0x10000000u;
  curvatureinterpoltraj_1pm_ = value;
}
inline void TrajCtrlDebugPort::set_curvatureinterpoltraj_1pm(float value) {
  _internal_set_curvatureinterpoltraj_1pm(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.curvatureInterpolTraj_1pm)
}

// optional float curvaturePreviewed_1pm = 2690;
inline bool TrajCtrlDebugPort::_internal_has_curvaturepreviewed_1pm() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_curvaturepreviewed_1pm() const {
  return _internal_has_curvaturepreviewed_1pm();
}
inline void TrajCtrlDebugPort::clear_curvaturepreviewed_1pm() {
  curvaturepreviewed_1pm_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float TrajCtrlDebugPort::_internal_curvaturepreviewed_1pm() const {
  return curvaturepreviewed_1pm_;
}
inline float TrajCtrlDebugPort::curvaturepreviewed_1pm() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.curvaturePreviewed_1pm)
  return _internal_curvaturepreviewed_1pm();
}
inline void TrajCtrlDebugPort::_internal_set_curvaturepreviewed_1pm(float value) {
  _has_bits_[0] |= 0x00800000u;
  curvaturepreviewed_1pm_ = value;
}
inline void TrajCtrlDebugPort::set_curvaturepreviewed_1pm(float value) {
  _internal_set_curvaturepreviewed_1pm(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.curvaturePreviewed_1pm)
}

// optional float filteredSteerIntervention_nu = 3148;
inline bool TrajCtrlDebugPort::_internal_has_filteredsteerintervention_nu() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_filteredsteerintervention_nu() const {
  return _internal_has_filteredsteerintervention_nu();
}
inline void TrajCtrlDebugPort::clear_filteredsteerintervention_nu() {
  filteredsteerintervention_nu_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float TrajCtrlDebugPort::_internal_filteredsteerintervention_nu() const {
  return filteredsteerintervention_nu_;
}
inline float TrajCtrlDebugPort::filteredsteerintervention_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.filteredSteerIntervention_nu)
  return _internal_filteredsteerintervention_nu();
}
inline void TrajCtrlDebugPort::_internal_set_filteredsteerintervention_nu(float value) {
  _has_bits_[0] |= 0x04000000u;
  filteredsteerintervention_nu_ = value;
}
inline void TrajCtrlDebugPort::set_filteredsteerintervention_nu(float value) {
  _internal_set_filteredsteerintervention_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.filteredSteerIntervention_nu)
}

// optional float trajIntermediateValueRaw_perc = 3332;
inline bool TrajCtrlDebugPort::_internal_has_trajintermediatevalueraw_perc() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_trajintermediatevalueraw_perc() const {
  return _internal_has_trajintermediatevalueraw_perc();
}
inline void TrajCtrlDebugPort::clear_trajintermediatevalueraw_perc() {
  trajintermediatevalueraw_perc_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float TrajCtrlDebugPort::_internal_trajintermediatevalueraw_perc() const {
  return trajintermediatevalueraw_perc_;
}
inline float TrajCtrlDebugPort::trajintermediatevalueraw_perc() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.trajIntermediateValueRaw_perc)
  return _internal_trajintermediatevalueraw_perc();
}
inline void TrajCtrlDebugPort::_internal_set_trajintermediatevalueraw_perc(float value) {
  _has_bits_[0] |= 0x20000000u;
  trajintermediatevalueraw_perc_ = value;
}
inline void TrajCtrlDebugPort::set_trajintermediatevalueraw_perc(float value) {
  _internal_set_trajintermediatevalueraw_perc(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.trajIntermediateValueRaw_perc)
}

// optional float steerAngReqRaw_rad = 3658;
inline bool TrajCtrlDebugPort::_internal_has_steerangreqraw_rad() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_steerangreqraw_rad() const {
  return _internal_has_steerangreqraw_rad();
}
inline void TrajCtrlDebugPort::clear_steerangreqraw_rad() {
  steerangreqraw_rad_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float TrajCtrlDebugPort::_internal_steerangreqraw_rad() const {
  return steerangreqraw_rad_;
}
inline float TrajCtrlDebugPort::steerangreqraw_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqRaw_rad)
  return _internal_steerangreqraw_rad();
}
inline void TrajCtrlDebugPort::_internal_set_steerangreqraw_rad(float value) {
  _has_bits_[0] |= 0x40000000u;
  steerangreqraw_rad_ = value;
}
inline void TrajCtrlDebugPort::set_steerangreqraw_rad(float value) {
  _internal_set_steerangreqraw_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqRaw_rad)
}

// optional float steerAngReqYawDeviation_rad = 2976;
inline bool TrajCtrlDebugPort::_internal_has_steerangreqyawdeviation_rad() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_steerangreqyawdeviation_rad() const {
  return _internal_has_steerangreqyawdeviation_rad();
}
inline void TrajCtrlDebugPort::clear_steerangreqyawdeviation_rad() {
  steerangreqyawdeviation_rad_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float TrajCtrlDebugPort::_internal_steerangreqyawdeviation_rad() const {
  return steerangreqyawdeviation_rad_;
}
inline float TrajCtrlDebugPort::steerangreqyawdeviation_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqYawDeviation_rad)
  return _internal_steerangreqyawdeviation_rad();
}
inline void TrajCtrlDebugPort::_internal_set_steerangreqyawdeviation_rad(float value) {
  _has_bits_[0] |= 0x02000000u;
  steerangreqyawdeviation_rad_ = value;
}
inline void TrajCtrlDebugPort::set_steerangreqyawdeviation_rad(float value) {
  _internal_set_steerangreqyawdeviation_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqYawDeviation_rad)
}

// optional float steerAngReqLateralDeviation_rad = 1656;
inline bool TrajCtrlDebugPort::_internal_has_steerangreqlateraldeviation_rad() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_steerangreqlateraldeviation_rad() const {
  return _internal_has_steerangreqlateraldeviation_rad();
}
inline void TrajCtrlDebugPort::clear_steerangreqlateraldeviation_rad() {
  steerangreqlateraldeviation_rad_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TrajCtrlDebugPort::_internal_steerangreqlateraldeviation_rad() const {
  return steerangreqlateraldeviation_rad_;
}
inline float TrajCtrlDebugPort::steerangreqlateraldeviation_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqLateralDeviation_rad)
  return _internal_steerangreqlateraldeviation_rad();
}
inline void TrajCtrlDebugPort::_internal_set_steerangreqlateraldeviation_rad(float value) {
  _has_bits_[0] |= 0x00001000u;
  steerangreqlateraldeviation_rad_ = value;
}
inline void TrajCtrlDebugPort::set_steerangreqlateraldeviation_rad(float value) {
  _internal_set_steerangreqlateraldeviation_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqLateralDeviation_rad)
}

// optional float steerAngReqCurvature_rad = 1998;
inline bool TrajCtrlDebugPort::_internal_has_steerangreqcurvature_rad() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_steerangreqcurvature_rad() const {
  return _internal_has_steerangreqcurvature_rad();
}
inline void TrajCtrlDebugPort::clear_steerangreqcurvature_rad() {
  steerangreqcurvature_rad_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float TrajCtrlDebugPort::_internal_steerangreqcurvature_rad() const {
  return steerangreqcurvature_rad_;
}
inline float TrajCtrlDebugPort::steerangreqcurvature_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqCurvature_rad)
  return _internal_steerangreqcurvature_rad();
}
inline void TrajCtrlDebugPort::_internal_set_steerangreqcurvature_rad(float value) {
  _has_bits_[0] |= 0x00080000u;
  steerangreqcurvature_rad_ = value;
}
inline void TrajCtrlDebugPort::set_steerangreqcurvature_rad(float value) {
  _internal_set_steerangreqcurvature_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.steerAngReqCurvature_rad)
}

// optional uint32 currentTrajectoryIndex_nu = 3781;
inline bool TrajCtrlDebugPort::_internal_has_currenttrajectoryindex_nu() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_currenttrajectoryindex_nu() const {
  return _internal_has_currenttrajectoryindex_nu();
}
inline void TrajCtrlDebugPort::clear_currenttrajectoryindex_nu() {
  currenttrajectoryindex_nu_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::_internal_currenttrajectoryindex_nu() const {
  return currenttrajectoryindex_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::currenttrajectoryindex_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.currentTrajectoryIndex_nu)
  return _internal_currenttrajectoryindex_nu();
}
inline void TrajCtrlDebugPort::_internal_set_currenttrajectoryindex_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  currenttrajectoryindex_nu_ = value;
}
inline void TrajCtrlDebugPort::set_currenttrajectoryindex_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_currenttrajectoryindex_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.currentTrajectoryIndex_nu)
}

// optional uint32 pathControlRequestMode_nu = 3162;
inline bool TrajCtrlDebugPort::_internal_has_pathcontrolrequestmode_nu() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_pathcontrolrequestmode_nu() const {
  return _internal_has_pathcontrolrequestmode_nu();
}
inline void TrajCtrlDebugPort::clear_pathcontrolrequestmode_nu() {
  pathcontrolrequestmode_nu_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::_internal_pathcontrolrequestmode_nu() const {
  return pathcontrolrequestmode_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::pathcontrolrequestmode_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.pathControlRequestMode_nu)
  return _internal_pathcontrolrequestmode_nu();
}
inline void TrajCtrlDebugPort::_internal_set_pathcontrolrequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  pathcontrolrequestmode_nu_ = value;
}
inline void TrajCtrlDebugPort::set_pathcontrolrequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pathcontrolrequestmode_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.pathControlRequestMode_nu)
}

// optional uint32 rawSteerAngleRequestMode_nu = 2356;
inline bool TrajCtrlDebugPort::_internal_has_rawsteeranglerequestmode_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_rawsteeranglerequestmode_nu() const {
  return _internal_has_rawsteeranglerequestmode_nu();
}
inline void TrajCtrlDebugPort::clear_rawsteeranglerequestmode_nu() {
  rawsteeranglerequestmode_nu_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::_internal_rawsteeranglerequestmode_nu() const {
  return rawsteeranglerequestmode_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::rawsteeranglerequestmode_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.rawSteerAngleRequestMode_nu)
  return _internal_rawsteeranglerequestmode_nu();
}
inline void TrajCtrlDebugPort::_internal_set_rawsteeranglerequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  rawsteeranglerequestmode_nu_ = value;
}
inline void TrajCtrlDebugPort::set_rawsteeranglerequestmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rawsteeranglerequestmode_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.rawSteerAngleRequestMode_nu)
}

// optional uint32 rateAndAccelerationLimitatMode = 2303;
inline bool TrajCtrlDebugPort::_internal_has_rateandaccelerationlimitatmode() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_rateandaccelerationlimitatmode() const {
  return _internal_has_rateandaccelerationlimitatmode();
}
inline void TrajCtrlDebugPort::clear_rateandaccelerationlimitatmode() {
  rateandaccelerationlimitatmode_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::_internal_rateandaccelerationlimitatmode() const {
  return rateandaccelerationlimitatmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::rateandaccelerationlimitatmode() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.rateAndAccelerationLimitatMode)
  return _internal_rateandaccelerationlimitatmode();
}
inline void TrajCtrlDebugPort::_internal_set_rateandaccelerationlimitatmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  rateandaccelerationlimitatmode_ = value;
}
inline void TrajCtrlDebugPort::set_rateandaccelerationlimitatmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rateandaccelerationlimitatmode(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.rateAndAccelerationLimitatMode)
}

// optional uint32 comfStandStillSteeringMode_nu = 3748;
inline bool TrajCtrlDebugPort::_internal_has_comfstandstillsteeringmode_nu() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_comfstandstillsteeringmode_nu() const {
  return _internal_has_comfstandstillsteeringmode_nu();
}
inline void TrajCtrlDebugPort::clear_comfstandstillsteeringmode_nu() {
  comfstandstillsteeringmode_nu_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::_internal_comfstandstillsteeringmode_nu() const {
  return comfstandstillsteeringmode_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::comfstandstillsteeringmode_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.comfStandStillSteeringMode_nu)
  return _internal_comfstandstillsteeringmode_nu();
}
inline void TrajCtrlDebugPort::_internal_set_comfstandstillsteeringmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  comfstandstillsteeringmode_nu_ = value;
}
inline void TrajCtrlDebugPort::set_comfstandstillsteeringmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_comfstandstillsteeringmode_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.comfStandStillSteeringMode_nu)
}

// optional uint32 comfStandstillSteeringExtrapolationMode_nu = 495;
inline bool TrajCtrlDebugPort::_internal_has_comfstandstillsteeringextrapolationmode_nu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_comfstandstillsteeringextrapolationmode_nu() const {
  return _internal_has_comfstandstillsteeringextrapolationmode_nu();
}
inline void TrajCtrlDebugPort::clear_comfstandstillsteeringextrapolationmode_nu() {
  comfstandstillsteeringextrapolationmode_nu_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::_internal_comfstandstillsteeringextrapolationmode_nu() const {
  return comfstandstillsteeringextrapolationmode_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajCtrlDebugPort::comfstandstillsteeringextrapolationmode_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.comfStandstillSteeringExtrapolationMode_nu)
  return _internal_comfstandstillsteeringextrapolationmode_nu();
}
inline void TrajCtrlDebugPort::_internal_set_comfstandstillsteeringextrapolationmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  comfstandstillsteeringextrapolationmode_nu_ = value;
}
inline void TrajCtrlDebugPort::set_comfstandstillsteeringextrapolationmode_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_comfstandstillsteeringextrapolationmode_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.comfStandstillSteeringExtrapolationMode_nu)
}

// optional bool driverInterventionProcessed_nu = 3469;
inline bool TrajCtrlDebugPort::_internal_has_driverinterventionprocessed_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_driverinterventionprocessed_nu() const {
  return _internal_has_driverinterventionprocessed_nu();
}
inline void TrajCtrlDebugPort::clear_driverinterventionprocessed_nu() {
  driverinterventionprocessed_nu_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrajCtrlDebugPort::_internal_driverinterventionprocessed_nu() const {
  return driverinterventionprocessed_nu_;
}
inline bool TrajCtrlDebugPort::driverinterventionprocessed_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.driverInterventionProcessed_nu)
  return _internal_driverinterventionprocessed_nu();
}
inline void TrajCtrlDebugPort::_internal_set_driverinterventionprocessed_nu(bool value) {
  _has_bits_[0] |= 0x00000020u;
  driverinterventionprocessed_nu_ = value;
}
inline void TrajCtrlDebugPort::set_driverinterventionprocessed_nu(bool value) {
  _internal_set_driverinterventionprocessed_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.driverInterventionProcessed_nu)
}

// optional bool driverInterventionDetected_nu = 1957;
inline bool TrajCtrlDebugPort::_internal_has_driverinterventiondetected_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_driverinterventiondetected_nu() const {
  return _internal_has_driverinterventiondetected_nu();
}
inline void TrajCtrlDebugPort::clear_driverinterventiondetected_nu() {
  driverinterventiondetected_nu_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TrajCtrlDebugPort::_internal_driverinterventiondetected_nu() const {
  return driverinterventiondetected_nu_;
}
inline bool TrajCtrlDebugPort::driverinterventiondetected_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.driverInterventionDetected_nu)
  return _internal_driverinterventiondetected_nu();
}
inline void TrajCtrlDebugPort::_internal_set_driverinterventiondetected_nu(bool value) {
  _has_bits_[0] |= 0x00000040u;
  driverinterventiondetected_nu_ = value;
}
inline void TrajCtrlDebugPort::set_driverinterventiondetected_nu(bool value) {
  _internal_set_driverinterventiondetected_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.driverInterventionDetected_nu)
}

// optional bool free1 = 304;
inline bool TrajCtrlDebugPort::_internal_has_free1() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_free1() const {
  return _internal_has_free1();
}
inline void TrajCtrlDebugPort::clear_free1() {
  free1_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TrajCtrlDebugPort::_internal_free1() const {
  return free1_;
}
inline bool TrajCtrlDebugPort::free1() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.free1)
  return _internal_free1();
}
inline void TrajCtrlDebugPort::_internal_set_free1(bool value) {
  _has_bits_[0] |= 0x00000080u;
  free1_ = value;
}
inline void TrajCtrlDebugPort::set_free1(bool value) {
  _internal_set_free1(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.free1)
}

// optional bool free2 = 339;
inline bool TrajCtrlDebugPort::_internal_has_free2() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_free2() const {
  return _internal_has_free2();
}
inline void TrajCtrlDebugPort::clear_free2() {
  free2_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TrajCtrlDebugPort::_internal_free2() const {
  return free2_;
}
inline bool TrajCtrlDebugPort::free2() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.free2)
  return _internal_free2();
}
inline void TrajCtrlDebugPort::_internal_set_free2(bool value) {
  _has_bits_[0] |= 0x00000100u;
  free2_ = value;
}
inline void TrajCtrlDebugPort::set_free2(bool value) {
  _internal_set_free2(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.free2)
}

// optional bool gearCorrect_nu = 1631;
inline bool TrajCtrlDebugPort::_internal_has_gearcorrect_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_gearcorrect_nu() const {
  return _internal_has_gearcorrect_nu();
}
inline void TrajCtrlDebugPort::clear_gearcorrect_nu() {
  gearcorrect_nu_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TrajCtrlDebugPort::_internal_gearcorrect_nu() const {
  return gearcorrect_nu_;
}
inline bool TrajCtrlDebugPort::gearcorrect_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.gearCorrect_nu)
  return _internal_gearcorrect_nu();
}
inline void TrajCtrlDebugPort::_internal_set_gearcorrect_nu(bool value) {
  _has_bits_[0] |= 0x00002000u;
  gearcorrect_nu_ = value;
}
inline void TrajCtrlDebugPort::set_gearcorrect_nu(bool value) {
  _internal_set_gearcorrect_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.gearCorrect_nu)
}

// optional bool standstillSteeringDesired_nu = 3161;
inline bool TrajCtrlDebugPort::_internal_has_standstillsteeringdesired_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_standstillsteeringdesired_nu() const {
  return _internal_has_standstillsteeringdesired_nu();
}
inline void TrajCtrlDebugPort::clear_standstillsteeringdesired_nu() {
  standstillsteeringdesired_nu_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool TrajCtrlDebugPort::_internal_standstillsteeringdesired_nu() const {
  return standstillsteeringdesired_nu_;
}
inline bool TrajCtrlDebugPort::standstillsteeringdesired_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.standstillSteeringDesired_nu)
  return _internal_standstillsteeringdesired_nu();
}
inline void TrajCtrlDebugPort::_internal_set_standstillsteeringdesired_nu(bool value) {
  _has_bits_[0] |= 0x00004000u;
  standstillsteeringdesired_nu_ = value;
}
inline void TrajCtrlDebugPort::set_standstillsteeringdesired_nu(bool value) {
  _internal_set_standstillsteeringdesired_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.standstillSteeringDesired_nu)
}

// optional bool distanceControlFinished_nu = 348;
inline bool TrajCtrlDebugPort::_internal_has_distancecontrolfinished_nu() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_distancecontrolfinished_nu() const {
  return _internal_has_distancecontrolfinished_nu();
}
inline void TrajCtrlDebugPort::clear_distancecontrolfinished_nu() {
  distancecontrolfinished_nu_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool TrajCtrlDebugPort::_internal_distancecontrolfinished_nu() const {
  return distancecontrolfinished_nu_;
}
inline bool TrajCtrlDebugPort::distancecontrolfinished_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.distanceControlFinished_nu)
  return _internal_distancecontrolfinished_nu();
}
inline void TrajCtrlDebugPort::_internal_set_distancecontrolfinished_nu(bool value) {
  _has_bits_[0] |= 0x00008000u;
  distancecontrolfinished_nu_ = value;
}
inline void TrajCtrlDebugPort::set_distancecontrolfinished_nu(bool value) {
  _internal_set_distancecontrolfinished_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.distanceControlFinished_nu)
}

// optional bool standstillHoldCur_nu = 2401;
inline bool TrajCtrlDebugPort::_internal_has_standstillholdcur_nu() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_standstillholdcur_nu() const {
  return _internal_has_standstillholdcur_nu();
}
inline void TrajCtrlDebugPort::clear_standstillholdcur_nu() {
  standstillholdcur_nu_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool TrajCtrlDebugPort::_internal_standstillholdcur_nu() const {
  return standstillholdcur_nu_;
}
inline bool TrajCtrlDebugPort::standstillholdcur_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.standstillHoldCur_nu)
  return _internal_standstillholdcur_nu();
}
inline void TrajCtrlDebugPort::_internal_set_standstillholdcur_nu(bool value) {
  _has_bits_[0] |= 0x00010000u;
  standstillholdcur_nu_ = value;
}
inline void TrajCtrlDebugPort::set_standstillholdcur_nu(bool value) {
  _internal_set_standstillholdcur_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.standstillHoldCur_nu)
}

// optional bool finalVehicleStateReached_nu = 880;
inline bool TrajCtrlDebugPort::_internal_has_finalvehiclestatereached_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_finalvehiclestatereached_nu() const {
  return _internal_has_finalvehiclestatereached_nu();
}
inline void TrajCtrlDebugPort::clear_finalvehiclestatereached_nu() {
  finalvehiclestatereached_nu_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TrajCtrlDebugPort::_internal_finalvehiclestatereached_nu() const {
  return finalvehiclestatereached_nu_;
}
inline bool TrajCtrlDebugPort::finalvehiclestatereached_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.finalVehicleStateReached_nu)
  return _internal_finalvehiclestatereached_nu();
}
inline void TrajCtrlDebugPort::_internal_set_finalvehiclestatereached_nu(bool value) {
  _has_bits_[0] |= 0x00000200u;
  finalvehiclestatereached_nu_ = value;
}
inline void TrajCtrlDebugPort::set_finalvehiclestatereached_nu(bool value) {
  _internal_set_finalvehiclestatereached_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.finalVehicleStateReached_nu)
}

// optional bool outsideTrajectoryStart_nu = 1122;
inline bool TrajCtrlDebugPort::_internal_has_outsidetrajectorystart_nu() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_outsidetrajectorystart_nu() const {
  return _internal_has_outsidetrajectorystart_nu();
}
inline void TrajCtrlDebugPort::clear_outsidetrajectorystart_nu() {
  outsidetrajectorystart_nu_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TrajCtrlDebugPort::_internal_outsidetrajectorystart_nu() const {
  return outsidetrajectorystart_nu_;
}
inline bool TrajCtrlDebugPort::outsidetrajectorystart_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.outsideTrajectoryStart_nu)
  return _internal_outsidetrajectorystart_nu();
}
inline void TrajCtrlDebugPort::_internal_set_outsidetrajectorystart_nu(bool value) {
  _has_bits_[0] |= 0x00000400u;
  outsidetrajectorystart_nu_ = value;
}
inline void TrajCtrlDebugPort::set_outsidetrajectorystart_nu(bool value) {
  _internal_set_outsidetrajectorystart_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.outsideTrajectoryStart_nu)
}

// optional bool outsideTrajectoryEnd_nu = 2694;
inline bool TrajCtrlDebugPort::_internal_has_outsidetrajectoryend_nu() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrajCtrlDebugPort::has_outsidetrajectoryend_nu() const {
  return _internal_has_outsidetrajectoryend_nu();
}
inline void TrajCtrlDebugPort::clear_outsidetrajectoryend_nu() {
  outsidetrajectoryend_nu_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TrajCtrlDebugPort::_internal_outsidetrajectoryend_nu() const {
  return outsidetrajectoryend_nu_;
}
inline bool TrajCtrlDebugPort::outsidetrajectoryend_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.outsideTrajectoryEnd_nu)
  return _internal_outsidetrajectoryend_nu();
}
inline void TrajCtrlDebugPort::_internal_set_outsidetrajectoryend_nu(bool value) {
  _has_bits_[0] |= 0x00000800u;
  outsidetrajectoryend_nu_ = value;
}
inline void TrajCtrlDebugPort::set_outsidetrajectoryend_nu(bool value) {
  _internal_set_outsidetrajectoryend_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort.outsideTrajectoryEnd_nu)
}

// -------------------------------------------------------------------

// TrajCtrlDebugPort_array_port

// repeated .pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort data = 2703;
inline int TrajCtrlDebugPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int TrajCtrlDebugPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void TrajCtrlDebugPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* TrajCtrlDebugPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort >*
TrajCtrlDebugPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port.data)
  return &data_;
}
inline const ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort& TrajCtrlDebugPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort& TrajCtrlDebugPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* TrajCtrlDebugPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* TrajCtrlDebugPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort >&
TrajCtrlDebugPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace traj_ctrl_debug_port
}  // namespace ap_trjctl
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto
