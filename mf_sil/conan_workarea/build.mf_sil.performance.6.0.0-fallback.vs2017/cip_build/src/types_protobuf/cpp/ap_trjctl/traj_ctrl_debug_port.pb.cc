// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/traj_ctrl_debug_port.proto

#include "ap_trjctl/traj_ctrl_debug_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_trjctl {
namespace traj_ctrl_debug_port {
class TrajCtrlDebugPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajCtrlDebugPort> _instance;
} _TrajCtrlDebugPort_default_instance_;
class TrajCtrlDebugPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajCtrlDebugPort_array_port> _instance;
} _TrajCtrlDebugPort_array_port_default_instance_;
}  // namespace traj_ctrl_debug_port
}  // namespace ap_trjctl
}  // namespace pb
static void InitDefaultsscc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::traj_ctrl_debug_port::_TrajCtrlDebugPort_default_instance_;
    new (ptr) ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_TrajCtrlDebugPort_array_port_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::traj_ctrl_debug_port::_TrajCtrlDebugPort_array_port_default_instance_;
    new (ptr) ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajCtrlDebugPort_array_port_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajCtrlDebugPort_array_port_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto}, {
      &scc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, debugint_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, debugfloat_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, currentdeviation_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, orientationerror_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, velocitylimitreqinterpoltraj_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, distancetostopreqinterextrapoltraj_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, xinterpoltraj_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, yinterpoltraj_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, curvatureinterpoltraj_1pm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, curvaturepreviewed_1pm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, filteredsteerintervention_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, trajintermediatevalueraw_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, steerangreqraw_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, steerangreqyawdeviation_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, steerangreqlateraldeviation_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, steerangreqcurvature_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, currenttrajectoryindex_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, pathcontrolrequestmode_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, rawsteeranglerequestmode_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, rateandaccelerationlimitatmode_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, comfstandstillsteeringmode_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, comfstandstillsteeringextrapolationmode_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, driverinterventionprocessed_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, driverinterventiondetected_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, free1_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, free2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, gearcorrect_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, standstillsteeringdesired_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, distancecontrolfinished_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, standstillholdcur_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, finalvehiclestatereached_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, outsidetrajectorystart_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort, outsidetrajectoryend_nu_),
  20,
  0,
  ~0u,
  ~0u,
  1,
  2,
  18,
  17,
  4,
  24,
  28,
  23,
  26,
  29,
  30,
  25,
  12,
  19,
  32,
  27,
  22,
  21,
  31,
  3,
  5,
  6,
  7,
  8,
  13,
  14,
  15,
  16,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 40, sizeof(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort)},
  { 75, 81, sizeof(::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::traj_ctrl_debug_port::_TrajCtrlDebugPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::traj_ctrl_debug_port::_TrajCtrlDebugPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$ap_trjctl/traj_ctrl_debug_port.proto\022!"
  "pb.ap_trjctl.traj_ctrl_debug_port\032\027eco/s"
  "ignal_header.proto\"\321\t\n\021TrajCtrlDebugPort"
  "\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader"
  "\030\211\010 \001(\0132\".pb.eco.signal_header.SignalHea"
  "der\022\021\n\010debugInt\030\316\t \003(\021\022\023\n\ndebugFloat\030\371\017 "
  "\003(\002\022\033\n\022currentDeviation_m\030\223\002 \001(\002\022\035\n\024orie"
  "ntationError_rad\030\240\002 \001(\002\022)\n velocityLimit"
  "ReqInterpolTraj_mps\030\220\017 \001(\002\022-\n$distanceTo"
  "StopReqInterExtrapolTraj_m\030\207\017 \001(\002\022\030\n\017xIn"
  "terpolTraj_m\030\324\013 \001(\002\022\030\n\017yInterpolTraj_m\030\250"
  "\026 \001(\002\022\"\n\031curvatureInterpolTraj_1pm\030\255\031 \001("
  "\002\022\037\n\026curvaturePreviewed_1pm\030\202\025 \001(\002\022%\n\034fi"
  "lteredSteerIntervention_nu\030\314\030 \001(\002\022&\n\035tra"
  "jIntermediateValueRaw_perc\030\204\032 \001(\002\022\033\n\022ste"
  "erAngReqRaw_rad\030\312\034 \001(\002\022$\n\033steerAngReqYaw"
  "Deviation_rad\030\240\027 \001(\002\022(\n\037steerAngReqLater"
  "alDeviation_rad\030\370\014 \001(\002\022!\n\030steerAngReqCur"
  "vature_rad\030\316\017 \001(\002\022\"\n\031currentTrajectoryIn"
  "dex_nu\030\305\035 \001(\r\022\"\n\031pathControlRequestMode_"
  "nu\030\332\030 \001(\r\022$\n\033rawSteerAngleRequestMode_nu"
  "\030\264\022 \001(\r\022\'\n\036rateAndAccelerationLimitatMod"
  "e\030\377\021 \001(\r\022&\n\035comfStandStillSteeringMode_n"
  "u\030\244\035 \001(\r\0223\n*comfStandstillSteeringExtrap"
  "olationMode_nu\030\357\003 \001(\r\022\'\n\036driverIntervent"
  "ionProcessed_nu\030\215\033 \001(\010\022&\n\035driverInterven"
  "tionDetected_nu\030\245\017 \001(\010\022\016\n\005free1\030\260\002 \001(\010\022\016"
  "\n\005free2\030\323\002 \001(\010\022\027\n\016gearCorrect_nu\030\337\014 \001(\010\022"
  "%\n\034standstillSteeringDesired_nu\030\331\030 \001(\010\022#"
  "\n\032distanceControlFinished_nu\030\334\002 \001(\010\022\035\n\024s"
  "tandstillHoldCur_nu\030\341\022 \001(\010\022$\n\033finalVehic"
  "leStateReached_nu\030\360\006 \001(\010\022\"\n\031outsideTraje"
  "ctoryStart_nu\030\342\010 \001(\010\022 \n\027outsideTrajector"
  "yEnd_nu\030\206\025 \001(\010\"c\n\034TrajCtrlDebugPort_arra"
  "y_port\022C\n\004data\030\217\025 \003(\01324.pb.ap_trjctl.tra"
  "j_ctrl_debug_port.TrajCtrlDebugPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_sccs[2] = {
  &scc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.base,
  &scc_info_TrajCtrlDebugPort_array_port_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_once;
static bool descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto = {
  &descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_initialized, descriptor_table_protodef_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto, "ap_trjctl/traj_ctrl_debug_port.proto", 1435,
  &descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_once, descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_sccs, descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto::offsets,
  file_level_metadata_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto, 2, file_level_enum_descriptors_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto, file_level_service_descriptors_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto), true);
namespace pb {
namespace ap_trjctl {
namespace traj_ctrl_debug_port {

// ===================================================================

void TrajCtrlDebugPort::InitAsDefaultInstance() {
  ::pb::ap_trjctl::traj_ctrl_debug_port::_TrajCtrlDebugPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class TrajCtrlDebugPort::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajCtrlDebugPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const TrajCtrlDebugPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currentdeviation_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orientationerror_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_velocitylimitreqinterpoltraj_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_distancetostopreqinterextrapoltraj_m(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_xinterpoltraj_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_yinterpoltraj_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_curvatureinterpoltraj_1pm(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_curvaturepreviewed_1pm(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_filteredsteerintervention_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_trajintermediatevalueraw_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_steerangreqraw_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_steerangreqyawdeviation_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_steerangreqlateraldeviation_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steerangreqcurvature_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_currenttrajectoryindex_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_pathcontrolrequestmode_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_rawsteeranglerequestmode_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_rateandaccelerationlimitatmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_comfstandstillsteeringmode_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_comfstandstillsteeringextrapolationmode_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_driverinterventionprocessed_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_driverinterventiondetected_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_free1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_free2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gearcorrect_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_standstillsteeringdesired_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_distancecontrolfinished_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_standstillholdcur_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_finalvehiclestatereached_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_outsidetrajectorystart_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_outsidetrajectoryend_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
TrajCtrlDebugPort::_Internal::ssigheader(const TrajCtrlDebugPort* msg) {
  return *msg->ssigheader_;
}
void TrajCtrlDebugPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TrajCtrlDebugPort::TrajCtrlDebugPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
}
TrajCtrlDebugPort::TrajCtrlDebugPort(const TrajCtrlDebugPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      debugint_(from.debugint_),
      debugfloat_(from.debugfloat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&currentdeviation_m_, &from.currentdeviation_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&currenttrajectoryindex_nu_) -
    reinterpret_cast<char*>(&currentdeviation_m_)) + sizeof(currenttrajectoryindex_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
}

void TrajCtrlDebugPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currenttrajectoryindex_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(currenttrajectoryindex_nu_));
}

TrajCtrlDebugPort::~TrajCtrlDebugPort() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  SharedDtor();
}

void TrajCtrlDebugPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void TrajCtrlDebugPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajCtrlDebugPort& TrajCtrlDebugPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajCtrlDebugPort_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void TrajCtrlDebugPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debugint_.Clear();
  debugfloat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&currentdeviation_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&free1_) -
        reinterpret_cast<char*>(&currentdeviation_m_)) + sizeof(free1_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&free2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distancecontrolfinished_nu_) -
        reinterpret_cast<char*>(&free2_)) + sizeof(distancecontrolfinished_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&standstillholdcur_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curvaturepreviewed_1pm_) -
        reinterpret_cast<char*>(&standstillholdcur_nu_)) + sizeof(curvaturepreviewed_1pm_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&yinterpoltraj_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&comfstandstillsteeringmode_nu_) -
        reinterpret_cast<char*>(&yinterpoltraj_m_)) + sizeof(comfstandstillsteeringmode_nu_));
  }
  currenttrajectoryindex_nu_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajCtrlDebugPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float currentDeviation_m = 275;
      case 275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_currentdeviation_m(&_has_bits_);
          currentdeviation_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float orientationError_rad = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_orientationerror_rad(&_has_bits_);
          orientationerror_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool free1 = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_free1(&_has_bits_);
          free1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool free2 = 339;
      case 339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_free2(&_has_bits_);
          free2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool distanceControlFinished_nu = 348;
      case 348:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_distancecontrolfinished_nu(&_has_bits_);
          distancecontrolfinished_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 comfStandstillSteeringExtrapolationMode_nu = 495;
      case 495:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_comfstandstillsteeringextrapolationmode_nu(&_has_bits_);
          comfstandstillsteeringextrapolationmode_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool finalVehicleStateReached_nu = 880;
      case 880:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_finalvehiclestatereached_nu(&_has_bits_);
          finalvehiclestatereached_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool outsideTrajectoryStart_nu = 1122;
      case 1122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_outsidetrajectorystart_nu(&_has_bits_);
          outsidetrajectorystart_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 debugInt = 1230;
      case 1230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9840>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_debugint(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float xInterpolTraj_m = 1492;
      case 1492:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_xinterpoltraj_m(&_has_bits_);
          xinterpoltraj_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool gearCorrect_nu = 1631;
      case 1631:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_gearcorrect_nu(&_has_bits_);
          gearcorrect_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steerAngReqLateralDeviation_rad = 1656;
      case 1656:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_steerangreqlateraldeviation_rad(&_has_bits_);
          steerangreqlateraldeviation_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distanceToStopReqInterExtrapolTraj_m = 1927;
      case 1927:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_distancetostopreqinterextrapoltraj_m(&_has_bits_);
          distancetostopreqinterextrapoltraj_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocityLimitReqInterpolTraj_mps = 1936;
      case 1936:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_velocitylimitreqinterpoltraj_mps(&_has_bits_);
          velocitylimitreqinterpoltraj_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool driverInterventionDetected_nu = 1957;
      case 1957:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_driverinterventiondetected_nu(&_has_bits_);
          driverinterventiondetected_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steerAngReqCurvature_rad = 1998;
      case 1998:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_steerangreqcurvature_rad(&_has_bits_);
          steerangreqcurvature_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float debugFloat = 2041;
      case 2041:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugfloat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16333>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_debugfloat(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rateAndAccelerationLimitatMode = 2303;
      case 2303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_rateandaccelerationlimitatmode(&_has_bits_);
          rateandaccelerationlimitatmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rawSteerAngleRequestMode_nu = 2356;
      case 2356:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rawsteeranglerequestmode_nu(&_has_bits_);
          rawsteeranglerequestmode_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool standstillHoldCur_nu = 2401;
      case 2401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_standstillholdcur_nu(&_has_bits_);
          standstillholdcur_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float curvaturePreviewed_1pm = 2690;
      case 2690:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_curvaturepreviewed_1pm(&_has_bits_);
          curvaturepreviewed_1pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool outsideTrajectoryEnd_nu = 2694;
      case 2694:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_outsidetrajectoryend_nu(&_has_bits_);
          outsidetrajectoryend_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float yInterpolTraj_m = 2856;
      case 2856:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_yinterpoltraj_m(&_has_bits_);
          yinterpoltraj_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steerAngReqYawDeviation_rad = 2976;
      case 2976:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_steerangreqyawdeviation_rad(&_has_bits_);
          steerangreqyawdeviation_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float filteredSteerIntervention_nu = 3148;
      case 3148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_filteredsteerintervention_nu(&_has_bits_);
          filteredsteerintervention_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool standstillSteeringDesired_nu = 3161;
      case 3161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_standstillsteeringdesired_nu(&_has_bits_);
          standstillsteeringdesired_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pathControlRequestMode_nu = 3162;
      case 3162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_pathcontrolrequestmode_nu(&_has_bits_);
          pathcontrolrequestmode_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float curvatureInterpolTraj_1pm = 3245;
      case 3245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_curvatureinterpoltraj_1pm(&_has_bits_);
          curvatureinterpoltraj_1pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float trajIntermediateValueRaw_perc = 3332;
      case 3332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_trajintermediatevalueraw_perc(&_has_bits_);
          trajintermediatevalueraw_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool driverInterventionProcessed_nu = 3469;
      case 3469:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_driverinterventionprocessed_nu(&_has_bits_);
          driverinterventionprocessed_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steerAngReqRaw_rad = 3658;
      case 3658:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_steerangreqraw_rad(&_has_bits_);
          steerangreqraw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 comfStandStillSteeringMode_nu = 3748;
      case 3748:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_comfstandstillsteeringmode_nu(&_has_bits_);
          comfstandstillsteeringmode_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 currentTrajectoryIndex_nu = 3781;
      case 3781:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_currenttrajectoryindex_nu(&_has_bits_);
          currenttrajectoryindex_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajCtrlDebugPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float currentDeviation_m = 275;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(275, this->_internal_currentdeviation_m(), target);
  }

  // optional float orientationError_rad = 288;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(288, this->_internal_orientationerror_rad(), target);
  }

  // optional bool free1 = 304;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(304, this->_internal_free1(), target);
  }

  // optional bool free2 = 339;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(339, this->_internal_free2(), target);
  }

  // optional bool distanceControlFinished_nu = 348;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(348, this->_internal_distancecontrolfinished_nu(), target);
  }

  // optional uint32 comfStandstillSteeringExtrapolationMode_nu = 495;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(495, this->_internal_comfstandstillsteeringextrapolationmode_nu(), target);
  }

  // optional bool finalVehicleStateReached_nu = 880;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(880, this->_internal_finalvehiclestatereached_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional bool outsideTrajectoryStart_nu = 1122;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1122, this->_internal_outsidetrajectorystart_nu(), target);
  }

  // repeated sint32 debugInt = 1230;
  for (int i = 0, n = this->_internal_debugint_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1230, this->_internal_debugint(i), target);
  }

  // optional float xInterpolTraj_m = 1492;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1492, this->_internal_xinterpoltraj_m(), target);
  }

  // optional bool gearCorrect_nu = 1631;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1631, this->_internal_gearcorrect_nu(), target);
  }

  // optional float steerAngReqLateralDeviation_rad = 1656;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1656, this->_internal_steerangreqlateraldeviation_rad(), target);
  }

  // optional float distanceToStopReqInterExtrapolTraj_m = 1927;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1927, this->_internal_distancetostopreqinterextrapoltraj_m(), target);
  }

  // optional float velocityLimitReqInterpolTraj_mps = 1936;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1936, this->_internal_velocitylimitreqinterpoltraj_mps(), target);
  }

  // optional bool driverInterventionDetected_nu = 1957;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1957, this->_internal_driverinterventiondetected_nu(), target);
  }

  // optional float steerAngReqCurvature_rad = 1998;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1998, this->_internal_steerangreqcurvature_rad(), target);
  }

  // repeated float debugFloat = 2041;
  for (int i = 0, n = this->_internal_debugfloat_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2041, this->_internal_debugfloat(i), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional uint32 rateAndAccelerationLimitatMode = 2303;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2303, this->_internal_rateandaccelerationlimitatmode(), target);
  }

  // optional uint32 rawSteerAngleRequestMode_nu = 2356;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2356, this->_internal_rawsteeranglerequestmode_nu(), target);
  }

  // optional bool standstillHoldCur_nu = 2401;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2401, this->_internal_standstillholdcur_nu(), target);
  }

  // optional float curvaturePreviewed_1pm = 2690;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2690, this->_internal_curvaturepreviewed_1pm(), target);
  }

  // optional bool outsideTrajectoryEnd_nu = 2694;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2694, this->_internal_outsidetrajectoryend_nu(), target);
  }

  // optional float yInterpolTraj_m = 2856;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2856, this->_internal_yinterpoltraj_m(), target);
  }

  // optional float steerAngReqYawDeviation_rad = 2976;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2976, this->_internal_steerangreqyawdeviation_rad(), target);
  }

  // optional float filteredSteerIntervention_nu = 3148;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3148, this->_internal_filteredsteerintervention_nu(), target);
  }

  // optional bool standstillSteeringDesired_nu = 3161;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3161, this->_internal_standstillsteeringdesired_nu(), target);
  }

  // optional uint32 pathControlRequestMode_nu = 3162;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3162, this->_internal_pathcontrolrequestmode_nu(), target);
  }

  // optional float curvatureInterpolTraj_1pm = 3245;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3245, this->_internal_curvatureinterpoltraj_1pm(), target);
  }

  // optional float trajIntermediateValueRaw_perc = 3332;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3332, this->_internal_trajintermediatevalueraw_perc(), target);
  }

  // optional bool driverInterventionProcessed_nu = 3469;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3469, this->_internal_driverinterventionprocessed_nu(), target);
  }

  // optional float steerAngReqRaw_rad = 3658;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3658, this->_internal_steerangreqraw_rad(), target);
  }

  // optional uint32 comfStandStillSteeringMode_nu = 3748;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3748, this->_internal_comfstandstillsteeringmode_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 currentTrajectoryIndex_nu = 3781;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3781, this->_internal_currenttrajectoryindex_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  return target;
}

size_t TrajCtrlDebugPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 debugInt = 1230;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->debugint_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugint_size());
    total_size += data_size;
  }

  // repeated float debugFloat = 2041;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_debugfloat_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugfloat_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float currentDeviation_m = 275;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float orientationError_rad = 288;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional uint32 comfStandstillSteeringExtrapolationMode_nu = 495;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_comfstandstillsteeringextrapolationmode_nu());
    }

    // optional float xInterpolTraj_m = 1492;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional bool driverInterventionProcessed_nu = 3469;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool driverInterventionDetected_nu = 1957;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool free1 = 304;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool free2 = 339;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool finalVehicleStateReached_nu = 880;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool outsideTrajectoryStart_nu = 1122;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool outsideTrajectoryEnd_nu = 2694;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional float steerAngReqLateralDeviation_rad = 1656;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional bool gearCorrect_nu = 1631;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool standstillSteeringDesired_nu = 3161;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool distanceControlFinished_nu = 348;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool standstillHoldCur_nu = 2401;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional float distanceToStopReqInterExtrapolTraj_m = 1927;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float velocityLimitReqInterpolTraj_mps = 1936;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float steerAngReqCurvature_rad = 1998;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 rateAndAccelerationLimitatMode = 2303;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rateandaccelerationlimitatmode());
    }

    // optional uint32 rawSteerAngleRequestMode_nu = 2356;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rawsteeranglerequestmode_nu());
    }

    // optional float curvaturePreviewed_1pm = 2690;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float yInterpolTraj_m = 2856;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float steerAngReqYawDeviation_rad = 2976;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float filteredSteerIntervention_nu = 3148;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional uint32 pathControlRequestMode_nu = 3162;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pathcontrolrequestmode_nu());
    }

    // optional float curvatureInterpolTraj_1pm = 3245;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float trajIntermediateValueRaw_perc = 3332;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float steerAngReqRaw_rad = 3658;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional uint32 comfStandStillSteeringMode_nu = 3748;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_comfstandstillsteeringmode_nu());
    }

  }
  // optional uint32 currentTrajectoryIndex_nu = 3781;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_currenttrajectoryindex_nu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajCtrlDebugPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajCtrlDebugPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajCtrlDebugPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
    MergeFrom(*source);
  }
}

void TrajCtrlDebugPort::MergeFrom(const TrajCtrlDebugPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debugint_.MergeFrom(from.debugint_);
  debugfloat_.MergeFrom(from.debugfloat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      currentdeviation_m_ = from.currentdeviation_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      orientationerror_rad_ = from.orientationerror_rad_;
    }
    if (cached_has_bits & 0x00000008u) {
      comfstandstillsteeringextrapolationmode_nu_ = from.comfstandstillsteeringextrapolationmode_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      xinterpoltraj_m_ = from.xinterpoltraj_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      driverinterventionprocessed_nu_ = from.driverinterventionprocessed_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      driverinterventiondetected_nu_ = from.driverinterventiondetected_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      free1_ = from.free1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      free2_ = from.free2_;
    }
    if (cached_has_bits & 0x00000200u) {
      finalvehiclestatereached_nu_ = from.finalvehiclestatereached_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      outsidetrajectorystart_nu_ = from.outsidetrajectorystart_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      outsidetrajectoryend_nu_ = from.outsidetrajectoryend_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      steerangreqlateraldeviation_rad_ = from.steerangreqlateraldeviation_rad_;
    }
    if (cached_has_bits & 0x00002000u) {
      gearcorrect_nu_ = from.gearcorrect_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      standstillsteeringdesired_nu_ = from.standstillsteeringdesired_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      distancecontrolfinished_nu_ = from.distancecontrolfinished_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      standstillholdcur_nu_ = from.standstillholdcur_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      distancetostopreqinterextrapoltraj_m_ = from.distancetostopreqinterextrapoltraj_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      velocitylimitreqinterpoltraj_mps_ = from.velocitylimitreqinterpoltraj_mps_;
    }
    if (cached_has_bits & 0x00080000u) {
      steerangreqcurvature_rad_ = from.steerangreqcurvature_rad_;
    }
    if (cached_has_bits & 0x00100000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00200000u) {
      rateandaccelerationlimitatmode_ = from.rateandaccelerationlimitatmode_;
    }
    if (cached_has_bits & 0x00400000u) {
      rawsteeranglerequestmode_nu_ = from.rawsteeranglerequestmode_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      curvaturepreviewed_1pm_ = from.curvaturepreviewed_1pm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      yinterpoltraj_m_ = from.yinterpoltraj_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      steerangreqyawdeviation_rad_ = from.steerangreqyawdeviation_rad_;
    }
    if (cached_has_bits & 0x04000000u) {
      filteredsteerintervention_nu_ = from.filteredsteerintervention_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      pathcontrolrequestmode_nu_ = from.pathcontrolrequestmode_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      curvatureinterpoltraj_1pm_ = from.curvatureinterpoltraj_1pm_;
    }
    if (cached_has_bits & 0x20000000u) {
      trajintermediatevalueraw_perc_ = from.trajintermediatevalueraw_perc_;
    }
    if (cached_has_bits & 0x40000000u) {
      steerangreqraw_rad_ = from.steerangreqraw_rad_;
    }
    if (cached_has_bits & 0x80000000u) {
      comfstandstillsteeringmode_nu_ = from.comfstandstillsteeringmode_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_currenttrajectoryindex_nu()) {
    _internal_set_currenttrajectoryindex_nu(from._internal_currenttrajectoryindex_nu());
  }
}

void TrajCtrlDebugPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajCtrlDebugPort::CopyFrom(const TrajCtrlDebugPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajCtrlDebugPort::IsInitialized() const {
  return true;
}

void TrajCtrlDebugPort::InternalSwap(TrajCtrlDebugPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  debugint_.InternalSwap(&other->debugint_);
  debugfloat_.InternalSwap(&other->debugfloat_);
  swap(ssigheader_, other->ssigheader_);
  swap(currentdeviation_m_, other->currentdeviation_m_);
  swap(orientationerror_rad_, other->orientationerror_rad_);
  swap(comfstandstillsteeringextrapolationmode_nu_, other->comfstandstillsteeringextrapolationmode_nu_);
  swap(xinterpoltraj_m_, other->xinterpoltraj_m_);
  swap(driverinterventionprocessed_nu_, other->driverinterventionprocessed_nu_);
  swap(driverinterventiondetected_nu_, other->driverinterventiondetected_nu_);
  swap(free1_, other->free1_);
  swap(free2_, other->free2_);
  swap(finalvehiclestatereached_nu_, other->finalvehiclestatereached_nu_);
  swap(outsidetrajectorystart_nu_, other->outsidetrajectorystart_nu_);
  swap(outsidetrajectoryend_nu_, other->outsidetrajectoryend_nu_);
  swap(steerangreqlateraldeviation_rad_, other->steerangreqlateraldeviation_rad_);
  swap(gearcorrect_nu_, other->gearcorrect_nu_);
  swap(standstillsteeringdesired_nu_, other->standstillsteeringdesired_nu_);
  swap(distancecontrolfinished_nu_, other->distancecontrolfinished_nu_);
  swap(standstillholdcur_nu_, other->standstillholdcur_nu_);
  swap(distancetostopreqinterextrapoltraj_m_, other->distancetostopreqinterextrapoltraj_m_);
  swap(velocitylimitreqinterpoltraj_mps_, other->velocitylimitreqinterpoltraj_mps_);
  swap(steerangreqcurvature_rad_, other->steerangreqcurvature_rad_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(rateandaccelerationlimitatmode_, other->rateandaccelerationlimitatmode_);
  swap(rawsteeranglerequestmode_nu_, other->rawsteeranglerequestmode_nu_);
  swap(curvaturepreviewed_1pm_, other->curvaturepreviewed_1pm_);
  swap(yinterpoltraj_m_, other->yinterpoltraj_m_);
  swap(steerangreqyawdeviation_rad_, other->steerangreqyawdeviation_rad_);
  swap(filteredsteerintervention_nu_, other->filteredsteerintervention_nu_);
  swap(pathcontrolrequestmode_nu_, other->pathcontrolrequestmode_nu_);
  swap(curvatureinterpoltraj_1pm_, other->curvatureinterpoltraj_1pm_);
  swap(trajintermediatevalueraw_perc_, other->trajintermediatevalueraw_perc_);
  swap(steerangreqraw_rad_, other->steerangreqraw_rad_);
  swap(comfstandstillsteeringmode_nu_, other->comfstandstillsteeringmode_nu_);
  swap(currenttrajectoryindex_nu_, other->currenttrajectoryindex_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajCtrlDebugPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajCtrlDebugPort_array_port::InitAsDefaultInstance() {
}
class TrajCtrlDebugPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajCtrlDebugPort_array_port>()._has_bits_);
};

TrajCtrlDebugPort_array_port::TrajCtrlDebugPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
}
TrajCtrlDebugPort_array_port::TrajCtrlDebugPort_array_port(const TrajCtrlDebugPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
}

void TrajCtrlDebugPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajCtrlDebugPort_array_port_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.base);
}

TrajCtrlDebugPort_array_port::~TrajCtrlDebugPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  SharedDtor();
}

void TrajCtrlDebugPort_array_port::SharedDtor() {
}

void TrajCtrlDebugPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajCtrlDebugPort_array_port& TrajCtrlDebugPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajCtrlDebugPort_array_port_ap_5ftrjctl_2ftraj_5fctrl_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void TrajCtrlDebugPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajCtrlDebugPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort data = 2703;
      case 2703:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajCtrlDebugPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort data = 2703;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2703, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  return target;
}

size_t TrajCtrlDebugPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort data = 2703;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajCtrlDebugPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajCtrlDebugPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajCtrlDebugPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
    MergeFrom(*source);
  }
}

void TrajCtrlDebugPort_array_port::MergeFrom(const TrajCtrlDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TrajCtrlDebugPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajCtrlDebugPort_array_port::CopyFrom(const TrajCtrlDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.traj_ctrl_debug_port.TrajCtrlDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajCtrlDebugPort_array_port::IsInitialized() const {
  return true;
}

void TrajCtrlDebugPort_array_port::InternalSwap(TrajCtrlDebugPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajCtrlDebugPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace traj_ctrl_debug_port
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort* Arena::CreateMaybeMessage< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::traj_ctrl_debug_port::TrajCtrlDebugPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
