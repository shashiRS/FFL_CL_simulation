// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_trjctl/fc_trjctl_params.proto

#include "ap_trjctl/fc_trjctl_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2ffc_5ftrjctl_5fsys_5ffunc_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FC_TRJCTL_Sys_Func_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fsys_5ffunc_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftrjctl_2ffc_5ftrjctl_5fvehicle_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FC_TRJCTL_Vehicle_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fvehicle_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_trjctl {
namespace fc_trjctl_params {
class FC_TRJCTL_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TRJCTL_Params> _instance;
} _FC_TRJCTL_Params_default_instance_;
class FC_TRJCTL_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TRJCTL_Params_array_port> _instance;
} _FC_TRJCTL_Params_array_port_default_instance_;
}  // namespace fc_trjctl_params
}  // namespace ap_trjctl
}  // namespace pb
static void InitDefaultsscc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::fc_trjctl_params::_FC_TRJCTL_Params_default_instance_;
    new (ptr) ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_FC_TRJCTL_Vehicle_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fvehicle_5fparams_2eproto.base,
      &scc_info_FC_TRJCTL_Sys_Func_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fsys_5ffunc_5fparams_2eproto.base,}};

static void InitDefaultsscc_info_FC_TRJCTL_Params_array_port_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_trjctl::fc_trjctl_params::_FC_TRJCTL_Params_array_port_default_instance_;
    new (ptr) ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TRJCTL_Params_array_port_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TRJCTL_Params_array_port_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto}, {
      &scc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_maneuv_finished_time_drv_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_maneuv_finished_limit_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_maneuv_v_thresh_reset_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_maneuv_d_thresh_reset_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_maneuv_finished_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_num_control_gains_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_gain_velvec_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_gain_yaw_deviation_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_gain_lat_deviation_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_fail_max_lat_error_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_fail_max_yaw_error_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_steer_angle_t_filt_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pi_yaw_deviation_t_filt_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_filt_factor_max_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_filt_fac_vel_limit_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_orient_ctrl_end_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_orient_ctrl_init_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_first_steer_accur_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_first_steer_vel_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_first_steer_acc_radps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_curv_preview_factor_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_curv_preview_min_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_secure_finished_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_steer_interv_active_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_steer_interv_filt_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_steer_interv_rise_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_steer_interv_fall_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_filt_fac_traj_step_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_active_control_min_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_vl_ramp_up_vel_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_vl_vel_ramp_limit_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_vl_ramp_up_dist_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_min_parking_vel_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_min_steer_vel_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_fake_data_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_fl_type_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_fl_red_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_rl_type_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_rl_red_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_rr_type_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_rr_red_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_fr_type_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drv_resist_fr_red_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_steer_saturate_thresh_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_steer_saturate_rate_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_max_steer_acc_radps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_rate_limit_factor_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_curv_prev_factor_add_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_curv_prev_reduced_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_fail_max_long_overshoot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_comp_tire_def_factor_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_maneuv_finished_hyst_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_min_dist_req_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_feat_wait_for_contact_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_wfc_overshoot_length_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_wfc_overshoot_dist_thres_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_wfc_vdy_dist_thres_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_wfc_vdy_drive_off_thres_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_feat_ws_vel_reduced_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_wfc_ws_vel_dist_thresh_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_wfc_ws_vel_limit_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_hack_ws_last_stroke_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_no_comf_steer_ws_thres_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drive_off_distance_thres_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_drive_off_velo_thres_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_handshake_wait_thres_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_pc_velo_preview_time_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_leaving_path_before_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, ap_c_leaving_path_behind_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, vehicleparams_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params, sysfuncparams_),
  44,
  0,
  28,
  24,
  39,
  14,
  41,
  36,
  ~0u,
  ~0u,
  ~0u,
  6,
  13,
  16,
  63,
  37,
  43,
  64,
  50,
  65,
  49,
  26,
  8,
  29,
  9,
  53,
  45,
  38,
  67,
  15,
  25,
  54,
  23,
  55,
  27,
  57,
  56,
  3,
  30,
  31,
  35,
  34,
  5,
  68,
  10,
  47,
  58,
  60,
  7,
  4,
  19,
  61,
  48,
  17,
  42,
  20,
  51,
  46,
  69,
  66,
  21,
  52,
  11,
  22,
  32,
  12,
  62,
  59,
  18,
  40,
  33,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 78, sizeof(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params)},
  { 151, 157, sizeof(::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::fc_trjctl_params::_FC_TRJCTL_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_trjctl::fc_trjctl_params::_FC_TRJCTL_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ap_trjctl/fc_trjctl_params.proto\022\035pb.a"
  "p_trjctl.fc_trjctl_params\032\027eco/signal_he"
  "ader.proto\032(ap_trjctl/fc_trjctl_vehicle_"
  "params.proto\032)ap_trjctl/fc_trjctl_sys_fu"
  "nc_params.proto\"\221\027\n\020FC_TRJCTL_Params\022\030\n\017"
  "uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 "
  "\001(\0132\".pb.eco.signal_header.SignalHeader\022"
  "(\n\037AP_C_MANEUV_FINISHED_TIME_DRV_S\030\317\n \001("
  "\002\022%\n\034AP_C_MANEUV_FINISHED_LIMIT_M\030\373\010 \001(\002"
  "\022\'\n\036AP_C_MANEUV_V_THRESH_RESET_MPS\030\211\020 \001("
  "\002\022%\n\034AP_C_MANEUV_D_THRESH_RESET_M\030\322\005 \001(\002"
  "\022$\n\033AP_C_MANEUV_FINISHED_TIME_S\030\246\020 \001(\002\022%"
  "\n\034AP_C_PC_NUM_CONTROL_GAINS_NU\030\354\r \001(\r\022 \n"
  "\027AP_C_PC_GAIN_VELVEC_MPS\030\235\022 \003(\002\022&\n\035AP_C_"
  "PC_GAIN_YAW_DEVIATION_NU\030\336\035 \003(\002\022&\n\035AP_C_"
  "PC_GAIN_LAT_DEVIATION_NU\030\201\021 \003(\002\022%\n\034AP_C_"
  "PC_FAIL_MAX_LAT_ERROR_M\030\355\002 \001(\002\022\'\n\036AP_C_P"
  "C_FAIL_MAX_YAW_ERROR_RAD\030\315\005 \001(\002\022%\n\034AP_C_"
  "PC_STEER_ANGLE_T_FILT_S\030\266\006 \001(\002\022\'\n\036AP_C_P"
  "I_YAW_DEVIATION_T_FILT_S\030\204\030 \001(\002\022#\n\032AP_C_"
  "PC_FILT_FACTOR_MAX_NU\030\332\016 \001(\002\022\'\n\036AP_C_PC_"
  "FILT_FAC_VEL_LIMIT_MPS\030\303\020 \001(\002\022\'\n\036AP_C_PC"
  "_ORIENT_CTRL_END_DIST_M\030\353\032 \001(\002\022(\n\037AP_C_P"
  "C_ORIENT_CTRL_INIT_DIST_M\030\325\022 \001(\002\022&\n\035AP_C"
  "_PC_FIRST_STEER_ACCUR_RAD\030\213\033 \001(\002\022&\n\035AP_C"
  "_PC_FIRST_STEER_VEL_RADPS\030\324\022 \001(\002\022\'\n\036AP_C"
  "_PC_FIRST_STEER_ACC_RADPS2\030\270\t \001(\002\022\'\n\036AP_"
  "C_PC_CURV_PREVIEW_FACTOR_NU\030\326\003 \001(\002\022#\n\032AP"
  "_C_PC_CURV_PREVIEW_MIN_M\030\213\013 \001(\002\022$\n\033AP_C_"
  "SECURE_FINISHED_TIME_S\030\340\003 \001(\002\022$\n\033AP_C_ST"
  "EER_INTERV_ACTIVE_NU\030\305\023 \001(\010\022&\n\035AP_C_STEE"
  "R_INTERV_FILT_TIME_S\030\203\021 \001(\002\022\"\n\031AP_C_STEE"
  "R_INTERV_RISE_NU\030\267\017 \001(\002\022\"\n\031AP_C_STEER_IN"
  "TERV_FALL_NU\030\234\035 \001(\002\022&\n\035AP_C_PC_FILT_FAC_"
  "TRAJ_STEP_NU\030\221\006 \001(\002\022\'\n\036AP_C_ACTIVE_CONTR"
  "OL_MIN_TIME_S\030\215\t \001(\002\022\037\n\026AP_C_VL_RAMP_UP_"
  "VEL_NU\030\356\037 \001(\010\022$\n\033AP_C_VL_VEL_RAMP_LIMIT_"
  "MPS2\030\341\010 \001(\002\022 \n\027AP_C_VL_RAMP_UP_DIST_NU\030\252"
  "\030 \001(\010\022!\n\030AP_C_MIN_PARKING_VEL_MPS\030\335\t \001(\002"
  "\022$\n\033AP_C_PC_MIN_STEER_VEL_RADPS\030\376\023 \001(\002\022%"
  "\n\034AP_C_DRV_RESIST_FAKE_DATA_NU\030\350\001 \001(\010\022#\n"
  "\032AP_C_DRV_RESIST_FL_TYPE_NU\030\222\037 \001(\r\022&\n\035AP"
  "_C_DRV_RESIST_FL_RED_DIST_M\030\363\013 \001(\002\022#\n\032AP"
  "_C_DRV_RESIST_RL_TYPE_NU\030\261\014 \001(\r\022&\n\035AP_C_"
  "DRV_RESIST_RL_RED_DIST_M\030\352\r \001(\002\022#\n\032AP_C_"
  "DRV_RESIST_RR_TYPE_NU\030\270\r \001(\r\022&\n\035AP_C_DRV"
  "_RESIST_RR_RED_DIST_M\030\254\002 \001(\002\022#\n\032AP_C_DRV"
  "_RESIST_FR_TYPE_NU\030\233\036 \001(\r\022&\n\035AP_C_DRV_RE"
  "SIST_FR_RED_DIST_M\030\265\004 \001(\002\022\'\n\036AP_C_STEER_"
  "SATURATE_THRESH_RAD\030\346\021 \001(\002\022\'\n\036AP_C_STEER"
  "_SATURATE_RATE_RADPS\030\363\025 \001(\002\022%\n\034AP_C_PC_M"
  "AX_STEER_ACC_RADPS2\030\306\026 \001(\002\022%\n\034AP_C_PC_RA"
  "TE_LIMIT_FACTOR_NU\030\207\003 \001(\002\022(\n\037AP_C_PC_CUR"
  "V_PREV_FACTOR_ADD_NU\030\226\002 \001(\002\022%\n\034AP_C_PC_C"
  "URV_PREV_REDUCED_NU\030\257\t \001(\010\022\'\n\036AP_C_FAIL_"
  "MAX_LONG_OVERSHOOT_M\030\223\027 \001(\002\022%\n\034AP_C_COMP"
  "_TIRE_DEF_FACTOR_NU\030\202\022 \001(\002\022$\n\033AP_C_MANEU"
  "V_FINISHED_HYST_M\030\312\006 \001(\002\022\034\n\023AP_C_MIN_DIS"
  "T_REQ_M\030\262\020 \001(\002\022&\n\035AP_C_FEAT_WAIT_FOR_CON"
  "TACT_NU\030\302\016 \001(\010\022$\n\033AP_C_WFC_OVERSHOOT_LEN"
  "GTH_M\030\212\023 \001(\002\022(\n\037AP_C_WFC_OVERSHOOT_DIST_"
  "THRES_M\030\241\021 \001(\002\022\"\n\031AP_C_WFC_VDY_DIST_THRE"
  "S_M\030\345\036 \001(\002\022\'\n\036AP_C_WFC_VDY_DRIVE_OFF_THR"
  "ES_M\030\216\034 \001(\002\022$\n\033AP_C_FEAT_WS_VEL_REDUCED_"
  "NU\030\206\007 \001(\010\022&\n\035AP_C_WFC_WS_VEL_DIST_THRESH"
  "_M\030\232\023 \001(\002\022\"\n\031AP_C_WFC_WS_VEL_LIMIT_MPS\030\304"
  "\004 \001(\002\022#\n\033AP_C_HACK_WS_LAST_STROKE_NU\030\003 \001"
  "(\010\022&\n\035AP_C_NO_COMF_STEER_WS_THRES_M\030\224\r \001"
  "(\002\022(\n\037AP_C_DRIVE_OFF_DISTANCE_THRES_M\030\206\005"
  " \001(\002\022&\n\035AP_C_DRIVE_OFF_VELO_THRES_MPS\030\200\030"
  " \001(\002\022)\n AP_C_HANDSHAKE_WAIT_THRES_TIME_S"
  "\030\223\026 \001(\002\022$\n\033AP_C_PC_VELO_PREVIEW_TIME_S\030\361"
  "\006 \001(\002\022#\n\032AP_C_LEAVING_PATH_BEFORE_M\030\232\020 \001"
  "(\002\022#\n\032AP_C_LEAVING_PATH_BEHIND_M\030\231\r \001(\002\022"
  "W\n\rvehicleParams\030\347\032 \001(\0132\?.pb.ap_trjctl.f"
  "c_trjctl_vehicle_params.FC_TRJCTL_Vehicl"
  "e_Params\022Y\n\rsysFuncParams\030\262\013 \001(\0132A.pb.ap"
  "_trjctl.fc_trjctl_sys_func_params.FC_TRJ"
  "CTL_Sys_Func_Params\"]\n\033FC_TRJCTL_Params_"
  "array_port\022>\n\004data\030\305\007 \003(\0132/.pb.ap_trjctl"
  ".fc_trjctl_params.FC_TRJCTL_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_deps[3] = {
  &::descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fsys_5ffunc_5fparams_2eproto,
  &::descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fvehicle_5fparams_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.base,
  &scc_info_FC_TRJCTL_Params_array_port_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_once;
static bool descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto = {
  &descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_initialized, descriptor_table_protodef_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto, "ap_trjctl/fc_trjctl_params.proto", 3234,
  &descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_once, descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_sccs, descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto::offsets,
  file_level_metadata_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto, 2, file_level_enum_descriptors_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto, file_level_service_descriptors_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto), true);
namespace pb {
namespace ap_trjctl {
namespace fc_trjctl_params {

// ===================================================================

void FC_TRJCTL_Params::InitAsDefaultInstance() {
  ::pb::ap_trjctl::fc_trjctl_params::_FC_TRJCTL_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::ap_trjctl::fc_trjctl_params::_FC_TRJCTL_Params_default_instance_._instance.get_mutable()->vehicleparams_ = const_cast< ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params*>(
      ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params::internal_default_instance());
  ::pb::ap_trjctl::fc_trjctl_params::_FC_TRJCTL_Params_default_instance_._instance.get_mutable()->sysfuncparams_ = const_cast< ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params*>(
      ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params::internal_default_instance());
}
class FC_TRJCTL_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TRJCTL_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_TRJCTL_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_c_maneuv_finished_time_drv_s(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ap_c_maneuv_finished_limit_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ap_c_maneuv_v_thresh_reset_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_ap_c_maneuv_d_thresh_reset_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_c_maneuv_finished_time_s(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_ap_c_pc_num_control_gains_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ap_c_pc_fail_max_lat_error_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_c_pc_fail_max_yaw_error_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ap_c_pc_steer_angle_t_filt_s(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ap_c_pi_yaw_deviation_t_filt_s(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_ap_c_pc_filt_factor_max_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ap_c_pc_filt_fac_vel_limit_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_ap_c_pc_orient_ctrl_end_dist_m(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_ap_c_pc_orient_ctrl_init_dist_m(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_ap_c_pc_first_steer_accur_rad(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_ap_c_pc_first_steer_vel_radps(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_ap_c_pc_first_steer_acc_radps2(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ap_c_pc_curv_preview_factor_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_c_pc_curv_preview_min_m(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ap_c_secure_finished_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ap_c_steer_interv_active_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_ap_c_steer_interv_filt_time_s(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_ap_c_steer_interv_rise_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ap_c_steer_interv_fall_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_ap_c_pc_filt_fac_traj_step_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ap_c_active_control_min_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ap_c_vl_ramp_up_vel_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_ap_c_vl_vel_ramp_limit_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ap_c_vl_ramp_up_dist_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_ap_c_min_parking_vel_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ap_c_pc_min_steer_vel_radps(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_ap_c_drv_resist_fake_data_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_ap_c_drv_resist_fl_type_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_c_drv_resist_fl_red_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ap_c_drv_resist_rl_type_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ap_c_drv_resist_rl_red_dist_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ap_c_drv_resist_rr_type_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ap_c_drv_resist_rr_red_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_c_drv_resist_fr_type_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_ap_c_drv_resist_fr_red_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ap_c_steer_saturate_thresh_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_ap_c_steer_saturate_rate_radps(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_ap_c_pc_max_steer_acc_radps2(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_ap_c_pc_rate_limit_factor_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_c_pc_curv_prev_factor_add_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_c_pc_curv_prev_reduced_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ap_c_fail_max_long_overshoot_m(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_ap_c_comp_tire_def_factor_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_ap_c_maneuv_finished_hyst_m(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ap_c_min_dist_req_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_ap_c_feat_wait_for_contact_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ap_c_wfc_overshoot_length_m(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_ap_c_wfc_overshoot_dist_thres_m(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_ap_c_wfc_vdy_dist_thres_m(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_ap_c_wfc_vdy_drive_off_thres_m(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_ap_c_feat_ws_vel_reduced_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ap_c_wfc_ws_vel_dist_thresh_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_ap_c_wfc_ws_vel_limit_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ap_c_hack_ws_last_stroke_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ap_c_no_comf_steer_ws_thres_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ap_c_drive_off_distance_thres_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ap_c_drive_off_velo_thres_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_ap_c_handshake_wait_thres_time_s(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_ap_c_pc_velo_preview_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ap_c_leaving_path_before_m(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_ap_c_leaving_path_behind_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params& vehicleparams(const FC_TRJCTL_Params* msg);
  static void set_has_vehicleparams(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params& sysfuncparams(const FC_TRJCTL_Params* msg);
  static void set_has_sysfuncparams(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_TRJCTL_Params::_Internal::ssigheader(const FC_TRJCTL_Params* msg) {
  return *msg->ssigheader_;
}
const ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params&
FC_TRJCTL_Params::_Internal::vehicleparams(const FC_TRJCTL_Params* msg) {
  return *msg->vehicleparams_;
}
const ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params&
FC_TRJCTL_Params::_Internal::sysfuncparams(const FC_TRJCTL_Params* msg) {
  return *msg->sysfuncparams_;
}
void FC_TRJCTL_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FC_TRJCTL_Params::clear_vehicleparams() {
  if (vehicleparams_ != nullptr) vehicleparams_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FC_TRJCTL_Params::clear_sysfuncparams() {
  if (sysfuncparams_ != nullptr) sysfuncparams_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FC_TRJCTL_Params::FC_TRJCTL_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
}
FC_TRJCTL_Params::FC_TRJCTL_Params(const FC_TRJCTL_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ap_c_pc_gain_lat_deviation_nu_(from.ap_c_pc_gain_lat_deviation_nu_),
      ap_c_pc_gain_velvec_mps_(from.ap_c_pc_gain_velvec_mps_),
      ap_c_pc_gain_yaw_deviation_nu_(from.ap_c_pc_gain_yaw_deviation_nu_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_sysfuncparams()) {
    sysfuncparams_ = new ::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params(*from.sysfuncparams_);
  } else {
    sysfuncparams_ = nullptr;
  }
  if (from._internal_has_vehicleparams()) {
    vehicleparams_ = new ::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params(*from.vehicleparams_);
  } else {
    vehicleparams_ = nullptr;
  }
  ::memcpy(&ap_c_drv_resist_fl_type_nu_, &from.ap_c_drv_resist_fl_type_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_c_wfc_vdy_dist_thres_m_) -
    reinterpret_cast<char*>(&ap_c_drv_resist_fl_type_nu_)) + sizeof(ap_c_wfc_vdy_dist_thres_m_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
}

void FC_TRJCTL_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_c_wfc_vdy_dist_thres_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(ap_c_wfc_vdy_dist_thres_m_));
}

FC_TRJCTL_Params::~FC_TRJCTL_Params() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  SharedDtor();
}

void FC_TRJCTL_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete sysfuncparams_;
  if (this != internal_default_instance()) delete vehicleparams_;
}

void FC_TRJCTL_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TRJCTL_Params& FC_TRJCTL_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TRJCTL_Params_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TRJCTL_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ap_c_pc_gain_lat_deviation_nu_.Clear();
  ap_c_pc_gain_velvec_mps_.Clear();
  ap_c_pc_gain_yaw_deviation_nu_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sysfuncparams_ != nullptr);
      sysfuncparams_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vehicleparams_ != nullptr);
      vehicleparams_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&ap_c_drv_resist_fl_type_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_pc_rate_limit_factor_nu_) -
        reinterpret_cast<char*>(&ap_c_drv_resist_fl_type_nu_)) + sizeof(ap_c_pc_rate_limit_factor_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_c_pc_curv_preview_factor_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_pc_filt_fac_traj_step_nu_) -
        reinterpret_cast<char*>(&ap_c_pc_curv_preview_factor_nu_)) + sizeof(ap_c_pc_filt_fac_traj_step_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_c_pc_steer_angle_t_filt_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_vl_vel_ramp_limit_mps2_) -
        reinterpret_cast<char*>(&ap_c_pc_steer_angle_t_filt_s_)) + sizeof(ap_c_vl_vel_ramp_limit_mps2_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_c_maneuv_finished_limit_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_drv_resist_rl_type_nu_) -
        reinterpret_cast<char*>(&ap_c_maneuv_finished_limit_m_)) + sizeof(ap_c_drv_resist_rl_type_nu_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_c_no_comf_steer_ws_thres_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_maneuv_v_thresh_reset_mps_) -
        reinterpret_cast<char*>(&ap_c_no_comf_steer_ws_thres_m_)) + sizeof(ap_c_maneuv_v_thresh_reset_mps_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_c_leaving_path_before_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_steer_saturate_thresh_rad_) -
        reinterpret_cast<char*>(&ap_c_leaving_path_before_m_)) + sizeof(ap_c_steer_saturate_thresh_rad_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_c_comp_tire_def_factor_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_vl_ramp_up_dist_nu_) -
        reinterpret_cast<char*>(&ap_c_comp_tire_def_factor_nu_)) + sizeof(ap_c_vl_ramp_up_dist_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_c_drv_resist_fake_data_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_pi_yaw_deviation_t_filt_s_) -
        reinterpret_cast<char*>(&ap_c_drv_resist_fake_data_nu_)) + sizeof(ap_c_pi_yaw_deviation_t_filt_s_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&ap_c_pc_orient_ctrl_end_dist_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_c_wfc_vdy_dist_thres_m_) -
        reinterpret_cast<char*>(&ap_c_pc_orient_ctrl_end_dist_m_)) + sizeof(ap_c_wfc_vdy_dist_thres_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TRJCTL_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool AP_C_HACK_WS_LAST_STROKE_NU = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ap_c_hack_ws_last_stroke_nu(&_has_bits_);
          ap_c_hack_ws_last_stroke_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AP_C_DRV_RESIST_FAKE_DATA_NU = 232;
      case 232:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ap_c_drv_resist_fake_data_nu(&_has_bits_);
          ap_c_drv_resist_fake_data_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_CURV_PREV_FACTOR_ADD_NU = 278;
      case 278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_c_pc_curv_prev_factor_add_nu(&_has_bits_);
          ap_c_pc_curv_prev_factor_add_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_DRV_RESIST_RR_RED_DIST_M = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_c_drv_resist_rr_red_dist_m(&_has_bits_);
          ap_c_drv_resist_rr_red_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FAIL_MAX_LAT_ERROR_M = 365;
      case 365:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_c_pc_fail_max_lat_error_m(&_has_bits_);
          ap_c_pc_fail_max_lat_error_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_RATE_LIMIT_FACTOR_NU = 391;
      case 391:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_c_pc_rate_limit_factor_nu(&_has_bits_);
          ap_c_pc_rate_limit_factor_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_CURV_PREVIEW_FACTOR_NU = 470;
      case 470:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_c_pc_curv_preview_factor_nu(&_has_bits_);
          ap_c_pc_curv_preview_factor_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_SECURE_FINISHED_TIME_S = 480;
      case 480:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_c_secure_finished_time_s(&_has_bits_);
          ap_c_secure_finished_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_DRV_RESIST_FR_RED_DIST_M = 565;
      case 565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_c_drv_resist_fr_red_dist_m(&_has_bits_);
          ap_c_drv_resist_fr_red_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_WFC_WS_VEL_LIMIT_MPS = 580;
      case 580:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_c_wfc_ws_vel_limit_mps(&_has_bits_);
          ap_c_wfc_ws_vel_limit_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_DRIVE_OFF_DISTANCE_THRES_M = 646;
      case 646:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_c_drive_off_distance_thres_m(&_has_bits_);
          ap_c_drive_off_distance_thres_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FAIL_MAX_YAW_ERROR_RAD = 717;
      case 717:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_c_pc_fail_max_yaw_error_rad(&_has_bits_);
          ap_c_pc_fail_max_yaw_error_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MANEUV_D_THRESH_RESET_M = 722;
      case 722:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_c_maneuv_d_thresh_reset_m(&_has_bits_);
          ap_c_maneuv_d_thresh_reset_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FILT_FAC_TRAJ_STEP_NU = 785;
      case 785:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_c_pc_filt_fac_traj_step_nu(&_has_bits_);
          ap_c_pc_filt_fac_traj_step_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_STEER_ANGLE_T_FILT_S = 822;
      case 822:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_c_pc_steer_angle_t_filt_s(&_has_bits_);
          ap_c_pc_steer_angle_t_filt_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MANEUV_FINISHED_HYST_M = 842;
      case 842:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_c_maneuv_finished_hyst_m(&_has_bits_);
          ap_c_maneuv_finished_hyst_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_VELO_PREVIEW_TIME_S = 881;
      case 881:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_c_pc_velo_preview_time_s(&_has_bits_);
          ap_c_pc_velo_preview_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_C_FEAT_WS_VEL_REDUCED_NU = 902;
      case 902:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ap_c_feat_ws_vel_reduced_nu(&_has_bits_);
          ap_c_feat_ws_vel_reduced_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_VL_VEL_RAMP_LIMIT_MPS2 = 1121;
      case 1121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_c_vl_vel_ramp_limit_mps2(&_has_bits_);
          ap_c_vl_vel_ramp_limit_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MANEUV_FINISHED_LIMIT_M = 1147;
      case 1147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_c_maneuv_finished_limit_m(&_has_bits_);
          ap_c_maneuv_finished_limit_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_ACTIVE_CONTROL_MIN_TIME_S = 1165;
      case 1165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_c_active_control_min_time_s(&_has_bits_);
          ap_c_active_control_min_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_C_PC_CURV_PREV_REDUCED_NU = 1199;
      case 1199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ap_c_pc_curv_prev_reduced_nu(&_has_bits_);
          ap_c_pc_curv_prev_reduced_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FIRST_STEER_ACC_RADPS2 = 1208;
      case 1208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_c_pc_first_steer_acc_radps2(&_has_bits_);
          ap_c_pc_first_steer_acc_radps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MIN_PARKING_VEL_MPS = 1245;
      case 1245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_c_min_parking_vel_mps(&_has_bits_);
          ap_c_min_parking_vel_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MANEUV_FINISHED_TIME_DRV_S = 1359;
      case 1359:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ap_c_maneuv_finished_time_drv_s(&_has_bits_);
          ap_c_maneuv_finished_time_drv_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_CURV_PREVIEW_MIN_M = 1419;
      case 1419:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_c_pc_curv_preview_min_m(&_has_bits_);
          ap_c_pc_curv_preview_min_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.fc_trjctl_sys_func_params.FC_TRJCTL_Sys_Func_Params sysFuncParams = 1458;
      case 1458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sysfuncparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_DRV_RESIST_FL_RED_DIST_M = 1523;
      case 1523:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_c_drv_resist_fl_red_dist_m(&_has_bits_);
          ap_c_drv_resist_fl_red_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_C_DRV_RESIST_RL_TYPE_NU = 1585;
      case 1585:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_ap_c_drv_resist_rl_type_nu(&_has_bits_);
          ap_c_drv_resist_rl_type_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_NO_COMF_STEER_WS_THRES_M = 1684;
      case 1684:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_c_no_comf_steer_ws_thres_m(&_has_bits_);
          ap_c_no_comf_steer_ws_thres_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_LEAVING_PATH_BEHIND_M = 1689;
      case 1689:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_c_leaving_path_behind_m(&_has_bits_);
          ap_c_leaving_path_behind_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_C_DRV_RESIST_RR_TYPE_NU = 1720;
      case 1720:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ap_c_drv_resist_rr_type_nu(&_has_bits_);
          ap_c_drv_resist_rr_type_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_DRV_RESIST_RL_RED_DIST_M = 1770;
      case 1770:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_c_drv_resist_rl_red_dist_m(&_has_bits_);
          ap_c_drv_resist_rl_red_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_C_PC_NUM_CONTROL_GAINS_NU = 1772;
      case 1772:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ap_c_pc_num_control_gains_nu(&_has_bits_);
          ap_c_pc_num_control_gains_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AP_C_FEAT_WAIT_FOR_CONTACT_NU = 1858;
      case 1858:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ap_c_feat_wait_for_contact_nu(&_has_bits_);
          ap_c_feat_wait_for_contact_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FILT_FACTOR_MAX_NU = 1882;
      case 1882:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_c_pc_filt_factor_max_nu(&_has_bits_);
          ap_c_pc_filt_factor_max_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_STEER_INTERV_RISE_NU = 1975;
      case 1975:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_c_steer_interv_rise_nu(&_has_bits_);
          ap_c_steer_interv_rise_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MANEUV_V_THRESH_RESET_MPS = 2057;
      case 2057:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_c_maneuv_v_thresh_reset_mps(&_has_bits_);
          ap_c_maneuv_v_thresh_reset_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_LEAVING_PATH_BEFORE_M = 2074;
      case 2074:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_c_leaving_path_before_m(&_has_bits_);
          ap_c_leaving_path_before_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MANEUV_FINISHED_TIME_S = 2086;
      case 2086:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_c_maneuv_finished_time_s(&_has_bits_);
          ap_c_maneuv_finished_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_MIN_DIST_REQ_M = 2098;
      case 2098:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_c_min_dist_req_m(&_has_bits_);
          ap_c_min_dist_req_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FILT_FAC_VEL_LIMIT_MPS = 2115;
      case 2115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ap_c_pc_filt_fac_vel_limit_mps(&_has_bits_);
          ap_c_pc_filt_fac_vel_limit_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_C_PC_GAIN_LAT_DEVIATION_NU = 2177;
      case 2177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _internal_add_ap_c_pc_gain_lat_deviation_nu(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_c_pc_gain_lat_deviation_nu(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_STEER_INTERV_FILT_TIME_S = 2179;
      case 2179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ap_c_steer_interv_filt_time_s(&_has_bits_);
          ap_c_steer_interv_filt_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_WFC_OVERSHOOT_DIST_THRES_M = 2209;
      case 2209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_c_wfc_overshoot_dist_thres_m(&_has_bits_);
          ap_c_wfc_overshoot_dist_thres_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_STEER_SATURATE_THRESH_RAD = 2278;
      case 2278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_c_steer_saturate_thresh_rad(&_has_bits_);
          ap_c_steer_saturate_thresh_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_COMP_TIRE_DEF_FACTOR_NU = 2306;
      case 2306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_c_comp_tire_def_factor_nu(&_has_bits_);
          ap_c_comp_tire_def_factor_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_C_PC_GAIN_VELVEC_MPS = 2333;
      case 2333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _internal_add_ap_c_pc_gain_velvec_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_c_pc_gain_velvec_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FIRST_STEER_VEL_RADPS = 2388;
      case 2388:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_c_pc_first_steer_vel_radps(&_has_bits_);
          ap_c_pc_first_steer_vel_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_ORIENT_CTRL_INIT_DIST_M = 2389;
      case 2389:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_c_pc_orient_ctrl_init_dist_m(&_has_bits_);
          ap_c_pc_orient_ctrl_init_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_WFC_OVERSHOOT_LENGTH_M = 2442;
      case 2442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_c_wfc_overshoot_length_m(&_has_bits_);
          ap_c_wfc_overshoot_length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_WFC_WS_VEL_DIST_THRESH_M = 2458;
      case 2458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_c_wfc_ws_vel_dist_thresh_m(&_has_bits_);
          ap_c_wfc_ws_vel_dist_thresh_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_C_STEER_INTERV_ACTIVE_NU = 2501;
      case 2501:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ap_c_steer_interv_active_nu(&_has_bits_);
          ap_c_steer_interv_active_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_MIN_STEER_VEL_RADPS = 2558;
      case 2558:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_c_pc_min_steer_vel_radps(&_has_bits_);
          ap_c_pc_min_steer_vel_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_STEER_SATURATE_RATE_RADPS = 2803;
      case 2803:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_c_steer_saturate_rate_radps(&_has_bits_);
          ap_c_steer_saturate_rate_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_HANDSHAKE_WAIT_THRES_TIME_S = 2835;
      case 2835:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_c_handshake_wait_thres_time_s(&_has_bits_);
          ap_c_handshake_wait_thres_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_MAX_STEER_ACC_RADPS2 = 2886;
      case 2886:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_c_pc_max_steer_acc_radps2(&_has_bits_);
          ap_c_pc_max_steer_acc_radps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_FAIL_MAX_LONG_OVERSHOOT_M = 2963;
      case 2963:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_c_fail_max_long_overshoot_m(&_has_bits_);
          ap_c_fail_max_long_overshoot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_DRIVE_OFF_VELO_THRES_MPS = 3072;
      case 3072:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_c_drive_off_velo_thres_mps(&_has_bits_);
          ap_c_drive_off_velo_thres_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PI_YAW_DEVIATION_T_FILT_S = 3076;
      case 3076:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_c_pi_yaw_deviation_t_filt_s(&_has_bits_);
          ap_c_pi_yaw_deviation_t_filt_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_C_VL_RAMP_UP_DIST_NU = 3114;
      case 3114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ap_c_vl_ramp_up_dist_nu(&_has_bits_);
          ap_c_vl_ramp_up_dist_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_trjctl.fc_trjctl_vehicle_params.FC_TRJCTL_Vehicle_Params vehicleParams = 3431;
      case 3431:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicleparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_ORIENT_CTRL_END_DIST_M = 3435;
      case 3435:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_c_pc_orient_ctrl_end_dist_m(&_has_bits_);
          ap_c_pc_orient_ctrl_end_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_PC_FIRST_STEER_ACCUR_RAD = 3467;
      case 3467:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_c_pc_first_steer_accur_rad(&_has_bits_);
          ap_c_pc_first_steer_accur_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_WFC_VDY_DRIVE_OFF_THRES_M = 3598;
      case 3598:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_c_wfc_vdy_drive_off_thres_m(&_has_bits_);
          ap_c_wfc_vdy_drive_off_thres_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_STEER_INTERV_FALL_NU = 3740;
      case 3740:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_c_steer_interv_fall_nu(&_has_bits_);
          ap_c_steer_interv_fall_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_C_PC_GAIN_YAW_DEVIATION_NU = 3806;
      case 3806:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _internal_add_ap_c_pc_gain_yaw_deviation_nu(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_c_pc_gain_yaw_deviation_nu(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_C_DRV_RESIST_FR_TYPE_NU = 3867;
      case 3867:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_ap_c_drv_resist_fr_type_nu(&_has_bits_);
          ap_c_drv_resist_fr_type_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_C_WFC_VDY_DIST_THRES_M = 3941;
      case 3941:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_c_wfc_vdy_dist_thres_m(&_has_bits_);
          ap_c_wfc_vdy_dist_thres_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_C_DRV_RESIST_FL_TYPE_NU = 3986;
      case 3986:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_ap_c_drv_resist_fl_type_nu(&_has_bits_);
          ap_c_drv_resist_fl_type_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AP_C_VL_RAMP_UP_VEL_NU = 4078;
      case 4078:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ap_c_vl_ramp_up_vel_nu(&_has_bits_);
          ap_c_vl_ramp_up_vel_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TRJCTL_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool AP_C_HACK_WS_LAST_STROKE_NU = 3;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ap_c_hack_ws_last_stroke_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool AP_C_DRV_RESIST_FAKE_DATA_NU = 232;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(232, this->_internal_ap_c_drv_resist_fake_data_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float AP_C_PC_CURV_PREV_FACTOR_ADD_NU = 278;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(278, this->_internal_ap_c_pc_curv_prev_factor_add_nu(), target);
  }

  // optional float AP_C_DRV_RESIST_RR_RED_DIST_M = 300;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(300, this->_internal_ap_c_drv_resist_rr_red_dist_m(), target);
  }

  // optional float AP_C_PC_FAIL_MAX_LAT_ERROR_M = 365;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(365, this->_internal_ap_c_pc_fail_max_lat_error_m(), target);
  }

  // optional float AP_C_PC_RATE_LIMIT_FACTOR_NU = 391;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(391, this->_internal_ap_c_pc_rate_limit_factor_nu(), target);
  }

  // optional float AP_C_PC_CURV_PREVIEW_FACTOR_NU = 470;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(470, this->_internal_ap_c_pc_curv_preview_factor_nu(), target);
  }

  // optional float AP_C_SECURE_FINISHED_TIME_S = 480;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(480, this->_internal_ap_c_secure_finished_time_s(), target);
  }

  // optional float AP_C_DRV_RESIST_FR_RED_DIST_M = 565;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(565, this->_internal_ap_c_drv_resist_fr_red_dist_m(), target);
  }

  // optional float AP_C_WFC_WS_VEL_LIMIT_MPS = 580;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(580, this->_internal_ap_c_wfc_ws_vel_limit_mps(), target);
  }

  // optional float AP_C_DRIVE_OFF_DISTANCE_THRES_M = 646;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(646, this->_internal_ap_c_drive_off_distance_thres_m(), target);
  }

  // optional float AP_C_PC_FAIL_MAX_YAW_ERROR_RAD = 717;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(717, this->_internal_ap_c_pc_fail_max_yaw_error_rad(), target);
  }

  // optional float AP_C_MANEUV_D_THRESH_RESET_M = 722;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(722, this->_internal_ap_c_maneuv_d_thresh_reset_m(), target);
  }

  // optional float AP_C_PC_FILT_FAC_TRAJ_STEP_NU = 785;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(785, this->_internal_ap_c_pc_filt_fac_traj_step_nu(), target);
  }

  // optional float AP_C_PC_STEER_ANGLE_T_FILT_S = 822;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(822, this->_internal_ap_c_pc_steer_angle_t_filt_s(), target);
  }

  // optional float AP_C_MANEUV_FINISHED_HYST_M = 842;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(842, this->_internal_ap_c_maneuv_finished_hyst_m(), target);
  }

  // optional float AP_C_PC_VELO_PREVIEW_TIME_S = 881;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(881, this->_internal_ap_c_pc_velo_preview_time_s(), target);
  }

  // optional bool AP_C_FEAT_WS_VEL_REDUCED_NU = 902;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(902, this->_internal_ap_c_feat_ws_vel_reduced_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float AP_C_VL_VEL_RAMP_LIMIT_MPS2 = 1121;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1121, this->_internal_ap_c_vl_vel_ramp_limit_mps2(), target);
  }

  // optional float AP_C_MANEUV_FINISHED_LIMIT_M = 1147;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1147, this->_internal_ap_c_maneuv_finished_limit_m(), target);
  }

  // optional float AP_C_ACTIVE_CONTROL_MIN_TIME_S = 1165;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1165, this->_internal_ap_c_active_control_min_time_s(), target);
  }

  // optional bool AP_C_PC_CURV_PREV_REDUCED_NU = 1199;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1199, this->_internal_ap_c_pc_curv_prev_reduced_nu(), target);
  }

  // optional float AP_C_PC_FIRST_STEER_ACC_RADPS2 = 1208;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1208, this->_internal_ap_c_pc_first_steer_acc_radps2(), target);
  }

  // optional float AP_C_MIN_PARKING_VEL_MPS = 1245;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1245, this->_internal_ap_c_min_parking_vel_mps(), target);
  }

  // optional float AP_C_MANEUV_FINISHED_TIME_DRV_S = 1359;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1359, this->_internal_ap_c_maneuv_finished_time_drv_s(), target);
  }

  // optional float AP_C_PC_CURV_PREVIEW_MIN_M = 1419;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1419, this->_internal_ap_c_pc_curv_preview_min_m(), target);
  }

  // optional .pb.ap_trjctl.fc_trjctl_sys_func_params.FC_TRJCTL_Sys_Func_Params sysFuncParams = 1458;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1458, _Internal::sysfuncparams(this), target, stream);
  }

  // optional float AP_C_DRV_RESIST_FL_RED_DIST_M = 1523;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1523, this->_internal_ap_c_drv_resist_fl_red_dist_m(), target);
  }

  // optional uint32 AP_C_DRV_RESIST_RL_TYPE_NU = 1585;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1585, this->_internal_ap_c_drv_resist_rl_type_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float AP_C_NO_COMF_STEER_WS_THRES_M = 1684;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1684, this->_internal_ap_c_no_comf_steer_ws_thres_m(), target);
  }

  // optional float AP_C_LEAVING_PATH_BEHIND_M = 1689;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1689, this->_internal_ap_c_leaving_path_behind_m(), target);
  }

  // optional uint32 AP_C_DRV_RESIST_RR_TYPE_NU = 1720;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1720, this->_internal_ap_c_drv_resist_rr_type_nu(), target);
  }

  // optional float AP_C_DRV_RESIST_RL_RED_DIST_M = 1770;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1770, this->_internal_ap_c_drv_resist_rl_red_dist_m(), target);
  }

  // optional uint32 AP_C_PC_NUM_CONTROL_GAINS_NU = 1772;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1772, this->_internal_ap_c_pc_num_control_gains_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool AP_C_FEAT_WAIT_FOR_CONTACT_NU = 1858;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1858, this->_internal_ap_c_feat_wait_for_contact_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float AP_C_PC_FILT_FACTOR_MAX_NU = 1882;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1882, this->_internal_ap_c_pc_filt_factor_max_nu(), target);
  }

  // optional float AP_C_STEER_INTERV_RISE_NU = 1975;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1975, this->_internal_ap_c_steer_interv_rise_nu(), target);
  }

  // optional float AP_C_MANEUV_V_THRESH_RESET_MPS = 2057;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2057, this->_internal_ap_c_maneuv_v_thresh_reset_mps(), target);
  }

  // optional float AP_C_LEAVING_PATH_BEFORE_M = 2074;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2074, this->_internal_ap_c_leaving_path_before_m(), target);
  }

  // optional float AP_C_MANEUV_FINISHED_TIME_S = 2086;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2086, this->_internal_ap_c_maneuv_finished_time_s(), target);
  }

  // optional float AP_C_MIN_DIST_REQ_M = 2098;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2098, this->_internal_ap_c_min_dist_req_m(), target);
  }

  // optional float AP_C_PC_FILT_FAC_VEL_LIMIT_MPS = 2115;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2115, this->_internal_ap_c_pc_filt_fac_vel_limit_mps(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // repeated float AP_C_PC_GAIN_LAT_DEVIATION_NU = 2177;
  for (int i = 0, n = this->_internal_ap_c_pc_gain_lat_deviation_nu_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2177, this->_internal_ap_c_pc_gain_lat_deviation_nu(i), target);
  }

  // optional float AP_C_STEER_INTERV_FILT_TIME_S = 2179;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2179, this->_internal_ap_c_steer_interv_filt_time_s(), target);
  }

  // optional float AP_C_WFC_OVERSHOOT_DIST_THRES_M = 2209;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2209, this->_internal_ap_c_wfc_overshoot_dist_thres_m(), target);
  }

  // optional float AP_C_STEER_SATURATE_THRESH_RAD = 2278;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2278, this->_internal_ap_c_steer_saturate_thresh_rad(), target);
  }

  // optional float AP_C_COMP_TIRE_DEF_FACTOR_NU = 2306;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2306, this->_internal_ap_c_comp_tire_def_factor_nu(), target);
  }

  // repeated float AP_C_PC_GAIN_VELVEC_MPS = 2333;
  for (int i = 0, n = this->_internal_ap_c_pc_gain_velvec_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2333, this->_internal_ap_c_pc_gain_velvec_mps(i), target);
  }

  // optional float AP_C_PC_FIRST_STEER_VEL_RADPS = 2388;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2388, this->_internal_ap_c_pc_first_steer_vel_radps(), target);
  }

  // optional float AP_C_PC_ORIENT_CTRL_INIT_DIST_M = 2389;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2389, this->_internal_ap_c_pc_orient_ctrl_init_dist_m(), target);
  }

  // optional float AP_C_WFC_OVERSHOOT_LENGTH_M = 2442;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2442, this->_internal_ap_c_wfc_overshoot_length_m(), target);
  }

  // optional float AP_C_WFC_WS_VEL_DIST_THRESH_M = 2458;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2458, this->_internal_ap_c_wfc_ws_vel_dist_thresh_m(), target);
  }

  // optional bool AP_C_STEER_INTERV_ACTIVE_NU = 2501;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2501, this->_internal_ap_c_steer_interv_active_nu(), target);
  }

  // optional float AP_C_PC_MIN_STEER_VEL_RADPS = 2558;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2558, this->_internal_ap_c_pc_min_steer_vel_radps(), target);
  }

  // optional float AP_C_STEER_SATURATE_RATE_RADPS = 2803;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2803, this->_internal_ap_c_steer_saturate_rate_radps(), target);
  }

  // optional float AP_C_HANDSHAKE_WAIT_THRES_TIME_S = 2835;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2835, this->_internal_ap_c_handshake_wait_thres_time_s(), target);
  }

  // optional float AP_C_PC_MAX_STEER_ACC_RADPS2 = 2886;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2886, this->_internal_ap_c_pc_max_steer_acc_radps2(), target);
  }

  // optional float AP_C_FAIL_MAX_LONG_OVERSHOOT_M = 2963;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2963, this->_internal_ap_c_fail_max_long_overshoot_m(), target);
  }

  // optional float AP_C_DRIVE_OFF_VELO_THRES_MPS = 3072;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3072, this->_internal_ap_c_drive_off_velo_thres_mps(), target);
  }

  // optional float AP_C_PI_YAW_DEVIATION_T_FILT_S = 3076;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3076, this->_internal_ap_c_pi_yaw_deviation_t_filt_s(), target);
  }

  // optional bool AP_C_VL_RAMP_UP_DIST_NU = 3114;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3114, this->_internal_ap_c_vl_ramp_up_dist_nu(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_trjctl.fc_trjctl_vehicle_params.FC_TRJCTL_Vehicle_Params vehicleParams = 3431;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3431, _Internal::vehicleparams(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional float AP_C_PC_ORIENT_CTRL_END_DIST_M = 3435;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3435, this->_internal_ap_c_pc_orient_ctrl_end_dist_m(), target);
  }

  // optional float AP_C_PC_FIRST_STEER_ACCUR_RAD = 3467;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3467, this->_internal_ap_c_pc_first_steer_accur_rad(), target);
  }

  // optional float AP_C_WFC_VDY_DRIVE_OFF_THRES_M = 3598;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3598, this->_internal_ap_c_wfc_vdy_drive_off_thres_m(), target);
  }

  // optional float AP_C_STEER_INTERV_FALL_NU = 3740;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3740, this->_internal_ap_c_steer_interv_fall_nu(), target);
  }

  // repeated float AP_C_PC_GAIN_YAW_DEVIATION_NU = 3806;
  for (int i = 0, n = this->_internal_ap_c_pc_gain_yaw_deviation_nu_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3806, this->_internal_ap_c_pc_gain_yaw_deviation_nu(i), target);
  }

  // optional uint32 AP_C_DRV_RESIST_FR_TYPE_NU = 3867;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3867, this->_internal_ap_c_drv_resist_fr_type_nu(), target);
  }

  // optional float AP_C_WFC_VDY_DIST_THRES_M = 3941;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3941, this->_internal_ap_c_wfc_vdy_dist_thres_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 AP_C_DRV_RESIST_FL_TYPE_NU = 3986;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3986, this->_internal_ap_c_drv_resist_fl_type_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool AP_C_VL_RAMP_UP_VEL_NU = 4078;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4078, this->_internal_ap_c_vl_ramp_up_vel_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  return target;
}

size_t FC_TRJCTL_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float AP_C_PC_GAIN_LAT_DEVIATION_NU = 2177;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_c_pc_gain_lat_deviation_nu_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_c_pc_gain_lat_deviation_nu_size());
    total_size += data_size;
  }

  // repeated float AP_C_PC_GAIN_VELVEC_MPS = 2333;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_c_pc_gain_velvec_mps_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_c_pc_gain_velvec_mps_size());
    total_size += data_size;
  }

  // repeated float AP_C_PC_GAIN_YAW_DEVIATION_NU = 3806;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_c_pc_gain_yaw_deviation_nu_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_c_pc_gain_yaw_deviation_nu_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.ap_trjctl.fc_trjctl_sys_func_params.FC_TRJCTL_Sys_Func_Params sysFuncParams = 1458;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sysfuncparams_);
    }

    // optional .pb.ap_trjctl.fc_trjctl_vehicle_params.FC_TRJCTL_Vehicle_Params vehicleParams = 3431;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicleparams_);
    }

    // optional uint32 AP_C_DRV_RESIST_FL_TYPE_NU = 3986;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_c_drv_resist_fl_type_nu());
    }

    // optional float AP_C_PC_CURV_PREV_FACTOR_ADD_NU = 278;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_DRV_RESIST_RR_RED_DIST_M = 300;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_PC_FAIL_MAX_LAT_ERROR_M = 365;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_PC_RATE_LIMIT_FACTOR_NU = 391;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_C_PC_CURV_PREVIEW_FACTOR_NU = 470;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_SECURE_FINISHED_TIME_S = 480;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_DRV_RESIST_FR_RED_DIST_M = 565;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_WFC_WS_VEL_LIMIT_MPS = 580;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_DRIVE_OFF_DISTANCE_THRES_M = 646;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_PC_FAIL_MAX_YAW_ERROR_RAD = 717;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_MANEUV_D_THRESH_RESET_M = 722;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_PC_FILT_FAC_TRAJ_STEP_NU = 785;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_C_PC_STEER_ANGLE_T_FILT_S = 822;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_MANEUV_FINISHED_HYST_M = 842;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_PC_VELO_PREVIEW_TIME_S = 881;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional bool AP_C_PC_CURV_PREV_REDUCED_NU = 1199;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool AP_C_FEAT_WAIT_FOR_CONTACT_NU = 1858;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool AP_C_FEAT_WS_VEL_REDUCED_NU = 902;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool AP_C_HACK_WS_LAST_STROKE_NU = 3;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional float AP_C_VL_VEL_RAMP_LIMIT_MPS2 = 1121;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_C_MANEUV_FINISHED_LIMIT_M = 1147;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_ACTIVE_CONTROL_MIN_TIME_S = 1165;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_PC_FIRST_STEER_ACC_RADPS2 = 1208;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_MIN_PARKING_VEL_MPS = 1245;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_MANEUV_FINISHED_TIME_DRV_S = 1359;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_PC_CURV_PREVIEW_MIN_M = 1419;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_DRV_RESIST_FL_RED_DIST_M = 1523;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_C_DRV_RESIST_RL_TYPE_NU = 1585;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_c_drv_resist_rl_type_nu());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_C_NO_COMF_STEER_WS_THRES_M = 1684;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_LEAVING_PATH_BEHIND_M = 1689;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_C_DRV_RESIST_RR_TYPE_NU = 1720;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_c_drv_resist_rr_type_nu());
    }

    // optional float AP_C_DRV_RESIST_RL_RED_DIST_M = 1770;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_C_PC_NUM_CONTROL_GAINS_NU = 1772;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_c_pc_num_control_gains_nu());
    }

    // optional float AP_C_PC_FILT_FACTOR_MAX_NU = 1882;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_STEER_INTERV_RISE_NU = 1975;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_C_MANEUV_V_THRESH_RESET_MPS = 2057;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_C_LEAVING_PATH_BEFORE_M = 2074;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_MANEUV_FINISHED_TIME_S = 2086;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_MIN_DIST_REQ_M = 2098;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_PC_FILT_FAC_VEL_LIMIT_MPS = 2115;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float AP_C_STEER_INTERV_FILT_TIME_S = 2179;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_WFC_OVERSHOOT_DIST_THRES_M = 2209;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_STEER_SATURATE_THRESH_RAD = 2278;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_C_COMP_TIRE_DEF_FACTOR_NU = 2306;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_PC_FIRST_STEER_VEL_RADPS = 2388;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_PC_ORIENT_CTRL_INIT_DIST_M = 2389;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_WFC_OVERSHOOT_LENGTH_M = 2442;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_WFC_WS_VEL_DIST_THRESH_M = 2458;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional bool AP_C_STEER_INTERV_ACTIVE_NU = 2501;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 1;
    }

    // optional bool AP_C_VL_RAMP_UP_VEL_NU = 4078;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool AP_C_VL_RAMP_UP_DIST_NU = 3114;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool AP_C_DRV_RESIST_FAKE_DATA_NU = 232;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional float AP_C_PC_MIN_STEER_VEL_RADPS = 2558;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_STEER_SATURATE_RATE_RADPS = 2803;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_HANDSHAKE_WAIT_THRES_TIME_S = 2835;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_PC_MAX_STEER_ACC_RADPS2 = 2886;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_FAIL_MAX_LONG_OVERSHOOT_M = 2963;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_DRIVE_OFF_VELO_THRES_MPS = 3072;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_PI_YAW_DEVIATION_T_FILT_S = 3076;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000003fu) {
    // optional float AP_C_PC_ORIENT_CTRL_END_DIST_M = 3435;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_PC_FIRST_STEER_ACCUR_RAD = 3467;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_WFC_VDY_DRIVE_OFF_THRES_M = 3598;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float AP_C_STEER_INTERV_FALL_NU = 3740;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional uint32 AP_C_DRV_RESIST_FR_TYPE_NU = 3867;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_c_drv_resist_fr_type_nu());
    }

    // optional float AP_C_WFC_VDY_DIST_THRES_M = 3941;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TRJCTL_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TRJCTL_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TRJCTL_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
    MergeFrom(*source);
  }
}

void FC_TRJCTL_Params::MergeFrom(const FC_TRJCTL_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ap_c_pc_gain_lat_deviation_nu_.MergeFrom(from.ap_c_pc_gain_lat_deviation_nu_);
  ap_c_pc_gain_velvec_mps_.MergeFrom(from.ap_c_pc_gain_velvec_mps_);
  ap_c_pc_gain_yaw_deviation_nu_.MergeFrom(from.ap_c_pc_gain_yaw_deviation_nu_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sysfuncparams()->::pb::ap_trjctl::fc_trjctl_sys_func_params::FC_TRJCTL_Sys_Func_Params::MergeFrom(from._internal_sysfuncparams());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vehicleparams()->::pb::ap_trjctl::fc_trjctl_vehicle_params::FC_TRJCTL_Vehicle_Params::MergeFrom(from._internal_vehicleparams());
    }
    if (cached_has_bits & 0x00000008u) {
      ap_c_drv_resist_fl_type_nu_ = from.ap_c_drv_resist_fl_type_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_c_pc_curv_prev_factor_add_nu_ = from.ap_c_pc_curv_prev_factor_add_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_c_drv_resist_rr_red_dist_m_ = from.ap_c_drv_resist_rr_red_dist_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_c_pc_fail_max_lat_error_m_ = from.ap_c_pc_fail_max_lat_error_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_c_pc_rate_limit_factor_nu_ = from.ap_c_pc_rate_limit_factor_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_c_pc_curv_preview_factor_nu_ = from.ap_c_pc_curv_preview_factor_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_c_secure_finished_time_s_ = from.ap_c_secure_finished_time_s_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_c_drv_resist_fr_red_dist_m_ = from.ap_c_drv_resist_fr_red_dist_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_c_wfc_ws_vel_limit_mps_ = from.ap_c_wfc_ws_vel_limit_mps_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_c_drive_off_distance_thres_m_ = from.ap_c_drive_off_distance_thres_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_c_pc_fail_max_yaw_error_rad_ = from.ap_c_pc_fail_max_yaw_error_rad_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_c_maneuv_d_thresh_reset_m_ = from.ap_c_maneuv_d_thresh_reset_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_c_pc_filt_fac_traj_step_nu_ = from.ap_c_pc_filt_fac_traj_step_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_c_pc_steer_angle_t_filt_s_ = from.ap_c_pc_steer_angle_t_filt_s_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_c_maneuv_finished_hyst_m_ = from.ap_c_maneuv_finished_hyst_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_c_pc_velo_preview_time_s_ = from.ap_c_pc_velo_preview_time_s_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_c_pc_curv_prev_reduced_nu_ = from.ap_c_pc_curv_prev_reduced_nu_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_c_feat_wait_for_contact_nu_ = from.ap_c_feat_wait_for_contact_nu_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_c_feat_ws_vel_reduced_nu_ = from.ap_c_feat_ws_vel_reduced_nu_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_c_hack_ws_last_stroke_nu_ = from.ap_c_hack_ws_last_stroke_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_c_vl_vel_ramp_limit_mps2_ = from.ap_c_vl_vel_ramp_limit_mps2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_c_maneuv_finished_limit_m_ = from.ap_c_maneuv_finished_limit_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_c_active_control_min_time_s_ = from.ap_c_active_control_min_time_s_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_c_pc_first_steer_acc_radps2_ = from.ap_c_pc_first_steer_acc_radps2_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_c_min_parking_vel_mps_ = from.ap_c_min_parking_vel_mps_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_c_maneuv_finished_time_drv_s_ = from.ap_c_maneuv_finished_time_drv_s_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_c_pc_curv_preview_min_m_ = from.ap_c_pc_curv_preview_min_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_c_drv_resist_fl_red_dist_m_ = from.ap_c_drv_resist_fl_red_dist_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_c_drv_resist_rl_type_nu_ = from.ap_c_drv_resist_rl_type_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_c_no_comf_steer_ws_thres_m_ = from.ap_c_no_comf_steer_ws_thres_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_c_leaving_path_behind_m_ = from.ap_c_leaving_path_behind_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_c_drv_resist_rr_type_nu_ = from.ap_c_drv_resist_rr_type_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_c_drv_resist_rl_red_dist_m_ = from.ap_c_drv_resist_rl_red_dist_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_c_pc_num_control_gains_nu_ = from.ap_c_pc_num_control_gains_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_c_pc_filt_factor_max_nu_ = from.ap_c_pc_filt_factor_max_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_c_steer_interv_rise_nu_ = from.ap_c_steer_interv_rise_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_c_maneuv_v_thresh_reset_mps_ = from.ap_c_maneuv_v_thresh_reset_mps_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_c_leaving_path_before_m_ = from.ap_c_leaving_path_before_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_c_maneuv_finished_time_s_ = from.ap_c_maneuv_finished_time_s_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_c_min_dist_req_m_ = from.ap_c_min_dist_req_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_c_pc_filt_fac_vel_limit_mps_ = from.ap_c_pc_filt_fac_vel_limit_mps_;
    }
    if (cached_has_bits & 0x00001000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_c_steer_interv_filt_time_s_ = from.ap_c_steer_interv_filt_time_s_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_c_wfc_overshoot_dist_thres_m_ = from.ap_c_wfc_overshoot_dist_thres_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_c_steer_saturate_thresh_rad_ = from.ap_c_steer_saturate_thresh_rad_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_c_comp_tire_def_factor_nu_ = from.ap_c_comp_tire_def_factor_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_c_pc_first_steer_vel_radps_ = from.ap_c_pc_first_steer_vel_radps_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_c_pc_orient_ctrl_init_dist_m_ = from.ap_c_pc_orient_ctrl_init_dist_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_c_wfc_overshoot_length_m_ = from.ap_c_wfc_overshoot_length_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_c_wfc_ws_vel_dist_thresh_m_ = from.ap_c_wfc_ws_vel_dist_thresh_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_c_steer_interv_active_nu_ = from.ap_c_steer_interv_active_nu_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_c_vl_ramp_up_vel_nu_ = from.ap_c_vl_ramp_up_vel_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_c_vl_ramp_up_dist_nu_ = from.ap_c_vl_ramp_up_dist_nu_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_c_drv_resist_fake_data_nu_ = from.ap_c_drv_resist_fake_data_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_c_pc_min_steer_vel_radps_ = from.ap_c_pc_min_steer_vel_radps_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_c_steer_saturate_rate_radps_ = from.ap_c_steer_saturate_rate_radps_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_c_handshake_wait_thres_time_s_ = from.ap_c_handshake_wait_thres_time_s_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_c_pc_max_steer_acc_radps2_ = from.ap_c_pc_max_steer_acc_radps2_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_c_fail_max_long_overshoot_m_ = from.ap_c_fail_max_long_overshoot_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_c_drive_off_velo_thres_mps_ = from.ap_c_drive_off_velo_thres_mps_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_c_pi_yaw_deviation_t_filt_s_ = from.ap_c_pi_yaw_deviation_t_filt_s_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ap_c_pc_orient_ctrl_end_dist_m_ = from.ap_c_pc_orient_ctrl_end_dist_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_c_pc_first_steer_accur_rad_ = from.ap_c_pc_first_steer_accur_rad_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_c_wfc_vdy_drive_off_thres_m_ = from.ap_c_wfc_vdy_drive_off_thres_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_c_steer_interv_fall_nu_ = from.ap_c_steer_interv_fall_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_c_drv_resist_fr_type_nu_ = from.ap_c_drv_resist_fr_type_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_c_wfc_vdy_dist_thres_m_ = from.ap_c_wfc_vdy_dist_thres_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void FC_TRJCTL_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TRJCTL_Params::CopyFrom(const FC_TRJCTL_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TRJCTL_Params::IsInitialized() const {
  return true;
}

void FC_TRJCTL_Params::InternalSwap(FC_TRJCTL_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  ap_c_pc_gain_lat_deviation_nu_.InternalSwap(&other->ap_c_pc_gain_lat_deviation_nu_);
  ap_c_pc_gain_velvec_mps_.InternalSwap(&other->ap_c_pc_gain_velvec_mps_);
  ap_c_pc_gain_yaw_deviation_nu_.InternalSwap(&other->ap_c_pc_gain_yaw_deviation_nu_);
  swap(ssigheader_, other->ssigheader_);
  swap(sysfuncparams_, other->sysfuncparams_);
  swap(vehicleparams_, other->vehicleparams_);
  swap(ap_c_drv_resist_fl_type_nu_, other->ap_c_drv_resist_fl_type_nu_);
  swap(ap_c_pc_curv_prev_factor_add_nu_, other->ap_c_pc_curv_prev_factor_add_nu_);
  swap(ap_c_drv_resist_rr_red_dist_m_, other->ap_c_drv_resist_rr_red_dist_m_);
  swap(ap_c_pc_fail_max_lat_error_m_, other->ap_c_pc_fail_max_lat_error_m_);
  swap(ap_c_pc_rate_limit_factor_nu_, other->ap_c_pc_rate_limit_factor_nu_);
  swap(ap_c_pc_curv_preview_factor_nu_, other->ap_c_pc_curv_preview_factor_nu_);
  swap(ap_c_secure_finished_time_s_, other->ap_c_secure_finished_time_s_);
  swap(ap_c_drv_resist_fr_red_dist_m_, other->ap_c_drv_resist_fr_red_dist_m_);
  swap(ap_c_wfc_ws_vel_limit_mps_, other->ap_c_wfc_ws_vel_limit_mps_);
  swap(ap_c_drive_off_distance_thres_m_, other->ap_c_drive_off_distance_thres_m_);
  swap(ap_c_pc_fail_max_yaw_error_rad_, other->ap_c_pc_fail_max_yaw_error_rad_);
  swap(ap_c_maneuv_d_thresh_reset_m_, other->ap_c_maneuv_d_thresh_reset_m_);
  swap(ap_c_pc_filt_fac_traj_step_nu_, other->ap_c_pc_filt_fac_traj_step_nu_);
  swap(ap_c_pc_steer_angle_t_filt_s_, other->ap_c_pc_steer_angle_t_filt_s_);
  swap(ap_c_maneuv_finished_hyst_m_, other->ap_c_maneuv_finished_hyst_m_);
  swap(ap_c_pc_velo_preview_time_s_, other->ap_c_pc_velo_preview_time_s_);
  swap(ap_c_pc_curv_prev_reduced_nu_, other->ap_c_pc_curv_prev_reduced_nu_);
  swap(ap_c_feat_wait_for_contact_nu_, other->ap_c_feat_wait_for_contact_nu_);
  swap(ap_c_feat_ws_vel_reduced_nu_, other->ap_c_feat_ws_vel_reduced_nu_);
  swap(ap_c_hack_ws_last_stroke_nu_, other->ap_c_hack_ws_last_stroke_nu_);
  swap(ap_c_vl_vel_ramp_limit_mps2_, other->ap_c_vl_vel_ramp_limit_mps2_);
  swap(ap_c_maneuv_finished_limit_m_, other->ap_c_maneuv_finished_limit_m_);
  swap(ap_c_active_control_min_time_s_, other->ap_c_active_control_min_time_s_);
  swap(ap_c_pc_first_steer_acc_radps2_, other->ap_c_pc_first_steer_acc_radps2_);
  swap(ap_c_min_parking_vel_mps_, other->ap_c_min_parking_vel_mps_);
  swap(ap_c_maneuv_finished_time_drv_s_, other->ap_c_maneuv_finished_time_drv_s_);
  swap(ap_c_pc_curv_preview_min_m_, other->ap_c_pc_curv_preview_min_m_);
  swap(ap_c_drv_resist_fl_red_dist_m_, other->ap_c_drv_resist_fl_red_dist_m_);
  swap(ap_c_drv_resist_rl_type_nu_, other->ap_c_drv_resist_rl_type_nu_);
  swap(ap_c_no_comf_steer_ws_thres_m_, other->ap_c_no_comf_steer_ws_thres_m_);
  swap(ap_c_leaving_path_behind_m_, other->ap_c_leaving_path_behind_m_);
  swap(ap_c_drv_resist_rr_type_nu_, other->ap_c_drv_resist_rr_type_nu_);
  swap(ap_c_drv_resist_rl_red_dist_m_, other->ap_c_drv_resist_rl_red_dist_m_);
  swap(ap_c_pc_num_control_gains_nu_, other->ap_c_pc_num_control_gains_nu_);
  swap(ap_c_pc_filt_factor_max_nu_, other->ap_c_pc_filt_factor_max_nu_);
  swap(ap_c_steer_interv_rise_nu_, other->ap_c_steer_interv_rise_nu_);
  swap(ap_c_maneuv_v_thresh_reset_mps_, other->ap_c_maneuv_v_thresh_reset_mps_);
  swap(ap_c_leaving_path_before_m_, other->ap_c_leaving_path_before_m_);
  swap(ap_c_maneuv_finished_time_s_, other->ap_c_maneuv_finished_time_s_);
  swap(ap_c_min_dist_req_m_, other->ap_c_min_dist_req_m_);
  swap(ap_c_pc_filt_fac_vel_limit_mps_, other->ap_c_pc_filt_fac_vel_limit_mps_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ap_c_steer_interv_filt_time_s_, other->ap_c_steer_interv_filt_time_s_);
  swap(ap_c_wfc_overshoot_dist_thres_m_, other->ap_c_wfc_overshoot_dist_thres_m_);
  swap(ap_c_steer_saturate_thresh_rad_, other->ap_c_steer_saturate_thresh_rad_);
  swap(ap_c_comp_tire_def_factor_nu_, other->ap_c_comp_tire_def_factor_nu_);
  swap(ap_c_pc_first_steer_vel_radps_, other->ap_c_pc_first_steer_vel_radps_);
  swap(ap_c_pc_orient_ctrl_init_dist_m_, other->ap_c_pc_orient_ctrl_init_dist_m_);
  swap(ap_c_wfc_overshoot_length_m_, other->ap_c_wfc_overshoot_length_m_);
  swap(ap_c_wfc_ws_vel_dist_thresh_m_, other->ap_c_wfc_ws_vel_dist_thresh_m_);
  swap(ap_c_steer_interv_active_nu_, other->ap_c_steer_interv_active_nu_);
  swap(ap_c_vl_ramp_up_vel_nu_, other->ap_c_vl_ramp_up_vel_nu_);
  swap(ap_c_vl_ramp_up_dist_nu_, other->ap_c_vl_ramp_up_dist_nu_);
  swap(ap_c_drv_resist_fake_data_nu_, other->ap_c_drv_resist_fake_data_nu_);
  swap(ap_c_pc_min_steer_vel_radps_, other->ap_c_pc_min_steer_vel_radps_);
  swap(ap_c_steer_saturate_rate_radps_, other->ap_c_steer_saturate_rate_radps_);
  swap(ap_c_handshake_wait_thres_time_s_, other->ap_c_handshake_wait_thres_time_s_);
  swap(ap_c_pc_max_steer_acc_radps2_, other->ap_c_pc_max_steer_acc_radps2_);
  swap(ap_c_fail_max_long_overshoot_m_, other->ap_c_fail_max_long_overshoot_m_);
  swap(ap_c_drive_off_velo_thres_mps_, other->ap_c_drive_off_velo_thres_mps_);
  swap(ap_c_pi_yaw_deviation_t_filt_s_, other->ap_c_pi_yaw_deviation_t_filt_s_);
  swap(ap_c_pc_orient_ctrl_end_dist_m_, other->ap_c_pc_orient_ctrl_end_dist_m_);
  swap(ap_c_pc_first_steer_accur_rad_, other->ap_c_pc_first_steer_accur_rad_);
  swap(ap_c_wfc_vdy_drive_off_thres_m_, other->ap_c_wfc_vdy_drive_off_thres_m_);
  swap(ap_c_steer_interv_fall_nu_, other->ap_c_steer_interv_fall_nu_);
  swap(ap_c_drv_resist_fr_type_nu_, other->ap_c_drv_resist_fr_type_nu_);
  swap(ap_c_wfc_vdy_dist_thres_m_, other->ap_c_wfc_vdy_dist_thres_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TRJCTL_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_TRJCTL_Params_array_port::InitAsDefaultInstance() {
}
class FC_TRJCTL_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TRJCTL_Params_array_port>()._has_bits_);
};

FC_TRJCTL_Params_array_port::FC_TRJCTL_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
}
FC_TRJCTL_Params_array_port::FC_TRJCTL_Params_array_port(const FC_TRJCTL_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
}

void FC_TRJCTL_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TRJCTL_Params_array_port_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.base);
}

FC_TRJCTL_Params_array_port::~FC_TRJCTL_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  SharedDtor();
}

void FC_TRJCTL_Params_array_port::SharedDtor() {
}

void FC_TRJCTL_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TRJCTL_Params_array_port& FC_TRJCTL_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TRJCTL_Params_array_port_ap_5ftrjctl_2ffc_5ftrjctl_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TRJCTL_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TRJCTL_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params data = 965;
      case 965:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<7722>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TRJCTL_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params data = 965;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(965, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  return target;
}

size_t FC_TRJCTL_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params data = 965;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TRJCTL_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TRJCTL_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TRJCTL_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_TRJCTL_Params_array_port::MergeFrom(const FC_TRJCTL_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_TRJCTL_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TRJCTL_Params_array_port::CopyFrom(const FC_TRJCTL_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_trjctl.fc_trjctl_params.FC_TRJCTL_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TRJCTL_Params_array_port::IsInitialized() const {
  return true;
}

void FC_TRJCTL_Params_array_port::InternalSwap(FC_TRJCTL_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TRJCTL_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_trjctl_params
}  // namespace ap_trjctl
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params* Arena::CreateMaybeMessage< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port* Arena::CreateMaybeMessage< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_trjctl::fc_trjctl_params::FC_TRJCTL_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
