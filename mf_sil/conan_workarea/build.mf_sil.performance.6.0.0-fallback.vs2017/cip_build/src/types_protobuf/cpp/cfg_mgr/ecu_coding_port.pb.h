// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg_mgr/ecu_coding_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cfg_mgr/ecu_coding_state.pb.h"
#include "cfg_mgr/us_sensor_degradation_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto;
namespace pb {
namespace cfg_mgr {
namespace ecu_coding_port {
class EcuCodingPort;
class EcuCodingPortDefaultTypeInternal;
extern EcuCodingPortDefaultTypeInternal _EcuCodingPort_default_instance_;
class EcuCodingPort_array_port;
class EcuCodingPort_array_portDefaultTypeInternal;
extern EcuCodingPort_array_portDefaultTypeInternal _EcuCodingPort_array_port_default_instance_;
}  // namespace ecu_coding_port
}  // namespace cfg_mgr
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* Arena::CreateMaybeMessage<::pb::cfg_mgr::ecu_coding_port::EcuCodingPort>(Arena*);
template<> ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port* Arena::CreateMaybeMessage<::pb::cfg_mgr::ecu_coding_port::EcuCodingPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace cfg_mgr {
namespace ecu_coding_port {

// ===================================================================

class EcuCodingPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.cfg_mgr.ecu_coding_port.EcuCodingPort) */ {
 public:
  EcuCodingPort();
  virtual ~EcuCodingPort();

  EcuCodingPort(const EcuCodingPort& from);
  EcuCodingPort(EcuCodingPort&& from) noexcept
    : EcuCodingPort() {
    *this = ::std::move(from);
  }

  inline EcuCodingPort& operator=(const EcuCodingPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcuCodingPort& operator=(EcuCodingPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EcuCodingPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EcuCodingPort* internal_default_instance() {
    return reinterpret_cast<const EcuCodingPort*>(
               &_EcuCodingPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EcuCodingPort& a, EcuCodingPort& b) {
    a.Swap(&b);
  }
  inline void Swap(EcuCodingPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EcuCodingPort* New() const final {
    return CreateMaybeMessage<EcuCodingPort>(nullptr);
  }

  EcuCodingPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EcuCodingPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EcuCodingPort& from);
  void MergeFrom(const EcuCodingPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcuCodingPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.cfg_mgr.ecu_coding_port.EcuCodingPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto);
    return ::descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsDegradationModeEFieldNumber = 3869,
    kIsBrakingFrontOnlySupportedFieldNumber = 855,
    kIsBrakingRearOnlySupportedFieldNumber = 60,
    kIsBraking360SupportedFieldNumber = 2191,
    kIsSteeringSuggestSupportedFieldNumber = 447,
    kNumOfUsSensorsFieldNumber = 1471,
    kCodingStateEFieldNumber = 1681,
    kIsRemoteParkSupportedFieldNumber = 335,
    kIsBasicGarageParkSupportedFieldNumber = 3800,
    kIsUsSupportedFieldNumber = 3095,
    kIsPdwFrontOnlySupportedFieldNumber = 3470,
    kIsPdwRearOnlySupportedFieldNumber = 1789,
    kIsPdw360SupportedFieldNumber = 452,
    kIsSteeringProtectSupportedFieldNumber = 1570,
    kIsWhlProtectSupportedFieldNumber = 3024,
    kIsSemiAuParkSupportedFieldNumber = 4044,
    kIsFullAuParkSupportedFieldNumber = 890,
    kTimestampUsU64FieldNumber = 3650,
  };
  // optional .pb.cfg_mgr.us_sensor_degradation_type.UsSensorDegradationType UsDegradationMode_e = 3869;
  bool has_usdegradationmode_e() const;
  private:
  bool _internal_has_usdegradationmode_e() const;
  public:
  void clear_usdegradationmode_e();
  ::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType usdegradationmode_e() const;
  void set_usdegradationmode_e(::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType value);
  private:
  ::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType _internal_usdegradationmode_e() const;
  void _internal_set_usdegradationmode_e(::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType value);
  public:

  // optional bool isBrakingFrontOnlySupported = 855;
  bool has_isbrakingfrontonlysupported() const;
  private:
  bool _internal_has_isbrakingfrontonlysupported() const;
  public:
  void clear_isbrakingfrontonlysupported();
  bool isbrakingfrontonlysupported() const;
  void set_isbrakingfrontonlysupported(bool value);
  private:
  bool _internal_isbrakingfrontonlysupported() const;
  void _internal_set_isbrakingfrontonlysupported(bool value);
  public:

  // optional bool isBrakingRearOnlySupported = 60;
  bool has_isbrakingrearonlysupported() const;
  private:
  bool _internal_has_isbrakingrearonlysupported() const;
  public:
  void clear_isbrakingrearonlysupported();
  bool isbrakingrearonlysupported() const;
  void set_isbrakingrearonlysupported(bool value);
  private:
  bool _internal_isbrakingrearonlysupported() const;
  void _internal_set_isbrakingrearonlysupported(bool value);
  public:

  // optional bool isBraking360Supported = 2191;
  bool has_isbraking360supported() const;
  private:
  bool _internal_has_isbraking360supported() const;
  public:
  void clear_isbraking360supported();
  bool isbraking360supported() const;
  void set_isbraking360supported(bool value);
  private:
  bool _internal_isbraking360supported() const;
  void _internal_set_isbraking360supported(bool value);
  public:

  // optional bool isSteeringSuggestSupported = 447;
  bool has_issteeringsuggestsupported() const;
  private:
  bool _internal_has_issteeringsuggestsupported() const;
  public:
  void clear_issteeringsuggestsupported();
  bool issteeringsuggestsupported() const;
  void set_issteeringsuggestsupported(bool value);
  private:
  bool _internal_issteeringsuggestsupported() const;
  void _internal_set_issteeringsuggestsupported(bool value);
  public:

  // optional uint32 numOfUsSensors = 1471;
  bool has_numofussensors() const;
  private:
  bool _internal_has_numofussensors() const;
  public:
  void clear_numofussensors();
  ::PROTOBUF_NAMESPACE_ID::uint32 numofussensors() const;
  void set_numofussensors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numofussensors() const;
  void _internal_set_numofussensors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.cfg_mgr.ecu_coding_state.EcuCodingState codingState_e = 1681;
  bool has_codingstate_e() const;
  private:
  bool _internal_has_codingstate_e() const;
  public:
  void clear_codingstate_e();
  ::pb::cfg_mgr::ecu_coding_state::EcuCodingState codingstate_e() const;
  void set_codingstate_e(::pb::cfg_mgr::ecu_coding_state::EcuCodingState value);
  private:
  ::pb::cfg_mgr::ecu_coding_state::EcuCodingState _internal_codingstate_e() const;
  void _internal_set_codingstate_e(::pb::cfg_mgr::ecu_coding_state::EcuCodingState value);
  public:

  // optional bool isRemoteParkSupported = 335;
  bool has_isremoteparksupported() const;
  private:
  bool _internal_has_isremoteparksupported() const;
  public:
  void clear_isremoteparksupported();
  bool isremoteparksupported() const;
  void set_isremoteparksupported(bool value);
  private:
  bool _internal_isremoteparksupported() const;
  void _internal_set_isremoteparksupported(bool value);
  public:

  // optional bool isBasicGarageParkSupported = 3800;
  bool has_isbasicgarageparksupported() const;
  private:
  bool _internal_has_isbasicgarageparksupported() const;
  public:
  void clear_isbasicgarageparksupported();
  bool isbasicgarageparksupported() const;
  void set_isbasicgarageparksupported(bool value);
  private:
  bool _internal_isbasicgarageparksupported() const;
  void _internal_set_isbasicgarageparksupported(bool value);
  public:

  // optional bool isUsSupported = 3095;
  bool has_isussupported() const;
  private:
  bool _internal_has_isussupported() const;
  public:
  void clear_isussupported();
  bool isussupported() const;
  void set_isussupported(bool value);
  private:
  bool _internal_isussupported() const;
  void _internal_set_isussupported(bool value);
  public:

  // optional bool isPdwFrontOnlySupported = 3470;
  bool has_ispdwfrontonlysupported() const;
  private:
  bool _internal_has_ispdwfrontonlysupported() const;
  public:
  void clear_ispdwfrontonlysupported();
  bool ispdwfrontonlysupported() const;
  void set_ispdwfrontonlysupported(bool value);
  private:
  bool _internal_ispdwfrontonlysupported() const;
  void _internal_set_ispdwfrontonlysupported(bool value);
  public:

  // optional bool isPdwRearOnlySupported = 1789;
  bool has_ispdwrearonlysupported() const;
  private:
  bool _internal_has_ispdwrearonlysupported() const;
  public:
  void clear_ispdwrearonlysupported();
  bool ispdwrearonlysupported() const;
  void set_ispdwrearonlysupported(bool value);
  private:
  bool _internal_ispdwrearonlysupported() const;
  void _internal_set_ispdwrearonlysupported(bool value);
  public:

  // optional bool isPdw360Supported = 452;
  bool has_ispdw360supported() const;
  private:
  bool _internal_has_ispdw360supported() const;
  public:
  void clear_ispdw360supported();
  bool ispdw360supported() const;
  void set_ispdw360supported(bool value);
  private:
  bool _internal_ispdw360supported() const;
  void _internal_set_ispdw360supported(bool value);
  public:

  // optional bool isSteeringProtectSupported = 1570;
  bool has_issteeringprotectsupported() const;
  private:
  bool _internal_has_issteeringprotectsupported() const;
  public:
  void clear_issteeringprotectsupported();
  bool issteeringprotectsupported() const;
  void set_issteeringprotectsupported(bool value);
  private:
  bool _internal_issteeringprotectsupported() const;
  void _internal_set_issteeringprotectsupported(bool value);
  public:

  // optional bool isWhlProtectSupported = 3024;
  bool has_iswhlprotectsupported() const;
  private:
  bool _internal_has_iswhlprotectsupported() const;
  public:
  void clear_iswhlprotectsupported();
  bool iswhlprotectsupported() const;
  void set_iswhlprotectsupported(bool value);
  private:
  bool _internal_iswhlprotectsupported() const;
  void _internal_set_iswhlprotectsupported(bool value);
  public:

  // optional bool isSemiAuParkSupported = 4044;
  bool has_issemiauparksupported() const;
  private:
  bool _internal_has_issemiauparksupported() const;
  public:
  void clear_issemiauparksupported();
  bool issemiauparksupported() const;
  void set_issemiauparksupported(bool value);
  private:
  bool _internal_issemiauparksupported() const;
  void _internal_set_issemiauparksupported(bool value);
  public:

  // optional bool isFullAuParkSupported = 890;
  bool has_isfullauparksupported() const;
  private:
  bool _internal_has_isfullauparksupported() const;
  public:
  void clear_isfullauparksupported();
  bool isfullauparksupported() const;
  void set_isfullauparksupported(bool value);
  private:
  bool _internal_isfullauparksupported() const;
  void _internal_set_isfullauparksupported(bool value);
  public:

  // optional uint64 timestamp_us_u64 = 3650;
  bool has_timestamp_us_u64() const;
  private:
  bool _internal_has_timestamp_us_u64() const;
  public:
  void clear_timestamp_us_u64();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us_u64() const;
  void set_timestamp_us_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_us_u64() const;
  void _internal_set_timestamp_us_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.cfg_mgr.ecu_coding_port.EcuCodingPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int usdegradationmode_e_;
  bool isbrakingfrontonlysupported_;
  bool isbrakingrearonlysupported_;
  bool isbraking360supported_;
  bool issteeringsuggestsupported_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numofussensors_;
  int codingstate_e_;
  bool isremoteparksupported_;
  bool isbasicgarageparksupported_;
  bool isussupported_;
  bool ispdwfrontonlysupported_;
  bool ispdwrearonlysupported_;
  bool ispdw360supported_;
  bool issteeringprotectsupported_;
  bool iswhlprotectsupported_;
  bool issemiauparksupported_;
  bool isfullauparksupported_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_us_u64_;
  friend struct ::TableStruct_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto;
};
// -------------------------------------------------------------------

class EcuCodingPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port) */ {
 public:
  EcuCodingPort_array_port();
  virtual ~EcuCodingPort_array_port();

  EcuCodingPort_array_port(const EcuCodingPort_array_port& from);
  EcuCodingPort_array_port(EcuCodingPort_array_port&& from) noexcept
    : EcuCodingPort_array_port() {
    *this = ::std::move(from);
  }

  inline EcuCodingPort_array_port& operator=(const EcuCodingPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcuCodingPort_array_port& operator=(EcuCodingPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EcuCodingPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EcuCodingPort_array_port* internal_default_instance() {
    return reinterpret_cast<const EcuCodingPort_array_port*>(
               &_EcuCodingPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EcuCodingPort_array_port& a, EcuCodingPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(EcuCodingPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EcuCodingPort_array_port* New() const final {
    return CreateMaybeMessage<EcuCodingPort_array_port>(nullptr);
  }

  EcuCodingPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EcuCodingPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EcuCodingPort_array_port& from);
  void MergeFrom(const EcuCodingPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EcuCodingPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto);
    return ::descriptor_table_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1714,
  };
  // repeated .pb.cfg_mgr.ecu_coding_port.EcuCodingPort data = 1714;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort >*
      mutable_data();
  private:
  const ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort& _internal_data(int index) const;
  ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* _internal_add_data();
  public:
  const ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort& data(int index) const;
  ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort > data_;
  friend struct ::TableStruct_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EcuCodingPort

// optional uint64 timestamp_us_u64 = 3650;
inline bool EcuCodingPort::_internal_has_timestamp_us_u64() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool EcuCodingPort::has_timestamp_us_u64() const {
  return _internal_has_timestamp_us_u64();
}
inline void EcuCodingPort::clear_timestamp_us_u64() {
  timestamp_us_u64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EcuCodingPort::_internal_timestamp_us_u64() const {
  return timestamp_us_u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EcuCodingPort::timestamp_us_u64() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.timestamp_us_u64)
  return _internal_timestamp_us_u64();
}
inline void EcuCodingPort::_internal_set_timestamp_us_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  timestamp_us_u64_ = value;
}
inline void EcuCodingPort::set_timestamp_us_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_us_u64(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.timestamp_us_u64)
}

// optional .pb.cfg_mgr.ecu_coding_state.EcuCodingState codingState_e = 1681;
inline bool EcuCodingPort::_internal_has_codingstate_e() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EcuCodingPort::has_codingstate_e() const {
  return _internal_has_codingstate_e();
}
inline void EcuCodingPort::clear_codingstate_e() {
  codingstate_e_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::pb::cfg_mgr::ecu_coding_state::EcuCodingState EcuCodingPort::_internal_codingstate_e() const {
  return static_cast< ::pb::cfg_mgr::ecu_coding_state::EcuCodingState >(codingstate_e_);
}
inline ::pb::cfg_mgr::ecu_coding_state::EcuCodingState EcuCodingPort::codingstate_e() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.codingState_e)
  return _internal_codingstate_e();
}
inline void EcuCodingPort::_internal_set_codingstate_e(::pb::cfg_mgr::ecu_coding_state::EcuCodingState value) {
  assert(::pb::cfg_mgr::ecu_coding_state::EcuCodingState_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  codingstate_e_ = value;
}
inline void EcuCodingPort::set_codingstate_e(::pb::cfg_mgr::ecu_coding_state::EcuCodingState value) {
  _internal_set_codingstate_e(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.codingState_e)
}

// optional bool isUsSupported = 3095;
inline bool EcuCodingPort::_internal_has_isussupported() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool EcuCodingPort::has_isussupported() const {
  return _internal_has_isussupported();
}
inline void EcuCodingPort::clear_isussupported() {
  isussupported_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool EcuCodingPort::_internal_isussupported() const {
  return isussupported_;
}
inline bool EcuCodingPort::isussupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isUsSupported)
  return _internal_isussupported();
}
inline void EcuCodingPort::_internal_set_isussupported(bool value) {
  _has_bits_[0] |= 0x00000200u;
  isussupported_ = value;
}
inline void EcuCodingPort::set_isussupported(bool value) {
  _internal_set_isussupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isUsSupported)
}

// optional uint32 numOfUsSensors = 1471;
inline bool EcuCodingPort::_internal_has_numofussensors() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EcuCodingPort::has_numofussensors() const {
  return _internal_has_numofussensors();
}
inline void EcuCodingPort::clear_numofussensors() {
  numofussensors_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EcuCodingPort::_internal_numofussensors() const {
  return numofussensors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EcuCodingPort::numofussensors() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.numOfUsSensors)
  return _internal_numofussensors();
}
inline void EcuCodingPort::_internal_set_numofussensors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  numofussensors_ = value;
}
inline void EcuCodingPort::set_numofussensors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numofussensors(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.numOfUsSensors)
}

// optional .pb.cfg_mgr.us_sensor_degradation_type.UsSensorDegradationType UsDegradationMode_e = 3869;
inline bool EcuCodingPort::_internal_has_usdegradationmode_e() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EcuCodingPort::has_usdegradationmode_e() const {
  return _internal_has_usdegradationmode_e();
}
inline void EcuCodingPort::clear_usdegradationmode_e() {
  usdegradationmode_e_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType EcuCodingPort::_internal_usdegradationmode_e() const {
  return static_cast< ::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType >(usdegradationmode_e_);
}
inline ::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType EcuCodingPort::usdegradationmode_e() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.UsDegradationMode_e)
  return _internal_usdegradationmode_e();
}
inline void EcuCodingPort::_internal_set_usdegradationmode_e(::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType value) {
  assert(::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  usdegradationmode_e_ = value;
}
inline void EcuCodingPort::set_usdegradationmode_e(::pb::cfg_mgr::us_sensor_degradation_type::UsSensorDegradationType value) {
  _internal_set_usdegradationmode_e(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.UsDegradationMode_e)
}

// optional bool isPdwFrontOnlySupported = 3470;
inline bool EcuCodingPort::_internal_has_ispdwfrontonlysupported() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool EcuCodingPort::has_ispdwfrontonlysupported() const {
  return _internal_has_ispdwfrontonlysupported();
}
inline void EcuCodingPort::clear_ispdwfrontonlysupported() {
  ispdwfrontonlysupported_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool EcuCodingPort::_internal_ispdwfrontonlysupported() const {
  return ispdwfrontonlysupported_;
}
inline bool EcuCodingPort::ispdwfrontonlysupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isPdwFrontOnlySupported)
  return _internal_ispdwfrontonlysupported();
}
inline void EcuCodingPort::_internal_set_ispdwfrontonlysupported(bool value) {
  _has_bits_[0] |= 0x00000400u;
  ispdwfrontonlysupported_ = value;
}
inline void EcuCodingPort::set_ispdwfrontonlysupported(bool value) {
  _internal_set_ispdwfrontonlysupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isPdwFrontOnlySupported)
}

// optional bool isPdwRearOnlySupported = 1789;
inline bool EcuCodingPort::_internal_has_ispdwrearonlysupported() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool EcuCodingPort::has_ispdwrearonlysupported() const {
  return _internal_has_ispdwrearonlysupported();
}
inline void EcuCodingPort::clear_ispdwrearonlysupported() {
  ispdwrearonlysupported_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool EcuCodingPort::_internal_ispdwrearonlysupported() const {
  return ispdwrearonlysupported_;
}
inline bool EcuCodingPort::ispdwrearonlysupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isPdwRearOnlySupported)
  return _internal_ispdwrearonlysupported();
}
inline void EcuCodingPort::_internal_set_ispdwrearonlysupported(bool value) {
  _has_bits_[0] |= 0x00000800u;
  ispdwrearonlysupported_ = value;
}
inline void EcuCodingPort::set_ispdwrearonlysupported(bool value) {
  _internal_set_ispdwrearonlysupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isPdwRearOnlySupported)
}

// optional bool isPdw360Supported = 452;
inline bool EcuCodingPort::_internal_has_ispdw360supported() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool EcuCodingPort::has_ispdw360supported() const {
  return _internal_has_ispdw360supported();
}
inline void EcuCodingPort::clear_ispdw360supported() {
  ispdw360supported_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool EcuCodingPort::_internal_ispdw360supported() const {
  return ispdw360supported_;
}
inline bool EcuCodingPort::ispdw360supported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isPdw360Supported)
  return _internal_ispdw360supported();
}
inline void EcuCodingPort::_internal_set_ispdw360supported(bool value) {
  _has_bits_[0] |= 0x00001000u;
  ispdw360supported_ = value;
}
inline void EcuCodingPort::set_ispdw360supported(bool value) {
  _internal_set_ispdw360supported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isPdw360Supported)
}

// optional bool isBrakingFrontOnlySupported = 855;
inline bool EcuCodingPort::_internal_has_isbrakingfrontonlysupported() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EcuCodingPort::has_isbrakingfrontonlysupported() const {
  return _internal_has_isbrakingfrontonlysupported();
}
inline void EcuCodingPort::clear_isbrakingfrontonlysupported() {
  isbrakingfrontonlysupported_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EcuCodingPort::_internal_isbrakingfrontonlysupported() const {
  return isbrakingfrontonlysupported_;
}
inline bool EcuCodingPort::isbrakingfrontonlysupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBrakingFrontOnlySupported)
  return _internal_isbrakingfrontonlysupported();
}
inline void EcuCodingPort::_internal_set_isbrakingfrontonlysupported(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isbrakingfrontonlysupported_ = value;
}
inline void EcuCodingPort::set_isbrakingfrontonlysupported(bool value) {
  _internal_set_isbrakingfrontonlysupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBrakingFrontOnlySupported)
}

// optional bool isBrakingRearOnlySupported = 60;
inline bool EcuCodingPort::_internal_has_isbrakingrearonlysupported() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EcuCodingPort::has_isbrakingrearonlysupported() const {
  return _internal_has_isbrakingrearonlysupported();
}
inline void EcuCodingPort::clear_isbrakingrearonlysupported() {
  isbrakingrearonlysupported_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool EcuCodingPort::_internal_isbrakingrearonlysupported() const {
  return isbrakingrearonlysupported_;
}
inline bool EcuCodingPort::isbrakingrearonlysupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBrakingRearOnlySupported)
  return _internal_isbrakingrearonlysupported();
}
inline void EcuCodingPort::_internal_set_isbrakingrearonlysupported(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isbrakingrearonlysupported_ = value;
}
inline void EcuCodingPort::set_isbrakingrearonlysupported(bool value) {
  _internal_set_isbrakingrearonlysupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBrakingRearOnlySupported)
}

// optional bool isBraking360Supported = 2191;
inline bool EcuCodingPort::_internal_has_isbraking360supported() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EcuCodingPort::has_isbraking360supported() const {
  return _internal_has_isbraking360supported();
}
inline void EcuCodingPort::clear_isbraking360supported() {
  isbraking360supported_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool EcuCodingPort::_internal_isbraking360supported() const {
  return isbraking360supported_;
}
inline bool EcuCodingPort::isbraking360supported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBraking360Supported)
  return _internal_isbraking360supported();
}
inline void EcuCodingPort::_internal_set_isbraking360supported(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isbraking360supported_ = value;
}
inline void EcuCodingPort::set_isbraking360supported(bool value) {
  _internal_set_isbraking360supported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBraking360Supported)
}

// optional bool isSteeringSuggestSupported = 447;
inline bool EcuCodingPort::_internal_has_issteeringsuggestsupported() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EcuCodingPort::has_issteeringsuggestsupported() const {
  return _internal_has_issteeringsuggestsupported();
}
inline void EcuCodingPort::clear_issteeringsuggestsupported() {
  issteeringsuggestsupported_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool EcuCodingPort::_internal_issteeringsuggestsupported() const {
  return issteeringsuggestsupported_;
}
inline bool EcuCodingPort::issteeringsuggestsupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isSteeringSuggestSupported)
  return _internal_issteeringsuggestsupported();
}
inline void EcuCodingPort::_internal_set_issteeringsuggestsupported(bool value) {
  _has_bits_[0] |= 0x00000010u;
  issteeringsuggestsupported_ = value;
}
inline void EcuCodingPort::set_issteeringsuggestsupported(bool value) {
  _internal_set_issteeringsuggestsupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isSteeringSuggestSupported)
}

// optional bool isSteeringProtectSupported = 1570;
inline bool EcuCodingPort::_internal_has_issteeringprotectsupported() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool EcuCodingPort::has_issteeringprotectsupported() const {
  return _internal_has_issteeringprotectsupported();
}
inline void EcuCodingPort::clear_issteeringprotectsupported() {
  issteeringprotectsupported_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool EcuCodingPort::_internal_issteeringprotectsupported() const {
  return issteeringprotectsupported_;
}
inline bool EcuCodingPort::issteeringprotectsupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isSteeringProtectSupported)
  return _internal_issteeringprotectsupported();
}
inline void EcuCodingPort::_internal_set_issteeringprotectsupported(bool value) {
  _has_bits_[0] |= 0x00002000u;
  issteeringprotectsupported_ = value;
}
inline void EcuCodingPort::set_issteeringprotectsupported(bool value) {
  _internal_set_issteeringprotectsupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isSteeringProtectSupported)
}

// optional bool isWhlProtectSupported = 3024;
inline bool EcuCodingPort::_internal_has_iswhlprotectsupported() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool EcuCodingPort::has_iswhlprotectsupported() const {
  return _internal_has_iswhlprotectsupported();
}
inline void EcuCodingPort::clear_iswhlprotectsupported() {
  iswhlprotectsupported_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool EcuCodingPort::_internal_iswhlprotectsupported() const {
  return iswhlprotectsupported_;
}
inline bool EcuCodingPort::iswhlprotectsupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isWhlProtectSupported)
  return _internal_iswhlprotectsupported();
}
inline void EcuCodingPort::_internal_set_iswhlprotectsupported(bool value) {
  _has_bits_[0] |= 0x00004000u;
  iswhlprotectsupported_ = value;
}
inline void EcuCodingPort::set_iswhlprotectsupported(bool value) {
  _internal_set_iswhlprotectsupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isWhlProtectSupported)
}

// optional bool isSemiAuParkSupported = 4044;
inline bool EcuCodingPort::_internal_has_issemiauparksupported() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool EcuCodingPort::has_issemiauparksupported() const {
  return _internal_has_issemiauparksupported();
}
inline void EcuCodingPort::clear_issemiauparksupported() {
  issemiauparksupported_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool EcuCodingPort::_internal_issemiauparksupported() const {
  return issemiauparksupported_;
}
inline bool EcuCodingPort::issemiauparksupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isSemiAuParkSupported)
  return _internal_issemiauparksupported();
}
inline void EcuCodingPort::_internal_set_issemiauparksupported(bool value) {
  _has_bits_[0] |= 0x00008000u;
  issemiauparksupported_ = value;
}
inline void EcuCodingPort::set_issemiauparksupported(bool value) {
  _internal_set_issemiauparksupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isSemiAuParkSupported)
}

// optional bool isFullAuParkSupported = 890;
inline bool EcuCodingPort::_internal_has_isfullauparksupported() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool EcuCodingPort::has_isfullauparksupported() const {
  return _internal_has_isfullauparksupported();
}
inline void EcuCodingPort::clear_isfullauparksupported() {
  isfullauparksupported_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool EcuCodingPort::_internal_isfullauparksupported() const {
  return isfullauparksupported_;
}
inline bool EcuCodingPort::isfullauparksupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isFullAuParkSupported)
  return _internal_isfullauparksupported();
}
inline void EcuCodingPort::_internal_set_isfullauparksupported(bool value) {
  _has_bits_[0] |= 0x00010000u;
  isfullauparksupported_ = value;
}
inline void EcuCodingPort::set_isfullauparksupported(bool value) {
  _internal_set_isfullauparksupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isFullAuParkSupported)
}

// optional bool isRemoteParkSupported = 335;
inline bool EcuCodingPort::_internal_has_isremoteparksupported() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EcuCodingPort::has_isremoteparksupported() const {
  return _internal_has_isremoteparksupported();
}
inline void EcuCodingPort::clear_isremoteparksupported() {
  isremoteparksupported_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool EcuCodingPort::_internal_isremoteparksupported() const {
  return isremoteparksupported_;
}
inline bool EcuCodingPort::isremoteparksupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isRemoteParkSupported)
  return _internal_isremoteparksupported();
}
inline void EcuCodingPort::_internal_set_isremoteparksupported(bool value) {
  _has_bits_[0] |= 0x00000080u;
  isremoteparksupported_ = value;
}
inline void EcuCodingPort::set_isremoteparksupported(bool value) {
  _internal_set_isremoteparksupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isRemoteParkSupported)
}

// optional bool isBasicGarageParkSupported = 3800;
inline bool EcuCodingPort::_internal_has_isbasicgarageparksupported() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool EcuCodingPort::has_isbasicgarageparksupported() const {
  return _internal_has_isbasicgarageparksupported();
}
inline void EcuCodingPort::clear_isbasicgarageparksupported() {
  isbasicgarageparksupported_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool EcuCodingPort::_internal_isbasicgarageparksupported() const {
  return isbasicgarageparksupported_;
}
inline bool EcuCodingPort::isbasicgarageparksupported() const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBasicGarageParkSupported)
  return _internal_isbasicgarageparksupported();
}
inline void EcuCodingPort::_internal_set_isbasicgarageparksupported(bool value) {
  _has_bits_[0] |= 0x00000100u;
  isbasicgarageparksupported_ = value;
}
inline void EcuCodingPort::set_isbasicgarageparksupported(bool value) {
  _internal_set_isbasicgarageparksupported(value);
  // @@protoc_insertion_point(field_set:pb.cfg_mgr.ecu_coding_port.EcuCodingPort.isBasicGarageParkSupported)
}

// -------------------------------------------------------------------

// EcuCodingPort_array_port

// repeated .pb.cfg_mgr.ecu_coding_port.EcuCodingPort data = 1714;
inline int EcuCodingPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int EcuCodingPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void EcuCodingPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* EcuCodingPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort >*
EcuCodingPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port.data)
  return &data_;
}
inline const ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort& EcuCodingPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort& EcuCodingPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* EcuCodingPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort* EcuCodingPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::cfg_mgr::ecu_coding_port::EcuCodingPort >&
EcuCodingPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.cfg_mgr.ecu_coding_port.EcuCodingPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ecu_coding_port
}  // namespace cfg_mgr
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cfg_5fmgr_2fecu_5fcoding_5fport_2eproto
