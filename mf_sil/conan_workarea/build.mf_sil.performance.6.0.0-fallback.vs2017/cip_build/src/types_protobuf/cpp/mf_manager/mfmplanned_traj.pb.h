// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_manager/mfmplanned_traj.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmanager_2fmfmplanned_5ftraj_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmanager_2fmfmplanned_5ftraj_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmanager_2fmfmplanned_5ftraj_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmanager_2fmfmplanned_5ftraj_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmanager_2fmfmplanned_5ftraj_2eproto;
namespace pb {
namespace mf_manager {
namespace mfmplanned_traj {
class MFMPlannedTraj;
class MFMPlannedTrajDefaultTypeInternal;
extern MFMPlannedTrajDefaultTypeInternal _MFMPlannedTraj_default_instance_;
class MFMPlannedTraj_array_port;
class MFMPlannedTraj_array_portDefaultTypeInternal;
extern MFMPlannedTraj_array_portDefaultTypeInternal _MFMPlannedTraj_array_port_default_instance_;
}  // namespace mfmplanned_traj
}  // namespace mf_manager
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj* Arena::CreateMaybeMessage<::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj>(Arena*);
template<> ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj_array_port* Arena::CreateMaybeMessage<::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_manager {
namespace mfmplanned_traj {

// ===================================================================

class MFMPlannedTraj :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj) */ {
 public:
  MFMPlannedTraj();
  virtual ~MFMPlannedTraj();

  MFMPlannedTraj(const MFMPlannedTraj& from);
  MFMPlannedTraj(MFMPlannedTraj&& from) noexcept
    : MFMPlannedTraj() {
    *this = ::std::move(from);
  }

  inline MFMPlannedTraj& operator=(const MFMPlannedTraj& from) {
    CopyFrom(from);
    return *this;
  }
  inline MFMPlannedTraj& operator=(MFMPlannedTraj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MFMPlannedTraj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MFMPlannedTraj* internal_default_instance() {
    return reinterpret_cast<const MFMPlannedTraj*>(
               &_MFMPlannedTraj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MFMPlannedTraj& a, MFMPlannedTraj& b) {
    a.Swap(&b);
  }
  inline void Swap(MFMPlannedTraj* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MFMPlannedTraj* New() const final {
    return CreateMaybeMessage<MFMPlannedTraj>(nullptr);
  }

  MFMPlannedTraj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MFMPlannedTraj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MFMPlannedTraj& from);
  void MergeFrom(const MFMPlannedTraj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MFMPlannedTraj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_manager.mfmplanned_traj.MFMPlannedTraj";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmanager_2fmfmplanned_5ftraj_2eproto);
    return ::descriptor_table_mf_5fmanager_2fmfmplanned_5ftraj_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYTrajRAReqMFieldNumber = 1124,
    kYawReqRadFieldNumber = 1379,
    kCrvRAReq1PmFieldNumber = 1716,
    kXTrajRAReqMFieldNumber = 1809,
    kVelocityLimitReqMpsFieldNumber = 2513,
    kDistanceToStopReqMFieldNumber = 3322,
  };
  // optional float yTrajRAReq_m = 1124;
  bool has_ytrajrareq_m() const;
  private:
  bool _internal_has_ytrajrareq_m() const;
  public:
  void clear_ytrajrareq_m();
  float ytrajrareq_m() const;
  void set_ytrajrareq_m(float value);
  private:
  float _internal_ytrajrareq_m() const;
  void _internal_set_ytrajrareq_m(float value);
  public:

  // optional float yawReq_rad = 1379;
  bool has_yawreq_rad() const;
  private:
  bool _internal_has_yawreq_rad() const;
  public:
  void clear_yawreq_rad();
  float yawreq_rad() const;
  void set_yawreq_rad(float value);
  private:
  float _internal_yawreq_rad() const;
  void _internal_set_yawreq_rad(float value);
  public:

  // optional float crvRAReq_1pm = 1716;
  bool has_crvrareq_1pm() const;
  private:
  bool _internal_has_crvrareq_1pm() const;
  public:
  void clear_crvrareq_1pm();
  float crvrareq_1pm() const;
  void set_crvrareq_1pm(float value);
  private:
  float _internal_crvrareq_1pm() const;
  void _internal_set_crvrareq_1pm(float value);
  public:

  // optional float xTrajRAReq_m = 1809;
  bool has_xtrajrareq_m() const;
  private:
  bool _internal_has_xtrajrareq_m() const;
  public:
  void clear_xtrajrareq_m();
  float xtrajrareq_m() const;
  void set_xtrajrareq_m(float value);
  private:
  float _internal_xtrajrareq_m() const;
  void _internal_set_xtrajrareq_m(float value);
  public:

  // optional float velocityLimitReq_mps = 2513;
  bool has_velocitylimitreq_mps() const;
  private:
  bool _internal_has_velocitylimitreq_mps() const;
  public:
  void clear_velocitylimitreq_mps();
  float velocitylimitreq_mps() const;
  void set_velocitylimitreq_mps(float value);
  private:
  float _internal_velocitylimitreq_mps() const;
  void _internal_set_velocitylimitreq_mps(float value);
  public:

  // optional float distanceToStopReq_m = 3322;
  bool has_distancetostopreq_m() const;
  private:
  bool _internal_has_distancetostopreq_m() const;
  public:
  void clear_distancetostopreq_m();
  float distancetostopreq_m() const;
  void set_distancetostopreq_m(float value);
  private:
  float _internal_distancetostopreq_m() const;
  void _internal_set_distancetostopreq_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float ytrajrareq_m_;
  float yawreq_rad_;
  float crvrareq_1pm_;
  float xtrajrareq_m_;
  float velocitylimitreq_mps_;
  float distancetostopreq_m_;
  friend struct ::TableStruct_mf_5fmanager_2fmfmplanned_5ftraj_2eproto;
};
// -------------------------------------------------------------------

class MFMPlannedTraj_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port) */ {
 public:
  MFMPlannedTraj_array_port();
  virtual ~MFMPlannedTraj_array_port();

  MFMPlannedTraj_array_port(const MFMPlannedTraj_array_port& from);
  MFMPlannedTraj_array_port(MFMPlannedTraj_array_port&& from) noexcept
    : MFMPlannedTraj_array_port() {
    *this = ::std::move(from);
  }

  inline MFMPlannedTraj_array_port& operator=(const MFMPlannedTraj_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline MFMPlannedTraj_array_port& operator=(MFMPlannedTraj_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MFMPlannedTraj_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MFMPlannedTraj_array_port* internal_default_instance() {
    return reinterpret_cast<const MFMPlannedTraj_array_port*>(
               &_MFMPlannedTraj_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MFMPlannedTraj_array_port& a, MFMPlannedTraj_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(MFMPlannedTraj_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MFMPlannedTraj_array_port* New() const final {
    return CreateMaybeMessage<MFMPlannedTraj_array_port>(nullptr);
  }

  MFMPlannedTraj_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MFMPlannedTraj_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MFMPlannedTraj_array_port& from);
  void MergeFrom(const MFMPlannedTraj_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MFMPlannedTraj_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmanager_2fmfmplanned_5ftraj_2eproto);
    return ::descriptor_table_mf_5fmanager_2fmfmplanned_5ftraj_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2966,
  };
  // repeated .pb.mf_manager.mfmplanned_traj.MFMPlannedTraj data = 2966;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj >*
      mutable_data();
  private:
  const ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj& _internal_data(int index) const;
  ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj* _internal_add_data();
  public:
  const ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj& data(int index) const;
  ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj > data_;
  friend struct ::TableStruct_mf_5fmanager_2fmfmplanned_5ftraj_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MFMPlannedTraj

// optional float xTrajRAReq_m = 1809;
inline bool MFMPlannedTraj::_internal_has_xtrajrareq_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MFMPlannedTraj::has_xtrajrareq_m() const {
  return _internal_has_xtrajrareq_m();
}
inline void MFMPlannedTraj::clear_xtrajrareq_m() {
  xtrajrareq_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MFMPlannedTraj::_internal_xtrajrareq_m() const {
  return xtrajrareq_m_;
}
inline float MFMPlannedTraj::xtrajrareq_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.xTrajRAReq_m)
  return _internal_xtrajrareq_m();
}
inline void MFMPlannedTraj::_internal_set_xtrajrareq_m(float value) {
  _has_bits_[0] |= 0x00000008u;
  xtrajrareq_m_ = value;
}
inline void MFMPlannedTraj::set_xtrajrareq_m(float value) {
  _internal_set_xtrajrareq_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.xTrajRAReq_m)
}

// optional float yTrajRAReq_m = 1124;
inline bool MFMPlannedTraj::_internal_has_ytrajrareq_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MFMPlannedTraj::has_ytrajrareq_m() const {
  return _internal_has_ytrajrareq_m();
}
inline void MFMPlannedTraj::clear_ytrajrareq_m() {
  ytrajrareq_m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MFMPlannedTraj::_internal_ytrajrareq_m() const {
  return ytrajrareq_m_;
}
inline float MFMPlannedTraj::ytrajrareq_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.yTrajRAReq_m)
  return _internal_ytrajrareq_m();
}
inline void MFMPlannedTraj::_internal_set_ytrajrareq_m(float value) {
  _has_bits_[0] |= 0x00000001u;
  ytrajrareq_m_ = value;
}
inline void MFMPlannedTraj::set_ytrajrareq_m(float value) {
  _internal_set_ytrajrareq_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.yTrajRAReq_m)
}

// optional float yawReq_rad = 1379;
inline bool MFMPlannedTraj::_internal_has_yawreq_rad() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MFMPlannedTraj::has_yawreq_rad() const {
  return _internal_has_yawreq_rad();
}
inline void MFMPlannedTraj::clear_yawreq_rad() {
  yawreq_rad_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MFMPlannedTraj::_internal_yawreq_rad() const {
  return yawreq_rad_;
}
inline float MFMPlannedTraj::yawreq_rad() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.yawReq_rad)
  return _internal_yawreq_rad();
}
inline void MFMPlannedTraj::_internal_set_yawreq_rad(float value) {
  _has_bits_[0] |= 0x00000002u;
  yawreq_rad_ = value;
}
inline void MFMPlannedTraj::set_yawreq_rad(float value) {
  _internal_set_yawreq_rad(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.yawReq_rad)
}

// optional float crvRAReq_1pm = 1716;
inline bool MFMPlannedTraj::_internal_has_crvrareq_1pm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MFMPlannedTraj::has_crvrareq_1pm() const {
  return _internal_has_crvrareq_1pm();
}
inline void MFMPlannedTraj::clear_crvrareq_1pm() {
  crvrareq_1pm_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MFMPlannedTraj::_internal_crvrareq_1pm() const {
  return crvrareq_1pm_;
}
inline float MFMPlannedTraj::crvrareq_1pm() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.crvRAReq_1pm)
  return _internal_crvrareq_1pm();
}
inline void MFMPlannedTraj::_internal_set_crvrareq_1pm(float value) {
  _has_bits_[0] |= 0x00000004u;
  crvrareq_1pm_ = value;
}
inline void MFMPlannedTraj::set_crvrareq_1pm(float value) {
  _internal_set_crvrareq_1pm(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.crvRAReq_1pm)
}

// optional float distanceToStopReq_m = 3322;
inline bool MFMPlannedTraj::_internal_has_distancetostopreq_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MFMPlannedTraj::has_distancetostopreq_m() const {
  return _internal_has_distancetostopreq_m();
}
inline void MFMPlannedTraj::clear_distancetostopreq_m() {
  distancetostopreq_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float MFMPlannedTraj::_internal_distancetostopreq_m() const {
  return distancetostopreq_m_;
}
inline float MFMPlannedTraj::distancetostopreq_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.distanceToStopReq_m)
  return _internal_distancetostopreq_m();
}
inline void MFMPlannedTraj::_internal_set_distancetostopreq_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  distancetostopreq_m_ = value;
}
inline void MFMPlannedTraj::set_distancetostopreq_m(float value) {
  _internal_set_distancetostopreq_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.distanceToStopReq_m)
}

// optional float velocityLimitReq_mps = 2513;
inline bool MFMPlannedTraj::_internal_has_velocitylimitreq_mps() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MFMPlannedTraj::has_velocitylimitreq_mps() const {
  return _internal_has_velocitylimitreq_mps();
}
inline void MFMPlannedTraj::clear_velocitylimitreq_mps() {
  velocitylimitreq_mps_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MFMPlannedTraj::_internal_velocitylimitreq_mps() const {
  return velocitylimitreq_mps_;
}
inline float MFMPlannedTraj::velocitylimitreq_mps() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.velocityLimitReq_mps)
  return _internal_velocitylimitreq_mps();
}
inline void MFMPlannedTraj::_internal_set_velocitylimitreq_mps(float value) {
  _has_bits_[0] |= 0x00000010u;
  velocitylimitreq_mps_ = value;
}
inline void MFMPlannedTraj::set_velocitylimitreq_mps(float value) {
  _internal_set_velocitylimitreq_mps(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj.velocityLimitReq_mps)
}

// -------------------------------------------------------------------

// MFMPlannedTraj_array_port

// repeated .pb.mf_manager.mfmplanned_traj.MFMPlannedTraj data = 2966;
inline int MFMPlannedTraj_array_port::_internal_data_size() const {
  return data_.size();
}
inline int MFMPlannedTraj_array_port::data_size() const {
  return _internal_data_size();
}
inline void MFMPlannedTraj_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj* MFMPlannedTraj_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj >*
MFMPlannedTraj_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port.data)
  return &data_;
}
inline const ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj& MFMPlannedTraj_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj& MFMPlannedTraj_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj* MFMPlannedTraj_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj* MFMPlannedTraj_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::mfmplanned_traj::MFMPlannedTraj >&
MFMPlannedTraj_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_manager.mfmplanned_traj.MFMPlannedTraj_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mfmplanned_traj
}  // namespace mf_manager
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmanager_2fmfmplanned_5ftraj_2eproto
