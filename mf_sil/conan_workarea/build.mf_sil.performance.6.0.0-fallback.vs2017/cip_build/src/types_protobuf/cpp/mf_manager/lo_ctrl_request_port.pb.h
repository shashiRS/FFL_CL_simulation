// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_manager/lo_ctrl_request_port.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "mf_manager/lo_ctrl_request_type.pb.h"
#include "mf_manager/activate_lo_ctrl_type.pb.h"
#include "mf_manager/directed_lo_ctrl_request.pb.h"
#include "mf_manager/lo_ctrl_request_source.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto;
namespace pb {
namespace mf_manager {
namespace lo_ctrl_request_port {
class LoCtrlRequestPort;
class LoCtrlRequestPortDefaultTypeInternal;
extern LoCtrlRequestPortDefaultTypeInternal _LoCtrlRequestPort_default_instance_;
class LoCtrlRequestPort_array_port;
class LoCtrlRequestPort_array_portDefaultTypeInternal;
extern LoCtrlRequestPort_array_portDefaultTypeInternal _LoCtrlRequestPort_array_port_default_instance_;
}  // namespace lo_ctrl_request_port
}  // namespace mf_manager
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* Arena::CreateMaybeMessage<::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort>(Arena*);
template<> ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port* Arena::CreateMaybeMessage<::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_manager {
namespace lo_ctrl_request_port {

// ===================================================================

class LoCtrlRequestPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort) */ {
 public:
  LoCtrlRequestPort();
  virtual ~LoCtrlRequestPort();

  LoCtrlRequestPort(const LoCtrlRequestPort& from);
  LoCtrlRequestPort(LoCtrlRequestPort&& from) noexcept
    : LoCtrlRequestPort() {
    *this = ::std::move(from);
  }

  inline LoCtrlRequestPort& operator=(const LoCtrlRequestPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoCtrlRequestPort& operator=(LoCtrlRequestPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoCtrlRequestPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoCtrlRequestPort* internal_default_instance() {
    return reinterpret_cast<const LoCtrlRequestPort*>(
               &_LoCtrlRequestPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoCtrlRequestPort& a, LoCtrlRequestPort& b) {
    a.Swap(&b);
  }
  inline void Swap(LoCtrlRequestPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoCtrlRequestPort* New() const final {
    return CreateMaybeMessage<LoCtrlRequestPort>(nullptr);
  }

  LoCtrlRequestPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoCtrlRequestPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoCtrlRequestPort& from);
  void MergeFrom(const LoCtrlRequestPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoCtrlRequestPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto);
    return ::descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kAccelerationReqMps2FieldNumber = 1727,
    kVelocityReqMpsFieldNumber = 2080,
    kDistanceToStopReqMFieldNumber = 3970,
    kActivateLoCtrlFieldNumber = 3767,
    kSecureInStandstillFieldNumber = 2614,
    kComfortStopRequestFieldNumber = 3303,
    kRemoteSelfTestFieldNumber = 2369,
    kActivateLoCtrlTypeNuFieldNumber = 49,
    kLoCtrlRequestTypeFieldNumber = 576,
    kUiVersionNumberFieldNumber = 2124,
    kLoCtrlRequestSourceNuFieldNumber = 2679,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest accelerationReq_mps2 = 1727;
  bool has_accelerationreq_mps2() const;
  private:
  bool _internal_has_accelerationreq_mps2() const;
  public:
  void clear_accelerationreq_mps2();
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& accelerationreq_mps2() const;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* release_accelerationreq_mps2();
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* mutable_accelerationreq_mps2();
  void set_allocated_accelerationreq_mps2(::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* accelerationreq_mps2);
  private:
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& _internal_accelerationreq_mps2() const;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* _internal_mutable_accelerationreq_mps2();
  public:

  // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest velocityReq_mps = 2080;
  bool has_velocityreq_mps() const;
  private:
  bool _internal_has_velocityreq_mps() const;
  public:
  void clear_velocityreq_mps();
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& velocityreq_mps() const;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* release_velocityreq_mps();
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* mutable_velocityreq_mps();
  void set_allocated_velocityreq_mps(::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* velocityreq_mps);
  private:
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& _internal_velocityreq_mps() const;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* _internal_mutable_velocityreq_mps();
  public:

  // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest distanceToStopReq_m = 3970;
  bool has_distancetostopreq_m() const;
  private:
  bool _internal_has_distancetostopreq_m() const;
  public:
  void clear_distancetostopreq_m();
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& distancetostopreq_m() const;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* release_distancetostopreq_m();
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* mutable_distancetostopreq_m();
  void set_allocated_distancetostopreq_m(::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* distancetostopreq_m);
  private:
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& _internal_distancetostopreq_m() const;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* _internal_mutable_distancetostopreq_m();
  public:

  // optional bool activateLoCtrl = 3767;
  bool has_activateloctrl() const;
  private:
  bool _internal_has_activateloctrl() const;
  public:
  void clear_activateloctrl();
  bool activateloctrl() const;
  void set_activateloctrl(bool value);
  private:
  bool _internal_activateloctrl() const;
  void _internal_set_activateloctrl(bool value);
  public:

  // optional bool secureInStandstill = 2614;
  bool has_secureinstandstill() const;
  private:
  bool _internal_has_secureinstandstill() const;
  public:
  void clear_secureinstandstill();
  bool secureinstandstill() const;
  void set_secureinstandstill(bool value);
  private:
  bool _internal_secureinstandstill() const;
  void _internal_set_secureinstandstill(bool value);
  public:

  // optional bool comfortStopRequest = 3303;
  bool has_comfortstoprequest() const;
  private:
  bool _internal_has_comfortstoprequest() const;
  public:
  void clear_comfortstoprequest();
  bool comfortstoprequest() const;
  void set_comfortstoprequest(bool value);
  private:
  bool _internal_comfortstoprequest() const;
  void _internal_set_comfortstoprequest(bool value);
  public:

  // optional bool remoteSelfTest = 2369;
  bool has_remoteselftest() const;
  private:
  bool _internal_has_remoteselftest() const;
  public:
  void clear_remoteselftest();
  bool remoteselftest() const;
  void set_remoteselftest(bool value);
  private:
  bool _internal_remoteselftest() const;
  void _internal_set_remoteselftest(bool value);
  public:

  // optional .pb.mf_manager.activate_lo_ctrl_type.ActivateLoCtrlType activateLoCtrlType_nu = 49;
  bool has_activateloctrltype_nu() const;
  private:
  bool _internal_has_activateloctrltype_nu() const;
  public:
  void clear_activateloctrltype_nu();
  ::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType activateloctrltype_nu() const;
  void set_activateloctrltype_nu(::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType value);
  private:
  ::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType _internal_activateloctrltype_nu() const;
  void _internal_set_activateloctrltype_nu(::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType value);
  public:

  // optional .pb.mf_manager.lo_ctrl_request_type.LoCtrlRequestType loCtrlRequestType = 576;
  bool has_loctrlrequesttype() const;
  private:
  bool _internal_has_loctrlrequesttype() const;
  public:
  void clear_loctrlrequesttype();
  ::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType loctrlrequesttype() const;
  void set_loctrlrequesttype(::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType value);
  private:
  ::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType _internal_loctrlrequesttype() const;
  void _internal_set_loctrlrequesttype(::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.mf_manager.lo_ctrl_request_source.loCtrlRequestSource loCtrlRequestSource_nu = 2679;
  bool has_loctrlrequestsource_nu() const;
  private:
  bool _internal_has_loctrlrequestsource_nu() const;
  public:
  void clear_loctrlrequestsource_nu();
  ::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource loctrlrequestsource_nu() const;
  void set_loctrlrequestsource_nu(::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource value);
  private:
  ::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource _internal_loctrlrequestsource_nu() const;
  void _internal_set_loctrlrequestsource_nu(::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* accelerationreq_mps2_;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* velocityreq_mps_;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* distancetostopreq_m_;
  bool activateloctrl_;
  bool secureinstandstill_;
  bool comfortstoprequest_;
  bool remoteselftest_;
  int activateloctrltype_nu_;
  int loctrlrequesttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  int loctrlrequestsource_nu_;
  friend struct ::TableStruct_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto;
};
// -------------------------------------------------------------------

class LoCtrlRequestPort_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port) */ {
 public:
  LoCtrlRequestPort_array_port();
  virtual ~LoCtrlRequestPort_array_port();

  LoCtrlRequestPort_array_port(const LoCtrlRequestPort_array_port& from);
  LoCtrlRequestPort_array_port(LoCtrlRequestPort_array_port&& from) noexcept
    : LoCtrlRequestPort_array_port() {
    *this = ::std::move(from);
  }

  inline LoCtrlRequestPort_array_port& operator=(const LoCtrlRequestPort_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoCtrlRequestPort_array_port& operator=(LoCtrlRequestPort_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoCtrlRequestPort_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoCtrlRequestPort_array_port* internal_default_instance() {
    return reinterpret_cast<const LoCtrlRequestPort_array_port*>(
               &_LoCtrlRequestPort_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoCtrlRequestPort_array_port& a, LoCtrlRequestPort_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(LoCtrlRequestPort_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoCtrlRequestPort_array_port* New() const final {
    return CreateMaybeMessage<LoCtrlRequestPort_array_port>(nullptr);
  }

  LoCtrlRequestPort_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoCtrlRequestPort_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoCtrlRequestPort_array_port& from);
  void MergeFrom(const LoCtrlRequestPort_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoCtrlRequestPort_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto);
    return ::descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2949,
  };
  // repeated .pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort data = 2949;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort >*
      mutable_data();
  private:
  const ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort& _internal_data(int index) const;
  ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* _internal_add_data();
  public:
  const ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort& data(int index) const;
  ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort > data_;
  friend struct ::TableStruct_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoCtrlRequestPort

// optional uint32 uiVersionNumber = 2124;
inline bool LoCtrlRequestPort::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void LoCtrlRequestPort::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoCtrlRequestPort::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoCtrlRequestPort::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void LoCtrlRequestPort::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  uiversionnumber_ = value;
}
inline void LoCtrlRequestPort::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool LoCtrlRequestPort::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool LoCtrlRequestPort::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& LoCtrlRequestPort::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& LoCtrlRequestPort::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* LoCtrlRequestPort::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* LoCtrlRequestPort::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* LoCtrlRequestPort::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void LoCtrlRequestPort::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.sSigHeader)
}

// optional bool activateLoCtrl = 3767;
inline bool LoCtrlRequestPort::_internal_has_activateloctrl() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_activateloctrl() const {
  return _internal_has_activateloctrl();
}
inline void LoCtrlRequestPort::clear_activateloctrl() {
  activateloctrl_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LoCtrlRequestPort::_internal_activateloctrl() const {
  return activateloctrl_;
}
inline bool LoCtrlRequestPort::activateloctrl() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.activateLoCtrl)
  return _internal_activateloctrl();
}
inline void LoCtrlRequestPort::_internal_set_activateloctrl(bool value) {
  _has_bits_[0] |= 0x00000010u;
  activateloctrl_ = value;
}
inline void LoCtrlRequestPort::set_activateloctrl(bool value) {
  _internal_set_activateloctrl(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.activateLoCtrl)
}

// optional .pb.mf_manager.lo_ctrl_request_type.LoCtrlRequestType loCtrlRequestType = 576;
inline bool LoCtrlRequestPort::_internal_has_loctrlrequesttype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_loctrlrequesttype() const {
  return _internal_has_loctrlrequesttype();
}
inline void LoCtrlRequestPort::clear_loctrlrequesttype() {
  loctrlrequesttype_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType LoCtrlRequestPort::_internal_loctrlrequesttype() const {
  return static_cast< ::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType >(loctrlrequesttype_);
}
inline ::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType LoCtrlRequestPort::loctrlrequesttype() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.loCtrlRequestType)
  return _internal_loctrlrequesttype();
}
inline void LoCtrlRequestPort::_internal_set_loctrlrequesttype(::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType value) {
  assert(::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  loctrlrequesttype_ = value;
}
inline void LoCtrlRequestPort::set_loctrlrequesttype(::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType value) {
  _internal_set_loctrlrequesttype(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.loCtrlRequestType)
}

// optional .pb.mf_manager.activate_lo_ctrl_type.ActivateLoCtrlType activateLoCtrlType_nu = 49;
inline bool LoCtrlRequestPort::_internal_has_activateloctrltype_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_activateloctrltype_nu() const {
  return _internal_has_activateloctrltype_nu();
}
inline void LoCtrlRequestPort::clear_activateloctrltype_nu() {
  activateloctrltype_nu_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType LoCtrlRequestPort::_internal_activateloctrltype_nu() const {
  return static_cast< ::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType >(activateloctrltype_nu_);
}
inline ::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType LoCtrlRequestPort::activateloctrltype_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.activateLoCtrlType_nu)
  return _internal_activateloctrltype_nu();
}
inline void LoCtrlRequestPort::_internal_set_activateloctrltype_nu(::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType value) {
  assert(::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  activateloctrltype_nu_ = value;
}
inline void LoCtrlRequestPort::set_activateloctrltype_nu(::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType value) {
  _internal_set_activateloctrltype_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.activateLoCtrlType_nu)
}

// optional bool secureInStandstill = 2614;
inline bool LoCtrlRequestPort::_internal_has_secureinstandstill() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_secureinstandstill() const {
  return _internal_has_secureinstandstill();
}
inline void LoCtrlRequestPort::clear_secureinstandstill() {
  secureinstandstill_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool LoCtrlRequestPort::_internal_secureinstandstill() const {
  return secureinstandstill_;
}
inline bool LoCtrlRequestPort::secureinstandstill() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.secureInStandstill)
  return _internal_secureinstandstill();
}
inline void LoCtrlRequestPort::_internal_set_secureinstandstill(bool value) {
  _has_bits_[0] |= 0x00000020u;
  secureinstandstill_ = value;
}
inline void LoCtrlRequestPort::set_secureinstandstill(bool value) {
  _internal_set_secureinstandstill(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.secureInStandstill)
}

// optional bool comfortStopRequest = 3303;
inline bool LoCtrlRequestPort::_internal_has_comfortstoprequest() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_comfortstoprequest() const {
  return _internal_has_comfortstoprequest();
}
inline void LoCtrlRequestPort::clear_comfortstoprequest() {
  comfortstoprequest_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LoCtrlRequestPort::_internal_comfortstoprequest() const {
  return comfortstoprequest_;
}
inline bool LoCtrlRequestPort::comfortstoprequest() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.comfortStopRequest)
  return _internal_comfortstoprequest();
}
inline void LoCtrlRequestPort::_internal_set_comfortstoprequest(bool value) {
  _has_bits_[0] |= 0x00000040u;
  comfortstoprequest_ = value;
}
inline void LoCtrlRequestPort::set_comfortstoprequest(bool value) {
  _internal_set_comfortstoprequest(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.comfortStopRequest)
}

// optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest distanceToStopReq_m = 3970;
inline bool LoCtrlRequestPort::_internal_has_distancetostopreq_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || distancetostopreq_m_ != nullptr);
  return value;
}
inline bool LoCtrlRequestPort::has_distancetostopreq_m() const {
  return _internal_has_distancetostopreq_m();
}
inline const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& LoCtrlRequestPort::_internal_distancetostopreq_m() const {
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* p = distancetostopreq_m_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest*>(
      &::pb::mf_manager::directed_lo_ctrl_request::_DirectedLoCtrlRequest_default_instance_);
}
inline const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& LoCtrlRequestPort::distancetostopreq_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.distanceToStopReq_m)
  return _internal_distancetostopreq_m();
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::release_distancetostopreq_m() {
  // @@protoc_insertion_point(field_release:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.distanceToStopReq_m)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* temp = distancetostopreq_m_;
  distancetostopreq_m_ = nullptr;
  return temp;
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::_internal_mutable_distancetostopreq_m() {
  _has_bits_[0] |= 0x00000008u;
  if (distancetostopreq_m_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest>(GetArenaNoVirtual());
    distancetostopreq_m_ = p;
  }
  return distancetostopreq_m_;
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::mutable_distancetostopreq_m() {
  // @@protoc_insertion_point(field_mutable:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.distanceToStopReq_m)
  return _internal_mutable_distancetostopreq_m();
}
inline void LoCtrlRequestPort::set_allocated_distancetostopreq_m(::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* distancetostopreq_m) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(distancetostopreq_m_);
  }
  if (distancetostopreq_m) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distancetostopreq_m = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distancetostopreq_m, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  distancetostopreq_m_ = distancetostopreq_m;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.distanceToStopReq_m)
}

// optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest velocityReq_mps = 2080;
inline bool LoCtrlRequestPort::_internal_has_velocityreq_mps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || velocityreq_mps_ != nullptr);
  return value;
}
inline bool LoCtrlRequestPort::has_velocityreq_mps() const {
  return _internal_has_velocityreq_mps();
}
inline const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& LoCtrlRequestPort::_internal_velocityreq_mps() const {
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* p = velocityreq_mps_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest*>(
      &::pb::mf_manager::directed_lo_ctrl_request::_DirectedLoCtrlRequest_default_instance_);
}
inline const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& LoCtrlRequestPort::velocityreq_mps() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.velocityReq_mps)
  return _internal_velocityreq_mps();
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::release_velocityreq_mps() {
  // @@protoc_insertion_point(field_release:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.velocityReq_mps)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* temp = velocityreq_mps_;
  velocityreq_mps_ = nullptr;
  return temp;
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::_internal_mutable_velocityreq_mps() {
  _has_bits_[0] |= 0x00000004u;
  if (velocityreq_mps_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest>(GetArenaNoVirtual());
    velocityreq_mps_ = p;
  }
  return velocityreq_mps_;
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::mutable_velocityreq_mps() {
  // @@protoc_insertion_point(field_mutable:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.velocityReq_mps)
  return _internal_mutable_velocityreq_mps();
}
inline void LoCtrlRequestPort::set_allocated_velocityreq_mps(::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* velocityreq_mps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocityreq_mps_);
  }
  if (velocityreq_mps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocityreq_mps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocityreq_mps, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  velocityreq_mps_ = velocityreq_mps;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.velocityReq_mps)
}

// optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest accelerationReq_mps2 = 1727;
inline bool LoCtrlRequestPort::_internal_has_accelerationreq_mps2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || accelerationreq_mps2_ != nullptr);
  return value;
}
inline bool LoCtrlRequestPort::has_accelerationreq_mps2() const {
  return _internal_has_accelerationreq_mps2();
}
inline const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& LoCtrlRequestPort::_internal_accelerationreq_mps2() const {
  const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* p = accelerationreq_mps2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest*>(
      &::pb::mf_manager::directed_lo_ctrl_request::_DirectedLoCtrlRequest_default_instance_);
}
inline const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& LoCtrlRequestPort::accelerationreq_mps2() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.accelerationReq_mps2)
  return _internal_accelerationreq_mps2();
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::release_accelerationreq_mps2() {
  // @@protoc_insertion_point(field_release:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.accelerationReq_mps2)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* temp = accelerationreq_mps2_;
  accelerationreq_mps2_ = nullptr;
  return temp;
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::_internal_mutable_accelerationreq_mps2() {
  _has_bits_[0] |= 0x00000002u;
  if (accelerationreq_mps2_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest>(GetArenaNoVirtual());
    accelerationreq_mps2_ = p;
  }
  return accelerationreq_mps2_;
}
inline ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* LoCtrlRequestPort::mutable_accelerationreq_mps2() {
  // @@protoc_insertion_point(field_mutable:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.accelerationReq_mps2)
  return _internal_mutable_accelerationreq_mps2();
}
inline void LoCtrlRequestPort::set_allocated_accelerationreq_mps2(::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest* accelerationreq_mps2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accelerationreq_mps2_);
  }
  if (accelerationreq_mps2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accelerationreq_mps2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accelerationreq_mps2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  accelerationreq_mps2_ = accelerationreq_mps2;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.accelerationReq_mps2)
}

// optional .pb.mf_manager.lo_ctrl_request_source.loCtrlRequestSource loCtrlRequestSource_nu = 2679;
inline bool LoCtrlRequestPort::_internal_has_loctrlrequestsource_nu() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_loctrlrequestsource_nu() const {
  return _internal_has_loctrlrequestsource_nu();
}
inline void LoCtrlRequestPort::clear_loctrlrequestsource_nu() {
  loctrlrequestsource_nu_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource LoCtrlRequestPort::_internal_loctrlrequestsource_nu() const {
  return static_cast< ::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource >(loctrlrequestsource_nu_);
}
inline ::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource LoCtrlRequestPort::loctrlrequestsource_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.loCtrlRequestSource_nu)
  return _internal_loctrlrequestsource_nu();
}
inline void LoCtrlRequestPort::_internal_set_loctrlrequestsource_nu(::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource value) {
  assert(::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  loctrlrequestsource_nu_ = value;
}
inline void LoCtrlRequestPort::set_loctrlrequestsource_nu(::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource value) {
  _internal_set_loctrlrequestsource_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.loCtrlRequestSource_nu)
}

// optional bool remoteSelfTest = 2369;
inline bool LoCtrlRequestPort::_internal_has_remoteselftest() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LoCtrlRequestPort::has_remoteselftest() const {
  return _internal_has_remoteselftest();
}
inline void LoCtrlRequestPort::clear_remoteselftest() {
  remoteselftest_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool LoCtrlRequestPort::_internal_remoteselftest() const {
  return remoteselftest_;
}
inline bool LoCtrlRequestPort::remoteselftest() const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.remoteSelfTest)
  return _internal_remoteselftest();
}
inline void LoCtrlRequestPort::_internal_set_remoteselftest(bool value) {
  _has_bits_[0] |= 0x00000080u;
  remoteselftest_ = value;
}
inline void LoCtrlRequestPort::set_remoteselftest(bool value) {
  _internal_set_remoteselftest(value);
  // @@protoc_insertion_point(field_set:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort.remoteSelfTest)
}

// -------------------------------------------------------------------

// LoCtrlRequestPort_array_port

// repeated .pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort data = 2949;
inline int LoCtrlRequestPort_array_port::_internal_data_size() const {
  return data_.size();
}
inline int LoCtrlRequestPort_array_port::data_size() const {
  return _internal_data_size();
}
inline void LoCtrlRequestPort_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* LoCtrlRequestPort_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort >*
LoCtrlRequestPort_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port.data)
  return &data_;
}
inline const ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort& LoCtrlRequestPort_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort& LoCtrlRequestPort_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* LoCtrlRequestPort_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* LoCtrlRequestPort_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort >&
LoCtrlRequestPort_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lo_ctrl_request_port
}  // namespace mf_manager
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto
