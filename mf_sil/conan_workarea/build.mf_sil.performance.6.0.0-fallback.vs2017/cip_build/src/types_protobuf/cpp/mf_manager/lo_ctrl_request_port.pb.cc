// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_manager/lo_ctrl_request_port.proto

#include "mf_manager/lo_ctrl_request_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmanager_2fdirected_5flo_5fctrl_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectedLoCtrlRequest_mf_5fmanager_2fdirected_5flo_5fctrl_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto;
namespace pb {
namespace mf_manager {
namespace lo_ctrl_request_port {
class LoCtrlRequestPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoCtrlRequestPort> _instance;
} _LoCtrlRequestPort_default_instance_;
class LoCtrlRequestPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoCtrlRequestPort_array_port> _instance;
} _LoCtrlRequestPort_array_port_default_instance_;
}  // namespace lo_ctrl_request_port
}  // namespace mf_manager
}  // namespace pb
static void InitDefaultsscc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_default_instance_;
    new (ptr) ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_DirectedLoCtrlRequest_mf_5fmanager_2fdirected_5flo_5fctrl_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_LoCtrlRequestPort_array_port_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_array_port_default_instance_;
    new (ptr) ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoCtrlRequestPort_array_port_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoCtrlRequestPort_array_port_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto}, {
      &scc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, activateloctrl_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, loctrlrequesttype_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, activateloctrltype_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, secureinstandstill_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, comfortstoprequest_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, distancetostopreq_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, velocityreq_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, accelerationreq_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, loctrlrequestsource_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort, remoteselftest_),
  10,
  0,
  4,
  9,
  8,
  5,
  6,
  3,
  2,
  1,
  11,
  7,
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort)},
  { 29, 35, sizeof(::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%mf_manager/lo_ctrl_request_port.proto\022"
  "\"pb.mf_manager.lo_ctrl_request_port\032\027eco"
  "/signal_header.proto\032%mf_manager/lo_ctrl"
  "_request_type.proto\032&mf_manager/activate"
  "_lo_ctrl_type.proto\032)mf_manager/directed"
  "_lo_ctrl_request.proto\032\'mf_manager/lo_ct"
  "rl_request_source.proto\"\355\005\n\021LoCtrlReques"
  "tPort\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigH"
  "eader\030\211\010 \001(\0132\".pb.eco.signal_header.Sign"
  "alHeader\022\027\n\016activateLoCtrl\030\267\035 \001(\010\022Q\n\021loC"
  "trlRequestType\030\300\004 \001(\01625.pb.mf_manager.lo"
  "_ctrl_request_type.LoCtrlRequestType\022V\n\025"
  "activateLoCtrlType_nu\0301 \001(\01627.pb.mf_mana"
  "ger.activate_lo_ctrl_type.ActivateLoCtrl"
  "Type\022\033\n\022secureInStandstill\030\266\024 \001(\010\022\033\n\022com"
  "fortStopRequest\030\347\031 \001(\010\022[\n\023distanceToStop"
  "Req_m\030\202\037 \001(\0132=.pb.mf_manager.directed_lo"
  "_ctrl_request.DirectedLoCtrlRequest\022W\n\017v"
  "elocityReq_mps\030\240\020 \001(\0132=.pb.mf_manager.di"
  "rected_lo_ctrl_request.DirectedLoCtrlReq"
  "uest\022\\\n\024accelerationReq_mps2\030\277\r \001(\0132=.pb"
  ".mf_manager.directed_lo_ctrl_request.Dir"
  "ectedLoCtrlRequest\022Z\n\026loCtrlRequestSourc"
  "e_nu\030\367\024 \001(\01629.pb.mf_manager.lo_ctrl_requ"
  "est_source.loCtrlRequestSource\022\027\n\016remote"
  "SelfTest\030\301\022 \001(\010\"d\n\034LoCtrlRequestPort_arr"
  "ay_port\022D\n\004data\030\205\027 \003(\01325.pb.mf_manager.l"
  "o_ctrl_request_port.LoCtrlRequestPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_deps[5] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_mf_5fmanager_2factivate_5flo_5fctrl_5ftype_2eproto,
  &::descriptor_table_mf_5fmanager_2fdirected_5flo_5fctrl_5frequest_2eproto,
  &::descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fsource_2eproto,
  &::descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_sccs[2] = {
  &scc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.base,
  &scc_info_LoCtrlRequestPort_array_port_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_once;
static bool descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto = {
  &descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_initialized, descriptor_table_protodef_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto, "mf_manager/lo_ctrl_request_port.proto", 1117,
  &descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_once, descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_sccs, descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto::offsets,
  file_level_metadata_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto, 2, file_level_enum_descriptors_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto, file_level_service_descriptors_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto), true);
namespace pb {
namespace mf_manager {
namespace lo_ctrl_request_port {

// ===================================================================

void LoCtrlRequestPort::InitAsDefaultInstance() {
  ::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_default_instance_._instance.get_mutable()->distancetostopreq_m_ = const_cast< ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest*>(
      ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest::internal_default_instance());
  ::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_default_instance_._instance.get_mutable()->velocityreq_mps_ = const_cast< ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest*>(
      ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest::internal_default_instance());
  ::pb::mf_manager::lo_ctrl_request_port::_LoCtrlRequestPort_default_instance_._instance.get_mutable()->accelerationreq_mps2_ = const_cast< ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest*>(
      ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest::internal_default_instance());
}
class LoCtrlRequestPort::_Internal {
 public:
  using HasBits = decltype(std::declval<LoCtrlRequestPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const LoCtrlRequestPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activateloctrl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_loctrlrequesttype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_activateloctrltype_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_secureinstandstill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_comfortstoprequest(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& distancetostopreq_m(const LoCtrlRequestPort* msg);
  static void set_has_distancetostopreq_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& velocityreq_mps(const LoCtrlRequestPort* msg);
  static void set_has_velocityreq_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest& accelerationreq_mps2(const LoCtrlRequestPort* msg);
  static void set_has_accelerationreq_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loctrlrequestsource_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_remoteselftest(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
LoCtrlRequestPort::_Internal::ssigheader(const LoCtrlRequestPort* msg) {
  return *msg->ssigheader_;
}
const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest&
LoCtrlRequestPort::_Internal::distancetostopreq_m(const LoCtrlRequestPort* msg) {
  return *msg->distancetostopreq_m_;
}
const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest&
LoCtrlRequestPort::_Internal::velocityreq_mps(const LoCtrlRequestPort* msg) {
  return *msg->velocityreq_mps_;
}
const ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest&
LoCtrlRequestPort::_Internal::accelerationreq_mps2(const LoCtrlRequestPort* msg) {
  return *msg->accelerationreq_mps2_;
}
void LoCtrlRequestPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LoCtrlRequestPort::clear_distancetostopreq_m() {
  if (distancetostopreq_m_ != nullptr) distancetostopreq_m_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LoCtrlRequestPort::clear_velocityreq_mps() {
  if (velocityreq_mps_ != nullptr) velocityreq_mps_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LoCtrlRequestPort::clear_accelerationreq_mps2() {
  if (accelerationreq_mps2_ != nullptr) accelerationreq_mps2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LoCtrlRequestPort::LoCtrlRequestPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
}
LoCtrlRequestPort::LoCtrlRequestPort(const LoCtrlRequestPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_accelerationreq_mps2()) {
    accelerationreq_mps2_ = new ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest(*from.accelerationreq_mps2_);
  } else {
    accelerationreq_mps2_ = nullptr;
  }
  if (from._internal_has_velocityreq_mps()) {
    velocityreq_mps_ = new ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest(*from.velocityreq_mps_);
  } else {
    velocityreq_mps_ = nullptr;
  }
  if (from._internal_has_distancetostopreq_m()) {
    distancetostopreq_m_ = new ::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest(*from.distancetostopreq_m_);
  } else {
    distancetostopreq_m_ = nullptr;
  }
  ::memcpy(&activateloctrl_, &from.activateloctrl_,
    static_cast<size_t>(reinterpret_cast<char*>(&loctrlrequestsource_nu_) -
    reinterpret_cast<char*>(&activateloctrl_)) + sizeof(loctrlrequestsource_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
}

void LoCtrlRequestPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loctrlrequestsource_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(loctrlrequestsource_nu_));
}

LoCtrlRequestPort::~LoCtrlRequestPort() {
  // @@protoc_insertion_point(destructor:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  SharedDtor();
}

void LoCtrlRequestPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete accelerationreq_mps2_;
  if (this != internal_default_instance()) delete velocityreq_mps_;
  if (this != internal_default_instance()) delete distancetostopreq_m_;
}

void LoCtrlRequestPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoCtrlRequestPort& LoCtrlRequestPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoCtrlRequestPort_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void LoCtrlRequestPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(accelerationreq_mps2_ != nullptr);
      accelerationreq_mps2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(velocityreq_mps_ != nullptr);
      velocityreq_mps_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(distancetostopreq_m_ != nullptr);
      distancetostopreq_m_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&activateloctrl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remoteselftest_) -
        reinterpret_cast<char*>(&activateloctrl_)) + sizeof(remoteselftest_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&activateloctrltype_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loctrlrequestsource_nu_) -
        reinterpret_cast<char*>(&activateloctrltype_nu_)) + sizeof(loctrlrequestsource_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoCtrlRequestPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.mf_manager.activate_lo_ctrl_type.ActivateLoCtrlType activateLoCtrlType_nu = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType_IsValid(val))) {
            _internal_set_activateloctrltype_nu(static_cast<::pb::mf_manager::activate_lo_ctrl_type::ActivateLoCtrlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(49, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_manager.lo_ctrl_request_type.LoCtrlRequestType loCtrlRequestType = 576;
      case 576:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType_IsValid(val))) {
            _internal_set_loctrlrequesttype(static_cast<::pb::mf_manager::lo_ctrl_request_type::LoCtrlRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(576, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest accelerationReq_mps2 = 1727;
      case 1727:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_accelerationreq_mps2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest velocityReq_mps = 2080;
      case 2080:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocityreq_mps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remoteSelfTest = 2369;
      case 2369:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_remoteselftest(&has_bits);
          remoteselftest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool secureInStandstill = 2614;
      case 2614:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_secureinstandstill(&has_bits);
          secureinstandstill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_manager.lo_ctrl_request_source.loCtrlRequestSource loCtrlRequestSource_nu = 2679;
      case 2679:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource_IsValid(val))) {
            _internal_set_loctrlrequestsource_nu(static_cast<::pb::mf_manager::lo_ctrl_request_source::loCtrlRequestSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2679, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool comfortStopRequest = 3303;
      case 3303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_comfortstoprequest(&has_bits);
          comfortstoprequest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool activateLoCtrl = 3767;
      case 3767:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_activateloctrl(&has_bits);
          activateloctrl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest distanceToStopReq_m = 3970;
      case 3970:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_distancetostopreq_m(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoCtrlRequestPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.mf_manager.activate_lo_ctrl_type.ActivateLoCtrlType activateLoCtrlType_nu = 49;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      49, this->_internal_activateloctrltype_nu(), target);
  }

  // optional .pb.mf_manager.lo_ctrl_request_type.LoCtrlRequestType loCtrlRequestType = 576;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      576, this->_internal_loctrlrequesttype(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest accelerationReq_mps2 = 1727;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1727, _Internal::accelerationreq_mps2(this), target, stream);
  }

  // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest velocityReq_mps = 2080;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2080, _Internal::velocityreq_mps(this), target, stream);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool remoteSelfTest = 2369;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2369, this->_internal_remoteselftest(), target);
  }

  // optional bool secureInStandstill = 2614;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2614, this->_internal_secureinstandstill(), target);
  }

  // optional .pb.mf_manager.lo_ctrl_request_source.loCtrlRequestSource loCtrlRequestSource_nu = 2679;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2679, this->_internal_loctrlrequestsource_nu(), target);
  }

  // optional bool comfortStopRequest = 3303;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3303, this->_internal_comfortstoprequest(), target);
  }

  // optional bool activateLoCtrl = 3767;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3767, this->_internal_activateloctrl(), target);
  }

  // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest distanceToStopReq_m = 3970;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3970, _Internal::distancetostopreq_m(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  return target;
}

size_t LoCtrlRequestPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest accelerationReq_mps2 = 1727;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accelerationreq_mps2_);
    }

    // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest velocityReq_mps = 2080;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocityreq_mps_);
    }

    // optional .pb.mf_manager.directed_lo_ctrl_request.DirectedLoCtrlRequest distanceToStopReq_m = 3970;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distancetostopreq_m_);
    }

    // optional bool activateLoCtrl = 3767;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool secureInStandstill = 2614;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool comfortStopRequest = 3303;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 1;
    }

    // optional bool remoteSelfTest = 2369;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .pb.mf_manager.activate_lo_ctrl_type.ActivateLoCtrlType activateLoCtrlType_nu = 49;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activateloctrltype_nu());
    }

    // optional .pb.mf_manager.lo_ctrl_request_type.LoCtrlRequestType loCtrlRequestType = 576;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loctrlrequesttype());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional .pb.mf_manager.lo_ctrl_request_source.loCtrlRequestSource loCtrlRequestSource_nu = 2679;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loctrlrequestsource_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoCtrlRequestPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  const LoCtrlRequestPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoCtrlRequestPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
    MergeFrom(*source);
  }
}

void LoCtrlRequestPort::MergeFrom(const LoCtrlRequestPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_accelerationreq_mps2()->::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest::MergeFrom(from._internal_accelerationreq_mps2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_velocityreq_mps()->::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest::MergeFrom(from._internal_velocityreq_mps());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_distancetostopreq_m()->::pb::mf_manager::directed_lo_ctrl_request::DirectedLoCtrlRequest::MergeFrom(from._internal_distancetostopreq_m());
    }
    if (cached_has_bits & 0x00000010u) {
      activateloctrl_ = from.activateloctrl_;
    }
    if (cached_has_bits & 0x00000020u) {
      secureinstandstill_ = from.secureinstandstill_;
    }
    if (cached_has_bits & 0x00000040u) {
      comfortstoprequest_ = from.comfortstoprequest_;
    }
    if (cached_has_bits & 0x00000080u) {
      remoteselftest_ = from.remoteselftest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      activateloctrltype_nu_ = from.activateloctrltype_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      loctrlrequesttype_ = from.loctrlrequesttype_;
    }
    if (cached_has_bits & 0x00000400u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000800u) {
      loctrlrequestsource_nu_ = from.loctrlrequestsource_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoCtrlRequestPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoCtrlRequestPort::CopyFrom(const LoCtrlRequestPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoCtrlRequestPort::IsInitialized() const {
  return true;
}

void LoCtrlRequestPort::InternalSwap(LoCtrlRequestPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(accelerationreq_mps2_, other->accelerationreq_mps2_);
  swap(velocityreq_mps_, other->velocityreq_mps_);
  swap(distancetostopreq_m_, other->distancetostopreq_m_);
  swap(activateloctrl_, other->activateloctrl_);
  swap(secureinstandstill_, other->secureinstandstill_);
  swap(comfortstoprequest_, other->comfortstoprequest_);
  swap(remoteselftest_, other->remoteselftest_);
  swap(activateloctrltype_nu_, other->activateloctrltype_nu_);
  swap(loctrlrequesttype_, other->loctrlrequesttype_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(loctrlrequestsource_nu_, other->loctrlrequestsource_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoCtrlRequestPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoCtrlRequestPort_array_port::InitAsDefaultInstance() {
}
class LoCtrlRequestPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<LoCtrlRequestPort_array_port>()._has_bits_);
};

LoCtrlRequestPort_array_port::LoCtrlRequestPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
}
LoCtrlRequestPort_array_port::LoCtrlRequestPort_array_port(const LoCtrlRequestPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
}

void LoCtrlRequestPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoCtrlRequestPort_array_port_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.base);
}

LoCtrlRequestPort_array_port::~LoCtrlRequestPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  SharedDtor();
}

void LoCtrlRequestPort_array_port::SharedDtor() {
}

void LoCtrlRequestPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoCtrlRequestPort_array_port& LoCtrlRequestPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoCtrlRequestPort_array_port_mf_5fmanager_2flo_5fctrl_5frequest_5fport_2eproto.base);
  return *internal_default_instance();
}


void LoCtrlRequestPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoCtrlRequestPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort data = 2949;
      case 2949:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoCtrlRequestPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort data = 2949;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2949, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  return target;
}

size_t LoCtrlRequestPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort data = 2949;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoCtrlRequestPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const LoCtrlRequestPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoCtrlRequestPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
    MergeFrom(*source);
  }
}

void LoCtrlRequestPort_array_port::MergeFrom(const LoCtrlRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void LoCtrlRequestPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoCtrlRequestPort_array_port::CopyFrom(const LoCtrlRequestPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_manager.lo_ctrl_request_port.LoCtrlRequestPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoCtrlRequestPort_array_port::IsInitialized() const {
  return true;
}

void LoCtrlRequestPort_array_port::InternalSwap(LoCtrlRequestPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoCtrlRequestPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lo_ctrl_request_port
}  // namespace mf_manager
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort* Arena::CreateMaybeMessage< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port* Arena::CreateMaybeMessage< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_manager::lo_ctrl_request_port::LoCtrlRequestPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
