// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_hmitoap/gesture_code.proto

#include "ap_hmitoap/gesture_code.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace ap_hmitoap {
namespace gesture_code {
}  // namespace gesture_code
}  // namespace ap_hmitoap
}  // namespace pb
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_ap_5fhmitoap_2fgesture_5fcode_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ap_5fhmitoap_2fgesture_5fcode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fhmitoap_2fgesture_5fcode_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fhmitoap_2fgesture_5fcode_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_ap_5fhmitoap_2fgesture_5fcode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035ap_hmitoap/gesture_code.proto\022\032pb.ap_h"
  "mitoap.gesture_code*\301\001\n\013GestureCode\022\r\n\tN"
  "O_ACTION\020\000\022\t\n\005PRESS\020\001\022\r\n\tLONGPRESS\020\002\022\013\n\007"
  "RELEASE\020\003\022\t\n\005CLICK\020\004\022\016\n\nRIGHTCLICK\020\005\022\010\n\004"
  "DRAG\020\006\022\010\n\004ZOOM\020\007\022\n\n\006ROTATE\020\010\022\007\n\003RAW\020\t\022\017\n"
  "\013DOUBLECLICK\020\n\022\017\n\013TRIPLECLICK\020\013\022\t\n\005FLICK"
  "\020\014\022\013\n\007INVALID\020\037"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_once;
static bool descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto = {
  &descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_initialized, descriptor_table_protodef_ap_5fhmitoap_2fgesture_5fcode_2eproto, "ap_hmitoap/gesture_code.proto", 255,
  &descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_once, descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_sccs, descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_ap_5fhmitoap_2fgesture_5fcode_2eproto::offsets,
  file_level_metadata_ap_5fhmitoap_2fgesture_5fcode_2eproto, 0, file_level_enum_descriptors_ap_5fhmitoap_2fgesture_5fcode_2eproto, file_level_service_descriptors_ap_5fhmitoap_2fgesture_5fcode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fhmitoap_2fgesture_5fcode_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto), true);
namespace pb {
namespace ap_hmitoap {
namespace gesture_code {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GestureCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ap_5fhmitoap_2fgesture_5fcode_2eproto);
  return file_level_enum_descriptors_ap_5fhmitoap_2fgesture_5fcode_2eproto[0];
}
bool GestureCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 31:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gesture_code
}  // namespace ap_hmitoap
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
