// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/mf_lsca_consts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2fmf_5flsca_5fconsts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2fmf_5flsca_5fconsts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fmf_5flsca_5fconsts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5flsca_2fmf_5flsca_5fconsts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto;
namespace pb {
namespace mf_lsca {
namespace mf_lsca_consts {
class MF_LSCA_Consts;
class MF_LSCA_ConstsDefaultTypeInternal;
extern MF_LSCA_ConstsDefaultTypeInternal _MF_LSCA_Consts_default_instance_;
class MF_LSCA_Consts_array_port;
class MF_LSCA_Consts_array_portDefaultTypeInternal;
extern MF_LSCA_Consts_array_portDefaultTypeInternal _MF_LSCA_Consts_array_port_default_instance_;
}  // namespace mf_lsca_consts
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* Arena::CreateMaybeMessage<::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts>(Arena*);
template<> ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port* Arena::CreateMaybeMessage<::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_lsca {
namespace mf_lsca_consts {

// ===================================================================

class MF_LSCA_Consts :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts) */ {
 public:
  MF_LSCA_Consts();
  virtual ~MF_LSCA_Consts();

  MF_LSCA_Consts(const MF_LSCA_Consts& from);
  MF_LSCA_Consts(MF_LSCA_Consts&& from) noexcept
    : MF_LSCA_Consts() {
    *this = ::std::move(from);
  }

  inline MF_LSCA_Consts& operator=(const MF_LSCA_Consts& from) {
    CopyFrom(from);
    return *this;
  }
  inline MF_LSCA_Consts& operator=(MF_LSCA_Consts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MF_LSCA_Consts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MF_LSCA_Consts* internal_default_instance() {
    return reinterpret_cast<const MF_LSCA_Consts*>(
               &_MF_LSCA_Consts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MF_LSCA_Consts& a, MF_LSCA_Consts& b) {
    a.Swap(&b);
  }
  inline void Swap(MF_LSCA_Consts* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MF_LSCA_Consts* New() const final {
    return CreateMaybeMessage<MF_LSCA_Consts>(nullptr);
  }

  MF_LSCA_Consts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MF_LSCA_Consts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MF_LSCA_Consts& from);
  void MergeFrom(const MF_LSCA_Consts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MF_LSCA_Consts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto);
    return ::descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAXHITCHSHAPESIZEFieldNumber = 3192,
    kMAXDYNAMICOBJECTSBRAKENUFieldNumber = 1290,
    kMAXDYNAMICOBJECTSIZENUFieldNumber = 1393,
    kMAXSIMPLEBODYSHAPESIZEFieldNumber = 1541,
    kMAXBODYINDICESSIZEFieldNumber = 1726,
    kMAXSTATICOBJECTSIZENUFieldNumber = 1758,
    kMAXSTATICOBJECTSBRAKENUFieldNumber = 1949,
    kMAXWHEELSHAPESIZEFieldNumber = 1981,
    kMAXBODYSHAPESIZEFieldNumber = 2233,
    kMAXMIRRORSHAPESIZEFieldNumber = 2661,
    kSTATICBRAKEROISIZEFieldNumber = 2852,
    kDYNAMICBRAKEROISIZEFieldNumber = 2912,
    kMAXDYNAMICOBJECTPREDICTIONSIZENUFieldNumber = 3114,
  };
  // optional uint32 MAX_HITCH_SHAPE_SIZE = 3192;
  bool has_max_hitch_shape_size() const;
  private:
  bool _internal_has_max_hitch_shape_size() const;
  public:
  void clear_max_hitch_shape_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hitch_shape_size() const;
  void set_max_hitch_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hitch_shape_size() const;
  void _internal_set_max_hitch_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_DYNAMIC_OBJECTS_BRAKE_NU = 1290;
  bool has_max_dynamic_objects_brake_nu() const;
  private:
  bool _internal_has_max_dynamic_objects_brake_nu() const;
  public:
  void clear_max_dynamic_objects_brake_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_dynamic_objects_brake_nu() const;
  void set_max_dynamic_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_dynamic_objects_brake_nu() const;
  void _internal_set_max_dynamic_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_DYNAMIC_OBJECT_SIZE_NU = 1393;
  bool has_max_dynamic_object_size_nu() const;
  private:
  bool _internal_has_max_dynamic_object_size_nu() const;
  public:
  void clear_max_dynamic_object_size_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_dynamic_object_size_nu() const;
  void set_max_dynamic_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_dynamic_object_size_nu() const;
  void _internal_set_max_dynamic_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_SIMPLE_BODY_SHAPE_SIZE = 1541;
  bool has_max_simple_body_shape_size() const;
  private:
  bool _internal_has_max_simple_body_shape_size() const;
  public:
  void clear_max_simple_body_shape_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_simple_body_shape_size() const;
  void set_max_simple_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_simple_body_shape_size() const;
  void _internal_set_max_simple_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_BODY_INDICES_SIZE = 1726;
  bool has_max_body_indices_size() const;
  private:
  bool _internal_has_max_body_indices_size() const;
  public:
  void clear_max_body_indices_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_body_indices_size() const;
  void set_max_body_indices_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_body_indices_size() const;
  void _internal_set_max_body_indices_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_STATIC_OBJECT_SIZE_NU = 1758;
  bool has_max_static_object_size_nu() const;
  private:
  bool _internal_has_max_static_object_size_nu() const;
  public:
  void clear_max_static_object_size_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_static_object_size_nu() const;
  void set_max_static_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_static_object_size_nu() const;
  void _internal_set_max_static_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_STATIC_OBJECTS_BRAKE_NU = 1949;
  bool has_max_static_objects_brake_nu() const;
  private:
  bool _internal_has_max_static_objects_brake_nu() const;
  public:
  void clear_max_static_objects_brake_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_static_objects_brake_nu() const;
  void set_max_static_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_static_objects_brake_nu() const;
  void _internal_set_max_static_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_WHEEL_SHAPE_SIZE = 1981;
  bool has_max_wheel_shape_size() const;
  private:
  bool _internal_has_max_wheel_shape_size() const;
  public:
  void clear_max_wheel_shape_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_wheel_shape_size() const;
  void set_max_wheel_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_wheel_shape_size() const;
  void _internal_set_max_wheel_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_BODY_SHAPE_SIZE = 2233;
  bool has_max_body_shape_size() const;
  private:
  bool _internal_has_max_body_shape_size() const;
  public:
  void clear_max_body_shape_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_body_shape_size() const;
  void set_max_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_body_shape_size() const;
  void _internal_set_max_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_MIRROR_SHAPE_SIZE = 2661;
  bool has_max_mirror_shape_size() const;
  private:
  bool _internal_has_max_mirror_shape_size() const;
  public:
  void clear_max_mirror_shape_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_mirror_shape_size() const;
  void set_max_mirror_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_mirror_shape_size() const;
  void _internal_set_max_mirror_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 STATIC_BRAKE_ROI_SIZE = 2852;
  bool has_static_brake_roi_size() const;
  private:
  bool _internal_has_static_brake_roi_size() const;
  public:
  void clear_static_brake_roi_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 static_brake_roi_size() const;
  void set_static_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_static_brake_roi_size() const;
  void _internal_set_static_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 DYNAMIC_BRAKE_ROI_SIZE = 2912;
  bool has_dynamic_brake_roi_size() const;
  private:
  bool _internal_has_dynamic_brake_roi_size() const;
  public:
  void clear_dynamic_brake_roi_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 dynamic_brake_roi_size() const;
  void set_dynamic_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dynamic_brake_roi_size() const;
  void _internal_set_dynamic_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 MAX_DYNAMIC_OBJECT_PREDICTION_SIZE_NU = 3114;
  bool has_max_dynamic_object_prediction_size_nu() const;
  private:
  bool _internal_has_max_dynamic_object_prediction_size_nu() const;
  public:
  void clear_max_dynamic_object_prediction_size_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_dynamic_object_prediction_size_nu() const;
  void set_max_dynamic_object_prediction_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_dynamic_object_prediction_size_nu() const;
  void _internal_set_max_dynamic_object_prediction_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hitch_shape_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_dynamic_objects_brake_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_dynamic_object_size_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_simple_body_shape_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_body_indices_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_static_object_size_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_static_objects_brake_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_wheel_shape_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_body_shape_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_mirror_shape_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 static_brake_roi_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dynamic_brake_roi_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_dynamic_object_prediction_size_nu_;
  friend struct ::TableStruct_mf_5flsca_2fmf_5flsca_5fconsts_2eproto;
};
// -------------------------------------------------------------------

class MF_LSCA_Consts_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port) */ {
 public:
  MF_LSCA_Consts_array_port();
  virtual ~MF_LSCA_Consts_array_port();

  MF_LSCA_Consts_array_port(const MF_LSCA_Consts_array_port& from);
  MF_LSCA_Consts_array_port(MF_LSCA_Consts_array_port&& from) noexcept
    : MF_LSCA_Consts_array_port() {
    *this = ::std::move(from);
  }

  inline MF_LSCA_Consts_array_port& operator=(const MF_LSCA_Consts_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline MF_LSCA_Consts_array_port& operator=(MF_LSCA_Consts_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MF_LSCA_Consts_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MF_LSCA_Consts_array_port* internal_default_instance() {
    return reinterpret_cast<const MF_LSCA_Consts_array_port*>(
               &_MF_LSCA_Consts_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MF_LSCA_Consts_array_port& a, MF_LSCA_Consts_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(MF_LSCA_Consts_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MF_LSCA_Consts_array_port* New() const final {
    return CreateMaybeMessage<MF_LSCA_Consts_array_port>(nullptr);
  }

  MF_LSCA_Consts_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MF_LSCA_Consts_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MF_LSCA_Consts_array_port& from);
  void MergeFrom(const MF_LSCA_Consts_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MF_LSCA_Consts_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto);
    return ::descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2405,
  };
  // repeated .pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts data = 2405;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts >*
      mutable_data();
  private:
  const ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts& _internal_data(int index) const;
  ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* _internal_add_data();
  public:
  const ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts& data(int index) const;
  ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts > data_;
  friend struct ::TableStruct_mf_5flsca_2fmf_5flsca_5fconsts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MF_LSCA_Consts

// optional uint32 MAX_BODY_SHAPE_SIZE = 2233;
inline bool MF_LSCA_Consts::_internal_has_max_body_shape_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_body_shape_size() const {
  return _internal_has_max_body_shape_size();
}
inline void MF_LSCA_Consts::clear_max_body_shape_size() {
  max_body_shape_size_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_body_shape_size() const {
  return max_body_shape_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_body_shape_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_BODY_SHAPE_SIZE)
  return _internal_max_body_shape_size();
}
inline void MF_LSCA_Consts::_internal_set_max_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  max_body_shape_size_ = value;
}
inline void MF_LSCA_Consts::set_max_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_body_shape_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_BODY_SHAPE_SIZE)
}

// optional uint32 MAX_BODY_INDICES_SIZE = 1726;
inline bool MF_LSCA_Consts::_internal_has_max_body_indices_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_body_indices_size() const {
  return _internal_has_max_body_indices_size();
}
inline void MF_LSCA_Consts::clear_max_body_indices_size() {
  max_body_indices_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_body_indices_size() const {
  return max_body_indices_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_body_indices_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_BODY_INDICES_SIZE)
  return _internal_max_body_indices_size();
}
inline void MF_LSCA_Consts::_internal_set_max_body_indices_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_body_indices_size_ = value;
}
inline void MF_LSCA_Consts::set_max_body_indices_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_body_indices_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_BODY_INDICES_SIZE)
}

// optional uint32 MAX_WHEEL_SHAPE_SIZE = 1981;
inline bool MF_LSCA_Consts::_internal_has_max_wheel_shape_size() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_wheel_shape_size() const {
  return _internal_has_max_wheel_shape_size();
}
inline void MF_LSCA_Consts::clear_max_wheel_shape_size() {
  max_wheel_shape_size_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_wheel_shape_size() const {
  return max_wheel_shape_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_wheel_shape_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_WHEEL_SHAPE_SIZE)
  return _internal_max_wheel_shape_size();
}
inline void MF_LSCA_Consts::_internal_set_max_wheel_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  max_wheel_shape_size_ = value;
}
inline void MF_LSCA_Consts::set_max_wheel_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_wheel_shape_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_WHEEL_SHAPE_SIZE)
}

// optional uint32 MAX_HITCH_SHAPE_SIZE = 3192;
inline bool MF_LSCA_Consts::_internal_has_max_hitch_shape_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_hitch_shape_size() const {
  return _internal_has_max_hitch_shape_size();
}
inline void MF_LSCA_Consts::clear_max_hitch_shape_size() {
  max_hitch_shape_size_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_hitch_shape_size() const {
  return max_hitch_shape_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_hitch_shape_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_HITCH_SHAPE_SIZE)
  return _internal_max_hitch_shape_size();
}
inline void MF_LSCA_Consts::_internal_set_max_hitch_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  max_hitch_shape_size_ = value;
}
inline void MF_LSCA_Consts::set_max_hitch_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hitch_shape_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_HITCH_SHAPE_SIZE)
}

// optional uint32 MAX_MIRROR_SHAPE_SIZE = 2661;
inline bool MF_LSCA_Consts::_internal_has_max_mirror_shape_size() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_mirror_shape_size() const {
  return _internal_has_max_mirror_shape_size();
}
inline void MF_LSCA_Consts::clear_max_mirror_shape_size() {
  max_mirror_shape_size_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_mirror_shape_size() const {
  return max_mirror_shape_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_mirror_shape_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_MIRROR_SHAPE_SIZE)
  return _internal_max_mirror_shape_size();
}
inline void MF_LSCA_Consts::_internal_set_max_mirror_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  max_mirror_shape_size_ = value;
}
inline void MF_LSCA_Consts::set_max_mirror_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_mirror_shape_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_MIRROR_SHAPE_SIZE)
}

// optional uint32 MAX_SIMPLE_BODY_SHAPE_SIZE = 1541;
inline bool MF_LSCA_Consts::_internal_has_max_simple_body_shape_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_simple_body_shape_size() const {
  return _internal_has_max_simple_body_shape_size();
}
inline void MF_LSCA_Consts::clear_max_simple_body_shape_size() {
  max_simple_body_shape_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_simple_body_shape_size() const {
  return max_simple_body_shape_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_simple_body_shape_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_SIMPLE_BODY_SHAPE_SIZE)
  return _internal_max_simple_body_shape_size();
}
inline void MF_LSCA_Consts::_internal_set_max_simple_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_simple_body_shape_size_ = value;
}
inline void MF_LSCA_Consts::set_max_simple_body_shape_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_simple_body_shape_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_SIMPLE_BODY_SHAPE_SIZE)
}

// optional uint32 MAX_STATIC_OBJECT_SIZE_NU = 1758;
inline bool MF_LSCA_Consts::_internal_has_max_static_object_size_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_static_object_size_nu() const {
  return _internal_has_max_static_object_size_nu();
}
inline void MF_LSCA_Consts::clear_max_static_object_size_nu() {
  max_static_object_size_nu_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_static_object_size_nu() const {
  return max_static_object_size_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_static_object_size_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_STATIC_OBJECT_SIZE_NU)
  return _internal_max_static_object_size_nu();
}
inline void MF_LSCA_Consts::_internal_set_max_static_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_static_object_size_nu_ = value;
}
inline void MF_LSCA_Consts::set_max_static_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_static_object_size_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_STATIC_OBJECT_SIZE_NU)
}

// optional uint32 MAX_DYNAMIC_OBJECT_SIZE_NU = 1393;
inline bool MF_LSCA_Consts::_internal_has_max_dynamic_object_size_nu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_dynamic_object_size_nu() const {
  return _internal_has_max_dynamic_object_size_nu();
}
inline void MF_LSCA_Consts::clear_max_dynamic_object_size_nu() {
  max_dynamic_object_size_nu_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_dynamic_object_size_nu() const {
  return max_dynamic_object_size_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_dynamic_object_size_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_DYNAMIC_OBJECT_SIZE_NU)
  return _internal_max_dynamic_object_size_nu();
}
inline void MF_LSCA_Consts::_internal_set_max_dynamic_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_dynamic_object_size_nu_ = value;
}
inline void MF_LSCA_Consts::set_max_dynamic_object_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_dynamic_object_size_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_DYNAMIC_OBJECT_SIZE_NU)
}

// optional uint32 MAX_DYNAMIC_OBJECT_PREDICTION_SIZE_NU = 3114;
inline bool MF_LSCA_Consts::_internal_has_max_dynamic_object_prediction_size_nu() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_dynamic_object_prediction_size_nu() const {
  return _internal_has_max_dynamic_object_prediction_size_nu();
}
inline void MF_LSCA_Consts::clear_max_dynamic_object_prediction_size_nu() {
  max_dynamic_object_prediction_size_nu_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_dynamic_object_prediction_size_nu() const {
  return max_dynamic_object_prediction_size_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_dynamic_object_prediction_size_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_DYNAMIC_OBJECT_PREDICTION_SIZE_NU)
  return _internal_max_dynamic_object_prediction_size_nu();
}
inline void MF_LSCA_Consts::_internal_set_max_dynamic_object_prediction_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  max_dynamic_object_prediction_size_nu_ = value;
}
inline void MF_LSCA_Consts::set_max_dynamic_object_prediction_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_dynamic_object_prediction_size_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_DYNAMIC_OBJECT_PREDICTION_SIZE_NU)
}

// optional uint32 MAX_STATIC_OBJECTS_BRAKE_NU = 1949;
inline bool MF_LSCA_Consts::_internal_has_max_static_objects_brake_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_static_objects_brake_nu() const {
  return _internal_has_max_static_objects_brake_nu();
}
inline void MF_LSCA_Consts::clear_max_static_objects_brake_nu() {
  max_static_objects_brake_nu_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_static_objects_brake_nu() const {
  return max_static_objects_brake_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_static_objects_brake_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_STATIC_OBJECTS_BRAKE_NU)
  return _internal_max_static_objects_brake_nu();
}
inline void MF_LSCA_Consts::_internal_set_max_static_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_static_objects_brake_nu_ = value;
}
inline void MF_LSCA_Consts::set_max_static_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_static_objects_brake_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_STATIC_OBJECTS_BRAKE_NU)
}

// optional uint32 MAX_DYNAMIC_OBJECTS_BRAKE_NU = 1290;
inline bool MF_LSCA_Consts::_internal_has_max_dynamic_objects_brake_nu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_max_dynamic_objects_brake_nu() const {
  return _internal_has_max_dynamic_objects_brake_nu();
}
inline void MF_LSCA_Consts::clear_max_dynamic_objects_brake_nu() {
  max_dynamic_objects_brake_nu_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_max_dynamic_objects_brake_nu() const {
  return max_dynamic_objects_brake_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::max_dynamic_objects_brake_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_DYNAMIC_OBJECTS_BRAKE_NU)
  return _internal_max_dynamic_objects_brake_nu();
}
inline void MF_LSCA_Consts::_internal_set_max_dynamic_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_dynamic_objects_brake_nu_ = value;
}
inline void MF_LSCA_Consts::set_max_dynamic_objects_brake_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_dynamic_objects_brake_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.MAX_DYNAMIC_OBJECTS_BRAKE_NU)
}

// optional uint32 STATIC_BRAKE_ROI_SIZE = 2852;
inline bool MF_LSCA_Consts::_internal_has_static_brake_roi_size() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_static_brake_roi_size() const {
  return _internal_has_static_brake_roi_size();
}
inline void MF_LSCA_Consts::clear_static_brake_roi_size() {
  static_brake_roi_size_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_static_brake_roi_size() const {
  return static_brake_roi_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::static_brake_roi_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.STATIC_BRAKE_ROI_SIZE)
  return _internal_static_brake_roi_size();
}
inline void MF_LSCA_Consts::_internal_set_static_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  static_brake_roi_size_ = value;
}
inline void MF_LSCA_Consts::set_static_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_static_brake_roi_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.STATIC_BRAKE_ROI_SIZE)
}

// optional uint32 DYNAMIC_BRAKE_ROI_SIZE = 2912;
inline bool MF_LSCA_Consts::_internal_has_dynamic_brake_roi_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MF_LSCA_Consts::has_dynamic_brake_roi_size() const {
  return _internal_has_dynamic_brake_roi_size();
}
inline void MF_LSCA_Consts::clear_dynamic_brake_roi_size() {
  dynamic_brake_roi_size_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::_internal_dynamic_brake_roi_size() const {
  return dynamic_brake_roi_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MF_LSCA_Consts::dynamic_brake_roi_size() const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.DYNAMIC_BRAKE_ROI_SIZE)
  return _internal_dynamic_brake_roi_size();
}
inline void MF_LSCA_Consts::_internal_set_dynamic_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  dynamic_brake_roi_size_ = value;
}
inline void MF_LSCA_Consts::set_dynamic_brake_roi_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dynamic_brake_roi_size(value);
  // @@protoc_insertion_point(field_set:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts.DYNAMIC_BRAKE_ROI_SIZE)
}

// -------------------------------------------------------------------

// MF_LSCA_Consts_array_port

// repeated .pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts data = 2405;
inline int MF_LSCA_Consts_array_port::_internal_data_size() const {
  return data_.size();
}
inline int MF_LSCA_Consts_array_port::data_size() const {
  return _internal_data_size();
}
inline void MF_LSCA_Consts_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* MF_LSCA_Consts_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts >*
MF_LSCA_Consts_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port.data)
  return &data_;
}
inline const ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts& MF_LSCA_Consts_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts& MF_LSCA_Consts_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* MF_LSCA_Consts_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* MF_LSCA_Consts_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts >&
MF_LSCA_Consts_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mf_lsca_consts
}  // namespace mf_lsca
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5flsca_2fmf_5flsca_5fconsts_2eproto
