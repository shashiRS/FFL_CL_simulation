// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/mf_lsca_consts.proto

#include "mf_lsca/mf_lsca_consts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2fmf_5flsca_5fconsts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MF_LSCA_Consts_mf_5flsca_2fmf_5flsca_5fconsts_2eproto;
namespace pb {
namespace mf_lsca {
namespace mf_lsca_consts {
class MF_LSCA_ConstsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MF_LSCA_Consts> _instance;
} _MF_LSCA_Consts_default_instance_;
class MF_LSCA_Consts_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MF_LSCA_Consts_array_port> _instance;
} _MF_LSCA_Consts_array_port_default_instance_;
}  // namespace mf_lsca_consts
}  // namespace mf_lsca
}  // namespace pb
static void InitDefaultsscc_info_MF_LSCA_Consts_mf_5flsca_2fmf_5flsca_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::mf_lsca_consts::_MF_LSCA_Consts_default_instance_;
    new (ptr) ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MF_LSCA_Consts_mf_5flsca_2fmf_5flsca_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MF_LSCA_Consts_mf_5flsca_2fmf_5flsca_5fconsts_2eproto}, {}};

static void InitDefaultsscc_info_MF_LSCA_Consts_array_port_mf_5flsca_2fmf_5flsca_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::mf_lsca_consts::_MF_LSCA_Consts_array_port_default_instance_;
    new (ptr) ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MF_LSCA_Consts_array_port_mf_5flsca_2fmf_5flsca_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MF_LSCA_Consts_array_port_mf_5flsca_2fmf_5flsca_5fconsts_2eproto}, {
      &scc_info_MF_LSCA_Consts_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5flsca_2fmf_5flsca_5fconsts_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5flsca_2fmf_5flsca_5fconsts_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5flsca_2fmf_5flsca_5fconsts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5flsca_2fmf_5flsca_5fconsts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_body_shape_size_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_body_indices_size_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_wheel_shape_size_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_hitch_shape_size_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_mirror_shape_size_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_simple_body_shape_size_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_static_object_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_dynamic_object_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_dynamic_object_prediction_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_static_objects_brake_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, max_dynamic_objects_brake_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, static_brake_roi_size_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts, dynamic_brake_roi_size_),
  8,
  4,
  7,
  0,
  9,
  3,
  5,
  2,
  12,
  6,
  1,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts)},
  { 31, 37, sizeof(::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::mf_lsca_consts::_MF_LSCA_Consts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::mf_lsca_consts::_MF_LSCA_Consts_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5flsca_2fmf_5flsca_5fconsts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034mf_lsca/mf_lsca_consts.proto\022\031pb.mf_ls"
  "ca.mf_lsca_consts\"\330\003\n\016MF_LSCA_Consts\022\034\n\023"
  "MAX_BODY_SHAPE_SIZE\030\271\021 \001(\r\022\036\n\025MAX_BODY_I"
  "NDICES_SIZE\030\276\r \001(\r\022\035\n\024MAX_WHEEL_SHAPE_SI"
  "ZE\030\275\017 \001(\r\022\035\n\024MAX_HITCH_SHAPE_SIZE\030\370\030 \001(\r"
  "\022\036\n\025MAX_MIRROR_SHAPE_SIZE\030\345\024 \001(\r\022#\n\032MAX_"
  "SIMPLE_BODY_SHAPE_SIZE\030\205\014 \001(\r\022\"\n\031MAX_STA"
  "TIC_OBJECT_SIZE_NU\030\336\r \001(\r\022#\n\032MAX_DYNAMIC"
  "_OBJECT_SIZE_NU\030\361\n \001(\r\022.\n%MAX_DYNAMIC_OB"
  "JECT_PREDICTION_SIZE_NU\030\252\030 \001(\r\022$\n\033MAX_ST"
  "ATIC_OBJECTS_BRAKE_NU\030\235\017 \001(\r\022%\n\034MAX_DYNA"
  "MIC_OBJECTS_BRAKE_NU\030\212\n \001(\r\022\036\n\025STATIC_BR"
  "AKE_ROI_SIZE\030\244\026 \001(\r\022\037\n\026DYNAMIC_BRAKE_ROI"
  "_SIZE\030\340\026 \001(\r\"U\n\031MF_LSCA_Consts_array_por"
  "t\0228\n\004data\030\345\022 \003(\0132).pb.mf_lsca.mf_lsca_co"
  "nsts.MF_LSCA_Consts"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_sccs[2] = {
  &scc_info_MF_LSCA_Consts_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.base,
  &scc_info_MF_LSCA_Consts_array_port_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_once;
static bool descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto = {
  &descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_initialized, descriptor_table_protodef_mf_5flsca_2fmf_5flsca_5fconsts_2eproto, "mf_lsca/mf_lsca_consts.proto", 619,
  &descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_once, descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_sccs, descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_mf_5flsca_2fmf_5flsca_5fconsts_2eproto::offsets,
  file_level_metadata_mf_5flsca_2fmf_5flsca_5fconsts_2eproto, 2, file_level_enum_descriptors_mf_5flsca_2fmf_5flsca_5fconsts_2eproto, file_level_service_descriptors_mf_5flsca_2fmf_5flsca_5fconsts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5flsca_2fmf_5flsca_5fconsts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5flsca_2fmf_5flsca_5fconsts_2eproto), true);
namespace pb {
namespace mf_lsca {
namespace mf_lsca_consts {

// ===================================================================

void MF_LSCA_Consts::InitAsDefaultInstance() {
}
class MF_LSCA_Consts::_Internal {
 public:
  using HasBits = decltype(std::declval<MF_LSCA_Consts>()._has_bits_);
  static void set_has_max_body_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_body_indices_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_wheel_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_hitch_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_mirror_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_simple_body_shape_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_static_object_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_dynamic_object_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_dynamic_object_prediction_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_static_objects_brake_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_dynamic_objects_brake_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_static_brake_roi_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_dynamic_brake_roi_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

MF_LSCA_Consts::MF_LSCA_Consts()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
}
MF_LSCA_Consts::MF_LSCA_Consts(const MF_LSCA_Consts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_hitch_shape_size_, &from.max_hitch_shape_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_dynamic_object_prediction_size_nu_) -
    reinterpret_cast<char*>(&max_hitch_shape_size_)) + sizeof(max_dynamic_object_prediction_size_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
}

void MF_LSCA_Consts::SharedCtor() {
  ::memset(&max_hitch_shape_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_dynamic_object_prediction_size_nu_) -
      reinterpret_cast<char*>(&max_hitch_shape_size_)) + sizeof(max_dynamic_object_prediction_size_nu_));
}

MF_LSCA_Consts::~MF_LSCA_Consts() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  SharedDtor();
}

void MF_LSCA_Consts::SharedDtor() {
}

void MF_LSCA_Consts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MF_LSCA_Consts& MF_LSCA_Consts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MF_LSCA_Consts_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void MF_LSCA_Consts::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&max_hitch_shape_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_wheel_shape_size_) -
        reinterpret_cast<char*>(&max_hitch_shape_size_)) + sizeof(max_wheel_shape_size_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&max_body_shape_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_dynamic_object_prediction_size_nu_) -
        reinterpret_cast<char*>(&max_body_shape_size_)) + sizeof(max_dynamic_object_prediction_size_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MF_LSCA_Consts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 MAX_DYNAMIC_OBJECTS_BRAKE_NU = 1290;
      case 1290:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_dynamic_objects_brake_nu(&has_bits);
          max_dynamic_objects_brake_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_DYNAMIC_OBJECT_SIZE_NU = 1393;
      case 1393:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_dynamic_object_size_nu(&has_bits);
          max_dynamic_object_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_SIMPLE_BODY_SHAPE_SIZE = 1541;
      case 1541:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_simple_body_shape_size(&has_bits);
          max_simple_body_shape_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_BODY_INDICES_SIZE = 1726;
      case 1726:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_max_body_indices_size(&has_bits);
          max_body_indices_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_STATIC_OBJECT_SIZE_NU = 1758;
      case 1758:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_max_static_object_size_nu(&has_bits);
          max_static_object_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_STATIC_OBJECTS_BRAKE_NU = 1949;
      case 1949:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_max_static_objects_brake_nu(&has_bits);
          max_static_objects_brake_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_WHEEL_SHAPE_SIZE = 1981;
      case 1981:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_max_wheel_shape_size(&has_bits);
          max_wheel_shape_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_BODY_SHAPE_SIZE = 2233;
      case 2233:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_max_body_shape_size(&has_bits);
          max_body_shape_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_MIRROR_SHAPE_SIZE = 2661;
      case 2661:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_mirror_shape_size(&has_bits);
          max_mirror_shape_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 STATIC_BRAKE_ROI_SIZE = 2852;
      case 2852:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_static_brake_roi_size(&has_bits);
          static_brake_roi_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 DYNAMIC_BRAKE_ROI_SIZE = 2912;
      case 2912:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_dynamic_brake_roi_size(&has_bits);
          dynamic_brake_roi_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_DYNAMIC_OBJECT_PREDICTION_SIZE_NU = 3114;
      case 3114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_dynamic_object_prediction_size_nu(&has_bits);
          max_dynamic_object_prediction_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 MAX_HITCH_SHAPE_SIZE = 3192;
      case 3192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_max_hitch_shape_size(&has_bits);
          max_hitch_shape_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MF_LSCA_Consts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 MAX_DYNAMIC_OBJECTS_BRAKE_NU = 1290;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1290, this->_internal_max_dynamic_objects_brake_nu(), target);
  }

  // optional uint32 MAX_DYNAMIC_OBJECT_SIZE_NU = 1393;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1393, this->_internal_max_dynamic_object_size_nu(), target);
  }

  // optional uint32 MAX_SIMPLE_BODY_SHAPE_SIZE = 1541;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1541, this->_internal_max_simple_body_shape_size(), target);
  }

  // optional uint32 MAX_BODY_INDICES_SIZE = 1726;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1726, this->_internal_max_body_indices_size(), target);
  }

  // optional uint32 MAX_STATIC_OBJECT_SIZE_NU = 1758;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1758, this->_internal_max_static_object_size_nu(), target);
  }

  // optional uint32 MAX_STATIC_OBJECTS_BRAKE_NU = 1949;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1949, this->_internal_max_static_objects_brake_nu(), target);
  }

  // optional uint32 MAX_WHEEL_SHAPE_SIZE = 1981;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1981, this->_internal_max_wheel_shape_size(), target);
  }

  // optional uint32 MAX_BODY_SHAPE_SIZE = 2233;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2233, this->_internal_max_body_shape_size(), target);
  }

  // optional uint32 MAX_MIRROR_SHAPE_SIZE = 2661;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2661, this->_internal_max_mirror_shape_size(), target);
  }

  // optional uint32 STATIC_BRAKE_ROI_SIZE = 2852;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2852, this->_internal_static_brake_roi_size(), target);
  }

  // optional uint32 DYNAMIC_BRAKE_ROI_SIZE = 2912;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2912, this->_internal_dynamic_brake_roi_size(), target);
  }

  // optional uint32 MAX_DYNAMIC_OBJECT_PREDICTION_SIZE_NU = 3114;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3114, this->_internal_max_dynamic_object_prediction_size_nu(), target);
  }

  // optional uint32 MAX_HITCH_SHAPE_SIZE = 3192;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3192, this->_internal_max_hitch_shape_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  return target;
}

size_t MF_LSCA_Consts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 MAX_HITCH_SHAPE_SIZE = 3192;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hitch_shape_size());
    }

    // optional uint32 MAX_DYNAMIC_OBJECTS_BRAKE_NU = 1290;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_dynamic_objects_brake_nu());
    }

    // optional uint32 MAX_DYNAMIC_OBJECT_SIZE_NU = 1393;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_dynamic_object_size_nu());
    }

    // optional uint32 MAX_SIMPLE_BODY_SHAPE_SIZE = 1541;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_simple_body_shape_size());
    }

    // optional uint32 MAX_BODY_INDICES_SIZE = 1726;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_body_indices_size());
    }

    // optional uint32 MAX_STATIC_OBJECT_SIZE_NU = 1758;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_static_object_size_nu());
    }

    // optional uint32 MAX_STATIC_OBJECTS_BRAKE_NU = 1949;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_static_objects_brake_nu());
    }

    // optional uint32 MAX_WHEEL_SHAPE_SIZE = 1981;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_wheel_shape_size());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 MAX_BODY_SHAPE_SIZE = 2233;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_body_shape_size());
    }

    // optional uint32 MAX_MIRROR_SHAPE_SIZE = 2661;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_mirror_shape_size());
    }

    // optional uint32 STATIC_BRAKE_ROI_SIZE = 2852;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_static_brake_roi_size());
    }

    // optional uint32 DYNAMIC_BRAKE_ROI_SIZE = 2912;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dynamic_brake_roi_size());
    }

    // optional uint32 MAX_DYNAMIC_OBJECT_PREDICTION_SIZE_NU = 3114;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_dynamic_object_prediction_size_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MF_LSCA_Consts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  const MF_LSCA_Consts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MF_LSCA_Consts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
    MergeFrom(*source);
  }
}

void MF_LSCA_Consts::MergeFrom(const MF_LSCA_Consts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_hitch_shape_size_ = from.max_hitch_shape_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_dynamic_objects_brake_nu_ = from.max_dynamic_objects_brake_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_dynamic_object_size_nu_ = from.max_dynamic_object_size_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_simple_body_shape_size_ = from.max_simple_body_shape_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_body_indices_size_ = from.max_body_indices_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_static_object_size_nu_ = from.max_static_object_size_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_static_objects_brake_nu_ = from.max_static_objects_brake_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_wheel_shape_size_ = from.max_wheel_shape_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      max_body_shape_size_ = from.max_body_shape_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_mirror_shape_size_ = from.max_mirror_shape_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      static_brake_roi_size_ = from.static_brake_roi_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      dynamic_brake_roi_size_ = from.dynamic_brake_roi_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_dynamic_object_prediction_size_nu_ = from.max_dynamic_object_prediction_size_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MF_LSCA_Consts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MF_LSCA_Consts::CopyFrom(const MF_LSCA_Consts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MF_LSCA_Consts::IsInitialized() const {
  return true;
}

void MF_LSCA_Consts::InternalSwap(MF_LSCA_Consts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_hitch_shape_size_, other->max_hitch_shape_size_);
  swap(max_dynamic_objects_brake_nu_, other->max_dynamic_objects_brake_nu_);
  swap(max_dynamic_object_size_nu_, other->max_dynamic_object_size_nu_);
  swap(max_simple_body_shape_size_, other->max_simple_body_shape_size_);
  swap(max_body_indices_size_, other->max_body_indices_size_);
  swap(max_static_object_size_nu_, other->max_static_object_size_nu_);
  swap(max_static_objects_brake_nu_, other->max_static_objects_brake_nu_);
  swap(max_wheel_shape_size_, other->max_wheel_shape_size_);
  swap(max_body_shape_size_, other->max_body_shape_size_);
  swap(max_mirror_shape_size_, other->max_mirror_shape_size_);
  swap(static_brake_roi_size_, other->static_brake_roi_size_);
  swap(dynamic_brake_roi_size_, other->dynamic_brake_roi_size_);
  swap(max_dynamic_object_prediction_size_nu_, other->max_dynamic_object_prediction_size_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MF_LSCA_Consts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MF_LSCA_Consts_array_port::InitAsDefaultInstance() {
}
class MF_LSCA_Consts_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<MF_LSCA_Consts_array_port>()._has_bits_);
};

MF_LSCA_Consts_array_port::MF_LSCA_Consts_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
}
MF_LSCA_Consts_array_port::MF_LSCA_Consts_array_port(const MF_LSCA_Consts_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
}

void MF_LSCA_Consts_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MF_LSCA_Consts_array_port_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.base);
}

MF_LSCA_Consts_array_port::~MF_LSCA_Consts_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  SharedDtor();
}

void MF_LSCA_Consts_array_port::SharedDtor() {
}

void MF_LSCA_Consts_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MF_LSCA_Consts_array_port& MF_LSCA_Consts_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MF_LSCA_Consts_array_port_mf_5flsca_2fmf_5flsca_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void MF_LSCA_Consts_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MF_LSCA_Consts_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts data = 2405;
      case 2405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MF_LSCA_Consts_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts data = 2405;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2405, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  return target;
}

size_t MF_LSCA_Consts_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts data = 2405;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MF_LSCA_Consts_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const MF_LSCA_Consts_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MF_LSCA_Consts_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
    MergeFrom(*source);
  }
}

void MF_LSCA_Consts_array_port::MergeFrom(const MF_LSCA_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MF_LSCA_Consts_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MF_LSCA_Consts_array_port::CopyFrom(const MF_LSCA_Consts_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.mf_lsca_consts.MF_LSCA_Consts_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MF_LSCA_Consts_array_port::IsInitialized() const {
  return true;
}

void MF_LSCA_Consts_array_port::InternalSwap(MF_LSCA_Consts_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MF_LSCA_Consts_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mf_lsca_consts
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts* Arena::CreateMaybeMessage< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port* Arena::CreateMaybeMessage< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::mf_lsca_consts::MF_LSCA_Consts_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
