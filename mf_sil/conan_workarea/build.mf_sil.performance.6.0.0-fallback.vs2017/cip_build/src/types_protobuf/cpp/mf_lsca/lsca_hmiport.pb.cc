// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lsca/lsca_hmiport.proto

#include "mf_lsca/lsca_hmiport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flsca_2flsca_5fhmiport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto;
namespace pb {
namespace mf_lsca {
namespace lsca_hmiport {
class LscaHMIPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LscaHMIPort> _instance;
} _LscaHMIPort_default_instance_;
class LscaHMIPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LscaHMIPort_array_port> _instance;
} _LscaHMIPort_array_port_default_instance_;
}  // namespace lsca_hmiport
}  // namespace mf_lsca
}  // namespace pb
static void InitDefaultsscc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::lsca_hmiport::_LscaHMIPort_default_instance_;
    new (ptr) ::pb::mf_lsca::lsca_hmiport::LscaHMIPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::lsca_hmiport::LscaHMIPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_LscaHMIPort_array_port_mf_5flsca_2flsca_5fhmiport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lsca::lsca_hmiport::_LscaHMIPort_array_port_default_instance_;
    new (ptr) ::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LscaHMIPort_array_port_mf_5flsca_2flsca_5fhmiport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LscaHMIPort_array_port_mf_5flsca_2flsca_5fhmiport_2eproto}, {
      &scc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5flsca_2flsca_5fhmiport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5flsca_2flsca_5fhmiport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5flsca_2flsca_5fhmiport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5flsca_2flsca_5fhmiport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, activatebrakeinterventionscreen_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, enforcehmiconfirmation_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, warningbody_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, warningwheel_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, warningobject_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, warningtube_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, criticalobjectbrakeid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, rctraalertleft_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, rctraalertright_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, doorprotfl_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, doorprotfr_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, doorprotbl_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, doorprotbr_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort, doorprottrunk_nu_),
  6,
  0,
  7,
  8,
  3,
  4,
  5,
  1,
  2,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::pb::mf_lsca::lsca_hmiport::LscaHMIPort)},
  { 37, 43, sizeof(::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::lsca_hmiport::_LscaHMIPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lsca::lsca_hmiport::_LscaHMIPort_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5flsca_2flsca_5fhmiport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032mf_lsca/lsca_hmiport.proto\022\027pb.mf_lsca"
  ".lsca_hmiport\032\027eco/signal_header.proto\032!"
  "mf_lsca/lsca_warning_status.proto\032\037mf_ls"
  "ca/lsca_tube_marking.proto\"\262\005\n\013LscaHMIPo"
  "rt\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSigHead"
  "er\030\211\010 \001(\0132\".pb.eco.signal_header.SignalH"
  "eader\022+\n\"activateBrakeInterventionScreen"
  "_nu\030\270\023 \001(\010\022\"\n\031enforceHMIConfirmation_nu\030"
  "\232\014 \001(\010\022I\n\013warningBody\030\352\010 \001(\01623.pb.mf_lsc"
  "a.lsca_warning_status.LSCA_WARNING_STATU"
  "S\022J\n\014warningWheel\030\312\n \001(\01623.pb.mf_lsca.ls"
  "ca_warning_status.LSCA_WARNING_STATUS\022K\n"
  "\rwarningObject\030\335\016 \001(\01623.pb.mf_lsca.lsca_"
  "warning_status.LSCA_WARNING_STATUS\022E\n\013wa"
  "rningTube\030\240\036 \001(\0162/.pb.mf_lsca.lsca_tube_"
  "marking.LSCA_TUBE_MARKING\022 \n\030criticalObj"
  "ectBrakeID_nu\030\003 \001(\r\022\032\n\021RctraAlertLeft_nu"
  "\030\266\036 \001(\010\022\033\n\022RctraAlertRight_nu\030\355\005 \001(\010\022\026\n\r"
  "DoorProtFL_nu\030\261\034 \001(\010\022\026\n\rDoorProtFR_nu\030\314\017"
  " \001(\010\022\026\n\rDoorProtBL_nu\030\267\016 \001(\010\022\026\n\rDoorProt"
  "BR_nu\030\312\035 \001(\010\022\031\n\020DoorProtTrunk_nu\030\332\030 \001(\010\""
  "M\n\026LscaHMIPort_array_port\0223\n\004data\030\201\010 \003(\013"
  "2$.pb.mf_lsca.lsca_hmiport.LscaHMIPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_deps[3] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_mf_5flsca_2flsca_5ftube_5fmarking_2eproto,
  &::descriptor_table_mf_5flsca_2flsca_5fwarning_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_sccs[2] = {
  &scc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto.base,
  &scc_info_LscaHMIPort_array_port_mf_5flsca_2flsca_5fhmiport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_once;
static bool descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto = {
  &descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_initialized, descriptor_table_protodef_mf_5flsca_2flsca_5fhmiport_2eproto, "mf_lsca/lsca_hmiport.proto", 918,
  &descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_once, descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_sccs, descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_mf_5flsca_2flsca_5fhmiport_2eproto::offsets,
  file_level_metadata_mf_5flsca_2flsca_5fhmiport_2eproto, 2, file_level_enum_descriptors_mf_5flsca_2flsca_5fhmiport_2eproto, file_level_service_descriptors_mf_5flsca_2flsca_5fhmiport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5flsca_2flsca_5fhmiport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5flsca_2flsca_5fhmiport_2eproto), true);
namespace pb {
namespace mf_lsca {
namespace lsca_hmiport {

// ===================================================================

void LscaHMIPort::InitAsDefaultInstance() {
  ::pb::mf_lsca::lsca_hmiport::_LscaHMIPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class LscaHMIPort::_Internal {
 public:
  using HasBits = decltype(std::declval<LscaHMIPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const LscaHMIPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activatebrakeinterventionscreen_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enforcehmiconfirmation_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_warningbody(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_warningwheel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_warningobject(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_warningtube(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_criticalobjectbrakeid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rctraalertleft_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rctraalertright_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_doorprotfl_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_doorprotfr_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_doorprotbl_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_doorprotbr_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_doorprottrunk_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
LscaHMIPort::_Internal::ssigheader(const LscaHMIPort* msg) {
  return *msg->ssigheader_;
}
void LscaHMIPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LscaHMIPort::LscaHMIPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
}
LscaHMIPort::LscaHMIPort(const LscaHMIPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&warningtube_, &from.warningtube_,
    static_cast<size_t>(reinterpret_cast<char*>(&doorprottrunk_nu_) -
    reinterpret_cast<char*>(&warningtube_)) + sizeof(doorprottrunk_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
}

void LscaHMIPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doorprottrunk_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(doorprottrunk_nu_));
}

LscaHMIPort::~LscaHMIPort() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  SharedDtor();
}

void LscaHMIPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void LscaHMIPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LscaHMIPort& LscaHMIPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LscaHMIPort_mf_5flsca_2flsca_5fhmiport_2eproto.base);
  return *internal_default_instance();
}


void LscaHMIPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&warningtube_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activatebrakeinterventionscreen_nu_) -
        reinterpret_cast<char*>(&warningtube_)) + sizeof(activatebrakeinterventionscreen_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&enforcehmiconfirmation_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&doorprottrunk_nu_) -
        reinterpret_cast<char*>(&enforcehmiconfirmation_nu_)) + sizeof(doorprottrunk_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LscaHMIPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 criticalObjectBrakeID_nu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_criticalobjectbrakeid_nu(&has_bits);
          criticalobjectbrakeid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool RctraAlertRight_nu = 749;
      case 749:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_rctraalertright_nu(&has_bits);
          rctraalertright_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningBody = 1130;
      case 1130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS_IsValid(val))) {
            _internal_set_warningbody(static_cast<::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1130, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningWheel = 1354;
      case 1354:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS_IsValid(val))) {
            _internal_set_warningwheel(static_cast<::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1354, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enforceHMIConfirmation_nu = 1562;
      case 1562:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_enforcehmiconfirmation_nu(&has_bits);
          enforcehmiconfirmation_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DoorProtBL_nu = 1847;
      case 1847:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_doorprotbl_nu(&has_bits);
          doorprotbl_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningObject = 1885;
      case 1885:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS_IsValid(val))) {
            _internal_set_warningobject(static_cast<::pb::mf_lsca::lsca_warning_status::LSCA_WARNING_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1885, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool DoorProtFR_nu = 1996;
      case 1996:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_doorprotfr_nu(&has_bits);
          doorprotfr_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool activateBrakeInterventionScreen_nu = 2488;
      case 2488:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_activatebrakeinterventionscreen_nu(&has_bits);
          activatebrakeinterventionscreen_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DoorProtTrunk_nu = 3162;
      case 3162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_doorprottrunk_nu(&has_bits);
          doorprottrunk_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DoorProtFL_nu = 3633;
      case 3633:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_doorprotfl_nu(&has_bits);
          doorprotfl_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool DoorProtBR_nu = 3786;
      case 3786:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_doorprotbr_nu(&has_bits);
          doorprotbr_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_lsca.lsca_tube_marking.LSCA_TUBE_MARKING warningTube = 3872;
      case 3872:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING_IsValid(val))) {
            _internal_set_warningtube(static_cast<::pb::mf_lsca::lsca_tube_marking::LSCA_TUBE_MARKING>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3872, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool RctraAlertLeft_nu = 3894;
      case 3894:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_rctraalertleft_nu(&has_bits);
          rctraalertleft_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LscaHMIPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 criticalObjectBrakeID_nu = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_criticalobjectbrakeid_nu(), target);
  }

  // optional bool RctraAlertRight_nu = 749;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(749, this->_internal_rctraalertright_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningBody = 1130;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1130, this->_internal_warningbody(), target);
  }

  // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningWheel = 1354;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1354, this->_internal_warningwheel(), target);
  }

  // optional bool enforceHMIConfirmation_nu = 1562;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1562, this->_internal_enforcehmiconfirmation_nu(), target);
  }

  // optional bool DoorProtBL_nu = 1847;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1847, this->_internal_doorprotbl_nu(), target);
  }

  // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningObject = 1885;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1885, this->_internal_warningobject(), target);
  }

  // optional bool DoorProtFR_nu = 1996;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1996, this->_internal_doorprotfr_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool activateBrakeInterventionScreen_nu = 2488;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2488, this->_internal_activatebrakeinterventionscreen_nu(), target);
  }

  // optional bool DoorProtTrunk_nu = 3162;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3162, this->_internal_doorprottrunk_nu(), target);
  }

  // optional bool DoorProtFL_nu = 3633;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3633, this->_internal_doorprotfl_nu(), target);
  }

  // optional bool DoorProtBR_nu = 3786;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3786, this->_internal_doorprotbr_nu(), target);
  }

  // optional .pb.mf_lsca.lsca_tube_marking.LSCA_TUBE_MARKING warningTube = 3872;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3872, this->_internal_warningtube(), target);
  }

  // optional bool RctraAlertLeft_nu = 3894;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3894, this->_internal_rctraalertleft_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  return target;
}

size_t LscaHMIPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.mf_lsca.lsca_tube_marking.LSCA_TUBE_MARKING warningTube = 3872;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_warningtube());
    }

    // optional uint32 criticalObjectBrakeID_nu = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_criticalobjectbrakeid_nu());
    }

    // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningBody = 1130;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_warningbody());
    }

    // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningWheel = 1354;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_warningwheel());
    }

    // optional .pb.mf_lsca.lsca_warning_status.LSCA_WARNING_STATUS warningObject = 1885;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_warningobject());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional bool activateBrakeInterventionScreen_nu = 2488;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool enforceHMIConfirmation_nu = 1562;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool RctraAlertLeft_nu = 3894;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool RctraAlertRight_nu = 749;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool DoorProtFL_nu = 3633;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool DoorProtFR_nu = 1996;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool DoorProtBL_nu = 1847;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool DoorProtBR_nu = 3786;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool DoorProtTrunk_nu = 3162;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LscaHMIPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  GOOGLE_DCHECK_NE(&from, this);
  const LscaHMIPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LscaHMIPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
    MergeFrom(*source);
  }
}

void LscaHMIPort::MergeFrom(const LscaHMIPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      warningtube_ = from.warningtube_;
    }
    if (cached_has_bits & 0x00000004u) {
      criticalobjectbrakeid_nu_ = from.criticalobjectbrakeid_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      warningbody_ = from.warningbody_;
    }
    if (cached_has_bits & 0x00000010u) {
      warningwheel_ = from.warningwheel_;
    }
    if (cached_has_bits & 0x00000020u) {
      warningobject_ = from.warningobject_;
    }
    if (cached_has_bits & 0x00000040u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000080u) {
      activatebrakeinterventionscreen_nu_ = from.activatebrakeinterventionscreen_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      enforcehmiconfirmation_nu_ = from.enforcehmiconfirmation_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      rctraalertleft_nu_ = from.rctraalertleft_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      rctraalertright_nu_ = from.rctraalertright_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      doorprotfl_nu_ = from.doorprotfl_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      doorprotfr_nu_ = from.doorprotfr_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      doorprotbl_nu_ = from.doorprotbl_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      doorprotbr_nu_ = from.doorprotbr_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      doorprottrunk_nu_ = from.doorprottrunk_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LscaHMIPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LscaHMIPort::CopyFrom(const LscaHMIPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LscaHMIPort::IsInitialized() const {
  return true;
}

void LscaHMIPort::InternalSwap(LscaHMIPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(warningtube_, other->warningtube_);
  swap(criticalobjectbrakeid_nu_, other->criticalobjectbrakeid_nu_);
  swap(warningbody_, other->warningbody_);
  swap(warningwheel_, other->warningwheel_);
  swap(warningobject_, other->warningobject_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(activatebrakeinterventionscreen_nu_, other->activatebrakeinterventionscreen_nu_);
  swap(enforcehmiconfirmation_nu_, other->enforcehmiconfirmation_nu_);
  swap(rctraalertleft_nu_, other->rctraalertleft_nu_);
  swap(rctraalertright_nu_, other->rctraalertright_nu_);
  swap(doorprotfl_nu_, other->doorprotfl_nu_);
  swap(doorprotfr_nu_, other->doorprotfr_nu_);
  swap(doorprotbl_nu_, other->doorprotbl_nu_);
  swap(doorprotbr_nu_, other->doorprotbr_nu_);
  swap(doorprottrunk_nu_, other->doorprottrunk_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LscaHMIPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LscaHMIPort_array_port::InitAsDefaultInstance() {
}
class LscaHMIPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<LscaHMIPort_array_port>()._has_bits_);
};

LscaHMIPort_array_port::LscaHMIPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
}
LscaHMIPort_array_port::LscaHMIPort_array_port(const LscaHMIPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
}

void LscaHMIPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LscaHMIPort_array_port_mf_5flsca_2flsca_5fhmiport_2eproto.base);
}

LscaHMIPort_array_port::~LscaHMIPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  SharedDtor();
}

void LscaHMIPort_array_port::SharedDtor() {
}

void LscaHMIPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LscaHMIPort_array_port& LscaHMIPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LscaHMIPort_array_port_mf_5flsca_2flsca_5fhmiport_2eproto.base);
  return *internal_default_instance();
}


void LscaHMIPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LscaHMIPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_lsca.lsca_hmiport.LscaHMIPort data = 1025;
      case 1025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LscaHMIPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.lsca_hmiport.LscaHMIPort data = 1025;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1025, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  return target;
}

size_t LscaHMIPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_lsca.lsca_hmiport.LscaHMIPort data = 1025;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LscaHMIPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const LscaHMIPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LscaHMIPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
    MergeFrom(*source);
  }
}

void LscaHMIPort_array_port::MergeFrom(const LscaHMIPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void LscaHMIPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LscaHMIPort_array_port::CopyFrom(const LscaHMIPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lsca.lsca_hmiport.LscaHMIPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LscaHMIPort_array_port::IsInitialized() const {
  return true;
}

void LscaHMIPort_array_port::InternalSwap(LscaHMIPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LscaHMIPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lsca_hmiport
}  // namespace mf_lsca
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::lsca_hmiport::LscaHMIPort* Arena::CreateMaybeMessage< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port* Arena::CreateMaybeMessage< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lsca::lsca_hmiport::LscaHMIPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
