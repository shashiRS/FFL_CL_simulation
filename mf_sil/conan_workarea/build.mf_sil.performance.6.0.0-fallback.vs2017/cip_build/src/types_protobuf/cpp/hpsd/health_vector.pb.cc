// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hpsd/health_vector.proto

#include "hpsd/health_vector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hpsd_2fhealth_5fvector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthVector_hpsd_2fhealth_5fvector_2eproto;
namespace pb {
namespace hpsd {
namespace health_vector {
class HealthVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthVector> _instance;
} _HealthVector_default_instance_;
class HealthVector_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthVector_array_port> _instance;
} _HealthVector_array_port_default_instance_;
}  // namespace health_vector
}  // namespace hpsd
}  // namespace pb
static void InitDefaultsscc_info_HealthVector_hpsd_2fhealth_5fvector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::hpsd::health_vector::_HealthVector_default_instance_;
    new (ptr) ::pb::hpsd::health_vector::HealthVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::hpsd::health_vector::HealthVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthVector_hpsd_2fhealth_5fvector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthVector_hpsd_2fhealth_5fvector_2eproto}, {}};

static void InitDefaultsscc_info_HealthVector_array_port_hpsd_2fhealth_5fvector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::hpsd::health_vector::_HealthVector_array_port_default_instance_;
    new (ptr) ::pb::hpsd::health_vector::HealthVector_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::hpsd::health_vector::HealthVector_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthVector_array_port_hpsd_2fhealth_5fvector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HealthVector_array_port_hpsd_2fhealth_5fvector_2eproto}, {
      &scc_info_HealthVector_hpsd_2fhealth_5fvector_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hpsd_2fhealth_5fvector_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hpsd_2fhealth_5fvector_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hpsd_2fhealth_5fvector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hpsd_2fhealth_5fvector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, hosttemperaturewarning_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, vehiclecommunicationerror_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, onlysafetycoreavailable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, hmicommunicationerror_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, odometryunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, frontcampreprocunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, rearcampreprocunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, leftcampreprocunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, rightcampreprocunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, frontcamvisionunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, rearcamvisionunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, leftcamvisionunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, rightcamvisionunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, frontcamblockage_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, rearcamblockage_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, leftcamblockage_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, rightcamblockage_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, frontultrasonicsunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, rearultrasonicsunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, envmodelstaticobjsunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, envmodeltrafficparticiapantsunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, envmodelparkingfeaturesunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, localizationunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, pdwunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, lscaunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, aupunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, raunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, hvunreliable_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, avgafailed_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, mfmanagerfailed_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector, mocofailed_),
  11,
  12,
  13,
  14,
  27,
  28,
  29,
  30,
  0,
  1,
  2,
  3,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  7,
  8,
  9,
  10,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::hpsd::health_vector::HealthVector_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, sizeof(::pb::hpsd::health_vector::HealthVector)},
  { 67, 73, sizeof(::pb::hpsd::health_vector::HealthVector_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::hpsd::health_vector::_HealthVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::hpsd::health_vector::_HealthVector_array_port_default_instance_),
};

const char descriptor_table_protodef_hpsd_2fhealth_5fvector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030hpsd/health_vector.proto\022\025pb.hpsd.heal"
  "th_vector\"\335\007\n\014HealthVector\022\037\n\026hostTemper"
  "atureWarning\030\214\003 \001(\010\022\"\n\031vehicleCommunicat"
  "ionError\030\251\023 \001(\010\022 \n\027onlySafetyCoreAvailab"
  "le\030\332\003 \001(\010\022\036\n\025hmiCommunicationError\030\345\023 \001("
  "\010\022\033\n\022odometryUnreliable\030\241\017 \001(\010\022\"\n\031frontC"
  "amPreProcUnreliable\030\317\036 \001(\010\022!\n\030rearCamPre"
  "ProcUnreliable\030\212\037 \001(\010\022!\n\030leftCamPreProcU"
  "nreliable\030\265\021 \001(\010\022\"\n\031rightCamPreProcUnrel"
  "iable\030\337\017 \001(\010\022!\n\030frontCamVisionUnreliable"
  "\030\217\003 \001(\010\022 \n\027rearCamVisionUnreliable\030\323\005 \001("
  "\010\022 \n\027leftCamVisionUnreliable\030\257\001 \001(\010\022!\n\030r"
  "ightCamVisionUnreliable\030\325\020 \001(\010\022\031\n\020frontC"
  "amBlockage\030\264\002 \001(\010\022\030\n\017rearCamBlockage\030\347\026 "
  "\001(\010\022\030\n\017leftCamBlockage\030\365\013 \001(\010\022\031\n\020rightCa"
  "mBlockage\030\206\030 \001(\010\022#\n\032frontUltrasonicsUnre"
  "liable\030\220\t \001(\010\022\"\n\031rearUltrasonicsUnreliab"
  "le\030\220\003 \001(\010\022%\n\034envModelStaticObjsUnreliabl"
  "e\030\314\033 \001(\010\022/\n&envModelTrafficParticiapants"
  "Unreliable\030\356\032 \001(\010\022*\n!envModelParkingFeat"
  "uresUnreliable\030\265\017 \001(\010\022\037\n\026localizationUnr"
  "eliable\030\304\004 \001(\010\022\026\n\rpdwUnreliable\030\354\037 \001(\010\022\027"
  "\n\016lscaUnreliable\030\331\024 \001(\010\022\026\n\raupUnreliable"
  "\030\243\003 \001(\010\022\025\n\014raUnreliable\030\344\001 \001(\010\022\025\n\014hvUnre"
  "liable\030\366\014 \001(\010\022\023\n\navgaFailed\030\317\025 \001(\010\022\030\n\017mf"
  "ManagerFailed\030\276\002 \001(\010\022\023\n\nmocoFailed\030\366\002 \001("
  "\010\"M\n\027HealthVector_array_port\0222\n\004data\030\336\030 "
  "\003(\0132#.pb.hpsd.health_vector.HealthVector"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hpsd_2fhealth_5fvector_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hpsd_2fhealth_5fvector_2eproto_sccs[2] = {
  &scc_info_HealthVector_hpsd_2fhealth_5fvector_2eproto.base,
  &scc_info_HealthVector_array_port_hpsd_2fhealth_5fvector_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hpsd_2fhealth_5fvector_2eproto_once;
static bool descriptor_table_hpsd_2fhealth_5fvector_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hpsd_2fhealth_5fvector_2eproto = {
  &descriptor_table_hpsd_2fhealth_5fvector_2eproto_initialized, descriptor_table_protodef_hpsd_2fhealth_5fvector_2eproto, "hpsd/health_vector.proto", 1120,
  &descriptor_table_hpsd_2fhealth_5fvector_2eproto_once, descriptor_table_hpsd_2fhealth_5fvector_2eproto_sccs, descriptor_table_hpsd_2fhealth_5fvector_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_hpsd_2fhealth_5fvector_2eproto::offsets,
  file_level_metadata_hpsd_2fhealth_5fvector_2eproto, 2, file_level_enum_descriptors_hpsd_2fhealth_5fvector_2eproto, file_level_service_descriptors_hpsd_2fhealth_5fvector_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hpsd_2fhealth_5fvector_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hpsd_2fhealth_5fvector_2eproto), true);
namespace pb {
namespace hpsd {
namespace health_vector {

// ===================================================================

void HealthVector::InitAsDefaultInstance() {
}
class HealthVector::_Internal {
 public:
  using HasBits = decltype(std::declval<HealthVector>()._has_bits_);
  static void set_has_hosttemperaturewarning(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vehiclecommunicationerror(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_onlysafetycoreavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_hmicommunicationerror(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_odometryunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_frontcampreprocunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_rearcampreprocunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_leftcampreprocunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_rightcampreprocunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frontcamvisionunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rearcamvisionunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leftcamvisionunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rightcamvisionunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_frontcamblockage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_rearcamblockage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_leftcamblockage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rightcamblockage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_frontultrasonicsunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rearultrasonicsunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_envmodelstaticobjsunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_envmodeltrafficparticiapantsunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_envmodelparkingfeaturesunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_localizationunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pdwunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_lscaunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_aupunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_raunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hvunreliable(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_avgafailed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mfmanagerfailed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mocofailed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

HealthVector::HealthVector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.hpsd.health_vector.HealthVector)
}
HealthVector::HealthVector(const HealthVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rightcampreprocunreliable_, &from.rightcampreprocunreliable_,
    static_cast<size_t>(reinterpret_cast<char*>(&leftcampreprocunreliable_) -
    reinterpret_cast<char*>(&rightcampreprocunreliable_)) + sizeof(leftcampreprocunreliable_));
  // @@protoc_insertion_point(copy_constructor:pb.hpsd.health_vector.HealthVector)
}

void HealthVector::SharedCtor() {
  ::memset(&rightcampreprocunreliable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leftcampreprocunreliable_) -
      reinterpret_cast<char*>(&rightcampreprocunreliable_)) + sizeof(leftcampreprocunreliable_));
}

HealthVector::~HealthVector() {
  // @@protoc_insertion_point(destructor:pb.hpsd.health_vector.HealthVector)
  SharedDtor();
}

void HealthVector::SharedDtor() {
}

void HealthVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthVector& HealthVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthVector_hpsd_2fhealth_5fvector_2eproto.base);
  return *internal_default_instance();
}


void HealthVector::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.hpsd.health_vector.HealthVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rightcampreprocunreliable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lscaunreliable_) -
        reinterpret_cast<char*>(&rightcampreprocunreliable_)) + sizeof(lscaunreliable_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&aupunreliable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rightcamvisionunreliable_) -
        reinterpret_cast<char*>(&aupunreliable_)) + sizeof(rightcamvisionunreliable_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&frontcamblockage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&envmodeltrafficparticiapantsunreliable_) -
        reinterpret_cast<char*>(&frontcamblockage_)) + sizeof(envmodeltrafficparticiapantsunreliable_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&envmodelparkingfeaturesunreliable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leftcampreprocunreliable_) -
        reinterpret_cast<char*>(&envmodelparkingfeaturesunreliable_)) + sizeof(leftcampreprocunreliable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HealthVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool leftCamVisionUnreliable = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_leftcamvisionunreliable(&has_bits);
          leftcamvisionunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool raUnreliable = 228;
      case 228:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_raunreliable(&has_bits);
          raunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool frontCamBlockage = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_frontcamblockage(&has_bits);
          frontcamblockage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mfManagerFailed = 318;
      case 318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_mfmanagerfailed(&has_bits);
          mfmanagerfailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mocoFailed = 374;
      case 374:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_mocofailed(&has_bits);
          mocofailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hostTemperatureWarning = 396;
      case 396:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_hosttemperaturewarning(&has_bits);
          hosttemperaturewarning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool frontCamVisionUnreliable = 399;
      case 399:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_frontcamvisionunreliable(&has_bits);
          frontcamvisionunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rearUltrasonicsUnreliable = 400;
      case 400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_rearultrasonicsunreliable(&has_bits);
          rearultrasonicsunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool aupUnreliable = 419;
      case 419:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_aupunreliable(&has_bits);
          aupunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool onlySafetyCoreAvailable = 474;
      case 474:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_onlysafetycoreavailable(&has_bits);
          onlysafetycoreavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool localizationUnreliable = 580;
      case 580:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_localizationunreliable(&has_bits);
          localizationunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rearCamVisionUnreliable = 723;
      case 723:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_rearcamvisionunreliable(&has_bits);
          rearcamvisionunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool frontUltrasonicsUnreliable = 1168;
      case 1168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_frontultrasonicsunreliable(&has_bits);
          frontultrasonicsunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool leftCamBlockage = 1525;
      case 1525:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_leftcamblockage(&has_bits);
          leftcamblockage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hvUnreliable = 1654;
      case 1654:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_hvunreliable(&has_bits);
          hvunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool odometryUnreliable = 1953;
      case 1953:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_odometryunreliable(&has_bits);
          odometryunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool envModelParkingFeaturesUnreliable = 1973;
      case 1973:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_envmodelparkingfeaturesunreliable(&has_bits);
          envmodelparkingfeaturesunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rightCamPreProcUnreliable = 2015;
      case 2015:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_rightcampreprocunreliable(&has_bits);
          rightcampreprocunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rightCamVisionUnreliable = 2133;
      case 2133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_rightcamvisionunreliable(&has_bits);
          rightcamvisionunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool leftCamPreProcUnreliable = 2229;
      case 2229:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_leftcampreprocunreliable(&has_bits);
          leftcampreprocunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vehicleCommunicationError = 2473;
      case 2473:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_vehiclecommunicationerror(&has_bits);
          vehiclecommunicationerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hmiCommunicationError = 2533;
      case 2533:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hmicommunicationerror(&has_bits);
          hmicommunicationerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lscaUnreliable = 2649;
      case 2649:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_lscaunreliable(&has_bits);
          lscaunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool avgaFailed = 2767;
      case 2767:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_avgafailed(&has_bits);
          avgafailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rearCamBlockage = 2919;
      case 2919:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rearcamblockage(&has_bits);
          rearcamblockage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rightCamBlockage = 3078;
      case 3078:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rightcamblockage(&has_bits);
          rightcamblockage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool envModelTrafficParticiapantsUnreliable = 3438;
      case 3438:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_envmodeltrafficparticiapantsunreliable(&has_bits);
          envmodeltrafficparticiapantsunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool envModelStaticObjsUnreliable = 3532;
      case 3532:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_envmodelstaticobjsunreliable(&has_bits);
          envmodelstaticobjsunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool frontCamPreProcUnreliable = 3919;
      case 3919:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_frontcampreprocunreliable(&has_bits);
          frontcampreprocunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rearCamPreProcUnreliable = 3978;
      case 3978:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_rearcampreprocunreliable(&has_bits);
          rearcampreprocunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pdwUnreliable = 4076;
      case 4076:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_pdwunreliable(&has_bits);
          pdwunreliable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.hpsd.health_vector.HealthVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool leftCamVisionUnreliable = 175;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(175, this->_internal_leftcamvisionunreliable(), target);
  }

  // optional bool raUnreliable = 228;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(228, this->_internal_raunreliable(), target);
  }

  // optional bool frontCamBlockage = 308;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(308, this->_internal_frontcamblockage(), target);
  }

  // optional bool mfManagerFailed = 318;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(318, this->_internal_mfmanagerfailed(), target);
  }

  // optional bool mocoFailed = 374;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(374, this->_internal_mocofailed(), target);
  }

  // optional bool hostTemperatureWarning = 396;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(396, this->_internal_hosttemperaturewarning(), target);
  }

  // optional bool frontCamVisionUnreliable = 399;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(399, this->_internal_frontcamvisionunreliable(), target);
  }

  // optional bool rearUltrasonicsUnreliable = 400;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(400, this->_internal_rearultrasonicsunreliable(), target);
  }

  // optional bool aupUnreliable = 419;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(419, this->_internal_aupunreliable(), target);
  }

  // optional bool onlySafetyCoreAvailable = 474;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(474, this->_internal_onlysafetycoreavailable(), target);
  }

  // optional bool localizationUnreliable = 580;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(580, this->_internal_localizationunreliable(), target);
  }

  // optional bool rearCamVisionUnreliable = 723;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(723, this->_internal_rearcamvisionunreliable(), target);
  }

  // optional bool frontUltrasonicsUnreliable = 1168;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1168, this->_internal_frontultrasonicsunreliable(), target);
  }

  // optional bool leftCamBlockage = 1525;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1525, this->_internal_leftcamblockage(), target);
  }

  // optional bool hvUnreliable = 1654;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1654, this->_internal_hvunreliable(), target);
  }

  // optional bool odometryUnreliable = 1953;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1953, this->_internal_odometryunreliable(), target);
  }

  // optional bool envModelParkingFeaturesUnreliable = 1973;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1973, this->_internal_envmodelparkingfeaturesunreliable(), target);
  }

  // optional bool rightCamPreProcUnreliable = 2015;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2015, this->_internal_rightcampreprocunreliable(), target);
  }

  // optional bool rightCamVisionUnreliable = 2133;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2133, this->_internal_rightcamvisionunreliable(), target);
  }

  // optional bool leftCamPreProcUnreliable = 2229;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2229, this->_internal_leftcampreprocunreliable(), target);
  }

  // optional bool vehicleCommunicationError = 2473;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2473, this->_internal_vehiclecommunicationerror(), target);
  }

  // optional bool hmiCommunicationError = 2533;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2533, this->_internal_hmicommunicationerror(), target);
  }

  // optional bool lscaUnreliable = 2649;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2649, this->_internal_lscaunreliable(), target);
  }

  // optional bool avgaFailed = 2767;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2767, this->_internal_avgafailed(), target);
  }

  // optional bool rearCamBlockage = 2919;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2919, this->_internal_rearcamblockage(), target);
  }

  // optional bool rightCamBlockage = 3078;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3078, this->_internal_rightcamblockage(), target);
  }

  // optional bool envModelTrafficParticiapantsUnreliable = 3438;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3438, this->_internal_envmodeltrafficparticiapantsunreliable(), target);
  }

  // optional bool envModelStaticObjsUnreliable = 3532;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3532, this->_internal_envmodelstaticobjsunreliable(), target);
  }

  // optional bool frontCamPreProcUnreliable = 3919;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3919, this->_internal_frontcampreprocunreliable(), target);
  }

  // optional bool rearCamPreProcUnreliable = 3978;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3978, this->_internal_rearcampreprocunreliable(), target);
  }

  // optional bool pdwUnreliable = 4076;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4076, this->_internal_pdwunreliable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.hpsd.health_vector.HealthVector)
  return target;
}

size_t HealthVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.hpsd.health_vector.HealthVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool rightCamPreProcUnreliable = 2015;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool frontCamVisionUnreliable = 399;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool rearCamVisionUnreliable = 723;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool leftCamVisionUnreliable = 175;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool avgaFailed = 2767;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool mfManagerFailed = 318;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool mocoFailed = 374;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool lscaUnreliable = 2649;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool aupUnreliable = 419;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool raUnreliable = 228;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool hvUnreliable = 1654;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool hostTemperatureWarning = 396;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool vehicleCommunicationError = 2473;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool onlySafetyCoreAvailable = 474;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool hmiCommunicationError = 2533;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 1;
    }

    // optional bool rightCamVisionUnreliable = 2133;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool frontCamBlockage = 308;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool rearCamBlockage = 2919;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

    // optional bool leftCamBlockage = 1525;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool rightCamBlockage = 3078;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 1;
    }

    // optional bool frontUltrasonicsUnreliable = 1168;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool rearUltrasonicsUnreliable = 400;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool envModelStaticObjsUnreliable = 3532;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool envModelTrafficParticiapantsUnreliable = 3438;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool envModelParkingFeaturesUnreliable = 1973;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool localizationUnreliable = 580;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool pdwUnreliable = 4076;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional bool odometryUnreliable = 1953;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool frontCamPreProcUnreliable = 3919;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 1;
    }

    // optional bool rearCamPreProcUnreliable = 3978;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 1;
    }

    // optional bool leftCamPreProcUnreliable = 2229;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.hpsd.health_vector.HealthVector)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.hpsd.health_vector.HealthVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.hpsd.health_vector.HealthVector)
    MergeFrom(*source);
  }
}

void HealthVector::MergeFrom(const HealthVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.hpsd.health_vector.HealthVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rightcampreprocunreliable_ = from.rightcampreprocunreliable_;
    }
    if (cached_has_bits & 0x00000002u) {
      frontcamvisionunreliable_ = from.frontcamvisionunreliable_;
    }
    if (cached_has_bits & 0x00000004u) {
      rearcamvisionunreliable_ = from.rearcamvisionunreliable_;
    }
    if (cached_has_bits & 0x00000008u) {
      leftcamvisionunreliable_ = from.leftcamvisionunreliable_;
    }
    if (cached_has_bits & 0x00000010u) {
      avgafailed_ = from.avgafailed_;
    }
    if (cached_has_bits & 0x00000020u) {
      mfmanagerfailed_ = from.mfmanagerfailed_;
    }
    if (cached_has_bits & 0x00000040u) {
      mocofailed_ = from.mocofailed_;
    }
    if (cached_has_bits & 0x00000080u) {
      lscaunreliable_ = from.lscaunreliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      aupunreliable_ = from.aupunreliable_;
    }
    if (cached_has_bits & 0x00000200u) {
      raunreliable_ = from.raunreliable_;
    }
    if (cached_has_bits & 0x00000400u) {
      hvunreliable_ = from.hvunreliable_;
    }
    if (cached_has_bits & 0x00000800u) {
      hosttemperaturewarning_ = from.hosttemperaturewarning_;
    }
    if (cached_has_bits & 0x00001000u) {
      vehiclecommunicationerror_ = from.vehiclecommunicationerror_;
    }
    if (cached_has_bits & 0x00002000u) {
      onlysafetycoreavailable_ = from.onlysafetycoreavailable_;
    }
    if (cached_has_bits & 0x00004000u) {
      hmicommunicationerror_ = from.hmicommunicationerror_;
    }
    if (cached_has_bits & 0x00008000u) {
      rightcamvisionunreliable_ = from.rightcamvisionunreliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      frontcamblockage_ = from.frontcamblockage_;
    }
    if (cached_has_bits & 0x00020000u) {
      rearcamblockage_ = from.rearcamblockage_;
    }
    if (cached_has_bits & 0x00040000u) {
      leftcamblockage_ = from.leftcamblockage_;
    }
    if (cached_has_bits & 0x00080000u) {
      rightcamblockage_ = from.rightcamblockage_;
    }
    if (cached_has_bits & 0x00100000u) {
      frontultrasonicsunreliable_ = from.frontultrasonicsunreliable_;
    }
    if (cached_has_bits & 0x00200000u) {
      rearultrasonicsunreliable_ = from.rearultrasonicsunreliable_;
    }
    if (cached_has_bits & 0x00400000u) {
      envmodelstaticobjsunreliable_ = from.envmodelstaticobjsunreliable_;
    }
    if (cached_has_bits & 0x00800000u) {
      envmodeltrafficparticiapantsunreliable_ = from.envmodeltrafficparticiapantsunreliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      envmodelparkingfeaturesunreliable_ = from.envmodelparkingfeaturesunreliable_;
    }
    if (cached_has_bits & 0x02000000u) {
      localizationunreliable_ = from.localizationunreliable_;
    }
    if (cached_has_bits & 0x04000000u) {
      pdwunreliable_ = from.pdwunreliable_;
    }
    if (cached_has_bits & 0x08000000u) {
      odometryunreliable_ = from.odometryunreliable_;
    }
    if (cached_has_bits & 0x10000000u) {
      frontcampreprocunreliable_ = from.frontcampreprocunreliable_;
    }
    if (cached_has_bits & 0x20000000u) {
      rearcampreprocunreliable_ = from.rearcampreprocunreliable_;
    }
    if (cached_has_bits & 0x40000000u) {
      leftcampreprocunreliable_ = from.leftcampreprocunreliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HealthVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.hpsd.health_vector.HealthVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthVector::CopyFrom(const HealthVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.hpsd.health_vector.HealthVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthVector::IsInitialized() const {
  return true;
}

void HealthVector::InternalSwap(HealthVector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rightcampreprocunreliable_, other->rightcampreprocunreliable_);
  swap(frontcamvisionunreliable_, other->frontcamvisionunreliable_);
  swap(rearcamvisionunreliable_, other->rearcamvisionunreliable_);
  swap(leftcamvisionunreliable_, other->leftcamvisionunreliable_);
  swap(avgafailed_, other->avgafailed_);
  swap(mfmanagerfailed_, other->mfmanagerfailed_);
  swap(mocofailed_, other->mocofailed_);
  swap(lscaunreliable_, other->lscaunreliable_);
  swap(aupunreliable_, other->aupunreliable_);
  swap(raunreliable_, other->raunreliable_);
  swap(hvunreliable_, other->hvunreliable_);
  swap(hosttemperaturewarning_, other->hosttemperaturewarning_);
  swap(vehiclecommunicationerror_, other->vehiclecommunicationerror_);
  swap(onlysafetycoreavailable_, other->onlysafetycoreavailable_);
  swap(hmicommunicationerror_, other->hmicommunicationerror_);
  swap(rightcamvisionunreliable_, other->rightcamvisionunreliable_);
  swap(frontcamblockage_, other->frontcamblockage_);
  swap(rearcamblockage_, other->rearcamblockage_);
  swap(leftcamblockage_, other->leftcamblockage_);
  swap(rightcamblockage_, other->rightcamblockage_);
  swap(frontultrasonicsunreliable_, other->frontultrasonicsunreliable_);
  swap(rearultrasonicsunreliable_, other->rearultrasonicsunreliable_);
  swap(envmodelstaticobjsunreliable_, other->envmodelstaticobjsunreliable_);
  swap(envmodeltrafficparticiapantsunreliable_, other->envmodeltrafficparticiapantsunreliable_);
  swap(envmodelparkingfeaturesunreliable_, other->envmodelparkingfeaturesunreliable_);
  swap(localizationunreliable_, other->localizationunreliable_);
  swap(pdwunreliable_, other->pdwunreliable_);
  swap(odometryunreliable_, other->odometryunreliable_);
  swap(frontcampreprocunreliable_, other->frontcampreprocunreliable_);
  swap(rearcampreprocunreliable_, other->rearcampreprocunreliable_);
  swap(leftcampreprocunreliable_, other->leftcampreprocunreliable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthVector_array_port::InitAsDefaultInstance() {
}
class HealthVector_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<HealthVector_array_port>()._has_bits_);
};

HealthVector_array_port::HealthVector_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.hpsd.health_vector.HealthVector_array_port)
}
HealthVector_array_port::HealthVector_array_port(const HealthVector_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.hpsd.health_vector.HealthVector_array_port)
}

void HealthVector_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HealthVector_array_port_hpsd_2fhealth_5fvector_2eproto.base);
}

HealthVector_array_port::~HealthVector_array_port() {
  // @@protoc_insertion_point(destructor:pb.hpsd.health_vector.HealthVector_array_port)
  SharedDtor();
}

void HealthVector_array_port::SharedDtor() {
}

void HealthVector_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthVector_array_port& HealthVector_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthVector_array_port_hpsd_2fhealth_5fvector_2eproto.base);
  return *internal_default_instance();
}


void HealthVector_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.hpsd.health_vector.HealthVector_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HealthVector_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.hpsd.health_vector.HealthVector data = 3166;
      case 3166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthVector_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.hpsd.health_vector.HealthVector_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.hpsd.health_vector.HealthVector data = 3166;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3166, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.hpsd.health_vector.HealthVector_array_port)
  return target;
}

size_t HealthVector_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.hpsd.health_vector.HealthVector_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.hpsd.health_vector.HealthVector data = 3166;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthVector_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.hpsd.health_vector.HealthVector_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthVector_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthVector_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.hpsd.health_vector.HealthVector_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.hpsd.health_vector.HealthVector_array_port)
    MergeFrom(*source);
  }
}

void HealthVector_array_port::MergeFrom(const HealthVector_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.hpsd.health_vector.HealthVector_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void HealthVector_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.hpsd.health_vector.HealthVector_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthVector_array_port::CopyFrom(const HealthVector_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.hpsd.health_vector.HealthVector_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthVector_array_port::IsInitialized() const {
  return true;
}

void HealthVector_array_port::InternalSwap(HealthVector_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthVector_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace health_vector
}  // namespace hpsd
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::hpsd::health_vector::HealthVector* Arena::CreateMaybeMessage< ::pb::hpsd::health_vector::HealthVector >(Arena* arena) {
  return Arena::CreateInternal< ::pb::hpsd::health_vector::HealthVector >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::hpsd::health_vector::HealthVector_array_port* Arena::CreateMaybeMessage< ::pb::hpsd::health_vector::HealthVector_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::hpsd::health_vector::HealthVector_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
