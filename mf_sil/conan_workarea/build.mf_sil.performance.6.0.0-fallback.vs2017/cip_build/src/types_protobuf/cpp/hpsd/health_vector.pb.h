// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hpsd/health_vector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hpsd_2fhealth_5fvector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hpsd_2fhealth_5fvector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hpsd_2fhealth_5fvector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hpsd_2fhealth_5fvector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hpsd_2fhealth_5fvector_2eproto;
namespace pb {
namespace hpsd {
namespace health_vector {
class HealthVector;
class HealthVectorDefaultTypeInternal;
extern HealthVectorDefaultTypeInternal _HealthVector_default_instance_;
class HealthVector_array_port;
class HealthVector_array_portDefaultTypeInternal;
extern HealthVector_array_portDefaultTypeInternal _HealthVector_array_port_default_instance_;
}  // namespace health_vector
}  // namespace hpsd
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::hpsd::health_vector::HealthVector* Arena::CreateMaybeMessage<::pb::hpsd::health_vector::HealthVector>(Arena*);
template<> ::pb::hpsd::health_vector::HealthVector_array_port* Arena::CreateMaybeMessage<::pb::hpsd::health_vector::HealthVector_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace hpsd {
namespace health_vector {

// ===================================================================

class HealthVector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.hpsd.health_vector.HealthVector) */ {
 public:
  HealthVector();
  virtual ~HealthVector();

  HealthVector(const HealthVector& from);
  HealthVector(HealthVector&& from) noexcept
    : HealthVector() {
    *this = ::std::move(from);
  }

  inline HealthVector& operator=(const HealthVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthVector& operator=(HealthVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthVector* internal_default_instance() {
    return reinterpret_cast<const HealthVector*>(
               &_HealthVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HealthVector& a, HealthVector& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthVector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthVector* New() const final {
    return CreateMaybeMessage<HealthVector>(nullptr);
  }

  HealthVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthVector& from);
  void MergeFrom(const HealthVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.hpsd.health_vector.HealthVector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hpsd_2fhealth_5fvector_2eproto);
    return ::descriptor_table_hpsd_2fhealth_5fvector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightCamPreProcUnreliableFieldNumber = 2015,
    kFrontCamVisionUnreliableFieldNumber = 399,
    kRearCamVisionUnreliableFieldNumber = 723,
    kLeftCamVisionUnreliableFieldNumber = 175,
    kAvgaFailedFieldNumber = 2767,
    kMfManagerFailedFieldNumber = 318,
    kMocoFailedFieldNumber = 374,
    kLscaUnreliableFieldNumber = 2649,
    kAupUnreliableFieldNumber = 419,
    kRaUnreliableFieldNumber = 228,
    kHvUnreliableFieldNumber = 1654,
    kHostTemperatureWarningFieldNumber = 396,
    kVehicleCommunicationErrorFieldNumber = 2473,
    kOnlySafetyCoreAvailableFieldNumber = 474,
    kHmiCommunicationErrorFieldNumber = 2533,
    kRightCamVisionUnreliableFieldNumber = 2133,
    kFrontCamBlockageFieldNumber = 308,
    kRearCamBlockageFieldNumber = 2919,
    kLeftCamBlockageFieldNumber = 1525,
    kRightCamBlockageFieldNumber = 3078,
    kFrontUltrasonicsUnreliableFieldNumber = 1168,
    kRearUltrasonicsUnreliableFieldNumber = 400,
    kEnvModelStaticObjsUnreliableFieldNumber = 3532,
    kEnvModelTrafficParticiapantsUnreliableFieldNumber = 3438,
    kEnvModelParkingFeaturesUnreliableFieldNumber = 1973,
    kLocalizationUnreliableFieldNumber = 580,
    kPdwUnreliableFieldNumber = 4076,
    kOdometryUnreliableFieldNumber = 1953,
    kFrontCamPreProcUnreliableFieldNumber = 3919,
    kRearCamPreProcUnreliableFieldNumber = 3978,
    kLeftCamPreProcUnreliableFieldNumber = 2229,
  };
  // optional bool rightCamPreProcUnreliable = 2015;
  bool has_rightcampreprocunreliable() const;
  private:
  bool _internal_has_rightcampreprocunreliable() const;
  public:
  void clear_rightcampreprocunreliable();
  bool rightcampreprocunreliable() const;
  void set_rightcampreprocunreliable(bool value);
  private:
  bool _internal_rightcampreprocunreliable() const;
  void _internal_set_rightcampreprocunreliable(bool value);
  public:

  // optional bool frontCamVisionUnreliable = 399;
  bool has_frontcamvisionunreliable() const;
  private:
  bool _internal_has_frontcamvisionunreliable() const;
  public:
  void clear_frontcamvisionunreliable();
  bool frontcamvisionunreliable() const;
  void set_frontcamvisionunreliable(bool value);
  private:
  bool _internal_frontcamvisionunreliable() const;
  void _internal_set_frontcamvisionunreliable(bool value);
  public:

  // optional bool rearCamVisionUnreliable = 723;
  bool has_rearcamvisionunreliable() const;
  private:
  bool _internal_has_rearcamvisionunreliable() const;
  public:
  void clear_rearcamvisionunreliable();
  bool rearcamvisionunreliable() const;
  void set_rearcamvisionunreliable(bool value);
  private:
  bool _internal_rearcamvisionunreliable() const;
  void _internal_set_rearcamvisionunreliable(bool value);
  public:

  // optional bool leftCamVisionUnreliable = 175;
  bool has_leftcamvisionunreliable() const;
  private:
  bool _internal_has_leftcamvisionunreliable() const;
  public:
  void clear_leftcamvisionunreliable();
  bool leftcamvisionunreliable() const;
  void set_leftcamvisionunreliable(bool value);
  private:
  bool _internal_leftcamvisionunreliable() const;
  void _internal_set_leftcamvisionunreliable(bool value);
  public:

  // optional bool avgaFailed = 2767;
  bool has_avgafailed() const;
  private:
  bool _internal_has_avgafailed() const;
  public:
  void clear_avgafailed();
  bool avgafailed() const;
  void set_avgafailed(bool value);
  private:
  bool _internal_avgafailed() const;
  void _internal_set_avgafailed(bool value);
  public:

  // optional bool mfManagerFailed = 318;
  bool has_mfmanagerfailed() const;
  private:
  bool _internal_has_mfmanagerfailed() const;
  public:
  void clear_mfmanagerfailed();
  bool mfmanagerfailed() const;
  void set_mfmanagerfailed(bool value);
  private:
  bool _internal_mfmanagerfailed() const;
  void _internal_set_mfmanagerfailed(bool value);
  public:

  // optional bool mocoFailed = 374;
  bool has_mocofailed() const;
  private:
  bool _internal_has_mocofailed() const;
  public:
  void clear_mocofailed();
  bool mocofailed() const;
  void set_mocofailed(bool value);
  private:
  bool _internal_mocofailed() const;
  void _internal_set_mocofailed(bool value);
  public:

  // optional bool lscaUnreliable = 2649;
  bool has_lscaunreliable() const;
  private:
  bool _internal_has_lscaunreliable() const;
  public:
  void clear_lscaunreliable();
  bool lscaunreliable() const;
  void set_lscaunreliable(bool value);
  private:
  bool _internal_lscaunreliable() const;
  void _internal_set_lscaunreliable(bool value);
  public:

  // optional bool aupUnreliable = 419;
  bool has_aupunreliable() const;
  private:
  bool _internal_has_aupunreliable() const;
  public:
  void clear_aupunreliable();
  bool aupunreliable() const;
  void set_aupunreliable(bool value);
  private:
  bool _internal_aupunreliable() const;
  void _internal_set_aupunreliable(bool value);
  public:

  // optional bool raUnreliable = 228;
  bool has_raunreliable() const;
  private:
  bool _internal_has_raunreliable() const;
  public:
  void clear_raunreliable();
  bool raunreliable() const;
  void set_raunreliable(bool value);
  private:
  bool _internal_raunreliable() const;
  void _internal_set_raunreliable(bool value);
  public:

  // optional bool hvUnreliable = 1654;
  bool has_hvunreliable() const;
  private:
  bool _internal_has_hvunreliable() const;
  public:
  void clear_hvunreliable();
  bool hvunreliable() const;
  void set_hvunreliable(bool value);
  private:
  bool _internal_hvunreliable() const;
  void _internal_set_hvunreliable(bool value);
  public:

  // optional bool hostTemperatureWarning = 396;
  bool has_hosttemperaturewarning() const;
  private:
  bool _internal_has_hosttemperaturewarning() const;
  public:
  void clear_hosttemperaturewarning();
  bool hosttemperaturewarning() const;
  void set_hosttemperaturewarning(bool value);
  private:
  bool _internal_hosttemperaturewarning() const;
  void _internal_set_hosttemperaturewarning(bool value);
  public:

  // optional bool vehicleCommunicationError = 2473;
  bool has_vehiclecommunicationerror() const;
  private:
  bool _internal_has_vehiclecommunicationerror() const;
  public:
  void clear_vehiclecommunicationerror();
  bool vehiclecommunicationerror() const;
  void set_vehiclecommunicationerror(bool value);
  private:
  bool _internal_vehiclecommunicationerror() const;
  void _internal_set_vehiclecommunicationerror(bool value);
  public:

  // optional bool onlySafetyCoreAvailable = 474;
  bool has_onlysafetycoreavailable() const;
  private:
  bool _internal_has_onlysafetycoreavailable() const;
  public:
  void clear_onlysafetycoreavailable();
  bool onlysafetycoreavailable() const;
  void set_onlysafetycoreavailable(bool value);
  private:
  bool _internal_onlysafetycoreavailable() const;
  void _internal_set_onlysafetycoreavailable(bool value);
  public:

  // optional bool hmiCommunicationError = 2533;
  bool has_hmicommunicationerror() const;
  private:
  bool _internal_has_hmicommunicationerror() const;
  public:
  void clear_hmicommunicationerror();
  bool hmicommunicationerror() const;
  void set_hmicommunicationerror(bool value);
  private:
  bool _internal_hmicommunicationerror() const;
  void _internal_set_hmicommunicationerror(bool value);
  public:

  // optional bool rightCamVisionUnreliable = 2133;
  bool has_rightcamvisionunreliable() const;
  private:
  bool _internal_has_rightcamvisionunreliable() const;
  public:
  void clear_rightcamvisionunreliable();
  bool rightcamvisionunreliable() const;
  void set_rightcamvisionunreliable(bool value);
  private:
  bool _internal_rightcamvisionunreliable() const;
  void _internal_set_rightcamvisionunreliable(bool value);
  public:

  // optional bool frontCamBlockage = 308;
  bool has_frontcamblockage() const;
  private:
  bool _internal_has_frontcamblockage() const;
  public:
  void clear_frontcamblockage();
  bool frontcamblockage() const;
  void set_frontcamblockage(bool value);
  private:
  bool _internal_frontcamblockage() const;
  void _internal_set_frontcamblockage(bool value);
  public:

  // optional bool rearCamBlockage = 2919;
  bool has_rearcamblockage() const;
  private:
  bool _internal_has_rearcamblockage() const;
  public:
  void clear_rearcamblockage();
  bool rearcamblockage() const;
  void set_rearcamblockage(bool value);
  private:
  bool _internal_rearcamblockage() const;
  void _internal_set_rearcamblockage(bool value);
  public:

  // optional bool leftCamBlockage = 1525;
  bool has_leftcamblockage() const;
  private:
  bool _internal_has_leftcamblockage() const;
  public:
  void clear_leftcamblockage();
  bool leftcamblockage() const;
  void set_leftcamblockage(bool value);
  private:
  bool _internal_leftcamblockage() const;
  void _internal_set_leftcamblockage(bool value);
  public:

  // optional bool rightCamBlockage = 3078;
  bool has_rightcamblockage() const;
  private:
  bool _internal_has_rightcamblockage() const;
  public:
  void clear_rightcamblockage();
  bool rightcamblockage() const;
  void set_rightcamblockage(bool value);
  private:
  bool _internal_rightcamblockage() const;
  void _internal_set_rightcamblockage(bool value);
  public:

  // optional bool frontUltrasonicsUnreliable = 1168;
  bool has_frontultrasonicsunreliable() const;
  private:
  bool _internal_has_frontultrasonicsunreliable() const;
  public:
  void clear_frontultrasonicsunreliable();
  bool frontultrasonicsunreliable() const;
  void set_frontultrasonicsunreliable(bool value);
  private:
  bool _internal_frontultrasonicsunreliable() const;
  void _internal_set_frontultrasonicsunreliable(bool value);
  public:

  // optional bool rearUltrasonicsUnreliable = 400;
  bool has_rearultrasonicsunreliable() const;
  private:
  bool _internal_has_rearultrasonicsunreliable() const;
  public:
  void clear_rearultrasonicsunreliable();
  bool rearultrasonicsunreliable() const;
  void set_rearultrasonicsunreliable(bool value);
  private:
  bool _internal_rearultrasonicsunreliable() const;
  void _internal_set_rearultrasonicsunreliable(bool value);
  public:

  // optional bool envModelStaticObjsUnreliable = 3532;
  bool has_envmodelstaticobjsunreliable() const;
  private:
  bool _internal_has_envmodelstaticobjsunreliable() const;
  public:
  void clear_envmodelstaticobjsunreliable();
  bool envmodelstaticobjsunreliable() const;
  void set_envmodelstaticobjsunreliable(bool value);
  private:
  bool _internal_envmodelstaticobjsunreliable() const;
  void _internal_set_envmodelstaticobjsunreliable(bool value);
  public:

  // optional bool envModelTrafficParticiapantsUnreliable = 3438;
  bool has_envmodeltrafficparticiapantsunreliable() const;
  private:
  bool _internal_has_envmodeltrafficparticiapantsunreliable() const;
  public:
  void clear_envmodeltrafficparticiapantsunreliable();
  bool envmodeltrafficparticiapantsunreliable() const;
  void set_envmodeltrafficparticiapantsunreliable(bool value);
  private:
  bool _internal_envmodeltrafficparticiapantsunreliable() const;
  void _internal_set_envmodeltrafficparticiapantsunreliable(bool value);
  public:

  // optional bool envModelParkingFeaturesUnreliable = 1973;
  bool has_envmodelparkingfeaturesunreliable() const;
  private:
  bool _internal_has_envmodelparkingfeaturesunreliable() const;
  public:
  void clear_envmodelparkingfeaturesunreliable();
  bool envmodelparkingfeaturesunreliable() const;
  void set_envmodelparkingfeaturesunreliable(bool value);
  private:
  bool _internal_envmodelparkingfeaturesunreliable() const;
  void _internal_set_envmodelparkingfeaturesunreliable(bool value);
  public:

  // optional bool localizationUnreliable = 580;
  bool has_localizationunreliable() const;
  private:
  bool _internal_has_localizationunreliable() const;
  public:
  void clear_localizationunreliable();
  bool localizationunreliable() const;
  void set_localizationunreliable(bool value);
  private:
  bool _internal_localizationunreliable() const;
  void _internal_set_localizationunreliable(bool value);
  public:

  // optional bool pdwUnreliable = 4076;
  bool has_pdwunreliable() const;
  private:
  bool _internal_has_pdwunreliable() const;
  public:
  void clear_pdwunreliable();
  bool pdwunreliable() const;
  void set_pdwunreliable(bool value);
  private:
  bool _internal_pdwunreliable() const;
  void _internal_set_pdwunreliable(bool value);
  public:

  // optional bool odometryUnreliable = 1953;
  bool has_odometryunreliable() const;
  private:
  bool _internal_has_odometryunreliable() const;
  public:
  void clear_odometryunreliable();
  bool odometryunreliable() const;
  void set_odometryunreliable(bool value);
  private:
  bool _internal_odometryunreliable() const;
  void _internal_set_odometryunreliable(bool value);
  public:

  // optional bool frontCamPreProcUnreliable = 3919;
  bool has_frontcampreprocunreliable() const;
  private:
  bool _internal_has_frontcampreprocunreliable() const;
  public:
  void clear_frontcampreprocunreliable();
  bool frontcampreprocunreliable() const;
  void set_frontcampreprocunreliable(bool value);
  private:
  bool _internal_frontcampreprocunreliable() const;
  void _internal_set_frontcampreprocunreliable(bool value);
  public:

  // optional bool rearCamPreProcUnreliable = 3978;
  bool has_rearcampreprocunreliable() const;
  private:
  bool _internal_has_rearcampreprocunreliable() const;
  public:
  void clear_rearcampreprocunreliable();
  bool rearcampreprocunreliable() const;
  void set_rearcampreprocunreliable(bool value);
  private:
  bool _internal_rearcampreprocunreliable() const;
  void _internal_set_rearcampreprocunreliable(bool value);
  public:

  // optional bool leftCamPreProcUnreliable = 2229;
  bool has_leftcampreprocunreliable() const;
  private:
  bool _internal_has_leftcampreprocunreliable() const;
  public:
  void clear_leftcampreprocunreliable();
  bool leftcampreprocunreliable() const;
  void set_leftcampreprocunreliable(bool value);
  private:
  bool _internal_leftcampreprocunreliable() const;
  void _internal_set_leftcampreprocunreliable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.hpsd.health_vector.HealthVector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool rightcampreprocunreliable_;
  bool frontcamvisionunreliable_;
  bool rearcamvisionunreliable_;
  bool leftcamvisionunreliable_;
  bool avgafailed_;
  bool mfmanagerfailed_;
  bool mocofailed_;
  bool lscaunreliable_;
  bool aupunreliable_;
  bool raunreliable_;
  bool hvunreliable_;
  bool hosttemperaturewarning_;
  bool vehiclecommunicationerror_;
  bool onlysafetycoreavailable_;
  bool hmicommunicationerror_;
  bool rightcamvisionunreliable_;
  bool frontcamblockage_;
  bool rearcamblockage_;
  bool leftcamblockage_;
  bool rightcamblockage_;
  bool frontultrasonicsunreliable_;
  bool rearultrasonicsunreliable_;
  bool envmodelstaticobjsunreliable_;
  bool envmodeltrafficparticiapantsunreliable_;
  bool envmodelparkingfeaturesunreliable_;
  bool localizationunreliable_;
  bool pdwunreliable_;
  bool odometryunreliable_;
  bool frontcampreprocunreliable_;
  bool rearcampreprocunreliable_;
  bool leftcampreprocunreliable_;
  friend struct ::TableStruct_hpsd_2fhealth_5fvector_2eproto;
};
// -------------------------------------------------------------------

class HealthVector_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.hpsd.health_vector.HealthVector_array_port) */ {
 public:
  HealthVector_array_port();
  virtual ~HealthVector_array_port();

  HealthVector_array_port(const HealthVector_array_port& from);
  HealthVector_array_port(HealthVector_array_port&& from) noexcept
    : HealthVector_array_port() {
    *this = ::std::move(from);
  }

  inline HealthVector_array_port& operator=(const HealthVector_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthVector_array_port& operator=(HealthVector_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthVector_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthVector_array_port* internal_default_instance() {
    return reinterpret_cast<const HealthVector_array_port*>(
               &_HealthVector_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HealthVector_array_port& a, HealthVector_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthVector_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthVector_array_port* New() const final {
    return CreateMaybeMessage<HealthVector_array_port>(nullptr);
  }

  HealthVector_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthVector_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthVector_array_port& from);
  void MergeFrom(const HealthVector_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthVector_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.hpsd.health_vector.HealthVector_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hpsd_2fhealth_5fvector_2eproto);
    return ::descriptor_table_hpsd_2fhealth_5fvector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3166,
  };
  // repeated .pb.hpsd.health_vector.HealthVector data = 3166;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::hpsd::health_vector::HealthVector* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::hpsd::health_vector::HealthVector >*
      mutable_data();
  private:
  const ::pb::hpsd::health_vector::HealthVector& _internal_data(int index) const;
  ::pb::hpsd::health_vector::HealthVector* _internal_add_data();
  public:
  const ::pb::hpsd::health_vector::HealthVector& data(int index) const;
  ::pb::hpsd::health_vector::HealthVector* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::hpsd::health_vector::HealthVector >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.hpsd.health_vector.HealthVector_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::hpsd::health_vector::HealthVector > data_;
  friend struct ::TableStruct_hpsd_2fhealth_5fvector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthVector

// optional bool hostTemperatureWarning = 396;
inline bool HealthVector::_internal_has_hosttemperaturewarning() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool HealthVector::has_hosttemperaturewarning() const {
  return _internal_has_hosttemperaturewarning();
}
inline void HealthVector::clear_hosttemperaturewarning() {
  hosttemperaturewarning_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool HealthVector::_internal_hosttemperaturewarning() const {
  return hosttemperaturewarning_;
}
inline bool HealthVector::hosttemperaturewarning() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.hostTemperatureWarning)
  return _internal_hosttemperaturewarning();
}
inline void HealthVector::_internal_set_hosttemperaturewarning(bool value) {
  _has_bits_[0] |= 0x00000800u;
  hosttemperaturewarning_ = value;
}
inline void HealthVector::set_hosttemperaturewarning(bool value) {
  _internal_set_hosttemperaturewarning(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.hostTemperatureWarning)
}

// optional bool vehicleCommunicationError = 2473;
inline bool HealthVector::_internal_has_vehiclecommunicationerror() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool HealthVector::has_vehiclecommunicationerror() const {
  return _internal_has_vehiclecommunicationerror();
}
inline void HealthVector::clear_vehiclecommunicationerror() {
  vehiclecommunicationerror_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool HealthVector::_internal_vehiclecommunicationerror() const {
  return vehiclecommunicationerror_;
}
inline bool HealthVector::vehiclecommunicationerror() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.vehicleCommunicationError)
  return _internal_vehiclecommunicationerror();
}
inline void HealthVector::_internal_set_vehiclecommunicationerror(bool value) {
  _has_bits_[0] |= 0x00001000u;
  vehiclecommunicationerror_ = value;
}
inline void HealthVector::set_vehiclecommunicationerror(bool value) {
  _internal_set_vehiclecommunicationerror(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.vehicleCommunicationError)
}

// optional bool onlySafetyCoreAvailable = 474;
inline bool HealthVector::_internal_has_onlysafetycoreavailable() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool HealthVector::has_onlysafetycoreavailable() const {
  return _internal_has_onlysafetycoreavailable();
}
inline void HealthVector::clear_onlysafetycoreavailable() {
  onlysafetycoreavailable_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool HealthVector::_internal_onlysafetycoreavailable() const {
  return onlysafetycoreavailable_;
}
inline bool HealthVector::onlysafetycoreavailable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.onlySafetyCoreAvailable)
  return _internal_onlysafetycoreavailable();
}
inline void HealthVector::_internal_set_onlysafetycoreavailable(bool value) {
  _has_bits_[0] |= 0x00002000u;
  onlysafetycoreavailable_ = value;
}
inline void HealthVector::set_onlysafetycoreavailable(bool value) {
  _internal_set_onlysafetycoreavailable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.onlySafetyCoreAvailable)
}

// optional bool hmiCommunicationError = 2533;
inline bool HealthVector::_internal_has_hmicommunicationerror() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool HealthVector::has_hmicommunicationerror() const {
  return _internal_has_hmicommunicationerror();
}
inline void HealthVector::clear_hmicommunicationerror() {
  hmicommunicationerror_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool HealthVector::_internal_hmicommunicationerror() const {
  return hmicommunicationerror_;
}
inline bool HealthVector::hmicommunicationerror() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.hmiCommunicationError)
  return _internal_hmicommunicationerror();
}
inline void HealthVector::_internal_set_hmicommunicationerror(bool value) {
  _has_bits_[0] |= 0x00004000u;
  hmicommunicationerror_ = value;
}
inline void HealthVector::set_hmicommunicationerror(bool value) {
  _internal_set_hmicommunicationerror(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.hmiCommunicationError)
}

// optional bool odometryUnreliable = 1953;
inline bool HealthVector::_internal_has_odometryunreliable() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool HealthVector::has_odometryunreliable() const {
  return _internal_has_odometryunreliable();
}
inline void HealthVector::clear_odometryunreliable() {
  odometryunreliable_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool HealthVector::_internal_odometryunreliable() const {
  return odometryunreliable_;
}
inline bool HealthVector::odometryunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.odometryUnreliable)
  return _internal_odometryunreliable();
}
inline void HealthVector::_internal_set_odometryunreliable(bool value) {
  _has_bits_[0] |= 0x08000000u;
  odometryunreliable_ = value;
}
inline void HealthVector::set_odometryunreliable(bool value) {
  _internal_set_odometryunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.odometryUnreliable)
}

// optional bool frontCamPreProcUnreliable = 3919;
inline bool HealthVector::_internal_has_frontcampreprocunreliable() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool HealthVector::has_frontcampreprocunreliable() const {
  return _internal_has_frontcampreprocunreliable();
}
inline void HealthVector::clear_frontcampreprocunreliable() {
  frontcampreprocunreliable_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool HealthVector::_internal_frontcampreprocunreliable() const {
  return frontcampreprocunreliable_;
}
inline bool HealthVector::frontcampreprocunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.frontCamPreProcUnreliable)
  return _internal_frontcampreprocunreliable();
}
inline void HealthVector::_internal_set_frontcampreprocunreliable(bool value) {
  _has_bits_[0] |= 0x10000000u;
  frontcampreprocunreliable_ = value;
}
inline void HealthVector::set_frontcampreprocunreliable(bool value) {
  _internal_set_frontcampreprocunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.frontCamPreProcUnreliable)
}

// optional bool rearCamPreProcUnreliable = 3978;
inline bool HealthVector::_internal_has_rearcampreprocunreliable() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool HealthVector::has_rearcampreprocunreliable() const {
  return _internal_has_rearcampreprocunreliable();
}
inline void HealthVector::clear_rearcampreprocunreliable() {
  rearcampreprocunreliable_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool HealthVector::_internal_rearcampreprocunreliable() const {
  return rearcampreprocunreliable_;
}
inline bool HealthVector::rearcampreprocunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.rearCamPreProcUnreliable)
  return _internal_rearcampreprocunreliable();
}
inline void HealthVector::_internal_set_rearcampreprocunreliable(bool value) {
  _has_bits_[0] |= 0x20000000u;
  rearcampreprocunreliable_ = value;
}
inline void HealthVector::set_rearcampreprocunreliable(bool value) {
  _internal_set_rearcampreprocunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.rearCamPreProcUnreliable)
}

// optional bool leftCamPreProcUnreliable = 2229;
inline bool HealthVector::_internal_has_leftcampreprocunreliable() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool HealthVector::has_leftcampreprocunreliable() const {
  return _internal_has_leftcampreprocunreliable();
}
inline void HealthVector::clear_leftcampreprocunreliable() {
  leftcampreprocunreliable_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool HealthVector::_internal_leftcampreprocunreliable() const {
  return leftcampreprocunreliable_;
}
inline bool HealthVector::leftcampreprocunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.leftCamPreProcUnreliable)
  return _internal_leftcampreprocunreliable();
}
inline void HealthVector::_internal_set_leftcampreprocunreliable(bool value) {
  _has_bits_[0] |= 0x40000000u;
  leftcampreprocunreliable_ = value;
}
inline void HealthVector::set_leftcampreprocunreliable(bool value) {
  _internal_set_leftcampreprocunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.leftCamPreProcUnreliable)
}

// optional bool rightCamPreProcUnreliable = 2015;
inline bool HealthVector::_internal_has_rightcampreprocunreliable() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HealthVector::has_rightcampreprocunreliable() const {
  return _internal_has_rightcampreprocunreliable();
}
inline void HealthVector::clear_rightcampreprocunreliable() {
  rightcampreprocunreliable_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool HealthVector::_internal_rightcampreprocunreliable() const {
  return rightcampreprocunreliable_;
}
inline bool HealthVector::rightcampreprocunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.rightCamPreProcUnreliable)
  return _internal_rightcampreprocunreliable();
}
inline void HealthVector::_internal_set_rightcampreprocunreliable(bool value) {
  _has_bits_[0] |= 0x00000001u;
  rightcampreprocunreliable_ = value;
}
inline void HealthVector::set_rightcampreprocunreliable(bool value) {
  _internal_set_rightcampreprocunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.rightCamPreProcUnreliable)
}

// optional bool frontCamVisionUnreliable = 399;
inline bool HealthVector::_internal_has_frontcamvisionunreliable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HealthVector::has_frontcamvisionunreliable() const {
  return _internal_has_frontcamvisionunreliable();
}
inline void HealthVector::clear_frontcamvisionunreliable() {
  frontcamvisionunreliable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool HealthVector::_internal_frontcamvisionunreliable() const {
  return frontcamvisionunreliable_;
}
inline bool HealthVector::frontcamvisionunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.frontCamVisionUnreliable)
  return _internal_frontcamvisionunreliable();
}
inline void HealthVector::_internal_set_frontcamvisionunreliable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  frontcamvisionunreliable_ = value;
}
inline void HealthVector::set_frontcamvisionunreliable(bool value) {
  _internal_set_frontcamvisionunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.frontCamVisionUnreliable)
}

// optional bool rearCamVisionUnreliable = 723;
inline bool HealthVector::_internal_has_rearcamvisionunreliable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HealthVector::has_rearcamvisionunreliable() const {
  return _internal_has_rearcamvisionunreliable();
}
inline void HealthVector::clear_rearcamvisionunreliable() {
  rearcamvisionunreliable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HealthVector::_internal_rearcamvisionunreliable() const {
  return rearcamvisionunreliable_;
}
inline bool HealthVector::rearcamvisionunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.rearCamVisionUnreliable)
  return _internal_rearcamvisionunreliable();
}
inline void HealthVector::_internal_set_rearcamvisionunreliable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  rearcamvisionunreliable_ = value;
}
inline void HealthVector::set_rearcamvisionunreliable(bool value) {
  _internal_set_rearcamvisionunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.rearCamVisionUnreliable)
}

// optional bool leftCamVisionUnreliable = 175;
inline bool HealthVector::_internal_has_leftcamvisionunreliable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HealthVector::has_leftcamvisionunreliable() const {
  return _internal_has_leftcamvisionunreliable();
}
inline void HealthVector::clear_leftcamvisionunreliable() {
  leftcamvisionunreliable_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool HealthVector::_internal_leftcamvisionunreliable() const {
  return leftcamvisionunreliable_;
}
inline bool HealthVector::leftcamvisionunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.leftCamVisionUnreliable)
  return _internal_leftcamvisionunreliable();
}
inline void HealthVector::_internal_set_leftcamvisionunreliable(bool value) {
  _has_bits_[0] |= 0x00000008u;
  leftcamvisionunreliable_ = value;
}
inline void HealthVector::set_leftcamvisionunreliable(bool value) {
  _internal_set_leftcamvisionunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.leftCamVisionUnreliable)
}

// optional bool rightCamVisionUnreliable = 2133;
inline bool HealthVector::_internal_has_rightcamvisionunreliable() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool HealthVector::has_rightcamvisionunreliable() const {
  return _internal_has_rightcamvisionunreliable();
}
inline void HealthVector::clear_rightcamvisionunreliable() {
  rightcamvisionunreliable_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool HealthVector::_internal_rightcamvisionunreliable() const {
  return rightcamvisionunreliable_;
}
inline bool HealthVector::rightcamvisionunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.rightCamVisionUnreliable)
  return _internal_rightcamvisionunreliable();
}
inline void HealthVector::_internal_set_rightcamvisionunreliable(bool value) {
  _has_bits_[0] |= 0x00008000u;
  rightcamvisionunreliable_ = value;
}
inline void HealthVector::set_rightcamvisionunreliable(bool value) {
  _internal_set_rightcamvisionunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.rightCamVisionUnreliable)
}

// optional bool frontCamBlockage = 308;
inline bool HealthVector::_internal_has_frontcamblockage() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool HealthVector::has_frontcamblockage() const {
  return _internal_has_frontcamblockage();
}
inline void HealthVector::clear_frontcamblockage() {
  frontcamblockage_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool HealthVector::_internal_frontcamblockage() const {
  return frontcamblockage_;
}
inline bool HealthVector::frontcamblockage() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.frontCamBlockage)
  return _internal_frontcamblockage();
}
inline void HealthVector::_internal_set_frontcamblockage(bool value) {
  _has_bits_[0] |= 0x00010000u;
  frontcamblockage_ = value;
}
inline void HealthVector::set_frontcamblockage(bool value) {
  _internal_set_frontcamblockage(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.frontCamBlockage)
}

// optional bool rearCamBlockage = 2919;
inline bool HealthVector::_internal_has_rearcamblockage() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool HealthVector::has_rearcamblockage() const {
  return _internal_has_rearcamblockage();
}
inline void HealthVector::clear_rearcamblockage() {
  rearcamblockage_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool HealthVector::_internal_rearcamblockage() const {
  return rearcamblockage_;
}
inline bool HealthVector::rearcamblockage() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.rearCamBlockage)
  return _internal_rearcamblockage();
}
inline void HealthVector::_internal_set_rearcamblockage(bool value) {
  _has_bits_[0] |= 0x00020000u;
  rearcamblockage_ = value;
}
inline void HealthVector::set_rearcamblockage(bool value) {
  _internal_set_rearcamblockage(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.rearCamBlockage)
}

// optional bool leftCamBlockage = 1525;
inline bool HealthVector::_internal_has_leftcamblockage() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool HealthVector::has_leftcamblockage() const {
  return _internal_has_leftcamblockage();
}
inline void HealthVector::clear_leftcamblockage() {
  leftcamblockage_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool HealthVector::_internal_leftcamblockage() const {
  return leftcamblockage_;
}
inline bool HealthVector::leftcamblockage() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.leftCamBlockage)
  return _internal_leftcamblockage();
}
inline void HealthVector::_internal_set_leftcamblockage(bool value) {
  _has_bits_[0] |= 0x00040000u;
  leftcamblockage_ = value;
}
inline void HealthVector::set_leftcamblockage(bool value) {
  _internal_set_leftcamblockage(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.leftCamBlockage)
}

// optional bool rightCamBlockage = 3078;
inline bool HealthVector::_internal_has_rightcamblockage() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool HealthVector::has_rightcamblockage() const {
  return _internal_has_rightcamblockage();
}
inline void HealthVector::clear_rightcamblockage() {
  rightcamblockage_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool HealthVector::_internal_rightcamblockage() const {
  return rightcamblockage_;
}
inline bool HealthVector::rightcamblockage() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.rightCamBlockage)
  return _internal_rightcamblockage();
}
inline void HealthVector::_internal_set_rightcamblockage(bool value) {
  _has_bits_[0] |= 0x00080000u;
  rightcamblockage_ = value;
}
inline void HealthVector::set_rightcamblockage(bool value) {
  _internal_set_rightcamblockage(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.rightCamBlockage)
}

// optional bool frontUltrasonicsUnreliable = 1168;
inline bool HealthVector::_internal_has_frontultrasonicsunreliable() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool HealthVector::has_frontultrasonicsunreliable() const {
  return _internal_has_frontultrasonicsunreliable();
}
inline void HealthVector::clear_frontultrasonicsunreliable() {
  frontultrasonicsunreliable_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool HealthVector::_internal_frontultrasonicsunreliable() const {
  return frontultrasonicsunreliable_;
}
inline bool HealthVector::frontultrasonicsunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.frontUltrasonicsUnreliable)
  return _internal_frontultrasonicsunreliable();
}
inline void HealthVector::_internal_set_frontultrasonicsunreliable(bool value) {
  _has_bits_[0] |= 0x00100000u;
  frontultrasonicsunreliable_ = value;
}
inline void HealthVector::set_frontultrasonicsunreliable(bool value) {
  _internal_set_frontultrasonicsunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.frontUltrasonicsUnreliable)
}

// optional bool rearUltrasonicsUnreliable = 400;
inline bool HealthVector::_internal_has_rearultrasonicsunreliable() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool HealthVector::has_rearultrasonicsunreliable() const {
  return _internal_has_rearultrasonicsunreliable();
}
inline void HealthVector::clear_rearultrasonicsunreliable() {
  rearultrasonicsunreliable_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool HealthVector::_internal_rearultrasonicsunreliable() const {
  return rearultrasonicsunreliable_;
}
inline bool HealthVector::rearultrasonicsunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.rearUltrasonicsUnreliable)
  return _internal_rearultrasonicsunreliable();
}
inline void HealthVector::_internal_set_rearultrasonicsunreliable(bool value) {
  _has_bits_[0] |= 0x00200000u;
  rearultrasonicsunreliable_ = value;
}
inline void HealthVector::set_rearultrasonicsunreliable(bool value) {
  _internal_set_rearultrasonicsunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.rearUltrasonicsUnreliable)
}

// optional bool envModelStaticObjsUnreliable = 3532;
inline bool HealthVector::_internal_has_envmodelstaticobjsunreliable() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool HealthVector::has_envmodelstaticobjsunreliable() const {
  return _internal_has_envmodelstaticobjsunreliable();
}
inline void HealthVector::clear_envmodelstaticobjsunreliable() {
  envmodelstaticobjsunreliable_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool HealthVector::_internal_envmodelstaticobjsunreliable() const {
  return envmodelstaticobjsunreliable_;
}
inline bool HealthVector::envmodelstaticobjsunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.envModelStaticObjsUnreliable)
  return _internal_envmodelstaticobjsunreliable();
}
inline void HealthVector::_internal_set_envmodelstaticobjsunreliable(bool value) {
  _has_bits_[0] |= 0x00400000u;
  envmodelstaticobjsunreliable_ = value;
}
inline void HealthVector::set_envmodelstaticobjsunreliable(bool value) {
  _internal_set_envmodelstaticobjsunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.envModelStaticObjsUnreliable)
}

// optional bool envModelTrafficParticiapantsUnreliable = 3438;
inline bool HealthVector::_internal_has_envmodeltrafficparticiapantsunreliable() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool HealthVector::has_envmodeltrafficparticiapantsunreliable() const {
  return _internal_has_envmodeltrafficparticiapantsunreliable();
}
inline void HealthVector::clear_envmodeltrafficparticiapantsunreliable() {
  envmodeltrafficparticiapantsunreliable_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool HealthVector::_internal_envmodeltrafficparticiapantsunreliable() const {
  return envmodeltrafficparticiapantsunreliable_;
}
inline bool HealthVector::envmodeltrafficparticiapantsunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.envModelTrafficParticiapantsUnreliable)
  return _internal_envmodeltrafficparticiapantsunreliable();
}
inline void HealthVector::_internal_set_envmodeltrafficparticiapantsunreliable(bool value) {
  _has_bits_[0] |= 0x00800000u;
  envmodeltrafficparticiapantsunreliable_ = value;
}
inline void HealthVector::set_envmodeltrafficparticiapantsunreliable(bool value) {
  _internal_set_envmodeltrafficparticiapantsunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.envModelTrafficParticiapantsUnreliable)
}

// optional bool envModelParkingFeaturesUnreliable = 1973;
inline bool HealthVector::_internal_has_envmodelparkingfeaturesunreliable() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool HealthVector::has_envmodelparkingfeaturesunreliable() const {
  return _internal_has_envmodelparkingfeaturesunreliable();
}
inline void HealthVector::clear_envmodelparkingfeaturesunreliable() {
  envmodelparkingfeaturesunreliable_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool HealthVector::_internal_envmodelparkingfeaturesunreliable() const {
  return envmodelparkingfeaturesunreliable_;
}
inline bool HealthVector::envmodelparkingfeaturesunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.envModelParkingFeaturesUnreliable)
  return _internal_envmodelparkingfeaturesunreliable();
}
inline void HealthVector::_internal_set_envmodelparkingfeaturesunreliable(bool value) {
  _has_bits_[0] |= 0x01000000u;
  envmodelparkingfeaturesunreliable_ = value;
}
inline void HealthVector::set_envmodelparkingfeaturesunreliable(bool value) {
  _internal_set_envmodelparkingfeaturesunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.envModelParkingFeaturesUnreliable)
}

// optional bool localizationUnreliable = 580;
inline bool HealthVector::_internal_has_localizationunreliable() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool HealthVector::has_localizationunreliable() const {
  return _internal_has_localizationunreliable();
}
inline void HealthVector::clear_localizationunreliable() {
  localizationunreliable_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool HealthVector::_internal_localizationunreliable() const {
  return localizationunreliable_;
}
inline bool HealthVector::localizationunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.localizationUnreliable)
  return _internal_localizationunreliable();
}
inline void HealthVector::_internal_set_localizationunreliable(bool value) {
  _has_bits_[0] |= 0x02000000u;
  localizationunreliable_ = value;
}
inline void HealthVector::set_localizationunreliable(bool value) {
  _internal_set_localizationunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.localizationUnreliable)
}

// optional bool pdwUnreliable = 4076;
inline bool HealthVector::_internal_has_pdwunreliable() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool HealthVector::has_pdwunreliable() const {
  return _internal_has_pdwunreliable();
}
inline void HealthVector::clear_pdwunreliable() {
  pdwunreliable_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool HealthVector::_internal_pdwunreliable() const {
  return pdwunreliable_;
}
inline bool HealthVector::pdwunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.pdwUnreliable)
  return _internal_pdwunreliable();
}
inline void HealthVector::_internal_set_pdwunreliable(bool value) {
  _has_bits_[0] |= 0x04000000u;
  pdwunreliable_ = value;
}
inline void HealthVector::set_pdwunreliable(bool value) {
  _internal_set_pdwunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.pdwUnreliable)
}

// optional bool lscaUnreliable = 2649;
inline bool HealthVector::_internal_has_lscaunreliable() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HealthVector::has_lscaunreliable() const {
  return _internal_has_lscaunreliable();
}
inline void HealthVector::clear_lscaunreliable() {
  lscaunreliable_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool HealthVector::_internal_lscaunreliable() const {
  return lscaunreliable_;
}
inline bool HealthVector::lscaunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.lscaUnreliable)
  return _internal_lscaunreliable();
}
inline void HealthVector::_internal_set_lscaunreliable(bool value) {
  _has_bits_[0] |= 0x00000080u;
  lscaunreliable_ = value;
}
inline void HealthVector::set_lscaunreliable(bool value) {
  _internal_set_lscaunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.lscaUnreliable)
}

// optional bool aupUnreliable = 419;
inline bool HealthVector::_internal_has_aupunreliable() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HealthVector::has_aupunreliable() const {
  return _internal_has_aupunreliable();
}
inline void HealthVector::clear_aupunreliable() {
  aupunreliable_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool HealthVector::_internal_aupunreliable() const {
  return aupunreliable_;
}
inline bool HealthVector::aupunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.aupUnreliable)
  return _internal_aupunreliable();
}
inline void HealthVector::_internal_set_aupunreliable(bool value) {
  _has_bits_[0] |= 0x00000100u;
  aupunreliable_ = value;
}
inline void HealthVector::set_aupunreliable(bool value) {
  _internal_set_aupunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.aupUnreliable)
}

// optional bool raUnreliable = 228;
inline bool HealthVector::_internal_has_raunreliable() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool HealthVector::has_raunreliable() const {
  return _internal_has_raunreliable();
}
inline void HealthVector::clear_raunreliable() {
  raunreliable_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool HealthVector::_internal_raunreliable() const {
  return raunreliable_;
}
inline bool HealthVector::raunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.raUnreliable)
  return _internal_raunreliable();
}
inline void HealthVector::_internal_set_raunreliable(bool value) {
  _has_bits_[0] |= 0x00000200u;
  raunreliable_ = value;
}
inline void HealthVector::set_raunreliable(bool value) {
  _internal_set_raunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.raUnreliable)
}

// optional bool hvUnreliable = 1654;
inline bool HealthVector::_internal_has_hvunreliable() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool HealthVector::has_hvunreliable() const {
  return _internal_has_hvunreliable();
}
inline void HealthVector::clear_hvunreliable() {
  hvunreliable_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool HealthVector::_internal_hvunreliable() const {
  return hvunreliable_;
}
inline bool HealthVector::hvunreliable() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.hvUnreliable)
  return _internal_hvunreliable();
}
inline void HealthVector::_internal_set_hvunreliable(bool value) {
  _has_bits_[0] |= 0x00000400u;
  hvunreliable_ = value;
}
inline void HealthVector::set_hvunreliable(bool value) {
  _internal_set_hvunreliable(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.hvUnreliable)
}

// optional bool avgaFailed = 2767;
inline bool HealthVector::_internal_has_avgafailed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HealthVector::has_avgafailed() const {
  return _internal_has_avgafailed();
}
inline void HealthVector::clear_avgafailed() {
  avgafailed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool HealthVector::_internal_avgafailed() const {
  return avgafailed_;
}
inline bool HealthVector::avgafailed() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.avgaFailed)
  return _internal_avgafailed();
}
inline void HealthVector::_internal_set_avgafailed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  avgafailed_ = value;
}
inline void HealthVector::set_avgafailed(bool value) {
  _internal_set_avgafailed(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.avgaFailed)
}

// optional bool mfManagerFailed = 318;
inline bool HealthVector::_internal_has_mfmanagerfailed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HealthVector::has_mfmanagerfailed() const {
  return _internal_has_mfmanagerfailed();
}
inline void HealthVector::clear_mfmanagerfailed() {
  mfmanagerfailed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool HealthVector::_internal_mfmanagerfailed() const {
  return mfmanagerfailed_;
}
inline bool HealthVector::mfmanagerfailed() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.mfManagerFailed)
  return _internal_mfmanagerfailed();
}
inline void HealthVector::_internal_set_mfmanagerfailed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mfmanagerfailed_ = value;
}
inline void HealthVector::set_mfmanagerfailed(bool value) {
  _internal_set_mfmanagerfailed(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.mfManagerFailed)
}

// optional bool mocoFailed = 374;
inline bool HealthVector::_internal_has_mocofailed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HealthVector::has_mocofailed() const {
  return _internal_has_mocofailed();
}
inline void HealthVector::clear_mocofailed() {
  mocofailed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool HealthVector::_internal_mocofailed() const {
  return mocofailed_;
}
inline bool HealthVector::mocofailed() const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector.mocoFailed)
  return _internal_mocofailed();
}
inline void HealthVector::_internal_set_mocofailed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  mocofailed_ = value;
}
inline void HealthVector::set_mocofailed(bool value) {
  _internal_set_mocofailed(value);
  // @@protoc_insertion_point(field_set:pb.hpsd.health_vector.HealthVector.mocoFailed)
}

// -------------------------------------------------------------------

// HealthVector_array_port

// repeated .pb.hpsd.health_vector.HealthVector data = 3166;
inline int HealthVector_array_port::_internal_data_size() const {
  return data_.size();
}
inline int HealthVector_array_port::data_size() const {
  return _internal_data_size();
}
inline void HealthVector_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::hpsd::health_vector::HealthVector* HealthVector_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.hpsd.health_vector.HealthVector_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::hpsd::health_vector::HealthVector >*
HealthVector_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.hpsd.health_vector.HealthVector_array_port.data)
  return &data_;
}
inline const ::pb::hpsd::health_vector::HealthVector& HealthVector_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::hpsd::health_vector::HealthVector& HealthVector_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.hpsd.health_vector.HealthVector_array_port.data)
  return _internal_data(index);
}
inline ::pb::hpsd::health_vector::HealthVector* HealthVector_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::hpsd::health_vector::HealthVector* HealthVector_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.hpsd.health_vector.HealthVector_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::hpsd::health_vector::HealthVector >&
HealthVector_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.hpsd.health_vector.HealthVector_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace health_vector
}  // namespace hpsd
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hpsd_2fhealth_5fvector_2eproto
