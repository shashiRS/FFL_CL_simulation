// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_commonvehsigprovider/gpsdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5fcommonvehsigprovider_2fgpsdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5fcommonvehsigprovider_2fgpsdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ap_commonvehsigprovider/hemisphere.pb.h"
#include "ap_commonvehsigprovider/gps_receiver_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5fcommonvehsigprovider_2fgpsdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5fcommonvehsigprovider_2fgpsdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto;
namespace pb {
namespace ap_commonvehsigprovider {
namespace gpsdata {
class GPSData;
class GPSDataDefaultTypeInternal;
extern GPSDataDefaultTypeInternal _GPSData_default_instance_;
class GPSData_array_port;
class GPSData_array_portDefaultTypeInternal;
extern GPSData_array_portDefaultTypeInternal _GPSData_array_port_default_instance_;
}  // namespace gpsdata
}  // namespace ap_commonvehsigprovider
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_commonvehsigprovider::gpsdata::GPSData* Arena::CreateMaybeMessage<::pb::ap_commonvehsigprovider::gpsdata::GPSData>(Arena*);
template<> ::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port* Arena::CreateMaybeMessage<::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_commonvehsigprovider {
namespace gpsdata {

// ===================================================================

class GPSData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_commonvehsigprovider.gpsdata.GPSData) */ {
 public:
  GPSData();
  virtual ~GPSData();

  GPSData(const GPSData& from);
  GPSData(GPSData&& from) noexcept
    : GPSData() {
    *this = ::std::move(from);
  }

  inline GPSData& operator=(const GPSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSData& operator=(GPSData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSData* internal_default_instance() {
    return reinterpret_cast<const GPSData*>(
               &_GPSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GPSData& a, GPSData& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSData* New() const final {
    return CreateMaybeMessage<GPSData>(nullptr);
  }

  GPSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSData& from);
  void MergeFrom(const GPSData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_commonvehsigprovider.gpsdata.GPSData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto);
    return ::descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpsNoOfSatellitesFieldNumber = 150,
    kGpsLatitudeMmFieldNumber = 372,
    kGpsDateDayDdFieldNumber = 888,
    kGpsLatitudeDdFieldNumber = 988,
    kPositionDOPFieldNumber = 1296,
    kReceiverStatusNuFieldNumber = 1746,
    kGeometricDOPFieldNumber = 1852,
    kGpsUtcTimeHhFieldNumber = 1997,
    kGpsUtcTimeMmFieldNumber = 2205,
    kHorizontalDOPFieldNumber = 2228,
    kVerticalDOPFieldNumber = 2405,
    kGpsLongitudeMmFieldNumber = 2431,
    kGpsLongitudeHemisphereNuFieldNumber = 2584,
    kGpsLatitudeHemisphereNuFieldNumber = 2771,
    kGpsUtcTimeSsFieldNumber = 2846,
    kGpsDateMonthMmFieldNumber = 2956,
    kGpsCourseOverGroundFieldNumber = 3016,
    kGpsSpeedMpsFieldNumber = 3099,
    kTimeDOPFieldNumber = 3380,
    kGpsR32SpeedOverGroundMpsFieldNumber = 3433,
    kGpsDateYearYyFieldNumber = 3461,
    kGpsAntennaHeightMFieldNumber = 3471,
    kGpsFixFieldNumber = 3565,
    kGpsLongitudeDdFieldNumber = 3717,
  };
  // optional uint32 gpsNoOfSatellites = 150;
  bool has_gpsnoofsatellites() const;
  private:
  bool _internal_has_gpsnoofsatellites() const;
  public:
  void clear_gpsnoofsatellites();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsnoofsatellites() const;
  void set_gpsnoofsatellites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsnoofsatellites() const;
  void _internal_set_gpsnoofsatellites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float gpsLatitude_mm = 372;
  bool has_gpslatitude_mm() const;
  private:
  bool _internal_has_gpslatitude_mm() const;
  public:
  void clear_gpslatitude_mm();
  float gpslatitude_mm() const;
  void set_gpslatitude_mm(float value);
  private:
  float _internal_gpslatitude_mm() const;
  void _internal_set_gpslatitude_mm(float value);
  public:

  // optional uint32 gpsDateDay_dd = 888;
  bool has_gpsdateday_dd() const;
  private:
  bool _internal_has_gpsdateday_dd() const;
  public:
  void clear_gpsdateday_dd();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsdateday_dd() const;
  void set_gpsdateday_dd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsdateday_dd() const;
  void _internal_set_gpsdateday_dd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 gpsLatitude_dd = 988;
  bool has_gpslatitude_dd() const;
  private:
  bool _internal_has_gpslatitude_dd() const;
  public:
  void clear_gpslatitude_dd();
  ::PROTOBUF_NAMESPACE_ID::int32 gpslatitude_dd() const;
  void set_gpslatitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpslatitude_dd() const;
  void _internal_set_gpslatitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float positionDOP = 1296;
  bool has_positiondop() const;
  private:
  bool _internal_has_positiondop() const;
  public:
  void clear_positiondop();
  float positiondop() const;
  void set_positiondop(float value);
  private:
  float _internal_positiondop() const;
  void _internal_set_positiondop(float value);
  public:

  // optional .pb.ap_commonvehsigprovider.gps_receiver_status.GpsReceiverStatus ReceiverStatus_nu = 1746;
  bool has_receiverstatus_nu() const;
  private:
  bool _internal_has_receiverstatus_nu() const;
  public:
  void clear_receiverstatus_nu();
  ::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus receiverstatus_nu() const;
  void set_receiverstatus_nu(::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus value);
  private:
  ::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus _internal_receiverstatus_nu() const;
  void _internal_set_receiverstatus_nu(::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus value);
  public:

  // optional float geometricDOP = 1852;
  bool has_geometricdop() const;
  private:
  bool _internal_has_geometricdop() const;
  public:
  void clear_geometricdop();
  float geometricdop() const;
  void set_geometricdop(float value);
  private:
  float _internal_geometricdop() const;
  void _internal_set_geometricdop(float value);
  public:

  // optional uint32 gpsUtcTime_hh = 1997;
  bool has_gpsutctime_hh() const;
  private:
  bool _internal_has_gpsutctime_hh() const;
  public:
  void clear_gpsutctime_hh();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsutctime_hh() const;
  void set_gpsutctime_hh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsutctime_hh() const;
  void _internal_set_gpsutctime_hh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gpsUtcTime_mm = 2205;
  bool has_gpsutctime_mm() const;
  private:
  bool _internal_has_gpsutctime_mm() const;
  public:
  void clear_gpsutctime_mm();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsutctime_mm() const;
  void set_gpsutctime_mm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsutctime_mm() const;
  void _internal_set_gpsutctime_mm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float horizontalDOP = 2228;
  bool has_horizontaldop() const;
  private:
  bool _internal_has_horizontaldop() const;
  public:
  void clear_horizontaldop();
  float horizontaldop() const;
  void set_horizontaldop(float value);
  private:
  float _internal_horizontaldop() const;
  void _internal_set_horizontaldop(float value);
  public:

  // optional float verticalDOP = 2405;
  bool has_verticaldop() const;
  private:
  bool _internal_has_verticaldop() const;
  public:
  void clear_verticaldop();
  float verticaldop() const;
  void set_verticaldop(float value);
  private:
  float _internal_verticaldop() const;
  void _internal_set_verticaldop(float value);
  public:

  // optional float gpsLongitude_mm = 2431;
  bool has_gpslongitude_mm() const;
  private:
  bool _internal_has_gpslongitude_mm() const;
  public:
  void clear_gpslongitude_mm();
  float gpslongitude_mm() const;
  void set_gpslongitude_mm(float value);
  private:
  float _internal_gpslongitude_mm() const;
  void _internal_set_gpslongitude_mm(float value);
  public:

  // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLongitudeHemisphere_nu = 2584;
  bool has_gpslongitudehemisphere_nu() const;
  private:
  bool _internal_has_gpslongitudehemisphere_nu() const;
  public:
  void clear_gpslongitudehemisphere_nu();
  ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere gpslongitudehemisphere_nu() const;
  void set_gpslongitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value);
  private:
  ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere _internal_gpslongitudehemisphere_nu() const;
  void _internal_set_gpslongitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value);
  public:

  // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLatitudeHemisphere_nu = 2771;
  bool has_gpslatitudehemisphere_nu() const;
  private:
  bool _internal_has_gpslatitudehemisphere_nu() const;
  public:
  void clear_gpslatitudehemisphere_nu();
  ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere gpslatitudehemisphere_nu() const;
  void set_gpslatitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value);
  private:
  ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere _internal_gpslatitudehemisphere_nu() const;
  void _internal_set_gpslatitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value);
  public:

  // optional uint32 gpsUtcTime_ss = 2846;
  bool has_gpsutctime_ss() const;
  private:
  bool _internal_has_gpsutctime_ss() const;
  public:
  void clear_gpsutctime_ss();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsutctime_ss() const;
  void set_gpsutctime_ss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsutctime_ss() const;
  void _internal_set_gpsutctime_ss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gpsDateMonth_mm = 2956;
  bool has_gpsdatemonth_mm() const;
  private:
  bool _internal_has_gpsdatemonth_mm() const;
  public:
  void clear_gpsdatemonth_mm();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsdatemonth_mm() const;
  void set_gpsdatemonth_mm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsdatemonth_mm() const;
  void _internal_set_gpsdatemonth_mm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float gpsCourseOverGround = 3016;
  bool has_gpscourseoverground() const;
  private:
  bool _internal_has_gpscourseoverground() const;
  public:
  void clear_gpscourseoverground();
  float gpscourseoverground() const;
  void set_gpscourseoverground(float value);
  private:
  float _internal_gpscourseoverground() const;
  void _internal_set_gpscourseoverground(float value);
  public:

  // optional float gpsSpeed_mps = 3099;
  bool has_gpsspeed_mps() const;
  private:
  bool _internal_has_gpsspeed_mps() const;
  public:
  void clear_gpsspeed_mps();
  float gpsspeed_mps() const;
  void set_gpsspeed_mps(float value);
  private:
  float _internal_gpsspeed_mps() const;
  void _internal_set_gpsspeed_mps(float value);
  public:

  // optional float timeDOP = 3380;
  bool has_timedop() const;
  private:
  bool _internal_has_timedop() const;
  public:
  void clear_timedop();
  float timedop() const;
  void set_timedop(float value);
  private:
  float _internal_timedop() const;
  void _internal_set_timedop(float value);
  public:

  // optional float gpsR32SpeedOverGround_mps = 3433;
  bool has_gpsr32speedoverground_mps() const;
  private:
  bool _internal_has_gpsr32speedoverground_mps() const;
  public:
  void clear_gpsr32speedoverground_mps();
  float gpsr32speedoverground_mps() const;
  void set_gpsr32speedoverground_mps(float value);
  private:
  float _internal_gpsr32speedoverground_mps() const;
  void _internal_set_gpsr32speedoverground_mps(float value);
  public:

  // optional uint32 gpsDateYear_yy = 3461;
  bool has_gpsdateyear_yy() const;
  private:
  bool _internal_has_gpsdateyear_yy() const;
  public:
  void clear_gpsdateyear_yy();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsdateyear_yy() const;
  void set_gpsdateyear_yy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsdateyear_yy() const;
  void _internal_set_gpsdateyear_yy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float gpsAntennaHeight_m = 3471;
  bool has_gpsantennaheight_m() const;
  private:
  bool _internal_has_gpsantennaheight_m() const;
  public:
  void clear_gpsantennaheight_m();
  float gpsantennaheight_m() const;
  void set_gpsantennaheight_m(float value);
  private:
  float _internal_gpsantennaheight_m() const;
  void _internal_set_gpsantennaheight_m(float value);
  public:

  // optional uint32 gpsFix = 3565;
  bool has_gpsfix() const;
  private:
  bool _internal_has_gpsfix() const;
  public:
  void clear_gpsfix();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsfix() const;
  void set_gpsfix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsfix() const;
  void _internal_set_gpsfix(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 gpsLongitude_dd = 3717;
  bool has_gpslongitude_dd() const;
  private:
  bool _internal_has_gpslongitude_dd() const;
  public:
  void clear_gpslongitude_dd();
  ::PROTOBUF_NAMESPACE_ID::int32 gpslongitude_dd() const;
  void set_gpslongitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpslongitude_dd() const;
  void _internal_set_gpslongitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_commonvehsigprovider.gpsdata.GPSData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsnoofsatellites_;
  float gpslatitude_mm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsdateday_dd_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpslatitude_dd_;
  float positiondop_;
  int receiverstatus_nu_;
  float geometricdop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsutctime_hh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsutctime_mm_;
  float horizontaldop_;
  float verticaldop_;
  float gpslongitude_mm_;
  int gpslongitudehemisphere_nu_;
  int gpslatitudehemisphere_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsutctime_ss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsdatemonth_mm_;
  float gpscourseoverground_;
  float gpsspeed_mps_;
  float timedop_;
  float gpsr32speedoverground_mps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsdateyear_yy_;
  float gpsantennaheight_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsfix_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpslongitude_dd_;
  friend struct ::TableStruct_ap_5fcommonvehsigprovider_2fgpsdata_2eproto;
};
// -------------------------------------------------------------------

class GPSData_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port) */ {
 public:
  GPSData_array_port();
  virtual ~GPSData_array_port();

  GPSData_array_port(const GPSData_array_port& from);
  GPSData_array_port(GPSData_array_port&& from) noexcept
    : GPSData_array_port() {
    *this = ::std::move(from);
  }

  inline GPSData_array_port& operator=(const GPSData_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSData_array_port& operator=(GPSData_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSData_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSData_array_port* internal_default_instance() {
    return reinterpret_cast<const GPSData_array_port*>(
               &_GPSData_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GPSData_array_port& a, GPSData_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSData_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSData_array_port* New() const final {
    return CreateMaybeMessage<GPSData_array_port>(nullptr);
  }

  GPSData_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSData_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSData_array_port& from);
  void MergeFrom(const GPSData_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSData_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto);
    return ::descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2037,
  };
  // repeated .pb.ap_commonvehsigprovider.gpsdata.GPSData data = 2037;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::gpsdata::GPSData >*
      mutable_data();
  private:
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& _internal_data(int index) const;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* _internal_add_data();
  public:
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& data(int index) const;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::gpsdata::GPSData >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::gpsdata::GPSData > data_;
  friend struct ::TableStruct_ap_5fcommonvehsigprovider_2fgpsdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GPSData

// optional float gpsAntennaHeight_m = 3471;
inline bool GPSData::_internal_has_gpsantennaheight_m() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool GPSData::has_gpsantennaheight_m() const {
  return _internal_has_gpsantennaheight_m();
}
inline void GPSData::clear_gpsantennaheight_m() {
  gpsantennaheight_m_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float GPSData::_internal_gpsantennaheight_m() const {
  return gpsantennaheight_m_;
}
inline float GPSData::gpsantennaheight_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsAntennaHeight_m)
  return _internal_gpsantennaheight_m();
}
inline void GPSData::_internal_set_gpsantennaheight_m(float value) {
  _has_bits_[0] |= 0x00200000u;
  gpsantennaheight_m_ = value;
}
inline void GPSData::set_gpsantennaheight_m(float value) {
  _internal_set_gpsantennaheight_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsAntennaHeight_m)
}

// optional sint32 gpsLatitude_dd = 988;
inline bool GPSData::_internal_has_gpslatitude_dd() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GPSData::has_gpslatitude_dd() const {
  return _internal_has_gpslatitude_dd();
}
inline void GPSData::clear_gpslatitude_dd() {
  gpslatitude_dd_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSData::_internal_gpslatitude_dd() const {
  return gpslatitude_dd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSData::gpslatitude_dd() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLatitude_dd)
  return _internal_gpslatitude_dd();
}
inline void GPSData::_internal_set_gpslatitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gpslatitude_dd_ = value;
}
inline void GPSData::set_gpslatitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpslatitude_dd(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLatitude_dd)
}

// optional float gpsLatitude_mm = 372;
inline bool GPSData::_internal_has_gpslatitude_mm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GPSData::has_gpslatitude_mm() const {
  return _internal_has_gpslatitude_mm();
}
inline void GPSData::clear_gpslatitude_mm() {
  gpslatitude_mm_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float GPSData::_internal_gpslatitude_mm() const {
  return gpslatitude_mm_;
}
inline float GPSData::gpslatitude_mm() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLatitude_mm)
  return _internal_gpslatitude_mm();
}
inline void GPSData::_internal_set_gpslatitude_mm(float value) {
  _has_bits_[0] |= 0x00000002u;
  gpslatitude_mm_ = value;
}
inline void GPSData::set_gpslatitude_mm(float value) {
  _internal_set_gpslatitude_mm(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLatitude_mm)
}

// optional sint32 gpsLongitude_dd = 3717;
inline bool GPSData::_internal_has_gpslongitude_dd() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool GPSData::has_gpslongitude_dd() const {
  return _internal_has_gpslongitude_dd();
}
inline void GPSData::clear_gpslongitude_dd() {
  gpslongitude_dd_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSData::_internal_gpslongitude_dd() const {
  return gpslongitude_dd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GPSData::gpslongitude_dd() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLongitude_dd)
  return _internal_gpslongitude_dd();
}
inline void GPSData::_internal_set_gpslongitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  gpslongitude_dd_ = value;
}
inline void GPSData::set_gpslongitude_dd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpslongitude_dd(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLongitude_dd)
}

// optional float gpsLongitude_mm = 2431;
inline bool GPSData::_internal_has_gpslongitude_mm() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GPSData::has_gpslongitude_mm() const {
  return _internal_has_gpslongitude_mm();
}
inline void GPSData::clear_gpslongitude_mm() {
  gpslongitude_mm_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float GPSData::_internal_gpslongitude_mm() const {
  return gpslongitude_mm_;
}
inline float GPSData::gpslongitude_mm() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLongitude_mm)
  return _internal_gpslongitude_mm();
}
inline void GPSData::_internal_set_gpslongitude_mm(float value) {
  _has_bits_[0] |= 0x00000800u;
  gpslongitude_mm_ = value;
}
inline void GPSData::set_gpslongitude_mm(float value) {
  _internal_set_gpslongitude_mm(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLongitude_mm)
}

// optional float gpsSpeed_mps = 3099;
inline bool GPSData::_internal_has_gpsspeed_mps() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool GPSData::has_gpsspeed_mps() const {
  return _internal_has_gpsspeed_mps();
}
inline void GPSData::clear_gpsspeed_mps() {
  gpsspeed_mps_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float GPSData::_internal_gpsspeed_mps() const {
  return gpsspeed_mps_;
}
inline float GPSData::gpsspeed_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsSpeed_mps)
  return _internal_gpsspeed_mps();
}
inline void GPSData::_internal_set_gpsspeed_mps(float value) {
  _has_bits_[0] |= 0x00020000u;
  gpsspeed_mps_ = value;
}
inline void GPSData::set_gpsspeed_mps(float value) {
  _internal_set_gpsspeed_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsSpeed_mps)
}

// optional float gpsR32SpeedOverGround_mps = 3433;
inline bool GPSData::_internal_has_gpsr32speedoverground_mps() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool GPSData::has_gpsr32speedoverground_mps() const {
  return _internal_has_gpsr32speedoverground_mps();
}
inline void GPSData::clear_gpsr32speedoverground_mps() {
  gpsr32speedoverground_mps_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float GPSData::_internal_gpsr32speedoverground_mps() const {
  return gpsr32speedoverground_mps_;
}
inline float GPSData::gpsr32speedoverground_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsR32SpeedOverGround_mps)
  return _internal_gpsr32speedoverground_mps();
}
inline void GPSData::_internal_set_gpsr32speedoverground_mps(float value) {
  _has_bits_[0] |= 0x00080000u;
  gpsr32speedoverground_mps_ = value;
}
inline void GPSData::set_gpsr32speedoverground_mps(float value) {
  _internal_set_gpsr32speedoverground_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsR32SpeedOverGround_mps)
}

// optional float gpsCourseOverGround = 3016;
inline bool GPSData::_internal_has_gpscourseoverground() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool GPSData::has_gpscourseoverground() const {
  return _internal_has_gpscourseoverground();
}
inline void GPSData::clear_gpscourseoverground() {
  gpscourseoverground_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float GPSData::_internal_gpscourseoverground() const {
  return gpscourseoverground_;
}
inline float GPSData::gpscourseoverground() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsCourseOverGround)
  return _internal_gpscourseoverground();
}
inline void GPSData::_internal_set_gpscourseoverground(float value) {
  _has_bits_[0] |= 0x00010000u;
  gpscourseoverground_ = value;
}
inline void GPSData::set_gpscourseoverground(float value) {
  _internal_set_gpscourseoverground(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsCourseOverGround)
}

// optional float verticalDOP = 2405;
inline bool GPSData::_internal_has_verticaldop() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GPSData::has_verticaldop() const {
  return _internal_has_verticaldop();
}
inline void GPSData::clear_verticaldop() {
  verticaldop_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float GPSData::_internal_verticaldop() const {
  return verticaldop_;
}
inline float GPSData::verticaldop() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.verticalDOP)
  return _internal_verticaldop();
}
inline void GPSData::_internal_set_verticaldop(float value) {
  _has_bits_[0] |= 0x00000400u;
  verticaldop_ = value;
}
inline void GPSData::set_verticaldop(float value) {
  _internal_set_verticaldop(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.verticalDOP)
}

// optional float horizontalDOP = 2228;
inline bool GPSData::_internal_has_horizontaldop() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GPSData::has_horizontaldop() const {
  return _internal_has_horizontaldop();
}
inline void GPSData::clear_horizontaldop() {
  horizontaldop_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float GPSData::_internal_horizontaldop() const {
  return horizontaldop_;
}
inline float GPSData::horizontaldop() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.horizontalDOP)
  return _internal_horizontaldop();
}
inline void GPSData::_internal_set_horizontaldop(float value) {
  _has_bits_[0] |= 0x00000200u;
  horizontaldop_ = value;
}
inline void GPSData::set_horizontaldop(float value) {
  _internal_set_horizontaldop(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.horizontalDOP)
}

// optional float timeDOP = 3380;
inline bool GPSData::_internal_has_timedop() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool GPSData::has_timedop() const {
  return _internal_has_timedop();
}
inline void GPSData::clear_timedop() {
  timedop_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float GPSData::_internal_timedop() const {
  return timedop_;
}
inline float GPSData::timedop() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.timeDOP)
  return _internal_timedop();
}
inline void GPSData::_internal_set_timedop(float value) {
  _has_bits_[0] |= 0x00040000u;
  timedop_ = value;
}
inline void GPSData::set_timedop(float value) {
  _internal_set_timedop(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.timeDOP)
}

// optional float geometricDOP = 1852;
inline bool GPSData::_internal_has_geometricdop() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GPSData::has_geometricdop() const {
  return _internal_has_geometricdop();
}
inline void GPSData::clear_geometricdop() {
  geometricdop_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float GPSData::_internal_geometricdop() const {
  return geometricdop_;
}
inline float GPSData::geometricdop() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.geometricDOP)
  return _internal_geometricdop();
}
inline void GPSData::_internal_set_geometricdop(float value) {
  _has_bits_[0] |= 0x00000040u;
  geometricdop_ = value;
}
inline void GPSData::set_geometricdop(float value) {
  _internal_set_geometricdop(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.geometricDOP)
}

// optional float positionDOP = 1296;
inline bool GPSData::_internal_has_positiondop() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GPSData::has_positiondop() const {
  return _internal_has_positiondop();
}
inline void GPSData::clear_positiondop() {
  positiondop_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float GPSData::_internal_positiondop() const {
  return positiondop_;
}
inline float GPSData::positiondop() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.positionDOP)
  return _internal_positiondop();
}
inline void GPSData::_internal_set_positiondop(float value) {
  _has_bits_[0] |= 0x00000010u;
  positiondop_ = value;
}
inline void GPSData::set_positiondop(float value) {
  _internal_set_positiondop(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.positionDOP)
}

// optional uint32 gpsUtcTime_hh = 1997;
inline bool GPSData::_internal_has_gpsutctime_hh() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GPSData::has_gpsutctime_hh() const {
  return _internal_has_gpsutctime_hh();
}
inline void GPSData::clear_gpsutctime_hh() {
  gpsutctime_hh_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsutctime_hh() const {
  return gpsutctime_hh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsutctime_hh() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsUtcTime_hh)
  return _internal_gpsutctime_hh();
}
inline void GPSData::_internal_set_gpsutctime_hh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  gpsutctime_hh_ = value;
}
inline void GPSData::set_gpsutctime_hh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsutctime_hh(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsUtcTime_hh)
}

// optional uint32 gpsUtcTime_mm = 2205;
inline bool GPSData::_internal_has_gpsutctime_mm() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GPSData::has_gpsutctime_mm() const {
  return _internal_has_gpsutctime_mm();
}
inline void GPSData::clear_gpsutctime_mm() {
  gpsutctime_mm_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsutctime_mm() const {
  return gpsutctime_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsutctime_mm() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsUtcTime_mm)
  return _internal_gpsutctime_mm();
}
inline void GPSData::_internal_set_gpsutctime_mm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  gpsutctime_mm_ = value;
}
inline void GPSData::set_gpsutctime_mm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsutctime_mm(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsUtcTime_mm)
}

// optional uint32 gpsUtcTime_ss = 2846;
inline bool GPSData::_internal_has_gpsutctime_ss() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool GPSData::has_gpsutctime_ss() const {
  return _internal_has_gpsutctime_ss();
}
inline void GPSData::clear_gpsutctime_ss() {
  gpsutctime_ss_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsutctime_ss() const {
  return gpsutctime_ss_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsutctime_ss() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsUtcTime_ss)
  return _internal_gpsutctime_ss();
}
inline void GPSData::_internal_set_gpsutctime_ss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  gpsutctime_ss_ = value;
}
inline void GPSData::set_gpsutctime_ss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsutctime_ss(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsUtcTime_ss)
}

// optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLatitudeHemisphere_nu = 2771;
inline bool GPSData::_internal_has_gpslatitudehemisphere_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool GPSData::has_gpslatitudehemisphere_nu() const {
  return _internal_has_gpslatitudehemisphere_nu();
}
inline void GPSData::clear_gpslatitudehemisphere_nu() {
  gpslatitudehemisphere_nu_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere GPSData::_internal_gpslatitudehemisphere_nu() const {
  return static_cast< ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere >(gpslatitudehemisphere_nu_);
}
inline ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere GPSData::gpslatitudehemisphere_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLatitudeHemisphere_nu)
  return _internal_gpslatitudehemisphere_nu();
}
inline void GPSData::_internal_set_gpslatitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value) {
  assert(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  gpslatitudehemisphere_nu_ = value;
}
inline void GPSData::set_gpslatitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value) {
  _internal_set_gpslatitudehemisphere_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLatitudeHemisphere_nu)
}

// optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLongitudeHemisphere_nu = 2584;
inline bool GPSData::_internal_has_gpslongitudehemisphere_nu() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool GPSData::has_gpslongitudehemisphere_nu() const {
  return _internal_has_gpslongitudehemisphere_nu();
}
inline void GPSData::clear_gpslongitudehemisphere_nu() {
  gpslongitudehemisphere_nu_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere GPSData::_internal_gpslongitudehemisphere_nu() const {
  return static_cast< ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere >(gpslongitudehemisphere_nu_);
}
inline ::pb::ap_commonvehsigprovider::hemisphere::Hemisphere GPSData::gpslongitudehemisphere_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLongitudeHemisphere_nu)
  return _internal_gpslongitudehemisphere_nu();
}
inline void GPSData::_internal_set_gpslongitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value) {
  assert(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  gpslongitudehemisphere_nu_ = value;
}
inline void GPSData::set_gpslongitudehemisphere_nu(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere value) {
  _internal_set_gpslongitudehemisphere_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsLongitudeHemisphere_nu)
}

// optional uint32 gpsDateDay_dd = 888;
inline bool GPSData::_internal_has_gpsdateday_dd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GPSData::has_gpsdateday_dd() const {
  return _internal_has_gpsdateday_dd();
}
inline void GPSData::clear_gpsdateday_dd() {
  gpsdateday_dd_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsdateday_dd() const {
  return gpsdateday_dd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsdateday_dd() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsDateDay_dd)
  return _internal_gpsdateday_dd();
}
inline void GPSData::_internal_set_gpsdateday_dd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  gpsdateday_dd_ = value;
}
inline void GPSData::set_gpsdateday_dd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsdateday_dd(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsDateDay_dd)
}

// optional uint32 gpsDateMonth_mm = 2956;
inline bool GPSData::_internal_has_gpsdatemonth_mm() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool GPSData::has_gpsdatemonth_mm() const {
  return _internal_has_gpsdatemonth_mm();
}
inline void GPSData::clear_gpsdatemonth_mm() {
  gpsdatemonth_mm_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsdatemonth_mm() const {
  return gpsdatemonth_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsdatemonth_mm() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsDateMonth_mm)
  return _internal_gpsdatemonth_mm();
}
inline void GPSData::_internal_set_gpsdatemonth_mm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  gpsdatemonth_mm_ = value;
}
inline void GPSData::set_gpsdatemonth_mm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsdatemonth_mm(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsDateMonth_mm)
}

// optional uint32 gpsDateYear_yy = 3461;
inline bool GPSData::_internal_has_gpsdateyear_yy() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool GPSData::has_gpsdateyear_yy() const {
  return _internal_has_gpsdateyear_yy();
}
inline void GPSData::clear_gpsdateyear_yy() {
  gpsdateyear_yy_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsdateyear_yy() const {
  return gpsdateyear_yy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsdateyear_yy() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsDateYear_yy)
  return _internal_gpsdateyear_yy();
}
inline void GPSData::_internal_set_gpsdateyear_yy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  gpsdateyear_yy_ = value;
}
inline void GPSData::set_gpsdateyear_yy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsdateyear_yy(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsDateYear_yy)
}

// optional uint32 gpsFix = 3565;
inline bool GPSData::_internal_has_gpsfix() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool GPSData::has_gpsfix() const {
  return _internal_has_gpsfix();
}
inline void GPSData::clear_gpsfix() {
  gpsfix_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsfix() const {
  return gpsfix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsfix() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsFix)
  return _internal_gpsfix();
}
inline void GPSData::_internal_set_gpsfix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  gpsfix_ = value;
}
inline void GPSData::set_gpsfix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsfix(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsFix)
}

// optional uint32 gpsNoOfSatellites = 150;
inline bool GPSData::_internal_has_gpsnoofsatellites() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GPSData::has_gpsnoofsatellites() const {
  return _internal_has_gpsnoofsatellites();
}
inline void GPSData::clear_gpsnoofsatellites() {
  gpsnoofsatellites_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::_internal_gpsnoofsatellites() const {
  return gpsnoofsatellites_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPSData::gpsnoofsatellites() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsNoOfSatellites)
  return _internal_gpsnoofsatellites();
}
inline void GPSData::_internal_set_gpsnoofsatellites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  gpsnoofsatellites_ = value;
}
inline void GPSData::set_gpsnoofsatellites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsnoofsatellites(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.gpsNoOfSatellites)
}

// optional .pb.ap_commonvehsigprovider.gps_receiver_status.GpsReceiverStatus ReceiverStatus_nu = 1746;
inline bool GPSData::_internal_has_receiverstatus_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GPSData::has_receiverstatus_nu() const {
  return _internal_has_receiverstatus_nu();
}
inline void GPSData::clear_receiverstatus_nu() {
  receiverstatus_nu_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus GPSData::_internal_receiverstatus_nu() const {
  return static_cast< ::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus >(receiverstatus_nu_);
}
inline ::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus GPSData::receiverstatus_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData.ReceiverStatus_nu)
  return _internal_receiverstatus_nu();
}
inline void GPSData::_internal_set_receiverstatus_nu(::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus value) {
  assert(::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  receiverstatus_nu_ = value;
}
inline void GPSData::set_receiverstatus_nu(::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus value) {
  _internal_set_receiverstatus_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_commonvehsigprovider.gpsdata.GPSData.ReceiverStatus_nu)
}

// -------------------------------------------------------------------

// GPSData_array_port

// repeated .pb.ap_commonvehsigprovider.gpsdata.GPSData data = 2037;
inline int GPSData_array_port::_internal_data_size() const {
  return data_.size();
}
inline int GPSData_array_port::data_size() const {
  return _internal_data_size();
}
inline void GPSData_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* GPSData_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::gpsdata::GPSData >*
GPSData_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port.data)
  return &data_;
}
inline const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& GPSData_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& GPSData_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* GPSData_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* GPSData_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_commonvehsigprovider::gpsdata::GPSData >&
GPSData_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpsdata
}  // namespace ap_commonvehsigprovider
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5fcommonvehsigprovider_2fgpsdata_2eproto
