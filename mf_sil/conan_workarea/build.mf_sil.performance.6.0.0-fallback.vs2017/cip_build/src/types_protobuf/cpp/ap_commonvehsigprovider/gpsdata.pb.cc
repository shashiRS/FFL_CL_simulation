// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_commonvehsigprovider/gpsdata.proto

#include "ap_commonvehsigprovider/gpsdata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommonvehsigprovider_2fgpsdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto;
namespace pb {
namespace ap_commonvehsigprovider {
namespace gpsdata {
class GPSDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSData> _instance;
} _GPSData_default_instance_;
class GPSData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPSData_array_port> _instance;
} _GPSData_array_port_default_instance_;
}  // namespace gpsdata
}  // namespace ap_commonvehsigprovider
}  // namespace pb
static void InitDefaultsscc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_commonvehsigprovider::gpsdata::_GPSData_default_instance_;
    new (ptr) ::pb::ap_commonvehsigprovider::gpsdata::GPSData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto}, {}};

static void InitDefaultsscc_info_GPSData_array_port_ap_5fcommonvehsigprovider_2fgpsdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_commonvehsigprovider::gpsdata::_GPSData_array_port_default_instance_;
    new (ptr) ::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GPSData_array_port_ap_5fcommonvehsigprovider_2fgpsdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GPSData_array_port_ap_5fcommonvehsigprovider_2fgpsdata_2eproto}, {
      &scc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fcommonvehsigprovider_2fgpsdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fcommonvehsigprovider_2fgpsdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fcommonvehsigprovider_2fgpsdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fcommonvehsigprovider_2fgpsdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsantennaheight_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpslatitude_dd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpslatitude_mm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpslongitude_dd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpslongitude_mm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsspeed_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsr32speedoverground_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpscourseoverground_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, verticaldop_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, horizontaldop_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, timedop_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, geometricdop_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, positiondop_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsutctime_hh_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsutctime_mm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsutctime_ss_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpslatitudehemisphere_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpslongitudehemisphere_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsdateday_dd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsdatemonth_mm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsdateyear_yy_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsfix_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, gpsnoofsatellites_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData, receiverstatus_nu_),
  21,
  3,
  1,
  23,
  11,
  17,
  19,
  16,
  10,
  9,
  18,
  6,
  4,
  7,
  8,
  14,
  13,
  12,
  2,
  15,
  20,
  22,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(::pb::ap_commonvehsigprovider::gpsdata::GPSData)},
  { 53, 59, sizeof(::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_commonvehsigprovider::gpsdata::_GPSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_commonvehsigprovider::gpsdata::_GPSData_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fcommonvehsigprovider_2fgpsdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%ap_commonvehsigprovider/gpsdata.proto\022"
  "\"pb.ap_commonvehsigprovider.gpsdata\032(ap_"
  "commonvehsigprovider/hemisphere.proto\0321a"
  "p_commonvehsigprovider/gps_receiver_stat"
  "us.proto\"\236\006\n\007GPSData\022\033\n\022gpsAntennaHeight"
  "_m\030\217\033 \001(\002\022\027\n\016gpsLatitude_dd\030\334\007 \001(\021\022\027\n\016gp"
  "sLatitude_mm\030\364\002 \001(\002\022\030\n\017gpsLongitude_dd\030\205"
  "\035 \001(\021\022\030\n\017gpsLongitude_mm\030\377\022 \001(\002\022\025\n\014gpsSp"
  "eed_mps\030\233\030 \001(\002\022\"\n\031gpsR32SpeedOverGround_"
  "mps\030\351\032 \001(\002\022\034\n\023gpsCourseOverGround\030\310\027 \001(\002"
  "\022\024\n\013verticalDOP\030\345\022 \001(\002\022\026\n\rhorizontalDOP\030"
  "\264\021 \001(\002\022\020\n\007timeDOP\030\264\032 \001(\002\022\025\n\014geometricDOP"
  "\030\274\016 \001(\002\022\024\n\013positionDOP\030\220\n \001(\002\022\026\n\rgpsUtcT"
  "ime_hh\030\315\017 \001(\r\022\026\n\rgpsUtcTime_mm\030\235\021 \001(\r\022\026\n"
  "\rgpsUtcTime_ss\030\236\026 \001(\r\022T\n\030gpsLatitudeHemi"
  "sphere_nu\030\323\025 \001(\01621.pb.ap_commonvehsigpro"
  "vider.hemisphere.Hemisphere\022U\n\031gpsLongit"
  "udeHemisphere_nu\030\230\024 \001(\01621.pb.ap_commonve"
  "hsigprovider.hemisphere.Hemisphere\022\026\n\rgp"
  "sDateDay_dd\030\370\006 \001(\r\022\030\n\017gpsDateMonth_mm\030\214\027"
  " \001(\r\022\027\n\016gpsDateYear_yy\030\205\033 \001(\r\022\017\n\006gpsFix\030"
  "\355\033 \001(\r\022\032\n\021gpsNoOfSatellites\030\226\001 \001(\r\022]\n\021Re"
  "ceiverStatus_nu\030\322\r \001(\0162A.pb.ap_commonveh"
  "sigprovider.gps_receiver_status.GpsRecei"
  "verStatus\"P\n\022GPSData_array_port\022:\n\004data\030"
  "\365\017 \003(\0132+.pb.ap_commonvehsigprovider.gpsd"
  "ata.GPSData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_deps[2] = {
  &::descriptor_table_ap_5fcommonvehsigprovider_2fgps_5freceiver_5fstatus_2eproto,
  &::descriptor_table_ap_5fcommonvehsigprovider_2fhemisphere_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_sccs[2] = {
  &scc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.base,
  &scc_info_GPSData_array_port_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_once;
static bool descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto = {
  &descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_initialized, descriptor_table_protodef_ap_5fcommonvehsigprovider_2fgpsdata_2eproto, "ap_commonvehsigprovider/gpsdata.proto", 1051,
  &descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_once, descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_sccs, descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ap_5fcommonvehsigprovider_2fgpsdata_2eproto::offsets,
  file_level_metadata_ap_5fcommonvehsigprovider_2fgpsdata_2eproto, 2, file_level_enum_descriptors_ap_5fcommonvehsigprovider_2fgpsdata_2eproto, file_level_service_descriptors_ap_5fcommonvehsigprovider_2fgpsdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fcommonvehsigprovider_2fgpsdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fcommonvehsigprovider_2fgpsdata_2eproto), true);
namespace pb {
namespace ap_commonvehsigprovider {
namespace gpsdata {

// ===================================================================

void GPSData::InitAsDefaultInstance() {
}
class GPSData::_Internal {
 public:
  using HasBits = decltype(std::declval<GPSData>()._has_bits_);
  static void set_has_gpsantennaheight_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gpslatitude_dd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gpslatitude_mm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gpslongitude_dd(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_gpslongitude_mm(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gpsspeed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gpsr32speedoverground_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gpscourseoverground(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_verticaldop(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_horizontaldop(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_timedop(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_geometricdop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_positiondop(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gpsutctime_hh(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gpsutctime_mm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gpsutctime_ss(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_gpslatitudehemisphere_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_gpslongitudehemisphere_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gpsdateday_dd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gpsdatemonth_mm(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_gpsdateyear_yy(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gpsfix(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_gpsnoofsatellites(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiverstatus_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

GPSData::GPSData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_commonvehsigprovider.gpsdata.GPSData)
}
GPSData::GPSData(const GPSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gpsnoofsatellites_, &from.gpsnoofsatellites_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpslongitude_dd_) -
    reinterpret_cast<char*>(&gpsnoofsatellites_)) + sizeof(gpslongitude_dd_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_commonvehsigprovider.gpsdata.GPSData)
}

void GPSData::SharedCtor() {
  ::memset(&gpsnoofsatellites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpslongitude_dd_) -
      reinterpret_cast<char*>(&gpsnoofsatellites_)) + sizeof(gpslongitude_dd_));
}

GPSData::~GPSData() {
  // @@protoc_insertion_point(destructor:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  SharedDtor();
}

void GPSData::SharedDtor() {
}

void GPSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSData& GPSData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSData_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.base);
  return *internal_default_instance();
}


void GPSData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gpsnoofsatellites_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpsutctime_hh_) -
        reinterpret_cast<char*>(&gpsnoofsatellites_)) + sizeof(gpsutctime_hh_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&gpsutctime_mm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpsdatemonth_mm_) -
        reinterpret_cast<char*>(&gpsutctime_mm_)) + sizeof(gpsdatemonth_mm_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&gpscourseoverground_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpslongitude_dd_) -
        reinterpret_cast<char*>(&gpscourseoverground_)) + sizeof(gpslongitude_dd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GPSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 gpsNoOfSatellites = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_gpsnoofsatellites(&has_bits);
          gpsnoofsatellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gpsLatitude_mm = 372;
      case 372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_gpslatitude_mm(&has_bits);
          gpslatitude_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpsDateDay_dd = 888;
      case 888:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_gpsdateday_dd(&has_bits);
          gpsdateday_dd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 gpsLatitude_dd = 988;
      case 988:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_gpslatitude_dd(&has_bits);
          gpslatitude_dd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float positionDOP = 1296;
      case 1296:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_positiondop(&has_bits);
          positiondop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_commonvehsigprovider.gps_receiver_status.GpsReceiverStatus ReceiverStatus_nu = 1746;
      case 1746:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus_IsValid(val))) {
            _internal_set_receiverstatus_nu(static_cast<::pb::ap_commonvehsigprovider::gps_receiver_status::GpsReceiverStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1746, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float geometricDOP = 1852;
      case 1852:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_geometricdop(&has_bits);
          geometricdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpsUtcTime_hh = 1997;
      case 1997:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_gpsutctime_hh(&has_bits);
          gpsutctime_hh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpsUtcTime_mm = 2205;
      case 2205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_gpsutctime_mm(&has_bits);
          gpsutctime_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float horizontalDOP = 2228;
      case 2228:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_horizontaldop(&has_bits);
          horizontaldop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float verticalDOP = 2405;
      case 2405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_verticaldop(&has_bits);
          verticaldop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gpsLongitude_mm = 2431;
      case 2431:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_gpslongitude_mm(&has_bits);
          gpslongitude_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLongitudeHemisphere_nu = 2584;
      case 2584:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere_IsValid(val))) {
            _internal_set_gpslongitudehemisphere_nu(static_cast<::pb::ap_commonvehsigprovider::hemisphere::Hemisphere>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2584, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLatitudeHemisphere_nu = 2771;
      case 2771:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_commonvehsigprovider::hemisphere::Hemisphere_IsValid(val))) {
            _internal_set_gpslatitudehemisphere_nu(static_cast<::pb::ap_commonvehsigprovider::hemisphere::Hemisphere>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2771, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 gpsUtcTime_ss = 2846;
      case 2846:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_gpsutctime_ss(&has_bits);
          gpsutctime_ss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpsDateMonth_mm = 2956;
      case 2956:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gpsdatemonth_mm(&has_bits);
          gpsdatemonth_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gpsCourseOverGround = 3016;
      case 3016:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_gpscourseoverground(&has_bits);
          gpscourseoverground_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gpsSpeed_mps = 3099;
      case 3099:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_gpsspeed_mps(&has_bits);
          gpsspeed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float timeDOP = 3380;
      case 3380:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_timedop(&has_bits);
          timedop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gpsR32SpeedOverGround_mps = 3433;
      case 3433:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_gpsr32speedoverground_mps(&has_bits);
          gpsr32speedoverground_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpsDateYear_yy = 3461;
      case 3461:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gpsdateyear_yy(&has_bits);
          gpsdateyear_yy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gpsAntennaHeight_m = 3471;
      case 3471:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_gpsantennaheight_m(&has_bits);
          gpsantennaheight_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpsFix = 3565;
      case 3565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_gpsfix(&has_bits);
          gpsfix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 gpsLongitude_dd = 3717;
      case 3717:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gpslongitude_dd(&has_bits);
          gpslongitude_dd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gpsNoOfSatellites = 150;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(150, this->_internal_gpsnoofsatellites(), target);
  }

  // optional float gpsLatitude_mm = 372;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(372, this->_internal_gpslatitude_mm(), target);
  }

  // optional uint32 gpsDateDay_dd = 888;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(888, this->_internal_gpsdateday_dd(), target);
  }

  // optional sint32 gpsLatitude_dd = 988;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(988, this->_internal_gpslatitude_dd(), target);
  }

  // optional float positionDOP = 1296;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1296, this->_internal_positiondop(), target);
  }

  // optional .pb.ap_commonvehsigprovider.gps_receiver_status.GpsReceiverStatus ReceiverStatus_nu = 1746;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1746, this->_internal_receiverstatus_nu(), target);
  }

  // optional float geometricDOP = 1852;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1852, this->_internal_geometricdop(), target);
  }

  // optional uint32 gpsUtcTime_hh = 1997;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1997, this->_internal_gpsutctime_hh(), target);
  }

  // optional uint32 gpsUtcTime_mm = 2205;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2205, this->_internal_gpsutctime_mm(), target);
  }

  // optional float horizontalDOP = 2228;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2228, this->_internal_horizontaldop(), target);
  }

  // optional float verticalDOP = 2405;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2405, this->_internal_verticaldop(), target);
  }

  // optional float gpsLongitude_mm = 2431;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2431, this->_internal_gpslongitude_mm(), target);
  }

  // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLongitudeHemisphere_nu = 2584;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2584, this->_internal_gpslongitudehemisphere_nu(), target);
  }

  // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLatitudeHemisphere_nu = 2771;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2771, this->_internal_gpslatitudehemisphere_nu(), target);
  }

  // optional uint32 gpsUtcTime_ss = 2846;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2846, this->_internal_gpsutctime_ss(), target);
  }

  // optional uint32 gpsDateMonth_mm = 2956;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2956, this->_internal_gpsdatemonth_mm(), target);
  }

  // optional float gpsCourseOverGround = 3016;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3016, this->_internal_gpscourseoverground(), target);
  }

  // optional float gpsSpeed_mps = 3099;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3099, this->_internal_gpsspeed_mps(), target);
  }

  // optional float timeDOP = 3380;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3380, this->_internal_timedop(), target);
  }

  // optional float gpsR32SpeedOverGround_mps = 3433;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3433, this->_internal_gpsr32speedoverground_mps(), target);
  }

  // optional uint32 gpsDateYear_yy = 3461;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3461, this->_internal_gpsdateyear_yy(), target);
  }

  // optional float gpsAntennaHeight_m = 3471;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3471, this->_internal_gpsantennaheight_m(), target);
  }

  // optional uint32 gpsFix = 3565;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3565, this->_internal_gpsfix(), target);
  }

  // optional sint32 gpsLongitude_dd = 3717;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3717, this->_internal_gpslongitude_dd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  return target;
}

size_t GPSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 gpsNoOfSatellites = 150;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsnoofsatellites());
    }

    // optional float gpsLatitude_mm = 372;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 gpsDateDay_dd = 888;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsdateday_dd());
    }

    // optional sint32 gpsLatitude_dd = 988;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_gpslatitude_dd());
    }

    // optional float positionDOP = 1296;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional .pb.ap_commonvehsigprovider.gps_receiver_status.GpsReceiverStatus ReceiverStatus_nu = 1746;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_receiverstatus_nu());
    }

    // optional float geometricDOP = 1852;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional uint32 gpsUtcTime_hh = 1997;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsutctime_hh());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 gpsUtcTime_mm = 2205;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsutctime_mm());
    }

    // optional float horizontalDOP = 2228;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float verticalDOP = 2405;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float gpsLongitude_mm = 2431;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLongitudeHemisphere_nu = 2584;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gpslongitudehemisphere_nu());
    }

    // optional .pb.ap_commonvehsigprovider.hemisphere.Hemisphere gpsLatitudeHemisphere_nu = 2771;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gpslatitudehemisphere_nu());
    }

    // optional uint32 gpsUtcTime_ss = 2846;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsutctime_ss());
    }

    // optional uint32 gpsDateMonth_mm = 2956;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsdatemonth_mm());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float gpsCourseOverGround = 3016;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float gpsSpeed_mps = 3099;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float timeDOP = 3380;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float gpsR32SpeedOverGround_mps = 3433;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional uint32 gpsDateYear_yy = 3461;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsdateyear_yy());
    }

    // optional float gpsAntennaHeight_m = 3471;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional uint32 gpsFix = 3565;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsfix());
    }

    // optional sint32 gpsLongitude_dd = 3717;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_gpslongitude_dd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_commonvehsigprovider.gpsdata.GPSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_commonvehsigprovider.gpsdata.GPSData)
    MergeFrom(*source);
  }
}

void GPSData::MergeFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gpsnoofsatellites_ = from.gpsnoofsatellites_;
    }
    if (cached_has_bits & 0x00000002u) {
      gpslatitude_mm_ = from.gpslatitude_mm_;
    }
    if (cached_has_bits & 0x00000004u) {
      gpsdateday_dd_ = from.gpsdateday_dd_;
    }
    if (cached_has_bits & 0x00000008u) {
      gpslatitude_dd_ = from.gpslatitude_dd_;
    }
    if (cached_has_bits & 0x00000010u) {
      positiondop_ = from.positiondop_;
    }
    if (cached_has_bits & 0x00000020u) {
      receiverstatus_nu_ = from.receiverstatus_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      geometricdop_ = from.geometricdop_;
    }
    if (cached_has_bits & 0x00000080u) {
      gpsutctime_hh_ = from.gpsutctime_hh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      gpsutctime_mm_ = from.gpsutctime_mm_;
    }
    if (cached_has_bits & 0x00000200u) {
      horizontaldop_ = from.horizontaldop_;
    }
    if (cached_has_bits & 0x00000400u) {
      verticaldop_ = from.verticaldop_;
    }
    if (cached_has_bits & 0x00000800u) {
      gpslongitude_mm_ = from.gpslongitude_mm_;
    }
    if (cached_has_bits & 0x00001000u) {
      gpslongitudehemisphere_nu_ = from.gpslongitudehemisphere_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      gpslatitudehemisphere_nu_ = from.gpslatitudehemisphere_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      gpsutctime_ss_ = from.gpsutctime_ss_;
    }
    if (cached_has_bits & 0x00008000u) {
      gpsdatemonth_mm_ = from.gpsdatemonth_mm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      gpscourseoverground_ = from.gpscourseoverground_;
    }
    if (cached_has_bits & 0x00020000u) {
      gpsspeed_mps_ = from.gpsspeed_mps_;
    }
    if (cached_has_bits & 0x00040000u) {
      timedop_ = from.timedop_;
    }
    if (cached_has_bits & 0x00080000u) {
      gpsr32speedoverground_mps_ = from.gpsr32speedoverground_mps_;
    }
    if (cached_has_bits & 0x00100000u) {
      gpsdateyear_yy_ = from.gpsdateyear_yy_;
    }
    if (cached_has_bits & 0x00200000u) {
      gpsantennaheight_m_ = from.gpsantennaheight_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      gpsfix_ = from.gpsfix_;
    }
    if (cached_has_bits & 0x00800000u) {
      gpslongitude_dd_ = from.gpslongitude_dd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GPSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSData::CopyFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSData::IsInitialized() const {
  return true;
}

void GPSData::InternalSwap(GPSData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gpsnoofsatellites_, other->gpsnoofsatellites_);
  swap(gpslatitude_mm_, other->gpslatitude_mm_);
  swap(gpsdateday_dd_, other->gpsdateday_dd_);
  swap(gpslatitude_dd_, other->gpslatitude_dd_);
  swap(positiondop_, other->positiondop_);
  swap(receiverstatus_nu_, other->receiverstatus_nu_);
  swap(geometricdop_, other->geometricdop_);
  swap(gpsutctime_hh_, other->gpsutctime_hh_);
  swap(gpsutctime_mm_, other->gpsutctime_mm_);
  swap(horizontaldop_, other->horizontaldop_);
  swap(verticaldop_, other->verticaldop_);
  swap(gpslongitude_mm_, other->gpslongitude_mm_);
  swap(gpslongitudehemisphere_nu_, other->gpslongitudehemisphere_nu_);
  swap(gpslatitudehemisphere_nu_, other->gpslatitudehemisphere_nu_);
  swap(gpsutctime_ss_, other->gpsutctime_ss_);
  swap(gpsdatemonth_mm_, other->gpsdatemonth_mm_);
  swap(gpscourseoverground_, other->gpscourseoverground_);
  swap(gpsspeed_mps_, other->gpsspeed_mps_);
  swap(timedop_, other->timedop_);
  swap(gpsr32speedoverground_mps_, other->gpsr32speedoverground_mps_);
  swap(gpsdateyear_yy_, other->gpsdateyear_yy_);
  swap(gpsantennaheight_m_, other->gpsantennaheight_m_);
  swap(gpsfix_, other->gpsfix_);
  swap(gpslongitude_dd_, other->gpslongitude_dd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPSData_array_port::InitAsDefaultInstance() {
}
class GPSData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<GPSData_array_port>()._has_bits_);
};

GPSData_array_port::GPSData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
}
GPSData_array_port::GPSData_array_port(const GPSData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
}

void GPSData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPSData_array_port_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.base);
}

GPSData_array_port::~GPSData_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  SharedDtor();
}

void GPSData_array_port::SharedDtor() {
}

void GPSData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPSData_array_port& GPSData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPSData_array_port_ap_5fcommonvehsigprovider_2fgpsdata_2eproto.base);
  return *internal_default_instance();
}


void GPSData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GPSData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_commonvehsigprovider.gpsdata.GPSData data = 2037;
      case 2037:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16298>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_commonvehsigprovider.gpsdata.GPSData data = 2037;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2037, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  return target;
}

size_t GPSData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_commonvehsigprovider.gpsdata.GPSData data = 2037;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
    MergeFrom(*source);
  }
}

void GPSData_array_port::MergeFrom(const GPSData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GPSData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSData_array_port::CopyFrom(const GPSData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_commonvehsigprovider.gpsdata.GPSData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSData_array_port::IsInitialized() const {
  return true;
}

void GPSData_array_port::InternalSwap(GPSData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gpsdata
}  // namespace ap_commonvehsigprovider
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_commonvehsigprovider::gpsdata::GPSData* Arena::CreateMaybeMessage< ::pb::ap_commonvehsigprovider::gpsdata::GPSData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_commonvehsigprovider::gpsdata::GPSData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port* Arena::CreateMaybeMessage< ::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_commonvehsigprovider::gpsdata::GPSData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
