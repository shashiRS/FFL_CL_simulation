// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vc/overlay_tag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vc_2foverlay_5ftag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vc_2foverlay_5ftag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vc_2foverlay_5ftag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vc_2foverlay_5ftag_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vc_2foverlay_5ftag_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace vc {
namespace overlay_tag {

enum OverlayTag : int {
  OVERLAY_TAG_UNDEFINED = 0,
  OVERLAY_TAG_DISTANCE_BAR_LEFT = 1,
  OVERLAY_TAG_DISTANCE_BAR_RIGHT = 2,
  OVERLAY_TAG_CARPET = 3,
  OVERLAY_TAG_FRONT_TRAJECTORY = 4,
  OVERLAY_TAG_TRAILER_TARGET = 5,
  OVERLAY_TAG_REAR_TRAJECTORY = 6,
  OVERLAY_TAG_HITCH_TRAJECTORY = 7,
  OVERLAY_TAG_TAILGATE = 8,
  OVERLAY_TAG_DETECTED_PARK_SLOT = 9,
  OVERLAY_TAG_GLOW_FRONT_LEFT = 10,
  OVERLAY_TAG_GLOW_FRONT_RIGHT = 11,
  OVERLAY_TAG_GLOW_REAR_LEFT = 12,
  OVERLAY_TAG_GLOW_REAR_RIGHT = 13,
  OVERLAY_TAG_CAM_LEFT_N_A = 14,
  OVERLAY_TAG_CAM_RIGHT_N_A = 15,
  OVERLAY_TAG_CAM_FRONT_N_A = 16,
  OVERLAY_TAG_CAM_REAR_N_A = 17,
  OVERLAY_TAG_CAM_LEFT_DEFECT = 18,
  OVERLAY_TAG_CAM_RIGHT_DEFECT = 19,
  OVERLAY_TAG_CAM_FRONT_DEFECT = 20,
  OVERLAY_TAG_CAM_REAR_DEFECT = 21,
  OVERLAY_TAG_DOOR_LEFT = 22,
  OVERLAY_TAG_DOOR_RIGHT = 23,
  OVERLAY_TAG_MIRROR_LEFT = 24,
  OVERLAY_TAG_MIRROR_RIGHT = 25,
  OVERLAY_TAG_PARK_MARKER_DETECTION = 26,
  OVERLAY_TAG_TRUNK = 27,
  OVERLAY_TAG_EARLY_BITMAP = 28,
  OVERLAY_TAG_POLYGON = 29,
  OVERLAY_TAG_PLANNED_TRAJECTORY = 30,
  OVERLAY_TAG_AUP_FRONT_TRAJECTORY = 31,
  OVERLAY_TAG_AUP_REAR_TRAJECTORY = 32,
  OVERLAY_TAG_CLIPPING_MASK = 33,
  OVERLAY_TAG_PDW = 34,
  OVERLAY_TAG_GHOST_CAR = 35,
  OVERLAY_TAG_REVERSE_ASSIST_ICON = 36,
  OVERLAY_TAG_REVERSE_ASSIST_DISTANCE_MARKER = 37,
  OVERLAY_TAG_RIM_WARNING = 38,
  NUM_OVERLAY_TAGS = 39
};
bool OverlayTag_IsValid(int value);
constexpr OverlayTag OverlayTag_MIN = OVERLAY_TAG_UNDEFINED;
constexpr OverlayTag OverlayTag_MAX = NUM_OVERLAY_TAGS;
constexpr int OverlayTag_ARRAYSIZE = OverlayTag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlayTag_descriptor();
template<typename T>
inline const std::string& OverlayTag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OverlayTag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OverlayTag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OverlayTag_descriptor(), enum_t_value);
}
inline bool OverlayTag_Parse(
    const std::string& name, OverlayTag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OverlayTag>(
    OverlayTag_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace overlay_tag
}  // namespace vc
}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::vc::overlay_tag::OverlayTag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::vc::overlay_tag::OverlayTag>() {
  return ::pb::vc::overlay_tag::OverlayTag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vc_2foverlay_5ftag_2eproto
