// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vc/hmiwarning_message.proto

#include "vc/hmiwarning_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace pb {
namespace vc {
namespace hmiwarning_message {
}  // namespace hmiwarning_message
}  // namespace vc
}  // namespace pb
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_vc_2fhmiwarning_5fmessage_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vc_2fhmiwarning_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vc_2fhmiwarning_5fmessage_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vc_2fhmiwarning_5fmessage_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_vc_2fhmiwarning_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033vc/hmiwarning_message.proto\022\030pb.vc.hmi"
  "warning_message*\304\002\n\021HMIWarningMessage\022\025\n"
  "\021COLLISION_WARNING\020\000\022\026\n\022CAMERA_UNAVAILAB"
  "LE\020\001\022\034\n\030CAMERA_CLEANING_REQUIRED\020\002\022\r\n\tDO"
  "OR_OPEN\020\003\022\016\n\nTRUNK_OPEN\020\004\022\017\n\013ORVM_FOLDED"
  "\020\005\022\"\n\036BSV_NOT_ACTIVE_HAZARD_LIGHT_ON\020\006\022\031"
  "\n\025CAMERA_NOT_CALIBRATED\020\007\022\032\n\026PLEASE_DRIV"
  "E_CAREFULLY\020\010\022\035\n\031PART_OF_IMAGE_IS_NOT_LI"
  "VE\020\t\022\021\n\rSPEED_WARNING\020\n\022\025\n\021TRAILER_CONNE"
  "CTED\020\013\022\016\n\nNO_WARNING\020\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_once;
static bool descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vc_2fhmiwarning_5fmessage_2eproto = {
  &descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_initialized, descriptor_table_protodef_vc_2fhmiwarning_5fmessage_2eproto, "vc/hmiwarning_message.proto", 382,
  &descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_once, descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_sccs, descriptor_table_vc_2fhmiwarning_5fmessage_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_vc_2fhmiwarning_5fmessage_2eproto::offsets,
  file_level_metadata_vc_2fhmiwarning_5fmessage_2eproto, 0, file_level_enum_descriptors_vc_2fhmiwarning_5fmessage_2eproto, file_level_service_descriptors_vc_2fhmiwarning_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vc_2fhmiwarning_5fmessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vc_2fhmiwarning_5fmessage_2eproto), true);
namespace pb {
namespace vc {
namespace hmiwarning_message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HMIWarningMessage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vc_2fhmiwarning_5fmessage_2eproto);
  return file_level_enum_descriptors_vc_2fhmiwarning_5fmessage_2eproto[0];
}
bool HMIWarningMessage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hmiwarning_message
}  // namespace vc
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
