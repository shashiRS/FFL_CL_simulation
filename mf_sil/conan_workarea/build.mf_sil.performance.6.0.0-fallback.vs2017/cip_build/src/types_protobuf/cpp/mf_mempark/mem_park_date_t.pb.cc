// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/mem_park_date_t.proto

#include "mf_mempark/mem_park_date_t.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemParkDate_t_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto;
namespace pb {
namespace mf_mempark {
namespace mem_park_date_t {
class MemParkDate_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemParkDate_t> _instance;
} _MemParkDate_t_default_instance_;
class MemParkDate_t_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemParkDate_t_array_port> _instance;
} _MemParkDate_t_array_port_default_instance_;
}  // namespace mem_park_date_t
}  // namespace mf_mempark
}  // namespace pb
static void InitDefaultsscc_info_MemParkDate_t_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::mem_park_date_t::_MemParkDate_t_default_instance_;
    new (ptr) ::pb::mf_mempark::mem_park_date_t::MemParkDate_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::mem_park_date_t::MemParkDate_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemParkDate_t_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemParkDate_t_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto}, {}};

static void InitDefaultsscc_info_MemParkDate_t_array_port_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::mem_park_date_t::_MemParkDate_t_array_port_default_instance_;
    new (ptr) ::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemParkDate_t_array_port_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MemParkDate_t_array_port_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto}, {
      &scc_info_MemParkDate_t_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, year_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, month_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, day_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, hour_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, minute_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, second_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t, timezone_),
  3,
  2,
  1,
  4,
  0,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::pb::mf_mempark::mem_park_date_t::MemParkDate_t)},
  { 19, 25, sizeof(::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::mem_park_date_t::_MemParkDate_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::mem_park_date_t::_MemParkDate_t_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n mf_mempark/mem_park_date_t.proto\022\035pb.m"
  "f_mempark.mem_park_date_t\"\200\001\n\rMemParkDat"
  "e_t\022\r\n\004year\030\321\027 \001(\r\022\016\n\005month\030\307\025 \001(\r\022\014\n\003da"
  "y\030\352\005 \001(\r\022\r\n\004hour\030\264\035 \001(\r\022\017\n\006minute\030\256\037 \001(\r"
  "\022\017\n\006second\030\237\036 \001(\r\022\021\n\010timeZone\030\220\036 \001(\021\"W\n\030"
  "MemParkDate_t_array_port\022;\n\004data\030\267\001 \003(\0132"
  ",.pb.mf_mempark.mem_park_date_t.MemParkD"
  "ate_t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_sccs[2] = {
  &scc_info_MemParkDate_t_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.base,
  &scc_info_MemParkDate_t_array_port_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_once;
static bool descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto = {
  &descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_initialized, descriptor_table_protodef_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto, "mf_mempark/mem_park_date_t.proto", 285,
  &descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_once, descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_sccs, descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto::offsets,
  file_level_metadata_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto, 2, file_level_enum_descriptors_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto, file_level_service_descriptors_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto), true);
namespace pb {
namespace mf_mempark {
namespace mem_park_date_t {

// ===================================================================

void MemParkDate_t::InitAsDefaultInstance() {
}
class MemParkDate_t::_Internal {
 public:
  using HasBits = decltype(std::declval<MemParkDate_t>()._has_bits_);
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MemParkDate_t::MemParkDate_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
}
MemParkDate_t::MemParkDate_t(const MemParkDate_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minute_, &from.minute_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&minute_)) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
}

void MemParkDate_t::SharedCtor() {
  ::memset(&minute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&minute_)) + sizeof(second_));
}

MemParkDate_t::~MemParkDate_t() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  SharedDtor();
}

void MemParkDate_t::SharedDtor() {
}

void MemParkDate_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemParkDate_t& MemParkDate_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemParkDate_t_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.base);
  return *internal_default_instance();
}


void MemParkDate_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&minute_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_) -
        reinterpret_cast<char*>(&minute_)) + sizeof(second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemParkDate_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 day = 746;
      case 746:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_day(&has_bits);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 month = 2759;
      case 2759:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 year = 3025;
      case 3025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hour = 3764;
      case 3764:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 timeZone = 3856;
      case 3856:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_timezone(&has_bits);
          timezone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 second = 3871;
      case 3871:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_second(&has_bits);
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minute = 4014;
      case 4014:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_minute(&has_bits);
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemParkDate_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 day = 746;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(746, this->_internal_day(), target);
  }

  // optional uint32 month = 2759;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2759, this->_internal_month(), target);
  }

  // optional uint32 year = 3025;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3025, this->_internal_year(), target);
  }

  // optional uint32 hour = 3764;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3764, this->_internal_hour(), target);
  }

  // optional sint32 timeZone = 3856;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3856, this->_internal_timezone(), target);
  }

  // optional uint32 second = 3871;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3871, this->_internal_second(), target);
  }

  // optional uint32 minute = 4014;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4014, this->_internal_minute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  return target;
}

size_t MemParkDate_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 minute = 4014;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minute());
    }

    // optional uint32 day = 746;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_day());
    }

    // optional uint32 month = 2759;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_month());
    }

    // optional uint32 year = 3025;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_year());
    }

    // optional uint32 hour = 3764;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hour());
    }

    // optional sint32 timeZone = 3856;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_timezone());
    }

    // optional uint32 second = 3871;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_second());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemParkDate_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  GOOGLE_DCHECK_NE(&from, this);
  const MemParkDate_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemParkDate_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
    MergeFrom(*source);
  }
}

void MemParkDate_t::MergeFrom(const MemParkDate_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000002u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000004u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000010u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000020u) {
      timezone_ = from.timezone_;
    }
    if (cached_has_bits & 0x00000040u) {
      second_ = from.second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemParkDate_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemParkDate_t::CopyFrom(const MemParkDate_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemParkDate_t::IsInitialized() const {
  return true;
}

void MemParkDate_t::InternalSwap(MemParkDate_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(minute_, other->minute_);
  swap(day_, other->day_);
  swap(month_, other->month_);
  swap(year_, other->year_);
  swap(hour_, other->hour_);
  swap(timezone_, other->timezone_);
  swap(second_, other->second_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemParkDate_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemParkDate_t_array_port::InitAsDefaultInstance() {
}
class MemParkDate_t_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<MemParkDate_t_array_port>()._has_bits_);
};

MemParkDate_t_array_port::MemParkDate_t_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
}
MemParkDate_t_array_port::MemParkDate_t_array_port(const MemParkDate_t_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
}

void MemParkDate_t_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemParkDate_t_array_port_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.base);
}

MemParkDate_t_array_port::~MemParkDate_t_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  SharedDtor();
}

void MemParkDate_t_array_port::SharedDtor() {
}

void MemParkDate_t_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemParkDate_t_array_port& MemParkDate_t_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemParkDate_t_array_port_mf_5fmempark_2fmem_5fpark_5fdate_5ft_2eproto.base);
  return *internal_default_instance();
}


void MemParkDate_t_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemParkDate_t_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_mempark.mem_park_date_t.MemParkDate_t data = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1466>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemParkDate_t_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.mem_park_date_t.MemParkDate_t data = 183;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(183, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  return target;
}

size_t MemParkDate_t_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.mem_park_date_t.MemParkDate_t data = 183;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemParkDate_t_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const MemParkDate_t_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemParkDate_t_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
    MergeFrom(*source);
  }
}

void MemParkDate_t_array_port::MergeFrom(const MemParkDate_t_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MemParkDate_t_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemParkDate_t_array_port::CopyFrom(const MemParkDate_t_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.mem_park_date_t.MemParkDate_t_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemParkDate_t_array_port::IsInitialized() const {
  return true;
}

void MemParkDate_t_array_port::InternalSwap(MemParkDate_t_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemParkDate_t_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mem_park_date_t
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::mem_park_date_t::MemParkDate_t* Arena::CreateMaybeMessage< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port* Arena::CreateMaybeMessage< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::mem_park_date_t::MemParkDate_t_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
