// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/mem_park_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmem_5fpark_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmem_5fpark_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmem_5fpark_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmempark_2fmem_5fpark_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto;
namespace pb {
namespace mf_mempark {
namespace mem_park_params {
class MemParkParams;
class MemParkParamsDefaultTypeInternal;
extern MemParkParamsDefaultTypeInternal _MemParkParams_default_instance_;
class MemParkParams_array_port;
class MemParkParams_array_portDefaultTypeInternal;
extern MemParkParams_array_portDefaultTypeInternal _MemParkParams_array_port_default_instance_;
}  // namespace mem_park_params
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_mempark::mem_park_params::MemParkParams* Arena::CreateMaybeMessage<::pb::mf_mempark::mem_park_params::MemParkParams>(Arena*);
template<> ::pb::mf_mempark::mem_park_params::MemParkParams_array_port* Arena::CreateMaybeMessage<::pb::mf_mempark::mem_park_params::MemParkParams_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_mempark {
namespace mem_park_params {

// ===================================================================

class MemParkParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.mem_park_params.MemParkParams) */ {
 public:
  MemParkParams();
  virtual ~MemParkParams();

  MemParkParams(const MemParkParams& from);
  MemParkParams(MemParkParams&& from) noexcept
    : MemParkParams() {
    *this = ::std::move(from);
  }

  inline MemParkParams& operator=(const MemParkParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemParkParams& operator=(MemParkParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemParkParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemParkParams* internal_default_instance() {
    return reinterpret_cast<const MemParkParams*>(
               &_MemParkParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemParkParams& a, MemParkParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MemParkParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemParkParams* New() const final {
    return CreateMaybeMessage<MemParkParams>(nullptr);
  }

  MemParkParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemParkParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemParkParams& from);
  void MergeFrom(const MemParkParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemParkParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.mem_park_params.MemParkParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto);
    return ::descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kMemParkDeveloperParam1FieldNumber = 262,
    kMemParkDeveloperParam0FieldNumber = 295,
    kMemParkDeveloperParam3FieldNumber = 324,
    kMemParkDeveloperParam2FieldNumber = 357,
    kMemParkDeveloperParam5FieldNumber = 386,
    kMemParkDeveloperParam4FieldNumber = 419,
    kMemParkDeveloperParam7FieldNumber = 448,
    kMemParkDeveloperParam6FieldNumber = 481,
    kMinRequiredRelocalizationProbPercFieldNumber = 913,
    kScanRoiBackExtensionMFieldNumber = 1096,
    kScanRoiFrontExtensionMFieldNumber = 1099,
    kUiVersionNumberFieldNumber = 2124,
    kScanRoiHalfWidthMFieldNumber = 3018,
    kFunctionActiveNuFieldNumber = 4064,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float memParkDeveloperParam_1 = 262;
  bool has_memparkdeveloperparam_1() const;
  private:
  bool _internal_has_memparkdeveloperparam_1() const;
  public:
  void clear_memparkdeveloperparam_1();
  float memparkdeveloperparam_1() const;
  void set_memparkdeveloperparam_1(float value);
  private:
  float _internal_memparkdeveloperparam_1() const;
  void _internal_set_memparkdeveloperparam_1(float value);
  public:

  // optional float memParkDeveloperParam_0 = 295;
  bool has_memparkdeveloperparam_0() const;
  private:
  bool _internal_has_memparkdeveloperparam_0() const;
  public:
  void clear_memparkdeveloperparam_0();
  float memparkdeveloperparam_0() const;
  void set_memparkdeveloperparam_0(float value);
  private:
  float _internal_memparkdeveloperparam_0() const;
  void _internal_set_memparkdeveloperparam_0(float value);
  public:

  // optional float memParkDeveloperParam_3 = 324;
  bool has_memparkdeveloperparam_3() const;
  private:
  bool _internal_has_memparkdeveloperparam_3() const;
  public:
  void clear_memparkdeveloperparam_3();
  float memparkdeveloperparam_3() const;
  void set_memparkdeveloperparam_3(float value);
  private:
  float _internal_memparkdeveloperparam_3() const;
  void _internal_set_memparkdeveloperparam_3(float value);
  public:

  // optional float memParkDeveloperParam_2 = 357;
  bool has_memparkdeveloperparam_2() const;
  private:
  bool _internal_has_memparkdeveloperparam_2() const;
  public:
  void clear_memparkdeveloperparam_2();
  float memparkdeveloperparam_2() const;
  void set_memparkdeveloperparam_2(float value);
  private:
  float _internal_memparkdeveloperparam_2() const;
  void _internal_set_memparkdeveloperparam_2(float value);
  public:

  // optional float memParkDeveloperParam_5 = 386;
  bool has_memparkdeveloperparam_5() const;
  private:
  bool _internal_has_memparkdeveloperparam_5() const;
  public:
  void clear_memparkdeveloperparam_5();
  float memparkdeveloperparam_5() const;
  void set_memparkdeveloperparam_5(float value);
  private:
  float _internal_memparkdeveloperparam_5() const;
  void _internal_set_memparkdeveloperparam_5(float value);
  public:

  // optional float memParkDeveloperParam_4 = 419;
  bool has_memparkdeveloperparam_4() const;
  private:
  bool _internal_has_memparkdeveloperparam_4() const;
  public:
  void clear_memparkdeveloperparam_4();
  float memparkdeveloperparam_4() const;
  void set_memparkdeveloperparam_4(float value);
  private:
  float _internal_memparkdeveloperparam_4() const;
  void _internal_set_memparkdeveloperparam_4(float value);
  public:

  // optional float memParkDeveloperParam_7 = 448;
  bool has_memparkdeveloperparam_7() const;
  private:
  bool _internal_has_memparkdeveloperparam_7() const;
  public:
  void clear_memparkdeveloperparam_7();
  float memparkdeveloperparam_7() const;
  void set_memparkdeveloperparam_7(float value);
  private:
  float _internal_memparkdeveloperparam_7() const;
  void _internal_set_memparkdeveloperparam_7(float value);
  public:

  // optional float memParkDeveloperParam_6 = 481;
  bool has_memparkdeveloperparam_6() const;
  private:
  bool _internal_has_memparkdeveloperparam_6() const;
  public:
  void clear_memparkdeveloperparam_6();
  float memparkdeveloperparam_6() const;
  void set_memparkdeveloperparam_6(float value);
  private:
  float _internal_memparkdeveloperparam_6() const;
  void _internal_set_memparkdeveloperparam_6(float value);
  public:

  // optional uint32 minRequiredRelocalizationProb_perc = 913;
  bool has_minrequiredrelocalizationprob_perc() const;
  private:
  bool _internal_has_minrequiredrelocalizationprob_perc() const;
  public:
  void clear_minrequiredrelocalizationprob_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 minrequiredrelocalizationprob_perc() const;
  void set_minrequiredrelocalizationprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minrequiredrelocalizationprob_perc() const;
  void _internal_set_minrequiredrelocalizationprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float scanRoiBackExtension_m = 1096;
  bool has_scanroibackextension_m() const;
  private:
  bool _internal_has_scanroibackextension_m() const;
  public:
  void clear_scanroibackextension_m();
  float scanroibackextension_m() const;
  void set_scanroibackextension_m(float value);
  private:
  float _internal_scanroibackextension_m() const;
  void _internal_set_scanroibackextension_m(float value);
  public:

  // optional float scanRoiFrontExtension_m = 1099;
  bool has_scanroifrontextension_m() const;
  private:
  bool _internal_has_scanroifrontextension_m() const;
  public:
  void clear_scanroifrontextension_m();
  float scanroifrontextension_m() const;
  void set_scanroifrontextension_m(float value);
  private:
  float _internal_scanroifrontextension_m() const;
  void _internal_set_scanroifrontextension_m(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float scanRoiHalfWidth_m = 3018;
  bool has_scanroihalfwidth_m() const;
  private:
  bool _internal_has_scanroihalfwidth_m() const;
  public:
  void clear_scanroihalfwidth_m();
  float scanroihalfwidth_m() const;
  void set_scanroihalfwidth_m(float value);
  private:
  float _internal_scanroihalfwidth_m() const;
  void _internal_set_scanroihalfwidth_m(float value);
  public:

  // optional bool functionActive_nu = 4064;
  bool has_functionactive_nu() const;
  private:
  bool _internal_has_functionactive_nu() const;
  public:
  void clear_functionactive_nu();
  bool functionactive_nu() const;
  void set_functionactive_nu(bool value);
  private:
  bool _internal_functionactive_nu() const;
  void _internal_set_functionactive_nu(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.mem_park_params.MemParkParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float memparkdeveloperparam_1_;
  float memparkdeveloperparam_0_;
  float memparkdeveloperparam_3_;
  float memparkdeveloperparam_2_;
  float memparkdeveloperparam_5_;
  float memparkdeveloperparam_4_;
  float memparkdeveloperparam_7_;
  float memparkdeveloperparam_6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minrequiredrelocalizationprob_perc_;
  float scanroibackextension_m_;
  float scanroifrontextension_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float scanroihalfwidth_m_;
  bool functionactive_nu_;
  friend struct ::TableStruct_mf_5fmempark_2fmem_5fpark_5fparams_2eproto;
};
// -------------------------------------------------------------------

class MemParkParams_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.mem_park_params.MemParkParams_array_port) */ {
 public:
  MemParkParams_array_port();
  virtual ~MemParkParams_array_port();

  MemParkParams_array_port(const MemParkParams_array_port& from);
  MemParkParams_array_port(MemParkParams_array_port&& from) noexcept
    : MemParkParams_array_port() {
    *this = ::std::move(from);
  }

  inline MemParkParams_array_port& operator=(const MemParkParams_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemParkParams_array_port& operator=(MemParkParams_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemParkParams_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemParkParams_array_port* internal_default_instance() {
    return reinterpret_cast<const MemParkParams_array_port*>(
               &_MemParkParams_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemParkParams_array_port& a, MemParkParams_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(MemParkParams_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemParkParams_array_port* New() const final {
    return CreateMaybeMessage<MemParkParams_array_port>(nullptr);
  }

  MemParkParams_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemParkParams_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemParkParams_array_port& from);
  void MergeFrom(const MemParkParams_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemParkParams_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.mem_park_params.MemParkParams_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto);
    return ::descriptor_table_mf_5fmempark_2fmem_5fpark_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1226,
  };
  // repeated .pb.mf_mempark.mem_park_params.MemParkParams data = 1226;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_mempark::mem_park_params::MemParkParams* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_params::MemParkParams >*
      mutable_data();
  private:
  const ::pb::mf_mempark::mem_park_params::MemParkParams& _internal_data(int index) const;
  ::pb::mf_mempark::mem_park_params::MemParkParams* _internal_add_data();
  public:
  const ::pb::mf_mempark::mem_park_params::MemParkParams& data(int index) const;
  ::pb::mf_mempark::mem_park_params::MemParkParams* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_params::MemParkParams >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.mem_park_params.MemParkParams_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_params::MemParkParams > data_;
  friend struct ::TableStruct_mf_5fmempark_2fmem_5fpark_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemParkParams

// optional uint32 uiVersionNumber = 2124;
inline bool MemParkParams::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MemParkParams::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void MemParkParams::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkParams::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkParams::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void MemParkParams::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  uiversionnumber_ = value;
}
inline void MemParkParams::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool MemParkParams::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool MemParkParams::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& MemParkParams::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& MemParkParams::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* MemParkParams::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.mem_park_params.MemParkParams.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* MemParkParams::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* MemParkParams::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.mem_park_params.MemParkParams.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void MemParkParams::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.mem_park_params.MemParkParams.sSigHeader)
}

// optional bool functionActive_nu = 4064;
inline bool MemParkParams::_internal_has_functionactive_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool MemParkParams::has_functionactive_nu() const {
  return _internal_has_functionactive_nu();
}
inline void MemParkParams::clear_functionactive_nu() {
  functionactive_nu_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool MemParkParams::_internal_functionactive_nu() const {
  return functionactive_nu_;
}
inline bool MemParkParams::functionactive_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.functionActive_nu)
  return _internal_functionactive_nu();
}
inline void MemParkParams::_internal_set_functionactive_nu(bool value) {
  _has_bits_[0] |= 0x00004000u;
  functionactive_nu_ = value;
}
inline void MemParkParams::set_functionactive_nu(bool value) {
  _internal_set_functionactive_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.functionActive_nu)
}

// optional float scanRoiHalfWidth_m = 3018;
inline bool MemParkParams::_internal_has_scanroihalfwidth_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MemParkParams::has_scanroihalfwidth_m() const {
  return _internal_has_scanroihalfwidth_m();
}
inline void MemParkParams::clear_scanroihalfwidth_m() {
  scanroihalfwidth_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float MemParkParams::_internal_scanroihalfwidth_m() const {
  return scanroihalfwidth_m_;
}
inline float MemParkParams::scanroihalfwidth_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.scanRoiHalfWidth_m)
  return _internal_scanroihalfwidth_m();
}
inline void MemParkParams::_internal_set_scanroihalfwidth_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  scanroihalfwidth_m_ = value;
}
inline void MemParkParams::set_scanroihalfwidth_m(float value) {
  _internal_set_scanroihalfwidth_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.scanRoiHalfWidth_m)
}

// optional float scanRoiBackExtension_m = 1096;
inline bool MemParkParams::_internal_has_scanroibackextension_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MemParkParams::has_scanroibackextension_m() const {
  return _internal_has_scanroibackextension_m();
}
inline void MemParkParams::clear_scanroibackextension_m() {
  scanroibackextension_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float MemParkParams::_internal_scanroibackextension_m() const {
  return scanroibackextension_m_;
}
inline float MemParkParams::scanroibackextension_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.scanRoiBackExtension_m)
  return _internal_scanroibackextension_m();
}
inline void MemParkParams::_internal_set_scanroibackextension_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  scanroibackextension_m_ = value;
}
inline void MemParkParams::set_scanroibackextension_m(float value) {
  _internal_set_scanroibackextension_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.scanRoiBackExtension_m)
}

// optional float scanRoiFrontExtension_m = 1099;
inline bool MemParkParams::_internal_has_scanroifrontextension_m() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MemParkParams::has_scanroifrontextension_m() const {
  return _internal_has_scanroifrontextension_m();
}
inline void MemParkParams::clear_scanroifrontextension_m() {
  scanroifrontextension_m_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float MemParkParams::_internal_scanroifrontextension_m() const {
  return scanroifrontextension_m_;
}
inline float MemParkParams::scanroifrontextension_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.scanRoiFrontExtension_m)
  return _internal_scanroifrontextension_m();
}
inline void MemParkParams::_internal_set_scanroifrontextension_m(float value) {
  _has_bits_[0] |= 0x00000800u;
  scanroifrontextension_m_ = value;
}
inline void MemParkParams::set_scanroifrontextension_m(float value) {
  _internal_set_scanroifrontextension_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.scanRoiFrontExtension_m)
}

// optional uint32 minRequiredRelocalizationProb_perc = 913;
inline bool MemParkParams::_internal_has_minrequiredrelocalizationprob_perc() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MemParkParams::has_minrequiredrelocalizationprob_perc() const {
  return _internal_has_minrequiredrelocalizationprob_perc();
}
inline void MemParkParams::clear_minrequiredrelocalizationprob_perc() {
  minrequiredrelocalizationprob_perc_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkParams::_internal_minrequiredrelocalizationprob_perc() const {
  return minrequiredrelocalizationprob_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemParkParams::minrequiredrelocalizationprob_perc() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.minRequiredRelocalizationProb_perc)
  return _internal_minrequiredrelocalizationprob_perc();
}
inline void MemParkParams::_internal_set_minrequiredrelocalizationprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  minrequiredrelocalizationprob_perc_ = value;
}
inline void MemParkParams::set_minrequiredrelocalizationprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minrequiredrelocalizationprob_perc(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.minRequiredRelocalizationProb_perc)
}

// optional float memParkDeveloperParam_0 = 295;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_0() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_0() const {
  return _internal_has_memparkdeveloperparam_0();
}
inline void MemParkParams::clear_memparkdeveloperparam_0() {
  memparkdeveloperparam_0_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_0() const {
  return memparkdeveloperparam_0_;
}
inline float MemParkParams::memparkdeveloperparam_0() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_0)
  return _internal_memparkdeveloperparam_0();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_0(float value) {
  _has_bits_[0] |= 0x00000004u;
  memparkdeveloperparam_0_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_0(float value) {
  _internal_set_memparkdeveloperparam_0(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_0)
}

// optional float memParkDeveloperParam_1 = 262;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_1() const {
  return _internal_has_memparkdeveloperparam_1();
}
inline void MemParkParams::clear_memparkdeveloperparam_1() {
  memparkdeveloperparam_1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_1() const {
  return memparkdeveloperparam_1_;
}
inline float MemParkParams::memparkdeveloperparam_1() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_1)
  return _internal_memparkdeveloperparam_1();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_1(float value) {
  _has_bits_[0] |= 0x00000002u;
  memparkdeveloperparam_1_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_1(float value) {
  _internal_set_memparkdeveloperparam_1(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_1)
}

// optional float memParkDeveloperParam_2 = 357;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_2() const {
  return _internal_has_memparkdeveloperparam_2();
}
inline void MemParkParams::clear_memparkdeveloperparam_2() {
  memparkdeveloperparam_2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_2() const {
  return memparkdeveloperparam_2_;
}
inline float MemParkParams::memparkdeveloperparam_2() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_2)
  return _internal_memparkdeveloperparam_2();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_2(float value) {
  _has_bits_[0] |= 0x00000010u;
  memparkdeveloperparam_2_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_2(float value) {
  _internal_set_memparkdeveloperparam_2(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_2)
}

// optional float memParkDeveloperParam_3 = 324;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_3() const {
  return _internal_has_memparkdeveloperparam_3();
}
inline void MemParkParams::clear_memparkdeveloperparam_3() {
  memparkdeveloperparam_3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_3() const {
  return memparkdeveloperparam_3_;
}
inline float MemParkParams::memparkdeveloperparam_3() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_3)
  return _internal_memparkdeveloperparam_3();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_3(float value) {
  _has_bits_[0] |= 0x00000008u;
  memparkdeveloperparam_3_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_3(float value) {
  _internal_set_memparkdeveloperparam_3(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_3)
}

// optional float memParkDeveloperParam_4 = 419;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_4() const {
  return _internal_has_memparkdeveloperparam_4();
}
inline void MemParkParams::clear_memparkdeveloperparam_4() {
  memparkdeveloperparam_4_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_4() const {
  return memparkdeveloperparam_4_;
}
inline float MemParkParams::memparkdeveloperparam_4() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_4)
  return _internal_memparkdeveloperparam_4();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_4(float value) {
  _has_bits_[0] |= 0x00000040u;
  memparkdeveloperparam_4_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_4(float value) {
  _internal_set_memparkdeveloperparam_4(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_4)
}

// optional float memParkDeveloperParam_5 = 386;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_5() const {
  return _internal_has_memparkdeveloperparam_5();
}
inline void MemParkParams::clear_memparkdeveloperparam_5() {
  memparkdeveloperparam_5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_5() const {
  return memparkdeveloperparam_5_;
}
inline float MemParkParams::memparkdeveloperparam_5() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_5)
  return _internal_memparkdeveloperparam_5();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_5(float value) {
  _has_bits_[0] |= 0x00000020u;
  memparkdeveloperparam_5_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_5(float value) {
  _internal_set_memparkdeveloperparam_5(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_5)
}

// optional float memParkDeveloperParam_6 = 481;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_6() const {
  return _internal_has_memparkdeveloperparam_6();
}
inline void MemParkParams::clear_memparkdeveloperparam_6() {
  memparkdeveloperparam_6_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_6() const {
  return memparkdeveloperparam_6_;
}
inline float MemParkParams::memparkdeveloperparam_6() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_6)
  return _internal_memparkdeveloperparam_6();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_6(float value) {
  _has_bits_[0] |= 0x00000100u;
  memparkdeveloperparam_6_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_6(float value) {
  _internal_set_memparkdeveloperparam_6(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_6)
}

// optional float memParkDeveloperParam_7 = 448;
inline bool MemParkParams::_internal_has_memparkdeveloperparam_7() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MemParkParams::has_memparkdeveloperparam_7() const {
  return _internal_has_memparkdeveloperparam_7();
}
inline void MemParkParams::clear_memparkdeveloperparam_7() {
  memparkdeveloperparam_7_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float MemParkParams::_internal_memparkdeveloperparam_7() const {
  return memparkdeveloperparam_7_;
}
inline float MemParkParams::memparkdeveloperparam_7() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_7)
  return _internal_memparkdeveloperparam_7();
}
inline void MemParkParams::_internal_set_memparkdeveloperparam_7(float value) {
  _has_bits_[0] |= 0x00000080u;
  memparkdeveloperparam_7_ = value;
}
inline void MemParkParams::set_memparkdeveloperparam_7(float value) {
  _internal_set_memparkdeveloperparam_7(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.mem_park_params.MemParkParams.memParkDeveloperParam_7)
}

// -------------------------------------------------------------------

// MemParkParams_array_port

// repeated .pb.mf_mempark.mem_park_params.MemParkParams data = 1226;
inline int MemParkParams_array_port::_internal_data_size() const {
  return data_.size();
}
inline int MemParkParams_array_port::data_size() const {
  return _internal_data_size();
}
inline void MemParkParams_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_mempark::mem_park_params::MemParkParams* MemParkParams_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.mem_park_params.MemParkParams_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_params::MemParkParams >*
MemParkParams_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.mem_park_params.MemParkParams_array_port.data)
  return &data_;
}
inline const ::pb::mf_mempark::mem_park_params::MemParkParams& MemParkParams_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_mempark::mem_park_params::MemParkParams& MemParkParams_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.mem_park_params.MemParkParams_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_mempark::mem_park_params::MemParkParams* MemParkParams_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_mempark::mem_park_params::MemParkParams* MemParkParams_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.mem_park_params.MemParkParams_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::mem_park_params::MemParkParams >&
MemParkParams_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.mem_park_params.MemParkParams_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mem_park_params
}  // namespace mf_mempark
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fmem_5fpark_5fparams_2eproto
