// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/mpstatus.proto

#include "mf_mempark/mpstatus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmemorized_5fslot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemorizedSlot_mf_5fmempark_2fmemorized_5fslot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fmpstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto;
namespace pb {
namespace mf_mempark {
namespace mpstatus {
class MPStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPStatus> _instance;
} _MPStatus_default_instance_;
class MPStatus_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPStatus_array_port> _instance;
} _MPStatus_array_port_default_instance_;
}  // namespace mpstatus
}  // namespace mf_mempark
}  // namespace pb
static void InitDefaultsscc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::mpstatus::_MPStatus_default_instance_;
    new (ptr) ::pb::mf_mempark::mpstatus::MPStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::mpstatus::MPStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto}, {
      &scc_info_MemorizedSlot_mf_5fmempark_2fmemorized_5fslot_2eproto.base,}};

static void InitDefaultsscc_info_MPStatus_array_port_mf_5fmempark_2fmpstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::mpstatus::_MPStatus_array_port_default_instance_;
    new (ptr) ::pb::mf_mempark::mpstatus::MPStatus_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::mpstatus::MPStatus_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MPStatus_array_port_mf_5fmempark_2fmpstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MPStatus_array_port_mf_5fmempark_2fmpstatus_2eproto}, {
      &scc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmempark_2fmpstatus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmempark_2fmpstatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmempark_2fmpstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmempark_2fmpstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, numstoredmemoryparkingslots_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, memorizedparkingslots_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, memoryparkingstate_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, trainingstatus_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, localizationstatus_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus, userupdaterequeststatus_),
  0,
  ~0u,
  2,
  1,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::mpstatus::MPStatus_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::pb::mf_mempark::mpstatus::MPStatus)},
  { 17, 23, sizeof(::pb::mf_mempark::mpstatus::MPStatus_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::mpstatus::_MPStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::mpstatus::_MPStatus_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmempark_2fmpstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031mf_mempark/mpstatus.proto\022\026pb.mf_mempa"
  "rk.mpstatus\032\037mf_mempark/memorized_slot.p"
  "roto\032)mf_mempark/memorized_parking_statu"
  "s.proto\032 mf_mempark/training_status.prot"
  "o\032$mf_mempark/localization_status.proto\032"
  "+mf_mempark/user_update_request_status.p"
  "roto\"\336\003\n\010MPStatus\022\'\n\036numStoredMemoryPark"
  "ingSlots_nu\030\367\026 \001(\r\022K\n\025memorizedParkingSl"
  "ots\030\315\034 \003(\0132+.pb.mf_mempark.memorized_slo"
  "t.MemorizedSlot\022[\n\022memoryParkingState\030\342\006"
  " \001(\0162>.pb.mf_mempark.memorized_parking_s"
  "tatus.MemorizedParkingStatus\022F\n\016training"
  "Status\030\344\004 \001(\0162-.pb.mf_mempark.training_s"
  "tatus.TrainingStatus\022R\n\022localizationStat"
  "us\030\360\014 \001(\01625.pb.mf_mempark.localization_s"
  "tatus.LocalizationStatus\022c\n\027userUpdateRe"
  "questStatus\030\343\014 \001(\0162A.pb.mf_mempark.user_"
  "update_request_status.UserUpdateRequestS"
  "tatus\"F\n\023MPStatus_array_port\022/\n\004data\030\204\016 "
  "\003(\0132 .pb.mf_mempark.mpstatus.MPStatus"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmempark_2fmpstatus_2eproto_deps[5] = {
  &::descriptor_table_mf_5fmempark_2flocalization_5fstatus_2eproto,
  &::descriptor_table_mf_5fmempark_2fmemorized_5fparking_5fstatus_2eproto,
  &::descriptor_table_mf_5fmempark_2fmemorized_5fslot_2eproto,
  &::descriptor_table_mf_5fmempark_2ftraining_5fstatus_2eproto,
  &::descriptor_table_mf_5fmempark_2fuser_5fupdate_5frequest_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmempark_2fmpstatus_2eproto_sccs[2] = {
  &scc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto.base,
  &scc_info_MPStatus_array_port_mf_5fmempark_2fmpstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmempark_2fmpstatus_2eproto_once;
static bool descriptor_table_mf_5fmempark_2fmpstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fmpstatus_2eproto = {
  &descriptor_table_mf_5fmempark_2fmpstatus_2eproto_initialized, descriptor_table_protodef_mf_5fmempark_2fmpstatus_2eproto, "mf_mempark/mpstatus.proto", 797,
  &descriptor_table_mf_5fmempark_2fmpstatus_2eproto_once, descriptor_table_mf_5fmempark_2fmpstatus_2eproto_sccs, descriptor_table_mf_5fmempark_2fmpstatus_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_mf_5fmempark_2fmpstatus_2eproto::offsets,
  file_level_metadata_mf_5fmempark_2fmpstatus_2eproto, 2, file_level_enum_descriptors_mf_5fmempark_2fmpstatus_2eproto, file_level_service_descriptors_mf_5fmempark_2fmpstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmempark_2fmpstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmempark_2fmpstatus_2eproto), true);
namespace pb {
namespace mf_mempark {
namespace mpstatus {

// ===================================================================

void MPStatus::InitAsDefaultInstance() {
}
class MPStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<MPStatus>()._has_bits_);
  static void set_has_numstoredmemoryparkingslots_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_memoryparkingstate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trainingstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localizationstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_userupdaterequeststatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void MPStatus::clear_memorizedparkingslots() {
  memorizedparkingslots_.Clear();
}
MPStatus::MPStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.mpstatus.MPStatus)
}
MPStatus::MPStatus(const MPStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      memorizedparkingslots_(from.memorizedparkingslots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&numstoredmemoryparkingslots_nu_, &from.numstoredmemoryparkingslots_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&localizationstatus_) -
    reinterpret_cast<char*>(&numstoredmemoryparkingslots_nu_)) + sizeof(localizationstatus_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.mpstatus.MPStatus)
}

void MPStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto.base);
  ::memset(&numstoredmemoryparkingslots_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localizationstatus_) -
      reinterpret_cast<char*>(&numstoredmemoryparkingslots_nu_)) + sizeof(localizationstatus_));
}

MPStatus::~MPStatus() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.mpstatus.MPStatus)
  SharedDtor();
}

void MPStatus::SharedDtor() {
}

void MPStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPStatus& MPStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPStatus_mf_5fmempark_2fmpstatus_2eproto.base);
  return *internal_default_instance();
}


void MPStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.mpstatus.MPStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memorizedparkingslots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&numstoredmemoryparkingslots_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&localizationstatus_) -
        reinterpret_cast<char*>(&numstoredmemoryparkingslots_nu_)) + sizeof(localizationstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MPStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.mf_mempark.training_status.TrainingStatus trainingStatus = 612;
      case 612:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::training_status::TrainingStatus_IsValid(val))) {
            _internal_set_trainingstatus(static_cast<::pb::mf_mempark::training_status::TrainingStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(612, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.memorized_parking_status.MemorizedParkingStatus memoryParkingState = 866;
      case 866:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus_IsValid(val))) {
            _internal_set_memoryparkingstate(static_cast<::pb::mf_mempark::memorized_parking_status::MemorizedParkingStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(866, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.user_update_request_status.UserUpdateRequestStatus userUpdateRequestStatus = 1635;
      case 1635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::user_update_request_status::UserUpdateRequestStatus_IsValid(val))) {
            _internal_set_userupdaterequeststatus(static_cast<::pb::mf_mempark::user_update_request_status::UserUpdateRequestStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1635, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.localization_status.LocalizationStatus localizationStatus = 1648;
      case 1648:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::localization_status::LocalizationStatus_IsValid(val))) {
            _internal_set_localizationstatus(static_cast<::pb::mf_mempark::localization_status::LocalizationStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1648, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 numStoredMemoryParkingSlots_nu = 2935;
      case 2935:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_numstoredmemoryparkingslots_nu(&has_bits);
          numstoredmemoryparkingslots_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.mf_mempark.memorized_slot.MemorizedSlot memorizedParkingSlots = 3661;
      case 3661:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_add_memorizedparkingslots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.mpstatus.MPStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.mf_mempark.training_status.TrainingStatus trainingStatus = 612;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      612, this->_internal_trainingstatus(), target);
  }

  // optional .pb.mf_mempark.memorized_parking_status.MemorizedParkingStatus memoryParkingState = 866;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      866, this->_internal_memoryparkingstate(), target);
  }

  // optional .pb.mf_mempark.user_update_request_status.UserUpdateRequestStatus userUpdateRequestStatus = 1635;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1635, this->_internal_userupdaterequeststatus(), target);
  }

  // optional .pb.mf_mempark.localization_status.LocalizationStatus localizationStatus = 1648;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1648, this->_internal_localizationstatus(), target);
  }

  // optional uint32 numStoredMemoryParkingSlots_nu = 2935;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2935, this->_internal_numstoredmemoryparkingslots_nu(), target);
  }

  // repeated .pb.mf_mempark.memorized_slot.MemorizedSlot memorizedParkingSlots = 3661;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memorizedparkingslots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3661, this->_internal_memorizedparkingslots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.mpstatus.MPStatus)
  return target;
}

size_t MPStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.mpstatus.MPStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.memorized_slot.MemorizedSlot memorizedParkingSlots = 3661;
  total_size += 3UL * this->_internal_memorizedparkingslots_size();
  for (const auto& msg : this->memorizedparkingslots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 numStoredMemoryParkingSlots_nu = 2935;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numstoredmemoryparkingslots_nu());
    }

    // optional .pb.mf_mempark.training_status.TrainingStatus trainingStatus = 612;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trainingstatus());
    }

    // optional .pb.mf_mempark.memorized_parking_status.MemorizedParkingStatus memoryParkingState = 866;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_memoryparkingstate());
    }

    // optional .pb.mf_mempark.user_update_request_status.UserUpdateRequestStatus userUpdateRequestStatus = 1635;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_userupdaterequeststatus());
    }

    // optional .pb.mf_mempark.localization_status.LocalizationStatus localizationStatus = 1648;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_localizationstatus());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.mpstatus.MPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MPStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.mpstatus.MPStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.mpstatus.MPStatus)
    MergeFrom(*source);
  }
}

void MPStatus::MergeFrom(const MPStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.mpstatus.MPStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memorizedparkingslots_.MergeFrom(from.memorizedparkingslots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      numstoredmemoryparkingslots_nu_ = from.numstoredmemoryparkingslots_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      trainingstatus_ = from.trainingstatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      memoryparkingstate_ = from.memoryparkingstate_;
    }
    if (cached_has_bits & 0x00000008u) {
      userupdaterequeststatus_ = from.userupdaterequeststatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      localizationstatus_ = from.localizationstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MPStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.mpstatus.MPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPStatus::CopyFrom(const MPStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.mpstatus.MPStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPStatus::IsInitialized() const {
  return true;
}

void MPStatus::InternalSwap(MPStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  memorizedparkingslots_.InternalSwap(&other->memorizedparkingslots_);
  swap(numstoredmemoryparkingslots_nu_, other->numstoredmemoryparkingslots_nu_);
  swap(trainingstatus_, other->trainingstatus_);
  swap(memoryparkingstate_, other->memoryparkingstate_);
  swap(userupdaterequeststatus_, other->userupdaterequeststatus_);
  swap(localizationstatus_, other->localizationstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPStatus_array_port::InitAsDefaultInstance() {
}
class MPStatus_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<MPStatus_array_port>()._has_bits_);
};

MPStatus_array_port::MPStatus_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.mpstatus.MPStatus_array_port)
}
MPStatus_array_port::MPStatus_array_port(const MPStatus_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.mpstatus.MPStatus_array_port)
}

void MPStatus_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPStatus_array_port_mf_5fmempark_2fmpstatus_2eproto.base);
}

MPStatus_array_port::~MPStatus_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.mpstatus.MPStatus_array_port)
  SharedDtor();
}

void MPStatus_array_port::SharedDtor() {
}

void MPStatus_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPStatus_array_port& MPStatus_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPStatus_array_port_mf_5fmempark_2fmpstatus_2eproto.base);
  return *internal_default_instance();
}


void MPStatus_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.mpstatus.MPStatus_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MPStatus_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_mempark.mpstatus.MPStatus data = 1796;
      case 1796:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<14370>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPStatus_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.mpstatus.MPStatus_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.mpstatus.MPStatus data = 1796;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1796, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.mpstatus.MPStatus_array_port)
  return target;
}

size_t MPStatus_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.mpstatus.MPStatus_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.mpstatus.MPStatus data = 1796;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPStatus_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.mpstatus.MPStatus_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const MPStatus_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPStatus_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.mpstatus.MPStatus_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.mpstatus.MPStatus_array_port)
    MergeFrom(*source);
  }
}

void MPStatus_array_port::MergeFrom(const MPStatus_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.mpstatus.MPStatus_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MPStatus_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.mpstatus.MPStatus_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPStatus_array_port::CopyFrom(const MPStatus_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.mpstatus.MPStatus_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPStatus_array_port::IsInitialized() const {
  return true;
}

void MPStatus_array_port::InternalSwap(MPStatus_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPStatus_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mpstatus
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::mpstatus::MPStatus* Arena::CreateMaybeMessage< ::pb::mf_mempark::mpstatus::MPStatus >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::mpstatus::MPStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::mpstatus::MPStatus_array_port* Arena::CreateMaybeMessage< ::pb::mf_mempark::mpstatus::MPStatus_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::mpstatus::MPStatus_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
