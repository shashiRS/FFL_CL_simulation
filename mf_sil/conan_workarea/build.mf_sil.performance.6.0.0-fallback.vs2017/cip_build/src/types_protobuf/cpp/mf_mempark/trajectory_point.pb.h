// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/trajectory_point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2ftrajectory_5fpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2ftrajectory_5fpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "lsm_geoml/pose_pod.pb.h"
#include "ap_commonvehsigprovider/gpsdata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2ftrajectory_5fpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmempark_2ftrajectory_5fpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2ftrajectory_5fpoint_2eproto;
namespace pb {
namespace mf_mempark {
namespace trajectory_point {
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
class TrajectoryPoint_array_port;
class TrajectoryPoint_array_portDefaultTypeInternal;
extern TrajectoryPoint_array_portDefaultTypeInternal _TrajectoryPoint_array_port_default_instance_;
}  // namespace trajectory_point
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_mempark::trajectory_point::TrajectoryPoint* Arena::CreateMaybeMessage<::pb::mf_mempark::trajectory_point::TrajectoryPoint>(Arena*);
template<> ::pb::mf_mempark::trajectory_point::TrajectoryPoint_array_port* Arena::CreateMaybeMessage<::pb::mf_mempark::trajectory_point::TrajectoryPoint_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_mempark {
namespace trajectory_point {

// ===================================================================

class TrajectoryPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.trajectory_point.TrajectoryPoint) */ {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(nullptr);
  }

  TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.trajectory_point.TrajectoryPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2ftrajectory_5fpoint_2eproto);
    return ::descriptor_table_mf_5fmempark_2ftrajectory_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointGNSSFieldNumber = 336,
    kPointPoseFieldNumber = 2139,
    kPointIDFieldNumber = 139,
    kIsGNSSValidFieldNumber = 2210,
  };
  // optional .pb.ap_commonvehsigprovider.gpsdata.GPSData pointGNSS = 336;
  bool has_pointgnss() const;
  private:
  bool _internal_has_pointgnss() const;
  public:
  void clear_pointgnss();
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& pointgnss() const;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* release_pointgnss();
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* mutable_pointgnss();
  void set_allocated_pointgnss(::pb::ap_commonvehsigprovider::gpsdata::GPSData* pointgnss);
  private:
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& _internal_pointgnss() const;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* _internal_mutable_pointgnss();
  public:

  // optional .pb.lsm_geoml.pose_pod.Pose_POD pointPose = 2139;
  bool has_pointpose() const;
  private:
  bool _internal_has_pointpose() const;
  public:
  void clear_pointpose();
  const ::pb::lsm_geoml::pose_pod::Pose_POD& pointpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* release_pointpose();
  ::pb::lsm_geoml::pose_pod::Pose_POD* mutable_pointpose();
  void set_allocated_pointpose(::pb::lsm_geoml::pose_pod::Pose_POD* pointpose);
  private:
  const ::pb::lsm_geoml::pose_pod::Pose_POD& _internal_pointpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* _internal_mutable_pointpose();
  public:

  // optional uint32 pointID = 139;
  bool has_pointid() const;
  private:
  bool _internal_has_pointid() const;
  public:
  void clear_pointid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pointid() const;
  void set_pointid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pointid() const;
  void _internal_set_pointid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isGNSSValid = 2210;
  bool has_isgnssvalid() const;
  private:
  bool _internal_has_isgnssvalid() const;
  public:
  void clear_isgnssvalid();
  bool isgnssvalid() const;
  void set_isgnssvalid(bool value);
  private:
  bool _internal_isgnssvalid() const;
  void _internal_set_isgnssvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.trajectory_point.TrajectoryPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* pointgnss_;
  ::pb::lsm_geoml::pose_pod::Pose_POD* pointpose_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pointid_;
  bool isgnssvalid_;
  friend struct ::TableStruct_mf_5fmempark_2ftrajectory_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPoint_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port) */ {
 public:
  TrajectoryPoint_array_port();
  virtual ~TrajectoryPoint_array_port();

  TrajectoryPoint_array_port(const TrajectoryPoint_array_port& from);
  TrajectoryPoint_array_port(TrajectoryPoint_array_port&& from) noexcept
    : TrajectoryPoint_array_port() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint_array_port& operator=(const TrajectoryPoint_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint_array_port& operator=(TrajectoryPoint_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPoint_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint_array_port* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint_array_port*>(
               &_TrajectoryPoint_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrajectoryPoint_array_port& a, TrajectoryPoint_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint_array_port* New() const final {
    return CreateMaybeMessage<TrajectoryPoint_array_port>(nullptr);
  }

  TrajectoryPoint_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPoint_array_port& from);
  void MergeFrom(const TrajectoryPoint_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2ftrajectory_5fpoint_2eproto);
    return ::descriptor_table_mf_5fmempark_2ftrajectory_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2768,
  };
  // repeated .pb.mf_mempark.trajectory_point.TrajectoryPoint data = 2768;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_mempark::trajectory_point::TrajectoryPoint* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >*
      mutable_data();
  private:
  const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& _internal_data(int index) const;
  ::pb::mf_mempark::trajectory_point::TrajectoryPoint* _internal_add_data();
  public:
  const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& data(int index) const;
  ::pb::mf_mempark::trajectory_point::TrajectoryPoint* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint > data_;
  friend struct ::TableStruct_mf_5fmempark_2ftrajectory_5fpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryPoint

// optional uint32 pointID = 139;
inline bool TrajectoryPoint::_internal_has_pointid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_pointid() const {
  return _internal_has_pointid();
}
inline void TrajectoryPoint::clear_pointid() {
  pointid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajectoryPoint::_internal_pointid() const {
  return pointid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrajectoryPoint::pointid() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointID)
  return _internal_pointid();
}
inline void TrajectoryPoint::_internal_set_pointid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pointid_ = value;
}
inline void TrajectoryPoint::set_pointid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pointid(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointID)
}

// optional .pb.lsm_geoml.pose_pod.Pose_POD pointPose = 2139;
inline bool TrajectoryPoint::_internal_has_pointpose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pointpose_ != nullptr);
  return value;
}
inline bool TrajectoryPoint::has_pointpose() const {
  return _internal_has_pointpose();
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& TrajectoryPoint::_internal_pointpose() const {
  const ::pb::lsm_geoml::pose_pod::Pose_POD* p = pointpose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      &::pb::lsm_geoml::pose_pod::_Pose_POD_default_instance_);
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& TrajectoryPoint::pointpose() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointPose)
  return _internal_pointpose();
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* TrajectoryPoint::release_pointpose() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointPose)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::lsm_geoml::pose_pod::Pose_POD* temp = pointpose_;
  pointpose_ = nullptr;
  return temp;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* TrajectoryPoint::_internal_mutable_pointpose() {
  _has_bits_[0] |= 0x00000002u;
  if (pointpose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lsm_geoml::pose_pod::Pose_POD>(GetArenaNoVirtual());
    pointpose_ = p;
  }
  return pointpose_;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* TrajectoryPoint::mutable_pointpose() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointPose)
  return _internal_mutable_pointpose();
}
inline void TrajectoryPoint::set_allocated_pointpose(::pb::lsm_geoml::pose_pod::Pose_POD* pointpose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pointpose_);
  }
  if (pointpose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointpose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointpose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pointpose_ = pointpose;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointPose)
}

// optional .pb.ap_commonvehsigprovider.gpsdata.GPSData pointGNSS = 336;
inline bool TrajectoryPoint::_internal_has_pointgnss() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pointgnss_ != nullptr);
  return value;
}
inline bool TrajectoryPoint::has_pointgnss() const {
  return _internal_has_pointgnss();
}
inline const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& TrajectoryPoint::_internal_pointgnss() const {
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData* p = pointgnss_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_commonvehsigprovider::gpsdata::GPSData*>(
      &::pb::ap_commonvehsigprovider::gpsdata::_GPSData_default_instance_);
}
inline const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& TrajectoryPoint::pointgnss() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointGNSS)
  return _internal_pointgnss();
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* TrajectoryPoint::release_pointgnss() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointGNSS)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* temp = pointgnss_;
  pointgnss_ = nullptr;
  return temp;
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* TrajectoryPoint::_internal_mutable_pointgnss() {
  _has_bits_[0] |= 0x00000001u;
  if (pointgnss_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_commonvehsigprovider::gpsdata::GPSData>(GetArenaNoVirtual());
    pointgnss_ = p;
  }
  return pointgnss_;
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* TrajectoryPoint::mutable_pointgnss() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointGNSS)
  return _internal_mutable_pointgnss();
}
inline void TrajectoryPoint::set_allocated_pointgnss(::pb::ap_commonvehsigprovider::gpsdata::GPSData* pointgnss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pointgnss_);
  }
  if (pointgnss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointgnss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointgnss, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pointgnss_ = pointgnss;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.trajectory_point.TrajectoryPoint.pointGNSS)
}

// optional bool isGNSSValid = 2210;
inline bool TrajectoryPoint::_internal_has_isgnssvalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrajectoryPoint::has_isgnssvalid() const {
  return _internal_has_isgnssvalid();
}
inline void TrajectoryPoint::clear_isgnssvalid() {
  isgnssvalid_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TrajectoryPoint::_internal_isgnssvalid() const {
  return isgnssvalid_;
}
inline bool TrajectoryPoint::isgnssvalid() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.trajectory_point.TrajectoryPoint.isGNSSValid)
  return _internal_isgnssvalid();
}
inline void TrajectoryPoint::_internal_set_isgnssvalid(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isgnssvalid_ = value;
}
inline void TrajectoryPoint::set_isgnssvalid(bool value) {
  _internal_set_isgnssvalid(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.trajectory_point.TrajectoryPoint.isGNSSValid)
}

// -------------------------------------------------------------------

// TrajectoryPoint_array_port

// repeated .pb.mf_mempark.trajectory_point.TrajectoryPoint data = 2768;
inline int TrajectoryPoint_array_port::_internal_data_size() const {
  return data_.size();
}
inline int TrajectoryPoint_array_port::data_size() const {
  return _internal_data_size();
}
inline void TrajectoryPoint_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_mempark::trajectory_point::TrajectoryPoint* TrajectoryPoint_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >*
TrajectoryPoint_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port.data)
  return &data_;
}
inline const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& TrajectoryPoint_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_mempark::trajectory_point::TrajectoryPoint& TrajectoryPoint_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_mempark::trajectory_point::TrajectoryPoint* TrajectoryPoint_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_mempark::trajectory_point::TrajectoryPoint* TrajectoryPoint_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::trajectory_point::TrajectoryPoint >&
TrajectoryPoint_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.trajectory_point.TrajectoryPoint_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trajectory_point
}  // namespace mf_mempark
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2ftrajectory_5fpoint_2eproto
