// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/system_defined_pose_port.proto

#include "mf_mempark/system_defined_pose_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fgeoml_2fpose_5fpod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto;
namespace pb {
namespace mf_mempark {
namespace system_defined_pose_port {
class SystemDefinedPosePortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemDefinedPosePort> _instance;
} _SystemDefinedPosePort_default_instance_;
class SystemDefinedPosePort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemDefinedPosePort_array_port> _instance;
} _SystemDefinedPosePort_array_port_default_instance_;
}  // namespace system_defined_pose_port
}  // namespace mf_mempark
}  // namespace pb
static void InitDefaultsscc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::system_defined_pose_port::_SystemDefinedPosePort_default_instance_;
    new (ptr) ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto.base,}};

static void InitDefaultsscc_info_SystemDefinedPosePort_array_port_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_mempark::system_defined_pose_port::_SystemDefinedPosePort_array_port_default_instance_;
    new (ptr) ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemDefinedPosePort_array_port_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SystemDefinedPosePort_array_port_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto}, {
      &scc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, valid_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, targetposeid_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, currentegoinreference_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, targetposeinreference_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, curvature_1pm_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, side_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort, type_),
  5,
  0,
  3,
  7,
  2,
  1,
  4,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort)},
  { 23, 29, sizeof(::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::system_defined_pose_port::_SystemDefinedPosePort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_mempark::system_defined_pose_port::_SystemDefinedPosePort_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)mf_mempark/system_defined_pose_port.pr"
  "oto\022&pb.mf_mempark.system_defined_pose_p"
  "ort\032\027eco/signal_header.proto\032\030lsm_geoml/"
  "pose_pod.proto\032)mf_mempark/system_define"
  "d_pose_side.proto\032)mf_mempark/system_def"
  "ined_pose_type.proto\"\307\003\n\025SystemDefinedPo"
  "sePort\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsSig"
  "Header\030\211\010 \001(\0132\".pb.eco.signal_header.Sig"
  "nalHeader\022\016\n\005valid\030\275\t \001(\010\022\025\n\014targetPoseI"
  "D\030\333\027 \001(\r\022\?\n\025currentEgoInReference\030\332\014 \001(\013"
  "2\037.pb.lsm_geoml.pose_pod.Pose_POD\022\?\n\025tar"
  "getPoseInReference\030\234\t \001(\0132\037.pb.lsm_geoml"
  ".pose_pod.Pose_POD\022\026\n\rcurvature_1pm\030\213\014 \001"
  "(\002\022L\n\004side\030\366\027 \001(\0162=.pb.mf_mempark.system"
  "_defined_pose_side.SystemDefinedPoseSide"
  "\022L\n\004type\030\225\027 \001(\0162=.pb.mf_mempark.system_d"
  "efined_pose_type.SystemDefinedPoseType\"p"
  "\n SystemDefinedPosePort_array_port\022L\n\004da"
  "ta\030\276\007 \003(\0132=.pb.mf_mempark.system_defined"
  "_pose_port.SystemDefinedPosePort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_deps[4] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
  &::descriptor_table_lsm_5fgeoml_2fpose_5fpod_2eproto,
  &::descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fside_2eproto,
  &::descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_sccs[2] = {
  &scc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto.base,
  &scc_info_SystemDefinedPosePort_array_port_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_once;
static bool descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto = {
  &descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_initialized, descriptor_table_protodef_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto, "mf_mempark/system_defined_pose_port.proto", 792,
  &descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_once, descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_sccs, descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto::offsets,
  file_level_metadata_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto, 2, file_level_enum_descriptors_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto, file_level_service_descriptors_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto), true);
namespace pb {
namespace mf_mempark {
namespace system_defined_pose_port {

// ===================================================================

void SystemDefinedPosePort::InitAsDefaultInstance() {
  ::pb::mf_mempark::system_defined_pose_port::_SystemDefinedPosePort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::mf_mempark::system_defined_pose_port::_SystemDefinedPosePort_default_instance_._instance.get_mutable()->currentegoinreference_ = const_cast< ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      ::pb::lsm_geoml::pose_pod::Pose_POD::internal_default_instance());
  ::pb::mf_mempark::system_defined_pose_port::_SystemDefinedPosePort_default_instance_._instance.get_mutable()->targetposeinreference_ = const_cast< ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      ::pb::lsm_geoml::pose_pod::Pose_POD::internal_default_instance());
}
class SystemDefinedPosePort::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemDefinedPosePort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const SystemDefinedPosePort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_targetposeid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::pb::lsm_geoml::pose_pod::Pose_POD& currentegoinreference(const SystemDefinedPosePort* msg);
  static void set_has_currentegoinreference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::lsm_geoml::pose_pod::Pose_POD& targetposeinreference(const SystemDefinedPosePort* msg);
  static void set_has_targetposeinreference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curvature_1pm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
SystemDefinedPosePort::_Internal::ssigheader(const SystemDefinedPosePort* msg) {
  return *msg->ssigheader_;
}
const ::pb::lsm_geoml::pose_pod::Pose_POD&
SystemDefinedPosePort::_Internal::currentegoinreference(const SystemDefinedPosePort* msg) {
  return *msg->currentegoinreference_;
}
const ::pb::lsm_geoml::pose_pod::Pose_POD&
SystemDefinedPosePort::_Internal::targetposeinreference(const SystemDefinedPosePort* msg) {
  return *msg->targetposeinreference_;
}
void SystemDefinedPosePort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemDefinedPosePort::clear_currentegoinreference() {
  if (currentegoinreference_ != nullptr) currentegoinreference_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SystemDefinedPosePort::clear_targetposeinreference() {
  if (targetposeinreference_ != nullptr) targetposeinreference_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemDefinedPosePort::SystemDefinedPosePort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
}
SystemDefinedPosePort::SystemDefinedPosePort(const SystemDefinedPosePort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_targetposeinreference()) {
    targetposeinreference_ = new ::pb::lsm_geoml::pose_pod::Pose_POD(*from.targetposeinreference_);
  } else {
    targetposeinreference_ = nullptr;
  }
  if (from._internal_has_currentegoinreference()) {
    currentegoinreference_ = new ::pb::lsm_geoml::pose_pod::Pose_POD(*from.currentegoinreference_);
  } else {
    currentegoinreference_ = nullptr;
  }
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
}

void SystemDefinedPosePort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(side_));
}

SystemDefinedPosePort::~SystemDefinedPosePort() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  SharedDtor();
}

void SystemDefinedPosePort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete targetposeinreference_;
  if (this != internal_default_instance()) delete currentegoinreference_;
}

void SystemDefinedPosePort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemDefinedPosePort& SystemDefinedPosePort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemDefinedPosePort_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto.base);
  return *internal_default_instance();
}


void SystemDefinedPosePort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(targetposeinreference_ != nullptr);
      targetposeinreference_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(currentegoinreference_ != nullptr);
      currentegoinreference_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&targetposeid_) -
        reinterpret_cast<char*>(&valid_)) + sizeof(targetposeid_));
  }
  side_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SystemDefinedPosePort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_geoml.pose_pod.Pose_POD targetPoseInReference = 1180;
      case 1180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetposeinreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool valid = 1213;
      case 1213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float curvature_1pm = 1547;
      case 1547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_curvature_1pm(&has_bits);
          curvature_1pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_geoml.pose_pod.Pose_POD currentEgoInReference = 1626;
      case 1626:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentegoinreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType type = 2965;
      case 2965:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType_IsValid(val))) {
            _internal_set_type(static_cast<::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2965, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 targetPoseID = 3035;
      case 3035:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_targetposeid(&has_bits);
          targetposeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide side = 3062;
      case 3062:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide_IsValid(val))) {
            _internal_set_side(static_cast<::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3062, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemDefinedPosePort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional .pb.lsm_geoml.pose_pod.Pose_POD targetPoseInReference = 1180;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1180, _Internal::targetposeinreference(this), target, stream);
  }

  // optional bool valid = 1213;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1213, this->_internal_valid(), target);
  }

  // optional float curvature_1pm = 1547;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1547, this->_internal_curvature_1pm(), target);
  }

  // optional .pb.lsm_geoml.pose_pod.Pose_POD currentEgoInReference = 1626;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1626, _Internal::currentegoinreference(this), target, stream);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType type = 2965;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2965, this->_internal_type(), target);
  }

  // optional uint32 targetPoseID = 3035;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3035, this->_internal_targetposeid(), target);
  }

  // optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide side = 3062;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3062, this->_internal_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  return target;
}

size_t SystemDefinedPosePort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.lsm_geoml.pose_pod.Pose_POD targetPoseInReference = 1180;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *targetposeinreference_);
    }

    // optional .pb.lsm_geoml.pose_pod.Pose_POD currentEgoInReference = 1626;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *currentegoinreference_);
    }

    // optional bool valid = 1213;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional float curvature_1pm = 1547;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType type = 2965;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 targetPoseID = 3035;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_targetposeid());
    }

  }
  // optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide side = 3062;
  if (cached_has_bits & 0x00000100u) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemDefinedPosePort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemDefinedPosePort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemDefinedPosePort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
    MergeFrom(*source);
  }
}

void SystemDefinedPosePort::MergeFrom(const SystemDefinedPosePort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_targetposeinreference()->::pb::lsm_geoml::pose_pod::Pose_POD::MergeFrom(from._internal_targetposeinreference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_currentegoinreference()->::pb::lsm_geoml::pose_pod::Pose_POD::MergeFrom(from._internal_currentegoinreference());
    }
    if (cached_has_bits & 0x00000008u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      curvature_1pm_ = from.curvature_1pm_;
    }
    if (cached_has_bits & 0x00000020u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      targetposeid_ = from.targetposeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_side(from._internal_side());
  }
}

void SystemDefinedPosePort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemDefinedPosePort::CopyFrom(const SystemDefinedPosePort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemDefinedPosePort::IsInitialized() const {
  return true;
}

void SystemDefinedPosePort::InternalSwap(SystemDefinedPosePort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(targetposeinreference_, other->targetposeinreference_);
  swap(currentegoinreference_, other->currentegoinreference_);
  swap(valid_, other->valid_);
  swap(curvature_1pm_, other->curvature_1pm_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(type_, other->type_);
  swap(targetposeid_, other->targetposeid_);
  swap(side_, other->side_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemDefinedPosePort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SystemDefinedPosePort_array_port::InitAsDefaultInstance() {
}
class SystemDefinedPosePort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemDefinedPosePort_array_port>()._has_bits_);
};

SystemDefinedPosePort_array_port::SystemDefinedPosePort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
}
SystemDefinedPosePort_array_port::SystemDefinedPosePort_array_port(const SystemDefinedPosePort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
}

void SystemDefinedPosePort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemDefinedPosePort_array_port_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto.base);
}

SystemDefinedPosePort_array_port::~SystemDefinedPosePort_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  SharedDtor();
}

void SystemDefinedPosePort_array_port::SharedDtor() {
}

void SystemDefinedPosePort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemDefinedPosePort_array_port& SystemDefinedPosePort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemDefinedPosePort_array_port_mf_5fmempark_2fsystem_5fdefined_5fpose_5fport_2eproto.base);
  return *internal_default_instance();
}


void SystemDefinedPosePort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SystemDefinedPosePort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort data = 958;
      case 958:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<7666>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemDefinedPosePort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort data = 958;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(958, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  return target;
}

size_t SystemDefinedPosePort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort data = 958;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemDefinedPosePort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemDefinedPosePort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemDefinedPosePort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
    MergeFrom(*source);
  }
}

void SystemDefinedPosePort_array_port::MergeFrom(const SystemDefinedPosePort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SystemDefinedPosePort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemDefinedPosePort_array_port::CopyFrom(const SystemDefinedPosePort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_mempark.system_defined_pose_port.SystemDefinedPosePort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemDefinedPosePort_array_port::IsInitialized() const {
  return true;
}

void SystemDefinedPosePort_array_port::InternalSwap(SystemDefinedPosePort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemDefinedPosePort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace system_defined_pose_port
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort* Arena::CreateMaybeMessage< ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port* Arena::CreateMaybeMessage< ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_mempark::system_defined_pose_port::SystemDefinedPosePort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
