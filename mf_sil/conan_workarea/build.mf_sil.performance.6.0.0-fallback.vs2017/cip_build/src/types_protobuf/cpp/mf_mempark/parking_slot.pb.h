// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_mempark/parking_slot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fparking_5fslot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fparking_5fslot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "ap_commonvehsigprovider/gpsdata.pb.h"
#include "lsm_geoml/pose_pod.pb.h"
#include "mf_mempark/system_defined_pose_side.pb.h"
#include "mf_mempark/system_defined_pose_type.pb.h"
#include "mf_mempark/slot_meta_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5fmempark_2fparking_5fslot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5fmempark_2fparking_5fslot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto;
namespace pb {
namespace mf_mempark {
namespace parking_slot {
class ParkingSlot;
class ParkingSlotDefaultTypeInternal;
extern ParkingSlotDefaultTypeInternal _ParkingSlot_default_instance_;
class ParkingSlot_array_port;
class ParkingSlot_array_portDefaultTypeInternal;
extern ParkingSlot_array_portDefaultTypeInternal _ParkingSlot_array_port_default_instance_;
}  // namespace parking_slot
}  // namespace mf_mempark
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_mempark::parking_slot::ParkingSlot* Arena::CreateMaybeMessage<::pb::mf_mempark::parking_slot::ParkingSlot>(Arena*);
template<> ::pb::mf_mempark::parking_slot::ParkingSlot_array_port* Arena::CreateMaybeMessage<::pb::mf_mempark::parking_slot::ParkingSlot_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_mempark {
namespace parking_slot {

// ===================================================================

class ParkingSlot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.parking_slot.ParkingSlot) */ {
 public:
  ParkingSlot();
  virtual ~ParkingSlot();

  ParkingSlot(const ParkingSlot& from);
  ParkingSlot(ParkingSlot&& from) noexcept
    : ParkingSlot() {
    *this = ::std::move(from);
  }

  inline ParkingSlot& operator=(const ParkingSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingSlot& operator=(ParkingSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlot* internal_default_instance() {
    return reinterpret_cast<const ParkingSlot*>(
               &_ParkingSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParkingSlot& a, ParkingSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingSlot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlot* New() const final {
    return CreateMaybeMessage<ParkingSlot>(nullptr);
  }

  ParkingSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingSlot& from);
  void MergeFrom(const ParkingSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.parking_slot.ParkingSlot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto);
    return ::descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotPoseFieldNumber = 767,
    kSSigHeaderFieldNumber = 1033,
    kSlotGNSSFieldNumber = 1442,
    kMetaDataFieldNumber = 1876,
    kStartPoseFieldNumber = 3278,
    kCorrespondingMapIdFieldNumber = 3720,
    kSlotIDFieldNumber = 208,
    kSlotSideFieldNumber = 2042,
    kUiVersionNumberFieldNumber = 2124,
    kSlotTypeFieldNumber = 3592,
  };
  // optional .pb.lsm_geoml.pose_pod.Pose_POD slotPose = 767;
  bool has_slotpose() const;
  private:
  bool _internal_has_slotpose() const;
  public:
  void clear_slotpose();
  const ::pb::lsm_geoml::pose_pod::Pose_POD& slotpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* release_slotpose();
  ::pb::lsm_geoml::pose_pod::Pose_POD* mutable_slotpose();
  void set_allocated_slotpose(::pb::lsm_geoml::pose_pod::Pose_POD* slotpose);
  private:
  const ::pb::lsm_geoml::pose_pod::Pose_POD& _internal_slotpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* _internal_mutable_slotpose();
  public:

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.ap_commonvehsigprovider.gpsdata.GPSData slotGNSS = 1442;
  bool has_slotgnss() const;
  private:
  bool _internal_has_slotgnss() const;
  public:
  void clear_slotgnss();
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& slotgnss() const;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* release_slotgnss();
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* mutable_slotgnss();
  void set_allocated_slotgnss(::pb::ap_commonvehsigprovider::gpsdata::GPSData* slotgnss);
  private:
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& _internal_slotgnss() const;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* _internal_mutable_slotgnss();
  public:

  // optional .pb.mf_mempark.slot_meta_data.SlotMetaData metaData = 1876;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::pb::mf_mempark::slot_meta_data::SlotMetaData& metadata() const;
  ::pb::mf_mempark::slot_meta_data::SlotMetaData* release_metadata();
  ::pb::mf_mempark::slot_meta_data::SlotMetaData* mutable_metadata();
  void set_allocated_metadata(::pb::mf_mempark::slot_meta_data::SlotMetaData* metadata);
  private:
  const ::pb::mf_mempark::slot_meta_data::SlotMetaData& _internal_metadata() const;
  ::pb::mf_mempark::slot_meta_data::SlotMetaData* _internal_mutable_metadata();
  public:

  // optional .pb.lsm_geoml.pose_pod.Pose_POD startPose = 3278;
  bool has_startpose() const;
  private:
  bool _internal_has_startpose() const;
  public:
  void clear_startpose();
  const ::pb::lsm_geoml::pose_pod::Pose_POD& startpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* release_startpose();
  ::pb::lsm_geoml::pose_pod::Pose_POD* mutable_startpose();
  void set_allocated_startpose(::pb::lsm_geoml::pose_pod::Pose_POD* startpose);
  private:
  const ::pb::lsm_geoml::pose_pod::Pose_POD& _internal_startpose() const;
  ::pb::lsm_geoml::pose_pod::Pose_POD* _internal_mutable_startpose();
  public:

  // optional uint32 correspondingMapId = 3720;
  bool has_correspondingmapid() const;
  private:
  bool _internal_has_correspondingmapid() const;
  public:
  void clear_correspondingmapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 correspondingmapid() const;
  void set_correspondingmapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_correspondingmapid() const;
  void _internal_set_correspondingmapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slotID = 208;
  bool has_slotid() const;
  private:
  bool _internal_has_slotid() const;
  public:
  void clear_slotid();
  ::PROTOBUF_NAMESPACE_ID::uint32 slotid() const;
  void set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slotid() const;
  void _internal_set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide slotSide = 2042;
  bool has_slotside() const;
  private:
  bool _internal_has_slotside() const;
  public:
  void clear_slotside();
  ::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide slotside() const;
  void set_slotside(::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide value);
  private:
  ::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide _internal_slotside() const;
  void _internal_set_slotside(::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType slotType = 3592;
  bool has_slottype() const;
  private:
  bool _internal_has_slottype() const;
  public:
  void clear_slottype();
  ::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType slottype() const;
  void set_slottype(::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType value);
  private:
  ::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType _internal_slottype() const;
  void _internal_set_slottype(::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.parking_slot.ParkingSlot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::lsm_geoml::pose_pod::Pose_POD* slotpose_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* slotgnss_;
  ::pb::mf_mempark::slot_meta_data::SlotMetaData* metadata_;
  ::pb::lsm_geoml::pose_pod::Pose_POD* startpose_;
  ::PROTOBUF_NAMESPACE_ID::uint32 correspondingmapid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slotid_;
  int slotside_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  int slottype_;
  friend struct ::TableStruct_mf_5fmempark_2fparking_5fslot_2eproto;
};
// -------------------------------------------------------------------

class ParkingSlot_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_mempark.parking_slot.ParkingSlot_array_port) */ {
 public:
  ParkingSlot_array_port();
  virtual ~ParkingSlot_array_port();

  ParkingSlot_array_port(const ParkingSlot_array_port& from);
  ParkingSlot_array_port(ParkingSlot_array_port&& from) noexcept
    : ParkingSlot_array_port() {
    *this = ::std::move(from);
  }

  inline ParkingSlot_array_port& operator=(const ParkingSlot_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingSlot_array_port& operator=(ParkingSlot_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParkingSlot_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlot_array_port* internal_default_instance() {
    return reinterpret_cast<const ParkingSlot_array_port*>(
               &_ParkingSlot_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParkingSlot_array_port& a, ParkingSlot_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingSlot_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlot_array_port* New() const final {
    return CreateMaybeMessage<ParkingSlot_array_port>(nullptr);
  }

  ParkingSlot_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParkingSlot_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParkingSlot_array_port& from);
  void MergeFrom(const ParkingSlot_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingSlot_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_mempark.parking_slot.ParkingSlot_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto);
    return ::descriptor_table_mf_5fmempark_2fparking_5fslot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3870,
  };
  // repeated .pb.mf_mempark.parking_slot.ParkingSlot data = 3870;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_mempark::parking_slot::ParkingSlot* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_slot::ParkingSlot >*
      mutable_data();
  private:
  const ::pb::mf_mempark::parking_slot::ParkingSlot& _internal_data(int index) const;
  ::pb::mf_mempark::parking_slot::ParkingSlot* _internal_add_data();
  public:
  const ::pb::mf_mempark::parking_slot::ParkingSlot& data(int index) const;
  ::pb::mf_mempark::parking_slot::ParkingSlot* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_slot::ParkingSlot >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_mempark.parking_slot.ParkingSlot_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_slot::ParkingSlot > data_;
  friend struct ::TableStruct_mf_5fmempark_2fparking_5fslot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParkingSlot

// optional uint32 uiVersionNumber = 2124;
inline bool ParkingSlot::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ParkingSlot::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void ParkingSlot::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void ParkingSlot::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  uiversionnumber_ = value;
}
inline void ParkingSlot::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_slot.ParkingSlot.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool ParkingSlot::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool ParkingSlot::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& ParkingSlot::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& ParkingSlot::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* ParkingSlot::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_slot.ParkingSlot.sSigHeader)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* ParkingSlot::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000002u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* ParkingSlot::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_slot.ParkingSlot.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void ParkingSlot::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_slot.ParkingSlot.sSigHeader)
}

// optional uint32 slotID = 208;
inline bool ParkingSlot::_internal_has_slotid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ParkingSlot::has_slotid() const {
  return _internal_has_slotid();
}
inline void ParkingSlot::clear_slotid() {
  slotid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::_internal_slotid() const {
  return slotid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::slotid() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.slotID)
  return _internal_slotid();
}
inline void ParkingSlot::_internal_set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  slotid_ = value;
}
inline void ParkingSlot::set_slotid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slotid(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_slot.ParkingSlot.slotID)
}

// optional .pb.ap_commonvehsigprovider.gpsdata.GPSData slotGNSS = 1442;
inline bool ParkingSlot::_internal_has_slotgnss() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || slotgnss_ != nullptr);
  return value;
}
inline bool ParkingSlot::has_slotgnss() const {
  return _internal_has_slotgnss();
}
inline const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& ParkingSlot::_internal_slotgnss() const {
  const ::pb::ap_commonvehsigprovider::gpsdata::GPSData* p = slotgnss_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_commonvehsigprovider::gpsdata::GPSData*>(
      &::pb::ap_commonvehsigprovider::gpsdata::_GPSData_default_instance_);
}
inline const ::pb::ap_commonvehsigprovider::gpsdata::GPSData& ParkingSlot::slotgnss() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.slotGNSS)
  return _internal_slotgnss();
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* ParkingSlot::release_slotgnss() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_slot.ParkingSlot.slotGNSS)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::ap_commonvehsigprovider::gpsdata::GPSData* temp = slotgnss_;
  slotgnss_ = nullptr;
  return temp;
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* ParkingSlot::_internal_mutable_slotgnss() {
  _has_bits_[0] |= 0x00000004u;
  if (slotgnss_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_commonvehsigprovider::gpsdata::GPSData>(GetArenaNoVirtual());
    slotgnss_ = p;
  }
  return slotgnss_;
}
inline ::pb::ap_commonvehsigprovider::gpsdata::GPSData* ParkingSlot::mutable_slotgnss() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_slot.ParkingSlot.slotGNSS)
  return _internal_mutable_slotgnss();
}
inline void ParkingSlot::set_allocated_slotgnss(::pb::ap_commonvehsigprovider::gpsdata::GPSData* slotgnss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slotgnss_);
  }
  if (slotgnss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slotgnss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slotgnss, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  slotgnss_ = slotgnss;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_slot.ParkingSlot.slotGNSS)
}

// optional .pb.lsm_geoml.pose_pod.Pose_POD slotPose = 767;
inline bool ParkingSlot::_internal_has_slotpose() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || slotpose_ != nullptr);
  return value;
}
inline bool ParkingSlot::has_slotpose() const {
  return _internal_has_slotpose();
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingSlot::_internal_slotpose() const {
  const ::pb::lsm_geoml::pose_pod::Pose_POD* p = slotpose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      &::pb::lsm_geoml::pose_pod::_Pose_POD_default_instance_);
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingSlot::slotpose() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.slotPose)
  return _internal_slotpose();
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingSlot::release_slotpose() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_slot.ParkingSlot.slotPose)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::lsm_geoml::pose_pod::Pose_POD* temp = slotpose_;
  slotpose_ = nullptr;
  return temp;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingSlot::_internal_mutable_slotpose() {
  _has_bits_[0] |= 0x00000001u;
  if (slotpose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lsm_geoml::pose_pod::Pose_POD>(GetArenaNoVirtual());
    slotpose_ = p;
  }
  return slotpose_;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingSlot::mutable_slotpose() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_slot.ParkingSlot.slotPose)
  return _internal_mutable_slotpose();
}
inline void ParkingSlot::set_allocated_slotpose(::pb::lsm_geoml::pose_pod::Pose_POD* slotpose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slotpose_);
  }
  if (slotpose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slotpose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slotpose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  slotpose_ = slotpose;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_slot.ParkingSlot.slotPose)
}

// optional .pb.lsm_geoml.pose_pod.Pose_POD startPose = 3278;
inline bool ParkingSlot::_internal_has_startpose() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || startpose_ != nullptr);
  return value;
}
inline bool ParkingSlot::has_startpose() const {
  return _internal_has_startpose();
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingSlot::_internal_startpose() const {
  const ::pb::lsm_geoml::pose_pod::Pose_POD* p = startpose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      &::pb::lsm_geoml::pose_pod::_Pose_POD_default_instance_);
}
inline const ::pb::lsm_geoml::pose_pod::Pose_POD& ParkingSlot::startpose() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.startPose)
  return _internal_startpose();
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingSlot::release_startpose() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_slot.ParkingSlot.startPose)
  _has_bits_[0] &= ~0x00000010u;
  ::pb::lsm_geoml::pose_pod::Pose_POD* temp = startpose_;
  startpose_ = nullptr;
  return temp;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingSlot::_internal_mutable_startpose() {
  _has_bits_[0] |= 0x00000010u;
  if (startpose_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::lsm_geoml::pose_pod::Pose_POD>(GetArenaNoVirtual());
    startpose_ = p;
  }
  return startpose_;
}
inline ::pb::lsm_geoml::pose_pod::Pose_POD* ParkingSlot::mutable_startpose() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_slot.ParkingSlot.startPose)
  return _internal_mutable_startpose();
}
inline void ParkingSlot::set_allocated_startpose(::pb::lsm_geoml::pose_pod::Pose_POD* startpose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(startpose_);
  }
  if (startpose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      startpose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startpose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  startpose_ = startpose;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_slot.ParkingSlot.startPose)
}

// optional .pb.mf_mempark.system_defined_pose_side.SystemDefinedPoseSide slotSide = 2042;
inline bool ParkingSlot::_internal_has_slotside() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ParkingSlot::has_slotside() const {
  return _internal_has_slotside();
}
inline void ParkingSlot::clear_slotside() {
  slotside_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide ParkingSlot::_internal_slotside() const {
  return static_cast< ::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide >(slotside_);
}
inline ::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide ParkingSlot::slotside() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.slotSide)
  return _internal_slotside();
}
inline void ParkingSlot::_internal_set_slotside(::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide value) {
  assert(::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  slotside_ = value;
}
inline void ParkingSlot::set_slotside(::pb::mf_mempark::system_defined_pose_side::SystemDefinedPoseSide value) {
  _internal_set_slotside(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_slot.ParkingSlot.slotSide)
}

// optional .pb.mf_mempark.system_defined_pose_type.SystemDefinedPoseType slotType = 3592;
inline bool ParkingSlot::_internal_has_slottype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ParkingSlot::has_slottype() const {
  return _internal_has_slottype();
}
inline void ParkingSlot::clear_slottype() {
  slottype_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType ParkingSlot::_internal_slottype() const {
  return static_cast< ::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType >(slottype_);
}
inline ::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType ParkingSlot::slottype() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.slotType)
  return _internal_slottype();
}
inline void ParkingSlot::_internal_set_slottype(::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType value) {
  assert(::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  slottype_ = value;
}
inline void ParkingSlot::set_slottype(::pb::mf_mempark::system_defined_pose_type::SystemDefinedPoseType value) {
  _internal_set_slottype(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_slot.ParkingSlot.slotType)
}

// optional uint32 correspondingMapId = 3720;
inline bool ParkingSlot::_internal_has_correspondingmapid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ParkingSlot::has_correspondingmapid() const {
  return _internal_has_correspondingmapid();
}
inline void ParkingSlot::clear_correspondingmapid() {
  correspondingmapid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::_internal_correspondingmapid() const {
  return correspondingmapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParkingSlot::correspondingmapid() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.correspondingMapId)
  return _internal_correspondingmapid();
}
inline void ParkingSlot::_internal_set_correspondingmapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  correspondingmapid_ = value;
}
inline void ParkingSlot::set_correspondingmapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_correspondingmapid(value);
  // @@protoc_insertion_point(field_set:pb.mf_mempark.parking_slot.ParkingSlot.correspondingMapId)
}

// optional .pb.mf_mempark.slot_meta_data.SlotMetaData metaData = 1876;
inline bool ParkingSlot::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool ParkingSlot::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::pb::mf_mempark::slot_meta_data::SlotMetaData& ParkingSlot::_internal_metadata() const {
  const ::pb::mf_mempark::slot_meta_data::SlotMetaData* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::mf_mempark::slot_meta_data::SlotMetaData*>(
      &::pb::mf_mempark::slot_meta_data::_SlotMetaData_default_instance_);
}
inline const ::pb::mf_mempark::slot_meta_data::SlotMetaData& ParkingSlot::metadata() const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot.metaData)
  return _internal_metadata();
}
inline ::pb::mf_mempark::slot_meta_data::SlotMetaData* ParkingSlot::release_metadata() {
  // @@protoc_insertion_point(field_release:pb.mf_mempark.parking_slot.ParkingSlot.metaData)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::mf_mempark::slot_meta_data::SlotMetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::pb::mf_mempark::slot_meta_data::SlotMetaData* ParkingSlot::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000008u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::mf_mempark::slot_meta_data::SlotMetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::pb::mf_mempark::slot_meta_data::SlotMetaData* ParkingSlot::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_slot.ParkingSlot.metaData)
  return _internal_mutable_metadata();
}
inline void ParkingSlot::set_allocated_metadata(::pb::mf_mempark::slot_meta_data::SlotMetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_mempark.parking_slot.ParkingSlot.metaData)
}

// -------------------------------------------------------------------

// ParkingSlot_array_port

// repeated .pb.mf_mempark.parking_slot.ParkingSlot data = 3870;
inline int ParkingSlot_array_port::_internal_data_size() const {
  return data_.size();
}
inline int ParkingSlot_array_port::data_size() const {
  return _internal_data_size();
}
inline void ParkingSlot_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_mempark::parking_slot::ParkingSlot* ParkingSlot_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_mempark.parking_slot.ParkingSlot_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_slot::ParkingSlot >*
ParkingSlot_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_mempark.parking_slot.ParkingSlot_array_port.data)
  return &data_;
}
inline const ::pb::mf_mempark::parking_slot::ParkingSlot& ParkingSlot_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_mempark::parking_slot::ParkingSlot& ParkingSlot_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_mempark.parking_slot.ParkingSlot_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_mempark::parking_slot::ParkingSlot* ParkingSlot_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_mempark::parking_slot::ParkingSlot* ParkingSlot_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_mempark.parking_slot.ParkingSlot_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_mempark::parking_slot::ParkingSlot >&
ParkingSlot_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_mempark.parking_slot.ParkingSlot_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking_slot
}  // namespace mf_mempark
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5fmempark_2fparking_5fslot_2eproto
