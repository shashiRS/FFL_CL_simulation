// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/slot_cost_fun_data_per_opt_phase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "si/quadrilateral_serializable.pb.h"
#include "si/virtual_line_serializable_array.pb.h"
#include "si/virtual_line_index_serializable.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto;
namespace pb {
namespace si {
namespace slot_cost_fun_data_per_opt_phase {
class SlotCostFunDataPerOptPhase;
class SlotCostFunDataPerOptPhaseDefaultTypeInternal;
extern SlotCostFunDataPerOptPhaseDefaultTypeInternal _SlotCostFunDataPerOptPhase_default_instance_;
class SlotCostFunDataPerOptPhase_array_port;
class SlotCostFunDataPerOptPhase_array_portDefaultTypeInternal;
extern SlotCostFunDataPerOptPhase_array_portDefaultTypeInternal _SlotCostFunDataPerOptPhase_array_port_default_instance_;
}  // namespace slot_cost_fun_data_per_opt_phase
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* Arena::CreateMaybeMessage<::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase>(Arena*);
template<> ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port* Arena::CreateMaybeMessage<::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace si {
namespace slot_cost_fun_data_per_opt_phase {

// ===================================================================

class SlotCostFunDataPerOptPhase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase) */ {
 public:
  SlotCostFunDataPerOptPhase();
  virtual ~SlotCostFunDataPerOptPhase();

  SlotCostFunDataPerOptPhase(const SlotCostFunDataPerOptPhase& from);
  SlotCostFunDataPerOptPhase(SlotCostFunDataPerOptPhase&& from) noexcept
    : SlotCostFunDataPerOptPhase() {
    *this = ::std::move(from);
  }

  inline SlotCostFunDataPerOptPhase& operator=(const SlotCostFunDataPerOptPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlotCostFunDataPerOptPhase& operator=(SlotCostFunDataPerOptPhase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlotCostFunDataPerOptPhase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlotCostFunDataPerOptPhase* internal_default_instance() {
    return reinterpret_cast<const SlotCostFunDataPerOptPhase*>(
               &_SlotCostFunDataPerOptPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SlotCostFunDataPerOptPhase& a, SlotCostFunDataPerOptPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(SlotCostFunDataPerOptPhase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlotCostFunDataPerOptPhase* New() const final {
    return CreateMaybeMessage<SlotCostFunDataPerOptPhase>(nullptr);
  }

  SlotCostFunDataPerOptPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlotCostFunDataPerOptPhase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlotCostFunDataPerOptPhase& from);
  void MergeFrom(const SlotCostFunDataPerOptPhase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlotCostFunDataPerOptPhase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto);
    return ::descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiRightFieldNumber = 125,
    kRoiCurbFieldNumber = 518,
    kRoiLeftFieldNumber = 2251,
    kBestVLIndicesFieldNumber = 2360,
    kVirtualLinesFieldNumber = 3646,
    kSideAlignmentPerfMFieldNumber = 564,
    kCurbAlignmentPerfNuFieldNumber = 1149,
    kPullPerformFrontNuFieldNumber = 1206,
    kOpeningPerfNuFieldNumber = 1369,
    kWingAlignmentErrorDegFieldNumber = 1563,
    kClosestFLMFieldNumber = 1958,
    kSideAlignmentErrorDegFieldNumber = 2970,
    kWingAlignmentPerfMFieldNumber = 3222,
    kOverallPerfMFieldNumber = 3593,
    kOpeningMFieldNumber = 3747,
    kCurbAlignmentDegFieldNumber = 3872,
    kClosestFRMFieldNumber = 4036,
  };
  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiRight = 125;
  bool has_roiright() const;
  private:
  bool _internal_has_roiright() const;
  public:
  void clear_roiright();
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& roiright() const;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* release_roiright();
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* mutable_roiright();
  void set_allocated_roiright(::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roiright);
  private:
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& _internal_roiright() const;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* _internal_mutable_roiright();
  public:

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiCurb = 518;
  bool has_roicurb() const;
  private:
  bool _internal_has_roicurb() const;
  public:
  void clear_roicurb();
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& roicurb() const;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* release_roicurb();
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* mutable_roicurb();
  void set_allocated_roicurb(::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roicurb);
  private:
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& _internal_roicurb() const;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* _internal_mutable_roicurb();
  public:

  // optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiLeft = 2251;
  bool has_roileft() const;
  private:
  bool _internal_has_roileft() const;
  public:
  void clear_roileft();
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& roileft() const;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* release_roileft();
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* mutable_roileft();
  void set_allocated_roileft(::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roileft);
  private:
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& _internal_roileft() const;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* _internal_mutable_roileft();
  public:

  // optional .pb.si.virtual_line_index_serializable.VirtualLineIndexSerializable bestVLIndices = 2360;
  bool has_bestvlindices() const;
  private:
  bool _internal_has_bestvlindices() const;
  public:
  void clear_bestvlindices();
  const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable& bestvlindices() const;
  ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* release_bestvlindices();
  ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* mutable_bestvlindices();
  void set_allocated_bestvlindices(::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* bestvlindices);
  private:
  const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable& _internal_bestvlindices() const;
  ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* _internal_mutable_bestvlindices();
  public:

  // optional .pb.si.virtual_line_serializable_array.VirtualLineSerializableArray virtualLines = 3646;
  bool has_virtuallines() const;
  private:
  bool _internal_has_virtuallines() const;
  public:
  void clear_virtuallines();
  const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray& virtuallines() const;
  ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* release_virtuallines();
  ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* mutable_virtuallines();
  void set_allocated_virtuallines(::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* virtuallines);
  private:
  const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray& _internal_virtuallines() const;
  ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* _internal_mutable_virtuallines();
  public:

  // optional float sideAlignmentPerf_m = 564;
  bool has_sidealignmentperf_m() const;
  private:
  bool _internal_has_sidealignmentperf_m() const;
  public:
  void clear_sidealignmentperf_m();
  float sidealignmentperf_m() const;
  void set_sidealignmentperf_m(float value);
  private:
  float _internal_sidealignmentperf_m() const;
  void _internal_set_sidealignmentperf_m(float value);
  public:

  // optional float curbAlignmentPerf_nu = 1149;
  bool has_curbalignmentperf_nu() const;
  private:
  bool _internal_has_curbalignmentperf_nu() const;
  public:
  void clear_curbalignmentperf_nu();
  float curbalignmentperf_nu() const;
  void set_curbalignmentperf_nu(float value);
  private:
  float _internal_curbalignmentperf_nu() const;
  void _internal_set_curbalignmentperf_nu(float value);
  public:

  // optional float pullPerformFront_nu = 1206;
  bool has_pullperformfront_nu() const;
  private:
  bool _internal_has_pullperformfront_nu() const;
  public:
  void clear_pullperformfront_nu();
  float pullperformfront_nu() const;
  void set_pullperformfront_nu(float value);
  private:
  float _internal_pullperformfront_nu() const;
  void _internal_set_pullperformfront_nu(float value);
  public:

  // optional float openingPerf_nu = 1369;
  bool has_openingperf_nu() const;
  private:
  bool _internal_has_openingperf_nu() const;
  public:
  void clear_openingperf_nu();
  float openingperf_nu() const;
  void set_openingperf_nu(float value);
  private:
  float _internal_openingperf_nu() const;
  void _internal_set_openingperf_nu(float value);
  public:

  // optional float wingAlignmentError_deg = 1563;
  bool has_wingalignmenterror_deg() const;
  private:
  bool _internal_has_wingalignmenterror_deg() const;
  public:
  void clear_wingalignmenterror_deg();
  float wingalignmenterror_deg() const;
  void set_wingalignmenterror_deg(float value);
  private:
  float _internal_wingalignmenterror_deg() const;
  void _internal_set_wingalignmenterror_deg(float value);
  public:

  // optional float closestFL_m = 1958;
  bool has_closestfl_m() const;
  private:
  bool _internal_has_closestfl_m() const;
  public:
  void clear_closestfl_m();
  float closestfl_m() const;
  void set_closestfl_m(float value);
  private:
  float _internal_closestfl_m() const;
  void _internal_set_closestfl_m(float value);
  public:

  // optional float sideAlignmentError_deg = 2970;
  bool has_sidealignmenterror_deg() const;
  private:
  bool _internal_has_sidealignmenterror_deg() const;
  public:
  void clear_sidealignmenterror_deg();
  float sidealignmenterror_deg() const;
  void set_sidealignmenterror_deg(float value);
  private:
  float _internal_sidealignmenterror_deg() const;
  void _internal_set_sidealignmenterror_deg(float value);
  public:

  // optional float wingAlignmentPerf_m = 3222;
  bool has_wingalignmentperf_m() const;
  private:
  bool _internal_has_wingalignmentperf_m() const;
  public:
  void clear_wingalignmentperf_m();
  float wingalignmentperf_m() const;
  void set_wingalignmentperf_m(float value);
  private:
  float _internal_wingalignmentperf_m() const;
  void _internal_set_wingalignmentperf_m(float value);
  public:

  // optional float overallPerf_m = 3593;
  bool has_overallperf_m() const;
  private:
  bool _internal_has_overallperf_m() const;
  public:
  void clear_overallperf_m();
  float overallperf_m() const;
  void set_overallperf_m(float value);
  private:
  float _internal_overallperf_m() const;
  void _internal_set_overallperf_m(float value);
  public:

  // optional float opening_m = 3747;
  bool has_opening_m() const;
  private:
  bool _internal_has_opening_m() const;
  public:
  void clear_opening_m();
  float opening_m() const;
  void set_opening_m(float value);
  private:
  float _internal_opening_m() const;
  void _internal_set_opening_m(float value);
  public:

  // optional float curbAlignment_deg = 3872;
  bool has_curbalignment_deg() const;
  private:
  bool _internal_has_curbalignment_deg() const;
  public:
  void clear_curbalignment_deg();
  float curbalignment_deg() const;
  void set_curbalignment_deg(float value);
  private:
  float _internal_curbalignment_deg() const;
  void _internal_set_curbalignment_deg(float value);
  public:

  // optional float closestFR_m = 4036;
  bool has_closestfr_m() const;
  private:
  bool _internal_has_closestfr_m() const;
  public:
  void clear_closestfr_m();
  float closestfr_m() const;
  void set_closestfr_m(float value);
  private:
  float _internal_closestfr_m() const;
  void _internal_set_closestfr_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roiright_;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roicurb_;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roileft_;
  ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* bestvlindices_;
  ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* virtuallines_;
  float sidealignmentperf_m_;
  float curbalignmentperf_nu_;
  float pullperformfront_nu_;
  float openingperf_nu_;
  float wingalignmenterror_deg_;
  float closestfl_m_;
  float sidealignmenterror_deg_;
  float wingalignmentperf_m_;
  float overallperf_m_;
  float opening_m_;
  float curbalignment_deg_;
  float closestfr_m_;
  friend struct ::TableStruct_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto;
};
// -------------------------------------------------------------------

class SlotCostFunDataPerOptPhase_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port) */ {
 public:
  SlotCostFunDataPerOptPhase_array_port();
  virtual ~SlotCostFunDataPerOptPhase_array_port();

  SlotCostFunDataPerOptPhase_array_port(const SlotCostFunDataPerOptPhase_array_port& from);
  SlotCostFunDataPerOptPhase_array_port(SlotCostFunDataPerOptPhase_array_port&& from) noexcept
    : SlotCostFunDataPerOptPhase_array_port() {
    *this = ::std::move(from);
  }

  inline SlotCostFunDataPerOptPhase_array_port& operator=(const SlotCostFunDataPerOptPhase_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlotCostFunDataPerOptPhase_array_port& operator=(SlotCostFunDataPerOptPhase_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlotCostFunDataPerOptPhase_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlotCostFunDataPerOptPhase_array_port* internal_default_instance() {
    return reinterpret_cast<const SlotCostFunDataPerOptPhase_array_port*>(
               &_SlotCostFunDataPerOptPhase_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SlotCostFunDataPerOptPhase_array_port& a, SlotCostFunDataPerOptPhase_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(SlotCostFunDataPerOptPhase_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlotCostFunDataPerOptPhase_array_port* New() const final {
    return CreateMaybeMessage<SlotCostFunDataPerOptPhase_array_port>(nullptr);
  }

  SlotCostFunDataPerOptPhase_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlotCostFunDataPerOptPhase_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlotCostFunDataPerOptPhase_array_port& from);
  void MergeFrom(const SlotCostFunDataPerOptPhase_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlotCostFunDataPerOptPhase_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto);
    return ::descriptor_table_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2645,
  };
  // repeated .pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase data = 2645;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase >*
      mutable_data();
  private:
  const ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase& _internal_data(int index) const;
  ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* _internal_add_data();
  public:
  const ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase& data(int index) const;
  ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase > data_;
  friend struct ::TableStruct_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SlotCostFunDataPerOptPhase

// optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiLeft = 2251;
inline bool SlotCostFunDataPerOptPhase::_internal_has_roileft() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || roileft_ != nullptr);
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_roileft() const {
  return _internal_has_roileft();
}
inline const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& SlotCostFunDataPerOptPhase::_internal_roileft() const {
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* p = roileft_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      &::pb::si::quadrilateral_serializable::_QuadrilateralSerializable_default_instance_);
}
inline const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& SlotCostFunDataPerOptPhase::roileft() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiLeft)
  return _internal_roileft();
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::release_roileft() {
  // @@protoc_insertion_point(field_release:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiLeft)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* temp = roileft_;
  roileft_ = nullptr;
  return temp;
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::_internal_mutable_roileft() {
  _has_bits_[0] |= 0x00000004u;
  if (roileft_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::si::quadrilateral_serializable::QuadrilateralSerializable>(GetArenaNoVirtual());
    roileft_ = p;
  }
  return roileft_;
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::mutable_roileft() {
  // @@protoc_insertion_point(field_mutable:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiLeft)
  return _internal_mutable_roileft();
}
inline void SlotCostFunDataPerOptPhase::set_allocated_roileft(::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roileft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roileft_);
  }
  if (roileft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roileft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roileft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  roileft_ = roileft;
  // @@protoc_insertion_point(field_set_allocated:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiLeft)
}

// optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiRight = 125;
inline bool SlotCostFunDataPerOptPhase::_internal_has_roiright() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || roiright_ != nullptr);
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_roiright() const {
  return _internal_has_roiright();
}
inline const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& SlotCostFunDataPerOptPhase::_internal_roiright() const {
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* p = roiright_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      &::pb::si::quadrilateral_serializable::_QuadrilateralSerializable_default_instance_);
}
inline const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& SlotCostFunDataPerOptPhase::roiright() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiRight)
  return _internal_roiright();
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::release_roiright() {
  // @@protoc_insertion_point(field_release:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiRight)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* temp = roiright_;
  roiright_ = nullptr;
  return temp;
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::_internal_mutable_roiright() {
  _has_bits_[0] |= 0x00000001u;
  if (roiright_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::si::quadrilateral_serializable::QuadrilateralSerializable>(GetArenaNoVirtual());
    roiright_ = p;
  }
  return roiright_;
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::mutable_roiright() {
  // @@protoc_insertion_point(field_mutable:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiRight)
  return _internal_mutable_roiright();
}
inline void SlotCostFunDataPerOptPhase::set_allocated_roiright(::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roiright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roiright_);
  }
  if (roiright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roiright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roiright, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roiright_ = roiright;
  // @@protoc_insertion_point(field_set_allocated:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiRight)
}

// optional .pb.si.quadrilateral_serializable.QuadrilateralSerializable roiCurb = 518;
inline bool SlotCostFunDataPerOptPhase::_internal_has_roicurb() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || roicurb_ != nullptr);
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_roicurb() const {
  return _internal_has_roicurb();
}
inline const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& SlotCostFunDataPerOptPhase::_internal_roicurb() const {
  const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* p = roicurb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable*>(
      &::pb::si::quadrilateral_serializable::_QuadrilateralSerializable_default_instance_);
}
inline const ::pb::si::quadrilateral_serializable::QuadrilateralSerializable& SlotCostFunDataPerOptPhase::roicurb() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiCurb)
  return _internal_roicurb();
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::release_roicurb() {
  // @@protoc_insertion_point(field_release:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiCurb)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* temp = roicurb_;
  roicurb_ = nullptr;
  return temp;
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::_internal_mutable_roicurb() {
  _has_bits_[0] |= 0x00000002u;
  if (roicurb_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::si::quadrilateral_serializable::QuadrilateralSerializable>(GetArenaNoVirtual());
    roicurb_ = p;
  }
  return roicurb_;
}
inline ::pb::si::quadrilateral_serializable::QuadrilateralSerializable* SlotCostFunDataPerOptPhase::mutable_roicurb() {
  // @@protoc_insertion_point(field_mutable:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiCurb)
  return _internal_mutable_roicurb();
}
inline void SlotCostFunDataPerOptPhase::set_allocated_roicurb(::pb::si::quadrilateral_serializable::QuadrilateralSerializable* roicurb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roicurb_);
  }
  if (roicurb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roicurb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roicurb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roicurb_ = roicurb;
  // @@protoc_insertion_point(field_set_allocated:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.roiCurb)
}

// optional .pb.si.virtual_line_serializable_array.VirtualLineSerializableArray virtualLines = 3646;
inline bool SlotCostFunDataPerOptPhase::_internal_has_virtuallines() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || virtuallines_ != nullptr);
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_virtuallines() const {
  return _internal_has_virtuallines();
}
inline const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray& SlotCostFunDataPerOptPhase::_internal_virtuallines() const {
  const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* p = virtuallines_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray*>(
      &::pb::si::virtual_line_serializable_array::_VirtualLineSerializableArray_default_instance_);
}
inline const ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray& SlotCostFunDataPerOptPhase::virtuallines() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.virtualLines)
  return _internal_virtuallines();
}
inline ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* SlotCostFunDataPerOptPhase::release_virtuallines() {
  // @@protoc_insertion_point(field_release:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.virtualLines)
  _has_bits_[0] &= ~0x00000010u;
  ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* temp = virtuallines_;
  virtuallines_ = nullptr;
  return temp;
}
inline ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* SlotCostFunDataPerOptPhase::_internal_mutable_virtuallines() {
  _has_bits_[0] |= 0x00000010u;
  if (virtuallines_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray>(GetArenaNoVirtual());
    virtuallines_ = p;
  }
  return virtuallines_;
}
inline ::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* SlotCostFunDataPerOptPhase::mutable_virtuallines() {
  // @@protoc_insertion_point(field_mutable:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.virtualLines)
  return _internal_mutable_virtuallines();
}
inline void SlotCostFunDataPerOptPhase::set_allocated_virtuallines(::pb::si::virtual_line_serializable_array::VirtualLineSerializableArray* virtuallines) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtuallines_);
  }
  if (virtuallines) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      virtuallines = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtuallines, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  virtuallines_ = virtuallines;
  // @@protoc_insertion_point(field_set_allocated:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.virtualLines)
}

// optional .pb.si.virtual_line_index_serializable.VirtualLineIndexSerializable bestVLIndices = 2360;
inline bool SlotCostFunDataPerOptPhase::_internal_has_bestvlindices() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || bestvlindices_ != nullptr);
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_bestvlindices() const {
  return _internal_has_bestvlindices();
}
inline const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable& SlotCostFunDataPerOptPhase::_internal_bestvlindices() const {
  const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* p = bestvlindices_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable*>(
      &::pb::si::virtual_line_index_serializable::_VirtualLineIndexSerializable_default_instance_);
}
inline const ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable& SlotCostFunDataPerOptPhase::bestvlindices() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.bestVLIndices)
  return _internal_bestvlindices();
}
inline ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* SlotCostFunDataPerOptPhase::release_bestvlindices() {
  // @@protoc_insertion_point(field_release:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.bestVLIndices)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* temp = bestvlindices_;
  bestvlindices_ = nullptr;
  return temp;
}
inline ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* SlotCostFunDataPerOptPhase::_internal_mutable_bestvlindices() {
  _has_bits_[0] |= 0x00000008u;
  if (bestvlindices_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable>(GetArenaNoVirtual());
    bestvlindices_ = p;
  }
  return bestvlindices_;
}
inline ::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* SlotCostFunDataPerOptPhase::mutable_bestvlindices() {
  // @@protoc_insertion_point(field_mutable:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.bestVLIndices)
  return _internal_mutable_bestvlindices();
}
inline void SlotCostFunDataPerOptPhase::set_allocated_bestvlindices(::pb::si::virtual_line_index_serializable::VirtualLineIndexSerializable* bestvlindices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bestvlindices_);
  }
  if (bestvlindices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bestvlindices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bestvlindices, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bestvlindices_ = bestvlindices;
  // @@protoc_insertion_point(field_set_allocated:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.bestVLIndices)
}

// optional float curbAlignment_deg = 3872;
inline bool SlotCostFunDataPerOptPhase::_internal_has_curbalignment_deg() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_curbalignment_deg() const {
  return _internal_has_curbalignment_deg();
}
inline void SlotCostFunDataPerOptPhase::clear_curbalignment_deg() {
  curbalignment_deg_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float SlotCostFunDataPerOptPhase::_internal_curbalignment_deg() const {
  return curbalignment_deg_;
}
inline float SlotCostFunDataPerOptPhase::curbalignment_deg() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.curbAlignment_deg)
  return _internal_curbalignment_deg();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_curbalignment_deg(float value) {
  _has_bits_[0] |= 0x00008000u;
  curbalignment_deg_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_curbalignment_deg(float value) {
  _internal_set_curbalignment_deg(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.curbAlignment_deg)
}

// optional float curbAlignmentPerf_nu = 1149;
inline bool SlotCostFunDataPerOptPhase::_internal_has_curbalignmentperf_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_curbalignmentperf_nu() const {
  return _internal_has_curbalignmentperf_nu();
}
inline void SlotCostFunDataPerOptPhase::clear_curbalignmentperf_nu() {
  curbalignmentperf_nu_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SlotCostFunDataPerOptPhase::_internal_curbalignmentperf_nu() const {
  return curbalignmentperf_nu_;
}
inline float SlotCostFunDataPerOptPhase::curbalignmentperf_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.curbAlignmentPerf_nu)
  return _internal_curbalignmentperf_nu();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_curbalignmentperf_nu(float value) {
  _has_bits_[0] |= 0x00000040u;
  curbalignmentperf_nu_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_curbalignmentperf_nu(float value) {
  _internal_set_curbalignmentperf_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.curbAlignmentPerf_nu)
}

// optional float closestFL_m = 1958;
inline bool SlotCostFunDataPerOptPhase::_internal_has_closestfl_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_closestfl_m() const {
  return _internal_has_closestfl_m();
}
inline void SlotCostFunDataPerOptPhase::clear_closestfl_m() {
  closestfl_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float SlotCostFunDataPerOptPhase::_internal_closestfl_m() const {
  return closestfl_m_;
}
inline float SlotCostFunDataPerOptPhase::closestfl_m() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.closestFL_m)
  return _internal_closestfl_m();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_closestfl_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  closestfl_m_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_closestfl_m(float value) {
  _internal_set_closestfl_m(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.closestFL_m)
}

// optional float closestFR_m = 4036;
inline bool SlotCostFunDataPerOptPhase::_internal_has_closestfr_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_closestfr_m() const {
  return _internal_has_closestfr_m();
}
inline void SlotCostFunDataPerOptPhase::clear_closestfr_m() {
  closestfr_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float SlotCostFunDataPerOptPhase::_internal_closestfr_m() const {
  return closestfr_m_;
}
inline float SlotCostFunDataPerOptPhase::closestfr_m() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.closestFR_m)
  return _internal_closestfr_m();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_closestfr_m(float value) {
  _has_bits_[0] |= 0x00010000u;
  closestfr_m_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_closestfr_m(float value) {
  _internal_set_closestfr_m(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.closestFR_m)
}

// optional float pullPerformFront_nu = 1206;
inline bool SlotCostFunDataPerOptPhase::_internal_has_pullperformfront_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_pullperformfront_nu() const {
  return _internal_has_pullperformfront_nu();
}
inline void SlotCostFunDataPerOptPhase::clear_pullperformfront_nu() {
  pullperformfront_nu_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SlotCostFunDataPerOptPhase::_internal_pullperformfront_nu() const {
  return pullperformfront_nu_;
}
inline float SlotCostFunDataPerOptPhase::pullperformfront_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.pullPerformFront_nu)
  return _internal_pullperformfront_nu();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_pullperformfront_nu(float value) {
  _has_bits_[0] |= 0x00000080u;
  pullperformfront_nu_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_pullperformfront_nu(float value) {
  _internal_set_pullperformfront_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.pullPerformFront_nu)
}

// optional float opening_m = 3747;
inline bool SlotCostFunDataPerOptPhase::_internal_has_opening_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_opening_m() const {
  return _internal_has_opening_m();
}
inline void SlotCostFunDataPerOptPhase::clear_opening_m() {
  opening_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float SlotCostFunDataPerOptPhase::_internal_opening_m() const {
  return opening_m_;
}
inline float SlotCostFunDataPerOptPhase::opening_m() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.opening_m)
  return _internal_opening_m();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_opening_m(float value) {
  _has_bits_[0] |= 0x00004000u;
  opening_m_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_opening_m(float value) {
  _internal_set_opening_m(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.opening_m)
}

// optional float openingPerf_nu = 1369;
inline bool SlotCostFunDataPerOptPhase::_internal_has_openingperf_nu() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_openingperf_nu() const {
  return _internal_has_openingperf_nu();
}
inline void SlotCostFunDataPerOptPhase::clear_openingperf_nu() {
  openingperf_nu_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float SlotCostFunDataPerOptPhase::_internal_openingperf_nu() const {
  return openingperf_nu_;
}
inline float SlotCostFunDataPerOptPhase::openingperf_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.openingPerf_nu)
  return _internal_openingperf_nu();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_openingperf_nu(float value) {
  _has_bits_[0] |= 0x00000100u;
  openingperf_nu_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_openingperf_nu(float value) {
  _internal_set_openingperf_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.openingPerf_nu)
}

// optional float sideAlignmentError_deg = 2970;
inline bool SlotCostFunDataPerOptPhase::_internal_has_sidealignmenterror_deg() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_sidealignmenterror_deg() const {
  return _internal_has_sidealignmenterror_deg();
}
inline void SlotCostFunDataPerOptPhase::clear_sidealignmenterror_deg() {
  sidealignmenterror_deg_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float SlotCostFunDataPerOptPhase::_internal_sidealignmenterror_deg() const {
  return sidealignmenterror_deg_;
}
inline float SlotCostFunDataPerOptPhase::sidealignmenterror_deg() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.sideAlignmentError_deg)
  return _internal_sidealignmenterror_deg();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_sidealignmenterror_deg(float value) {
  _has_bits_[0] |= 0x00000800u;
  sidealignmenterror_deg_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_sidealignmenterror_deg(float value) {
  _internal_set_sidealignmenterror_deg(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.sideAlignmentError_deg)
}

// optional float sideAlignmentPerf_m = 564;
inline bool SlotCostFunDataPerOptPhase::_internal_has_sidealignmentperf_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_sidealignmentperf_m() const {
  return _internal_has_sidealignmentperf_m();
}
inline void SlotCostFunDataPerOptPhase::clear_sidealignmentperf_m() {
  sidealignmentperf_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SlotCostFunDataPerOptPhase::_internal_sidealignmentperf_m() const {
  return sidealignmentperf_m_;
}
inline float SlotCostFunDataPerOptPhase::sidealignmentperf_m() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.sideAlignmentPerf_m)
  return _internal_sidealignmentperf_m();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_sidealignmentperf_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  sidealignmentperf_m_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_sidealignmentperf_m(float value) {
  _internal_set_sidealignmentperf_m(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.sideAlignmentPerf_m)
}

// optional float wingAlignmentError_deg = 1563;
inline bool SlotCostFunDataPerOptPhase::_internal_has_wingalignmenterror_deg() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_wingalignmenterror_deg() const {
  return _internal_has_wingalignmenterror_deg();
}
inline void SlotCostFunDataPerOptPhase::clear_wingalignmenterror_deg() {
  wingalignmenterror_deg_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float SlotCostFunDataPerOptPhase::_internal_wingalignmenterror_deg() const {
  return wingalignmenterror_deg_;
}
inline float SlotCostFunDataPerOptPhase::wingalignmenterror_deg() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.wingAlignmentError_deg)
  return _internal_wingalignmenterror_deg();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_wingalignmenterror_deg(float value) {
  _has_bits_[0] |= 0x00000200u;
  wingalignmenterror_deg_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_wingalignmenterror_deg(float value) {
  _internal_set_wingalignmenterror_deg(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.wingAlignmentError_deg)
}

// optional float wingAlignmentPerf_m = 3222;
inline bool SlotCostFunDataPerOptPhase::_internal_has_wingalignmentperf_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_wingalignmentperf_m() const {
  return _internal_has_wingalignmentperf_m();
}
inline void SlotCostFunDataPerOptPhase::clear_wingalignmentperf_m() {
  wingalignmentperf_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float SlotCostFunDataPerOptPhase::_internal_wingalignmentperf_m() const {
  return wingalignmentperf_m_;
}
inline float SlotCostFunDataPerOptPhase::wingalignmentperf_m() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.wingAlignmentPerf_m)
  return _internal_wingalignmentperf_m();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_wingalignmentperf_m(float value) {
  _has_bits_[0] |= 0x00001000u;
  wingalignmentperf_m_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_wingalignmentperf_m(float value) {
  _internal_set_wingalignmentperf_m(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.wingAlignmentPerf_m)
}

// optional float overallPerf_m = 3593;
inline bool SlotCostFunDataPerOptPhase::_internal_has_overallperf_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SlotCostFunDataPerOptPhase::has_overallperf_m() const {
  return _internal_has_overallperf_m();
}
inline void SlotCostFunDataPerOptPhase::clear_overallperf_m() {
  overallperf_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float SlotCostFunDataPerOptPhase::_internal_overallperf_m() const {
  return overallperf_m_;
}
inline float SlotCostFunDataPerOptPhase::overallperf_m() const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.overallPerf_m)
  return _internal_overallperf_m();
}
inline void SlotCostFunDataPerOptPhase::_internal_set_overallperf_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  overallperf_m_ = value;
}
inline void SlotCostFunDataPerOptPhase::set_overallperf_m(float value) {
  _internal_set_overallperf_m(value);
  // @@protoc_insertion_point(field_set:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase.overallPerf_m)
}

// -------------------------------------------------------------------

// SlotCostFunDataPerOptPhase_array_port

// repeated .pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase data = 2645;
inline int SlotCostFunDataPerOptPhase_array_port::_internal_data_size() const {
  return data_.size();
}
inline int SlotCostFunDataPerOptPhase_array_port::data_size() const {
  return _internal_data_size();
}
inline void SlotCostFunDataPerOptPhase_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* SlotCostFunDataPerOptPhase_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase >*
SlotCostFunDataPerOptPhase_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port.data)
  return &data_;
}
inline const ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase& SlotCostFunDataPerOptPhase_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase& SlotCostFunDataPerOptPhase_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port.data)
  return _internal_data(index);
}
inline ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* SlotCostFunDataPerOptPhase_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase* SlotCostFunDataPerOptPhase_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::slot_cost_fun_data_per_opt_phase::SlotCostFunDataPerOptPhase >&
SlotCostFunDataPerOptPhase_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.si.slot_cost_fun_data_per_opt_phase.SlotCostFunDataPerOptPhase_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace slot_cost_fun_data_per_opt_phase
}  // namespace si
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_si_2fslot_5fcost_5ffun_5fdata_5fper_5fopt_5fphase_2eproto
