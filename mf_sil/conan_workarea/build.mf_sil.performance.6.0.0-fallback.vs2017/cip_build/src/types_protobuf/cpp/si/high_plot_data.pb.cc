// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/high_plot_data.proto

#include "si/high_plot_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_si_2fcnn_5fbased_5fparking_5fslot_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CnnBasedParkingSlotSerializable_si_2fcnn_5fbased_5fparking_5fslot_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fdelimiter_5fzones_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DelimiterZonesSerializable_si_2fdelimiter_5fzones_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fhigh_5fcluster_5fzone_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HighClusterZoneSerializable_si_2fhigh_5fcluster_5fzone_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fhigh_5fplot_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fquadrilateral_5fexpansion_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadrilateralExpansionSerializable_si_2fquadrilateral_5fexpansion_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fquadrilateral_5fserializable_5farray_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadrilateralSerializableArray_si_2fquadrilateral_5fserializable_5farray_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fslot_5fsurrounding_5flines_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SlotSurroundingLinesSerializable_si_2fslot_5fsurrounding_5flines_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2ftriangle_5fexpansion_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TriangleExpansionSerializable_si_2ftriangle_5fexpansion_5fserializable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fvirtual_5fline_5finfo_5fserializable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VirtualLineInfoSerializable_si_2fvirtual_5fline_5finfo_5fserializable_2eproto;
namespace pb {
namespace si {
namespace high_plot_data {
class HighPlotDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HighPlotData> _instance;
} _HighPlotData_default_instance_;
class HighPlotData_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HighPlotData_array_port> _instance;
} _HighPlotData_array_port_default_instance_;
}  // namespace high_plot_data
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::high_plot_data::_HighPlotData_default_instance_;
    new (ptr) ::pb::si::high_plot_data::HighPlotData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::high_plot_data::HighPlotData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto}, {
      &scc_info_DelimiterZonesSerializable_si_2fdelimiter_5fzones_5fserializable_2eproto.base,
      &scc_info_SlotSurroundingLinesSerializable_si_2fslot_5fsurrounding_5flines_5fserializable_2eproto.base,
      &scc_info_VirtualLineInfoSerializable_si_2fvirtual_5fline_5finfo_5fserializable_2eproto.base,
      &scc_info_TriangleExpansionSerializable_si_2ftriangle_5fexpansion_5fserializable_2eproto.base,
      &scc_info_QuadrilateralExpansionSerializable_si_2fquadrilateral_5fexpansion_5fserializable_2eproto.base,
      &scc_info_QuadrilateralSerializableArray_si_2fquadrilateral_5fserializable_5farray_2eproto.base,
      &scc_info_HighClusterZoneSerializable_si_2fhigh_5fcluster_5fzone_5fserializable_2eproto.base,
      &scc_info_CnnBasedParkingSlotSerializable_si_2fcnn_5fbased_5fparking_5fslot_5fserializable_2eproto.base,}};

static void InitDefaultsscc_info_HighPlotData_array_port_si_2fhigh_5fplot_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::high_plot_data::_HighPlotData_array_port_default_instance_;
    new (ptr) ::pb::si::high_plot_data::HighPlotData_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::high_plot_data::HighPlotData_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HighPlotData_array_port_si_2fhigh_5fplot_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HighPlotData_array_port_si_2fhigh_5fplot_5fdata_2eproto}, {
      &scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fhigh_5fplot_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fhigh_5fplot_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fhigh_5fplot_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fhigh_5fplot_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, delimiterzones_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, surroundinglinesperslot_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, virtuallinesinfo_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, triangleexpansionrois_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, sideexpansionrois_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, cnnblowuplimits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, slotblowuplimits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, rectslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, clusterzones_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData, cnnbasedparkingslots_),
  0,
  2,
  6,
  3,
  9,
  4,
  5,
  8,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::high_plot_data::HighPlotData_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::si::high_plot_data::HighPlotData)},
  { 25, 31, sizeof(::pb::si::high_plot_data::HighPlotData_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::high_plot_data::_HighPlotData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::high_plot_data::_HighPlotData_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fhigh_5fplot_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027si/high_plot_data.proto\022\024pb.si.high_pl"
  "ot_data\032%si/delimiter_zones_serializable"
  ".proto\032,si/slot_surrounding_lines_serial"
  "izable.proto\032\'si/virtual_line_info_seria"
  "lizable.proto\032(si/triangle_expansion_ser"
  "ializable.proto\032-si/quadrilateral_expans"
  "ion_serializable.proto\032)si/quadrilateral"
  "_serializable_array.proto\032\'si/high_clust"
  "er_zone_serializable.proto\032,si/cnn_based"
  "_parking_slot_serializable.proto\"\354\007\n\014Hig"
  "hPlotData\022W\n\016delimiterZones\030\354\003 \001(\0132>.pb."
  "si.delimiter_zones_serializable.Delimite"
  "rZonesSerializable\022m\n\027surroundingLinesPe"
  "rSlot\030\270\017 \001(\0132K.pb.si.slot_surrounding_li"
  "nes_serializable.SlotSurroundingLinesSer"
  "ializable\022\\\n\020virtualLinesInfo\030\373\025 \001(\0132A.p"
  "b.si.virtual_line_info_serializable.Virt"
  "ualLineInfoSerializable\022d\n\025triangleExpan"
  "sionRois\030\227\020 \001(\0132D.pb.si.triangle_expansi"
  "on_serializable.TriangleExpansionSeriali"
  "zable\022j\n\021sideExpansionRois\030\335\036 \001(\0132N.pb.s"
  "i.quadrilateral_expansion_serializable.Q"
  "uadrilateralExpansionSerializable\022`\n\017cnn"
  "BlowUpLimits\030\275\021 \001(\0132F.pb.si.quadrilatera"
  "l_serializable_array.QuadrilateralSerial"
  "izableArray\022a\n\020slotBlowUpLimits\030\362\025 \001(\0132F"
  ".pb.si.quadrilateral_serializable_array."
  "QuadrilateralSerializableArray\022Z\n\trectSl"
  "ots\030\373\033 \001(\0132F.pb.si.quadrilateral_seriali"
  "zable_array.QuadrilateralSerializableArr"
  "ay\022X\n\014clusterZones\030\375\026 \001(\0132A.pb.si.high_c"
  "luster_zone_serializable.HighClusterZone"
  "Serializable\022i\n\024cnnBasedParkingSlots\030\210\016 "
  "\001(\0132J.pb.si.cnn_based_parking_slot_seria"
  "lizable.CnnBasedParkingSlotSerializable\""
  "L\n\027HighPlotData_array_port\0221\n\004data\030\312\036 \003("
  "\0132\".pb.si.high_plot_data.HighPlotData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_deps[8] = {
  &::descriptor_table_si_2fcnn_5fbased_5fparking_5fslot_5fserializable_2eproto,
  &::descriptor_table_si_2fdelimiter_5fzones_5fserializable_2eproto,
  &::descriptor_table_si_2fhigh_5fcluster_5fzone_5fserializable_2eproto,
  &::descriptor_table_si_2fquadrilateral_5fexpansion_5fserializable_2eproto,
  &::descriptor_table_si_2fquadrilateral_5fserializable_5farray_2eproto,
  &::descriptor_table_si_2fslot_5fsurrounding_5flines_5fserializable_2eproto,
  &::descriptor_table_si_2ftriangle_5fexpansion_5fserializable_2eproto,
  &::descriptor_table_si_2fvirtual_5fline_5finfo_5fserializable_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_sccs[2] = {
  &scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto.base,
  &scc_info_HighPlotData_array_port_si_2fhigh_5fplot_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_once;
static bool descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fhigh_5fplot_5fdata_2eproto = {
  &descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_initialized, descriptor_table_protodef_si_2fhigh_5fplot_5fdata_2eproto, "si/high_plot_data.proto", 1477,
  &descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_once, descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_sccs, descriptor_table_si_2fhigh_5fplot_5fdata_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_si_2fhigh_5fplot_5fdata_2eproto::offsets,
  file_level_metadata_si_2fhigh_5fplot_5fdata_2eproto, 2, file_level_enum_descriptors_si_2fhigh_5fplot_5fdata_2eproto, file_level_service_descriptors_si_2fhigh_5fplot_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fhigh_5fplot_5fdata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fhigh_5fplot_5fdata_2eproto), true);
namespace pb {
namespace si {
namespace high_plot_data {

// ===================================================================

void HighPlotData::InitAsDefaultInstance() {
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->delimiterzones_ = const_cast< ::pb::si::delimiter_zones_serializable::DelimiterZonesSerializable*>(
      ::pb::si::delimiter_zones_serializable::DelimiterZonesSerializable::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->surroundinglinesperslot_ = const_cast< ::pb::si::slot_surrounding_lines_serializable::SlotSurroundingLinesSerializable*>(
      ::pb::si::slot_surrounding_lines_serializable::SlotSurroundingLinesSerializable::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->virtuallinesinfo_ = const_cast< ::pb::si::virtual_line_info_serializable::VirtualLineInfoSerializable*>(
      ::pb::si::virtual_line_info_serializable::VirtualLineInfoSerializable::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->triangleexpansionrois_ = const_cast< ::pb::si::triangle_expansion_serializable::TriangleExpansionSerializable*>(
      ::pb::si::triangle_expansion_serializable::TriangleExpansionSerializable::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->sideexpansionrois_ = const_cast< ::pb::si::quadrilateral_expansion_serializable::QuadrilateralExpansionSerializable*>(
      ::pb::si::quadrilateral_expansion_serializable::QuadrilateralExpansionSerializable::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->cnnblowuplimits_ = const_cast< ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray*>(
      ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->slotblowuplimits_ = const_cast< ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray*>(
      ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->rectslots_ = const_cast< ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray*>(
      ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->clusterzones_ = const_cast< ::pb::si::high_cluster_zone_serializable::HighClusterZoneSerializable*>(
      ::pb::si::high_cluster_zone_serializable::HighClusterZoneSerializable::internal_default_instance());
  ::pb::si::high_plot_data::_HighPlotData_default_instance_._instance.get_mutable()->cnnbasedparkingslots_ = const_cast< ::pb::si::cnn_based_parking_slot_serializable::CnnBasedParkingSlotSerializable*>(
      ::pb::si::cnn_based_parking_slot_serializable::CnnBasedParkingSlotSerializable::internal_default_instance());
}
class HighPlotData::_Internal {
 public:
  using HasBits = decltype(std::declval<HighPlotData>()._has_bits_);
  static const ::pb::si::delimiter_zones_serializable::DelimiterZonesSerializable& delimiterzones(const HighPlotData* msg);
  static void set_has_delimiterzones(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::si::slot_surrounding_lines_serializable::SlotSurroundingLinesSerializable& surroundinglinesperslot(const HighPlotData* msg);
  static void set_has_surroundinglinesperslot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb::si::virtual_line_info_serializable::VirtualLineInfoSerializable& virtuallinesinfo(const HighPlotData* msg);
  static void set_has_virtuallinesinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::pb::si::triangle_expansion_serializable::TriangleExpansionSerializable& triangleexpansionrois(const HighPlotData* msg);
  static void set_has_triangleexpansionrois(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::si::quadrilateral_expansion_serializable::QuadrilateralExpansionSerializable& sideexpansionrois(const HighPlotData* msg);
  static void set_has_sideexpansionrois(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray& cnnblowuplimits(const HighPlotData* msg);
  static void set_has_cnnblowuplimits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray& slotblowuplimits(const HighPlotData* msg);
  static void set_has_slotblowuplimits(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray& rectslots(const HighPlotData* msg);
  static void set_has_rectslots(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::pb::si::high_cluster_zone_serializable::HighClusterZoneSerializable& clusterzones(const HighPlotData* msg);
  static void set_has_clusterzones(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::pb::si::cnn_based_parking_slot_serializable::CnnBasedParkingSlotSerializable& cnnbasedparkingslots(const HighPlotData* msg);
  static void set_has_cnnbasedparkingslots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pb::si::delimiter_zones_serializable::DelimiterZonesSerializable&
HighPlotData::_Internal::delimiterzones(const HighPlotData* msg) {
  return *msg->delimiterzones_;
}
const ::pb::si::slot_surrounding_lines_serializable::SlotSurroundingLinesSerializable&
HighPlotData::_Internal::surroundinglinesperslot(const HighPlotData* msg) {
  return *msg->surroundinglinesperslot_;
}
const ::pb::si::virtual_line_info_serializable::VirtualLineInfoSerializable&
HighPlotData::_Internal::virtuallinesinfo(const HighPlotData* msg) {
  return *msg->virtuallinesinfo_;
}
const ::pb::si::triangle_expansion_serializable::TriangleExpansionSerializable&
HighPlotData::_Internal::triangleexpansionrois(const HighPlotData* msg) {
  return *msg->triangleexpansionrois_;
}
const ::pb::si::quadrilateral_expansion_serializable::QuadrilateralExpansionSerializable&
HighPlotData::_Internal::sideexpansionrois(const HighPlotData* msg) {
  return *msg->sideexpansionrois_;
}
const ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray&
HighPlotData::_Internal::cnnblowuplimits(const HighPlotData* msg) {
  return *msg->cnnblowuplimits_;
}
const ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray&
HighPlotData::_Internal::slotblowuplimits(const HighPlotData* msg) {
  return *msg->slotblowuplimits_;
}
const ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray&
HighPlotData::_Internal::rectslots(const HighPlotData* msg) {
  return *msg->rectslots_;
}
const ::pb::si::high_cluster_zone_serializable::HighClusterZoneSerializable&
HighPlotData::_Internal::clusterzones(const HighPlotData* msg) {
  return *msg->clusterzones_;
}
const ::pb::si::cnn_based_parking_slot_serializable::CnnBasedParkingSlotSerializable&
HighPlotData::_Internal::cnnbasedparkingslots(const HighPlotData* msg) {
  return *msg->cnnbasedparkingslots_;
}
void HighPlotData::clear_delimiterzones() {
  if (delimiterzones_ != nullptr) delimiterzones_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HighPlotData::clear_surroundinglinesperslot() {
  if (surroundinglinesperslot_ != nullptr) surroundinglinesperslot_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void HighPlotData::clear_virtuallinesinfo() {
  if (virtuallinesinfo_ != nullptr) virtuallinesinfo_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void HighPlotData::clear_triangleexpansionrois() {
  if (triangleexpansionrois_ != nullptr) triangleexpansionrois_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void HighPlotData::clear_sideexpansionrois() {
  if (sideexpansionrois_ != nullptr) sideexpansionrois_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void HighPlotData::clear_cnnblowuplimits() {
  if (cnnblowuplimits_ != nullptr) cnnblowuplimits_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void HighPlotData::clear_slotblowuplimits() {
  if (slotblowuplimits_ != nullptr) slotblowuplimits_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void HighPlotData::clear_rectslots() {
  if (rectslots_ != nullptr) rectslots_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void HighPlotData::clear_clusterzones() {
  if (clusterzones_ != nullptr) clusterzones_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void HighPlotData::clear_cnnbasedparkingslots() {
  if (cnnbasedparkingslots_ != nullptr) cnnbasedparkingslots_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
HighPlotData::HighPlotData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.high_plot_data.HighPlotData)
}
HighPlotData::HighPlotData(const HighPlotData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_delimiterzones()) {
    delimiterzones_ = new ::pb::si::delimiter_zones_serializable::DelimiterZonesSerializable(*from.delimiterzones_);
  } else {
    delimiterzones_ = nullptr;
  }
  if (from._internal_has_cnnbasedparkingslots()) {
    cnnbasedparkingslots_ = new ::pb::si::cnn_based_parking_slot_serializable::CnnBasedParkingSlotSerializable(*from.cnnbasedparkingslots_);
  } else {
    cnnbasedparkingslots_ = nullptr;
  }
  if (from._internal_has_surroundinglinesperslot()) {
    surroundinglinesperslot_ = new ::pb::si::slot_surrounding_lines_serializable::SlotSurroundingLinesSerializable(*from.surroundinglinesperslot_);
  } else {
    surroundinglinesperslot_ = nullptr;
  }
  if (from._internal_has_triangleexpansionrois()) {
    triangleexpansionrois_ = new ::pb::si::triangle_expansion_serializable::TriangleExpansionSerializable(*from.triangleexpansionrois_);
  } else {
    triangleexpansionrois_ = nullptr;
  }
  if (from._internal_has_cnnblowuplimits()) {
    cnnblowuplimits_ = new ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray(*from.cnnblowuplimits_);
  } else {
    cnnblowuplimits_ = nullptr;
  }
  if (from._internal_has_slotblowuplimits()) {
    slotblowuplimits_ = new ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray(*from.slotblowuplimits_);
  } else {
    slotblowuplimits_ = nullptr;
  }
  if (from._internal_has_virtuallinesinfo()) {
    virtuallinesinfo_ = new ::pb::si::virtual_line_info_serializable::VirtualLineInfoSerializable(*from.virtuallinesinfo_);
  } else {
    virtuallinesinfo_ = nullptr;
  }
  if (from._internal_has_clusterzones()) {
    clusterzones_ = new ::pb::si::high_cluster_zone_serializable::HighClusterZoneSerializable(*from.clusterzones_);
  } else {
    clusterzones_ = nullptr;
  }
  if (from._internal_has_rectslots()) {
    rectslots_ = new ::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray(*from.rectslots_);
  } else {
    rectslots_ = nullptr;
  }
  if (from._internal_has_sideexpansionrois()) {
    sideexpansionrois_ = new ::pb::si::quadrilateral_expansion_serializable::QuadrilateralExpansionSerializable(*from.sideexpansionrois_);
  } else {
    sideexpansionrois_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.si.high_plot_data.HighPlotData)
}

void HighPlotData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto.base);
  ::memset(&delimiterzones_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sideexpansionrois_) -
      reinterpret_cast<char*>(&delimiterzones_)) + sizeof(sideexpansionrois_));
}

HighPlotData::~HighPlotData() {
  // @@protoc_insertion_point(destructor:pb.si.high_plot_data.HighPlotData)
  SharedDtor();
}

void HighPlotData::SharedDtor() {
  if (this != internal_default_instance()) delete delimiterzones_;
  if (this != internal_default_instance()) delete cnnbasedparkingslots_;
  if (this != internal_default_instance()) delete surroundinglinesperslot_;
  if (this != internal_default_instance()) delete triangleexpansionrois_;
  if (this != internal_default_instance()) delete cnnblowuplimits_;
  if (this != internal_default_instance()) delete slotblowuplimits_;
  if (this != internal_default_instance()) delete virtuallinesinfo_;
  if (this != internal_default_instance()) delete clusterzones_;
  if (this != internal_default_instance()) delete rectslots_;
  if (this != internal_default_instance()) delete sideexpansionrois_;
}

void HighPlotData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HighPlotData& HighPlotData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HighPlotData_si_2fhigh_5fplot_5fdata_2eproto.base);
  return *internal_default_instance();
}


void HighPlotData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.high_plot_data.HighPlotData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(delimiterzones_ != nullptr);
      delimiterzones_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cnnbasedparkingslots_ != nullptr);
      cnnbasedparkingslots_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(surroundinglinesperslot_ != nullptr);
      surroundinglinesperslot_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(triangleexpansionrois_ != nullptr);
      triangleexpansionrois_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cnnblowuplimits_ != nullptr);
      cnnblowuplimits_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(slotblowuplimits_ != nullptr);
      slotblowuplimits_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(virtuallinesinfo_ != nullptr);
      virtuallinesinfo_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(clusterzones_ != nullptr);
      clusterzones_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(rectslots_ != nullptr);
      rectslots_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sideexpansionrois_ != nullptr);
      sideexpansionrois_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HighPlotData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .pb.si.delimiter_zones_serializable.DelimiterZonesSerializable delimiterZones = 492;
      case 492:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_delimiterzones(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.cnn_based_parking_slot_serializable.CnnBasedParkingSlotSerializable cnnBasedParkingSlots = 1800;
      case 1800:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cnnbasedparkingslots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.slot_surrounding_lines_serializable.SlotSurroundingLinesSerializable surroundingLinesPerSlot = 1976;
      case 1976:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_surroundinglinesperslot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.triangle_expansion_serializable.TriangleExpansionSerializable triangleExpansionRois = 2071;
      case 2071:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_triangleexpansionrois(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray cnnBlowUpLimits = 2237;
      case 2237:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_cnnblowuplimits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray slotBlowUpLimits = 2802;
      case 2802:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_slotblowuplimits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.virtual_line_info_serializable.VirtualLineInfoSerializable virtualLinesInfo = 2811;
      case 2811:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtuallinesinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.high_cluster_zone_serializable.HighClusterZoneSerializable clusterZones = 2941;
      case 2941:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_clusterzones(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray rectSlots = 3579;
      case 3579:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_rectslots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.si.quadrilateral_expansion_serializable.QuadrilateralExpansionSerializable sideExpansionRois = 3933;
      case 3933:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_sideexpansionrois(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HighPlotData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.high_plot_data.HighPlotData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .pb.si.delimiter_zones_serializable.DelimiterZonesSerializable delimiterZones = 492;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        492, _Internal::delimiterzones(this), target, stream);
  }

  // optional .pb.si.cnn_based_parking_slot_serializable.CnnBasedParkingSlotSerializable cnnBasedParkingSlots = 1800;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1800, _Internal::cnnbasedparkingslots(this), target, stream);
  }

  // optional .pb.si.slot_surrounding_lines_serializable.SlotSurroundingLinesSerializable surroundingLinesPerSlot = 1976;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1976, _Internal::surroundinglinesperslot(this), target, stream);
  }

  // optional .pb.si.triangle_expansion_serializable.TriangleExpansionSerializable triangleExpansionRois = 2071;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2071, _Internal::triangleexpansionrois(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray cnnBlowUpLimits = 2237;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2237, _Internal::cnnblowuplimits(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray slotBlowUpLimits = 2802;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2802, _Internal::slotblowuplimits(this), target, stream);
  }

  // optional .pb.si.virtual_line_info_serializable.VirtualLineInfoSerializable virtualLinesInfo = 2811;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2811, _Internal::virtuallinesinfo(this), target, stream);
  }

  // optional .pb.si.high_cluster_zone_serializable.HighClusterZoneSerializable clusterZones = 2941;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2941, _Internal::clusterzones(this), target, stream);
  }

  // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray rectSlots = 3579;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3579, _Internal::rectslots(this), target, stream);
  }

  // optional .pb.si.quadrilateral_expansion_serializable.QuadrilateralExpansionSerializable sideExpansionRois = 3933;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3933, _Internal::sideexpansionrois(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.high_plot_data.HighPlotData)
  return target;
}

size_t HighPlotData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.high_plot_data.HighPlotData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.si.delimiter_zones_serializable.DelimiterZonesSerializable delimiterZones = 492;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delimiterzones_);
    }

    // optional .pb.si.cnn_based_parking_slot_serializable.CnnBasedParkingSlotSerializable cnnBasedParkingSlots = 1800;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cnnbasedparkingslots_);
    }

    // optional .pb.si.slot_surrounding_lines_serializable.SlotSurroundingLinesSerializable surroundingLinesPerSlot = 1976;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *surroundinglinesperslot_);
    }

    // optional .pb.si.triangle_expansion_serializable.TriangleExpansionSerializable triangleExpansionRois = 2071;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *triangleexpansionrois_);
    }

    // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray cnnBlowUpLimits = 2237;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cnnblowuplimits_);
    }

    // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray slotBlowUpLimits = 2802;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slotblowuplimits_);
    }

    // optional .pb.si.virtual_line_info_serializable.VirtualLineInfoSerializable virtualLinesInfo = 2811;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *virtuallinesinfo_);
    }

    // optional .pb.si.high_cluster_zone_serializable.HighClusterZoneSerializable clusterZones = 2941;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clusterzones_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .pb.si.quadrilateral_serializable_array.QuadrilateralSerializableArray rectSlots = 3579;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rectslots_);
    }

    // optional .pb.si.quadrilateral_expansion_serializable.QuadrilateralExpansionSerializable sideExpansionRois = 3933;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sideexpansionrois_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HighPlotData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.high_plot_data.HighPlotData)
  GOOGLE_DCHECK_NE(&from, this);
  const HighPlotData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HighPlotData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.high_plot_data.HighPlotData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.high_plot_data.HighPlotData)
    MergeFrom(*source);
  }
}

void HighPlotData::MergeFrom(const HighPlotData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.high_plot_data.HighPlotData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_delimiterzones()->::pb::si::delimiter_zones_serializable::DelimiterZonesSerializable::MergeFrom(from._internal_delimiterzones());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cnnbasedparkingslots()->::pb::si::cnn_based_parking_slot_serializable::CnnBasedParkingSlotSerializable::MergeFrom(from._internal_cnnbasedparkingslots());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_surroundinglinesperslot()->::pb::si::slot_surrounding_lines_serializable::SlotSurroundingLinesSerializable::MergeFrom(from._internal_surroundinglinesperslot());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_triangleexpansionrois()->::pb::si::triangle_expansion_serializable::TriangleExpansionSerializable::MergeFrom(from._internal_triangleexpansionrois());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cnnblowuplimits()->::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray::MergeFrom(from._internal_cnnblowuplimits());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_slotblowuplimits()->::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray::MergeFrom(from._internal_slotblowuplimits());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_virtuallinesinfo()->::pb::si::virtual_line_info_serializable::VirtualLineInfoSerializable::MergeFrom(from._internal_virtuallinesinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_clusterzones()->::pb::si::high_cluster_zone_serializable::HighClusterZoneSerializable::MergeFrom(from._internal_clusterzones());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_rectslots()->::pb::si::quadrilateral_serializable_array::QuadrilateralSerializableArray::MergeFrom(from._internal_rectslots());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_sideexpansionrois()->::pb::si::quadrilateral_expansion_serializable::QuadrilateralExpansionSerializable::MergeFrom(from._internal_sideexpansionrois());
    }
  }
}

void HighPlotData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.high_plot_data.HighPlotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighPlotData::CopyFrom(const HighPlotData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.high_plot_data.HighPlotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighPlotData::IsInitialized() const {
  return true;
}

void HighPlotData::InternalSwap(HighPlotData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delimiterzones_, other->delimiterzones_);
  swap(cnnbasedparkingslots_, other->cnnbasedparkingslots_);
  swap(surroundinglinesperslot_, other->surroundinglinesperslot_);
  swap(triangleexpansionrois_, other->triangleexpansionrois_);
  swap(cnnblowuplimits_, other->cnnblowuplimits_);
  swap(slotblowuplimits_, other->slotblowuplimits_);
  swap(virtuallinesinfo_, other->virtuallinesinfo_);
  swap(clusterzones_, other->clusterzones_);
  swap(rectslots_, other->rectslots_);
  swap(sideexpansionrois_, other->sideexpansionrois_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HighPlotData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HighPlotData_array_port::InitAsDefaultInstance() {
}
class HighPlotData_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<HighPlotData_array_port>()._has_bits_);
};

HighPlotData_array_port::HighPlotData_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.high_plot_data.HighPlotData_array_port)
}
HighPlotData_array_port::HighPlotData_array_port(const HighPlotData_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.high_plot_data.HighPlotData_array_port)
}

void HighPlotData_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HighPlotData_array_port_si_2fhigh_5fplot_5fdata_2eproto.base);
}

HighPlotData_array_port::~HighPlotData_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.high_plot_data.HighPlotData_array_port)
  SharedDtor();
}

void HighPlotData_array_port::SharedDtor() {
}

void HighPlotData_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HighPlotData_array_port& HighPlotData_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HighPlotData_array_port_si_2fhigh_5fplot_5fdata_2eproto.base);
  return *internal_default_instance();
}


void HighPlotData_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.high_plot_data.HighPlotData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HighPlotData_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.high_plot_data.HighPlotData data = 3914;
      case 3914:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HighPlotData_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.high_plot_data.HighPlotData_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.high_plot_data.HighPlotData data = 3914;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3914, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.high_plot_data.HighPlotData_array_port)
  return target;
}

size_t HighPlotData_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.high_plot_data.HighPlotData_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.high_plot_data.HighPlotData data = 3914;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HighPlotData_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.high_plot_data.HighPlotData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const HighPlotData_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HighPlotData_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.high_plot_data.HighPlotData_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.high_plot_data.HighPlotData_array_port)
    MergeFrom(*source);
  }
}

void HighPlotData_array_port::MergeFrom(const HighPlotData_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.high_plot_data.HighPlotData_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void HighPlotData_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.high_plot_data.HighPlotData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighPlotData_array_port::CopyFrom(const HighPlotData_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.high_plot_data.HighPlotData_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighPlotData_array_port::IsInitialized() const {
  return true;
}

void HighPlotData_array_port::InternalSwap(HighPlotData_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HighPlotData_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace high_plot_data
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::high_plot_data::HighPlotData* Arena::CreateMaybeMessage< ::pb::si::high_plot_data::HighPlotData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::high_plot_data::HighPlotData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::high_plot_data::HighPlotData_array_port* Arena::CreateMaybeMessage< ::pb::si::high_plot_data::HighPlotData_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::high_plot_data::HighPlotData_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
