// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/si_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_si_2fsi_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_si_2fsi_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_si_2fsi_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_si_2fsi_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fsi_5fparams_2eproto;
namespace pb {
namespace si {
namespace si_params {
class SiParams;
class SiParamsDefaultTypeInternal;
extern SiParamsDefaultTypeInternal _SiParams_default_instance_;
class SiParams_array_port;
class SiParams_array_portDefaultTypeInternal;
extern SiParams_array_portDefaultTypeInternal _SiParams_array_port_default_instance_;
}  // namespace si_params
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::si::si_params::SiParams* Arena::CreateMaybeMessage<::pb::si::si_params::SiParams>(Arena*);
template<> ::pb::si::si_params::SiParams_array_port* Arena::CreateMaybeMessage<::pb::si::si_params::SiParams_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace si {
namespace si_params {

// ===================================================================

class SiParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.si.si_params.SiParams) */ {
 public:
  SiParams();
  virtual ~SiParams();

  SiParams(const SiParams& from);
  SiParams(SiParams&& from) noexcept
    : SiParams() {
    *this = ::std::move(from);
  }

  inline SiParams& operator=(const SiParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiParams& operator=(SiParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SiParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiParams* internal_default_instance() {
    return reinterpret_cast<const SiParams*>(
               &_SiParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiParams& a, SiParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SiParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiParams* New() const final {
    return CreateMaybeMessage<SiParams>(nullptr);
  }

  SiParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SiParams& from);
  void MergeFrom(const SiParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.si.si_params.SiParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_si_2fsi_5fparams_2eproto);
    return ::descriptor_table_si_2fsi_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kSlotPositioningRoiLeftRightDeltaMFieldNumber = 28,
    kDeveloperGenericFloat5FieldNumber = 61,
    kDynObjMinExistenceProbPercFieldNumber = 79,
    kMinBarrierPointOverhangMFieldNumber = 90,
    kMaxMemParkLinearAdjMFieldNumber = 91,
    kSideRoiYStartMFieldNumber = 93,
    kSlotReplacementDeltaOutlierDistSqrM2FieldNumber = 114,
    kDeveloperGenericFloat0FieldNumber = 152,
    kSideAlignmentWeightMprFieldNumber = 153,
    kCnnSlotOdSlotEnlargementMFieldNumber = 156,
    kMaxDrivenRotationPerpendicularRadFieldNumber = 161,
    kDeveloperGenericFloat1FieldNumber = 185,
    kOcSecZoneParSideToSideMFieldNumber = 193,
    kPerpendicularSlotLengthDeltaModelMFieldNumber = 215,
    kDeveloperGenericFloat2FieldNumber = 218,
    kSideRoiYEndMFieldNumber = 235,
    kDelZoneLeftRightMaxRelToVehLengthParNuFieldNumber = 236,
    kOcSecZonePerpSideToSideMFieldNumber = 243,
    kDeveloperGenericFloat3FieldNumber = 251,
    kOcPrimZoneParCurbIntoSlotMFieldNumber = 340,
    kVlMinVirtualLineLengthParSideMFieldNumber = 372,
    kMaxAllowedSlotOpeningOverlapMFieldNumber = 468,
    kDelZoneCurbFactorParNuFieldNumber = 469,
    kSlotDepthHorizontalLineAlignmentMFieldNumber = 483,
    kParallelSlotLengthDeltaModelMFieldNumber = 484,
    kVlMinVirtualLineLengthRoadMFieldNumber = 514,
    kMaxDrivenRotationAngledRadFieldNumber = 530,
    kPenaltyForShrinkToMinDimFieldNumber = 551,
    kMinSlotOpeningOffsetSideBlowUpMFieldNumber = 552,
    kGarageParkingSlotLengthDeltaModelMFieldNumber = 558,
    kCnnSlotsMinScenarioConfidenceThesholdFieldNumber = 566,
    kIntegrationMessagesComponentNuFieldNumber = 610,
    kLeftRightMemParkOffsetXMFieldNumber = 629,
    kShrinkSlotForNumericalInaccuracyMFieldNumber = 672,
    kVlInsideLargerThanRoadFactorFieldNumber = 718,
    kIntegrationMessagesLevelNuFieldNumber = 757,
    kMinCoveragePerSideNonParMFieldNumber = 779,
    kSideRoiXBackMFieldNumber = 784,
    kPerpendicularSlotWidthDeltaMaxMFieldNumber = 816,
    kSlotScoringMinParWingLengthMFieldNumber = 846,
    kParallelSlotWidthDeltaMinMFieldNumber = 847,
    kCnnSlotRoadAlignmentLimitNonParMFieldNumber = 849,
    kParallelSlotDepthDeltaMaxParkMFieldNumber = 866,
    kMinimumObstacleFittedLineLengthMFieldNumber = 888,
    kRelevantObjectMinBoxSideMFieldNumber = 897,
    kMaxAllowedSlotExtensionOverLinesToMinOpeningMFieldNumber = 905,
    kAllowedWsPosOutsideSlotMFieldNumber = 913,
    kCollFunctionRoiLengthDeltaMFieldNumber = 919,
    kOcSecZonePerpSideToRoadMFieldNumber = 931,
    kGarageParkingSlotWidthDeltaMaxMFieldNumber = 948,
    kCollFunctionRoiWidthDeltaMFieldNumber = 974,
    kDelZoneRoadMinDistNonParMFieldNumber = 976,
    kCnnSlotBlowUpLimitParSideMFieldNumber = 991,
    kOutlierDistSqrParallelSlotM2FieldNumber = 995,
    kMinRequiredDelimiterProjectionRatioNuFieldNumber = 1046,
    kOutlierDistSqrNonParallelSlotM2FieldNumber = 1066,
    kCoveredIntervalsRoiWidthMFieldNumber = 1124,
    kCnnSlotBlowUpLimitNonParCurbMFieldNumber = 1138,
    kDelZoneLeftRightFactorNonParNuFieldNumber = 1139,
    kOcAngMaxDistanceCurbMFieldNumber = 1147,
    kOcSecZonePerpCurbToRoadMFieldNumber = 1157,
    kOcSecZoneParCurbToRoadMFieldNumber = 1207,
    kOcSecZoneAngSideToSlotMFieldNumber = 1211,
    kDelZoneCurbMaxRelToVehWidthParNuFieldNumber = 1221,
    kOcPrimZoneCurbBelowSlotMFieldNumber = 1229,
    kPerpendicularSlotOpeningDeltaMinParkMFieldNumber = 1242,
    kSlotExpansionSideRoiWidthMFieldNumber = 1245,
    kAllowedDistToExistingWsWithoutWlSuppressionMFieldNumber = 1249,
    kLineOpeningDelimiterToCurbProjectionFactorFieldNumber = 1257,
    kCnnSlotsMinValidationOverlapMFieldNumber = 1287,
    kDelZoneLeftRightFactorParNuFieldNumber = 1290,
    kVlMinVirtualLineLengthPerpSideMFieldNumber = 1326,
    kShrinkPenaltyForExceedingGivenLimitsFieldNumber = 1354,
    kUseCovMatrixInflationFieldNumber = 957,
    kNcSplitUseMostXStartIdxFieldNumber = 622,
    kNcSplitOnFieldNumber = 2843,
    kDoObjectClusteringFieldNumber = 1052,
    kOutsideInAllowedOverlapMFieldNumber = 1371,
    kFrontRoiXStartMFieldNumber = 1415,
    kEnableSlotPoseDetectionOnVirtualLinesFieldNumber = 3996,
    kEnableParallelSlotsFieldNumber = 108,
    kEnablePerpendicularSlotsFieldNumber = 1404,
    kEnableGarageParkingSlotsFieldNumber = 183,
    kVlInsideLargeEnoughMFieldNumber = 1425,
    kDelZoneCurbFactorNonParNuFieldNumber = 1442,
    kPerpendicularSlotDepthDeltaMaxParkMFieldNumber = 1449,
    kInsideZoneDistMFieldNumber = 1458,
    kDelZoneCurbMaxRelToVehLengthNonParNuFieldNumber = 1463,
    kSlotPositioningRoiRoadDeltaMFieldNumber = 1493,
    kDelZoneRoadMaxRelToVehWidthParNuFieldNumber = 1533,
    kMinBarrierDelimiterLengthMFieldNumber = 1558,
    kEnableAngularRightOpeningTowardsFrontFieldNumber = 2559,
    kEnableAngularLeftOpeningTowardsBackFieldNumber = 1303,
    kEnableAngularLeftOpeningTowardsFrontFieldNumber = 290,
    kEnableAngularSlotBruteForceDetectionFieldNumber = 2126,
    kHorizontalMovementLimitOfASlotSlotCoordsMFieldNumber = 1573,
    kOcPerpMaxDistanceSideMFieldNumber = 1587,
    kParallelSlotOpeningDeltaMaxParkMFieldNumber = 1588,
    kAllowedDistToExistingWsWithWlSuppressionMFieldNumber = 1590,
    kThDelimiterDistMFieldNumber = 1609,
    kPreferWideSlotsFieldNumber = 86,
    kOfferOverlappingSlotsFieldNumber = 862,
    kPerformOptimizationFieldNumber = 2187,
    kEnableSlotShrinkingBelowUsualSizeDuringTrackFieldNumber = 3315,
    kDelZoneRoadMinDistParMFieldNumber = 1695,
    kVlMaxAllowedRoadInsideAngleDiffRadFieldNumber = 1704,
    kMaxRoadsideExtensionPerpendicularMFieldNumber = 1711,
    kLineOrientationRoiDeltaMFieldNumber = 1754,
    kAllowNakedSlotsFieldNumber = 953,
    kRequireAtLeastOneDelimitingObjectForNakedSlotFieldNumber = 1927,
    kEnableAngularParkingFieldNumber = 186,
    kEnableAngularRightOpeningTowardsBackFieldNumber = 3952,
    kOcSecZoneAngCurbToCurbMFieldNumber = 1757,
    kProhibitionZoneRelativeLengthFieldNumber = 1829,
    kSlotPenetrationDepthMFieldNumber = 1832,
    kPerpendicularSlotWidthDeltaMinMFieldNumber = 1840,
    kParallelSlotWidthDeltaMaxMFieldNumber = 1871,
    kFrontRoiYSideMFieldNumber = 1875,
    kEnableInsideObjectPenetrationDepthFieldNumber = 1300,
    kVlProjectOntoBoxIfFailedFieldNumber = 1532,
    kVlDoRoadInsideOptimizationFieldNumber = 739,
    kVlUseRoadFacingForNonParallelSlotsFieldNumber = 4010,
    kSideAndCurbDelimiterRoiBottomShiftMFieldNumber = 1910,
    kOcPrimZonePerpCurbIntoSlotMFieldNumber = 1911,
    kMinDistGapCnnSlotVsTrackedSlotMFieldNumber = 1930,
    kAllowSlotExtensionOverLinesToMinOpeningFieldNumber = 2382,
    kAllowShrinkOnLinesDespiteSideObjectsFieldNumber = 2840,
    kPreferShiftToTopOnCurbObjectsFieldNumber = 2011,
    kEnableSlotFallbackFieldNumber = 494,
    kDelZoneRoadFactorNonParNuFieldNumber = 1967,
    kGarageParkingSlotWidthDeltaMinMFieldNumber = 1972,
    kSlotIdentMaxDevFromStraightLineMFieldNumber = 1973,
    kDynObjMaxVelMpsFieldNumber = 1975,
    kWeightLineOrientationFieldNumber = 1980,
    kCnnSlotsValidationMaxOpeningAngleDiffRadFieldNumber = 1982,
    kSlotScoringMinNonParSideLengthMFieldNumber = 1986,
    kOcSecZonePerpCurbToSideMFieldNumber = 2005,
    kMaxAllowedVehCurbOverlapForPerpMFieldNumber = 2010,
    kOcSecZoneParCurbToSideMFieldNumber = 2023,
    kMaxDrivenRotationGarageRadFieldNumber = 2024,
    kSideShiftPenaltyForCurbObjectsFieldNumber = 2073,
    kCnnSlotBlowUpLimitNonParSideMFieldNumber = 2089,
    kEnlargeDynObjFieldNumber = 1630,
    kDoExactShiftVectorToEgoCollisionCheckFieldNumber = 1631,
    kEnableSlotLengthAdaptionToAdjacentObjectsFieldNumber = 3682,
    kEnableSlotLengthAdaptionToAdjacentLinesFieldNumber = 1476,
    kGarageParkingSlotDoorAreaLengthMFieldNumber = 2119,
    kUiVersionNumberFieldNumber = 2124,
    kWeightCurbOrientationFieldNumber = 2143,
    kOcPrimZonePerpSideToRoadMFieldNumber = 2160,
    kLcNoCurbLineOptimizationIfNoCurbLcFieldNumber = 3610,
    kEnableLeftSideScanningFieldNumber = 3159,
    kEnableRightSideScanningFieldNumber = 507,
    kEnableFrontScanningFieldNumber = 1368,
    kNcSplitMaxSkippableNCAreaPerStepM2FieldNumber = 2186,
    kInvalidateOverlappingEstablishedSlotsFieldNumber = 490,
    kEnableSlotOrientationOnSideVLsFieldNumber = 1985,
    kEnableSlotOrientationOnWingVLsFieldNumber = 3521,
    kHighSideDelimiterRequiredFieldNumber = 2753,
    kMinDistanceToObjectMFieldNumber = 2195,
    kOcPerpendicularMaxDistanceXForCurbSideClusteringMFieldNumber = 2200,
    kEnableUnspecifiedShiftFieldNumber = 1788,
    kDoLineCategorizationFieldNumber = 3392,
    kDoCurbOnlyLineCategorizationFieldNumber = 2120,
    kIgnoreLinesForSandwichSlotsFieldNumber = 1548,
    kMinHeightConfDeltaStaticObjFieldNumber = 2213,
    kRearMemParkGapMFieldNumber = 2241,
    kMinDistanceNoObjectMFieldNumber = 2244,
    kOsdSideRoiXBackMFieldNumber = 2258,
    kAllowNakedCnnSlotsFieldNumber = 835,
    kCnnSlotsAllowSiSlotOverrideFieldNumber = 3762,
    kPreapplyRoadsideExtensionFieldNumber = 2224,
    kSlotScoringMaxParLineLengthMFieldNumber = 2287,
    kSlotScoringMaxVlOrLineAngleDiffRadFieldNumber = 2293,
    kPerpendicularSlotLengthDeltaMinMFieldNumber = 2314,
    kDynObjMaxPreviewTimeSFieldNumber = 2363,
    kAllowNarrowSlotsScanFieldNumber = 1727,
    kEnableCnnWheelStoppersFieldNumber = 3141,
    kEnableCnnWheelStopperStatObjVerificationFieldNumber = 1382,
    kWsStatObjIgnoreEvaluationFieldNumber = 3340,
    kMinAppliedRoadsideExtensionMFieldNumber = 2410,
    kSlotExpMaxTriangleExpansionMFieldNumber = 2427,
    kCnnSlotsEnableSiSlotDetectionVerificationFieldNumber = 3857,
    kCnnCompareSlotTypeFPSuppressionFieldNumber = 2272,
    kCnnSlotsPerpendicularValidatesAngularFieldNumber = 1447,
    kCnnSlotsEnableCnnSlotPrototypesFieldNumber = 2136,
    kSmallSlotOpeningPenaltyFieldNumber = 2479,
    kPerpendicularSlotWidthDeltaModelMFieldNumber = 2495,
    kAngularParkingDetectionWindowAbsMaxMFieldNumber = 2498,
    kOcSecZoneAngCurbToRoadMFieldNumber = 2518,
    kOcSecZoneParSideToSlotMFieldNumber = 2522,
    kOcSecZonePerpSideToSlotMFieldNumber = 2536,
    kParallelSlotLengthDeltaMaxMFieldNumber = 2547,
    kOcPrimZoneParSideOpeningMFieldNumber = 2563,
    kParallelLineAllowedDeviationRadFieldNumber = 2580,
    kOcParallelMaxDistanceXForCurbSideClusteringMFieldNumber = 2605,
    kSafetyMarginDynObjEnlargingCarMFieldNumber = 2657,
    kOcPerpMaxDistanceCurbMFieldNumber = 2664,
    kVlMaxTotalAngleRadFieldNumber = 2683,
    kOcSecZoneAngCurbToSideMFieldNumber = 2694,
    kIsStaticObjectInputCCWOrientedFieldNumber = 3131,
    kUseLineMarkingsFieldNumber = 814,
    kTreatUnknownCurbsideObjectsAsBodyTraversableFieldNumber = 2916,
    kEnableSlotIdentFromTrajectoryFieldNumber = 3922,
    kShrinkPenaltyForClassifyingObjectAsDynamicFieldNumber = 2700,
    kSlotEdgePullSearchDistFrontMFieldNumber = 2717,
    kLcCurbOnlyAngleDiffRadFieldNumber = 2739,
    kDelZoneRoadFactorParNuFieldNumber = 2770,
    kLcLineDistCostFactorFieldNumber = 2853,
    kMaxRoadsideExtensionAngularMFieldNumber = 2854,
    kVlMinLengthStartDirectionSqMFieldNumber = 2860,
    kMaxRoadsideExtensionParallelMFieldNumber = 2888,
    kWingAlignmentWeightMprFieldNumber = 2889,
    kGarageParkingSlotLengthDeltaMinMFieldNumber = 2905,
    kSlotIdentMaxYawDevParallelRadFieldNumber = 2911,
    kEnableSecondSideDelimiterOnlyScenarioFieldNumber = 2565,
    kEnableFirstSideDelimiterOnlyScenarioFieldNumber = 3069,
    kPreferSecondSideOSDFieldNumber = 3007,
    kRequiredCurbObjectForOneSideDelimitingSlotsFieldNumber = 3005,
    kLeftRightMemParkGapYMFieldNumber = 2918,
    kMinCurbObjLengthForOneSideDelMFieldNumber = 2932,
    kOcSecZonePerpCurbToCurbMFieldNumber = 2958,
    kOcSecZoneParCurbToCurbMFieldNumber = 3004,
    kOcPrimZoneParSideToRoadMFieldNumber = 3020,
    kSafetyMarginDynObjEnlargingPedMFieldNumber = 3035,
    kBarrierDelimiterWidthMFieldNumber = 3039,
    kParallelSlotDepthDeltaMinParkMFieldNumber = 3046,
    kSensingRangeMFieldNumber = 3054,
    kFrontRoiXEndMFieldNumber = 3084,
    kSlotExpFrameCounterStableNuFieldNumber = 3095,
    kSlotExpMinTriangleExpansionRadFieldNumber = 3099,
    kSideAllowedOverlapMFieldNumber = 3100,
    kDelZoneLeftRightMaxRelToVehWidthNonParNuFieldNumber = 3109,
    kAngularCurbRoadAreaFactorFieldNumber = 3119,
    kCnnOrientationErrorCostFunctionFactorFieldNumber = 3120,
    kPerpendicularSlotOpeningDeltaMaxParkMFieldNumber = 3166,
    kFrontMemParkGapMFieldNumber = 3217,
    kOcSecZoneParSideToCurbMFieldNumber = 3226,
    kLineOpeningDelimiterMaxRoadProtrusionMFieldNumber = 3234,
    kOcSecZonePerpSideToCurbMFieldNumber = 3240,
    kIncreaseOverhangLowObjectMFieldNumber = 3268,
    kVlMinVirtualLineLengthCurbMFieldNumber = 3337,
    kPerpendicularSlotLengthDeltaMaxMFieldNumber = 3338,
    kOcPrimZonePerpSideOpeningMFieldNumber = 3357,
    kPerpendicularSlotDepthDeltaMinParkMFieldNumber = 3373,
    kOcPrimZoneAngCurbIntoSlotMFieldNumber = 3433,
    kLcCurbOnlySpatialDiffMFieldNumber = 3440,
    kAngularSlotMaxDepthExtensionMFieldNumber = 3468,
    kInflationSafetyDistanceParkOutMFieldNumber = 3473,
    kOcSecZoneAngSideToSideMFieldNumber = 3488,
    kParallelSlotLineTooLongPenaltyFieldNumber = 3503,
    kAngularParkingDetectionWindowAbsMinMFieldNumber = 3522,
    kParallelSlotLengthDeltaMinMFieldNumber = 3571,
    kShrinkPenaltyForShiftBelowMinFieldNumber = 3594,
    kSideAlignmentROIWidthMFieldNumber = 3637,
    kParallelSlotOpeningDeltaMinParkMFieldNumber = 3760,
    kOcPrimZoneAngSideOpeningMFieldNumber = 3788,
    kOsdSideRoiXFrontMFieldNumber = 3796,
    kOcSecZoneAngSideToRoadMFieldNumber = 3824,
    kCnnSlotRoadAlignmentLimitParMFieldNumber = 3835,
    kPreferShiftToTopRoiYBorderOffsetMFieldNumber = 3844,
    kDelZoneRoadMaxRelToVehLengthNonParNuFieldNumber = 3847,
    kVlMaxAngleToParkingBoxEdgeRadFieldNumber = 3851,
    kInsideObjectMaxProjectionLengthMFieldNumber = 3865,
    kParallelSlotWidthDeltaModelMFieldNumber = 3876,
    kLcLineLengthCostFactorFieldNumber = 3908,
    kGarageParkingSlotLengthDeltaMaxMFieldNumber = 3929,
    kMemParkExtendSlotMFieldNumber = 3954,
    kVlMaxNextEdgeAngleRadFieldNumber = 3965,
    kCnnSlotBlowUpLimitParCurbMFieldNumber = 3972,
    kSideRoiXFrontMFieldNumber = 3982,
    kLcAngleCostFactorFieldNumber = 3988,
    kTypicalOrientationOfAngledSlotRadFieldNumber = 4023,
    kInflationSafetyDistanceDefaultMFieldNumber = 4034,
    kCnnSlotsMinInvalidationOverlapMFieldNumber = 4038,
    kSideAndCurbDelimiterRoiExtensionMFieldNumber = 4044,
    kVlUseMaxAngleToParkingBoxEdgeFieldNumber = 522962,
    kSlotExpansionFieldNumber = 3436,
    kSlotExpansionOnLinesFieldNumber = 3304,
    kDoObjectInflationFieldNumber = 477,
    kOcSecZoneParSideToRoadMFieldNumber = 1493409,
    kMaxDrivenRotationParallelRadFieldNumber = 1962442,
    kDeveloperGenericFloat4FieldNumber = 4286347,
    kUseAreaCriteriaFieldNumber = 14368221,
    kUseLinearOverlapDropOffFieldNumber = 1707,
    kTeCalculateRoadSideExpansionFieldNumber = 19,
    kDelZonesUseHighComplexityGetScoreFieldNumber = 16563677,
    kOcSecZoneAngSideToCurbMFieldNumber = 8701776,
    kSlotExpMaxAngleDiffRadFieldNumber = 11519704,
    kMaxMemParkRotAdjRadFieldNumber = 12895248,
    kCurbObjectEvaluationRoiDepthDeltaMFieldNumber = 15294138,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float slotPositioningRoiLeftRightDelta_m = 28;
  bool has_slotpositioningroileftrightdelta_m() const;
  private:
  bool _internal_has_slotpositioningroileftrightdelta_m() const;
  public:
  void clear_slotpositioningroileftrightdelta_m();
  float slotpositioningroileftrightdelta_m() const;
  void set_slotpositioningroileftrightdelta_m(float value);
  private:
  float _internal_slotpositioningroileftrightdelta_m() const;
  void _internal_set_slotpositioningroileftrightdelta_m(float value);
  public:

  // optional float developerGenericFloat5 = 61;
  bool has_developergenericfloat5() const;
  private:
  bool _internal_has_developergenericfloat5() const;
  public:
  void clear_developergenericfloat5();
  float developergenericfloat5() const;
  void set_developergenericfloat5(float value);
  private:
  float _internal_developergenericfloat5() const;
  void _internal_set_developergenericfloat5(float value);
  public:

  // optional uint32 dynObjMinExistenceProb_perc = 79;
  bool has_dynobjminexistenceprob_perc() const;
  private:
  bool _internal_has_dynobjminexistenceprob_perc() const;
  public:
  void clear_dynobjminexistenceprob_perc();
  ::PROTOBUF_NAMESPACE_ID::uint32 dynobjminexistenceprob_perc() const;
  void set_dynobjminexistenceprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dynobjminexistenceprob_perc() const;
  void _internal_set_dynobjminexistenceprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float minBarrierPointOverhang_m = 90;
  bool has_minbarrierpointoverhang_m() const;
  private:
  bool _internal_has_minbarrierpointoverhang_m() const;
  public:
  void clear_minbarrierpointoverhang_m();
  float minbarrierpointoverhang_m() const;
  void set_minbarrierpointoverhang_m(float value);
  private:
  float _internal_minbarrierpointoverhang_m() const;
  void _internal_set_minbarrierpointoverhang_m(float value);
  public:

  // optional float maxMemParkLinearAdj_m = 91;
  bool has_maxmemparklinearadj_m() const;
  private:
  bool _internal_has_maxmemparklinearadj_m() const;
  public:
  void clear_maxmemparklinearadj_m();
  float maxmemparklinearadj_m() const;
  void set_maxmemparklinearadj_m(float value);
  private:
  float _internal_maxmemparklinearadj_m() const;
  void _internal_set_maxmemparklinearadj_m(float value);
  public:

  // optional float sideRoiYStart_m = 93;
  bool has_sideroiystart_m() const;
  private:
  bool _internal_has_sideroiystart_m() const;
  public:
  void clear_sideroiystart_m();
  float sideroiystart_m() const;
  void set_sideroiystart_m(float value);
  private:
  float _internal_sideroiystart_m() const;
  void _internal_set_sideroiystart_m(float value);
  public:

  // optional float slotReplacementDeltaOutlierDistSqr_m2 = 114;
  bool has_slotreplacementdeltaoutlierdistsqr_m2() const;
  private:
  bool _internal_has_slotreplacementdeltaoutlierdistsqr_m2() const;
  public:
  void clear_slotreplacementdeltaoutlierdistsqr_m2();
  float slotreplacementdeltaoutlierdistsqr_m2() const;
  void set_slotreplacementdeltaoutlierdistsqr_m2(float value);
  private:
  float _internal_slotreplacementdeltaoutlierdistsqr_m2() const;
  void _internal_set_slotreplacementdeltaoutlierdistsqr_m2(float value);
  public:

  // optional float developerGenericFloat0 = 152;
  bool has_developergenericfloat0() const;
  private:
  bool _internal_has_developergenericfloat0() const;
  public:
  void clear_developergenericfloat0();
  float developergenericfloat0() const;
  void set_developergenericfloat0(float value);
  private:
  float _internal_developergenericfloat0() const;
  void _internal_set_developergenericfloat0(float value);
  public:

  // optional float sideAlignmentWeight_mpr = 153;
  bool has_sidealignmentweight_mpr() const;
  private:
  bool _internal_has_sidealignmentweight_mpr() const;
  public:
  void clear_sidealignmentweight_mpr();
  float sidealignmentweight_mpr() const;
  void set_sidealignmentweight_mpr(float value);
  private:
  float _internal_sidealignmentweight_mpr() const;
  void _internal_set_sidealignmentweight_mpr(float value);
  public:

  // optional float cnnSlotOdSlotEnlargement_m = 156;
  bool has_cnnslotodslotenlargement_m() const;
  private:
  bool _internal_has_cnnslotodslotenlargement_m() const;
  public:
  void clear_cnnslotodslotenlargement_m();
  float cnnslotodslotenlargement_m() const;
  void set_cnnslotodslotenlargement_m(float value);
  private:
  float _internal_cnnslotodslotenlargement_m() const;
  void _internal_set_cnnslotodslotenlargement_m(float value);
  public:

  // optional float maxDrivenRotationPerpendicular_rad = 161;
  bool has_maxdrivenrotationperpendicular_rad() const;
  private:
  bool _internal_has_maxdrivenrotationperpendicular_rad() const;
  public:
  void clear_maxdrivenrotationperpendicular_rad();
  float maxdrivenrotationperpendicular_rad() const;
  void set_maxdrivenrotationperpendicular_rad(float value);
  private:
  float _internal_maxdrivenrotationperpendicular_rad() const;
  void _internal_set_maxdrivenrotationperpendicular_rad(float value);
  public:

  // optional float developerGenericFloat1 = 185;
  bool has_developergenericfloat1() const;
  private:
  bool _internal_has_developergenericfloat1() const;
  public:
  void clear_developergenericfloat1();
  float developergenericfloat1() const;
  void set_developergenericfloat1(float value);
  private:
  float _internal_developergenericfloat1() const;
  void _internal_set_developergenericfloat1(float value);
  public:

  // optional float ocSecZoneParSideToSide_m = 193;
  bool has_ocseczoneparsidetoside_m() const;
  private:
  bool _internal_has_ocseczoneparsidetoside_m() const;
  public:
  void clear_ocseczoneparsidetoside_m();
  float ocseczoneparsidetoside_m() const;
  void set_ocseczoneparsidetoside_m(float value);
  private:
  float _internal_ocseczoneparsidetoside_m() const;
  void _internal_set_ocseczoneparsidetoside_m(float value);
  public:

  // optional float perpendicularSlotLengthDeltaModel_m = 215;
  bool has_perpendicularslotlengthdeltamodel_m() const;
  private:
  bool _internal_has_perpendicularslotlengthdeltamodel_m() const;
  public:
  void clear_perpendicularslotlengthdeltamodel_m();
  float perpendicularslotlengthdeltamodel_m() const;
  void set_perpendicularslotlengthdeltamodel_m(float value);
  private:
  float _internal_perpendicularslotlengthdeltamodel_m() const;
  void _internal_set_perpendicularslotlengthdeltamodel_m(float value);
  public:

  // optional float developerGenericFloat2 = 218;
  bool has_developergenericfloat2() const;
  private:
  bool _internal_has_developergenericfloat2() const;
  public:
  void clear_developergenericfloat2();
  float developergenericfloat2() const;
  void set_developergenericfloat2(float value);
  private:
  float _internal_developergenericfloat2() const;
  void _internal_set_developergenericfloat2(float value);
  public:

  // optional float sideRoiYEnd_m = 235;
  bool has_sideroiyend_m() const;
  private:
  bool _internal_has_sideroiyend_m() const;
  public:
  void clear_sideroiyend_m();
  float sideroiyend_m() const;
  void set_sideroiyend_m(float value);
  private:
  float _internal_sideroiyend_m() const;
  void _internal_set_sideroiyend_m(float value);
  public:

  // optional float delZoneLeftRightMaxRelToVehLengthPar_nu = 236;
  bool has_delzoneleftrightmaxreltovehlengthpar_nu() const;
  private:
  bool _internal_has_delzoneleftrightmaxreltovehlengthpar_nu() const;
  public:
  void clear_delzoneleftrightmaxreltovehlengthpar_nu();
  float delzoneleftrightmaxreltovehlengthpar_nu() const;
  void set_delzoneleftrightmaxreltovehlengthpar_nu(float value);
  private:
  float _internal_delzoneleftrightmaxreltovehlengthpar_nu() const;
  void _internal_set_delzoneleftrightmaxreltovehlengthpar_nu(float value);
  public:

  // optional float ocSecZonePerpSideToSide_m = 243;
  bool has_ocseczoneperpsidetoside_m() const;
  private:
  bool _internal_has_ocseczoneperpsidetoside_m() const;
  public:
  void clear_ocseczoneperpsidetoside_m();
  float ocseczoneperpsidetoside_m() const;
  void set_ocseczoneperpsidetoside_m(float value);
  private:
  float _internal_ocseczoneperpsidetoside_m() const;
  void _internal_set_ocseczoneperpsidetoside_m(float value);
  public:

  // optional float developerGenericFloat3 = 251;
  bool has_developergenericfloat3() const;
  private:
  bool _internal_has_developergenericfloat3() const;
  public:
  void clear_developergenericfloat3();
  float developergenericfloat3() const;
  void set_developergenericfloat3(float value);
  private:
  float _internal_developergenericfloat3() const;
  void _internal_set_developergenericfloat3(float value);
  public:

  // optional float ocPrimZoneParCurbIntoSlot_m = 340;
  bool has_ocprimzoneparcurbintoslot_m() const;
  private:
  bool _internal_has_ocprimzoneparcurbintoslot_m() const;
  public:
  void clear_ocprimzoneparcurbintoslot_m();
  float ocprimzoneparcurbintoslot_m() const;
  void set_ocprimzoneparcurbintoslot_m(float value);
  private:
  float _internal_ocprimzoneparcurbintoslot_m() const;
  void _internal_set_ocprimzoneparcurbintoslot_m(float value);
  public:

  // optional float vlMinVirtualLineLengthParSide_m = 372;
  bool has_vlminvirtuallinelengthparside_m() const;
  private:
  bool _internal_has_vlminvirtuallinelengthparside_m() const;
  public:
  void clear_vlminvirtuallinelengthparside_m();
  float vlminvirtuallinelengthparside_m() const;
  void set_vlminvirtuallinelengthparside_m(float value);
  private:
  float _internal_vlminvirtuallinelengthparside_m() const;
  void _internal_set_vlminvirtuallinelengthparside_m(float value);
  public:

  // optional float maxAllowedSlotOpeningOverlap_m = 468;
  bool has_maxallowedslotopeningoverlap_m() const;
  private:
  bool _internal_has_maxallowedslotopeningoverlap_m() const;
  public:
  void clear_maxallowedslotopeningoverlap_m();
  float maxallowedslotopeningoverlap_m() const;
  void set_maxallowedslotopeningoverlap_m(float value);
  private:
  float _internal_maxallowedslotopeningoverlap_m() const;
  void _internal_set_maxallowedslotopeningoverlap_m(float value);
  public:

  // optional float delZoneCurbFactorPar_nu = 469;
  bool has_delzonecurbfactorpar_nu() const;
  private:
  bool _internal_has_delzonecurbfactorpar_nu() const;
  public:
  void clear_delzonecurbfactorpar_nu();
  float delzonecurbfactorpar_nu() const;
  void set_delzonecurbfactorpar_nu(float value);
  private:
  float _internal_delzonecurbfactorpar_nu() const;
  void _internal_set_delzonecurbfactorpar_nu(float value);
  public:

  // optional float slotDepthHorizontalLineAlignment_m = 483;
  bool has_slotdepthhorizontallinealignment_m() const;
  private:
  bool _internal_has_slotdepthhorizontallinealignment_m() const;
  public:
  void clear_slotdepthhorizontallinealignment_m();
  float slotdepthhorizontallinealignment_m() const;
  void set_slotdepthhorizontallinealignment_m(float value);
  private:
  float _internal_slotdepthhorizontallinealignment_m() const;
  void _internal_set_slotdepthhorizontallinealignment_m(float value);
  public:

  // optional float parallelSlotLengthDeltaModel_m = 484;
  bool has_parallelslotlengthdeltamodel_m() const;
  private:
  bool _internal_has_parallelslotlengthdeltamodel_m() const;
  public:
  void clear_parallelslotlengthdeltamodel_m();
  float parallelslotlengthdeltamodel_m() const;
  void set_parallelslotlengthdeltamodel_m(float value);
  private:
  float _internal_parallelslotlengthdeltamodel_m() const;
  void _internal_set_parallelslotlengthdeltamodel_m(float value);
  public:

  // optional float vlMinVirtualLineLengthRoad_m = 514;
  bool has_vlminvirtuallinelengthroad_m() const;
  private:
  bool _internal_has_vlminvirtuallinelengthroad_m() const;
  public:
  void clear_vlminvirtuallinelengthroad_m();
  float vlminvirtuallinelengthroad_m() const;
  void set_vlminvirtuallinelengthroad_m(float value);
  private:
  float _internal_vlminvirtuallinelengthroad_m() const;
  void _internal_set_vlminvirtuallinelengthroad_m(float value);
  public:

  // optional float maxDrivenRotationAngled_rad = 530;
  bool has_maxdrivenrotationangled_rad() const;
  private:
  bool _internal_has_maxdrivenrotationangled_rad() const;
  public:
  void clear_maxdrivenrotationangled_rad();
  float maxdrivenrotationangled_rad() const;
  void set_maxdrivenrotationangled_rad(float value);
  private:
  float _internal_maxdrivenrotationangled_rad() const;
  void _internal_set_maxdrivenrotationangled_rad(float value);
  public:

  // optional float penaltyForShrinkToMinDim = 551;
  bool has_penaltyforshrinktomindim() const;
  private:
  bool _internal_has_penaltyforshrinktomindim() const;
  public:
  void clear_penaltyforshrinktomindim();
  float penaltyforshrinktomindim() const;
  void set_penaltyforshrinktomindim(float value);
  private:
  float _internal_penaltyforshrinktomindim() const;
  void _internal_set_penaltyforshrinktomindim(float value);
  public:

  // optional float minSlotOpeningOffsetSideBlowUp_m = 552;
  bool has_minslotopeningoffsetsideblowup_m() const;
  private:
  bool _internal_has_minslotopeningoffsetsideblowup_m() const;
  public:
  void clear_minslotopeningoffsetsideblowup_m();
  float minslotopeningoffsetsideblowup_m() const;
  void set_minslotopeningoffsetsideblowup_m(float value);
  private:
  float _internal_minslotopeningoffsetsideblowup_m() const;
  void _internal_set_minslotopeningoffsetsideblowup_m(float value);
  public:

  // optional float garageParkingSlotLengthDeltaModel_m = 558;
  bool has_garageparkingslotlengthdeltamodel_m() const;
  private:
  bool _internal_has_garageparkingslotlengthdeltamodel_m() const;
  public:
  void clear_garageparkingslotlengthdeltamodel_m();
  float garageparkingslotlengthdeltamodel_m() const;
  void set_garageparkingslotlengthdeltamodel_m(float value);
  private:
  float _internal_garageparkingslotlengthdeltamodel_m() const;
  void _internal_set_garageparkingslotlengthdeltamodel_m(float value);
  public:

  // optional uint32 cnnSlotsMinScenarioConfidenceTheshold = 566;
  bool has_cnnslotsminscenarioconfidencetheshold() const;
  private:
  bool _internal_has_cnnslotsminscenarioconfidencetheshold() const;
  public:
  void clear_cnnslotsminscenarioconfidencetheshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 cnnslotsminscenarioconfidencetheshold() const;
  void set_cnnslotsminscenarioconfidencetheshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cnnslotsminscenarioconfidencetheshold() const;
  void _internal_set_cnnslotsminscenarioconfidencetheshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 integrationMessagesComponent_nu = 610;
  bool has_integrationmessagescomponent_nu() const;
  private:
  bool _internal_has_integrationmessagescomponent_nu() const;
  public:
  void clear_integrationmessagescomponent_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 integrationmessagescomponent_nu() const;
  void set_integrationmessagescomponent_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_integrationmessagescomponent_nu() const;
  void _internal_set_integrationmessagescomponent_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float leftRightMemParkOffsetX_m = 629;
  bool has_leftrightmemparkoffsetx_m() const;
  private:
  bool _internal_has_leftrightmemparkoffsetx_m() const;
  public:
  void clear_leftrightmemparkoffsetx_m();
  float leftrightmemparkoffsetx_m() const;
  void set_leftrightmemparkoffsetx_m(float value);
  private:
  float _internal_leftrightmemparkoffsetx_m() const;
  void _internal_set_leftrightmemparkoffsetx_m(float value);
  public:

  // optional float shrinkSlotForNumericalInaccuracy_m = 672;
  bool has_shrinkslotfornumericalinaccuracy_m() const;
  private:
  bool _internal_has_shrinkslotfornumericalinaccuracy_m() const;
  public:
  void clear_shrinkslotfornumericalinaccuracy_m();
  float shrinkslotfornumericalinaccuracy_m() const;
  void set_shrinkslotfornumericalinaccuracy_m(float value);
  private:
  float _internal_shrinkslotfornumericalinaccuracy_m() const;
  void _internal_set_shrinkslotfornumericalinaccuracy_m(float value);
  public:

  // optional float vlInsideLargerThanRoadFactor = 718;
  bool has_vlinsidelargerthanroadfactor() const;
  private:
  bool _internal_has_vlinsidelargerthanroadfactor() const;
  public:
  void clear_vlinsidelargerthanroadfactor();
  float vlinsidelargerthanroadfactor() const;
  void set_vlinsidelargerthanroadfactor(float value);
  private:
  float _internal_vlinsidelargerthanroadfactor() const;
  void _internal_set_vlinsidelargerthanroadfactor(float value);
  public:

  // optional uint32 integrationMessagesLevel_nu = 757;
  bool has_integrationmessageslevel_nu() const;
  private:
  bool _internal_has_integrationmessageslevel_nu() const;
  public:
  void clear_integrationmessageslevel_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 integrationmessageslevel_nu() const;
  void set_integrationmessageslevel_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_integrationmessageslevel_nu() const;
  void _internal_set_integrationmessageslevel_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float minCoveragePerSideNonPar_m = 779;
  bool has_mincoveragepersidenonpar_m() const;
  private:
  bool _internal_has_mincoveragepersidenonpar_m() const;
  public:
  void clear_mincoveragepersidenonpar_m();
  float mincoveragepersidenonpar_m() const;
  void set_mincoveragepersidenonpar_m(float value);
  private:
  float _internal_mincoveragepersidenonpar_m() const;
  void _internal_set_mincoveragepersidenonpar_m(float value);
  public:

  // optional float sideRoiXBack_m = 784;
  bool has_sideroixback_m() const;
  private:
  bool _internal_has_sideroixback_m() const;
  public:
  void clear_sideroixback_m();
  float sideroixback_m() const;
  void set_sideroixback_m(float value);
  private:
  float _internal_sideroixback_m() const;
  void _internal_set_sideroixback_m(float value);
  public:

  // optional float perpendicularSlotWidthDeltaMax_m = 816;
  bool has_perpendicularslotwidthdeltamax_m() const;
  private:
  bool _internal_has_perpendicularslotwidthdeltamax_m() const;
  public:
  void clear_perpendicularslotwidthdeltamax_m();
  float perpendicularslotwidthdeltamax_m() const;
  void set_perpendicularslotwidthdeltamax_m(float value);
  private:
  float _internal_perpendicularslotwidthdeltamax_m() const;
  void _internal_set_perpendicularslotwidthdeltamax_m(float value);
  public:

  // optional float slotScoringMinParWingLength_m = 846;
  bool has_slotscoringminparwinglength_m() const;
  private:
  bool _internal_has_slotscoringminparwinglength_m() const;
  public:
  void clear_slotscoringminparwinglength_m();
  float slotscoringminparwinglength_m() const;
  void set_slotscoringminparwinglength_m(float value);
  private:
  float _internal_slotscoringminparwinglength_m() const;
  void _internal_set_slotscoringminparwinglength_m(float value);
  public:

  // optional float parallelSlotWidthDeltaMin_m = 847;
  bool has_parallelslotwidthdeltamin_m() const;
  private:
  bool _internal_has_parallelslotwidthdeltamin_m() const;
  public:
  void clear_parallelslotwidthdeltamin_m();
  float parallelslotwidthdeltamin_m() const;
  void set_parallelslotwidthdeltamin_m(float value);
  private:
  float _internal_parallelslotwidthdeltamin_m() const;
  void _internal_set_parallelslotwidthdeltamin_m(float value);
  public:

  // optional float cnnSlotRoadAlignmentLimitNonPar_m = 849;
  bool has_cnnslotroadalignmentlimitnonpar_m() const;
  private:
  bool _internal_has_cnnslotroadalignmentlimitnonpar_m() const;
  public:
  void clear_cnnslotroadalignmentlimitnonpar_m();
  float cnnslotroadalignmentlimitnonpar_m() const;
  void set_cnnslotroadalignmentlimitnonpar_m(float value);
  private:
  float _internal_cnnslotroadalignmentlimitnonpar_m() const;
  void _internal_set_cnnslotroadalignmentlimitnonpar_m(float value);
  public:

  // optional float parallelSlotDepthDeltaMaxPark_m = 866;
  bool has_parallelslotdepthdeltamaxpark_m() const;
  private:
  bool _internal_has_parallelslotdepthdeltamaxpark_m() const;
  public:
  void clear_parallelslotdepthdeltamaxpark_m();
  float parallelslotdepthdeltamaxpark_m() const;
  void set_parallelslotdepthdeltamaxpark_m(float value);
  private:
  float _internal_parallelslotdepthdeltamaxpark_m() const;
  void _internal_set_parallelslotdepthdeltamaxpark_m(float value);
  public:

  // optional float minimumObstacleFittedLineLength_m = 888;
  bool has_minimumobstaclefittedlinelength_m() const;
  private:
  bool _internal_has_minimumobstaclefittedlinelength_m() const;
  public:
  void clear_minimumobstaclefittedlinelength_m();
  float minimumobstaclefittedlinelength_m() const;
  void set_minimumobstaclefittedlinelength_m(float value);
  private:
  float _internal_minimumobstaclefittedlinelength_m() const;
  void _internal_set_minimumobstaclefittedlinelength_m(float value);
  public:

  // optional float relevantObjectMinBoxSide_m = 897;
  bool has_relevantobjectminboxside_m() const;
  private:
  bool _internal_has_relevantobjectminboxside_m() const;
  public:
  void clear_relevantobjectminboxside_m();
  float relevantobjectminboxside_m() const;
  void set_relevantobjectminboxside_m(float value);
  private:
  float _internal_relevantobjectminboxside_m() const;
  void _internal_set_relevantobjectminboxside_m(float value);
  public:

  // optional float maxAllowedSlotExtensionOverLinesToMinOpening_m = 905;
  bool has_maxallowedslotextensionoverlinestominopening_m() const;
  private:
  bool _internal_has_maxallowedslotextensionoverlinestominopening_m() const;
  public:
  void clear_maxallowedslotextensionoverlinestominopening_m();
  float maxallowedslotextensionoverlinestominopening_m() const;
  void set_maxallowedslotextensionoverlinestominopening_m(float value);
  private:
  float _internal_maxallowedslotextensionoverlinestominopening_m() const;
  void _internal_set_maxallowedslotextensionoverlinestominopening_m(float value);
  public:

  // optional float allowedWsPosOutsideSlot_m = 913;
  bool has_allowedwsposoutsideslot_m() const;
  private:
  bool _internal_has_allowedwsposoutsideslot_m() const;
  public:
  void clear_allowedwsposoutsideslot_m();
  float allowedwsposoutsideslot_m() const;
  void set_allowedwsposoutsideslot_m(float value);
  private:
  float _internal_allowedwsposoutsideslot_m() const;
  void _internal_set_allowedwsposoutsideslot_m(float value);
  public:

  // optional float collFunctionRoiLengthDelta_m = 919;
  bool has_collfunctionroilengthdelta_m() const;
  private:
  bool _internal_has_collfunctionroilengthdelta_m() const;
  public:
  void clear_collfunctionroilengthdelta_m();
  float collfunctionroilengthdelta_m() const;
  void set_collfunctionroilengthdelta_m(float value);
  private:
  float _internal_collfunctionroilengthdelta_m() const;
  void _internal_set_collfunctionroilengthdelta_m(float value);
  public:

  // optional float ocSecZonePerpSideToRoad_m = 931;
  bool has_ocseczoneperpsidetoroad_m() const;
  private:
  bool _internal_has_ocseczoneperpsidetoroad_m() const;
  public:
  void clear_ocseczoneperpsidetoroad_m();
  float ocseczoneperpsidetoroad_m() const;
  void set_ocseczoneperpsidetoroad_m(float value);
  private:
  float _internal_ocseczoneperpsidetoroad_m() const;
  void _internal_set_ocseczoneperpsidetoroad_m(float value);
  public:

  // optional float garageParkingSlotWidthDeltaMax_m = 948;
  bool has_garageparkingslotwidthdeltamax_m() const;
  private:
  bool _internal_has_garageparkingslotwidthdeltamax_m() const;
  public:
  void clear_garageparkingslotwidthdeltamax_m();
  float garageparkingslotwidthdeltamax_m() const;
  void set_garageparkingslotwidthdeltamax_m(float value);
  private:
  float _internal_garageparkingslotwidthdeltamax_m() const;
  void _internal_set_garageparkingslotwidthdeltamax_m(float value);
  public:

  // optional float collFunctionRoiWidthDelta_m = 974;
  bool has_collfunctionroiwidthdelta_m() const;
  private:
  bool _internal_has_collfunctionroiwidthdelta_m() const;
  public:
  void clear_collfunctionroiwidthdelta_m();
  float collfunctionroiwidthdelta_m() const;
  void set_collfunctionroiwidthdelta_m(float value);
  private:
  float _internal_collfunctionroiwidthdelta_m() const;
  void _internal_set_collfunctionroiwidthdelta_m(float value);
  public:

  // optional float delZoneRoadMinDistNonPar_m = 976;
  bool has_delzoneroadmindistnonpar_m() const;
  private:
  bool _internal_has_delzoneroadmindistnonpar_m() const;
  public:
  void clear_delzoneroadmindistnonpar_m();
  float delzoneroadmindistnonpar_m() const;
  void set_delzoneroadmindistnonpar_m(float value);
  private:
  float _internal_delzoneroadmindistnonpar_m() const;
  void _internal_set_delzoneroadmindistnonpar_m(float value);
  public:

  // optional float cnnSlotBlowUpLimitParSide_m = 991;
  bool has_cnnslotblowuplimitparside_m() const;
  private:
  bool _internal_has_cnnslotblowuplimitparside_m() const;
  public:
  void clear_cnnslotblowuplimitparside_m();
  float cnnslotblowuplimitparside_m() const;
  void set_cnnslotblowuplimitparside_m(float value);
  private:
  float _internal_cnnslotblowuplimitparside_m() const;
  void _internal_set_cnnslotblowuplimitparside_m(float value);
  public:

  // optional float outlierDistSqrParallelSlot_m2 = 995;
  bool has_outlierdistsqrparallelslot_m2() const;
  private:
  bool _internal_has_outlierdistsqrparallelslot_m2() const;
  public:
  void clear_outlierdistsqrparallelslot_m2();
  float outlierdistsqrparallelslot_m2() const;
  void set_outlierdistsqrparallelslot_m2(float value);
  private:
  float _internal_outlierdistsqrparallelslot_m2() const;
  void _internal_set_outlierdistsqrparallelslot_m2(float value);
  public:

  // optional float minRequiredDelimiterProjectionRatio_nu = 1046;
  bool has_minrequireddelimiterprojectionratio_nu() const;
  private:
  bool _internal_has_minrequireddelimiterprojectionratio_nu() const;
  public:
  void clear_minrequireddelimiterprojectionratio_nu();
  float minrequireddelimiterprojectionratio_nu() const;
  void set_minrequireddelimiterprojectionratio_nu(float value);
  private:
  float _internal_minrequireddelimiterprojectionratio_nu() const;
  void _internal_set_minrequireddelimiterprojectionratio_nu(float value);
  public:

  // optional float outlierDistSqrNonParallelSlot_m2 = 1066;
  bool has_outlierdistsqrnonparallelslot_m2() const;
  private:
  bool _internal_has_outlierdistsqrnonparallelslot_m2() const;
  public:
  void clear_outlierdistsqrnonparallelslot_m2();
  float outlierdistsqrnonparallelslot_m2() const;
  void set_outlierdistsqrnonparallelslot_m2(float value);
  private:
  float _internal_outlierdistsqrnonparallelslot_m2() const;
  void _internal_set_outlierdistsqrnonparallelslot_m2(float value);
  public:

  // optional float coveredIntervalsRoiWidth_m = 1124;
  bool has_coveredintervalsroiwidth_m() const;
  private:
  bool _internal_has_coveredintervalsroiwidth_m() const;
  public:
  void clear_coveredintervalsroiwidth_m();
  float coveredintervalsroiwidth_m() const;
  void set_coveredintervalsroiwidth_m(float value);
  private:
  float _internal_coveredintervalsroiwidth_m() const;
  void _internal_set_coveredintervalsroiwidth_m(float value);
  public:

  // optional float cnnSlotBlowUpLimitNonParCurb_m = 1138;
  bool has_cnnslotblowuplimitnonparcurb_m() const;
  private:
  bool _internal_has_cnnslotblowuplimitnonparcurb_m() const;
  public:
  void clear_cnnslotblowuplimitnonparcurb_m();
  float cnnslotblowuplimitnonparcurb_m() const;
  void set_cnnslotblowuplimitnonparcurb_m(float value);
  private:
  float _internal_cnnslotblowuplimitnonparcurb_m() const;
  void _internal_set_cnnslotblowuplimitnonparcurb_m(float value);
  public:

  // optional float delZoneLeftRightFactorNonPar_nu = 1139;
  bool has_delzoneleftrightfactornonpar_nu() const;
  private:
  bool _internal_has_delzoneleftrightfactornonpar_nu() const;
  public:
  void clear_delzoneleftrightfactornonpar_nu();
  float delzoneleftrightfactornonpar_nu() const;
  void set_delzoneleftrightfactornonpar_nu(float value);
  private:
  float _internal_delzoneleftrightfactornonpar_nu() const;
  void _internal_set_delzoneleftrightfactornonpar_nu(float value);
  public:

  // optional float ocAngMaxDistanceCurb_m = 1147;
  bool has_ocangmaxdistancecurb_m() const;
  private:
  bool _internal_has_ocangmaxdistancecurb_m() const;
  public:
  void clear_ocangmaxdistancecurb_m();
  float ocangmaxdistancecurb_m() const;
  void set_ocangmaxdistancecurb_m(float value);
  private:
  float _internal_ocangmaxdistancecurb_m() const;
  void _internal_set_ocangmaxdistancecurb_m(float value);
  public:

  // optional float ocSecZonePerpCurbToRoad_m = 1157;
  bool has_ocseczoneperpcurbtoroad_m() const;
  private:
  bool _internal_has_ocseczoneperpcurbtoroad_m() const;
  public:
  void clear_ocseczoneperpcurbtoroad_m();
  float ocseczoneperpcurbtoroad_m() const;
  void set_ocseczoneperpcurbtoroad_m(float value);
  private:
  float _internal_ocseczoneperpcurbtoroad_m() const;
  void _internal_set_ocseczoneperpcurbtoroad_m(float value);
  public:

  // optional float ocSecZoneParCurbToRoad_m = 1207;
  bool has_ocseczoneparcurbtoroad_m() const;
  private:
  bool _internal_has_ocseczoneparcurbtoroad_m() const;
  public:
  void clear_ocseczoneparcurbtoroad_m();
  float ocseczoneparcurbtoroad_m() const;
  void set_ocseczoneparcurbtoroad_m(float value);
  private:
  float _internal_ocseczoneparcurbtoroad_m() const;
  void _internal_set_ocseczoneparcurbtoroad_m(float value);
  public:

  // optional float ocSecZoneAngSideToSlot_m = 1211;
  bool has_ocseczoneangsidetoslot_m() const;
  private:
  bool _internal_has_ocseczoneangsidetoslot_m() const;
  public:
  void clear_ocseczoneangsidetoslot_m();
  float ocseczoneangsidetoslot_m() const;
  void set_ocseczoneangsidetoslot_m(float value);
  private:
  float _internal_ocseczoneangsidetoslot_m() const;
  void _internal_set_ocseczoneangsidetoslot_m(float value);
  public:

  // optional float delZoneCurbMaxRelToVehWidthPar_nu = 1221;
  bool has_delzonecurbmaxreltovehwidthpar_nu() const;
  private:
  bool _internal_has_delzonecurbmaxreltovehwidthpar_nu() const;
  public:
  void clear_delzonecurbmaxreltovehwidthpar_nu();
  float delzonecurbmaxreltovehwidthpar_nu() const;
  void set_delzonecurbmaxreltovehwidthpar_nu(float value);
  private:
  float _internal_delzonecurbmaxreltovehwidthpar_nu() const;
  void _internal_set_delzonecurbmaxreltovehwidthpar_nu(float value);
  public:

  // optional float ocPrimZoneCurbBelowSlot_m = 1229;
  bool has_ocprimzonecurbbelowslot_m() const;
  private:
  bool _internal_has_ocprimzonecurbbelowslot_m() const;
  public:
  void clear_ocprimzonecurbbelowslot_m();
  float ocprimzonecurbbelowslot_m() const;
  void set_ocprimzonecurbbelowslot_m(float value);
  private:
  float _internal_ocprimzonecurbbelowslot_m() const;
  void _internal_set_ocprimzonecurbbelowslot_m(float value);
  public:

  // optional float perpendicularSlotOpeningDeltaMinPark_m = 1242;
  bool has_perpendicularslotopeningdeltaminpark_m() const;
  private:
  bool _internal_has_perpendicularslotopeningdeltaminpark_m() const;
  public:
  void clear_perpendicularslotopeningdeltaminpark_m();
  float perpendicularslotopeningdeltaminpark_m() const;
  void set_perpendicularslotopeningdeltaminpark_m(float value);
  private:
  float _internal_perpendicularslotopeningdeltaminpark_m() const;
  void _internal_set_perpendicularslotopeningdeltaminpark_m(float value);
  public:

  // optional float slotExpansionSideRoiWidth_m = 1245;
  bool has_slotexpansionsideroiwidth_m() const;
  private:
  bool _internal_has_slotexpansionsideroiwidth_m() const;
  public:
  void clear_slotexpansionsideroiwidth_m();
  float slotexpansionsideroiwidth_m() const;
  void set_slotexpansionsideroiwidth_m(float value);
  private:
  float _internal_slotexpansionsideroiwidth_m() const;
  void _internal_set_slotexpansionsideroiwidth_m(float value);
  public:

  // optional float allowedDistToExistingWsWithoutWlSuppression_m = 1249;
  bool has_alloweddisttoexistingwswithoutwlsuppression_m() const;
  private:
  bool _internal_has_alloweddisttoexistingwswithoutwlsuppression_m() const;
  public:
  void clear_alloweddisttoexistingwswithoutwlsuppression_m();
  float alloweddisttoexistingwswithoutwlsuppression_m() const;
  void set_alloweddisttoexistingwswithoutwlsuppression_m(float value);
  private:
  float _internal_alloweddisttoexistingwswithoutwlsuppression_m() const;
  void _internal_set_alloweddisttoexistingwswithoutwlsuppression_m(float value);
  public:

  // optional float lineOpeningDelimiterToCurbProjectionFactor = 1257;
  bool has_lineopeningdelimitertocurbprojectionfactor() const;
  private:
  bool _internal_has_lineopeningdelimitertocurbprojectionfactor() const;
  public:
  void clear_lineopeningdelimitertocurbprojectionfactor();
  float lineopeningdelimitertocurbprojectionfactor() const;
  void set_lineopeningdelimitertocurbprojectionfactor(float value);
  private:
  float _internal_lineopeningdelimitertocurbprojectionfactor() const;
  void _internal_set_lineopeningdelimitertocurbprojectionfactor(float value);
  public:

  // optional float cnnSlotsMinValidationOverlap_m = 1287;
  bool has_cnnslotsminvalidationoverlap_m() const;
  private:
  bool _internal_has_cnnslotsminvalidationoverlap_m() const;
  public:
  void clear_cnnslotsminvalidationoverlap_m();
  float cnnslotsminvalidationoverlap_m() const;
  void set_cnnslotsminvalidationoverlap_m(float value);
  private:
  float _internal_cnnslotsminvalidationoverlap_m() const;
  void _internal_set_cnnslotsminvalidationoverlap_m(float value);
  public:

  // optional float delZoneLeftRightFactorPar_nu = 1290;
  bool has_delzoneleftrightfactorpar_nu() const;
  private:
  bool _internal_has_delzoneleftrightfactorpar_nu() const;
  public:
  void clear_delzoneleftrightfactorpar_nu();
  float delzoneleftrightfactorpar_nu() const;
  void set_delzoneleftrightfactorpar_nu(float value);
  private:
  float _internal_delzoneleftrightfactorpar_nu() const;
  void _internal_set_delzoneleftrightfactorpar_nu(float value);
  public:

  // optional float vlMinVirtualLineLengthPerpSide_m = 1326;
  bool has_vlminvirtuallinelengthperpside_m() const;
  private:
  bool _internal_has_vlminvirtuallinelengthperpside_m() const;
  public:
  void clear_vlminvirtuallinelengthperpside_m();
  float vlminvirtuallinelengthperpside_m() const;
  void set_vlminvirtuallinelengthperpside_m(float value);
  private:
  float _internal_vlminvirtuallinelengthperpside_m() const;
  void _internal_set_vlminvirtuallinelengthperpside_m(float value);
  public:

  // optional float shrinkPenaltyForExceedingGivenLimits = 1354;
  bool has_shrinkpenaltyforexceedinggivenlimits() const;
  private:
  bool _internal_has_shrinkpenaltyforexceedinggivenlimits() const;
  public:
  void clear_shrinkpenaltyforexceedinggivenlimits();
  float shrinkpenaltyforexceedinggivenlimits() const;
  void set_shrinkpenaltyforexceedinggivenlimits(float value);
  private:
  float _internal_shrinkpenaltyforexceedinggivenlimits() const;
  void _internal_set_shrinkpenaltyforexceedinggivenlimits(float value);
  public:

  // optional bool useCovMatrixInflation = 957;
  bool has_usecovmatrixinflation() const;
  private:
  bool _internal_has_usecovmatrixinflation() const;
  public:
  void clear_usecovmatrixinflation();
  bool usecovmatrixinflation() const;
  void set_usecovmatrixinflation(bool value);
  private:
  bool _internal_usecovmatrixinflation() const;
  void _internal_set_usecovmatrixinflation(bool value);
  public:

  // optional bool ncSplitUseMostXStartIdx = 622;
  bool has_ncsplitusemostxstartidx() const;
  private:
  bool _internal_has_ncsplitusemostxstartidx() const;
  public:
  void clear_ncsplitusemostxstartidx();
  bool ncsplitusemostxstartidx() const;
  void set_ncsplitusemostxstartidx(bool value);
  private:
  bool _internal_ncsplitusemostxstartidx() const;
  void _internal_set_ncsplitusemostxstartidx(bool value);
  public:

  // optional bool ncSplitOn = 2843;
  bool has_ncspliton() const;
  private:
  bool _internal_has_ncspliton() const;
  public:
  void clear_ncspliton();
  bool ncspliton() const;
  void set_ncspliton(bool value);
  private:
  bool _internal_ncspliton() const;
  void _internal_set_ncspliton(bool value);
  public:

  // optional bool doObjectClustering = 1052;
  bool has_doobjectclustering() const;
  private:
  bool _internal_has_doobjectclustering() const;
  public:
  void clear_doobjectclustering();
  bool doobjectclustering() const;
  void set_doobjectclustering(bool value);
  private:
  bool _internal_doobjectclustering() const;
  void _internal_set_doobjectclustering(bool value);
  public:

  // optional float outsideInAllowedOverlap_m = 1371;
  bool has_outsideinallowedoverlap_m() const;
  private:
  bool _internal_has_outsideinallowedoverlap_m() const;
  public:
  void clear_outsideinallowedoverlap_m();
  float outsideinallowedoverlap_m() const;
  void set_outsideinallowedoverlap_m(float value);
  private:
  float _internal_outsideinallowedoverlap_m() const;
  void _internal_set_outsideinallowedoverlap_m(float value);
  public:

  // optional float frontRoiXStart_m = 1415;
  bool has_frontroixstart_m() const;
  private:
  bool _internal_has_frontroixstart_m() const;
  public:
  void clear_frontroixstart_m();
  float frontroixstart_m() const;
  void set_frontroixstart_m(float value);
  private:
  float _internal_frontroixstart_m() const;
  void _internal_set_frontroixstart_m(float value);
  public:

  // optional bool enableSlotPoseDetectionOnVirtualLines = 3996;
  bool has_enableslotposedetectiononvirtuallines() const;
  private:
  bool _internal_has_enableslotposedetectiononvirtuallines() const;
  public:
  void clear_enableslotposedetectiononvirtuallines();
  bool enableslotposedetectiononvirtuallines() const;
  void set_enableslotposedetectiononvirtuallines(bool value);
  private:
  bool _internal_enableslotposedetectiononvirtuallines() const;
  void _internal_set_enableslotposedetectiononvirtuallines(bool value);
  public:

  // optional bool enableParallelSlots = 108;
  bool has_enableparallelslots() const;
  private:
  bool _internal_has_enableparallelslots() const;
  public:
  void clear_enableparallelslots();
  bool enableparallelslots() const;
  void set_enableparallelslots(bool value);
  private:
  bool _internal_enableparallelslots() const;
  void _internal_set_enableparallelslots(bool value);
  public:

  // optional bool enablePerpendicularSlots = 1404;
  bool has_enableperpendicularslots() const;
  private:
  bool _internal_has_enableperpendicularslots() const;
  public:
  void clear_enableperpendicularslots();
  bool enableperpendicularslots() const;
  void set_enableperpendicularslots(bool value);
  private:
  bool _internal_enableperpendicularslots() const;
  void _internal_set_enableperpendicularslots(bool value);
  public:

  // optional bool enableGarageParkingSlots = 183;
  bool has_enablegarageparkingslots() const;
  private:
  bool _internal_has_enablegarageparkingslots() const;
  public:
  void clear_enablegarageparkingslots();
  bool enablegarageparkingslots() const;
  void set_enablegarageparkingslots(bool value);
  private:
  bool _internal_enablegarageparkingslots() const;
  void _internal_set_enablegarageparkingslots(bool value);
  public:

  // optional float vlInsideLargeEnough_m = 1425;
  bool has_vlinsidelargeenough_m() const;
  private:
  bool _internal_has_vlinsidelargeenough_m() const;
  public:
  void clear_vlinsidelargeenough_m();
  float vlinsidelargeenough_m() const;
  void set_vlinsidelargeenough_m(float value);
  private:
  float _internal_vlinsidelargeenough_m() const;
  void _internal_set_vlinsidelargeenough_m(float value);
  public:

  // optional float delZoneCurbFactorNonPar_nu = 1442;
  bool has_delzonecurbfactornonpar_nu() const;
  private:
  bool _internal_has_delzonecurbfactornonpar_nu() const;
  public:
  void clear_delzonecurbfactornonpar_nu();
  float delzonecurbfactornonpar_nu() const;
  void set_delzonecurbfactornonpar_nu(float value);
  private:
  float _internal_delzonecurbfactornonpar_nu() const;
  void _internal_set_delzonecurbfactornonpar_nu(float value);
  public:

  // optional float perpendicularSlotDepthDeltaMaxPark_m = 1449;
  bool has_perpendicularslotdepthdeltamaxpark_m() const;
  private:
  bool _internal_has_perpendicularslotdepthdeltamaxpark_m() const;
  public:
  void clear_perpendicularslotdepthdeltamaxpark_m();
  float perpendicularslotdepthdeltamaxpark_m() const;
  void set_perpendicularslotdepthdeltamaxpark_m(float value);
  private:
  float _internal_perpendicularslotdepthdeltamaxpark_m() const;
  void _internal_set_perpendicularslotdepthdeltamaxpark_m(float value);
  public:

  // optional float insideZoneDist_m = 1458;
  bool has_insidezonedist_m() const;
  private:
  bool _internal_has_insidezonedist_m() const;
  public:
  void clear_insidezonedist_m();
  float insidezonedist_m() const;
  void set_insidezonedist_m(float value);
  private:
  float _internal_insidezonedist_m() const;
  void _internal_set_insidezonedist_m(float value);
  public:

  // optional float delZoneCurbMaxRelToVehLengthNonPar_nu = 1463;
  bool has_delzonecurbmaxreltovehlengthnonpar_nu() const;
  private:
  bool _internal_has_delzonecurbmaxreltovehlengthnonpar_nu() const;
  public:
  void clear_delzonecurbmaxreltovehlengthnonpar_nu();
  float delzonecurbmaxreltovehlengthnonpar_nu() const;
  void set_delzonecurbmaxreltovehlengthnonpar_nu(float value);
  private:
  float _internal_delzonecurbmaxreltovehlengthnonpar_nu() const;
  void _internal_set_delzonecurbmaxreltovehlengthnonpar_nu(float value);
  public:

  // optional float slotPositioningRoiRoadDelta_m = 1493;
  bool has_slotpositioningroiroaddelta_m() const;
  private:
  bool _internal_has_slotpositioningroiroaddelta_m() const;
  public:
  void clear_slotpositioningroiroaddelta_m();
  float slotpositioningroiroaddelta_m() const;
  void set_slotpositioningroiroaddelta_m(float value);
  private:
  float _internal_slotpositioningroiroaddelta_m() const;
  void _internal_set_slotpositioningroiroaddelta_m(float value);
  public:

  // optional float delZoneRoadMaxRelToVehWidthPar_nu = 1533;
  bool has_delzoneroadmaxreltovehwidthpar_nu() const;
  private:
  bool _internal_has_delzoneroadmaxreltovehwidthpar_nu() const;
  public:
  void clear_delzoneroadmaxreltovehwidthpar_nu();
  float delzoneroadmaxreltovehwidthpar_nu() const;
  void set_delzoneroadmaxreltovehwidthpar_nu(float value);
  private:
  float _internal_delzoneroadmaxreltovehwidthpar_nu() const;
  void _internal_set_delzoneroadmaxreltovehwidthpar_nu(float value);
  public:

  // optional float minBarrierDelimiterLength_m = 1558;
  bool has_minbarrierdelimiterlength_m() const;
  private:
  bool _internal_has_minbarrierdelimiterlength_m() const;
  public:
  void clear_minbarrierdelimiterlength_m();
  float minbarrierdelimiterlength_m() const;
  void set_minbarrierdelimiterlength_m(float value);
  private:
  float _internal_minbarrierdelimiterlength_m() const;
  void _internal_set_minbarrierdelimiterlength_m(float value);
  public:

  // optional bool enableAngularRightOpeningTowardsFront = 2559;
  bool has_enableangularrightopeningtowardsfront() const;
  private:
  bool _internal_has_enableangularrightopeningtowardsfront() const;
  public:
  void clear_enableangularrightopeningtowardsfront();
  bool enableangularrightopeningtowardsfront() const;
  void set_enableangularrightopeningtowardsfront(bool value);
  private:
  bool _internal_enableangularrightopeningtowardsfront() const;
  void _internal_set_enableangularrightopeningtowardsfront(bool value);
  public:

  // optional bool enableAngularLeftOpeningTowardsBack = 1303;
  bool has_enableangularleftopeningtowardsback() const;
  private:
  bool _internal_has_enableangularleftopeningtowardsback() const;
  public:
  void clear_enableangularleftopeningtowardsback();
  bool enableangularleftopeningtowardsback() const;
  void set_enableangularleftopeningtowardsback(bool value);
  private:
  bool _internal_enableangularleftopeningtowardsback() const;
  void _internal_set_enableangularleftopeningtowardsback(bool value);
  public:

  // optional bool enableAngularLeftOpeningTowardsFront = 290;
  bool has_enableangularleftopeningtowardsfront() const;
  private:
  bool _internal_has_enableangularleftopeningtowardsfront() const;
  public:
  void clear_enableangularleftopeningtowardsfront();
  bool enableangularleftopeningtowardsfront() const;
  void set_enableangularleftopeningtowardsfront(bool value);
  private:
  bool _internal_enableangularleftopeningtowardsfront() const;
  void _internal_set_enableangularleftopeningtowardsfront(bool value);
  public:

  // optional bool enableAngularSlotBruteForceDetection = 2126;
  bool has_enableangularslotbruteforcedetection() const;
  private:
  bool _internal_has_enableangularslotbruteforcedetection() const;
  public:
  void clear_enableangularslotbruteforcedetection();
  bool enableangularslotbruteforcedetection() const;
  void set_enableangularslotbruteforcedetection(bool value);
  private:
  bool _internal_enableangularslotbruteforcedetection() const;
  void _internal_set_enableangularslotbruteforcedetection(bool value);
  public:

  // optional float horizontalMovementLimitOfASlotSlotCoords_m = 1573;
  bool has_horizontalmovementlimitofaslotslotcoords_m() const;
  private:
  bool _internal_has_horizontalmovementlimitofaslotslotcoords_m() const;
  public:
  void clear_horizontalmovementlimitofaslotslotcoords_m();
  float horizontalmovementlimitofaslotslotcoords_m() const;
  void set_horizontalmovementlimitofaslotslotcoords_m(float value);
  private:
  float _internal_horizontalmovementlimitofaslotslotcoords_m() const;
  void _internal_set_horizontalmovementlimitofaslotslotcoords_m(float value);
  public:

  // optional float ocPerpMaxDistanceSide_m = 1587;
  bool has_ocperpmaxdistanceside_m() const;
  private:
  bool _internal_has_ocperpmaxdistanceside_m() const;
  public:
  void clear_ocperpmaxdistanceside_m();
  float ocperpmaxdistanceside_m() const;
  void set_ocperpmaxdistanceside_m(float value);
  private:
  float _internal_ocperpmaxdistanceside_m() const;
  void _internal_set_ocperpmaxdistanceside_m(float value);
  public:

  // optional float parallelSlotOpeningDeltaMaxPark_m = 1588;
  bool has_parallelslotopeningdeltamaxpark_m() const;
  private:
  bool _internal_has_parallelslotopeningdeltamaxpark_m() const;
  public:
  void clear_parallelslotopeningdeltamaxpark_m();
  float parallelslotopeningdeltamaxpark_m() const;
  void set_parallelslotopeningdeltamaxpark_m(float value);
  private:
  float _internal_parallelslotopeningdeltamaxpark_m() const;
  void _internal_set_parallelslotopeningdeltamaxpark_m(float value);
  public:

  // optional float allowedDistToExistingWsWithWlSuppression_m = 1590;
  bool has_alloweddisttoexistingwswithwlsuppression_m() const;
  private:
  bool _internal_has_alloweddisttoexistingwswithwlsuppression_m() const;
  public:
  void clear_alloweddisttoexistingwswithwlsuppression_m();
  float alloweddisttoexistingwswithwlsuppression_m() const;
  void set_alloweddisttoexistingwswithwlsuppression_m(float value);
  private:
  float _internal_alloweddisttoexistingwswithwlsuppression_m() const;
  void _internal_set_alloweddisttoexistingwswithwlsuppression_m(float value);
  public:

  // optional float thDelimiterDist_m = 1609;
  bool has_thdelimiterdist_m() const;
  private:
  bool _internal_has_thdelimiterdist_m() const;
  public:
  void clear_thdelimiterdist_m();
  float thdelimiterdist_m() const;
  void set_thdelimiterdist_m(float value);
  private:
  float _internal_thdelimiterdist_m() const;
  void _internal_set_thdelimiterdist_m(float value);
  public:

  // optional bool preferWideSlots = 86;
  bool has_preferwideslots() const;
  private:
  bool _internal_has_preferwideslots() const;
  public:
  void clear_preferwideslots();
  bool preferwideslots() const;
  void set_preferwideslots(bool value);
  private:
  bool _internal_preferwideslots() const;
  void _internal_set_preferwideslots(bool value);
  public:

  // optional bool offerOverlappingSlots = 862;
  bool has_offeroverlappingslots() const;
  private:
  bool _internal_has_offeroverlappingslots() const;
  public:
  void clear_offeroverlappingslots();
  bool offeroverlappingslots() const;
  void set_offeroverlappingslots(bool value);
  private:
  bool _internal_offeroverlappingslots() const;
  void _internal_set_offeroverlappingslots(bool value);
  public:

  // optional bool performOptimization = 2187;
  bool has_performoptimization() const;
  private:
  bool _internal_has_performoptimization() const;
  public:
  void clear_performoptimization();
  bool performoptimization() const;
  void set_performoptimization(bool value);
  private:
  bool _internal_performoptimization() const;
  void _internal_set_performoptimization(bool value);
  public:

  // optional bool enableSlotShrinkingBelowUsualSizeDuringTrack = 3315;
  bool has_enableslotshrinkingbelowusualsizeduringtrack() const;
  private:
  bool _internal_has_enableslotshrinkingbelowusualsizeduringtrack() const;
  public:
  void clear_enableslotshrinkingbelowusualsizeduringtrack();
  bool enableslotshrinkingbelowusualsizeduringtrack() const;
  void set_enableslotshrinkingbelowusualsizeduringtrack(bool value);
  private:
  bool _internal_enableslotshrinkingbelowusualsizeduringtrack() const;
  void _internal_set_enableslotshrinkingbelowusualsizeduringtrack(bool value);
  public:

  // optional float delZoneRoadMinDistPar_m = 1695;
  bool has_delzoneroadmindistpar_m() const;
  private:
  bool _internal_has_delzoneroadmindistpar_m() const;
  public:
  void clear_delzoneroadmindistpar_m();
  float delzoneroadmindistpar_m() const;
  void set_delzoneroadmindistpar_m(float value);
  private:
  float _internal_delzoneroadmindistpar_m() const;
  void _internal_set_delzoneroadmindistpar_m(float value);
  public:

  // optional float vlMaxAllowedRoadInsideAngleDiff_rad = 1704;
  bool has_vlmaxallowedroadinsideanglediff_rad() const;
  private:
  bool _internal_has_vlmaxallowedroadinsideanglediff_rad() const;
  public:
  void clear_vlmaxallowedroadinsideanglediff_rad();
  float vlmaxallowedroadinsideanglediff_rad() const;
  void set_vlmaxallowedroadinsideanglediff_rad(float value);
  private:
  float _internal_vlmaxallowedroadinsideanglediff_rad() const;
  void _internal_set_vlmaxallowedroadinsideanglediff_rad(float value);
  public:

  // optional float maxRoadsideExtensionPerpendicular_m = 1711;
  bool has_maxroadsideextensionperpendicular_m() const;
  private:
  bool _internal_has_maxroadsideextensionperpendicular_m() const;
  public:
  void clear_maxroadsideextensionperpendicular_m();
  float maxroadsideextensionperpendicular_m() const;
  void set_maxroadsideextensionperpendicular_m(float value);
  private:
  float _internal_maxroadsideextensionperpendicular_m() const;
  void _internal_set_maxroadsideextensionperpendicular_m(float value);
  public:

  // optional float lineOrientationRoiDelta_m = 1754;
  bool has_lineorientationroidelta_m() const;
  private:
  bool _internal_has_lineorientationroidelta_m() const;
  public:
  void clear_lineorientationroidelta_m();
  float lineorientationroidelta_m() const;
  void set_lineorientationroidelta_m(float value);
  private:
  float _internal_lineorientationroidelta_m() const;
  void _internal_set_lineorientationroidelta_m(float value);
  public:

  // optional bool allowNakedSlots = 953;
  bool has_allownakedslots() const;
  private:
  bool _internal_has_allownakedslots() const;
  public:
  void clear_allownakedslots();
  bool allownakedslots() const;
  void set_allownakedslots(bool value);
  private:
  bool _internal_allownakedslots() const;
  void _internal_set_allownakedslots(bool value);
  public:

  // optional bool requireAtLeastOneDelimitingObjectForNakedSlot = 1927;
  bool has_requireatleastonedelimitingobjectfornakedslot() const;
  private:
  bool _internal_has_requireatleastonedelimitingobjectfornakedslot() const;
  public:
  void clear_requireatleastonedelimitingobjectfornakedslot();
  bool requireatleastonedelimitingobjectfornakedslot() const;
  void set_requireatleastonedelimitingobjectfornakedslot(bool value);
  private:
  bool _internal_requireatleastonedelimitingobjectfornakedslot() const;
  void _internal_set_requireatleastonedelimitingobjectfornakedslot(bool value);
  public:

  // optional bool enableAngularParking = 186;
  bool has_enableangularparking() const;
  private:
  bool _internal_has_enableangularparking() const;
  public:
  void clear_enableangularparking();
  bool enableangularparking() const;
  void set_enableangularparking(bool value);
  private:
  bool _internal_enableangularparking() const;
  void _internal_set_enableangularparking(bool value);
  public:

  // optional bool enableAngularRightOpeningTowardsBack = 3952;
  bool has_enableangularrightopeningtowardsback() const;
  private:
  bool _internal_has_enableangularrightopeningtowardsback() const;
  public:
  void clear_enableangularrightopeningtowardsback();
  bool enableangularrightopeningtowardsback() const;
  void set_enableangularrightopeningtowardsback(bool value);
  private:
  bool _internal_enableangularrightopeningtowardsback() const;
  void _internal_set_enableangularrightopeningtowardsback(bool value);
  public:

  // optional float ocSecZoneAngCurbToCurb_m = 1757;
  bool has_ocseczoneangcurbtocurb_m() const;
  private:
  bool _internal_has_ocseczoneangcurbtocurb_m() const;
  public:
  void clear_ocseczoneangcurbtocurb_m();
  float ocseczoneangcurbtocurb_m() const;
  void set_ocseczoneangcurbtocurb_m(float value);
  private:
  float _internal_ocseczoneangcurbtocurb_m() const;
  void _internal_set_ocseczoneangcurbtocurb_m(float value);
  public:

  // optional float prohibitionZoneRelativeLength = 1829;
  bool has_prohibitionzonerelativelength() const;
  private:
  bool _internal_has_prohibitionzonerelativelength() const;
  public:
  void clear_prohibitionzonerelativelength();
  float prohibitionzonerelativelength() const;
  void set_prohibitionzonerelativelength(float value);
  private:
  float _internal_prohibitionzonerelativelength() const;
  void _internal_set_prohibitionzonerelativelength(float value);
  public:

  // optional float slotPenetrationDepth_m = 1832;
  bool has_slotpenetrationdepth_m() const;
  private:
  bool _internal_has_slotpenetrationdepth_m() const;
  public:
  void clear_slotpenetrationdepth_m();
  float slotpenetrationdepth_m() const;
  void set_slotpenetrationdepth_m(float value);
  private:
  float _internal_slotpenetrationdepth_m() const;
  void _internal_set_slotpenetrationdepth_m(float value);
  public:

  // optional float perpendicularSlotWidthDeltaMin_m = 1840;
  bool has_perpendicularslotwidthdeltamin_m() const;
  private:
  bool _internal_has_perpendicularslotwidthdeltamin_m() const;
  public:
  void clear_perpendicularslotwidthdeltamin_m();
  float perpendicularslotwidthdeltamin_m() const;
  void set_perpendicularslotwidthdeltamin_m(float value);
  private:
  float _internal_perpendicularslotwidthdeltamin_m() const;
  void _internal_set_perpendicularslotwidthdeltamin_m(float value);
  public:

  // optional float parallelSlotWidthDeltaMax_m = 1871;
  bool has_parallelslotwidthdeltamax_m() const;
  private:
  bool _internal_has_parallelslotwidthdeltamax_m() const;
  public:
  void clear_parallelslotwidthdeltamax_m();
  float parallelslotwidthdeltamax_m() const;
  void set_parallelslotwidthdeltamax_m(float value);
  private:
  float _internal_parallelslotwidthdeltamax_m() const;
  void _internal_set_parallelslotwidthdeltamax_m(float value);
  public:

  // optional float frontRoiYSide_m = 1875;
  bool has_frontroiyside_m() const;
  private:
  bool _internal_has_frontroiyside_m() const;
  public:
  void clear_frontroiyside_m();
  float frontroiyside_m() const;
  void set_frontroiyside_m(float value);
  private:
  float _internal_frontroiyside_m() const;
  void _internal_set_frontroiyside_m(float value);
  public:

  // optional bool enableInsideObjectPenetrationDepth = 1300;
  bool has_enableinsideobjectpenetrationdepth() const;
  private:
  bool _internal_has_enableinsideobjectpenetrationdepth() const;
  public:
  void clear_enableinsideobjectpenetrationdepth();
  bool enableinsideobjectpenetrationdepth() const;
  void set_enableinsideobjectpenetrationdepth(bool value);
  private:
  bool _internal_enableinsideobjectpenetrationdepth() const;
  void _internal_set_enableinsideobjectpenetrationdepth(bool value);
  public:

  // optional bool vlProjectOntoBoxIfFailed = 1532;
  bool has_vlprojectontoboxiffailed() const;
  private:
  bool _internal_has_vlprojectontoboxiffailed() const;
  public:
  void clear_vlprojectontoboxiffailed();
  bool vlprojectontoboxiffailed() const;
  void set_vlprojectontoboxiffailed(bool value);
  private:
  bool _internal_vlprojectontoboxiffailed() const;
  void _internal_set_vlprojectontoboxiffailed(bool value);
  public:

  // optional bool vlDoRoadInsideOptimization = 739;
  bool has_vldoroadinsideoptimization() const;
  private:
  bool _internal_has_vldoroadinsideoptimization() const;
  public:
  void clear_vldoroadinsideoptimization();
  bool vldoroadinsideoptimization() const;
  void set_vldoroadinsideoptimization(bool value);
  private:
  bool _internal_vldoroadinsideoptimization() const;
  void _internal_set_vldoroadinsideoptimization(bool value);
  public:

  // optional bool vlUseRoadFacingForNonParallelSlots = 4010;
  bool has_vluseroadfacingfornonparallelslots() const;
  private:
  bool _internal_has_vluseroadfacingfornonparallelslots() const;
  public:
  void clear_vluseroadfacingfornonparallelslots();
  bool vluseroadfacingfornonparallelslots() const;
  void set_vluseroadfacingfornonparallelslots(bool value);
  private:
  bool _internal_vluseroadfacingfornonparallelslots() const;
  void _internal_set_vluseroadfacingfornonparallelslots(bool value);
  public:

  // optional float sideAndCurbDelimiterRoiBottomShift_m = 1910;
  bool has_sideandcurbdelimiterroibottomshift_m() const;
  private:
  bool _internal_has_sideandcurbdelimiterroibottomshift_m() const;
  public:
  void clear_sideandcurbdelimiterroibottomshift_m();
  float sideandcurbdelimiterroibottomshift_m() const;
  void set_sideandcurbdelimiterroibottomshift_m(float value);
  private:
  float _internal_sideandcurbdelimiterroibottomshift_m() const;
  void _internal_set_sideandcurbdelimiterroibottomshift_m(float value);
  public:

  // optional float ocPrimZonePerpCurbIntoSlot_m = 1911;
  bool has_ocprimzoneperpcurbintoslot_m() const;
  private:
  bool _internal_has_ocprimzoneperpcurbintoslot_m() const;
  public:
  void clear_ocprimzoneperpcurbintoslot_m();
  float ocprimzoneperpcurbintoslot_m() const;
  void set_ocprimzoneperpcurbintoslot_m(float value);
  private:
  float _internal_ocprimzoneperpcurbintoslot_m() const;
  void _internal_set_ocprimzoneperpcurbintoslot_m(float value);
  public:

  // optional float minDistGapCnnSlotVsTrackedSlot_m = 1930;
  bool has_mindistgapcnnslotvstrackedslot_m() const;
  private:
  bool _internal_has_mindistgapcnnslotvstrackedslot_m() const;
  public:
  void clear_mindistgapcnnslotvstrackedslot_m();
  float mindistgapcnnslotvstrackedslot_m() const;
  void set_mindistgapcnnslotvstrackedslot_m(float value);
  private:
  float _internal_mindistgapcnnslotvstrackedslot_m() const;
  void _internal_set_mindistgapcnnslotvstrackedslot_m(float value);
  public:

  // optional bool allowSlotExtensionOverLinesToMinOpening = 2382;
  bool has_allowslotextensionoverlinestominopening() const;
  private:
  bool _internal_has_allowslotextensionoverlinestominopening() const;
  public:
  void clear_allowslotextensionoverlinestominopening();
  bool allowslotextensionoverlinestominopening() const;
  void set_allowslotextensionoverlinestominopening(bool value);
  private:
  bool _internal_allowslotextensionoverlinestominopening() const;
  void _internal_set_allowslotextensionoverlinestominopening(bool value);
  public:

  // optional bool allowShrinkOnLinesDespiteSideObjects = 2840;
  bool has_allowshrinkonlinesdespitesideobjects() const;
  private:
  bool _internal_has_allowshrinkonlinesdespitesideobjects() const;
  public:
  void clear_allowshrinkonlinesdespitesideobjects();
  bool allowshrinkonlinesdespitesideobjects() const;
  void set_allowshrinkonlinesdespitesideobjects(bool value);
  private:
  bool _internal_allowshrinkonlinesdespitesideobjects() const;
  void _internal_set_allowshrinkonlinesdespitesideobjects(bool value);
  public:

  // optional bool preferShiftToTopOnCurbObjects = 2011;
  bool has_prefershifttotoponcurbobjects() const;
  private:
  bool _internal_has_prefershifttotoponcurbobjects() const;
  public:
  void clear_prefershifttotoponcurbobjects();
  bool prefershifttotoponcurbobjects() const;
  void set_prefershifttotoponcurbobjects(bool value);
  private:
  bool _internal_prefershifttotoponcurbobjects() const;
  void _internal_set_prefershifttotoponcurbobjects(bool value);
  public:

  // optional bool enableSlotFallback = 494;
  bool has_enableslotfallback() const;
  private:
  bool _internal_has_enableslotfallback() const;
  public:
  void clear_enableslotfallback();
  bool enableslotfallback() const;
  void set_enableslotfallback(bool value);
  private:
  bool _internal_enableslotfallback() const;
  void _internal_set_enableslotfallback(bool value);
  public:

  // optional float delZoneRoadFactorNonPar_nu = 1967;
  bool has_delzoneroadfactornonpar_nu() const;
  private:
  bool _internal_has_delzoneroadfactornonpar_nu() const;
  public:
  void clear_delzoneroadfactornonpar_nu();
  float delzoneroadfactornonpar_nu() const;
  void set_delzoneroadfactornonpar_nu(float value);
  private:
  float _internal_delzoneroadfactornonpar_nu() const;
  void _internal_set_delzoneroadfactornonpar_nu(float value);
  public:

  // optional float garageParkingSlotWidthDeltaMin_m = 1972;
  bool has_garageparkingslotwidthdeltamin_m() const;
  private:
  bool _internal_has_garageparkingslotwidthdeltamin_m() const;
  public:
  void clear_garageparkingslotwidthdeltamin_m();
  float garageparkingslotwidthdeltamin_m() const;
  void set_garageparkingslotwidthdeltamin_m(float value);
  private:
  float _internal_garageparkingslotwidthdeltamin_m() const;
  void _internal_set_garageparkingslotwidthdeltamin_m(float value);
  public:

  // optional float slotIdentMaxDevFromStraightLine_m = 1973;
  bool has_slotidentmaxdevfromstraightline_m() const;
  private:
  bool _internal_has_slotidentmaxdevfromstraightline_m() const;
  public:
  void clear_slotidentmaxdevfromstraightline_m();
  float slotidentmaxdevfromstraightline_m() const;
  void set_slotidentmaxdevfromstraightline_m(float value);
  private:
  float _internal_slotidentmaxdevfromstraightline_m() const;
  void _internal_set_slotidentmaxdevfromstraightline_m(float value);
  public:

  // optional float dynObjMaxVel_mps = 1975;
  bool has_dynobjmaxvel_mps() const;
  private:
  bool _internal_has_dynobjmaxvel_mps() const;
  public:
  void clear_dynobjmaxvel_mps();
  float dynobjmaxvel_mps() const;
  void set_dynobjmaxvel_mps(float value);
  private:
  float _internal_dynobjmaxvel_mps() const;
  void _internal_set_dynobjmaxvel_mps(float value);
  public:

  // optional float weightLineOrientation = 1980;
  bool has_weightlineorientation() const;
  private:
  bool _internal_has_weightlineorientation() const;
  public:
  void clear_weightlineorientation();
  float weightlineorientation() const;
  void set_weightlineorientation(float value);
  private:
  float _internal_weightlineorientation() const;
  void _internal_set_weightlineorientation(float value);
  public:

  // optional float cnnSlotsValidationMaxOpeningAngleDiff_rad = 1982;
  bool has_cnnslotsvalidationmaxopeninganglediff_rad() const;
  private:
  bool _internal_has_cnnslotsvalidationmaxopeninganglediff_rad() const;
  public:
  void clear_cnnslotsvalidationmaxopeninganglediff_rad();
  float cnnslotsvalidationmaxopeninganglediff_rad() const;
  void set_cnnslotsvalidationmaxopeninganglediff_rad(float value);
  private:
  float _internal_cnnslotsvalidationmaxopeninganglediff_rad() const;
  void _internal_set_cnnslotsvalidationmaxopeninganglediff_rad(float value);
  public:

  // optional float slotScoringMinNonParSideLength_m = 1986;
  bool has_slotscoringminnonparsidelength_m() const;
  private:
  bool _internal_has_slotscoringminnonparsidelength_m() const;
  public:
  void clear_slotscoringminnonparsidelength_m();
  float slotscoringminnonparsidelength_m() const;
  void set_slotscoringminnonparsidelength_m(float value);
  private:
  float _internal_slotscoringminnonparsidelength_m() const;
  void _internal_set_slotscoringminnonparsidelength_m(float value);
  public:

  // optional float ocSecZonePerpCurbToSide_m = 2005;
  bool has_ocseczoneperpcurbtoside_m() const;
  private:
  bool _internal_has_ocseczoneperpcurbtoside_m() const;
  public:
  void clear_ocseczoneperpcurbtoside_m();
  float ocseczoneperpcurbtoside_m() const;
  void set_ocseczoneperpcurbtoside_m(float value);
  private:
  float _internal_ocseczoneperpcurbtoside_m() const;
  void _internal_set_ocseczoneperpcurbtoside_m(float value);
  public:

  // optional float maxAllowedVehCurbOverlapForPerp_m = 2010;
  bool has_maxallowedvehcurboverlapforperp_m() const;
  private:
  bool _internal_has_maxallowedvehcurboverlapforperp_m() const;
  public:
  void clear_maxallowedvehcurboverlapforperp_m();
  float maxallowedvehcurboverlapforperp_m() const;
  void set_maxallowedvehcurboverlapforperp_m(float value);
  private:
  float _internal_maxallowedvehcurboverlapforperp_m() const;
  void _internal_set_maxallowedvehcurboverlapforperp_m(float value);
  public:

  // optional float ocSecZoneParCurbToSide_m = 2023;
  bool has_ocseczoneparcurbtoside_m() const;
  private:
  bool _internal_has_ocseczoneparcurbtoside_m() const;
  public:
  void clear_ocseczoneparcurbtoside_m();
  float ocseczoneparcurbtoside_m() const;
  void set_ocseczoneparcurbtoside_m(float value);
  private:
  float _internal_ocseczoneparcurbtoside_m() const;
  void _internal_set_ocseczoneparcurbtoside_m(float value);
  public:

  // optional float maxDrivenRotationGarage_rad = 2024;
  bool has_maxdrivenrotationgarage_rad() const;
  private:
  bool _internal_has_maxdrivenrotationgarage_rad() const;
  public:
  void clear_maxdrivenrotationgarage_rad();
  float maxdrivenrotationgarage_rad() const;
  void set_maxdrivenrotationgarage_rad(float value);
  private:
  float _internal_maxdrivenrotationgarage_rad() const;
  void _internal_set_maxdrivenrotationgarage_rad(float value);
  public:

  // optional float sideShiftPenaltyForCurbObjects = 2073;
  bool has_sideshiftpenaltyforcurbobjects() const;
  private:
  bool _internal_has_sideshiftpenaltyforcurbobjects() const;
  public:
  void clear_sideshiftpenaltyforcurbobjects();
  float sideshiftpenaltyforcurbobjects() const;
  void set_sideshiftpenaltyforcurbobjects(float value);
  private:
  float _internal_sideshiftpenaltyforcurbobjects() const;
  void _internal_set_sideshiftpenaltyforcurbobjects(float value);
  public:

  // optional float cnnSlotBlowUpLimitNonParSide_m = 2089;
  bool has_cnnslotblowuplimitnonparside_m() const;
  private:
  bool _internal_has_cnnslotblowuplimitnonparside_m() const;
  public:
  void clear_cnnslotblowuplimitnonparside_m();
  float cnnslotblowuplimitnonparside_m() const;
  void set_cnnslotblowuplimitnonparside_m(float value);
  private:
  float _internal_cnnslotblowuplimitnonparside_m() const;
  void _internal_set_cnnslotblowuplimitnonparside_m(float value);
  public:

  // optional bool enlargeDynObj = 1630;
  bool has_enlargedynobj() const;
  private:
  bool _internal_has_enlargedynobj() const;
  public:
  void clear_enlargedynobj();
  bool enlargedynobj() const;
  void set_enlargedynobj(bool value);
  private:
  bool _internal_enlargedynobj() const;
  void _internal_set_enlargedynobj(bool value);
  public:

  // optional bool doExactShiftVectorToEgoCollisionCheck = 1631;
  bool has_doexactshiftvectortoegocollisioncheck() const;
  private:
  bool _internal_has_doexactshiftvectortoegocollisioncheck() const;
  public:
  void clear_doexactshiftvectortoegocollisioncheck();
  bool doexactshiftvectortoegocollisioncheck() const;
  void set_doexactshiftvectortoegocollisioncheck(bool value);
  private:
  bool _internal_doexactshiftvectortoegocollisioncheck() const;
  void _internal_set_doexactshiftvectortoegocollisioncheck(bool value);
  public:

  // optional bool enableSlotLengthAdaptionToAdjacentObjects = 3682;
  bool has_enableslotlengthadaptiontoadjacentobjects() const;
  private:
  bool _internal_has_enableslotlengthadaptiontoadjacentobjects() const;
  public:
  void clear_enableslotlengthadaptiontoadjacentobjects();
  bool enableslotlengthadaptiontoadjacentobjects() const;
  void set_enableslotlengthadaptiontoadjacentobjects(bool value);
  private:
  bool _internal_enableslotlengthadaptiontoadjacentobjects() const;
  void _internal_set_enableslotlengthadaptiontoadjacentobjects(bool value);
  public:

  // optional bool enableSlotLengthAdaptionToAdjacentLines = 1476;
  bool has_enableslotlengthadaptiontoadjacentlines() const;
  private:
  bool _internal_has_enableslotlengthadaptiontoadjacentlines() const;
  public:
  void clear_enableslotlengthadaptiontoadjacentlines();
  bool enableslotlengthadaptiontoadjacentlines() const;
  void set_enableslotlengthadaptiontoadjacentlines(bool value);
  private:
  bool _internal_enableslotlengthadaptiontoadjacentlines() const;
  void _internal_set_enableslotlengthadaptiontoadjacentlines(bool value);
  public:

  // optional float garageParkingSlotDoorAreaLength_m = 2119;
  bool has_garageparkingslotdoorarealength_m() const;
  private:
  bool _internal_has_garageparkingslotdoorarealength_m() const;
  public:
  void clear_garageparkingslotdoorarealength_m();
  float garageparkingslotdoorarealength_m() const;
  void set_garageparkingslotdoorarealength_m(float value);
  private:
  float _internal_garageparkingslotdoorarealength_m() const;
  void _internal_set_garageparkingslotdoorarealength_m(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float weightCurbOrientation = 2143;
  bool has_weightcurborientation() const;
  private:
  bool _internal_has_weightcurborientation() const;
  public:
  void clear_weightcurborientation();
  float weightcurborientation() const;
  void set_weightcurborientation(float value);
  private:
  float _internal_weightcurborientation() const;
  void _internal_set_weightcurborientation(float value);
  public:

  // optional float ocPrimZonePerpSideToRoad_m = 2160;
  bool has_ocprimzoneperpsidetoroad_m() const;
  private:
  bool _internal_has_ocprimzoneperpsidetoroad_m() const;
  public:
  void clear_ocprimzoneperpsidetoroad_m();
  float ocprimzoneperpsidetoroad_m() const;
  void set_ocprimzoneperpsidetoroad_m(float value);
  private:
  float _internal_ocprimzoneperpsidetoroad_m() const;
  void _internal_set_ocprimzoneperpsidetoroad_m(float value);
  public:

  // optional bool lcNoCurbLineOptimizationIfNoCurbLc = 3610;
  bool has_lcnocurblineoptimizationifnocurblc() const;
  private:
  bool _internal_has_lcnocurblineoptimizationifnocurblc() const;
  public:
  void clear_lcnocurblineoptimizationifnocurblc();
  bool lcnocurblineoptimizationifnocurblc() const;
  void set_lcnocurblineoptimizationifnocurblc(bool value);
  private:
  bool _internal_lcnocurblineoptimizationifnocurblc() const;
  void _internal_set_lcnocurblineoptimizationifnocurblc(bool value);
  public:

  // optional bool enableLeftSideScanning = 3159;
  bool has_enableleftsidescanning() const;
  private:
  bool _internal_has_enableleftsidescanning() const;
  public:
  void clear_enableleftsidescanning();
  bool enableleftsidescanning() const;
  void set_enableleftsidescanning(bool value);
  private:
  bool _internal_enableleftsidescanning() const;
  void _internal_set_enableleftsidescanning(bool value);
  public:

  // optional bool enableRightSideScanning = 507;
  bool has_enablerightsidescanning() const;
  private:
  bool _internal_has_enablerightsidescanning() const;
  public:
  void clear_enablerightsidescanning();
  bool enablerightsidescanning() const;
  void set_enablerightsidescanning(bool value);
  private:
  bool _internal_enablerightsidescanning() const;
  void _internal_set_enablerightsidescanning(bool value);
  public:

  // optional bool enableFrontScanning = 1368;
  bool has_enablefrontscanning() const;
  private:
  bool _internal_has_enablefrontscanning() const;
  public:
  void clear_enablefrontscanning();
  bool enablefrontscanning() const;
  void set_enablefrontscanning(bool value);
  private:
  bool _internal_enablefrontscanning() const;
  void _internal_set_enablefrontscanning(bool value);
  public:

  // optional float ncSplitMaxSkippableNCAreaPerStep_m2 = 2186;
  bool has_ncsplitmaxskippablencareaperstep_m2() const;
  private:
  bool _internal_has_ncsplitmaxskippablencareaperstep_m2() const;
  public:
  void clear_ncsplitmaxskippablencareaperstep_m2();
  float ncsplitmaxskippablencareaperstep_m2() const;
  void set_ncsplitmaxskippablencareaperstep_m2(float value);
  private:
  float _internal_ncsplitmaxskippablencareaperstep_m2() const;
  void _internal_set_ncsplitmaxskippablencareaperstep_m2(float value);
  public:

  // optional bool invalidateOverlappingEstablishedSlots = 490;
  bool has_invalidateoverlappingestablishedslots() const;
  private:
  bool _internal_has_invalidateoverlappingestablishedslots() const;
  public:
  void clear_invalidateoverlappingestablishedslots();
  bool invalidateoverlappingestablishedslots() const;
  void set_invalidateoverlappingestablishedslots(bool value);
  private:
  bool _internal_invalidateoverlappingestablishedslots() const;
  void _internal_set_invalidateoverlappingestablishedslots(bool value);
  public:

  // optional bool enableSlotOrientationOnSideVLs = 1985;
  bool has_enableslotorientationonsidevls() const;
  private:
  bool _internal_has_enableslotorientationonsidevls() const;
  public:
  void clear_enableslotorientationonsidevls();
  bool enableslotorientationonsidevls() const;
  void set_enableslotorientationonsidevls(bool value);
  private:
  bool _internal_enableslotorientationonsidevls() const;
  void _internal_set_enableslotorientationonsidevls(bool value);
  public:

  // optional bool enableSlotOrientationOnWingVLs = 3521;
  bool has_enableslotorientationonwingvls() const;
  private:
  bool _internal_has_enableslotorientationonwingvls() const;
  public:
  void clear_enableslotorientationonwingvls();
  bool enableslotorientationonwingvls() const;
  void set_enableslotorientationonwingvls(bool value);
  private:
  bool _internal_enableslotorientationonwingvls() const;
  void _internal_set_enableslotorientationonwingvls(bool value);
  public:

  // optional bool highSideDelimiterRequired = 2753;
  bool has_highsidedelimiterrequired() const;
  private:
  bool _internal_has_highsidedelimiterrequired() const;
  public:
  void clear_highsidedelimiterrequired();
  bool highsidedelimiterrequired() const;
  void set_highsidedelimiterrequired(bool value);
  private:
  bool _internal_highsidedelimiterrequired() const;
  void _internal_set_highsidedelimiterrequired(bool value);
  public:

  // optional float minDistanceToObject_m = 2195;
  bool has_mindistancetoobject_m() const;
  private:
  bool _internal_has_mindistancetoobject_m() const;
  public:
  void clear_mindistancetoobject_m();
  float mindistancetoobject_m() const;
  void set_mindistancetoobject_m(float value);
  private:
  float _internal_mindistancetoobject_m() const;
  void _internal_set_mindistancetoobject_m(float value);
  public:

  // optional float ocPerpendicularMaxDistanceXForCurbSideClustering_m = 2200;
  bool has_ocperpendicularmaxdistancexforcurbsideclustering_m() const;
  private:
  bool _internal_has_ocperpendicularmaxdistancexforcurbsideclustering_m() const;
  public:
  void clear_ocperpendicularmaxdistancexforcurbsideclustering_m();
  float ocperpendicularmaxdistancexforcurbsideclustering_m() const;
  void set_ocperpendicularmaxdistancexforcurbsideclustering_m(float value);
  private:
  float _internal_ocperpendicularmaxdistancexforcurbsideclustering_m() const;
  void _internal_set_ocperpendicularmaxdistancexforcurbsideclustering_m(float value);
  public:

  // optional bool enableUnspecifiedShift = 1788;
  bool has_enableunspecifiedshift() const;
  private:
  bool _internal_has_enableunspecifiedshift() const;
  public:
  void clear_enableunspecifiedshift();
  bool enableunspecifiedshift() const;
  void set_enableunspecifiedshift(bool value);
  private:
  bool _internal_enableunspecifiedshift() const;
  void _internal_set_enableunspecifiedshift(bool value);
  public:

  // optional bool doLineCategorization = 3392;
  bool has_dolinecategorization() const;
  private:
  bool _internal_has_dolinecategorization() const;
  public:
  void clear_dolinecategorization();
  bool dolinecategorization() const;
  void set_dolinecategorization(bool value);
  private:
  bool _internal_dolinecategorization() const;
  void _internal_set_dolinecategorization(bool value);
  public:

  // optional bool doCurbOnlyLineCategorization = 2120;
  bool has_docurbonlylinecategorization() const;
  private:
  bool _internal_has_docurbonlylinecategorization() const;
  public:
  void clear_docurbonlylinecategorization();
  bool docurbonlylinecategorization() const;
  void set_docurbonlylinecategorization(bool value);
  private:
  bool _internal_docurbonlylinecategorization() const;
  void _internal_set_docurbonlylinecategorization(bool value);
  public:

  // optional bool ignoreLinesForSandwichSlots = 1548;
  bool has_ignorelinesforsandwichslots() const;
  private:
  bool _internal_has_ignorelinesforsandwichslots() const;
  public:
  void clear_ignorelinesforsandwichslots();
  bool ignorelinesforsandwichslots() const;
  void set_ignorelinesforsandwichslots(bool value);
  private:
  bool _internal_ignorelinesforsandwichslots() const;
  void _internal_set_ignorelinesforsandwichslots(bool value);
  public:

  // optional uint32 minHeightConfDeltaStaticObj = 2213;
  bool has_minheightconfdeltastaticobj() const;
  private:
  bool _internal_has_minheightconfdeltastaticobj() const;
  public:
  void clear_minheightconfdeltastaticobj();
  ::PROTOBUF_NAMESPACE_ID::uint32 minheightconfdeltastaticobj() const;
  void set_minheightconfdeltastaticobj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minheightconfdeltastaticobj() const;
  void _internal_set_minheightconfdeltastaticobj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float rearMemParkGap_m = 2241;
  bool has_rearmemparkgap_m() const;
  private:
  bool _internal_has_rearmemparkgap_m() const;
  public:
  void clear_rearmemparkgap_m();
  float rearmemparkgap_m() const;
  void set_rearmemparkgap_m(float value);
  private:
  float _internal_rearmemparkgap_m() const;
  void _internal_set_rearmemparkgap_m(float value);
  public:

  // optional float minDistanceNoObject_m = 2244;
  bool has_mindistancenoobject_m() const;
  private:
  bool _internal_has_mindistancenoobject_m() const;
  public:
  void clear_mindistancenoobject_m();
  float mindistancenoobject_m() const;
  void set_mindistancenoobject_m(float value);
  private:
  float _internal_mindistancenoobject_m() const;
  void _internal_set_mindistancenoobject_m(float value);
  public:

  // optional float osdSideRoiXBack_m = 2258;
  bool has_osdsideroixback_m() const;
  private:
  bool _internal_has_osdsideroixback_m() const;
  public:
  void clear_osdsideroixback_m();
  float osdsideroixback_m() const;
  void set_osdsideroixback_m(float value);
  private:
  float _internal_osdsideroixback_m() const;
  void _internal_set_osdsideroixback_m(float value);
  public:

  // optional bool allowNakedCnnSlots = 835;
  bool has_allownakedcnnslots() const;
  private:
  bool _internal_has_allownakedcnnslots() const;
  public:
  void clear_allownakedcnnslots();
  bool allownakedcnnslots() const;
  void set_allownakedcnnslots(bool value);
  private:
  bool _internal_allownakedcnnslots() const;
  void _internal_set_allownakedcnnslots(bool value);
  public:

  // optional bool cnnSlotsAllowSiSlotOverride = 3762;
  bool has_cnnslotsallowsislotoverride() const;
  private:
  bool _internal_has_cnnslotsallowsislotoverride() const;
  public:
  void clear_cnnslotsallowsislotoverride();
  bool cnnslotsallowsislotoverride() const;
  void set_cnnslotsallowsislotoverride(bool value);
  private:
  bool _internal_cnnslotsallowsislotoverride() const;
  void _internal_set_cnnslotsallowsislotoverride(bool value);
  public:

  // optional bool preapplyRoadsideExtension = 2224;
  bool has_preapplyroadsideextension() const;
  private:
  bool _internal_has_preapplyroadsideextension() const;
  public:
  void clear_preapplyroadsideextension();
  bool preapplyroadsideextension() const;
  void set_preapplyroadsideextension(bool value);
  private:
  bool _internal_preapplyroadsideextension() const;
  void _internal_set_preapplyroadsideextension(bool value);
  public:

  // optional float slotScoringMaxParLineLength_m = 2287;
  bool has_slotscoringmaxparlinelength_m() const;
  private:
  bool _internal_has_slotscoringmaxparlinelength_m() const;
  public:
  void clear_slotscoringmaxparlinelength_m();
  float slotscoringmaxparlinelength_m() const;
  void set_slotscoringmaxparlinelength_m(float value);
  private:
  float _internal_slotscoringmaxparlinelength_m() const;
  void _internal_set_slotscoringmaxparlinelength_m(float value);
  public:

  // optional float slotScoringMaxVlOrLineAngleDiff_rad = 2293;
  bool has_slotscoringmaxvlorlineanglediff_rad() const;
  private:
  bool _internal_has_slotscoringmaxvlorlineanglediff_rad() const;
  public:
  void clear_slotscoringmaxvlorlineanglediff_rad();
  float slotscoringmaxvlorlineanglediff_rad() const;
  void set_slotscoringmaxvlorlineanglediff_rad(float value);
  private:
  float _internal_slotscoringmaxvlorlineanglediff_rad() const;
  void _internal_set_slotscoringmaxvlorlineanglediff_rad(float value);
  public:

  // optional float perpendicularSlotLengthDeltaMin_m = 2314;
  bool has_perpendicularslotlengthdeltamin_m() const;
  private:
  bool _internal_has_perpendicularslotlengthdeltamin_m() const;
  public:
  void clear_perpendicularslotlengthdeltamin_m();
  float perpendicularslotlengthdeltamin_m() const;
  void set_perpendicularslotlengthdeltamin_m(float value);
  private:
  float _internal_perpendicularslotlengthdeltamin_m() const;
  void _internal_set_perpendicularslotlengthdeltamin_m(float value);
  public:

  // optional float dynObjMaxPreviewTime_s = 2363;
  bool has_dynobjmaxpreviewtime_s() const;
  private:
  bool _internal_has_dynobjmaxpreviewtime_s() const;
  public:
  void clear_dynobjmaxpreviewtime_s();
  float dynobjmaxpreviewtime_s() const;
  void set_dynobjmaxpreviewtime_s(float value);
  private:
  float _internal_dynobjmaxpreviewtime_s() const;
  void _internal_set_dynobjmaxpreviewtime_s(float value);
  public:

  // optional bool allowNarrowSlotsScan = 1727;
  bool has_allownarrowslotsscan() const;
  private:
  bool _internal_has_allownarrowslotsscan() const;
  public:
  void clear_allownarrowslotsscan();
  bool allownarrowslotsscan() const;
  void set_allownarrowslotsscan(bool value);
  private:
  bool _internal_allownarrowslotsscan() const;
  void _internal_set_allownarrowslotsscan(bool value);
  public:

  // optional bool enableCnnWheelStoppers = 3141;
  bool has_enablecnnwheelstoppers() const;
  private:
  bool _internal_has_enablecnnwheelstoppers() const;
  public:
  void clear_enablecnnwheelstoppers();
  bool enablecnnwheelstoppers() const;
  void set_enablecnnwheelstoppers(bool value);
  private:
  bool _internal_enablecnnwheelstoppers() const;
  void _internal_set_enablecnnwheelstoppers(bool value);
  public:

  // optional bool enableCnnWheelStopperStatObjVerification = 1382;
  bool has_enablecnnwheelstopperstatobjverification() const;
  private:
  bool _internal_has_enablecnnwheelstopperstatobjverification() const;
  public:
  void clear_enablecnnwheelstopperstatobjverification();
  bool enablecnnwheelstopperstatobjverification() const;
  void set_enablecnnwheelstopperstatobjverification(bool value);
  private:
  bool _internal_enablecnnwheelstopperstatobjverification() const;
  void _internal_set_enablecnnwheelstopperstatobjverification(bool value);
  public:

  // optional bool wsStatObjIgnoreEvaluation = 3340;
  bool has_wsstatobjignoreevaluation() const;
  private:
  bool _internal_has_wsstatobjignoreevaluation() const;
  public:
  void clear_wsstatobjignoreevaluation();
  bool wsstatobjignoreevaluation() const;
  void set_wsstatobjignoreevaluation(bool value);
  private:
  bool _internal_wsstatobjignoreevaluation() const;
  void _internal_set_wsstatobjignoreevaluation(bool value);
  public:

  // optional float minAppliedRoadsideExtension_m = 2410;
  bool has_minappliedroadsideextension_m() const;
  private:
  bool _internal_has_minappliedroadsideextension_m() const;
  public:
  void clear_minappliedroadsideextension_m();
  float minappliedroadsideextension_m() const;
  void set_minappliedroadsideextension_m(float value);
  private:
  float _internal_minappliedroadsideextension_m() const;
  void _internal_set_minappliedroadsideextension_m(float value);
  public:

  // optional float slotExpMaxTriangleExpansion_m = 2427;
  bool has_slotexpmaxtriangleexpansion_m() const;
  private:
  bool _internal_has_slotexpmaxtriangleexpansion_m() const;
  public:
  void clear_slotexpmaxtriangleexpansion_m();
  float slotexpmaxtriangleexpansion_m() const;
  void set_slotexpmaxtriangleexpansion_m(float value);
  private:
  float _internal_slotexpmaxtriangleexpansion_m() const;
  void _internal_set_slotexpmaxtriangleexpansion_m(float value);
  public:

  // optional bool cnnSlotsEnableSiSlotDetectionVerification = 3857;
  bool has_cnnslotsenablesislotdetectionverification() const;
  private:
  bool _internal_has_cnnslotsenablesislotdetectionverification() const;
  public:
  void clear_cnnslotsenablesislotdetectionverification();
  bool cnnslotsenablesislotdetectionverification() const;
  void set_cnnslotsenablesislotdetectionverification(bool value);
  private:
  bool _internal_cnnslotsenablesislotdetectionverification() const;
  void _internal_set_cnnslotsenablesislotdetectionverification(bool value);
  public:

  // optional bool cnnCompareSlotTypeFPSuppression = 2272;
  bool has_cnncompareslottypefpsuppression() const;
  private:
  bool _internal_has_cnncompareslottypefpsuppression() const;
  public:
  void clear_cnncompareslottypefpsuppression();
  bool cnncompareslottypefpsuppression() const;
  void set_cnncompareslottypefpsuppression(bool value);
  private:
  bool _internal_cnncompareslottypefpsuppression() const;
  void _internal_set_cnncompareslottypefpsuppression(bool value);
  public:

  // optional bool cnnSlotsPerpendicularValidatesAngular = 1447;
  bool has_cnnslotsperpendicularvalidatesangular() const;
  private:
  bool _internal_has_cnnslotsperpendicularvalidatesangular() const;
  public:
  void clear_cnnslotsperpendicularvalidatesangular();
  bool cnnslotsperpendicularvalidatesangular() const;
  void set_cnnslotsperpendicularvalidatesangular(bool value);
  private:
  bool _internal_cnnslotsperpendicularvalidatesangular() const;
  void _internal_set_cnnslotsperpendicularvalidatesangular(bool value);
  public:

  // optional bool cnnSlotsEnableCnnSlotPrototypes = 2136;
  bool has_cnnslotsenablecnnslotprototypes() const;
  private:
  bool _internal_has_cnnslotsenablecnnslotprototypes() const;
  public:
  void clear_cnnslotsenablecnnslotprototypes();
  bool cnnslotsenablecnnslotprototypes() const;
  void set_cnnslotsenablecnnslotprototypes(bool value);
  private:
  bool _internal_cnnslotsenablecnnslotprototypes() const;
  void _internal_set_cnnslotsenablecnnslotprototypes(bool value);
  public:

  // optional float smallSlotOpeningPenalty = 2479;
  bool has_smallslotopeningpenalty() const;
  private:
  bool _internal_has_smallslotopeningpenalty() const;
  public:
  void clear_smallslotopeningpenalty();
  float smallslotopeningpenalty() const;
  void set_smallslotopeningpenalty(float value);
  private:
  float _internal_smallslotopeningpenalty() const;
  void _internal_set_smallslotopeningpenalty(float value);
  public:

  // optional float perpendicularSlotWidthDeltaModel_m = 2495;
  bool has_perpendicularslotwidthdeltamodel_m() const;
  private:
  bool _internal_has_perpendicularslotwidthdeltamodel_m() const;
  public:
  void clear_perpendicularslotwidthdeltamodel_m();
  float perpendicularslotwidthdeltamodel_m() const;
  void set_perpendicularslotwidthdeltamodel_m(float value);
  private:
  float _internal_perpendicularslotwidthdeltamodel_m() const;
  void _internal_set_perpendicularslotwidthdeltamodel_m(float value);
  public:

  // optional float angularParkingDetectionWindowAbsMax_m = 2498;
  bool has_angularparkingdetectionwindowabsmax_m() const;
  private:
  bool _internal_has_angularparkingdetectionwindowabsmax_m() const;
  public:
  void clear_angularparkingdetectionwindowabsmax_m();
  float angularparkingdetectionwindowabsmax_m() const;
  void set_angularparkingdetectionwindowabsmax_m(float value);
  private:
  float _internal_angularparkingdetectionwindowabsmax_m() const;
  void _internal_set_angularparkingdetectionwindowabsmax_m(float value);
  public:

  // optional float ocSecZoneAngCurbToRoad_m = 2518;
  bool has_ocseczoneangcurbtoroad_m() const;
  private:
  bool _internal_has_ocseczoneangcurbtoroad_m() const;
  public:
  void clear_ocseczoneangcurbtoroad_m();
  float ocseczoneangcurbtoroad_m() const;
  void set_ocseczoneangcurbtoroad_m(float value);
  private:
  float _internal_ocseczoneangcurbtoroad_m() const;
  void _internal_set_ocseczoneangcurbtoroad_m(float value);
  public:

  // optional float ocSecZoneParSideToSlot_m = 2522;
  bool has_ocseczoneparsidetoslot_m() const;
  private:
  bool _internal_has_ocseczoneparsidetoslot_m() const;
  public:
  void clear_ocseczoneparsidetoslot_m();
  float ocseczoneparsidetoslot_m() const;
  void set_ocseczoneparsidetoslot_m(float value);
  private:
  float _internal_ocseczoneparsidetoslot_m() const;
  void _internal_set_ocseczoneparsidetoslot_m(float value);
  public:

  // optional float ocSecZonePerpSideToSlot_m = 2536;
  bool has_ocseczoneperpsidetoslot_m() const;
  private:
  bool _internal_has_ocseczoneperpsidetoslot_m() const;
  public:
  void clear_ocseczoneperpsidetoslot_m();
  float ocseczoneperpsidetoslot_m() const;
  void set_ocseczoneperpsidetoslot_m(float value);
  private:
  float _internal_ocseczoneperpsidetoslot_m() const;
  void _internal_set_ocseczoneperpsidetoslot_m(float value);
  public:

  // optional float parallelSlotLengthDeltaMax_m = 2547;
  bool has_parallelslotlengthdeltamax_m() const;
  private:
  bool _internal_has_parallelslotlengthdeltamax_m() const;
  public:
  void clear_parallelslotlengthdeltamax_m();
  float parallelslotlengthdeltamax_m() const;
  void set_parallelslotlengthdeltamax_m(float value);
  private:
  float _internal_parallelslotlengthdeltamax_m() const;
  void _internal_set_parallelslotlengthdeltamax_m(float value);
  public:

  // optional float ocPrimZoneParSideOpening_m = 2563;
  bool has_ocprimzoneparsideopening_m() const;
  private:
  bool _internal_has_ocprimzoneparsideopening_m() const;
  public:
  void clear_ocprimzoneparsideopening_m();
  float ocprimzoneparsideopening_m() const;
  void set_ocprimzoneparsideopening_m(float value);
  private:
  float _internal_ocprimzoneparsideopening_m() const;
  void _internal_set_ocprimzoneparsideopening_m(float value);
  public:

  // optional float parallelLineAllowedDeviation_rad = 2580;
  bool has_parallellinealloweddeviation_rad() const;
  private:
  bool _internal_has_parallellinealloweddeviation_rad() const;
  public:
  void clear_parallellinealloweddeviation_rad();
  float parallellinealloweddeviation_rad() const;
  void set_parallellinealloweddeviation_rad(float value);
  private:
  float _internal_parallellinealloweddeviation_rad() const;
  void _internal_set_parallellinealloweddeviation_rad(float value);
  public:

  // optional float ocParallelMaxDistanceXForCurbSideClustering_m = 2605;
  bool has_ocparallelmaxdistancexforcurbsideclustering_m() const;
  private:
  bool _internal_has_ocparallelmaxdistancexforcurbsideclustering_m() const;
  public:
  void clear_ocparallelmaxdistancexforcurbsideclustering_m();
  float ocparallelmaxdistancexforcurbsideclustering_m() const;
  void set_ocparallelmaxdistancexforcurbsideclustering_m(float value);
  private:
  float _internal_ocparallelmaxdistancexforcurbsideclustering_m() const;
  void _internal_set_ocparallelmaxdistancexforcurbsideclustering_m(float value);
  public:

  // optional float safetyMarginDynObjEnlargingCar_m = 2657;
  bool has_safetymargindynobjenlargingcar_m() const;
  private:
  bool _internal_has_safetymargindynobjenlargingcar_m() const;
  public:
  void clear_safetymargindynobjenlargingcar_m();
  float safetymargindynobjenlargingcar_m() const;
  void set_safetymargindynobjenlargingcar_m(float value);
  private:
  float _internal_safetymargindynobjenlargingcar_m() const;
  void _internal_set_safetymargindynobjenlargingcar_m(float value);
  public:

  // optional float ocPerpMaxDistanceCurb_m = 2664;
  bool has_ocperpmaxdistancecurb_m() const;
  private:
  bool _internal_has_ocperpmaxdistancecurb_m() const;
  public:
  void clear_ocperpmaxdistancecurb_m();
  float ocperpmaxdistancecurb_m() const;
  void set_ocperpmaxdistancecurb_m(float value);
  private:
  float _internal_ocperpmaxdistancecurb_m() const;
  void _internal_set_ocperpmaxdistancecurb_m(float value);
  public:

  // optional float vlMaxTotalAngle_rad = 2683;
  bool has_vlmaxtotalangle_rad() const;
  private:
  bool _internal_has_vlmaxtotalangle_rad() const;
  public:
  void clear_vlmaxtotalangle_rad();
  float vlmaxtotalangle_rad() const;
  void set_vlmaxtotalangle_rad(float value);
  private:
  float _internal_vlmaxtotalangle_rad() const;
  void _internal_set_vlmaxtotalangle_rad(float value);
  public:

  // optional float ocSecZoneAngCurbToSide_m = 2694;
  bool has_ocseczoneangcurbtoside_m() const;
  private:
  bool _internal_has_ocseczoneangcurbtoside_m() const;
  public:
  void clear_ocseczoneangcurbtoside_m();
  float ocseczoneangcurbtoside_m() const;
  void set_ocseczoneangcurbtoside_m(float value);
  private:
  float _internal_ocseczoneangcurbtoside_m() const;
  void _internal_set_ocseczoneangcurbtoside_m(float value);
  public:

  // optional bool isStaticObjectInputCCWOriented = 3131;
  bool has_isstaticobjectinputccworiented() const;
  private:
  bool _internal_has_isstaticobjectinputccworiented() const;
  public:
  void clear_isstaticobjectinputccworiented();
  bool isstaticobjectinputccworiented() const;
  void set_isstaticobjectinputccworiented(bool value);
  private:
  bool _internal_isstaticobjectinputccworiented() const;
  void _internal_set_isstaticobjectinputccworiented(bool value);
  public:

  // optional bool useLineMarkings = 814;
  bool has_uselinemarkings() const;
  private:
  bool _internal_has_uselinemarkings() const;
  public:
  void clear_uselinemarkings();
  bool uselinemarkings() const;
  void set_uselinemarkings(bool value);
  private:
  bool _internal_uselinemarkings() const;
  void _internal_set_uselinemarkings(bool value);
  public:

  // optional bool treatUnknownCurbsideObjectsAsBodyTraversable = 2916;
  bool has_treatunknowncurbsideobjectsasbodytraversable() const;
  private:
  bool _internal_has_treatunknowncurbsideobjectsasbodytraversable() const;
  public:
  void clear_treatunknowncurbsideobjectsasbodytraversable();
  bool treatunknowncurbsideobjectsasbodytraversable() const;
  void set_treatunknowncurbsideobjectsasbodytraversable(bool value);
  private:
  bool _internal_treatunknowncurbsideobjectsasbodytraversable() const;
  void _internal_set_treatunknowncurbsideobjectsasbodytraversable(bool value);
  public:

  // optional bool enableSlotIdentFromTrajectory = 3922;
  bool has_enableslotidentfromtrajectory() const;
  private:
  bool _internal_has_enableslotidentfromtrajectory() const;
  public:
  void clear_enableslotidentfromtrajectory();
  bool enableslotidentfromtrajectory() const;
  void set_enableslotidentfromtrajectory(bool value);
  private:
  bool _internal_enableslotidentfromtrajectory() const;
  void _internal_set_enableslotidentfromtrajectory(bool value);
  public:

  // optional float shrinkPenaltyForClassifyingObjectAsDynamic = 2700;
  bool has_shrinkpenaltyforclassifyingobjectasdynamic() const;
  private:
  bool _internal_has_shrinkpenaltyforclassifyingobjectasdynamic() const;
  public:
  void clear_shrinkpenaltyforclassifyingobjectasdynamic();
  float shrinkpenaltyforclassifyingobjectasdynamic() const;
  void set_shrinkpenaltyforclassifyingobjectasdynamic(float value);
  private:
  float _internal_shrinkpenaltyforclassifyingobjectasdynamic() const;
  void _internal_set_shrinkpenaltyforclassifyingobjectasdynamic(float value);
  public:

  // optional float slotEdgePullSearchDistFront_m = 2717;
  bool has_slotedgepullsearchdistfront_m() const;
  private:
  bool _internal_has_slotedgepullsearchdistfront_m() const;
  public:
  void clear_slotedgepullsearchdistfront_m();
  float slotedgepullsearchdistfront_m() const;
  void set_slotedgepullsearchdistfront_m(float value);
  private:
  float _internal_slotedgepullsearchdistfront_m() const;
  void _internal_set_slotedgepullsearchdistfront_m(float value);
  public:

  // optional float lcCurbOnlyAngleDiff_rad = 2739;
  bool has_lccurbonlyanglediff_rad() const;
  private:
  bool _internal_has_lccurbonlyanglediff_rad() const;
  public:
  void clear_lccurbonlyanglediff_rad();
  float lccurbonlyanglediff_rad() const;
  void set_lccurbonlyanglediff_rad(float value);
  private:
  float _internal_lccurbonlyanglediff_rad() const;
  void _internal_set_lccurbonlyanglediff_rad(float value);
  public:

  // optional float delZoneRoadFactorPar_nu = 2770;
  bool has_delzoneroadfactorpar_nu() const;
  private:
  bool _internal_has_delzoneroadfactorpar_nu() const;
  public:
  void clear_delzoneroadfactorpar_nu();
  float delzoneroadfactorpar_nu() const;
  void set_delzoneroadfactorpar_nu(float value);
  private:
  float _internal_delzoneroadfactorpar_nu() const;
  void _internal_set_delzoneroadfactorpar_nu(float value);
  public:

  // optional float lcLineDistCostFactor = 2853;
  bool has_lclinedistcostfactor() const;
  private:
  bool _internal_has_lclinedistcostfactor() const;
  public:
  void clear_lclinedistcostfactor();
  float lclinedistcostfactor() const;
  void set_lclinedistcostfactor(float value);
  private:
  float _internal_lclinedistcostfactor() const;
  void _internal_set_lclinedistcostfactor(float value);
  public:

  // optional float maxRoadsideExtensionAngular_m = 2854;
  bool has_maxroadsideextensionangular_m() const;
  private:
  bool _internal_has_maxroadsideextensionangular_m() const;
  public:
  void clear_maxroadsideextensionangular_m();
  float maxroadsideextensionangular_m() const;
  void set_maxroadsideextensionangular_m(float value);
  private:
  float _internal_maxroadsideextensionangular_m() const;
  void _internal_set_maxroadsideextensionangular_m(float value);
  public:

  // optional float vlMinLengthStartDirectionSq_m = 2860;
  bool has_vlminlengthstartdirectionsq_m() const;
  private:
  bool _internal_has_vlminlengthstartdirectionsq_m() const;
  public:
  void clear_vlminlengthstartdirectionsq_m();
  float vlminlengthstartdirectionsq_m() const;
  void set_vlminlengthstartdirectionsq_m(float value);
  private:
  float _internal_vlminlengthstartdirectionsq_m() const;
  void _internal_set_vlminlengthstartdirectionsq_m(float value);
  public:

  // optional float maxRoadsideExtensionParallel_m = 2888;
  bool has_maxroadsideextensionparallel_m() const;
  private:
  bool _internal_has_maxroadsideextensionparallel_m() const;
  public:
  void clear_maxroadsideextensionparallel_m();
  float maxroadsideextensionparallel_m() const;
  void set_maxroadsideextensionparallel_m(float value);
  private:
  float _internal_maxroadsideextensionparallel_m() const;
  void _internal_set_maxroadsideextensionparallel_m(float value);
  public:

  // optional float wingAlignmentWeight_mpr = 2889;
  bool has_wingalignmentweight_mpr() const;
  private:
  bool _internal_has_wingalignmentweight_mpr() const;
  public:
  void clear_wingalignmentweight_mpr();
  float wingalignmentweight_mpr() const;
  void set_wingalignmentweight_mpr(float value);
  private:
  float _internal_wingalignmentweight_mpr() const;
  void _internal_set_wingalignmentweight_mpr(float value);
  public:

  // optional float garageParkingSlotLengthDeltaMin_m = 2905;
  bool has_garageparkingslotlengthdeltamin_m() const;
  private:
  bool _internal_has_garageparkingslotlengthdeltamin_m() const;
  public:
  void clear_garageparkingslotlengthdeltamin_m();
  float garageparkingslotlengthdeltamin_m() const;
  void set_garageparkingslotlengthdeltamin_m(float value);
  private:
  float _internal_garageparkingslotlengthdeltamin_m() const;
  void _internal_set_garageparkingslotlengthdeltamin_m(float value);
  public:

  // optional float slotIdentMaxYawDevParallel_rad = 2911;
  bool has_slotidentmaxyawdevparallel_rad() const;
  private:
  bool _internal_has_slotidentmaxyawdevparallel_rad() const;
  public:
  void clear_slotidentmaxyawdevparallel_rad();
  float slotidentmaxyawdevparallel_rad() const;
  void set_slotidentmaxyawdevparallel_rad(float value);
  private:
  float _internal_slotidentmaxyawdevparallel_rad() const;
  void _internal_set_slotidentmaxyawdevparallel_rad(float value);
  public:

  // optional bool enableSecondSideDelimiterOnlyScenario = 2565;
  bool has_enablesecondsidedelimiteronlyscenario() const;
  private:
  bool _internal_has_enablesecondsidedelimiteronlyscenario() const;
  public:
  void clear_enablesecondsidedelimiteronlyscenario();
  bool enablesecondsidedelimiteronlyscenario() const;
  void set_enablesecondsidedelimiteronlyscenario(bool value);
  private:
  bool _internal_enablesecondsidedelimiteronlyscenario() const;
  void _internal_set_enablesecondsidedelimiteronlyscenario(bool value);
  public:

  // optional bool enableFirstSideDelimiterOnlyScenario = 3069;
  bool has_enablefirstsidedelimiteronlyscenario() const;
  private:
  bool _internal_has_enablefirstsidedelimiteronlyscenario() const;
  public:
  void clear_enablefirstsidedelimiteronlyscenario();
  bool enablefirstsidedelimiteronlyscenario() const;
  void set_enablefirstsidedelimiteronlyscenario(bool value);
  private:
  bool _internal_enablefirstsidedelimiteronlyscenario() const;
  void _internal_set_enablefirstsidedelimiteronlyscenario(bool value);
  public:

  // optional bool preferSecondSideOSD = 3007;
  bool has_prefersecondsideosd() const;
  private:
  bool _internal_has_prefersecondsideosd() const;
  public:
  void clear_prefersecondsideosd();
  bool prefersecondsideosd() const;
  void set_prefersecondsideosd(bool value);
  private:
  bool _internal_prefersecondsideosd() const;
  void _internal_set_prefersecondsideosd(bool value);
  public:

  // optional bool requiredCurbObjectForOneSideDelimitingSlots = 3005;
  bool has_requiredcurbobjectforonesidedelimitingslots() const;
  private:
  bool _internal_has_requiredcurbobjectforonesidedelimitingslots() const;
  public:
  void clear_requiredcurbobjectforonesidedelimitingslots();
  bool requiredcurbobjectforonesidedelimitingslots() const;
  void set_requiredcurbobjectforonesidedelimitingslots(bool value);
  private:
  bool _internal_requiredcurbobjectforonesidedelimitingslots() const;
  void _internal_set_requiredcurbobjectforonesidedelimitingslots(bool value);
  public:

  // optional float leftRightMemParkGapY_m = 2918;
  bool has_leftrightmemparkgapy_m() const;
  private:
  bool _internal_has_leftrightmemparkgapy_m() const;
  public:
  void clear_leftrightmemparkgapy_m();
  float leftrightmemparkgapy_m() const;
  void set_leftrightmemparkgapy_m(float value);
  private:
  float _internal_leftrightmemparkgapy_m() const;
  void _internal_set_leftrightmemparkgapy_m(float value);
  public:

  // optional float minCurbObjLengthForOneSideDel_m = 2932;
  bool has_mincurbobjlengthforonesidedel_m() const;
  private:
  bool _internal_has_mincurbobjlengthforonesidedel_m() const;
  public:
  void clear_mincurbobjlengthforonesidedel_m();
  float mincurbobjlengthforonesidedel_m() const;
  void set_mincurbobjlengthforonesidedel_m(float value);
  private:
  float _internal_mincurbobjlengthforonesidedel_m() const;
  void _internal_set_mincurbobjlengthforonesidedel_m(float value);
  public:

  // optional float ocSecZonePerpCurbToCurb_m = 2958;
  bool has_ocseczoneperpcurbtocurb_m() const;
  private:
  bool _internal_has_ocseczoneperpcurbtocurb_m() const;
  public:
  void clear_ocseczoneperpcurbtocurb_m();
  float ocseczoneperpcurbtocurb_m() const;
  void set_ocseczoneperpcurbtocurb_m(float value);
  private:
  float _internal_ocseczoneperpcurbtocurb_m() const;
  void _internal_set_ocseczoneperpcurbtocurb_m(float value);
  public:

  // optional float ocSecZoneParCurbToCurb_m = 3004;
  bool has_ocseczoneparcurbtocurb_m() const;
  private:
  bool _internal_has_ocseczoneparcurbtocurb_m() const;
  public:
  void clear_ocseczoneparcurbtocurb_m();
  float ocseczoneparcurbtocurb_m() const;
  void set_ocseczoneparcurbtocurb_m(float value);
  private:
  float _internal_ocseczoneparcurbtocurb_m() const;
  void _internal_set_ocseczoneparcurbtocurb_m(float value);
  public:

  // optional float ocPrimZoneParSideToRoad_m = 3020;
  bool has_ocprimzoneparsidetoroad_m() const;
  private:
  bool _internal_has_ocprimzoneparsidetoroad_m() const;
  public:
  void clear_ocprimzoneparsidetoroad_m();
  float ocprimzoneparsidetoroad_m() const;
  void set_ocprimzoneparsidetoroad_m(float value);
  private:
  float _internal_ocprimzoneparsidetoroad_m() const;
  void _internal_set_ocprimzoneparsidetoroad_m(float value);
  public:

  // optional float safetyMarginDynObjEnlargingPed_m = 3035;
  bool has_safetymargindynobjenlargingped_m() const;
  private:
  bool _internal_has_safetymargindynobjenlargingped_m() const;
  public:
  void clear_safetymargindynobjenlargingped_m();
  float safetymargindynobjenlargingped_m() const;
  void set_safetymargindynobjenlargingped_m(float value);
  private:
  float _internal_safetymargindynobjenlargingped_m() const;
  void _internal_set_safetymargindynobjenlargingped_m(float value);
  public:

  // optional float barrierDelimiterWidth_m = 3039;
  bool has_barrierdelimiterwidth_m() const;
  private:
  bool _internal_has_barrierdelimiterwidth_m() const;
  public:
  void clear_barrierdelimiterwidth_m();
  float barrierdelimiterwidth_m() const;
  void set_barrierdelimiterwidth_m(float value);
  private:
  float _internal_barrierdelimiterwidth_m() const;
  void _internal_set_barrierdelimiterwidth_m(float value);
  public:

  // optional float parallelSlotDepthDeltaMinPark_m = 3046;
  bool has_parallelslotdepthdeltaminpark_m() const;
  private:
  bool _internal_has_parallelslotdepthdeltaminpark_m() const;
  public:
  void clear_parallelslotdepthdeltaminpark_m();
  float parallelslotdepthdeltaminpark_m() const;
  void set_parallelslotdepthdeltaminpark_m(float value);
  private:
  float _internal_parallelslotdepthdeltaminpark_m() const;
  void _internal_set_parallelslotdepthdeltaminpark_m(float value);
  public:

  // optional float sensingRange_m = 3054;
  bool has_sensingrange_m() const;
  private:
  bool _internal_has_sensingrange_m() const;
  public:
  void clear_sensingrange_m();
  float sensingrange_m() const;
  void set_sensingrange_m(float value);
  private:
  float _internal_sensingrange_m() const;
  void _internal_set_sensingrange_m(float value);
  public:

  // optional float frontRoiXEnd_m = 3084;
  bool has_frontroixend_m() const;
  private:
  bool _internal_has_frontroixend_m() const;
  public:
  void clear_frontroixend_m();
  float frontroixend_m() const;
  void set_frontroixend_m(float value);
  private:
  float _internal_frontroixend_m() const;
  void _internal_set_frontroixend_m(float value);
  public:

  // optional uint32 slotExpFrameCounterStable_nu = 3095;
  bool has_slotexpframecounterstable_nu() const;
  private:
  bool _internal_has_slotexpframecounterstable_nu() const;
  public:
  void clear_slotexpframecounterstable_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 slotexpframecounterstable_nu() const;
  void set_slotexpframecounterstable_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slotexpframecounterstable_nu() const;
  void _internal_set_slotexpframecounterstable_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float slotExpMinTriangleExpansion_rad = 3099;
  bool has_slotexpmintriangleexpansion_rad() const;
  private:
  bool _internal_has_slotexpmintriangleexpansion_rad() const;
  public:
  void clear_slotexpmintriangleexpansion_rad();
  float slotexpmintriangleexpansion_rad() const;
  void set_slotexpmintriangleexpansion_rad(float value);
  private:
  float _internal_slotexpmintriangleexpansion_rad() const;
  void _internal_set_slotexpmintriangleexpansion_rad(float value);
  public:

  // optional float sideAllowedOverlap_m = 3100;
  bool has_sideallowedoverlap_m() const;
  private:
  bool _internal_has_sideallowedoverlap_m() const;
  public:
  void clear_sideallowedoverlap_m();
  float sideallowedoverlap_m() const;
  void set_sideallowedoverlap_m(float value);
  private:
  float _internal_sideallowedoverlap_m() const;
  void _internal_set_sideallowedoverlap_m(float value);
  public:

  // optional float delZoneLeftRightMaxRelToVehWidthNonPar_nu = 3109;
  bool has_delzoneleftrightmaxreltovehwidthnonpar_nu() const;
  private:
  bool _internal_has_delzoneleftrightmaxreltovehwidthnonpar_nu() const;
  public:
  void clear_delzoneleftrightmaxreltovehwidthnonpar_nu();
  float delzoneleftrightmaxreltovehwidthnonpar_nu() const;
  void set_delzoneleftrightmaxreltovehwidthnonpar_nu(float value);
  private:
  float _internal_delzoneleftrightmaxreltovehwidthnonpar_nu() const;
  void _internal_set_delzoneleftrightmaxreltovehwidthnonpar_nu(float value);
  public:

  // optional float angularCurbRoadAreaFactor = 3119;
  bool has_angularcurbroadareafactor() const;
  private:
  bool _internal_has_angularcurbroadareafactor() const;
  public:
  void clear_angularcurbroadareafactor();
  float angularcurbroadareafactor() const;
  void set_angularcurbroadareafactor(float value);
  private:
  float _internal_angularcurbroadareafactor() const;
  void _internal_set_angularcurbroadareafactor(float value);
  public:

  // optional float cnnOrientationErrorCostFunctionFactor = 3120;
  bool has_cnnorientationerrorcostfunctionfactor() const;
  private:
  bool _internal_has_cnnorientationerrorcostfunctionfactor() const;
  public:
  void clear_cnnorientationerrorcostfunctionfactor();
  float cnnorientationerrorcostfunctionfactor() const;
  void set_cnnorientationerrorcostfunctionfactor(float value);
  private:
  float _internal_cnnorientationerrorcostfunctionfactor() const;
  void _internal_set_cnnorientationerrorcostfunctionfactor(float value);
  public:

  // optional float perpendicularSlotOpeningDeltaMaxPark_m = 3166;
  bool has_perpendicularslotopeningdeltamaxpark_m() const;
  private:
  bool _internal_has_perpendicularslotopeningdeltamaxpark_m() const;
  public:
  void clear_perpendicularslotopeningdeltamaxpark_m();
  float perpendicularslotopeningdeltamaxpark_m() const;
  void set_perpendicularslotopeningdeltamaxpark_m(float value);
  private:
  float _internal_perpendicularslotopeningdeltamaxpark_m() const;
  void _internal_set_perpendicularslotopeningdeltamaxpark_m(float value);
  public:

  // optional float frontMemParkGap_m = 3217;
  bool has_frontmemparkgap_m() const;
  private:
  bool _internal_has_frontmemparkgap_m() const;
  public:
  void clear_frontmemparkgap_m();
  float frontmemparkgap_m() const;
  void set_frontmemparkgap_m(float value);
  private:
  float _internal_frontmemparkgap_m() const;
  void _internal_set_frontmemparkgap_m(float value);
  public:

  // optional float ocSecZoneParSideToCurb_m = 3226;
  bool has_ocseczoneparsidetocurb_m() const;
  private:
  bool _internal_has_ocseczoneparsidetocurb_m() const;
  public:
  void clear_ocseczoneparsidetocurb_m();
  float ocseczoneparsidetocurb_m() const;
  void set_ocseczoneparsidetocurb_m(float value);
  private:
  float _internal_ocseczoneparsidetocurb_m() const;
  void _internal_set_ocseczoneparsidetocurb_m(float value);
  public:

  // optional float lineOpeningDelimiterMaxRoadProtrusion_m = 3234;
  bool has_lineopeningdelimitermaxroadprotrusion_m() const;
  private:
  bool _internal_has_lineopeningdelimitermaxroadprotrusion_m() const;
  public:
  void clear_lineopeningdelimitermaxroadprotrusion_m();
  float lineopeningdelimitermaxroadprotrusion_m() const;
  void set_lineopeningdelimitermaxroadprotrusion_m(float value);
  private:
  float _internal_lineopeningdelimitermaxroadprotrusion_m() const;
  void _internal_set_lineopeningdelimitermaxroadprotrusion_m(float value);
  public:

  // optional float ocSecZonePerpSideToCurb_m = 3240;
  bool has_ocseczoneperpsidetocurb_m() const;
  private:
  bool _internal_has_ocseczoneperpsidetocurb_m() const;
  public:
  void clear_ocseczoneperpsidetocurb_m();
  float ocseczoneperpsidetocurb_m() const;
  void set_ocseczoneperpsidetocurb_m(float value);
  private:
  float _internal_ocseczoneperpsidetocurb_m() const;
  void _internal_set_ocseczoneperpsidetocurb_m(float value);
  public:

  // optional float increaseOverhangLowObject_m = 3268;
  bool has_increaseoverhanglowobject_m() const;
  private:
  bool _internal_has_increaseoverhanglowobject_m() const;
  public:
  void clear_increaseoverhanglowobject_m();
  float increaseoverhanglowobject_m() const;
  void set_increaseoverhanglowobject_m(float value);
  private:
  float _internal_increaseoverhanglowobject_m() const;
  void _internal_set_increaseoverhanglowobject_m(float value);
  public:

  // optional float vlMinVirtualLineLengthCurb_m = 3337;
  bool has_vlminvirtuallinelengthcurb_m() const;
  private:
  bool _internal_has_vlminvirtuallinelengthcurb_m() const;
  public:
  void clear_vlminvirtuallinelengthcurb_m();
  float vlminvirtuallinelengthcurb_m() const;
  void set_vlminvirtuallinelengthcurb_m(float value);
  private:
  float _internal_vlminvirtuallinelengthcurb_m() const;
  void _internal_set_vlminvirtuallinelengthcurb_m(float value);
  public:

  // optional float perpendicularSlotLengthDeltaMax_m = 3338;
  bool has_perpendicularslotlengthdeltamax_m() const;
  private:
  bool _internal_has_perpendicularslotlengthdeltamax_m() const;
  public:
  void clear_perpendicularslotlengthdeltamax_m();
  float perpendicularslotlengthdeltamax_m() const;
  void set_perpendicularslotlengthdeltamax_m(float value);
  private:
  float _internal_perpendicularslotlengthdeltamax_m() const;
  void _internal_set_perpendicularslotlengthdeltamax_m(float value);
  public:

  // optional float ocPrimZonePerpSideOpening_m = 3357;
  bool has_ocprimzoneperpsideopening_m() const;
  private:
  bool _internal_has_ocprimzoneperpsideopening_m() const;
  public:
  void clear_ocprimzoneperpsideopening_m();
  float ocprimzoneperpsideopening_m() const;
  void set_ocprimzoneperpsideopening_m(float value);
  private:
  float _internal_ocprimzoneperpsideopening_m() const;
  void _internal_set_ocprimzoneperpsideopening_m(float value);
  public:

  // optional float perpendicularSlotDepthDeltaMinPark_m = 3373;
  bool has_perpendicularslotdepthdeltaminpark_m() const;
  private:
  bool _internal_has_perpendicularslotdepthdeltaminpark_m() const;
  public:
  void clear_perpendicularslotdepthdeltaminpark_m();
  float perpendicularslotdepthdeltaminpark_m() const;
  void set_perpendicularslotdepthdeltaminpark_m(float value);
  private:
  float _internal_perpendicularslotdepthdeltaminpark_m() const;
  void _internal_set_perpendicularslotdepthdeltaminpark_m(float value);
  public:

  // optional float ocPrimZoneAngCurbIntoSlot_m = 3433;
  bool has_ocprimzoneangcurbintoslot_m() const;
  private:
  bool _internal_has_ocprimzoneangcurbintoslot_m() const;
  public:
  void clear_ocprimzoneangcurbintoslot_m();
  float ocprimzoneangcurbintoslot_m() const;
  void set_ocprimzoneangcurbintoslot_m(float value);
  private:
  float _internal_ocprimzoneangcurbintoslot_m() const;
  void _internal_set_ocprimzoneangcurbintoslot_m(float value);
  public:

  // optional float lcCurbOnlySpatialDiff_m = 3440;
  bool has_lccurbonlyspatialdiff_m() const;
  private:
  bool _internal_has_lccurbonlyspatialdiff_m() const;
  public:
  void clear_lccurbonlyspatialdiff_m();
  float lccurbonlyspatialdiff_m() const;
  void set_lccurbonlyspatialdiff_m(float value);
  private:
  float _internal_lccurbonlyspatialdiff_m() const;
  void _internal_set_lccurbonlyspatialdiff_m(float value);
  public:

  // optional float angularSlotMaxDepthExtension_m = 3468;
  bool has_angularslotmaxdepthextension_m() const;
  private:
  bool _internal_has_angularslotmaxdepthextension_m() const;
  public:
  void clear_angularslotmaxdepthextension_m();
  float angularslotmaxdepthextension_m() const;
  void set_angularslotmaxdepthextension_m(float value);
  private:
  float _internal_angularslotmaxdepthextension_m() const;
  void _internal_set_angularslotmaxdepthextension_m(float value);
  public:

  // optional float inflationSafetyDistanceParkOut_m = 3473;
  bool has_inflationsafetydistanceparkout_m() const;
  private:
  bool _internal_has_inflationsafetydistanceparkout_m() const;
  public:
  void clear_inflationsafetydistanceparkout_m();
  float inflationsafetydistanceparkout_m() const;
  void set_inflationsafetydistanceparkout_m(float value);
  private:
  float _internal_inflationsafetydistanceparkout_m() const;
  void _internal_set_inflationsafetydistanceparkout_m(float value);
  public:

  // optional float ocSecZoneAngSideToSide_m = 3488;
  bool has_ocseczoneangsidetoside_m() const;
  private:
  bool _internal_has_ocseczoneangsidetoside_m() const;
  public:
  void clear_ocseczoneangsidetoside_m();
  float ocseczoneangsidetoside_m() const;
  void set_ocseczoneangsidetoside_m(float value);
  private:
  float _internal_ocseczoneangsidetoside_m() const;
  void _internal_set_ocseczoneangsidetoside_m(float value);
  public:

  // optional float parallelSlotLineTooLongPenalty = 3503;
  bool has_parallelslotlinetoolongpenalty() const;
  private:
  bool _internal_has_parallelslotlinetoolongpenalty() const;
  public:
  void clear_parallelslotlinetoolongpenalty();
  float parallelslotlinetoolongpenalty() const;
  void set_parallelslotlinetoolongpenalty(float value);
  private:
  float _internal_parallelslotlinetoolongpenalty() const;
  void _internal_set_parallelslotlinetoolongpenalty(float value);
  public:

  // optional float angularParkingDetectionWindowAbsMin_m = 3522;
  bool has_angularparkingdetectionwindowabsmin_m() const;
  private:
  bool _internal_has_angularparkingdetectionwindowabsmin_m() const;
  public:
  void clear_angularparkingdetectionwindowabsmin_m();
  float angularparkingdetectionwindowabsmin_m() const;
  void set_angularparkingdetectionwindowabsmin_m(float value);
  private:
  float _internal_angularparkingdetectionwindowabsmin_m() const;
  void _internal_set_angularparkingdetectionwindowabsmin_m(float value);
  public:

  // optional float parallelSlotLengthDeltaMin_m = 3571;
  bool has_parallelslotlengthdeltamin_m() const;
  private:
  bool _internal_has_parallelslotlengthdeltamin_m() const;
  public:
  void clear_parallelslotlengthdeltamin_m();
  float parallelslotlengthdeltamin_m() const;
  void set_parallelslotlengthdeltamin_m(float value);
  private:
  float _internal_parallelslotlengthdeltamin_m() const;
  void _internal_set_parallelslotlengthdeltamin_m(float value);
  public:

  // optional float shrinkPenaltyForShiftBelowMin = 3594;
  bool has_shrinkpenaltyforshiftbelowmin() const;
  private:
  bool _internal_has_shrinkpenaltyforshiftbelowmin() const;
  public:
  void clear_shrinkpenaltyforshiftbelowmin();
  float shrinkpenaltyforshiftbelowmin() const;
  void set_shrinkpenaltyforshiftbelowmin(float value);
  private:
  float _internal_shrinkpenaltyforshiftbelowmin() const;
  void _internal_set_shrinkpenaltyforshiftbelowmin(float value);
  public:

  // optional float sideAlignmentROIWidth_m = 3637;
  bool has_sidealignmentroiwidth_m() const;
  private:
  bool _internal_has_sidealignmentroiwidth_m() const;
  public:
  void clear_sidealignmentroiwidth_m();
  float sidealignmentroiwidth_m() const;
  void set_sidealignmentroiwidth_m(float value);
  private:
  float _internal_sidealignmentroiwidth_m() const;
  void _internal_set_sidealignmentroiwidth_m(float value);
  public:

  // optional float parallelSlotOpeningDeltaMinPark_m = 3760;
  bool has_parallelslotopeningdeltaminpark_m() const;
  private:
  bool _internal_has_parallelslotopeningdeltaminpark_m() const;
  public:
  void clear_parallelslotopeningdeltaminpark_m();
  float parallelslotopeningdeltaminpark_m() const;
  void set_parallelslotopeningdeltaminpark_m(float value);
  private:
  float _internal_parallelslotopeningdeltaminpark_m() const;
  void _internal_set_parallelslotopeningdeltaminpark_m(float value);
  public:

  // optional float ocPrimZoneAngSideOpening_m = 3788;
  bool has_ocprimzoneangsideopening_m() const;
  private:
  bool _internal_has_ocprimzoneangsideopening_m() const;
  public:
  void clear_ocprimzoneangsideopening_m();
  float ocprimzoneangsideopening_m() const;
  void set_ocprimzoneangsideopening_m(float value);
  private:
  float _internal_ocprimzoneangsideopening_m() const;
  void _internal_set_ocprimzoneangsideopening_m(float value);
  public:

  // optional float osdSideRoiXFront_m = 3796;
  bool has_osdsideroixfront_m() const;
  private:
  bool _internal_has_osdsideroixfront_m() const;
  public:
  void clear_osdsideroixfront_m();
  float osdsideroixfront_m() const;
  void set_osdsideroixfront_m(float value);
  private:
  float _internal_osdsideroixfront_m() const;
  void _internal_set_osdsideroixfront_m(float value);
  public:

  // optional float ocSecZoneAngSideToRoad_m = 3824;
  bool has_ocseczoneangsidetoroad_m() const;
  private:
  bool _internal_has_ocseczoneangsidetoroad_m() const;
  public:
  void clear_ocseczoneangsidetoroad_m();
  float ocseczoneangsidetoroad_m() const;
  void set_ocseczoneangsidetoroad_m(float value);
  private:
  float _internal_ocseczoneangsidetoroad_m() const;
  void _internal_set_ocseczoneangsidetoroad_m(float value);
  public:

  // optional float cnnSlotRoadAlignmentLimitPar_m = 3835;
  bool has_cnnslotroadalignmentlimitpar_m() const;
  private:
  bool _internal_has_cnnslotroadalignmentlimitpar_m() const;
  public:
  void clear_cnnslotroadalignmentlimitpar_m();
  float cnnslotroadalignmentlimitpar_m() const;
  void set_cnnslotroadalignmentlimitpar_m(float value);
  private:
  float _internal_cnnslotroadalignmentlimitpar_m() const;
  void _internal_set_cnnslotroadalignmentlimitpar_m(float value);
  public:

  // optional float preferShiftToTopRoiYBorderOffset_m = 3844;
  bool has_prefershifttotoproiyborderoffset_m() const;
  private:
  bool _internal_has_prefershifttotoproiyborderoffset_m() const;
  public:
  void clear_prefershifttotoproiyborderoffset_m();
  float prefershifttotoproiyborderoffset_m() const;
  void set_prefershifttotoproiyborderoffset_m(float value);
  private:
  float _internal_prefershifttotoproiyborderoffset_m() const;
  void _internal_set_prefershifttotoproiyborderoffset_m(float value);
  public:

  // optional float delZoneRoadMaxRelToVehLengthNonPar_nu = 3847;
  bool has_delzoneroadmaxreltovehlengthnonpar_nu() const;
  private:
  bool _internal_has_delzoneroadmaxreltovehlengthnonpar_nu() const;
  public:
  void clear_delzoneroadmaxreltovehlengthnonpar_nu();
  float delzoneroadmaxreltovehlengthnonpar_nu() const;
  void set_delzoneroadmaxreltovehlengthnonpar_nu(float value);
  private:
  float _internal_delzoneroadmaxreltovehlengthnonpar_nu() const;
  void _internal_set_delzoneroadmaxreltovehlengthnonpar_nu(float value);
  public:

  // optional float vlMaxAngleToParkingBoxEdge_rad = 3851;
  bool has_vlmaxangletoparkingboxedge_rad() const;
  private:
  bool _internal_has_vlmaxangletoparkingboxedge_rad() const;
  public:
  void clear_vlmaxangletoparkingboxedge_rad();
  float vlmaxangletoparkingboxedge_rad() const;
  void set_vlmaxangletoparkingboxedge_rad(float value);
  private:
  float _internal_vlmaxangletoparkingboxedge_rad() const;
  void _internal_set_vlmaxangletoparkingboxedge_rad(float value);
  public:

  // optional float insideObjectMaxProjectionLength_m = 3865;
  bool has_insideobjectmaxprojectionlength_m() const;
  private:
  bool _internal_has_insideobjectmaxprojectionlength_m() const;
  public:
  void clear_insideobjectmaxprojectionlength_m();
  float insideobjectmaxprojectionlength_m() const;
  void set_insideobjectmaxprojectionlength_m(float value);
  private:
  float _internal_insideobjectmaxprojectionlength_m() const;
  void _internal_set_insideobjectmaxprojectionlength_m(float value);
  public:

  // optional float parallelSlotWidthDeltaModel_m = 3876;
  bool has_parallelslotwidthdeltamodel_m() const;
  private:
  bool _internal_has_parallelslotwidthdeltamodel_m() const;
  public:
  void clear_parallelslotwidthdeltamodel_m();
  float parallelslotwidthdeltamodel_m() const;
  void set_parallelslotwidthdeltamodel_m(float value);
  private:
  float _internal_parallelslotwidthdeltamodel_m() const;
  void _internal_set_parallelslotwidthdeltamodel_m(float value);
  public:

  // optional float lcLineLengthCostFactor = 3908;
  bool has_lclinelengthcostfactor() const;
  private:
  bool _internal_has_lclinelengthcostfactor() const;
  public:
  void clear_lclinelengthcostfactor();
  float lclinelengthcostfactor() const;
  void set_lclinelengthcostfactor(float value);
  private:
  float _internal_lclinelengthcostfactor() const;
  void _internal_set_lclinelengthcostfactor(float value);
  public:

  // optional float garageParkingSlotLengthDeltaMax_m = 3929;
  bool has_garageparkingslotlengthdeltamax_m() const;
  private:
  bool _internal_has_garageparkingslotlengthdeltamax_m() const;
  public:
  void clear_garageparkingslotlengthdeltamax_m();
  float garageparkingslotlengthdeltamax_m() const;
  void set_garageparkingslotlengthdeltamax_m(float value);
  private:
  float _internal_garageparkingslotlengthdeltamax_m() const;
  void _internal_set_garageparkingslotlengthdeltamax_m(float value);
  public:

  // optional float memParkExtendSlot_m = 3954;
  bool has_memparkextendslot_m() const;
  private:
  bool _internal_has_memparkextendslot_m() const;
  public:
  void clear_memparkextendslot_m();
  float memparkextendslot_m() const;
  void set_memparkextendslot_m(float value);
  private:
  float _internal_memparkextendslot_m() const;
  void _internal_set_memparkextendslot_m(float value);
  public:

  // optional float vlMaxNextEdgeAngle_rad = 3965;
  bool has_vlmaxnextedgeangle_rad() const;
  private:
  bool _internal_has_vlmaxnextedgeangle_rad() const;
  public:
  void clear_vlmaxnextedgeangle_rad();
  float vlmaxnextedgeangle_rad() const;
  void set_vlmaxnextedgeangle_rad(float value);
  private:
  float _internal_vlmaxnextedgeangle_rad() const;
  void _internal_set_vlmaxnextedgeangle_rad(float value);
  public:

  // optional float cnnSlotBlowUpLimitParCurb_m = 3972;
  bool has_cnnslotblowuplimitparcurb_m() const;
  private:
  bool _internal_has_cnnslotblowuplimitparcurb_m() const;
  public:
  void clear_cnnslotblowuplimitparcurb_m();
  float cnnslotblowuplimitparcurb_m() const;
  void set_cnnslotblowuplimitparcurb_m(float value);
  private:
  float _internal_cnnslotblowuplimitparcurb_m() const;
  void _internal_set_cnnslotblowuplimitparcurb_m(float value);
  public:

  // optional float sideRoiXFront_m = 3982;
  bool has_sideroixfront_m() const;
  private:
  bool _internal_has_sideroixfront_m() const;
  public:
  void clear_sideroixfront_m();
  float sideroixfront_m() const;
  void set_sideroixfront_m(float value);
  private:
  float _internal_sideroixfront_m() const;
  void _internal_set_sideroixfront_m(float value);
  public:

  // optional float lcAngleCostFactor = 3988;
  bool has_lcanglecostfactor() const;
  private:
  bool _internal_has_lcanglecostfactor() const;
  public:
  void clear_lcanglecostfactor();
  float lcanglecostfactor() const;
  void set_lcanglecostfactor(float value);
  private:
  float _internal_lcanglecostfactor() const;
  void _internal_set_lcanglecostfactor(float value);
  public:

  // optional float typicalOrientationOfAngledSlot_rad = 4023;
  bool has_typicalorientationofangledslot_rad() const;
  private:
  bool _internal_has_typicalorientationofangledslot_rad() const;
  public:
  void clear_typicalorientationofangledslot_rad();
  float typicalorientationofangledslot_rad() const;
  void set_typicalorientationofangledslot_rad(float value);
  private:
  float _internal_typicalorientationofangledslot_rad() const;
  void _internal_set_typicalorientationofangledslot_rad(float value);
  public:

  // optional float inflationSafetyDistanceDefault_m = 4034;
  bool has_inflationsafetydistancedefault_m() const;
  private:
  bool _internal_has_inflationsafetydistancedefault_m() const;
  public:
  void clear_inflationsafetydistancedefault_m();
  float inflationsafetydistancedefault_m() const;
  void set_inflationsafetydistancedefault_m(float value);
  private:
  float _internal_inflationsafetydistancedefault_m() const;
  void _internal_set_inflationsafetydistancedefault_m(float value);
  public:

  // optional float cnnSlotsMinInvalidationOverlap_m = 4038;
  bool has_cnnslotsmininvalidationoverlap_m() const;
  private:
  bool _internal_has_cnnslotsmininvalidationoverlap_m() const;
  public:
  void clear_cnnslotsmininvalidationoverlap_m();
  float cnnslotsmininvalidationoverlap_m() const;
  void set_cnnslotsmininvalidationoverlap_m(float value);
  private:
  float _internal_cnnslotsmininvalidationoverlap_m() const;
  void _internal_set_cnnslotsmininvalidationoverlap_m(float value);
  public:

  // optional float sideAndCurbDelimiterRoiExtension_m = 4044;
  bool has_sideandcurbdelimiterroiextension_m() const;
  private:
  bool _internal_has_sideandcurbdelimiterroiextension_m() const;
  public:
  void clear_sideandcurbdelimiterroiextension_m();
  float sideandcurbdelimiterroiextension_m() const;
  void set_sideandcurbdelimiterroiextension_m(float value);
  private:
  float _internal_sideandcurbdelimiterroiextension_m() const;
  void _internal_set_sideandcurbdelimiterroiextension_m(float value);
  public:

  // optional bool vlUseMaxAngleToParkingBoxEdge = 522962;
  bool has_vlusemaxangletoparkingboxedge() const;
  private:
  bool _internal_has_vlusemaxangletoparkingboxedge() const;
  public:
  void clear_vlusemaxangletoparkingboxedge();
  bool vlusemaxangletoparkingboxedge() const;
  void set_vlusemaxangletoparkingboxedge(bool value);
  private:
  bool _internal_vlusemaxangletoparkingboxedge() const;
  void _internal_set_vlusemaxangletoparkingboxedge(bool value);
  public:

  // optional bool slotExpansion = 3436;
  bool has_slotexpansion() const;
  private:
  bool _internal_has_slotexpansion() const;
  public:
  void clear_slotexpansion();
  bool slotexpansion() const;
  void set_slotexpansion(bool value);
  private:
  bool _internal_slotexpansion() const;
  void _internal_set_slotexpansion(bool value);
  public:

  // optional bool slotExpansionOnLines = 3304;
  bool has_slotexpansiononlines() const;
  private:
  bool _internal_has_slotexpansiononlines() const;
  public:
  void clear_slotexpansiononlines();
  bool slotexpansiononlines() const;
  void set_slotexpansiononlines(bool value);
  private:
  bool _internal_slotexpansiononlines() const;
  void _internal_set_slotexpansiononlines(bool value);
  public:

  // optional bool doObjectInflation = 477;
  bool has_doobjectinflation() const;
  private:
  bool _internal_has_doobjectinflation() const;
  public:
  void clear_doobjectinflation();
  bool doobjectinflation() const;
  void set_doobjectinflation(bool value);
  private:
  bool _internal_doobjectinflation() const;
  void _internal_set_doobjectinflation(bool value);
  public:

  // optional float ocSecZoneParSideToRoad_m = 1493409;
  bool has_ocseczoneparsidetoroad_m() const;
  private:
  bool _internal_has_ocseczoneparsidetoroad_m() const;
  public:
  void clear_ocseczoneparsidetoroad_m();
  float ocseczoneparsidetoroad_m() const;
  void set_ocseczoneparsidetoroad_m(float value);
  private:
  float _internal_ocseczoneparsidetoroad_m() const;
  void _internal_set_ocseczoneparsidetoroad_m(float value);
  public:

  // optional float maxDrivenRotationParallel_rad = 1962442;
  bool has_maxdrivenrotationparallel_rad() const;
  private:
  bool _internal_has_maxdrivenrotationparallel_rad() const;
  public:
  void clear_maxdrivenrotationparallel_rad();
  float maxdrivenrotationparallel_rad() const;
  void set_maxdrivenrotationparallel_rad(float value);
  private:
  float _internal_maxdrivenrotationparallel_rad() const;
  void _internal_set_maxdrivenrotationparallel_rad(float value);
  public:

  // optional float developerGenericFloat4 = 4286347;
  bool has_developergenericfloat4() const;
  private:
  bool _internal_has_developergenericfloat4() const;
  public:
  void clear_developergenericfloat4();
  float developergenericfloat4() const;
  void set_developergenericfloat4(float value);
  private:
  float _internal_developergenericfloat4() const;
  void _internal_set_developergenericfloat4(float value);
  public:

  // optional bool useAreaCriteria = 14368221;
  bool has_useareacriteria() const;
  private:
  bool _internal_has_useareacriteria() const;
  public:
  void clear_useareacriteria();
  bool useareacriteria() const;
  void set_useareacriteria(bool value);
  private:
  bool _internal_useareacriteria() const;
  void _internal_set_useareacriteria(bool value);
  public:

  // optional bool useLinearOverlapDropOff = 1707;
  bool has_uselinearoverlapdropoff() const;
  private:
  bool _internal_has_uselinearoverlapdropoff() const;
  public:
  void clear_uselinearoverlapdropoff();
  bool uselinearoverlapdropoff() const;
  void set_uselinearoverlapdropoff(bool value);
  private:
  bool _internal_uselinearoverlapdropoff() const;
  void _internal_set_uselinearoverlapdropoff(bool value);
  public:

  // optional bool teCalculateRoadSideExpansion = 19;
  bool has_tecalculateroadsideexpansion() const;
  private:
  bool _internal_has_tecalculateroadsideexpansion() const;
  public:
  void clear_tecalculateroadsideexpansion();
  bool tecalculateroadsideexpansion() const;
  void set_tecalculateroadsideexpansion(bool value);
  private:
  bool _internal_tecalculateroadsideexpansion() const;
  void _internal_set_tecalculateroadsideexpansion(bool value);
  public:

  // optional bool delZonesUseHighComplexityGetScore = 16563677;
  bool has_delzonesusehighcomplexitygetscore() const;
  private:
  bool _internal_has_delzonesusehighcomplexitygetscore() const;
  public:
  void clear_delzonesusehighcomplexitygetscore();
  bool delzonesusehighcomplexitygetscore() const;
  void set_delzonesusehighcomplexitygetscore(bool value);
  private:
  bool _internal_delzonesusehighcomplexitygetscore() const;
  void _internal_set_delzonesusehighcomplexitygetscore(bool value);
  public:

  // optional float ocSecZoneAngSideToCurb_m = 8701776;
  bool has_ocseczoneangsidetocurb_m() const;
  private:
  bool _internal_has_ocseczoneangsidetocurb_m() const;
  public:
  void clear_ocseczoneangsidetocurb_m();
  float ocseczoneangsidetocurb_m() const;
  void set_ocseczoneangsidetocurb_m(float value);
  private:
  float _internal_ocseczoneangsidetocurb_m() const;
  void _internal_set_ocseczoneangsidetocurb_m(float value);
  public:

  // optional float slotExpMaxAngleDiff_rad = 11519704;
  bool has_slotexpmaxanglediff_rad() const;
  private:
  bool _internal_has_slotexpmaxanglediff_rad() const;
  public:
  void clear_slotexpmaxanglediff_rad();
  float slotexpmaxanglediff_rad() const;
  void set_slotexpmaxanglediff_rad(float value);
  private:
  float _internal_slotexpmaxanglediff_rad() const;
  void _internal_set_slotexpmaxanglediff_rad(float value);
  public:

  // optional float maxMemParkRotAdj_rad = 12895248;
  bool has_maxmemparkrotadj_rad() const;
  private:
  bool _internal_has_maxmemparkrotadj_rad() const;
  public:
  void clear_maxmemparkrotadj_rad();
  float maxmemparkrotadj_rad() const;
  void set_maxmemparkrotadj_rad(float value);
  private:
  float _internal_maxmemparkrotadj_rad() const;
  void _internal_set_maxmemparkrotadj_rad(float value);
  public:

  // optional float curbObjectEvaluationRoiDepthDelta_m = 15294138;
  bool has_curbobjectevaluationroidepthdelta_m() const;
  private:
  bool _internal_has_curbobjectevaluationroidepthdelta_m() const;
  public:
  void clear_curbobjectevaluationroidepthdelta_m();
  float curbobjectevaluationroidepthdelta_m() const;
  void set_curbobjectevaluationroidepthdelta_m(float value);
  private:
  float _internal_curbobjectevaluationroidepthdelta_m() const;
  void _internal_set_curbobjectevaluationroidepthdelta_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.si.si_params.SiParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<10> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float slotpositioningroileftrightdelta_m_;
  float developergenericfloat5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dynobjminexistenceprob_perc_;
  float minbarrierpointoverhang_m_;
  float maxmemparklinearadj_m_;
  float sideroiystart_m_;
  float slotreplacementdeltaoutlierdistsqr_m2_;
  float developergenericfloat0_;
  float sidealignmentweight_mpr_;
  float cnnslotodslotenlargement_m_;
  float maxdrivenrotationperpendicular_rad_;
  float developergenericfloat1_;
  float ocseczoneparsidetoside_m_;
  float perpendicularslotlengthdeltamodel_m_;
  float developergenericfloat2_;
  float sideroiyend_m_;
  float delzoneleftrightmaxreltovehlengthpar_nu_;
  float ocseczoneperpsidetoside_m_;
  float developergenericfloat3_;
  float ocprimzoneparcurbintoslot_m_;
  float vlminvirtuallinelengthparside_m_;
  float maxallowedslotopeningoverlap_m_;
  float delzonecurbfactorpar_nu_;
  float slotdepthhorizontallinealignment_m_;
  float parallelslotlengthdeltamodel_m_;
  float vlminvirtuallinelengthroad_m_;
  float maxdrivenrotationangled_rad_;
  float penaltyforshrinktomindim_;
  float minslotopeningoffsetsideblowup_m_;
  float garageparkingslotlengthdeltamodel_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cnnslotsminscenarioconfidencetheshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 integrationmessagescomponent_nu_;
  float leftrightmemparkoffsetx_m_;
  float shrinkslotfornumericalinaccuracy_m_;
  float vlinsidelargerthanroadfactor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 integrationmessageslevel_nu_;
  float mincoveragepersidenonpar_m_;
  float sideroixback_m_;
  float perpendicularslotwidthdeltamax_m_;
  float slotscoringminparwinglength_m_;
  float parallelslotwidthdeltamin_m_;
  float cnnslotroadalignmentlimitnonpar_m_;
  float parallelslotdepthdeltamaxpark_m_;
  float minimumobstaclefittedlinelength_m_;
  float relevantobjectminboxside_m_;
  float maxallowedslotextensionoverlinestominopening_m_;
  float allowedwsposoutsideslot_m_;
  float collfunctionroilengthdelta_m_;
  float ocseczoneperpsidetoroad_m_;
  float garageparkingslotwidthdeltamax_m_;
  float collfunctionroiwidthdelta_m_;
  float delzoneroadmindistnonpar_m_;
  float cnnslotblowuplimitparside_m_;
  float outlierdistsqrparallelslot_m2_;
  float minrequireddelimiterprojectionratio_nu_;
  float outlierdistsqrnonparallelslot_m2_;
  float coveredintervalsroiwidth_m_;
  float cnnslotblowuplimitnonparcurb_m_;
  float delzoneleftrightfactornonpar_nu_;
  float ocangmaxdistancecurb_m_;
  float ocseczoneperpcurbtoroad_m_;
  float ocseczoneparcurbtoroad_m_;
  float ocseczoneangsidetoslot_m_;
  float delzonecurbmaxreltovehwidthpar_nu_;
  float ocprimzonecurbbelowslot_m_;
  float perpendicularslotopeningdeltaminpark_m_;
  float slotexpansionsideroiwidth_m_;
  float alloweddisttoexistingwswithoutwlsuppression_m_;
  float lineopeningdelimitertocurbprojectionfactor_;
  float cnnslotsminvalidationoverlap_m_;
  float delzoneleftrightfactorpar_nu_;
  float vlminvirtuallinelengthperpside_m_;
  float shrinkpenaltyforexceedinggivenlimits_;
  bool usecovmatrixinflation_;
  bool ncsplitusemostxstartidx_;
  bool ncspliton_;
  bool doobjectclustering_;
  float outsideinallowedoverlap_m_;
  float frontroixstart_m_;
  bool enableslotposedetectiononvirtuallines_;
  bool enableparallelslots_;
  bool enableperpendicularslots_;
  bool enablegarageparkingslots_;
  float vlinsidelargeenough_m_;
  float delzonecurbfactornonpar_nu_;
  float perpendicularslotdepthdeltamaxpark_m_;
  float insidezonedist_m_;
  float delzonecurbmaxreltovehlengthnonpar_nu_;
  float slotpositioningroiroaddelta_m_;
  float delzoneroadmaxreltovehwidthpar_nu_;
  float minbarrierdelimiterlength_m_;
  bool enableangularrightopeningtowardsfront_;
  bool enableangularleftopeningtowardsback_;
  bool enableangularleftopeningtowardsfront_;
  bool enableangularslotbruteforcedetection_;
  float horizontalmovementlimitofaslotslotcoords_m_;
  float ocperpmaxdistanceside_m_;
  float parallelslotopeningdeltamaxpark_m_;
  float alloweddisttoexistingwswithwlsuppression_m_;
  float thdelimiterdist_m_;
  bool preferwideslots_;
  bool offeroverlappingslots_;
  bool performoptimization_;
  bool enableslotshrinkingbelowusualsizeduringtrack_;
  float delzoneroadmindistpar_m_;
  float vlmaxallowedroadinsideanglediff_rad_;
  float maxroadsideextensionperpendicular_m_;
  float lineorientationroidelta_m_;
  bool allownakedslots_;
  bool requireatleastonedelimitingobjectfornakedslot_;
  bool enableangularparking_;
  bool enableangularrightopeningtowardsback_;
  float ocseczoneangcurbtocurb_m_;
  float prohibitionzonerelativelength_;
  float slotpenetrationdepth_m_;
  float perpendicularslotwidthdeltamin_m_;
  float parallelslotwidthdeltamax_m_;
  float frontroiyside_m_;
  bool enableinsideobjectpenetrationdepth_;
  bool vlprojectontoboxiffailed_;
  bool vldoroadinsideoptimization_;
  bool vluseroadfacingfornonparallelslots_;
  float sideandcurbdelimiterroibottomshift_m_;
  float ocprimzoneperpcurbintoslot_m_;
  float mindistgapcnnslotvstrackedslot_m_;
  bool allowslotextensionoverlinestominopening_;
  bool allowshrinkonlinesdespitesideobjects_;
  bool prefershifttotoponcurbobjects_;
  bool enableslotfallback_;
  float delzoneroadfactornonpar_nu_;
  float garageparkingslotwidthdeltamin_m_;
  float slotidentmaxdevfromstraightline_m_;
  float dynobjmaxvel_mps_;
  float weightlineorientation_;
  float cnnslotsvalidationmaxopeninganglediff_rad_;
  float slotscoringminnonparsidelength_m_;
  float ocseczoneperpcurbtoside_m_;
  float maxallowedvehcurboverlapforperp_m_;
  float ocseczoneparcurbtoside_m_;
  float maxdrivenrotationgarage_rad_;
  float sideshiftpenaltyforcurbobjects_;
  float cnnslotblowuplimitnonparside_m_;
  bool enlargedynobj_;
  bool doexactshiftvectortoegocollisioncheck_;
  bool enableslotlengthadaptiontoadjacentobjects_;
  bool enableslotlengthadaptiontoadjacentlines_;
  float garageparkingslotdoorarealength_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float weightcurborientation_;
  float ocprimzoneperpsidetoroad_m_;
  bool lcnocurblineoptimizationifnocurblc_;
  bool enableleftsidescanning_;
  bool enablerightsidescanning_;
  bool enablefrontscanning_;
  float ncsplitmaxskippablencareaperstep_m2_;
  bool invalidateoverlappingestablishedslots_;
  bool enableslotorientationonsidevls_;
  bool enableslotorientationonwingvls_;
  bool highsidedelimiterrequired_;
  float mindistancetoobject_m_;
  float ocperpendicularmaxdistancexforcurbsideclustering_m_;
  bool enableunspecifiedshift_;
  bool dolinecategorization_;
  bool docurbonlylinecategorization_;
  bool ignorelinesforsandwichslots_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minheightconfdeltastaticobj_;
  float rearmemparkgap_m_;
  float mindistancenoobject_m_;
  float osdsideroixback_m_;
  bool allownakedcnnslots_;
  bool cnnslotsallowsislotoverride_;
  bool preapplyroadsideextension_;
  float slotscoringmaxparlinelength_m_;
  float slotscoringmaxvlorlineanglediff_rad_;
  float perpendicularslotlengthdeltamin_m_;
  float dynobjmaxpreviewtime_s_;
  bool allownarrowslotsscan_;
  bool enablecnnwheelstoppers_;
  bool enablecnnwheelstopperstatobjverification_;
  bool wsstatobjignoreevaluation_;
  float minappliedroadsideextension_m_;
  float slotexpmaxtriangleexpansion_m_;
  bool cnnslotsenablesislotdetectionverification_;
  bool cnncompareslottypefpsuppression_;
  bool cnnslotsperpendicularvalidatesangular_;
  bool cnnslotsenablecnnslotprototypes_;
  float smallslotopeningpenalty_;
  float perpendicularslotwidthdeltamodel_m_;
  float angularparkingdetectionwindowabsmax_m_;
  float ocseczoneangcurbtoroad_m_;
  float ocseczoneparsidetoslot_m_;
  float ocseczoneperpsidetoslot_m_;
  float parallelslotlengthdeltamax_m_;
  float ocprimzoneparsideopening_m_;
  float parallellinealloweddeviation_rad_;
  float ocparallelmaxdistancexforcurbsideclustering_m_;
  float safetymargindynobjenlargingcar_m_;
  float ocperpmaxdistancecurb_m_;
  float vlmaxtotalangle_rad_;
  float ocseczoneangcurbtoside_m_;
  bool isstaticobjectinputccworiented_;
  bool uselinemarkings_;
  bool treatunknowncurbsideobjectsasbodytraversable_;
  bool enableslotidentfromtrajectory_;
  float shrinkpenaltyforclassifyingobjectasdynamic_;
  float slotedgepullsearchdistfront_m_;
  float lccurbonlyanglediff_rad_;
  float delzoneroadfactorpar_nu_;
  float lclinedistcostfactor_;
  float maxroadsideextensionangular_m_;
  float vlminlengthstartdirectionsq_m_;
  float maxroadsideextensionparallel_m_;
  float wingalignmentweight_mpr_;
  float garageparkingslotlengthdeltamin_m_;
  float slotidentmaxyawdevparallel_rad_;
  bool enablesecondsidedelimiteronlyscenario_;
  bool enablefirstsidedelimiteronlyscenario_;
  bool prefersecondsideosd_;
  bool requiredcurbobjectforonesidedelimitingslots_;
  float leftrightmemparkgapy_m_;
  float mincurbobjlengthforonesidedel_m_;
  float ocseczoneperpcurbtocurb_m_;
  float ocseczoneparcurbtocurb_m_;
  float ocprimzoneparsidetoroad_m_;
  float safetymargindynobjenlargingped_m_;
  float barrierdelimiterwidth_m_;
  float parallelslotdepthdeltaminpark_m_;
  float sensingrange_m_;
  float frontroixend_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slotexpframecounterstable_nu_;
  float slotexpmintriangleexpansion_rad_;
  float sideallowedoverlap_m_;
  float delzoneleftrightmaxreltovehwidthnonpar_nu_;
  float angularcurbroadareafactor_;
  float cnnorientationerrorcostfunctionfactor_;
  float perpendicularslotopeningdeltamaxpark_m_;
  float frontmemparkgap_m_;
  float ocseczoneparsidetocurb_m_;
  float lineopeningdelimitermaxroadprotrusion_m_;
  float ocseczoneperpsidetocurb_m_;
  float increaseoverhanglowobject_m_;
  float vlminvirtuallinelengthcurb_m_;
  float perpendicularslotlengthdeltamax_m_;
  float ocprimzoneperpsideopening_m_;
  float perpendicularslotdepthdeltaminpark_m_;
  float ocprimzoneangcurbintoslot_m_;
  float lccurbonlyspatialdiff_m_;
  float angularslotmaxdepthextension_m_;
  float inflationsafetydistanceparkout_m_;
  float ocseczoneangsidetoside_m_;
  float parallelslotlinetoolongpenalty_;
  float angularparkingdetectionwindowabsmin_m_;
  float parallelslotlengthdeltamin_m_;
  float shrinkpenaltyforshiftbelowmin_;
  float sidealignmentroiwidth_m_;
  float parallelslotopeningdeltaminpark_m_;
  float ocprimzoneangsideopening_m_;
  float osdsideroixfront_m_;
  float ocseczoneangsidetoroad_m_;
  float cnnslotroadalignmentlimitpar_m_;
  float prefershifttotoproiyborderoffset_m_;
  float delzoneroadmaxreltovehlengthnonpar_nu_;
  float vlmaxangletoparkingboxedge_rad_;
  float insideobjectmaxprojectionlength_m_;
  float parallelslotwidthdeltamodel_m_;
  float lclinelengthcostfactor_;
  float garageparkingslotlengthdeltamax_m_;
  float memparkextendslot_m_;
  float vlmaxnextedgeangle_rad_;
  float cnnslotblowuplimitparcurb_m_;
  float sideroixfront_m_;
  float lcanglecostfactor_;
  float typicalorientationofangledslot_rad_;
  float inflationsafetydistancedefault_m_;
  float cnnslotsmininvalidationoverlap_m_;
  float sideandcurbdelimiterroiextension_m_;
  bool vlusemaxangletoparkingboxedge_;
  bool slotexpansion_;
  bool slotexpansiononlines_;
  bool doobjectinflation_;
  float ocseczoneparsidetoroad_m_;
  float maxdrivenrotationparallel_rad_;
  float developergenericfloat4_;
  bool useareacriteria_;
  bool uselinearoverlapdropoff_;
  bool tecalculateroadsideexpansion_;
  bool delzonesusehighcomplexitygetscore_;
  float ocseczoneangsidetocurb_m_;
  float slotexpmaxanglediff_rad_;
  float maxmemparkrotadj_rad_;
  float curbobjectevaluationroidepthdelta_m_;
  friend struct ::TableStruct_si_2fsi_5fparams_2eproto;
};
// -------------------------------------------------------------------

class SiParams_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.si.si_params.SiParams_array_port) */ {
 public:
  SiParams_array_port();
  virtual ~SiParams_array_port();

  SiParams_array_port(const SiParams_array_port& from);
  SiParams_array_port(SiParams_array_port&& from) noexcept
    : SiParams_array_port() {
    *this = ::std::move(from);
  }

  inline SiParams_array_port& operator=(const SiParams_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiParams_array_port& operator=(SiParams_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SiParams_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiParams_array_port* internal_default_instance() {
    return reinterpret_cast<const SiParams_array_port*>(
               &_SiParams_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SiParams_array_port& a, SiParams_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(SiParams_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiParams_array_port* New() const final {
    return CreateMaybeMessage<SiParams_array_port>(nullptr);
  }

  SiParams_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiParams_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SiParams_array_port& from);
  void MergeFrom(const SiParams_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiParams_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.si.si_params.SiParams_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_si_2fsi_5fparams_2eproto);
    return ::descriptor_table_si_2fsi_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4025,
  };
  // repeated .pb.si.si_params.SiParams data = 4025;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::si::si_params::SiParams* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::si_params::SiParams >*
      mutable_data();
  private:
  const ::pb::si::si_params::SiParams& _internal_data(int index) const;
  ::pb::si::si_params::SiParams* _internal_add_data();
  public:
  const ::pb::si::si_params::SiParams& data(int index) const;
  ::pb::si::si_params::SiParams* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::si_params::SiParams >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.si.si_params.SiParams_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::si_params::SiParams > data_;
  friend struct ::TableStruct_si_2fsi_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiParams

// optional uint32 uiVersionNumber = 2124;
inline bool SiParams::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[4] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void SiParams::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[4] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void SiParams::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[4] |= 0x00100000u;
  uiversionnumber_ = value;
}
inline void SiParams::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool SiParams::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool SiParams::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& SiParams::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& SiParams::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* SiParams::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.si.si_params.SiParams.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* SiParams::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* SiParams::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.si.si_params.SiParams.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void SiParams::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.si.si_params.SiParams.sSigHeader)
}

// optional bool isStaticObjectInputCCWOriented = 3131;
inline bool SiParams::_internal_has_isstaticobjectinputccworiented() const {
  bool value = (_has_bits_[6] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_isstaticobjectinputccworiented() const {
  return _internal_has_isstaticobjectinputccworiented();
}
inline void SiParams::clear_isstaticobjectinputccworiented() {
  isstaticobjectinputccworiented_ = false;
  _has_bits_[6] &= ~0x00000200u;
}
inline bool SiParams::_internal_isstaticobjectinputccworiented() const {
  return isstaticobjectinputccworiented_;
}
inline bool SiParams::isstaticobjectinputccworiented() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.isStaticObjectInputCCWOriented)
  return _internal_isstaticobjectinputccworiented();
}
inline void SiParams::_internal_set_isstaticobjectinputccworiented(bool value) {
  _has_bits_[6] |= 0x00000200u;
  isstaticobjectinputccworiented_ = value;
}
inline void SiParams::set_isstaticobjectinputccworiented(bool value) {
  _internal_set_isstaticobjectinputccworiented(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.isStaticObjectInputCCWOriented)
}

// optional float increaseOverhangLowObject_m = 3268;
inline bool SiParams::_internal_has_increaseoverhanglowobject_m() const {
  bool value = (_has_bits_[7] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_increaseoverhanglowobject_m() const {
  return _internal_has_increaseoverhanglowobject_m();
}
inline void SiParams::clear_increaseoverhanglowobject_m() {
  increaseoverhanglowobject_m_ = 0;
  _has_bits_[7] &= ~0x00020000u;
}
inline float SiParams::_internal_increaseoverhanglowobject_m() const {
  return increaseoverhanglowobject_m_;
}
inline float SiParams::increaseoverhanglowobject_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.increaseOverhangLowObject_m)
  return _internal_increaseoverhanglowobject_m();
}
inline void SiParams::_internal_set_increaseoverhanglowobject_m(float value) {
  _has_bits_[7] |= 0x00020000u;
  increaseoverhanglowobject_m_ = value;
}
inline void SiParams::set_increaseoverhanglowobject_m(float value) {
  _internal_set_increaseoverhanglowobject_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.increaseOverhangLowObject_m)
}

// optional float coveredIntervalsRoiWidth_m = 1124;
inline bool SiParams::_internal_has_coveredintervalsroiwidth_m() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_coveredintervalsroiwidth_m() const {
  return _internal_has_coveredintervalsroiwidth_m();
}
inline void SiParams::clear_coveredintervalsroiwidth_m() {
  coveredintervalsroiwidth_m_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline float SiParams::_internal_coveredintervalsroiwidth_m() const {
  return coveredintervalsroiwidth_m_;
}
inline float SiParams::coveredintervalsroiwidth_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.coveredIntervalsRoiWidth_m)
  return _internal_coveredintervalsroiwidth_m();
}
inline void SiParams::_internal_set_coveredintervalsroiwidth_m(float value) {
  _has_bits_[1] |= 0x02000000u;
  coveredintervalsroiwidth_m_ = value;
}
inline void SiParams::set_coveredintervalsroiwidth_m(float value) {
  _internal_set_coveredintervalsroiwidth_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.coveredIntervalsRoiWidth_m)
}

// optional bool useLineMarkings = 814;
inline bool SiParams::_internal_has_uselinemarkings() const {
  bool value = (_has_bits_[6] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_uselinemarkings() const {
  return _internal_has_uselinemarkings();
}
inline void SiParams::clear_uselinemarkings() {
  uselinemarkings_ = false;
  _has_bits_[6] &= ~0x00000400u;
}
inline bool SiParams::_internal_uselinemarkings() const {
  return uselinemarkings_;
}
inline bool SiParams::uselinemarkings() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.useLineMarkings)
  return _internal_uselinemarkings();
}
inline void SiParams::_internal_set_uselinemarkings(bool value) {
  _has_bits_[6] |= 0x00000400u;
  uselinemarkings_ = value;
}
inline void SiParams::set_uselinemarkings(bool value) {
  _internal_set_uselinemarkings(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.useLineMarkings)
}

// optional bool treatUnknownCurbsideObjectsAsBodyTraversable = 2916;
inline bool SiParams::_internal_has_treatunknowncurbsideobjectsasbodytraversable() const {
  bool value = (_has_bits_[6] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_treatunknowncurbsideobjectsasbodytraversable() const {
  return _internal_has_treatunknowncurbsideobjectsasbodytraversable();
}
inline void SiParams::clear_treatunknowncurbsideobjectsasbodytraversable() {
  treatunknowncurbsideobjectsasbodytraversable_ = false;
  _has_bits_[6] &= ~0x00000800u;
}
inline bool SiParams::_internal_treatunknowncurbsideobjectsasbodytraversable() const {
  return treatunknowncurbsideobjectsasbodytraversable_;
}
inline bool SiParams::treatunknowncurbsideobjectsasbodytraversable() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.treatUnknownCurbsideObjectsAsBodyTraversable)
  return _internal_treatunknowncurbsideobjectsasbodytraversable();
}
inline void SiParams::_internal_set_treatunknowncurbsideobjectsasbodytraversable(bool value) {
  _has_bits_[6] |= 0x00000800u;
  treatunknowncurbsideobjectsasbodytraversable_ = value;
}
inline void SiParams::set_treatunknowncurbsideobjectsasbodytraversable(bool value) {
  _internal_set_treatunknowncurbsideobjectsasbodytraversable(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.treatUnknownCurbsideObjectsAsBodyTraversable)
}

// optional bool enableSlotIdentFromTrajectory = 3922;
inline bool SiParams::_internal_has_enableslotidentfromtrajectory() const {
  bool value = (_has_bits_[6] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_enableslotidentfromtrajectory() const {
  return _internal_has_enableslotidentfromtrajectory();
}
inline void SiParams::clear_enableslotidentfromtrajectory() {
  enableslotidentfromtrajectory_ = false;
  _has_bits_[6] &= ~0x00001000u;
}
inline bool SiParams::_internal_enableslotidentfromtrajectory() const {
  return enableslotidentfromtrajectory_;
}
inline bool SiParams::enableslotidentfromtrajectory() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotIdentFromTrajectory)
  return _internal_enableslotidentfromtrajectory();
}
inline void SiParams::_internal_set_enableslotidentfromtrajectory(bool value) {
  _has_bits_[6] |= 0x00001000u;
  enableslotidentfromtrajectory_ = value;
}
inline void SiParams::set_enableslotidentfromtrajectory(bool value) {
  _internal_set_enableslotidentfromtrajectory(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotIdentFromTrajectory)
}

// optional float slotIdentMaxYawDevParallel_rad = 2911;
inline bool SiParams::_internal_has_slotidentmaxyawdevparallel_rad() const {
  bool value = (_has_bits_[6] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_slotidentmaxyawdevparallel_rad() const {
  return _internal_has_slotidentmaxyawdevparallel_rad();
}
inline void SiParams::clear_slotidentmaxyawdevparallel_rad() {
  slotidentmaxyawdevparallel_rad_ = 0;
  _has_bits_[6] &= ~0x00800000u;
}
inline float SiParams::_internal_slotidentmaxyawdevparallel_rad() const {
  return slotidentmaxyawdevparallel_rad_;
}
inline float SiParams::slotidentmaxyawdevparallel_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotIdentMaxYawDevParallel_rad)
  return _internal_slotidentmaxyawdevparallel_rad();
}
inline void SiParams::_internal_set_slotidentmaxyawdevparallel_rad(float value) {
  _has_bits_[6] |= 0x00800000u;
  slotidentmaxyawdevparallel_rad_ = value;
}
inline void SiParams::set_slotidentmaxyawdevparallel_rad(float value) {
  _internal_set_slotidentmaxyawdevparallel_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotIdentMaxYawDevParallel_rad)
}

// optional float slotIdentMaxDevFromStraightLine_m = 1973;
inline bool SiParams::_internal_has_slotidentmaxdevfromstraightline_m() const {
  bool value = (_has_bits_[4] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_slotidentmaxdevfromstraightline_m() const {
  return _internal_has_slotidentmaxdevfromstraightline_m();
}
inline void SiParams::clear_slotidentmaxdevfromstraightline_m() {
  slotidentmaxdevfromstraightline_m_ = 0;
  _has_bits_[4] &= ~0x00000010u;
}
inline float SiParams::_internal_slotidentmaxdevfromstraightline_m() const {
  return slotidentmaxdevfromstraightline_m_;
}
inline float SiParams::slotidentmaxdevfromstraightline_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotIdentMaxDevFromStraightLine_m)
  return _internal_slotidentmaxdevfromstraightline_m();
}
inline void SiParams::_internal_set_slotidentmaxdevfromstraightline_m(float value) {
  _has_bits_[4] |= 0x00000010u;
  slotidentmaxdevfromstraightline_m_ = value;
}
inline void SiParams::set_slotidentmaxdevfromstraightline_m(float value) {
  _internal_set_slotidentmaxdevfromstraightline_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotIdentMaxDevFromStraightLine_m)
}

// optional bool enableSecondSideDelimiterOnlyScenario = 2565;
inline bool SiParams::_internal_has_enablesecondsidedelimiteronlyscenario() const {
  bool value = (_has_bits_[6] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_enablesecondsidedelimiteronlyscenario() const {
  return _internal_has_enablesecondsidedelimiteronlyscenario();
}
inline void SiParams::clear_enablesecondsidedelimiteronlyscenario() {
  enablesecondsidedelimiteronlyscenario_ = false;
  _has_bits_[6] &= ~0x01000000u;
}
inline bool SiParams::_internal_enablesecondsidedelimiteronlyscenario() const {
  return enablesecondsidedelimiteronlyscenario_;
}
inline bool SiParams::enablesecondsidedelimiteronlyscenario() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSecondSideDelimiterOnlyScenario)
  return _internal_enablesecondsidedelimiteronlyscenario();
}
inline void SiParams::_internal_set_enablesecondsidedelimiteronlyscenario(bool value) {
  _has_bits_[6] |= 0x01000000u;
  enablesecondsidedelimiteronlyscenario_ = value;
}
inline void SiParams::set_enablesecondsidedelimiteronlyscenario(bool value) {
  _internal_set_enablesecondsidedelimiteronlyscenario(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSecondSideDelimiterOnlyScenario)
}

// optional bool enableFirstSideDelimiterOnlyScenario = 3069;
inline bool SiParams::_internal_has_enablefirstsidedelimiteronlyscenario() const {
  bool value = (_has_bits_[6] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_enablefirstsidedelimiteronlyscenario() const {
  return _internal_has_enablefirstsidedelimiteronlyscenario();
}
inline void SiParams::clear_enablefirstsidedelimiteronlyscenario() {
  enablefirstsidedelimiteronlyscenario_ = false;
  _has_bits_[6] &= ~0x02000000u;
}
inline bool SiParams::_internal_enablefirstsidedelimiteronlyscenario() const {
  return enablefirstsidedelimiteronlyscenario_;
}
inline bool SiParams::enablefirstsidedelimiteronlyscenario() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableFirstSideDelimiterOnlyScenario)
  return _internal_enablefirstsidedelimiteronlyscenario();
}
inline void SiParams::_internal_set_enablefirstsidedelimiteronlyscenario(bool value) {
  _has_bits_[6] |= 0x02000000u;
  enablefirstsidedelimiteronlyscenario_ = value;
}
inline void SiParams::set_enablefirstsidedelimiteronlyscenario(bool value) {
  _internal_set_enablefirstsidedelimiteronlyscenario(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableFirstSideDelimiterOnlyScenario)
}

// optional bool preferSecondSideOSD = 3007;
inline bool SiParams::_internal_has_prefersecondsideosd() const {
  bool value = (_has_bits_[6] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_prefersecondsideosd() const {
  return _internal_has_prefersecondsideosd();
}
inline void SiParams::clear_prefersecondsideosd() {
  prefersecondsideosd_ = false;
  _has_bits_[6] &= ~0x04000000u;
}
inline bool SiParams::_internal_prefersecondsideosd() const {
  return prefersecondsideosd_;
}
inline bool SiParams::prefersecondsideosd() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.preferSecondSideOSD)
  return _internal_prefersecondsideosd();
}
inline void SiParams::_internal_set_prefersecondsideosd(bool value) {
  _has_bits_[6] |= 0x04000000u;
  prefersecondsideosd_ = value;
}
inline void SiParams::set_prefersecondsideosd(bool value) {
  _internal_set_prefersecondsideosd(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.preferSecondSideOSD)
}

// optional float osdSideRoiXFront_m = 3796;
inline bool SiParams::_internal_has_osdsideroixfront_m() const {
  bool value = (_has_bits_[8] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_osdsideroixfront_m() const {
  return _internal_has_osdsideroixfront_m();
}
inline void SiParams::clear_osdsideroixfront_m() {
  osdsideroixfront_m_ = 0;
  _has_bits_[8] &= ~0x00000004u;
}
inline float SiParams::_internal_osdsideroixfront_m() const {
  return osdsideroixfront_m_;
}
inline float SiParams::osdsideroixfront_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.osdSideRoiXFront_m)
  return _internal_osdsideroixfront_m();
}
inline void SiParams::_internal_set_osdsideroixfront_m(float value) {
  _has_bits_[8] |= 0x00000004u;
  osdsideroixfront_m_ = value;
}
inline void SiParams::set_osdsideroixfront_m(float value) {
  _internal_set_osdsideroixfront_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.osdSideRoiXFront_m)
}

// optional float osdSideRoiXBack_m = 2258;
inline bool SiParams::_internal_has_osdsideroixback_m() const {
  bool value = (_has_bits_[5] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_osdsideroixback_m() const {
  return _internal_has_osdsideroixback_m();
}
inline void SiParams::clear_osdsideroixback_m() {
  osdsideroixback_m_ = 0;
  _has_bits_[5] &= ~0x00000200u;
}
inline float SiParams::_internal_osdsideroixback_m() const {
  return osdsideroixback_m_;
}
inline float SiParams::osdsideroixback_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.osdSideRoiXBack_m)
  return _internal_osdsideroixback_m();
}
inline void SiParams::_internal_set_osdsideroixback_m(float value) {
  _has_bits_[5] |= 0x00000200u;
  osdsideroixback_m_ = value;
}
inline void SiParams::set_osdsideroixback_m(float value) {
  _internal_set_osdsideroixback_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.osdSideRoiXBack_m)
}

// optional bool requiredCurbObjectForOneSideDelimitingSlots = 3005;
inline bool SiParams::_internal_has_requiredcurbobjectforonesidedelimitingslots() const {
  bool value = (_has_bits_[6] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_requiredcurbobjectforonesidedelimitingslots() const {
  return _internal_has_requiredcurbobjectforonesidedelimitingslots();
}
inline void SiParams::clear_requiredcurbobjectforonesidedelimitingslots() {
  requiredcurbobjectforonesidedelimitingslots_ = false;
  _has_bits_[6] &= ~0x08000000u;
}
inline bool SiParams::_internal_requiredcurbobjectforonesidedelimitingslots() const {
  return requiredcurbobjectforonesidedelimitingslots_;
}
inline bool SiParams::requiredcurbobjectforonesidedelimitingslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.requiredCurbObjectForOneSideDelimitingSlots)
  return _internal_requiredcurbobjectforonesidedelimitingslots();
}
inline void SiParams::_internal_set_requiredcurbobjectforonesidedelimitingslots(bool value) {
  _has_bits_[6] |= 0x08000000u;
  requiredcurbobjectforonesidedelimitingslots_ = value;
}
inline void SiParams::set_requiredcurbobjectforonesidedelimitingslots(bool value) {
  _internal_set_requiredcurbobjectforonesidedelimitingslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.requiredCurbObjectForOneSideDelimitingSlots)
}

// optional float horizontalMovementLimitOfASlotSlotCoords_m = 1573;
inline bool SiParams::_internal_has_horizontalmovementlimitofaslotslotcoords_m() const {
  bool value = (_has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_horizontalmovementlimitofaslotslotcoords_m() const {
  return _internal_has_horizontalmovementlimitofaslotslotcoords_m();
}
inline void SiParams::clear_horizontalmovementlimitofaslotslotcoords_m() {
  horizontalmovementlimitofaslotslotcoords_m_ = 0;
  _has_bits_[3] &= ~0x00000001u;
}
inline float SiParams::_internal_horizontalmovementlimitofaslotslotcoords_m() const {
  return horizontalmovementlimitofaslotslotcoords_m_;
}
inline float SiParams::horizontalmovementlimitofaslotslotcoords_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.horizontalMovementLimitOfASlotSlotCoords_m)
  return _internal_horizontalmovementlimitofaslotslotcoords_m();
}
inline void SiParams::_internal_set_horizontalmovementlimitofaslotslotcoords_m(float value) {
  _has_bits_[3] |= 0x00000001u;
  horizontalmovementlimitofaslotslotcoords_m_ = value;
}
inline void SiParams::set_horizontalmovementlimitofaslotslotcoords_m(float value) {
  _internal_set_horizontalmovementlimitofaslotslotcoords_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.horizontalMovementLimitOfASlotSlotCoords_m)
}

// optional float maxAllowedVehCurbOverlapForPerp_m = 2010;
inline bool SiParams::_internal_has_maxallowedvehcurboverlapforperp_m() const {
  bool value = (_has_bits_[4] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_maxallowedvehcurboverlapforperp_m() const {
  return _internal_has_maxallowedvehcurboverlapforperp_m();
}
inline void SiParams::clear_maxallowedvehcurboverlapforperp_m() {
  maxallowedvehcurboverlapforperp_m_ = 0;
  _has_bits_[4] &= ~0x00000400u;
}
inline float SiParams::_internal_maxallowedvehcurboverlapforperp_m() const {
  return maxallowedvehcurboverlapforperp_m_;
}
inline float SiParams::maxallowedvehcurboverlapforperp_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxAllowedVehCurbOverlapForPerp_m)
  return _internal_maxallowedvehcurboverlapforperp_m();
}
inline void SiParams::_internal_set_maxallowedvehcurboverlapforperp_m(float value) {
  _has_bits_[4] |= 0x00000400u;
  maxallowedvehcurboverlapforperp_m_ = value;
}
inline void SiParams::set_maxallowedvehcurboverlapforperp_m(float value) {
  _internal_set_maxallowedvehcurboverlapforperp_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxAllowedVehCurbOverlapForPerp_m)
}

// optional float minCurbObjLengthForOneSideDel_m = 2932;
inline bool SiParams::_internal_has_mincurbobjlengthforonesidedel_m() const {
  bool value = (_has_bits_[6] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_mincurbobjlengthforonesidedel_m() const {
  return _internal_has_mincurbobjlengthforonesidedel_m();
}
inline void SiParams::clear_mincurbobjlengthforonesidedel_m() {
  mincurbobjlengthforonesidedel_m_ = 0;
  _has_bits_[6] &= ~0x20000000u;
}
inline float SiParams::_internal_mincurbobjlengthforonesidedel_m() const {
  return mincurbobjlengthforonesidedel_m_;
}
inline float SiParams::mincurbobjlengthforonesidedel_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minCurbObjLengthForOneSideDel_m)
  return _internal_mincurbobjlengthforonesidedel_m();
}
inline void SiParams::_internal_set_mincurbobjlengthforonesidedel_m(float value) {
  _has_bits_[6] |= 0x20000000u;
  mincurbobjlengthforonesidedel_m_ = value;
}
inline void SiParams::set_mincurbobjlengthforonesidedel_m(float value) {
  _internal_set_mincurbobjlengthforonesidedel_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minCurbObjLengthForOneSideDel_m)
}

// optional bool allowNakedSlots = 953;
inline bool SiParams::_internal_has_allownakedslots() const {
  bool value = (_has_bits_[3] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_allownakedslots() const {
  return _internal_has_allownakedslots();
}
inline void SiParams::clear_allownakedslots() {
  allownakedslots_ = false;
  _has_bits_[3] &= ~0x00002000u;
}
inline bool SiParams::_internal_allownakedslots() const {
  return allownakedslots_;
}
inline bool SiParams::allownakedslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowNakedSlots)
  return _internal_allownakedslots();
}
inline void SiParams::_internal_set_allownakedslots(bool value) {
  _has_bits_[3] |= 0x00002000u;
  allownakedslots_ = value;
}
inline void SiParams::set_allownakedslots(bool value) {
  _internal_set_allownakedslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowNakedSlots)
}

// optional bool requireAtLeastOneDelimitingObjectForNakedSlot = 1927;
inline bool SiParams::_internal_has_requireatleastonedelimitingobjectfornakedslot() const {
  bool value = (_has_bits_[3] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_requireatleastonedelimitingobjectfornakedslot() const {
  return _internal_has_requireatleastonedelimitingobjectfornakedslot();
}
inline void SiParams::clear_requireatleastonedelimitingobjectfornakedslot() {
  requireatleastonedelimitingobjectfornakedslot_ = false;
  _has_bits_[3] &= ~0x00004000u;
}
inline bool SiParams::_internal_requireatleastonedelimitingobjectfornakedslot() const {
  return requireatleastonedelimitingobjectfornakedslot_;
}
inline bool SiParams::requireatleastonedelimitingobjectfornakedslot() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.requireAtLeastOneDelimitingObjectForNakedSlot)
  return _internal_requireatleastonedelimitingobjectfornakedslot();
}
inline void SiParams::_internal_set_requireatleastonedelimitingobjectfornakedslot(bool value) {
  _has_bits_[3] |= 0x00004000u;
  requireatleastonedelimitingobjectfornakedslot_ = value;
}
inline void SiParams::set_requireatleastonedelimitingobjectfornakedslot(bool value) {
  _internal_set_requireatleastonedelimitingobjectfornakedslot(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.requireAtLeastOneDelimitingObjectForNakedSlot)
}

// optional float maxRoadsideExtensionPerpendicular_m = 1711;
inline bool SiParams::_internal_has_maxroadsideextensionperpendicular_m() const {
  bool value = (_has_bits_[3] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_maxroadsideextensionperpendicular_m() const {
  return _internal_has_maxroadsideextensionperpendicular_m();
}
inline void SiParams::clear_maxroadsideextensionperpendicular_m() {
  maxroadsideextensionperpendicular_m_ = 0;
  _has_bits_[3] &= ~0x00000800u;
}
inline float SiParams::_internal_maxroadsideextensionperpendicular_m() const {
  return maxroadsideextensionperpendicular_m_;
}
inline float SiParams::maxroadsideextensionperpendicular_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxRoadsideExtensionPerpendicular_m)
  return _internal_maxroadsideextensionperpendicular_m();
}
inline void SiParams::_internal_set_maxroadsideextensionperpendicular_m(float value) {
  _has_bits_[3] |= 0x00000800u;
  maxroadsideextensionperpendicular_m_ = value;
}
inline void SiParams::set_maxroadsideextensionperpendicular_m(float value) {
  _internal_set_maxroadsideextensionperpendicular_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxRoadsideExtensionPerpendicular_m)
}

// optional float maxRoadsideExtensionParallel_m = 2888;
inline bool SiParams::_internal_has_maxroadsideextensionparallel_m() const {
  bool value = (_has_bits_[6] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_maxroadsideextensionparallel_m() const {
  return _internal_has_maxroadsideextensionparallel_m();
}
inline void SiParams::clear_maxroadsideextensionparallel_m() {
  maxroadsideextensionparallel_m_ = 0;
  _has_bits_[6] &= ~0x00100000u;
}
inline float SiParams::_internal_maxroadsideextensionparallel_m() const {
  return maxroadsideextensionparallel_m_;
}
inline float SiParams::maxroadsideextensionparallel_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxRoadsideExtensionParallel_m)
  return _internal_maxroadsideextensionparallel_m();
}
inline void SiParams::_internal_set_maxroadsideextensionparallel_m(float value) {
  _has_bits_[6] |= 0x00100000u;
  maxroadsideextensionparallel_m_ = value;
}
inline void SiParams::set_maxroadsideextensionparallel_m(float value) {
  _internal_set_maxroadsideextensionparallel_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxRoadsideExtensionParallel_m)
}

// optional float maxRoadsideExtensionAngular_m = 2854;
inline bool SiParams::_internal_has_maxroadsideextensionangular_m() const {
  bool value = (_has_bits_[6] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_maxroadsideextensionangular_m() const {
  return _internal_has_maxroadsideextensionangular_m();
}
inline void SiParams::clear_maxroadsideextensionangular_m() {
  maxroadsideextensionangular_m_ = 0;
  _has_bits_[6] &= ~0x00040000u;
}
inline float SiParams::_internal_maxroadsideextensionangular_m() const {
  return maxroadsideextensionangular_m_;
}
inline float SiParams::maxroadsideextensionangular_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxRoadsideExtensionAngular_m)
  return _internal_maxroadsideextensionangular_m();
}
inline void SiParams::_internal_set_maxroadsideextensionangular_m(float value) {
  _has_bits_[6] |= 0x00040000u;
  maxroadsideextensionangular_m_ = value;
}
inline void SiParams::set_maxroadsideextensionangular_m(float value) {
  _internal_set_maxroadsideextensionangular_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxRoadsideExtensionAngular_m)
}

// optional float minAppliedRoadsideExtension_m = 2410;
inline bool SiParams::_internal_has_minappliedroadsideextension_m() const {
  bool value = (_has_bits_[5] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_minappliedroadsideextension_m() const {
  return _internal_has_minappliedroadsideextension_m();
}
inline void SiParams::clear_minappliedroadsideextension_m() {
  minappliedroadsideextension_m_ = 0;
  _has_bits_[5] &= ~0x00200000u;
}
inline float SiParams::_internal_minappliedroadsideextension_m() const {
  return minappliedroadsideextension_m_;
}
inline float SiParams::minappliedroadsideextension_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minAppliedRoadsideExtension_m)
  return _internal_minappliedroadsideextension_m();
}
inline void SiParams::_internal_set_minappliedroadsideextension_m(float value) {
  _has_bits_[5] |= 0x00200000u;
  minappliedroadsideextension_m_ = value;
}
inline void SiParams::set_minappliedroadsideextension_m(float value) {
  _internal_set_minappliedroadsideextension_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minAppliedRoadsideExtension_m)
}

// optional float minDistanceToObject_m = 2195;
inline bool SiParams::_internal_has_mindistancetoobject_m() const {
  bool value = (_has_bits_[5] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_mindistancetoobject_m() const {
  return _internal_has_mindistancetoobject_m();
}
inline void SiParams::clear_mindistancetoobject_m() {
  mindistancetoobject_m_ = 0;
  _has_bits_[5] &= ~0x00000001u;
}
inline float SiParams::_internal_mindistancetoobject_m() const {
  return mindistancetoobject_m_;
}
inline float SiParams::mindistancetoobject_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minDistanceToObject_m)
  return _internal_mindistancetoobject_m();
}
inline void SiParams::_internal_set_mindistancetoobject_m(float value) {
  _has_bits_[5] |= 0x00000001u;
  mindistancetoobject_m_ = value;
}
inline void SiParams::set_mindistancetoobject_m(float value) {
  _internal_set_mindistancetoobject_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minDistanceToObject_m)
}

// optional float minDistanceNoObject_m = 2244;
inline bool SiParams::_internal_has_mindistancenoobject_m() const {
  bool value = (_has_bits_[5] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_mindistancenoobject_m() const {
  return _internal_has_mindistancenoobject_m();
}
inline void SiParams::clear_mindistancenoobject_m() {
  mindistancenoobject_m_ = 0;
  _has_bits_[5] &= ~0x00000100u;
}
inline float SiParams::_internal_mindistancenoobject_m() const {
  return mindistancenoobject_m_;
}
inline float SiParams::mindistancenoobject_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minDistanceNoObject_m)
  return _internal_mindistancenoobject_m();
}
inline void SiParams::_internal_set_mindistancenoobject_m(float value) {
  _has_bits_[5] |= 0x00000100u;
  mindistancenoobject_m_ = value;
}
inline void SiParams::set_mindistancenoobject_m(float value) {
  _internal_set_mindistancenoobject_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minDistanceNoObject_m)
}

// optional bool enableAngularParking = 186;
inline bool SiParams::_internal_has_enableangularparking() const {
  bool value = (_has_bits_[3] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_enableangularparking() const {
  return _internal_has_enableangularparking();
}
inline void SiParams::clear_enableangularparking() {
  enableangularparking_ = false;
  _has_bits_[3] &= ~0x00008000u;
}
inline bool SiParams::_internal_enableangularparking() const {
  return enableangularparking_;
}
inline bool SiParams::enableangularparking() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableAngularParking)
  return _internal_enableangularparking();
}
inline void SiParams::_internal_set_enableangularparking(bool value) {
  _has_bits_[3] |= 0x00008000u;
  enableangularparking_ = value;
}
inline void SiParams::set_enableangularparking(bool value) {
  _internal_set_enableangularparking(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableAngularParking)
}

// optional bool enableAngularRightOpeningTowardsBack = 3952;
inline bool SiParams::_internal_has_enableangularrightopeningtowardsback() const {
  bool value = (_has_bits_[3] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_enableangularrightopeningtowardsback() const {
  return _internal_has_enableangularrightopeningtowardsback();
}
inline void SiParams::clear_enableangularrightopeningtowardsback() {
  enableangularrightopeningtowardsback_ = false;
  _has_bits_[3] &= ~0x00010000u;
}
inline bool SiParams::_internal_enableangularrightopeningtowardsback() const {
  return enableangularrightopeningtowardsback_;
}
inline bool SiParams::enableangularrightopeningtowardsback() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableAngularRightOpeningTowardsBack)
  return _internal_enableangularrightopeningtowardsback();
}
inline void SiParams::_internal_set_enableangularrightopeningtowardsback(bool value) {
  _has_bits_[3] |= 0x00010000u;
  enableangularrightopeningtowardsback_ = value;
}
inline void SiParams::set_enableangularrightopeningtowardsback(bool value) {
  _internal_set_enableangularrightopeningtowardsback(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableAngularRightOpeningTowardsBack)
}

// optional bool enableAngularRightOpeningTowardsFront = 2559;
inline bool SiParams::_internal_has_enableangularrightopeningtowardsfront() const {
  bool value = (_has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_enableangularrightopeningtowardsfront() const {
  return _internal_has_enableangularrightopeningtowardsfront();
}
inline void SiParams::clear_enableangularrightopeningtowardsfront() {
  enableangularrightopeningtowardsfront_ = false;
  _has_bits_[2] &= ~0x10000000u;
}
inline bool SiParams::_internal_enableangularrightopeningtowardsfront() const {
  return enableangularrightopeningtowardsfront_;
}
inline bool SiParams::enableangularrightopeningtowardsfront() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableAngularRightOpeningTowardsFront)
  return _internal_enableangularrightopeningtowardsfront();
}
inline void SiParams::_internal_set_enableangularrightopeningtowardsfront(bool value) {
  _has_bits_[2] |= 0x10000000u;
  enableangularrightopeningtowardsfront_ = value;
}
inline void SiParams::set_enableangularrightopeningtowardsfront(bool value) {
  _internal_set_enableangularrightopeningtowardsfront(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableAngularRightOpeningTowardsFront)
}

// optional bool enableAngularLeftOpeningTowardsBack = 1303;
inline bool SiParams::_internal_has_enableangularleftopeningtowardsback() const {
  bool value = (_has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_enableangularleftopeningtowardsback() const {
  return _internal_has_enableangularleftopeningtowardsback();
}
inline void SiParams::clear_enableangularleftopeningtowardsback() {
  enableangularleftopeningtowardsback_ = false;
  _has_bits_[2] &= ~0x20000000u;
}
inline bool SiParams::_internal_enableangularleftopeningtowardsback() const {
  return enableangularleftopeningtowardsback_;
}
inline bool SiParams::enableangularleftopeningtowardsback() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableAngularLeftOpeningTowardsBack)
  return _internal_enableangularleftopeningtowardsback();
}
inline void SiParams::_internal_set_enableangularleftopeningtowardsback(bool value) {
  _has_bits_[2] |= 0x20000000u;
  enableangularleftopeningtowardsback_ = value;
}
inline void SiParams::set_enableangularleftopeningtowardsback(bool value) {
  _internal_set_enableangularleftopeningtowardsback(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableAngularLeftOpeningTowardsBack)
}

// optional bool enableAngularLeftOpeningTowardsFront = 290;
inline bool SiParams::_internal_has_enableangularleftopeningtowardsfront() const {
  bool value = (_has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_enableangularleftopeningtowardsfront() const {
  return _internal_has_enableangularleftopeningtowardsfront();
}
inline void SiParams::clear_enableangularleftopeningtowardsfront() {
  enableangularleftopeningtowardsfront_ = false;
  _has_bits_[2] &= ~0x40000000u;
}
inline bool SiParams::_internal_enableangularleftopeningtowardsfront() const {
  return enableangularleftopeningtowardsfront_;
}
inline bool SiParams::enableangularleftopeningtowardsfront() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableAngularLeftOpeningTowardsFront)
  return _internal_enableangularleftopeningtowardsfront();
}
inline void SiParams::_internal_set_enableangularleftopeningtowardsfront(bool value) {
  _has_bits_[2] |= 0x40000000u;
  enableangularleftopeningtowardsfront_ = value;
}
inline void SiParams::set_enableangularleftopeningtowardsfront(bool value) {
  _internal_set_enableangularleftopeningtowardsfront(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableAngularLeftOpeningTowardsFront)
}

// optional bool enableAngularSlotBruteForceDetection = 2126;
inline bool SiParams::_internal_has_enableangularslotbruteforcedetection() const {
  bool value = (_has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_enableangularslotbruteforcedetection() const {
  return _internal_has_enableangularslotbruteforcedetection();
}
inline void SiParams::clear_enableangularslotbruteforcedetection() {
  enableangularslotbruteforcedetection_ = false;
  _has_bits_[2] &= ~0x80000000u;
}
inline bool SiParams::_internal_enableangularslotbruteforcedetection() const {
  return enableangularslotbruteforcedetection_;
}
inline bool SiParams::enableangularslotbruteforcedetection() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableAngularSlotBruteForceDetection)
  return _internal_enableangularslotbruteforcedetection();
}
inline void SiParams::_internal_set_enableangularslotbruteforcedetection(bool value) {
  _has_bits_[2] |= 0x80000000u;
  enableangularslotbruteforcedetection_ = value;
}
inline void SiParams::set_enableangularslotbruteforcedetection(bool value) {
  _internal_set_enableangularslotbruteforcedetection(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableAngularSlotBruteForceDetection)
}

// optional bool enableSlotPoseDetectionOnVirtualLines = 3996;
inline bool SiParams::_internal_has_enableslotposedetectiononvirtuallines() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_enableslotposedetectiononvirtuallines() const {
  return _internal_has_enableslotposedetectiononvirtuallines();
}
inline void SiParams::clear_enableslotposedetectiononvirtuallines() {
  enableslotposedetectiononvirtuallines_ = false;
  _has_bits_[2] &= ~0x00010000u;
}
inline bool SiParams::_internal_enableslotposedetectiononvirtuallines() const {
  return enableslotposedetectiononvirtuallines_;
}
inline bool SiParams::enableslotposedetectiononvirtuallines() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotPoseDetectionOnVirtualLines)
  return _internal_enableslotposedetectiononvirtuallines();
}
inline void SiParams::_internal_set_enableslotposedetectiononvirtuallines(bool value) {
  _has_bits_[2] |= 0x00010000u;
  enableslotposedetectiononvirtuallines_ = value;
}
inline void SiParams::set_enableslotposedetectiononvirtuallines(bool value) {
  _internal_set_enableslotposedetectiononvirtuallines(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotPoseDetectionOnVirtualLines)
}

// optional float outlierDistSqrParallelSlot_m2 = 995;
inline bool SiParams::_internal_has_outlierdistsqrparallelslot_m2() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_outlierdistsqrparallelslot_m2() const {
  return _internal_has_outlierdistsqrparallelslot_m2();
}
inline void SiParams::clear_outlierdistsqrparallelslot_m2() {
  outlierdistsqrparallelslot_m2_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline float SiParams::_internal_outlierdistsqrparallelslot_m2() const {
  return outlierdistsqrparallelslot_m2_;
}
inline float SiParams::outlierdistsqrparallelslot_m2() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.outlierDistSqrParallelSlot_m2)
  return _internal_outlierdistsqrparallelslot_m2();
}
inline void SiParams::_internal_set_outlierdistsqrparallelslot_m2(float value) {
  _has_bits_[1] |= 0x00400000u;
  outlierdistsqrparallelslot_m2_ = value;
}
inline void SiParams::set_outlierdistsqrparallelslot_m2(float value) {
  _internal_set_outlierdistsqrparallelslot_m2(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.outlierDistSqrParallelSlot_m2)
}

// optional float outlierDistSqrNonParallelSlot_m2 = 1066;
inline bool SiParams::_internal_has_outlierdistsqrnonparallelslot_m2() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_outlierdistsqrnonparallelslot_m2() const {
  return _internal_has_outlierdistsqrnonparallelslot_m2();
}
inline void SiParams::clear_outlierdistsqrnonparallelslot_m2() {
  outlierdistsqrnonparallelslot_m2_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline float SiParams::_internal_outlierdistsqrnonparallelslot_m2() const {
  return outlierdistsqrnonparallelslot_m2_;
}
inline float SiParams::outlierdistsqrnonparallelslot_m2() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.outlierDistSqrNonParallelSlot_m2)
  return _internal_outlierdistsqrnonparallelslot_m2();
}
inline void SiParams::_internal_set_outlierdistsqrnonparallelslot_m2(float value) {
  _has_bits_[1] |= 0x01000000u;
  outlierdistsqrnonparallelslot_m2_ = value;
}
inline void SiParams::set_outlierdistsqrnonparallelslot_m2(float value) {
  _internal_set_outlierdistsqrnonparallelslot_m2(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.outlierDistSqrNonParallelSlot_m2)
}

// optional float slotReplacementDeltaOutlierDistSqr_m2 = 114;
inline bool SiParams::_internal_has_slotreplacementdeltaoutlierdistsqr_m2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_slotreplacementdeltaoutlierdistsqr_m2() const {
  return _internal_has_slotreplacementdeltaoutlierdistsqr_m2();
}
inline void SiParams::clear_slotreplacementdeltaoutlierdistsqr_m2() {
  slotreplacementdeltaoutlierdistsqr_m2_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float SiParams::_internal_slotreplacementdeltaoutlierdistsqr_m2() const {
  return slotreplacementdeltaoutlierdistsqr_m2_;
}
inline float SiParams::slotreplacementdeltaoutlierdistsqr_m2() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotReplacementDeltaOutlierDistSqr_m2)
  return _internal_slotreplacementdeltaoutlierdistsqr_m2();
}
inline void SiParams::_internal_set_slotreplacementdeltaoutlierdistsqr_m2(float value) {
  _has_bits_[0] |= 0x00000080u;
  slotreplacementdeltaoutlierdistsqr_m2_ = value;
}
inline void SiParams::set_slotreplacementdeltaoutlierdistsqr_m2(float value) {
  _internal_set_slotreplacementdeltaoutlierdistsqr_m2(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotReplacementDeltaOutlierDistSqr_m2)
}

// optional float angularParkingDetectionWindowAbsMin_m = 3522;
inline bool SiParams::_internal_has_angularparkingdetectionwindowabsmin_m() const {
  bool value = (_has_bits_[7] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_angularparkingdetectionwindowabsmin_m() const {
  return _internal_has_angularparkingdetectionwindowabsmin_m();
}
inline void SiParams::clear_angularparkingdetectionwindowabsmin_m() {
  angularparkingdetectionwindowabsmin_m_ = 0;
  _has_bits_[7] &= ~0x10000000u;
}
inline float SiParams::_internal_angularparkingdetectionwindowabsmin_m() const {
  return angularparkingdetectionwindowabsmin_m_;
}
inline float SiParams::angularparkingdetectionwindowabsmin_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.angularParkingDetectionWindowAbsMin_m)
  return _internal_angularparkingdetectionwindowabsmin_m();
}
inline void SiParams::_internal_set_angularparkingdetectionwindowabsmin_m(float value) {
  _has_bits_[7] |= 0x10000000u;
  angularparkingdetectionwindowabsmin_m_ = value;
}
inline void SiParams::set_angularparkingdetectionwindowabsmin_m(float value) {
  _internal_set_angularparkingdetectionwindowabsmin_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.angularParkingDetectionWindowAbsMin_m)
}

// optional float angularParkingDetectionWindowAbsMax_m = 2498;
inline bool SiParams::_internal_has_angularparkingdetectionwindowabsmax_m() const {
  bool value = (_has_bits_[5] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_angularparkingdetectionwindowabsmax_m() const {
  return _internal_has_angularparkingdetectionwindowabsmax_m();
}
inline void SiParams::clear_angularparkingdetectionwindowabsmax_m() {
  angularparkingdetectionwindowabsmax_m_ = 0;
  _has_bits_[5] &= ~0x20000000u;
}
inline float SiParams::_internal_angularparkingdetectionwindowabsmax_m() const {
  return angularparkingdetectionwindowabsmax_m_;
}
inline float SiParams::angularparkingdetectionwindowabsmax_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.angularParkingDetectionWindowAbsMax_m)
  return _internal_angularparkingdetectionwindowabsmax_m();
}
inline void SiParams::_internal_set_angularparkingdetectionwindowabsmax_m(float value) {
  _has_bits_[5] |= 0x20000000u;
  angularparkingdetectionwindowabsmax_m_ = value;
}
inline void SiParams::set_angularparkingdetectionwindowabsmax_m(float value) {
  _internal_set_angularparkingdetectionwindowabsmax_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.angularParkingDetectionWindowAbsMax_m)
}

// optional float angularSlotMaxDepthExtension_m = 3468;
inline bool SiParams::_internal_has_angularslotmaxdepthextension_m() const {
  bool value = (_has_bits_[7] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_angularslotmaxdepthextension_m() const {
  return _internal_has_angularslotmaxdepthextension_m();
}
inline void SiParams::clear_angularslotmaxdepthextension_m() {
  angularslotmaxdepthextension_m_ = 0;
  _has_bits_[7] &= ~0x01000000u;
}
inline float SiParams::_internal_angularslotmaxdepthextension_m() const {
  return angularslotmaxdepthextension_m_;
}
inline float SiParams::angularslotmaxdepthextension_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.angularSlotMaxDepthExtension_m)
  return _internal_angularslotmaxdepthextension_m();
}
inline void SiParams::_internal_set_angularslotmaxdepthextension_m(float value) {
  _has_bits_[7] |= 0x01000000u;
  angularslotmaxdepthextension_m_ = value;
}
inline void SiParams::set_angularslotmaxdepthextension_m(float value) {
  _internal_set_angularslotmaxdepthextension_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.angularSlotMaxDepthExtension_m)
}

// optional bool enableParallelSlots = 108;
inline bool SiParams::_internal_has_enableparallelslots() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_enableparallelslots() const {
  return _internal_has_enableparallelslots();
}
inline void SiParams::clear_enableparallelslots() {
  enableparallelslots_ = false;
  _has_bits_[2] &= ~0x00020000u;
}
inline bool SiParams::_internal_enableparallelslots() const {
  return enableparallelslots_;
}
inline bool SiParams::enableparallelslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableParallelSlots)
  return _internal_enableparallelslots();
}
inline void SiParams::_internal_set_enableparallelslots(bool value) {
  _has_bits_[2] |= 0x00020000u;
  enableparallelslots_ = value;
}
inline void SiParams::set_enableparallelslots(bool value) {
  _internal_set_enableparallelslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableParallelSlots)
}

// optional float parallelSlotLengthDeltaMin_m = 3571;
inline bool SiParams::_internal_has_parallelslotlengthdeltamin_m() const {
  bool value = (_has_bits_[7] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotlengthdeltamin_m() const {
  return _internal_has_parallelslotlengthdeltamin_m();
}
inline void SiParams::clear_parallelslotlengthdeltamin_m() {
  parallelslotlengthdeltamin_m_ = 0;
  _has_bits_[7] &= ~0x20000000u;
}
inline float SiParams::_internal_parallelslotlengthdeltamin_m() const {
  return parallelslotlengthdeltamin_m_;
}
inline float SiParams::parallelslotlengthdeltamin_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotLengthDeltaMin_m)
  return _internal_parallelslotlengthdeltamin_m();
}
inline void SiParams::_internal_set_parallelslotlengthdeltamin_m(float value) {
  _has_bits_[7] |= 0x20000000u;
  parallelslotlengthdeltamin_m_ = value;
}
inline void SiParams::set_parallelslotlengthdeltamin_m(float value) {
  _internal_set_parallelslotlengthdeltamin_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotLengthDeltaMin_m)
}

// optional float parallelSlotLengthDeltaModel_m = 484;
inline bool SiParams::_internal_has_parallelslotlengthdeltamodel_m() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotlengthdeltamodel_m() const {
  return _internal_has_parallelslotlengthdeltamodel_m();
}
inline void SiParams::clear_parallelslotlengthdeltamodel_m() {
  parallelslotlengthdeltamodel_m_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float SiParams::_internal_parallelslotlengthdeltamodel_m() const {
  return parallelslotlengthdeltamodel_m_;
}
inline float SiParams::parallelslotlengthdeltamodel_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotLengthDeltaModel_m)
  return _internal_parallelslotlengthdeltamodel_m();
}
inline void SiParams::_internal_set_parallelslotlengthdeltamodel_m(float value) {
  _has_bits_[0] |= 0x02000000u;
  parallelslotlengthdeltamodel_m_ = value;
}
inline void SiParams::set_parallelslotlengthdeltamodel_m(float value) {
  _internal_set_parallelslotlengthdeltamodel_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotLengthDeltaModel_m)
}

// optional float parallelSlotLengthDeltaMax_m = 2547;
inline bool SiParams::_internal_has_parallelslotlengthdeltamax_m() const {
  bool value = (_has_bits_[6] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotlengthdeltamax_m() const {
  return _internal_has_parallelslotlengthdeltamax_m();
}
inline void SiParams::clear_parallelslotlengthdeltamax_m() {
  parallelslotlengthdeltamax_m_ = 0;
  _has_bits_[6] &= ~0x00000002u;
}
inline float SiParams::_internal_parallelslotlengthdeltamax_m() const {
  return parallelslotlengthdeltamax_m_;
}
inline float SiParams::parallelslotlengthdeltamax_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotLengthDeltaMax_m)
  return _internal_parallelslotlengthdeltamax_m();
}
inline void SiParams::_internal_set_parallelslotlengthdeltamax_m(float value) {
  _has_bits_[6] |= 0x00000002u;
  parallelslotlengthdeltamax_m_ = value;
}
inline void SiParams::set_parallelslotlengthdeltamax_m(float value) {
  _internal_set_parallelslotlengthdeltamax_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotLengthDeltaMax_m)
}

// optional float parallelSlotWidthDeltaModel_m = 3876;
inline bool SiParams::_internal_has_parallelslotwidthdeltamodel_m() const {
  bool value = (_has_bits_[8] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotwidthdeltamodel_m() const {
  return _internal_has_parallelslotwidthdeltamodel_m();
}
inline void SiParams::clear_parallelslotwidthdeltamodel_m() {
  parallelslotwidthdeltamodel_m_ = 0;
  _has_bits_[8] &= ~0x00000200u;
}
inline float SiParams::_internal_parallelslotwidthdeltamodel_m() const {
  return parallelslotwidthdeltamodel_m_;
}
inline float SiParams::parallelslotwidthdeltamodel_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotWidthDeltaModel_m)
  return _internal_parallelslotwidthdeltamodel_m();
}
inline void SiParams::_internal_set_parallelslotwidthdeltamodel_m(float value) {
  _has_bits_[8] |= 0x00000200u;
  parallelslotwidthdeltamodel_m_ = value;
}
inline void SiParams::set_parallelslotwidthdeltamodel_m(float value) {
  _internal_set_parallelslotwidthdeltamodel_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotWidthDeltaModel_m)
}

// optional float parallelSlotWidthDeltaMin_m = 847;
inline bool SiParams::_internal_has_parallelslotwidthdeltamin_m() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotwidthdeltamin_m() const {
  return _internal_has_parallelslotwidthdeltamin_m();
}
inline void SiParams::clear_parallelslotwidthdeltamin_m() {
  parallelslotwidthdeltamin_m_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float SiParams::_internal_parallelslotwidthdeltamin_m() const {
  return parallelslotwidthdeltamin_m_;
}
inline float SiParams::parallelslotwidthdeltamin_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotWidthDeltaMin_m)
  return _internal_parallelslotwidthdeltamin_m();
}
inline void SiParams::_internal_set_parallelslotwidthdeltamin_m(float value) {
  _has_bits_[1] |= 0x00000200u;
  parallelslotwidthdeltamin_m_ = value;
}
inline void SiParams::set_parallelslotwidthdeltamin_m(float value) {
  _internal_set_parallelslotwidthdeltamin_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotWidthDeltaMin_m)
}

// optional float parallelSlotWidthDeltaMax_m = 1871;
inline bool SiParams::_internal_has_parallelslotwidthdeltamax_m() const {
  bool value = (_has_bits_[3] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotwidthdeltamax_m() const {
  return _internal_has_parallelslotwidthdeltamax_m();
}
inline void SiParams::clear_parallelslotwidthdeltamax_m() {
  parallelslotwidthdeltamax_m_ = 0;
  _has_bits_[3] &= ~0x00200000u;
}
inline float SiParams::_internal_parallelslotwidthdeltamax_m() const {
  return parallelslotwidthdeltamax_m_;
}
inline float SiParams::parallelslotwidthdeltamax_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotWidthDeltaMax_m)
  return _internal_parallelslotwidthdeltamax_m();
}
inline void SiParams::_internal_set_parallelslotwidthdeltamax_m(float value) {
  _has_bits_[3] |= 0x00200000u;
  parallelslotwidthdeltamax_m_ = value;
}
inline void SiParams::set_parallelslotwidthdeltamax_m(float value) {
  _internal_set_parallelslotwidthdeltamax_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotWidthDeltaMax_m)
}

// optional float parallelSlotOpeningDeltaMaxPark_m = 1588;
inline bool SiParams::_internal_has_parallelslotopeningdeltamaxpark_m() const {
  bool value = (_has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotopeningdeltamaxpark_m() const {
  return _internal_has_parallelslotopeningdeltamaxpark_m();
}
inline void SiParams::clear_parallelslotopeningdeltamaxpark_m() {
  parallelslotopeningdeltamaxpark_m_ = 0;
  _has_bits_[3] &= ~0x00000004u;
}
inline float SiParams::_internal_parallelslotopeningdeltamaxpark_m() const {
  return parallelslotopeningdeltamaxpark_m_;
}
inline float SiParams::parallelslotopeningdeltamaxpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotOpeningDeltaMaxPark_m)
  return _internal_parallelslotopeningdeltamaxpark_m();
}
inline void SiParams::_internal_set_parallelslotopeningdeltamaxpark_m(float value) {
  _has_bits_[3] |= 0x00000004u;
  parallelslotopeningdeltamaxpark_m_ = value;
}
inline void SiParams::set_parallelslotopeningdeltamaxpark_m(float value) {
  _internal_set_parallelslotopeningdeltamaxpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotOpeningDeltaMaxPark_m)
}

// optional float parallelSlotOpeningDeltaMinPark_m = 3760;
inline bool SiParams::_internal_has_parallelslotopeningdeltaminpark_m() const {
  bool value = (_has_bits_[8] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotopeningdeltaminpark_m() const {
  return _internal_has_parallelslotopeningdeltaminpark_m();
}
inline void SiParams::clear_parallelslotopeningdeltaminpark_m() {
  parallelslotopeningdeltaminpark_m_ = 0;
  _has_bits_[8] &= ~0x00000001u;
}
inline float SiParams::_internal_parallelslotopeningdeltaminpark_m() const {
  return parallelslotopeningdeltaminpark_m_;
}
inline float SiParams::parallelslotopeningdeltaminpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotOpeningDeltaMinPark_m)
  return _internal_parallelslotopeningdeltaminpark_m();
}
inline void SiParams::_internal_set_parallelslotopeningdeltaminpark_m(float value) {
  _has_bits_[8] |= 0x00000001u;
  parallelslotopeningdeltaminpark_m_ = value;
}
inline void SiParams::set_parallelslotopeningdeltaminpark_m(float value) {
  _internal_set_parallelslotopeningdeltaminpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotOpeningDeltaMinPark_m)
}

// optional float parallelSlotDepthDeltaMaxPark_m = 866;
inline bool SiParams::_internal_has_parallelslotdepthdeltamaxpark_m() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotdepthdeltamaxpark_m() const {
  return _internal_has_parallelslotdepthdeltamaxpark_m();
}
inline void SiParams::clear_parallelslotdepthdeltamaxpark_m() {
  parallelslotdepthdeltamaxpark_m_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline float SiParams::_internal_parallelslotdepthdeltamaxpark_m() const {
  return parallelslotdepthdeltamaxpark_m_;
}
inline float SiParams::parallelslotdepthdeltamaxpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotDepthDeltaMaxPark_m)
  return _internal_parallelslotdepthdeltamaxpark_m();
}
inline void SiParams::_internal_set_parallelslotdepthdeltamaxpark_m(float value) {
  _has_bits_[1] |= 0x00000800u;
  parallelslotdepthdeltamaxpark_m_ = value;
}
inline void SiParams::set_parallelslotdepthdeltamaxpark_m(float value) {
  _internal_set_parallelslotdepthdeltamaxpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotDepthDeltaMaxPark_m)
}

// optional float parallelSlotDepthDeltaMinPark_m = 3046;
inline bool SiParams::_internal_has_parallelslotdepthdeltaminpark_m() const {
  bool value = (_has_bits_[7] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotdepthdeltaminpark_m() const {
  return _internal_has_parallelslotdepthdeltaminpark_m();
}
inline void SiParams::clear_parallelslotdepthdeltaminpark_m() {
  parallelslotdepthdeltaminpark_m_ = 0;
  _has_bits_[7] &= ~0x00000008u;
}
inline float SiParams::_internal_parallelslotdepthdeltaminpark_m() const {
  return parallelslotdepthdeltaminpark_m_;
}
inline float SiParams::parallelslotdepthdeltaminpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotDepthDeltaMinPark_m)
  return _internal_parallelslotdepthdeltaminpark_m();
}
inline void SiParams::_internal_set_parallelslotdepthdeltaminpark_m(float value) {
  _has_bits_[7] |= 0x00000008u;
  parallelslotdepthdeltaminpark_m_ = value;
}
inline void SiParams::set_parallelslotdepthdeltaminpark_m(float value) {
  _internal_set_parallelslotdepthdeltaminpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotDepthDeltaMinPark_m)
}

// optional bool enablePerpendicularSlots = 1404;
inline bool SiParams::_internal_has_enableperpendicularslots() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_enableperpendicularslots() const {
  return _internal_has_enableperpendicularslots();
}
inline void SiParams::clear_enableperpendicularslots() {
  enableperpendicularslots_ = false;
  _has_bits_[2] &= ~0x00040000u;
}
inline bool SiParams::_internal_enableperpendicularslots() const {
  return enableperpendicularslots_;
}
inline bool SiParams::enableperpendicularslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enablePerpendicularSlots)
  return _internal_enableperpendicularslots();
}
inline void SiParams::_internal_set_enableperpendicularslots(bool value) {
  _has_bits_[2] |= 0x00040000u;
  enableperpendicularslots_ = value;
}
inline void SiParams::set_enableperpendicularslots(bool value) {
  _internal_set_enableperpendicularslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enablePerpendicularSlots)
}

// optional float perpendicularSlotWidthDeltaMin_m = 1840;
inline bool SiParams::_internal_has_perpendicularslotwidthdeltamin_m() const {
  bool value = (_has_bits_[3] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotwidthdeltamin_m() const {
  return _internal_has_perpendicularslotwidthdeltamin_m();
}
inline void SiParams::clear_perpendicularslotwidthdeltamin_m() {
  perpendicularslotwidthdeltamin_m_ = 0;
  _has_bits_[3] &= ~0x00100000u;
}
inline float SiParams::_internal_perpendicularslotwidthdeltamin_m() const {
  return perpendicularslotwidthdeltamin_m_;
}
inline float SiParams::perpendicularslotwidthdeltamin_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotWidthDeltaMin_m)
  return _internal_perpendicularslotwidthdeltamin_m();
}
inline void SiParams::_internal_set_perpendicularslotwidthdeltamin_m(float value) {
  _has_bits_[3] |= 0x00100000u;
  perpendicularslotwidthdeltamin_m_ = value;
}
inline void SiParams::set_perpendicularslotwidthdeltamin_m(float value) {
  _internal_set_perpendicularslotwidthdeltamin_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotWidthDeltaMin_m)
}

// optional float perpendicularSlotWidthDeltaModel_m = 2495;
inline bool SiParams::_internal_has_perpendicularslotwidthdeltamodel_m() const {
  bool value = (_has_bits_[5] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotwidthdeltamodel_m() const {
  return _internal_has_perpendicularslotwidthdeltamodel_m();
}
inline void SiParams::clear_perpendicularslotwidthdeltamodel_m() {
  perpendicularslotwidthdeltamodel_m_ = 0;
  _has_bits_[5] &= ~0x10000000u;
}
inline float SiParams::_internal_perpendicularslotwidthdeltamodel_m() const {
  return perpendicularslotwidthdeltamodel_m_;
}
inline float SiParams::perpendicularslotwidthdeltamodel_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotWidthDeltaModel_m)
  return _internal_perpendicularslotwidthdeltamodel_m();
}
inline void SiParams::_internal_set_perpendicularslotwidthdeltamodel_m(float value) {
  _has_bits_[5] |= 0x10000000u;
  perpendicularslotwidthdeltamodel_m_ = value;
}
inline void SiParams::set_perpendicularslotwidthdeltamodel_m(float value) {
  _internal_set_perpendicularslotwidthdeltamodel_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotWidthDeltaModel_m)
}

// optional float perpendicularSlotWidthDeltaMax_m = 816;
inline bool SiParams::_internal_has_perpendicularslotwidthdeltamax_m() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotwidthdeltamax_m() const {
  return _internal_has_perpendicularslotwidthdeltamax_m();
}
inline void SiParams::clear_perpendicularslotwidthdeltamax_m() {
  perpendicularslotwidthdeltamax_m_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float SiParams::_internal_perpendicularslotwidthdeltamax_m() const {
  return perpendicularslotwidthdeltamax_m_;
}
inline float SiParams::perpendicularslotwidthdeltamax_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotWidthDeltaMax_m)
  return _internal_perpendicularslotwidthdeltamax_m();
}
inline void SiParams::_internal_set_perpendicularslotwidthdeltamax_m(float value) {
  _has_bits_[1] |= 0x00000080u;
  perpendicularslotwidthdeltamax_m_ = value;
}
inline void SiParams::set_perpendicularslotwidthdeltamax_m(float value) {
  _internal_set_perpendicularslotwidthdeltamax_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotWidthDeltaMax_m)
}

// optional float perpendicularSlotLengthDeltaModel_m = 215;
inline bool SiParams::_internal_has_perpendicularslotlengthdeltamodel_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotlengthdeltamodel_m() const {
  return _internal_has_perpendicularslotlengthdeltamodel_m();
}
inline void SiParams::clear_perpendicularslotlengthdeltamodel_m() {
  perpendicularslotlengthdeltamodel_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float SiParams::_internal_perpendicularslotlengthdeltamodel_m() const {
  return perpendicularslotlengthdeltamodel_m_;
}
inline float SiParams::perpendicularslotlengthdeltamodel_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotLengthDeltaModel_m)
  return _internal_perpendicularslotlengthdeltamodel_m();
}
inline void SiParams::_internal_set_perpendicularslotlengthdeltamodel_m(float value) {
  _has_bits_[0] |= 0x00004000u;
  perpendicularslotlengthdeltamodel_m_ = value;
}
inline void SiParams::set_perpendicularslotlengthdeltamodel_m(float value) {
  _internal_set_perpendicularslotlengthdeltamodel_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotLengthDeltaModel_m)
}

// optional float perpendicularSlotLengthDeltaMin_m = 2314;
inline bool SiParams::_internal_has_perpendicularslotlengthdeltamin_m() const {
  bool value = (_has_bits_[5] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotlengthdeltamin_m() const {
  return _internal_has_perpendicularslotlengthdeltamin_m();
}
inline void SiParams::clear_perpendicularslotlengthdeltamin_m() {
  perpendicularslotlengthdeltamin_m_ = 0;
  _has_bits_[5] &= ~0x00008000u;
}
inline float SiParams::_internal_perpendicularslotlengthdeltamin_m() const {
  return perpendicularslotlengthdeltamin_m_;
}
inline float SiParams::perpendicularslotlengthdeltamin_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotLengthDeltaMin_m)
  return _internal_perpendicularslotlengthdeltamin_m();
}
inline void SiParams::_internal_set_perpendicularslotlengthdeltamin_m(float value) {
  _has_bits_[5] |= 0x00008000u;
  perpendicularslotlengthdeltamin_m_ = value;
}
inline void SiParams::set_perpendicularslotlengthdeltamin_m(float value) {
  _internal_set_perpendicularslotlengthdeltamin_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotLengthDeltaMin_m)
}

// optional float perpendicularSlotLengthDeltaMax_m = 3338;
inline bool SiParams::_internal_has_perpendicularslotlengthdeltamax_m() const {
  bool value = (_has_bits_[7] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotlengthdeltamax_m() const {
  return _internal_has_perpendicularslotlengthdeltamax_m();
}
inline void SiParams::clear_perpendicularslotlengthdeltamax_m() {
  perpendicularslotlengthdeltamax_m_ = 0;
  _has_bits_[7] &= ~0x00080000u;
}
inline float SiParams::_internal_perpendicularslotlengthdeltamax_m() const {
  return perpendicularslotlengthdeltamax_m_;
}
inline float SiParams::perpendicularslotlengthdeltamax_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotLengthDeltaMax_m)
  return _internal_perpendicularslotlengthdeltamax_m();
}
inline void SiParams::_internal_set_perpendicularslotlengthdeltamax_m(float value) {
  _has_bits_[7] |= 0x00080000u;
  perpendicularslotlengthdeltamax_m_ = value;
}
inline void SiParams::set_perpendicularslotlengthdeltamax_m(float value) {
  _internal_set_perpendicularslotlengthdeltamax_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotLengthDeltaMax_m)
}

// optional float perpendicularSlotOpeningDeltaMaxPark_m = 3166;
inline bool SiParams::_internal_has_perpendicularslotopeningdeltamaxpark_m() const {
  bool value = (_has_bits_[7] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotopeningdeltamaxpark_m() const {
  return _internal_has_perpendicularslotopeningdeltamaxpark_m();
}
inline void SiParams::clear_perpendicularslotopeningdeltamaxpark_m() {
  perpendicularslotopeningdeltamaxpark_m_ = 0;
  _has_bits_[7] &= ~0x00001000u;
}
inline float SiParams::_internal_perpendicularslotopeningdeltamaxpark_m() const {
  return perpendicularslotopeningdeltamaxpark_m_;
}
inline float SiParams::perpendicularslotopeningdeltamaxpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotOpeningDeltaMaxPark_m)
  return _internal_perpendicularslotopeningdeltamaxpark_m();
}
inline void SiParams::_internal_set_perpendicularslotopeningdeltamaxpark_m(float value) {
  _has_bits_[7] |= 0x00001000u;
  perpendicularslotopeningdeltamaxpark_m_ = value;
}
inline void SiParams::set_perpendicularslotopeningdeltamaxpark_m(float value) {
  _internal_set_perpendicularslotopeningdeltamaxpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotOpeningDeltaMaxPark_m)
}

// optional float perpendicularSlotOpeningDeltaMinPark_m = 1242;
inline bool SiParams::_internal_has_perpendicularslotopeningdeltaminpark_m() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotopeningdeltaminpark_m() const {
  return _internal_has_perpendicularslotopeningdeltaminpark_m();
}
inline void SiParams::clear_perpendicularslotopeningdeltaminpark_m() {
  perpendicularslotopeningdeltaminpark_m_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline float SiParams::_internal_perpendicularslotopeningdeltaminpark_m() const {
  return perpendicularslotopeningdeltaminpark_m_;
}
inline float SiParams::perpendicularslotopeningdeltaminpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotOpeningDeltaMinPark_m)
  return _internal_perpendicularslotopeningdeltaminpark_m();
}
inline void SiParams::_internal_set_perpendicularslotopeningdeltaminpark_m(float value) {
  _has_bits_[2] |= 0x00000004u;
  perpendicularslotopeningdeltaminpark_m_ = value;
}
inline void SiParams::set_perpendicularslotopeningdeltaminpark_m(float value) {
  _internal_set_perpendicularslotopeningdeltaminpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotOpeningDeltaMinPark_m)
}

// optional float perpendicularSlotDepthDeltaMaxPark_m = 1449;
inline bool SiParams::_internal_has_perpendicularslotdepthdeltamaxpark_m() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotdepthdeltamaxpark_m() const {
  return _internal_has_perpendicularslotdepthdeltamaxpark_m();
}
inline void SiParams::clear_perpendicularslotdepthdeltamaxpark_m() {
  perpendicularslotdepthdeltamaxpark_m_ = 0;
  _has_bits_[2] &= ~0x00400000u;
}
inline float SiParams::_internal_perpendicularslotdepthdeltamaxpark_m() const {
  return perpendicularslotdepthdeltamaxpark_m_;
}
inline float SiParams::perpendicularslotdepthdeltamaxpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotDepthDeltaMaxPark_m)
  return _internal_perpendicularslotdepthdeltamaxpark_m();
}
inline void SiParams::_internal_set_perpendicularslotdepthdeltamaxpark_m(float value) {
  _has_bits_[2] |= 0x00400000u;
  perpendicularslotdepthdeltamaxpark_m_ = value;
}
inline void SiParams::set_perpendicularslotdepthdeltamaxpark_m(float value) {
  _internal_set_perpendicularslotdepthdeltamaxpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotDepthDeltaMaxPark_m)
}

// optional float perpendicularSlotDepthDeltaMinPark_m = 3373;
inline bool SiParams::_internal_has_perpendicularslotdepthdeltaminpark_m() const {
  bool value = (_has_bits_[7] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_perpendicularslotdepthdeltaminpark_m() const {
  return _internal_has_perpendicularslotdepthdeltaminpark_m();
}
inline void SiParams::clear_perpendicularslotdepthdeltaminpark_m() {
  perpendicularslotdepthdeltaminpark_m_ = 0;
  _has_bits_[7] &= ~0x00200000u;
}
inline float SiParams::_internal_perpendicularslotdepthdeltaminpark_m() const {
  return perpendicularslotdepthdeltaminpark_m_;
}
inline float SiParams::perpendicularslotdepthdeltaminpark_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.perpendicularSlotDepthDeltaMinPark_m)
  return _internal_perpendicularslotdepthdeltaminpark_m();
}
inline void SiParams::_internal_set_perpendicularslotdepthdeltaminpark_m(float value) {
  _has_bits_[7] |= 0x00200000u;
  perpendicularslotdepthdeltaminpark_m_ = value;
}
inline void SiParams::set_perpendicularslotdepthdeltaminpark_m(float value) {
  _internal_set_perpendicularslotdepthdeltaminpark_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.perpendicularSlotDepthDeltaMinPark_m)
}

// optional bool enableGarageParkingSlots = 183;
inline bool SiParams::_internal_has_enablegarageparkingslots() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_enablegarageparkingslots() const {
  return _internal_has_enablegarageparkingslots();
}
inline void SiParams::clear_enablegarageparkingslots() {
  enablegarageparkingslots_ = false;
  _has_bits_[2] &= ~0x00080000u;
}
inline bool SiParams::_internal_enablegarageparkingslots() const {
  return enablegarageparkingslots_;
}
inline bool SiParams::enablegarageparkingslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableGarageParkingSlots)
  return _internal_enablegarageparkingslots();
}
inline void SiParams::_internal_set_enablegarageparkingslots(bool value) {
  _has_bits_[2] |= 0x00080000u;
  enablegarageparkingslots_ = value;
}
inline void SiParams::set_enablegarageparkingslots(bool value) {
  _internal_set_enablegarageparkingslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableGarageParkingSlots)
}

// optional float garageParkingSlotWidthDeltaMin_m = 1972;
inline bool SiParams::_internal_has_garageparkingslotwidthdeltamin_m() const {
  bool value = (_has_bits_[4] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_garageparkingslotwidthdeltamin_m() const {
  return _internal_has_garageparkingslotwidthdeltamin_m();
}
inline void SiParams::clear_garageparkingslotwidthdeltamin_m() {
  garageparkingslotwidthdeltamin_m_ = 0;
  _has_bits_[4] &= ~0x00000008u;
}
inline float SiParams::_internal_garageparkingslotwidthdeltamin_m() const {
  return garageparkingslotwidthdeltamin_m_;
}
inline float SiParams::garageparkingslotwidthdeltamin_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.garageParkingSlotWidthDeltaMin_m)
  return _internal_garageparkingslotwidthdeltamin_m();
}
inline void SiParams::_internal_set_garageparkingslotwidthdeltamin_m(float value) {
  _has_bits_[4] |= 0x00000008u;
  garageparkingslotwidthdeltamin_m_ = value;
}
inline void SiParams::set_garageparkingslotwidthdeltamin_m(float value) {
  _internal_set_garageparkingslotwidthdeltamin_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.garageParkingSlotWidthDeltaMin_m)
}

// optional float garageParkingSlotWidthDeltaMax_m = 948;
inline bool SiParams::_internal_has_garageparkingslotwidthdeltamax_m() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_garageparkingslotwidthdeltamax_m() const {
  return _internal_has_garageparkingslotwidthdeltamax_m();
}
inline void SiParams::clear_garageparkingslotwidthdeltamax_m() {
  garageparkingslotwidthdeltamax_m_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline float SiParams::_internal_garageparkingslotwidthdeltamax_m() const {
  return garageparkingslotwidthdeltamax_m_;
}
inline float SiParams::garageparkingslotwidthdeltamax_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.garageParkingSlotWidthDeltaMax_m)
  return _internal_garageparkingslotwidthdeltamax_m();
}
inline void SiParams::_internal_set_garageparkingslotwidthdeltamax_m(float value) {
  _has_bits_[1] |= 0x00040000u;
  garageparkingslotwidthdeltamax_m_ = value;
}
inline void SiParams::set_garageparkingslotwidthdeltamax_m(float value) {
  _internal_set_garageparkingslotwidthdeltamax_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.garageParkingSlotWidthDeltaMax_m)
}

// optional float garageParkingSlotLengthDeltaMin_m = 2905;
inline bool SiParams::_internal_has_garageparkingslotlengthdeltamin_m() const {
  bool value = (_has_bits_[6] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_garageparkingslotlengthdeltamin_m() const {
  return _internal_has_garageparkingslotlengthdeltamin_m();
}
inline void SiParams::clear_garageparkingslotlengthdeltamin_m() {
  garageparkingslotlengthdeltamin_m_ = 0;
  _has_bits_[6] &= ~0x00400000u;
}
inline float SiParams::_internal_garageparkingslotlengthdeltamin_m() const {
  return garageparkingslotlengthdeltamin_m_;
}
inline float SiParams::garageparkingslotlengthdeltamin_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.garageParkingSlotLengthDeltaMin_m)
  return _internal_garageparkingslotlengthdeltamin_m();
}
inline void SiParams::_internal_set_garageparkingslotlengthdeltamin_m(float value) {
  _has_bits_[6] |= 0x00400000u;
  garageparkingslotlengthdeltamin_m_ = value;
}
inline void SiParams::set_garageparkingslotlengthdeltamin_m(float value) {
  _internal_set_garageparkingslotlengthdeltamin_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.garageParkingSlotLengthDeltaMin_m)
}

// optional float garageParkingSlotLengthDeltaModel_m = 558;
inline bool SiParams::_internal_has_garageparkingslotlengthdeltamodel_m() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_garageparkingslotlengthdeltamodel_m() const {
  return _internal_has_garageparkingslotlengthdeltamodel_m();
}
inline void SiParams::clear_garageparkingslotlengthdeltamodel_m() {
  garageparkingslotlengthdeltamodel_m_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float SiParams::_internal_garageparkingslotlengthdeltamodel_m() const {
  return garageparkingslotlengthdeltamodel_m_;
}
inline float SiParams::garageparkingslotlengthdeltamodel_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.garageParkingSlotLengthDeltaModel_m)
  return _internal_garageparkingslotlengthdeltamodel_m();
}
inline void SiParams::_internal_set_garageparkingslotlengthdeltamodel_m(float value) {
  _has_bits_[0] |= 0x40000000u;
  garageparkingslotlengthdeltamodel_m_ = value;
}
inline void SiParams::set_garageparkingslotlengthdeltamodel_m(float value) {
  _internal_set_garageparkingslotlengthdeltamodel_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.garageParkingSlotLengthDeltaModel_m)
}

// optional float garageParkingSlotLengthDeltaMax_m = 3929;
inline bool SiParams::_internal_has_garageparkingslotlengthdeltamax_m() const {
  bool value = (_has_bits_[8] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_garageparkingslotlengthdeltamax_m() const {
  return _internal_has_garageparkingslotlengthdeltamax_m();
}
inline void SiParams::clear_garageparkingslotlengthdeltamax_m() {
  garageparkingslotlengthdeltamax_m_ = 0;
  _has_bits_[8] &= ~0x00000800u;
}
inline float SiParams::_internal_garageparkingslotlengthdeltamax_m() const {
  return garageparkingslotlengthdeltamax_m_;
}
inline float SiParams::garageparkingslotlengthdeltamax_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.garageParkingSlotLengthDeltaMax_m)
  return _internal_garageparkingslotlengthdeltamax_m();
}
inline void SiParams::_internal_set_garageparkingslotlengthdeltamax_m(float value) {
  _has_bits_[8] |= 0x00000800u;
  garageparkingslotlengthdeltamax_m_ = value;
}
inline void SiParams::set_garageparkingslotlengthdeltamax_m(float value) {
  _internal_set_garageparkingslotlengthdeltamax_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.garageParkingSlotLengthDeltaMax_m)
}

// optional float garageParkingSlotDoorAreaLength_m = 2119;
inline bool SiParams::_internal_has_garageparkingslotdoorarealength_m() const {
  bool value = (_has_bits_[4] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_garageparkingslotdoorarealength_m() const {
  return _internal_has_garageparkingslotdoorarealength_m();
}
inline void SiParams::clear_garageparkingslotdoorarealength_m() {
  garageparkingslotdoorarealength_m_ = 0;
  _has_bits_[4] &= ~0x00080000u;
}
inline float SiParams::_internal_garageparkingslotdoorarealength_m() const {
  return garageparkingslotdoorarealength_m_;
}
inline float SiParams::garageparkingslotdoorarealength_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.garageParkingSlotDoorAreaLength_m)
  return _internal_garageparkingslotdoorarealength_m();
}
inline void SiParams::_internal_set_garageparkingslotdoorarealength_m(float value) {
  _has_bits_[4] |= 0x00080000u;
  garageparkingslotdoorarealength_m_ = value;
}
inline void SiParams::set_garageparkingslotdoorarealength_m(float value) {
  _internal_set_garageparkingslotdoorarealength_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.garageParkingSlotDoorAreaLength_m)
}

// optional float maxAllowedSlotOpeningOverlap_m = 468;
inline bool SiParams::_internal_has_maxallowedslotopeningoverlap_m() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_maxallowedslotopeningoverlap_m() const {
  return _internal_has_maxallowedslotopeningoverlap_m();
}
inline void SiParams::clear_maxallowedslotopeningoverlap_m() {
  maxallowedslotopeningoverlap_m_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float SiParams::_internal_maxallowedslotopeningoverlap_m() const {
  return maxallowedslotopeningoverlap_m_;
}
inline float SiParams::maxallowedslotopeningoverlap_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxAllowedSlotOpeningOverlap_m)
  return _internal_maxallowedslotopeningoverlap_m();
}
inline void SiParams::_internal_set_maxallowedslotopeningoverlap_m(float value) {
  _has_bits_[0] |= 0x00400000u;
  maxallowedslotopeningoverlap_m_ = value;
}
inline void SiParams::set_maxallowedslotopeningoverlap_m(float value) {
  _internal_set_maxallowedslotopeningoverlap_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxAllowedSlotOpeningOverlap_m)
}

// optional bool preferWideSlots = 86;
inline bool SiParams::_internal_has_preferwideslots() const {
  bool value = (_has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_preferwideslots() const {
  return _internal_has_preferwideslots();
}
inline void SiParams::clear_preferwideslots() {
  preferwideslots_ = false;
  _has_bits_[3] &= ~0x00000020u;
}
inline bool SiParams::_internal_preferwideslots() const {
  return preferwideslots_;
}
inline bool SiParams::preferwideslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.preferWideSlots)
  return _internal_preferwideslots();
}
inline void SiParams::_internal_set_preferwideslots(bool value) {
  _has_bits_[3] |= 0x00000020u;
  preferwideslots_ = value;
}
inline void SiParams::set_preferwideslots(bool value) {
  _internal_set_preferwideslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.preferWideSlots)
}

// optional bool offerOverlappingSlots = 862;
inline bool SiParams::_internal_has_offeroverlappingslots() const {
  bool value = (_has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_offeroverlappingslots() const {
  return _internal_has_offeroverlappingslots();
}
inline void SiParams::clear_offeroverlappingslots() {
  offeroverlappingslots_ = false;
  _has_bits_[3] &= ~0x00000040u;
}
inline bool SiParams::_internal_offeroverlappingslots() const {
  return offeroverlappingslots_;
}
inline bool SiParams::offeroverlappingslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.offerOverlappingSlots)
  return _internal_offeroverlappingslots();
}
inline void SiParams::_internal_set_offeroverlappingslots(bool value) {
  _has_bits_[3] |= 0x00000040u;
  offeroverlappingslots_ = value;
}
inline void SiParams::set_offeroverlappingslots(bool value) {
  _internal_set_offeroverlappingslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.offerOverlappingSlots)
}

// optional bool performOptimization = 2187;
inline bool SiParams::_internal_has_performoptimization() const {
  bool value = (_has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_performoptimization() const {
  return _internal_has_performoptimization();
}
inline void SiParams::clear_performoptimization() {
  performoptimization_ = false;
  _has_bits_[3] &= ~0x00000080u;
}
inline bool SiParams::_internal_performoptimization() const {
  return performoptimization_;
}
inline bool SiParams::performoptimization() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.performOptimization)
  return _internal_performoptimization();
}
inline void SiParams::_internal_set_performoptimization(bool value) {
  _has_bits_[3] |= 0x00000080u;
  performoptimization_ = value;
}
inline void SiParams::set_performoptimization(bool value) {
  _internal_set_performoptimization(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.performOptimization)
}

// optional float shrinkSlotForNumericalInaccuracy_m = 672;
inline bool SiParams::_internal_has_shrinkslotfornumericalinaccuracy_m() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_shrinkslotfornumericalinaccuracy_m() const {
  return _internal_has_shrinkslotfornumericalinaccuracy_m();
}
inline void SiParams::clear_shrinkslotfornumericalinaccuracy_m() {
  shrinkslotfornumericalinaccuracy_m_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline float SiParams::_internal_shrinkslotfornumericalinaccuracy_m() const {
  return shrinkslotfornumericalinaccuracy_m_;
}
inline float SiParams::shrinkslotfornumericalinaccuracy_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.shrinkSlotForNumericalInaccuracy_m)
  return _internal_shrinkslotfornumericalinaccuracy_m();
}
inline void SiParams::_internal_set_shrinkslotfornumericalinaccuracy_m(float value) {
  _has_bits_[1] |= 0x00000004u;
  shrinkslotfornumericalinaccuracy_m_ = value;
}
inline void SiParams::set_shrinkslotfornumericalinaccuracy_m(float value) {
  _internal_set_shrinkslotfornumericalinaccuracy_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.shrinkSlotForNumericalInaccuracy_m)
}

// optional float slotPositioningRoiLeftRightDelta_m = 28;
inline bool SiParams::_internal_has_slotpositioningroileftrightdelta_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_slotpositioningroileftrightdelta_m() const {
  return _internal_has_slotpositioningroileftrightdelta_m();
}
inline void SiParams::clear_slotpositioningroileftrightdelta_m() {
  slotpositioningroileftrightdelta_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SiParams::_internal_slotpositioningroileftrightdelta_m() const {
  return slotpositioningroileftrightdelta_m_;
}
inline float SiParams::slotpositioningroileftrightdelta_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotPositioningRoiLeftRightDelta_m)
  return _internal_slotpositioningroileftrightdelta_m();
}
inline void SiParams::_internal_set_slotpositioningroileftrightdelta_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  slotpositioningroileftrightdelta_m_ = value;
}
inline void SiParams::set_slotpositioningroileftrightdelta_m(float value) {
  _internal_set_slotpositioningroileftrightdelta_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotPositioningRoiLeftRightDelta_m)
}

// optional float slotPositioningRoiRoadDelta_m = 1493;
inline bool SiParams::_internal_has_slotpositioningroiroaddelta_m() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_slotpositioningroiroaddelta_m() const {
  return _internal_has_slotpositioningroiroaddelta_m();
}
inline void SiParams::clear_slotpositioningroiroaddelta_m() {
  slotpositioningroiroaddelta_m_ = 0;
  _has_bits_[2] &= ~0x02000000u;
}
inline float SiParams::_internal_slotpositioningroiroaddelta_m() const {
  return slotpositioningroiroaddelta_m_;
}
inline float SiParams::slotpositioningroiroaddelta_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotPositioningRoiRoadDelta_m)
  return _internal_slotpositioningroiroaddelta_m();
}
inline void SiParams::_internal_set_slotpositioningroiroaddelta_m(float value) {
  _has_bits_[2] |= 0x02000000u;
  slotpositioningroiroaddelta_m_ = value;
}
inline void SiParams::set_slotpositioningroiroaddelta_m(float value) {
  _internal_set_slotpositioningroiroaddelta_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotPositioningRoiRoadDelta_m)
}

// optional float slotEdgePullSearchDistFront_m = 2717;
inline bool SiParams::_internal_has_slotedgepullsearchdistfront_m() const {
  bool value = (_has_bits_[6] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_slotedgepullsearchdistfront_m() const {
  return _internal_has_slotedgepullsearchdistfront_m();
}
inline void SiParams::clear_slotedgepullsearchdistfront_m() {
  slotedgepullsearchdistfront_m_ = 0;
  _has_bits_[6] &= ~0x00004000u;
}
inline float SiParams::_internal_slotedgepullsearchdistfront_m() const {
  return slotedgepullsearchdistfront_m_;
}
inline float SiParams::slotedgepullsearchdistfront_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotEdgePullSearchDistFront_m)
  return _internal_slotedgepullsearchdistfront_m();
}
inline void SiParams::_internal_set_slotedgepullsearchdistfront_m(float value) {
  _has_bits_[6] |= 0x00004000u;
  slotedgepullsearchdistfront_m_ = value;
}
inline void SiParams::set_slotedgepullsearchdistfront_m(float value) {
  _internal_set_slotedgepullsearchdistfront_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotEdgePullSearchDistFront_m)
}

// optional float maxDrivenRotationParallel_rad = 1962442;
inline bool SiParams::_internal_has_maxdrivenrotationparallel_rad() const {
  bool value = (_has_bits_[8] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_maxdrivenrotationparallel_rad() const {
  return _internal_has_maxdrivenrotationparallel_rad();
}
inline void SiParams::clear_maxdrivenrotationparallel_rad() {
  maxdrivenrotationparallel_rad_ = 0;
  _has_bits_[8] &= ~0x04000000u;
}
inline float SiParams::_internal_maxdrivenrotationparallel_rad() const {
  return maxdrivenrotationparallel_rad_;
}
inline float SiParams::maxdrivenrotationparallel_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxDrivenRotationParallel_rad)
  return _internal_maxdrivenrotationparallel_rad();
}
inline void SiParams::_internal_set_maxdrivenrotationparallel_rad(float value) {
  _has_bits_[8] |= 0x04000000u;
  maxdrivenrotationparallel_rad_ = value;
}
inline void SiParams::set_maxdrivenrotationparallel_rad(float value) {
  _internal_set_maxdrivenrotationparallel_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxDrivenRotationParallel_rad)
}

// optional float maxDrivenRotationPerpendicular_rad = 161;
inline bool SiParams::_internal_has_maxdrivenrotationperpendicular_rad() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_maxdrivenrotationperpendicular_rad() const {
  return _internal_has_maxdrivenrotationperpendicular_rad();
}
inline void SiParams::clear_maxdrivenrotationperpendicular_rad() {
  maxdrivenrotationperpendicular_rad_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float SiParams::_internal_maxdrivenrotationperpendicular_rad() const {
  return maxdrivenrotationperpendicular_rad_;
}
inline float SiParams::maxdrivenrotationperpendicular_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxDrivenRotationPerpendicular_rad)
  return _internal_maxdrivenrotationperpendicular_rad();
}
inline void SiParams::_internal_set_maxdrivenrotationperpendicular_rad(float value) {
  _has_bits_[0] |= 0x00000800u;
  maxdrivenrotationperpendicular_rad_ = value;
}
inline void SiParams::set_maxdrivenrotationperpendicular_rad(float value) {
  _internal_set_maxdrivenrotationperpendicular_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxDrivenRotationPerpendicular_rad)
}

// optional float maxDrivenRotationGarage_rad = 2024;
inline bool SiParams::_internal_has_maxdrivenrotationgarage_rad() const {
  bool value = (_has_bits_[4] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_maxdrivenrotationgarage_rad() const {
  return _internal_has_maxdrivenrotationgarage_rad();
}
inline void SiParams::clear_maxdrivenrotationgarage_rad() {
  maxdrivenrotationgarage_rad_ = 0;
  _has_bits_[4] &= ~0x00001000u;
}
inline float SiParams::_internal_maxdrivenrotationgarage_rad() const {
  return maxdrivenrotationgarage_rad_;
}
inline float SiParams::maxdrivenrotationgarage_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxDrivenRotationGarage_rad)
  return _internal_maxdrivenrotationgarage_rad();
}
inline void SiParams::_internal_set_maxdrivenrotationgarage_rad(float value) {
  _has_bits_[4] |= 0x00001000u;
  maxdrivenrotationgarage_rad_ = value;
}
inline void SiParams::set_maxdrivenrotationgarage_rad(float value) {
  _internal_set_maxdrivenrotationgarage_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxDrivenRotationGarage_rad)
}

// optional float maxDrivenRotationAngled_rad = 530;
inline bool SiParams::_internal_has_maxdrivenrotationangled_rad() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_maxdrivenrotationangled_rad() const {
  return _internal_has_maxdrivenrotationangled_rad();
}
inline void SiParams::clear_maxdrivenrotationangled_rad() {
  maxdrivenrotationangled_rad_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float SiParams::_internal_maxdrivenrotationangled_rad() const {
  return maxdrivenrotationangled_rad_;
}
inline float SiParams::maxdrivenrotationangled_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxDrivenRotationAngled_rad)
  return _internal_maxdrivenrotationangled_rad();
}
inline void SiParams::_internal_set_maxdrivenrotationangled_rad(float value) {
  _has_bits_[0] |= 0x08000000u;
  maxdrivenrotationangled_rad_ = value;
}
inline void SiParams::set_maxdrivenrotationangled_rad(float value) {
  _internal_set_maxdrivenrotationangled_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxDrivenRotationAngled_rad)
}

// optional float slotDepthHorizontalLineAlignment_m = 483;
inline bool SiParams::_internal_has_slotdepthhorizontallinealignment_m() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_slotdepthhorizontallinealignment_m() const {
  return _internal_has_slotdepthhorizontallinealignment_m();
}
inline void SiParams::clear_slotdepthhorizontallinealignment_m() {
  slotdepthhorizontallinealignment_m_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float SiParams::_internal_slotdepthhorizontallinealignment_m() const {
  return slotdepthhorizontallinealignment_m_;
}
inline float SiParams::slotdepthhorizontallinealignment_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotDepthHorizontalLineAlignment_m)
  return _internal_slotdepthhorizontallinealignment_m();
}
inline void SiParams::_internal_set_slotdepthhorizontallinealignment_m(float value) {
  _has_bits_[0] |= 0x01000000u;
  slotdepthhorizontallinealignment_m_ = value;
}
inline void SiParams::set_slotdepthhorizontallinealignment_m(float value) {
  _internal_set_slotdepthhorizontallinealignment_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotDepthHorizontalLineAlignment_m)
}

// optional bool enableSlotShrinkingBelowUsualSizeDuringTrack = 3315;
inline bool SiParams::_internal_has_enableslotshrinkingbelowusualsizeduringtrack() const {
  bool value = (_has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_enableslotshrinkingbelowusualsizeduringtrack() const {
  return _internal_has_enableslotshrinkingbelowusualsizeduringtrack();
}
inline void SiParams::clear_enableslotshrinkingbelowusualsizeduringtrack() {
  enableslotshrinkingbelowusualsizeduringtrack_ = false;
  _has_bits_[3] &= ~0x00000100u;
}
inline bool SiParams::_internal_enableslotshrinkingbelowusualsizeduringtrack() const {
  return enableslotshrinkingbelowusualsizeduringtrack_;
}
inline bool SiParams::enableslotshrinkingbelowusualsizeduringtrack() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotShrinkingBelowUsualSizeDuringTrack)
  return _internal_enableslotshrinkingbelowusualsizeduringtrack();
}
inline void SiParams::_internal_set_enableslotshrinkingbelowusualsizeduringtrack(bool value) {
  _has_bits_[3] |= 0x00000100u;
  enableslotshrinkingbelowusualsizeduringtrack_ = value;
}
inline void SiParams::set_enableslotshrinkingbelowusualsizeduringtrack(bool value) {
  _internal_set_enableslotshrinkingbelowusualsizeduringtrack(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotShrinkingBelowUsualSizeDuringTrack)
}

// optional bool invalidateOverlappingEstablishedSlots = 490;
inline bool SiParams::_internal_has_invalidateoverlappingestablishedslots() const {
  bool value = (_has_bits_[4] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_invalidateoverlappingestablishedslots() const {
  return _internal_has_invalidateoverlappingestablishedslots();
}
inline void SiParams::clear_invalidateoverlappingestablishedslots() {
  invalidateoverlappingestablishedslots_ = false;
  _has_bits_[4] &= ~0x10000000u;
}
inline bool SiParams::_internal_invalidateoverlappingestablishedslots() const {
  return invalidateoverlappingestablishedslots_;
}
inline bool SiParams::invalidateoverlappingestablishedslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.invalidateOverlappingEstablishedSlots)
  return _internal_invalidateoverlappingestablishedslots();
}
inline void SiParams::_internal_set_invalidateoverlappingestablishedslots(bool value) {
  _has_bits_[4] |= 0x10000000u;
  invalidateoverlappingestablishedslots_ = value;
}
inline void SiParams::set_invalidateoverlappingestablishedslots(bool value) {
  _internal_set_invalidateoverlappingestablishedslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.invalidateOverlappingEstablishedSlots)
}

// optional float weightCurbOrientation = 2143;
inline bool SiParams::_internal_has_weightcurborientation() const {
  bool value = (_has_bits_[4] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_weightcurborientation() const {
  return _internal_has_weightcurborientation();
}
inline void SiParams::clear_weightcurborientation() {
  weightcurborientation_ = 0;
  _has_bits_[4] &= ~0x00200000u;
}
inline float SiParams::_internal_weightcurborientation() const {
  return weightcurborientation_;
}
inline float SiParams::weightcurborientation() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.weightCurbOrientation)
  return _internal_weightcurborientation();
}
inline void SiParams::_internal_set_weightcurborientation(float value) {
  _has_bits_[4] |= 0x00200000u;
  weightcurborientation_ = value;
}
inline void SiParams::set_weightcurborientation(float value) {
  _internal_set_weightcurborientation(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.weightCurbOrientation)
}

// optional float weightLineOrientation = 1980;
inline bool SiParams::_internal_has_weightlineorientation() const {
  bool value = (_has_bits_[4] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_weightlineorientation() const {
  return _internal_has_weightlineorientation();
}
inline void SiParams::clear_weightlineorientation() {
  weightlineorientation_ = 0;
  _has_bits_[4] &= ~0x00000040u;
}
inline float SiParams::_internal_weightlineorientation() const {
  return weightlineorientation_;
}
inline float SiParams::weightlineorientation() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.weightLineOrientation)
  return _internal_weightlineorientation();
}
inline void SiParams::_internal_set_weightlineorientation(float value) {
  _has_bits_[4] |= 0x00000040u;
  weightlineorientation_ = value;
}
inline void SiParams::set_weightlineorientation(float value) {
  _internal_set_weightlineorientation(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.weightLineOrientation)
}

// optional float minCoveragePerSideNonPar_m = 779;
inline bool SiParams::_internal_has_mincoveragepersidenonpar_m() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_mincoveragepersidenonpar_m() const {
  return _internal_has_mincoveragepersidenonpar_m();
}
inline void SiParams::clear_mincoveragepersidenonpar_m() {
  mincoveragepersidenonpar_m_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float SiParams::_internal_mincoveragepersidenonpar_m() const {
  return mincoveragepersidenonpar_m_;
}
inline float SiParams::mincoveragepersidenonpar_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minCoveragePerSideNonPar_m)
  return _internal_mincoveragepersidenonpar_m();
}
inline void SiParams::_internal_set_mincoveragepersidenonpar_m(float value) {
  _has_bits_[1] |= 0x00000020u;
  mincoveragepersidenonpar_m_ = value;
}
inline void SiParams::set_mincoveragepersidenonpar_m(float value) {
  _internal_set_mincoveragepersidenonpar_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minCoveragePerSideNonPar_m)
}

// optional bool enableSlotOrientationOnSideVLs = 1985;
inline bool SiParams::_internal_has_enableslotorientationonsidevls() const {
  bool value = (_has_bits_[4] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_enableslotorientationonsidevls() const {
  return _internal_has_enableslotorientationonsidevls();
}
inline void SiParams::clear_enableslotorientationonsidevls() {
  enableslotorientationonsidevls_ = false;
  _has_bits_[4] &= ~0x20000000u;
}
inline bool SiParams::_internal_enableslotorientationonsidevls() const {
  return enableslotorientationonsidevls_;
}
inline bool SiParams::enableslotorientationonsidevls() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotOrientationOnSideVLs)
  return _internal_enableslotorientationonsidevls();
}
inline void SiParams::_internal_set_enableslotorientationonsidevls(bool value) {
  _has_bits_[4] |= 0x20000000u;
  enableslotorientationonsidevls_ = value;
}
inline void SiParams::set_enableslotorientationonsidevls(bool value) {
  _internal_set_enableslotorientationonsidevls(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotOrientationOnSideVLs)
}

// optional bool enableSlotOrientationOnWingVLs = 3521;
inline bool SiParams::_internal_has_enableslotorientationonwingvls() const {
  bool value = (_has_bits_[4] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_enableslotorientationonwingvls() const {
  return _internal_has_enableslotorientationonwingvls();
}
inline void SiParams::clear_enableslotorientationonwingvls() {
  enableslotorientationonwingvls_ = false;
  _has_bits_[4] &= ~0x40000000u;
}
inline bool SiParams::_internal_enableslotorientationonwingvls() const {
  return enableslotorientationonwingvls_;
}
inline bool SiParams::enableslotorientationonwingvls() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotOrientationOnWingVLs)
  return _internal_enableslotorientationonwingvls();
}
inline void SiParams::_internal_set_enableslotorientationonwingvls(bool value) {
  _has_bits_[4] |= 0x40000000u;
  enableslotorientationonwingvls_ = value;
}
inline void SiParams::set_enableslotorientationonwingvls(bool value) {
  _internal_set_enableslotorientationonwingvls(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotOrientationOnWingVLs)
}

// optional float sideAlignmentROIWidth_m = 3637;
inline bool SiParams::_internal_has_sidealignmentroiwidth_m() const {
  bool value = (_has_bits_[7] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_sidealignmentroiwidth_m() const {
  return _internal_has_sidealignmentroiwidth_m();
}
inline void SiParams::clear_sidealignmentroiwidth_m() {
  sidealignmentroiwidth_m_ = 0;
  _has_bits_[7] &= ~0x80000000u;
}
inline float SiParams::_internal_sidealignmentroiwidth_m() const {
  return sidealignmentroiwidth_m_;
}
inline float SiParams::sidealignmentroiwidth_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideAlignmentROIWidth_m)
  return _internal_sidealignmentroiwidth_m();
}
inline void SiParams::_internal_set_sidealignmentroiwidth_m(float value) {
  _has_bits_[7] |= 0x80000000u;
  sidealignmentroiwidth_m_ = value;
}
inline void SiParams::set_sidealignmentroiwidth_m(float value) {
  _internal_set_sidealignmentroiwidth_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideAlignmentROIWidth_m)
}

// optional float sideAlignmentWeight_mpr = 153;
inline bool SiParams::_internal_has_sidealignmentweight_mpr() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_sidealignmentweight_mpr() const {
  return _internal_has_sidealignmentweight_mpr();
}
inline void SiParams::clear_sidealignmentweight_mpr() {
  sidealignmentweight_mpr_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float SiParams::_internal_sidealignmentweight_mpr() const {
  return sidealignmentweight_mpr_;
}
inline float SiParams::sidealignmentweight_mpr() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideAlignmentWeight_mpr)
  return _internal_sidealignmentweight_mpr();
}
inline void SiParams::_internal_set_sidealignmentweight_mpr(float value) {
  _has_bits_[0] |= 0x00000200u;
  sidealignmentweight_mpr_ = value;
}
inline void SiParams::set_sidealignmentweight_mpr(float value) {
  _internal_set_sidealignmentweight_mpr(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideAlignmentWeight_mpr)
}

// optional float wingAlignmentWeight_mpr = 2889;
inline bool SiParams::_internal_has_wingalignmentweight_mpr() const {
  bool value = (_has_bits_[6] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_wingalignmentweight_mpr() const {
  return _internal_has_wingalignmentweight_mpr();
}
inline void SiParams::clear_wingalignmentweight_mpr() {
  wingalignmentweight_mpr_ = 0;
  _has_bits_[6] &= ~0x00200000u;
}
inline float SiParams::_internal_wingalignmentweight_mpr() const {
  return wingalignmentweight_mpr_;
}
inline float SiParams::wingalignmentweight_mpr() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.wingAlignmentWeight_mpr)
  return _internal_wingalignmentweight_mpr();
}
inline void SiParams::_internal_set_wingalignmentweight_mpr(float value) {
  _has_bits_[6] |= 0x00200000u;
  wingalignmentweight_mpr_ = value;
}
inline void SiParams::set_wingalignmentweight_mpr(float value) {
  _internal_set_wingalignmentweight_mpr(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.wingAlignmentWeight_mpr)
}

// optional float minimumObstacleFittedLineLength_m = 888;
inline bool SiParams::_internal_has_minimumobstaclefittedlinelength_m() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_minimumobstaclefittedlinelength_m() const {
  return _internal_has_minimumobstaclefittedlinelength_m();
}
inline void SiParams::clear_minimumobstaclefittedlinelength_m() {
  minimumobstaclefittedlinelength_m_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline float SiParams::_internal_minimumobstaclefittedlinelength_m() const {
  return minimumobstaclefittedlinelength_m_;
}
inline float SiParams::minimumobstaclefittedlinelength_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minimumObstacleFittedLineLength_m)
  return _internal_minimumobstaclefittedlinelength_m();
}
inline void SiParams::_internal_set_minimumobstaclefittedlinelength_m(float value) {
  _has_bits_[1] |= 0x00001000u;
  minimumobstaclefittedlinelength_m_ = value;
}
inline void SiParams::set_minimumobstaclefittedlinelength_m(float value) {
  _internal_set_minimumobstaclefittedlinelength_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minimumObstacleFittedLineLength_m)
}

// optional float lineOrientationRoiDelta_m = 1754;
inline bool SiParams::_internal_has_lineorientationroidelta_m() const {
  bool value = (_has_bits_[3] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_lineorientationroidelta_m() const {
  return _internal_has_lineorientationroidelta_m();
}
inline void SiParams::clear_lineorientationroidelta_m() {
  lineorientationroidelta_m_ = 0;
  _has_bits_[3] &= ~0x00001000u;
}
inline float SiParams::_internal_lineorientationroidelta_m() const {
  return lineorientationroidelta_m_;
}
inline float SiParams::lineorientationroidelta_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lineOrientationRoiDelta_m)
  return _internal_lineorientationroidelta_m();
}
inline void SiParams::_internal_set_lineorientationroidelta_m(float value) {
  _has_bits_[3] |= 0x00001000u;
  lineorientationroidelta_m_ = value;
}
inline void SiParams::set_lineorientationroidelta_m(float value) {
  _internal_set_lineorientationroidelta_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lineOrientationRoiDelta_m)
}

// optional bool highSideDelimiterRequired = 2753;
inline bool SiParams::_internal_has_highsidedelimiterrequired() const {
  bool value = (_has_bits_[4] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_highsidedelimiterrequired() const {
  return _internal_has_highsidedelimiterrequired();
}
inline void SiParams::clear_highsidedelimiterrequired() {
  highsidedelimiterrequired_ = false;
  _has_bits_[4] &= ~0x80000000u;
}
inline bool SiParams::_internal_highsidedelimiterrequired() const {
  return highsidedelimiterrequired_;
}
inline bool SiParams::highsidedelimiterrequired() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.highSideDelimiterRequired)
  return _internal_highsidedelimiterrequired();
}
inline void SiParams::_internal_set_highsidedelimiterrequired(bool value) {
  _has_bits_[4] |= 0x80000000u;
  highsidedelimiterrequired_ = value;
}
inline void SiParams::set_highsidedelimiterrequired(bool value) {
  _internal_set_highsidedelimiterrequired(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.highSideDelimiterRequired)
}

// optional float curbObjectEvaluationRoiDepthDelta_m = 15294138;
inline bool SiParams::_internal_has_curbobjectevaluationroidepthdelta_m() const {
  bool value = (_has_bits_[9] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_curbobjectevaluationroidepthdelta_m() const {
  return _internal_has_curbobjectevaluationroidepthdelta_m();
}
inline void SiParams::clear_curbobjectevaluationroidepthdelta_m() {
  curbobjectevaluationroidepthdelta_m_ = 0;
  _has_bits_[9] &= ~0x00000008u;
}
inline float SiParams::_internal_curbobjectevaluationroidepthdelta_m() const {
  return curbobjectevaluationroidepthdelta_m_;
}
inline float SiParams::curbobjectevaluationroidepthdelta_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.curbObjectEvaluationRoiDepthDelta_m)
  return _internal_curbobjectevaluationroidepthdelta_m();
}
inline void SiParams::_internal_set_curbobjectevaluationroidepthdelta_m(float value) {
  _has_bits_[9] |= 0x00000008u;
  curbobjectevaluationroidepthdelta_m_ = value;
}
inline void SiParams::set_curbobjectevaluationroidepthdelta_m(float value) {
  _internal_set_curbobjectevaluationroidepthdelta_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.curbObjectEvaluationRoiDepthDelta_m)
}

// optional float parallelLineAllowedDeviation_rad = 2580;
inline bool SiParams::_internal_has_parallellinealloweddeviation_rad() const {
  bool value = (_has_bits_[6] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_parallellinealloweddeviation_rad() const {
  return _internal_has_parallellinealloweddeviation_rad();
}
inline void SiParams::clear_parallellinealloweddeviation_rad() {
  parallellinealloweddeviation_rad_ = 0;
  _has_bits_[6] &= ~0x00000008u;
}
inline float SiParams::_internal_parallellinealloweddeviation_rad() const {
  return parallellinealloweddeviation_rad_;
}
inline float SiParams::parallellinealloweddeviation_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelLineAllowedDeviation_rad)
  return _internal_parallellinealloweddeviation_rad();
}
inline void SiParams::_internal_set_parallellinealloweddeviation_rad(float value) {
  _has_bits_[6] |= 0x00000008u;
  parallellinealloweddeviation_rad_ = value;
}
inline void SiParams::set_parallellinealloweddeviation_rad(float value) {
  _internal_set_parallellinealloweddeviation_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelLineAllowedDeviation_rad)
}

// optional bool enlargeDynObj = 1630;
inline bool SiParams::_internal_has_enlargedynobj() const {
  bool value = (_has_bits_[4] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_enlargedynobj() const {
  return _internal_has_enlargedynobj();
}
inline void SiParams::clear_enlargedynobj() {
  enlargedynobj_ = false;
  _has_bits_[4] &= ~0x00008000u;
}
inline bool SiParams::_internal_enlargedynobj() const {
  return enlargedynobj_;
}
inline bool SiParams::enlargedynobj() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enlargeDynObj)
  return _internal_enlargedynobj();
}
inline void SiParams::_internal_set_enlargedynobj(bool value) {
  _has_bits_[4] |= 0x00008000u;
  enlargedynobj_ = value;
}
inline void SiParams::set_enlargedynobj(bool value) {
  _internal_set_enlargedynobj(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enlargeDynObj)
}

// optional float dynObjMaxVel_mps = 1975;
inline bool SiParams::_internal_has_dynobjmaxvel_mps() const {
  bool value = (_has_bits_[4] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_dynobjmaxvel_mps() const {
  return _internal_has_dynobjmaxvel_mps();
}
inline void SiParams::clear_dynobjmaxvel_mps() {
  dynobjmaxvel_mps_ = 0;
  _has_bits_[4] &= ~0x00000020u;
}
inline float SiParams::_internal_dynobjmaxvel_mps() const {
  return dynobjmaxvel_mps_;
}
inline float SiParams::dynobjmaxvel_mps() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.dynObjMaxVel_mps)
  return _internal_dynobjmaxvel_mps();
}
inline void SiParams::_internal_set_dynobjmaxvel_mps(float value) {
  _has_bits_[4] |= 0x00000020u;
  dynobjmaxvel_mps_ = value;
}
inline void SiParams::set_dynobjmaxvel_mps(float value) {
  _internal_set_dynobjmaxvel_mps(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.dynObjMaxVel_mps)
}

// optional float dynObjMaxPreviewTime_s = 2363;
inline bool SiParams::_internal_has_dynobjmaxpreviewtime_s() const {
  bool value = (_has_bits_[5] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_dynobjmaxpreviewtime_s() const {
  return _internal_has_dynobjmaxpreviewtime_s();
}
inline void SiParams::clear_dynobjmaxpreviewtime_s() {
  dynobjmaxpreviewtime_s_ = 0;
  _has_bits_[5] &= ~0x00010000u;
}
inline float SiParams::_internal_dynobjmaxpreviewtime_s() const {
  return dynobjmaxpreviewtime_s_;
}
inline float SiParams::dynobjmaxpreviewtime_s() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.dynObjMaxPreviewTime_s)
  return _internal_dynobjmaxpreviewtime_s();
}
inline void SiParams::_internal_set_dynobjmaxpreviewtime_s(float value) {
  _has_bits_[5] |= 0x00010000u;
  dynobjmaxpreviewtime_s_ = value;
}
inline void SiParams::set_dynobjmaxpreviewtime_s(float value) {
  _internal_set_dynobjmaxpreviewtime_s(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.dynObjMaxPreviewTime_s)
}

// optional uint32 dynObjMinExistenceProb_perc = 79;
inline bool SiParams::_internal_has_dynobjminexistenceprob_perc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_dynobjminexistenceprob_perc() const {
  return _internal_has_dynobjminexistenceprob_perc();
}
inline void SiParams::clear_dynobjminexistenceprob_perc() {
  dynobjminexistenceprob_perc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::_internal_dynobjminexistenceprob_perc() const {
  return dynobjminexistenceprob_perc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::dynobjminexistenceprob_perc() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.dynObjMinExistenceProb_perc)
  return _internal_dynobjminexistenceprob_perc();
}
inline void SiParams::_internal_set_dynobjminexistenceprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  dynobjminexistenceprob_perc_ = value;
}
inline void SiParams::set_dynobjminexistenceprob_perc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dynobjminexistenceprob_perc(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.dynObjMinExistenceProb_perc)
}

// optional bool doExactShiftVectorToEgoCollisionCheck = 1631;
inline bool SiParams::_internal_has_doexactshiftvectortoegocollisioncheck() const {
  bool value = (_has_bits_[4] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_doexactshiftvectortoegocollisioncheck() const {
  return _internal_has_doexactshiftvectortoegocollisioncheck();
}
inline void SiParams::clear_doexactshiftvectortoegocollisioncheck() {
  doexactshiftvectortoegocollisioncheck_ = false;
  _has_bits_[4] &= ~0x00010000u;
}
inline bool SiParams::_internal_doexactshiftvectortoegocollisioncheck() const {
  return doexactshiftvectortoegocollisioncheck_;
}
inline bool SiParams::doexactshiftvectortoegocollisioncheck() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.doExactShiftVectorToEgoCollisionCheck)
  return _internal_doexactshiftvectortoegocollisioncheck();
}
inline void SiParams::_internal_set_doexactshiftvectortoegocollisioncheck(bool value) {
  _has_bits_[4] |= 0x00010000u;
  doexactshiftvectortoegocollisioncheck_ = value;
}
inline void SiParams::set_doexactshiftvectortoegocollisioncheck(bool value) {
  _internal_set_doexactshiftvectortoegocollisioncheck(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.doExactShiftVectorToEgoCollisionCheck)
}

// optional float minSlotOpeningOffsetSideBlowUp_m = 552;
inline bool SiParams::_internal_has_minslotopeningoffsetsideblowup_m() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_minslotopeningoffsetsideblowup_m() const {
  return _internal_has_minslotopeningoffsetsideblowup_m();
}
inline void SiParams::clear_minslotopeningoffsetsideblowup_m() {
  minslotopeningoffsetsideblowup_m_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float SiParams::_internal_minslotopeningoffsetsideblowup_m() const {
  return minslotopeningoffsetsideblowup_m_;
}
inline float SiParams::minslotopeningoffsetsideblowup_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minSlotOpeningOffsetSideBlowUp_m)
  return _internal_minslotopeningoffsetsideblowup_m();
}
inline void SiParams::_internal_set_minslotopeningoffsetsideblowup_m(float value) {
  _has_bits_[0] |= 0x20000000u;
  minslotopeningoffsetsideblowup_m_ = value;
}
inline void SiParams::set_minslotopeningoffsetsideblowup_m(float value) {
  _internal_set_minslotopeningoffsetsideblowup_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minSlotOpeningOffsetSideBlowUp_m)
}

// optional float parallelSlotLineTooLongPenalty = 3503;
inline bool SiParams::_internal_has_parallelslotlinetoolongpenalty() const {
  bool value = (_has_bits_[7] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_parallelslotlinetoolongpenalty() const {
  return _internal_has_parallelslotlinetoolongpenalty();
}
inline void SiParams::clear_parallelslotlinetoolongpenalty() {
  parallelslotlinetoolongpenalty_ = 0;
  _has_bits_[7] &= ~0x08000000u;
}
inline float SiParams::_internal_parallelslotlinetoolongpenalty() const {
  return parallelslotlinetoolongpenalty_;
}
inline float SiParams::parallelslotlinetoolongpenalty() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.parallelSlotLineTooLongPenalty)
  return _internal_parallelslotlinetoolongpenalty();
}
inline void SiParams::_internal_set_parallelslotlinetoolongpenalty(float value) {
  _has_bits_[7] |= 0x08000000u;
  parallelslotlinetoolongpenalty_ = value;
}
inline void SiParams::set_parallelslotlinetoolongpenalty(float value) {
  _internal_set_parallelslotlinetoolongpenalty(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.parallelSlotLineTooLongPenalty)
}

// optional bool enableSlotLengthAdaptionToAdjacentObjects = 3682;
inline bool SiParams::_internal_has_enableslotlengthadaptiontoadjacentobjects() const {
  bool value = (_has_bits_[4] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_enableslotlengthadaptiontoadjacentobjects() const {
  return _internal_has_enableslotlengthadaptiontoadjacentobjects();
}
inline void SiParams::clear_enableslotlengthadaptiontoadjacentobjects() {
  enableslotlengthadaptiontoadjacentobjects_ = false;
  _has_bits_[4] &= ~0x00020000u;
}
inline bool SiParams::_internal_enableslotlengthadaptiontoadjacentobjects() const {
  return enableslotlengthadaptiontoadjacentobjects_;
}
inline bool SiParams::enableslotlengthadaptiontoadjacentobjects() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotLengthAdaptionToAdjacentObjects)
  return _internal_enableslotlengthadaptiontoadjacentobjects();
}
inline void SiParams::_internal_set_enableslotlengthadaptiontoadjacentobjects(bool value) {
  _has_bits_[4] |= 0x00020000u;
  enableslotlengthadaptiontoadjacentobjects_ = value;
}
inline void SiParams::set_enableslotlengthadaptiontoadjacentobjects(bool value) {
  _internal_set_enableslotlengthadaptiontoadjacentobjects(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotLengthAdaptionToAdjacentObjects)
}

// optional bool enableSlotLengthAdaptionToAdjacentLines = 1476;
inline bool SiParams::_internal_has_enableslotlengthadaptiontoadjacentlines() const {
  bool value = (_has_bits_[4] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_enableslotlengthadaptiontoadjacentlines() const {
  return _internal_has_enableslotlengthadaptiontoadjacentlines();
}
inline void SiParams::clear_enableslotlengthadaptiontoadjacentlines() {
  enableslotlengthadaptiontoadjacentlines_ = false;
  _has_bits_[4] &= ~0x00040000u;
}
inline bool SiParams::_internal_enableslotlengthadaptiontoadjacentlines() const {
  return enableslotlengthadaptiontoadjacentlines_;
}
inline bool SiParams::enableslotlengthadaptiontoadjacentlines() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotLengthAdaptionToAdjacentLines)
  return _internal_enableslotlengthadaptiontoadjacentlines();
}
inline void SiParams::_internal_set_enableslotlengthadaptiontoadjacentlines(bool value) {
  _has_bits_[4] |= 0x00040000u;
  enableslotlengthadaptiontoadjacentlines_ = value;
}
inline void SiParams::set_enableslotlengthadaptiontoadjacentlines(bool value) {
  _internal_set_enableslotlengthadaptiontoadjacentlines(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotLengthAdaptionToAdjacentLines)
}

// optional bool allowSlotExtensionOverLinesToMinOpening = 2382;
inline bool SiParams::_internal_has_allowslotextensionoverlinestominopening() const {
  bool value = (_has_bits_[3] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_allowslotextensionoverlinestominopening() const {
  return _internal_has_allowslotextensionoverlinestominopening();
}
inline void SiParams::clear_allowslotextensionoverlinestominopening() {
  allowslotextensionoverlinestominopening_ = false;
  _has_bits_[3] &= ~0x40000000u;
}
inline bool SiParams::_internal_allowslotextensionoverlinestominopening() const {
  return allowslotextensionoverlinestominopening_;
}
inline bool SiParams::allowslotextensionoverlinestominopening() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowSlotExtensionOverLinesToMinOpening)
  return _internal_allowslotextensionoverlinestominopening();
}
inline void SiParams::_internal_set_allowslotextensionoverlinestominopening(bool value) {
  _has_bits_[3] |= 0x40000000u;
  allowslotextensionoverlinestominopening_ = value;
}
inline void SiParams::set_allowslotextensionoverlinestominopening(bool value) {
  _internal_set_allowslotextensionoverlinestominopening(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowSlotExtensionOverLinesToMinOpening)
}

// optional float maxAllowedSlotExtensionOverLinesToMinOpening_m = 905;
inline bool SiParams::_internal_has_maxallowedslotextensionoverlinestominopening_m() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_maxallowedslotextensionoverlinestominopening_m() const {
  return _internal_has_maxallowedslotextensionoverlinestominopening_m();
}
inline void SiParams::clear_maxallowedslotextensionoverlinestominopening_m() {
  maxallowedslotextensionoverlinestominopening_m_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline float SiParams::_internal_maxallowedslotextensionoverlinestominopening_m() const {
  return maxallowedslotextensionoverlinestominopening_m_;
}
inline float SiParams::maxallowedslotextensionoverlinestominopening_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxAllowedSlotExtensionOverLinesToMinOpening_m)
  return _internal_maxallowedslotextensionoverlinestominopening_m();
}
inline void SiParams::_internal_set_maxallowedslotextensionoverlinestominopening_m(float value) {
  _has_bits_[1] |= 0x00004000u;
  maxallowedslotextensionoverlinestominopening_m_ = value;
}
inline void SiParams::set_maxallowedslotextensionoverlinestominopening_m(float value) {
  _internal_set_maxallowedslotextensionoverlinestominopening_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxAllowedSlotExtensionOverLinesToMinOpening_m)
}

// optional bool allowShrinkOnLinesDespiteSideObjects = 2840;
inline bool SiParams::_internal_has_allowshrinkonlinesdespitesideobjects() const {
  bool value = (_has_bits_[3] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_allowshrinkonlinesdespitesideobjects() const {
  return _internal_has_allowshrinkonlinesdespitesideobjects();
}
inline void SiParams::clear_allowshrinkonlinesdespitesideobjects() {
  allowshrinkonlinesdespitesideobjects_ = false;
  _has_bits_[3] &= ~0x80000000u;
}
inline bool SiParams::_internal_allowshrinkonlinesdespitesideobjects() const {
  return allowshrinkonlinesdespitesideobjects_;
}
inline bool SiParams::allowshrinkonlinesdespitesideobjects() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowShrinkOnLinesDespiteSideObjects)
  return _internal_allowshrinkonlinesdespitesideobjects();
}
inline void SiParams::_internal_set_allowshrinkonlinesdespitesideobjects(bool value) {
  _has_bits_[3] |= 0x80000000u;
  allowshrinkonlinesdespitesideobjects_ = value;
}
inline void SiParams::set_allowshrinkonlinesdespitesideobjects(bool value) {
  _internal_set_allowshrinkonlinesdespitesideobjects(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowShrinkOnLinesDespiteSideObjects)
}

// optional bool preferShiftToTopOnCurbObjects = 2011;
inline bool SiParams::_internal_has_prefershifttotoponcurbobjects() const {
  bool value = (_has_bits_[4] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_prefershifttotoponcurbobjects() const {
  return _internal_has_prefershifttotoponcurbobjects();
}
inline void SiParams::clear_prefershifttotoponcurbobjects() {
  prefershifttotoponcurbobjects_ = false;
  _has_bits_[4] &= ~0x00000001u;
}
inline bool SiParams::_internal_prefershifttotoponcurbobjects() const {
  return prefershifttotoponcurbobjects_;
}
inline bool SiParams::prefershifttotoponcurbobjects() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.preferShiftToTopOnCurbObjects)
  return _internal_prefershifttotoponcurbobjects();
}
inline void SiParams::_internal_set_prefershifttotoponcurbobjects(bool value) {
  _has_bits_[4] |= 0x00000001u;
  prefershifttotoponcurbobjects_ = value;
}
inline void SiParams::set_prefershifttotoponcurbobjects(bool value) {
  _internal_set_prefershifttotoponcurbobjects(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.preferShiftToTopOnCurbObjects)
}

// optional float sideShiftPenaltyForCurbObjects = 2073;
inline bool SiParams::_internal_has_sideshiftpenaltyforcurbobjects() const {
  bool value = (_has_bits_[4] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_sideshiftpenaltyforcurbobjects() const {
  return _internal_has_sideshiftpenaltyforcurbobjects();
}
inline void SiParams::clear_sideshiftpenaltyforcurbobjects() {
  sideshiftpenaltyforcurbobjects_ = 0;
  _has_bits_[4] &= ~0x00002000u;
}
inline float SiParams::_internal_sideshiftpenaltyforcurbobjects() const {
  return sideshiftpenaltyforcurbobjects_;
}
inline float SiParams::sideshiftpenaltyforcurbobjects() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideShiftPenaltyForCurbObjects)
  return _internal_sideshiftpenaltyforcurbobjects();
}
inline void SiParams::_internal_set_sideshiftpenaltyforcurbobjects(float value) {
  _has_bits_[4] |= 0x00002000u;
  sideshiftpenaltyforcurbobjects_ = value;
}
inline void SiParams::set_sideshiftpenaltyforcurbobjects(float value) {
  _internal_set_sideshiftpenaltyforcurbobjects(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideShiftPenaltyForCurbObjects)
}

// optional float preferShiftToTopRoiYBorderOffset_m = 3844;
inline bool SiParams::_internal_has_prefershifttotoproiyborderoffset_m() const {
  bool value = (_has_bits_[8] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_prefershifttotoproiyborderoffset_m() const {
  return _internal_has_prefershifttotoproiyborderoffset_m();
}
inline void SiParams::clear_prefershifttotoproiyborderoffset_m() {
  prefershifttotoproiyborderoffset_m_ = 0;
  _has_bits_[8] &= ~0x00000020u;
}
inline float SiParams::_internal_prefershifttotoproiyborderoffset_m() const {
  return prefershifttotoproiyborderoffset_m_;
}
inline float SiParams::prefershifttotoproiyborderoffset_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.preferShiftToTopRoiYBorderOffset_m)
  return _internal_prefershifttotoproiyborderoffset_m();
}
inline void SiParams::_internal_set_prefershifttotoproiyborderoffset_m(float value) {
  _has_bits_[8] |= 0x00000020u;
  prefershifttotoproiyborderoffset_m_ = value;
}
inline void SiParams::set_prefershifttotoproiyborderoffset_m(float value) {
  _internal_set_prefershifttotoproiyborderoffset_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.preferShiftToTopRoiYBorderOffset_m)
}

// optional bool enableSlotFallback = 494;
inline bool SiParams::_internal_has_enableslotfallback() const {
  bool value = (_has_bits_[4] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_enableslotfallback() const {
  return _internal_has_enableslotfallback();
}
inline void SiParams::clear_enableslotfallback() {
  enableslotfallback_ = false;
  _has_bits_[4] &= ~0x00000002u;
}
inline bool SiParams::_internal_enableslotfallback() const {
  return enableslotfallback_;
}
inline bool SiParams::enableslotfallback() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableSlotFallback)
  return _internal_enableslotfallback();
}
inline void SiParams::_internal_set_enableslotfallback(bool value) {
  _has_bits_[4] |= 0x00000002u;
  enableslotfallback_ = value;
}
inline void SiParams::set_enableslotfallback(bool value) {
  _internal_set_enableslotfallback(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableSlotFallback)
}

// optional bool enableUnspecifiedShift = 1788;
inline bool SiParams::_internal_has_enableunspecifiedshift() const {
  bool value = (_has_bits_[5] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_enableunspecifiedshift() const {
  return _internal_has_enableunspecifiedshift();
}
inline void SiParams::clear_enableunspecifiedshift() {
  enableunspecifiedshift_ = false;
  _has_bits_[5] &= ~0x00000004u;
}
inline bool SiParams::_internal_enableunspecifiedshift() const {
  return enableunspecifiedshift_;
}
inline bool SiParams::enableunspecifiedshift() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableUnspecifiedShift)
  return _internal_enableunspecifiedshift();
}
inline void SiParams::_internal_set_enableunspecifiedshift(bool value) {
  _has_bits_[5] |= 0x00000004u;
  enableunspecifiedshift_ = value;
}
inline void SiParams::set_enableunspecifiedshift(bool value) {
  _internal_set_enableunspecifiedshift(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableUnspecifiedShift)
}

// optional float penaltyForShrinkToMinDim = 551;
inline bool SiParams::_internal_has_penaltyforshrinktomindim() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_penaltyforshrinktomindim() const {
  return _internal_has_penaltyforshrinktomindim();
}
inline void SiParams::clear_penaltyforshrinktomindim() {
  penaltyforshrinktomindim_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float SiParams::_internal_penaltyforshrinktomindim() const {
  return penaltyforshrinktomindim_;
}
inline float SiParams::penaltyforshrinktomindim() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.penaltyForShrinkToMinDim)
  return _internal_penaltyforshrinktomindim();
}
inline void SiParams::_internal_set_penaltyforshrinktomindim(float value) {
  _has_bits_[0] |= 0x10000000u;
  penaltyforshrinktomindim_ = value;
}
inline void SiParams::set_penaltyforshrinktomindim(float value) {
  _internal_set_penaltyforshrinktomindim(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.penaltyForShrinkToMinDim)
}

// optional float shrinkPenaltyForClassifyingObjectAsDynamic = 2700;
inline bool SiParams::_internal_has_shrinkpenaltyforclassifyingobjectasdynamic() const {
  bool value = (_has_bits_[6] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_shrinkpenaltyforclassifyingobjectasdynamic() const {
  return _internal_has_shrinkpenaltyforclassifyingobjectasdynamic();
}
inline void SiParams::clear_shrinkpenaltyforclassifyingobjectasdynamic() {
  shrinkpenaltyforclassifyingobjectasdynamic_ = 0;
  _has_bits_[6] &= ~0x00002000u;
}
inline float SiParams::_internal_shrinkpenaltyforclassifyingobjectasdynamic() const {
  return shrinkpenaltyforclassifyingobjectasdynamic_;
}
inline float SiParams::shrinkpenaltyforclassifyingobjectasdynamic() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.shrinkPenaltyForClassifyingObjectAsDynamic)
  return _internal_shrinkpenaltyforclassifyingobjectasdynamic();
}
inline void SiParams::_internal_set_shrinkpenaltyforclassifyingobjectasdynamic(float value) {
  _has_bits_[6] |= 0x00002000u;
  shrinkpenaltyforclassifyingobjectasdynamic_ = value;
}
inline void SiParams::set_shrinkpenaltyforclassifyingobjectasdynamic(float value) {
  _internal_set_shrinkpenaltyforclassifyingobjectasdynamic(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.shrinkPenaltyForClassifyingObjectAsDynamic)
}

// optional float shrinkPenaltyForShiftBelowMin = 3594;
inline bool SiParams::_internal_has_shrinkpenaltyforshiftbelowmin() const {
  bool value = (_has_bits_[7] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_shrinkpenaltyforshiftbelowmin() const {
  return _internal_has_shrinkpenaltyforshiftbelowmin();
}
inline void SiParams::clear_shrinkpenaltyforshiftbelowmin() {
  shrinkpenaltyforshiftbelowmin_ = 0;
  _has_bits_[7] &= ~0x40000000u;
}
inline float SiParams::_internal_shrinkpenaltyforshiftbelowmin() const {
  return shrinkpenaltyforshiftbelowmin_;
}
inline float SiParams::shrinkpenaltyforshiftbelowmin() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.shrinkPenaltyForShiftBelowMin)
  return _internal_shrinkpenaltyforshiftbelowmin();
}
inline void SiParams::_internal_set_shrinkpenaltyforshiftbelowmin(float value) {
  _has_bits_[7] |= 0x40000000u;
  shrinkpenaltyforshiftbelowmin_ = value;
}
inline void SiParams::set_shrinkpenaltyforshiftbelowmin(float value) {
  _internal_set_shrinkpenaltyforshiftbelowmin(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.shrinkPenaltyForShiftBelowMin)
}

// optional float shrinkPenaltyForExceedingGivenLimits = 1354;
inline bool SiParams::_internal_has_shrinkpenaltyforexceedinggivenlimits() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_shrinkpenaltyforexceedinggivenlimits() const {
  return _internal_has_shrinkpenaltyforexceedinggivenlimits();
}
inline void SiParams::clear_shrinkpenaltyforexceedinggivenlimits() {
  shrinkpenaltyforexceedinggivenlimits_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline float SiParams::_internal_shrinkpenaltyforexceedinggivenlimits() const {
  return shrinkpenaltyforexceedinggivenlimits_;
}
inline float SiParams::shrinkpenaltyforexceedinggivenlimits() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.shrinkPenaltyForExceedingGivenLimits)
  return _internal_shrinkpenaltyforexceedinggivenlimits();
}
inline void SiParams::_internal_set_shrinkpenaltyforexceedinggivenlimits(float value) {
  _has_bits_[2] |= 0x00000200u;
  shrinkpenaltyforexceedinggivenlimits_ = value;
}
inline void SiParams::set_shrinkpenaltyforexceedinggivenlimits(float value) {
  _internal_set_shrinkpenaltyforexceedinggivenlimits(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.shrinkPenaltyForExceedingGivenLimits)
}

// optional float sideAndCurbDelimiterRoiExtension_m = 4044;
inline bool SiParams::_internal_has_sideandcurbdelimiterroiextension_m() const {
  bool value = (_has_bits_[8] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_sideandcurbdelimiterroiextension_m() const {
  return _internal_has_sideandcurbdelimiterroiextension_m();
}
inline void SiParams::clear_sideandcurbdelimiterroiextension_m() {
  sideandcurbdelimiterroiextension_m_ = 0;
  _has_bits_[8] &= ~0x00100000u;
}
inline float SiParams::_internal_sideandcurbdelimiterroiextension_m() const {
  return sideandcurbdelimiterroiextension_m_;
}
inline float SiParams::sideandcurbdelimiterroiextension_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideAndCurbDelimiterRoiExtension_m)
  return _internal_sideandcurbdelimiterroiextension_m();
}
inline void SiParams::_internal_set_sideandcurbdelimiterroiextension_m(float value) {
  _has_bits_[8] |= 0x00100000u;
  sideandcurbdelimiterroiextension_m_ = value;
}
inline void SiParams::set_sideandcurbdelimiterroiextension_m(float value) {
  _internal_set_sideandcurbdelimiterroiextension_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideAndCurbDelimiterRoiExtension_m)
}

// optional float sideAndCurbDelimiterRoiBottomShift_m = 1910;
inline bool SiParams::_internal_has_sideandcurbdelimiterroibottomshift_m() const {
  bool value = (_has_bits_[3] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_sideandcurbdelimiterroibottomshift_m() const {
  return _internal_has_sideandcurbdelimiterroibottomshift_m();
}
inline void SiParams::clear_sideandcurbdelimiterroibottomshift_m() {
  sideandcurbdelimiterroibottomshift_m_ = 0;
  _has_bits_[3] &= ~0x08000000u;
}
inline float SiParams::_internal_sideandcurbdelimiterroibottomshift_m() const {
  return sideandcurbdelimiterroibottomshift_m_;
}
inline float SiParams::sideandcurbdelimiterroibottomshift_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideAndCurbDelimiterRoiBottomShift_m)
  return _internal_sideandcurbdelimiterroibottomshift_m();
}
inline void SiParams::_internal_set_sideandcurbdelimiterroibottomshift_m(float value) {
  _has_bits_[3] |= 0x08000000u;
  sideandcurbdelimiterroibottomshift_m_ = value;
}
inline void SiParams::set_sideandcurbdelimiterroibottomshift_m(float value) {
  _internal_set_sideandcurbdelimiterroibottomshift_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideAndCurbDelimiterRoiBottomShift_m)
}

// optional float typicalOrientationOfAngledSlot_rad = 4023;
inline bool SiParams::_internal_has_typicalorientationofangledslot_rad() const {
  bool value = (_has_bits_[8] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_typicalorientationofangledslot_rad() const {
  return _internal_has_typicalorientationofangledslot_rad();
}
inline void SiParams::clear_typicalorientationofangledslot_rad() {
  typicalorientationofangledslot_rad_ = 0;
  _has_bits_[8] &= ~0x00020000u;
}
inline float SiParams::_internal_typicalorientationofangledslot_rad() const {
  return typicalorientationofangledslot_rad_;
}
inline float SiParams::typicalorientationofangledslot_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.typicalOrientationOfAngledSlot_rad)
  return _internal_typicalorientationofangledslot_rad();
}
inline void SiParams::_internal_set_typicalorientationofangledslot_rad(float value) {
  _has_bits_[8] |= 0x00020000u;
  typicalorientationofangledslot_rad_ = value;
}
inline void SiParams::set_typicalorientationofangledslot_rad(float value) {
  _internal_set_typicalorientationofangledslot_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.typicalOrientationOfAngledSlot_rad)
}

// optional bool doLineCategorization = 3392;
inline bool SiParams::_internal_has_dolinecategorization() const {
  bool value = (_has_bits_[5] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_dolinecategorization() const {
  return _internal_has_dolinecategorization();
}
inline void SiParams::clear_dolinecategorization() {
  dolinecategorization_ = false;
  _has_bits_[5] &= ~0x00000008u;
}
inline bool SiParams::_internal_dolinecategorization() const {
  return dolinecategorization_;
}
inline bool SiParams::dolinecategorization() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.doLineCategorization)
  return _internal_dolinecategorization();
}
inline void SiParams::_internal_set_dolinecategorization(bool value) {
  _has_bits_[5] |= 0x00000008u;
  dolinecategorization_ = value;
}
inline void SiParams::set_dolinecategorization(bool value) {
  _internal_set_dolinecategorization(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.doLineCategorization)
}

// optional float smallSlotOpeningPenalty = 2479;
inline bool SiParams::_internal_has_smallslotopeningpenalty() const {
  bool value = (_has_bits_[5] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_smallslotopeningpenalty() const {
  return _internal_has_smallslotopeningpenalty();
}
inline void SiParams::clear_smallslotopeningpenalty() {
  smallslotopeningpenalty_ = 0;
  _has_bits_[5] &= ~0x08000000u;
}
inline float SiParams::_internal_smallslotopeningpenalty() const {
  return smallslotopeningpenalty_;
}
inline float SiParams::smallslotopeningpenalty() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.smallSlotOpeningPenalty)
  return _internal_smallslotopeningpenalty();
}
inline void SiParams::_internal_set_smallslotopeningpenalty(float value) {
  _has_bits_[5] |= 0x08000000u;
  smallslotopeningpenalty_ = value;
}
inline void SiParams::set_smallslotopeningpenalty(float value) {
  _internal_set_smallslotopeningpenalty(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.smallSlotOpeningPenalty)
}

// optional float lcAngleCostFactor = 3988;
inline bool SiParams::_internal_has_lcanglecostfactor() const {
  bool value = (_has_bits_[8] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_lcanglecostfactor() const {
  return _internal_has_lcanglecostfactor();
}
inline void SiParams::clear_lcanglecostfactor() {
  lcanglecostfactor_ = 0;
  _has_bits_[8] &= ~0x00010000u;
}
inline float SiParams::_internal_lcanglecostfactor() const {
  return lcanglecostfactor_;
}
inline float SiParams::lcanglecostfactor() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lcAngleCostFactor)
  return _internal_lcanglecostfactor();
}
inline void SiParams::_internal_set_lcanglecostfactor(float value) {
  _has_bits_[8] |= 0x00010000u;
  lcanglecostfactor_ = value;
}
inline void SiParams::set_lcanglecostfactor(float value) {
  _internal_set_lcanglecostfactor(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lcAngleCostFactor)
}

// optional float lcLineDistCostFactor = 2853;
inline bool SiParams::_internal_has_lclinedistcostfactor() const {
  bool value = (_has_bits_[6] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_lclinedistcostfactor() const {
  return _internal_has_lclinedistcostfactor();
}
inline void SiParams::clear_lclinedistcostfactor() {
  lclinedistcostfactor_ = 0;
  _has_bits_[6] &= ~0x00020000u;
}
inline float SiParams::_internal_lclinedistcostfactor() const {
  return lclinedistcostfactor_;
}
inline float SiParams::lclinedistcostfactor() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lcLineDistCostFactor)
  return _internal_lclinedistcostfactor();
}
inline void SiParams::_internal_set_lclinedistcostfactor(float value) {
  _has_bits_[6] |= 0x00020000u;
  lclinedistcostfactor_ = value;
}
inline void SiParams::set_lclinedistcostfactor(float value) {
  _internal_set_lclinedistcostfactor(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lcLineDistCostFactor)
}

// optional float lcLineLengthCostFactor = 3908;
inline bool SiParams::_internal_has_lclinelengthcostfactor() const {
  bool value = (_has_bits_[8] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_lclinelengthcostfactor() const {
  return _internal_has_lclinelengthcostfactor();
}
inline void SiParams::clear_lclinelengthcostfactor() {
  lclinelengthcostfactor_ = 0;
  _has_bits_[8] &= ~0x00000400u;
}
inline float SiParams::_internal_lclinelengthcostfactor() const {
  return lclinelengthcostfactor_;
}
inline float SiParams::lclinelengthcostfactor() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lcLineLengthCostFactor)
  return _internal_lclinelengthcostfactor();
}
inline void SiParams::_internal_set_lclinelengthcostfactor(float value) {
  _has_bits_[8] |= 0x00000400u;
  lclinelengthcostfactor_ = value;
}
inline void SiParams::set_lclinelengthcostfactor(float value) {
  _internal_set_lclinelengthcostfactor(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lcLineLengthCostFactor)
}

// optional bool doCurbOnlyLineCategorization = 2120;
inline bool SiParams::_internal_has_docurbonlylinecategorization() const {
  bool value = (_has_bits_[5] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_docurbonlylinecategorization() const {
  return _internal_has_docurbonlylinecategorization();
}
inline void SiParams::clear_docurbonlylinecategorization() {
  docurbonlylinecategorization_ = false;
  _has_bits_[5] &= ~0x00000010u;
}
inline bool SiParams::_internal_docurbonlylinecategorization() const {
  return docurbonlylinecategorization_;
}
inline bool SiParams::docurbonlylinecategorization() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.doCurbOnlyLineCategorization)
  return _internal_docurbonlylinecategorization();
}
inline void SiParams::_internal_set_docurbonlylinecategorization(bool value) {
  _has_bits_[5] |= 0x00000010u;
  docurbonlylinecategorization_ = value;
}
inline void SiParams::set_docurbonlylinecategorization(bool value) {
  _internal_set_docurbonlylinecategorization(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.doCurbOnlyLineCategorization)
}

// optional float lcCurbOnlyAngleDiff_rad = 2739;
inline bool SiParams::_internal_has_lccurbonlyanglediff_rad() const {
  bool value = (_has_bits_[6] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_lccurbonlyanglediff_rad() const {
  return _internal_has_lccurbonlyanglediff_rad();
}
inline void SiParams::clear_lccurbonlyanglediff_rad() {
  lccurbonlyanglediff_rad_ = 0;
  _has_bits_[6] &= ~0x00008000u;
}
inline float SiParams::_internal_lccurbonlyanglediff_rad() const {
  return lccurbonlyanglediff_rad_;
}
inline float SiParams::lccurbonlyanglediff_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lcCurbOnlyAngleDiff_rad)
  return _internal_lccurbonlyanglediff_rad();
}
inline void SiParams::_internal_set_lccurbonlyanglediff_rad(float value) {
  _has_bits_[6] |= 0x00008000u;
  lccurbonlyanglediff_rad_ = value;
}
inline void SiParams::set_lccurbonlyanglediff_rad(float value) {
  _internal_set_lccurbonlyanglediff_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lcCurbOnlyAngleDiff_rad)
}

// optional float lcCurbOnlySpatialDiff_m = 3440;
inline bool SiParams::_internal_has_lccurbonlyspatialdiff_m() const {
  bool value = (_has_bits_[7] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_lccurbonlyspatialdiff_m() const {
  return _internal_has_lccurbonlyspatialdiff_m();
}
inline void SiParams::clear_lccurbonlyspatialdiff_m() {
  lccurbonlyspatialdiff_m_ = 0;
  _has_bits_[7] &= ~0x00800000u;
}
inline float SiParams::_internal_lccurbonlyspatialdiff_m() const {
  return lccurbonlyspatialdiff_m_;
}
inline float SiParams::lccurbonlyspatialdiff_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lcCurbOnlySpatialDiff_m)
  return _internal_lccurbonlyspatialdiff_m();
}
inline void SiParams::_internal_set_lccurbonlyspatialdiff_m(float value) {
  _has_bits_[7] |= 0x00800000u;
  lccurbonlyspatialdiff_m_ = value;
}
inline void SiParams::set_lccurbonlyspatialdiff_m(float value) {
  _internal_set_lccurbonlyspatialdiff_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lcCurbOnlySpatialDiff_m)
}

// optional bool ignoreLinesForSandwichSlots = 1548;
inline bool SiParams::_internal_has_ignorelinesforsandwichslots() const {
  bool value = (_has_bits_[5] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_ignorelinesforsandwichslots() const {
  return _internal_has_ignorelinesforsandwichslots();
}
inline void SiParams::clear_ignorelinesforsandwichslots() {
  ignorelinesforsandwichslots_ = false;
  _has_bits_[5] &= ~0x00000020u;
}
inline bool SiParams::_internal_ignorelinesforsandwichslots() const {
  return ignorelinesforsandwichslots_;
}
inline bool SiParams::ignorelinesforsandwichslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ignoreLinesForSandwichSlots)
  return _internal_ignorelinesforsandwichslots();
}
inline void SiParams::_internal_set_ignorelinesforsandwichslots(bool value) {
  _has_bits_[5] |= 0x00000020u;
  ignorelinesforsandwichslots_ = value;
}
inline void SiParams::set_ignorelinesforsandwichslots(bool value) {
  _internal_set_ignorelinesforsandwichslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ignoreLinesForSandwichSlots)
}

// optional bool lcNoCurbLineOptimizationIfNoCurbLc = 3610;
inline bool SiParams::_internal_has_lcnocurblineoptimizationifnocurblc() const {
  bool value = (_has_bits_[4] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_lcnocurblineoptimizationifnocurblc() const {
  return _internal_has_lcnocurblineoptimizationifnocurblc();
}
inline void SiParams::clear_lcnocurblineoptimizationifnocurblc() {
  lcnocurblineoptimizationifnocurblc_ = false;
  _has_bits_[4] &= ~0x00800000u;
}
inline bool SiParams::_internal_lcnocurblineoptimizationifnocurblc() const {
  return lcnocurblineoptimizationifnocurblc_;
}
inline bool SiParams::lcnocurblineoptimizationifnocurblc() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lcNoCurbLineOptimizationIfNoCurbLc)
  return _internal_lcnocurblineoptimizationifnocurblc();
}
inline void SiParams::_internal_set_lcnocurblineoptimizationifnocurblc(bool value) {
  _has_bits_[4] |= 0x00800000u;
  lcnocurblineoptimizationifnocurblc_ = value;
}
inline void SiParams::set_lcnocurblineoptimizationifnocurblc(bool value) {
  _internal_set_lcnocurblineoptimizationifnocurblc(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lcNoCurbLineOptimizationIfNoCurbLc)
}

// optional float sensingRange_m = 3054;
inline bool SiParams::_internal_has_sensingrange_m() const {
  bool value = (_has_bits_[7] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_sensingrange_m() const {
  return _internal_has_sensingrange_m();
}
inline void SiParams::clear_sensingrange_m() {
  sensingrange_m_ = 0;
  _has_bits_[7] &= ~0x00000010u;
}
inline float SiParams::_internal_sensingrange_m() const {
  return sensingrange_m_;
}
inline float SiParams::sensingrange_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sensingRange_m)
  return _internal_sensingrange_m();
}
inline void SiParams::_internal_set_sensingrange_m(float value) {
  _has_bits_[7] |= 0x00000010u;
  sensingrange_m_ = value;
}
inline void SiParams::set_sensingrange_m(float value) {
  _internal_set_sensingrange_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sensingRange_m)
}

// optional float slotPenetrationDepth_m = 1832;
inline bool SiParams::_internal_has_slotpenetrationdepth_m() const {
  bool value = (_has_bits_[3] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_slotpenetrationdepth_m() const {
  return _internal_has_slotpenetrationdepth_m();
}
inline void SiParams::clear_slotpenetrationdepth_m() {
  slotpenetrationdepth_m_ = 0;
  _has_bits_[3] &= ~0x00080000u;
}
inline float SiParams::_internal_slotpenetrationdepth_m() const {
  return slotpenetrationdepth_m_;
}
inline float SiParams::slotpenetrationdepth_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotPenetrationDepth_m)
  return _internal_slotpenetrationdepth_m();
}
inline void SiParams::_internal_set_slotpenetrationdepth_m(float value) {
  _has_bits_[3] |= 0x00080000u;
  slotpenetrationdepth_m_ = value;
}
inline void SiParams::set_slotpenetrationdepth_m(float value) {
  _internal_set_slotpenetrationdepth_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotPenetrationDepth_m)
}

// optional bool enableLeftSideScanning = 3159;
inline bool SiParams::_internal_has_enableleftsidescanning() const {
  bool value = (_has_bits_[4] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_enableleftsidescanning() const {
  return _internal_has_enableleftsidescanning();
}
inline void SiParams::clear_enableleftsidescanning() {
  enableleftsidescanning_ = false;
  _has_bits_[4] &= ~0x01000000u;
}
inline bool SiParams::_internal_enableleftsidescanning() const {
  return enableleftsidescanning_;
}
inline bool SiParams::enableleftsidescanning() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableLeftSideScanning)
  return _internal_enableleftsidescanning();
}
inline void SiParams::_internal_set_enableleftsidescanning(bool value) {
  _has_bits_[4] |= 0x01000000u;
  enableleftsidescanning_ = value;
}
inline void SiParams::set_enableleftsidescanning(bool value) {
  _internal_set_enableleftsidescanning(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableLeftSideScanning)
}

// optional bool enableRightSideScanning = 507;
inline bool SiParams::_internal_has_enablerightsidescanning() const {
  bool value = (_has_bits_[4] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_enablerightsidescanning() const {
  return _internal_has_enablerightsidescanning();
}
inline void SiParams::clear_enablerightsidescanning() {
  enablerightsidescanning_ = false;
  _has_bits_[4] &= ~0x02000000u;
}
inline bool SiParams::_internal_enablerightsidescanning() const {
  return enablerightsidescanning_;
}
inline bool SiParams::enablerightsidescanning() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableRightSideScanning)
  return _internal_enablerightsidescanning();
}
inline void SiParams::_internal_set_enablerightsidescanning(bool value) {
  _has_bits_[4] |= 0x02000000u;
  enablerightsidescanning_ = value;
}
inline void SiParams::set_enablerightsidescanning(bool value) {
  _internal_set_enablerightsidescanning(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableRightSideScanning)
}

// optional float sideRoiYStart_m = 93;
inline bool SiParams::_internal_has_sideroiystart_m() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_sideroiystart_m() const {
  return _internal_has_sideroiystart_m();
}
inline void SiParams::clear_sideroiystart_m() {
  sideroiystart_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SiParams::_internal_sideroiystart_m() const {
  return sideroiystart_m_;
}
inline float SiParams::sideroiystart_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideRoiYStart_m)
  return _internal_sideroiystart_m();
}
inline void SiParams::_internal_set_sideroiystart_m(float value) {
  _has_bits_[0] |= 0x00000040u;
  sideroiystart_m_ = value;
}
inline void SiParams::set_sideroiystart_m(float value) {
  _internal_set_sideroiystart_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideRoiYStart_m)
}

// optional float sideRoiYEnd_m = 235;
inline bool SiParams::_internal_has_sideroiyend_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_sideroiyend_m() const {
  return _internal_has_sideroiyend_m();
}
inline void SiParams::clear_sideroiyend_m() {
  sideroiyend_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float SiParams::_internal_sideroiyend_m() const {
  return sideroiyend_m_;
}
inline float SiParams::sideroiyend_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideRoiYEnd_m)
  return _internal_sideroiyend_m();
}
inline void SiParams::_internal_set_sideroiyend_m(float value) {
  _has_bits_[0] |= 0x00010000u;
  sideroiyend_m_ = value;
}
inline void SiParams::set_sideroiyend_m(float value) {
  _internal_set_sideroiyend_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideRoiYEnd_m)
}

// optional float sideRoiXFront_m = 3982;
inline bool SiParams::_internal_has_sideroixfront_m() const {
  bool value = (_has_bits_[8] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_sideroixfront_m() const {
  return _internal_has_sideroixfront_m();
}
inline void SiParams::clear_sideroixfront_m() {
  sideroixfront_m_ = 0;
  _has_bits_[8] &= ~0x00008000u;
}
inline float SiParams::_internal_sideroixfront_m() const {
  return sideroixfront_m_;
}
inline float SiParams::sideroixfront_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideRoiXFront_m)
  return _internal_sideroixfront_m();
}
inline void SiParams::_internal_set_sideroixfront_m(float value) {
  _has_bits_[8] |= 0x00008000u;
  sideroixfront_m_ = value;
}
inline void SiParams::set_sideroixfront_m(float value) {
  _internal_set_sideroixfront_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideRoiXFront_m)
}

// optional float sideRoiXBack_m = 784;
inline bool SiParams::_internal_has_sideroixback_m() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_sideroixback_m() const {
  return _internal_has_sideroixback_m();
}
inline void SiParams::clear_sideroixback_m() {
  sideroixback_m_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float SiParams::_internal_sideroixback_m() const {
  return sideroixback_m_;
}
inline float SiParams::sideroixback_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideRoiXBack_m)
  return _internal_sideroixback_m();
}
inline void SiParams::_internal_set_sideroixback_m(float value) {
  _has_bits_[1] |= 0x00000040u;
  sideroixback_m_ = value;
}
inline void SiParams::set_sideroixback_m(float value) {
  _internal_set_sideroixback_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideRoiXBack_m)
}

// optional bool enableFrontScanning = 1368;
inline bool SiParams::_internal_has_enablefrontscanning() const {
  bool value = (_has_bits_[4] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_enablefrontscanning() const {
  return _internal_has_enablefrontscanning();
}
inline void SiParams::clear_enablefrontscanning() {
  enablefrontscanning_ = false;
  _has_bits_[4] &= ~0x04000000u;
}
inline bool SiParams::_internal_enablefrontscanning() const {
  return enablefrontscanning_;
}
inline bool SiParams::enablefrontscanning() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableFrontScanning)
  return _internal_enablefrontscanning();
}
inline void SiParams::_internal_set_enablefrontscanning(bool value) {
  _has_bits_[4] |= 0x04000000u;
  enablefrontscanning_ = value;
}
inline void SiParams::set_enablefrontscanning(bool value) {
  _internal_set_enablefrontscanning(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableFrontScanning)
}

// optional float frontRoiYSide_m = 1875;
inline bool SiParams::_internal_has_frontroiyside_m() const {
  bool value = (_has_bits_[3] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_frontroiyside_m() const {
  return _internal_has_frontroiyside_m();
}
inline void SiParams::clear_frontroiyside_m() {
  frontroiyside_m_ = 0;
  _has_bits_[3] &= ~0x00400000u;
}
inline float SiParams::_internal_frontroiyside_m() const {
  return frontroiyside_m_;
}
inline float SiParams::frontroiyside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.frontRoiYSide_m)
  return _internal_frontroiyside_m();
}
inline void SiParams::_internal_set_frontroiyside_m(float value) {
  _has_bits_[3] |= 0x00400000u;
  frontroiyside_m_ = value;
}
inline void SiParams::set_frontroiyside_m(float value) {
  _internal_set_frontroiyside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.frontRoiYSide_m)
}

// optional float frontRoiXStart_m = 1415;
inline bool SiParams::_internal_has_frontroixstart_m() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_frontroixstart_m() const {
  return _internal_has_frontroixstart_m();
}
inline void SiParams::clear_frontroixstart_m() {
  frontroixstart_m_ = 0;
  _has_bits_[2] &= ~0x00008000u;
}
inline float SiParams::_internal_frontroixstart_m() const {
  return frontroixstart_m_;
}
inline float SiParams::frontroixstart_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.frontRoiXStart_m)
  return _internal_frontroixstart_m();
}
inline void SiParams::_internal_set_frontroixstart_m(float value) {
  _has_bits_[2] |= 0x00008000u;
  frontroixstart_m_ = value;
}
inline void SiParams::set_frontroixstart_m(float value) {
  _internal_set_frontroixstart_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.frontRoiXStart_m)
}

// optional float frontRoiXEnd_m = 3084;
inline bool SiParams::_internal_has_frontroixend_m() const {
  bool value = (_has_bits_[7] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_frontroixend_m() const {
  return _internal_has_frontroixend_m();
}
inline void SiParams::clear_frontroixend_m() {
  frontroixend_m_ = 0;
  _has_bits_[7] &= ~0x00000020u;
}
inline float SiParams::_internal_frontroixend_m() const {
  return frontroixend_m_;
}
inline float SiParams::frontroixend_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.frontRoiXEnd_m)
  return _internal_frontroixend_m();
}
inline void SiParams::_internal_set_frontroixend_m(float value) {
  _has_bits_[7] |= 0x00000020u;
  frontroixend_m_ = value;
}
inline void SiParams::set_frontroixend_m(float value) {
  _internal_set_frontroixend_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.frontRoiXEnd_m)
}

// optional bool allowNarrowSlotsScan = 1727;
inline bool SiParams::_internal_has_allownarrowslotsscan() const {
  bool value = (_has_bits_[5] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_allownarrowslotsscan() const {
  return _internal_has_allownarrowslotsscan();
}
inline void SiParams::clear_allownarrowslotsscan() {
  allownarrowslotsscan_ = false;
  _has_bits_[5] &= ~0x00020000u;
}
inline bool SiParams::_internal_allownarrowslotsscan() const {
  return allownarrowslotsscan_;
}
inline bool SiParams::allownarrowslotsscan() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowNarrowSlotsScan)
  return _internal_allownarrowslotsscan();
}
inline void SiParams::_internal_set_allownarrowslotsscan(bool value) {
  _has_bits_[5] |= 0x00020000u;
  allownarrowslotsscan_ = value;
}
inline void SiParams::set_allownarrowslotsscan(bool value) {
  _internal_set_allownarrowslotsscan(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowNarrowSlotsScan)
}

// optional float lineOpeningDelimiterMaxRoadProtrusion_m = 3234;
inline bool SiParams::_internal_has_lineopeningdelimitermaxroadprotrusion_m() const {
  bool value = (_has_bits_[7] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_lineopeningdelimitermaxroadprotrusion_m() const {
  return _internal_has_lineopeningdelimitermaxroadprotrusion_m();
}
inline void SiParams::clear_lineopeningdelimitermaxroadprotrusion_m() {
  lineopeningdelimitermaxroadprotrusion_m_ = 0;
  _has_bits_[7] &= ~0x00008000u;
}
inline float SiParams::_internal_lineopeningdelimitermaxroadprotrusion_m() const {
  return lineopeningdelimitermaxroadprotrusion_m_;
}
inline float SiParams::lineopeningdelimitermaxroadprotrusion_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lineOpeningDelimiterMaxRoadProtrusion_m)
  return _internal_lineopeningdelimitermaxroadprotrusion_m();
}
inline void SiParams::_internal_set_lineopeningdelimitermaxroadprotrusion_m(float value) {
  _has_bits_[7] |= 0x00008000u;
  lineopeningdelimitermaxroadprotrusion_m_ = value;
}
inline void SiParams::set_lineopeningdelimitermaxroadprotrusion_m(float value) {
  _internal_set_lineopeningdelimitermaxroadprotrusion_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lineOpeningDelimiterMaxRoadProtrusion_m)
}

// optional float lineOpeningDelimiterToCurbProjectionFactor = 1257;
inline bool SiParams::_internal_has_lineopeningdelimitertocurbprojectionfactor() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_lineopeningdelimitertocurbprojectionfactor() const {
  return _internal_has_lineopeningdelimitertocurbprojectionfactor();
}
inline void SiParams::clear_lineopeningdelimitertocurbprojectionfactor() {
  lineopeningdelimitertocurbprojectionfactor_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline float SiParams::_internal_lineopeningdelimitertocurbprojectionfactor() const {
  return lineopeningdelimitertocurbprojectionfactor_;
}
inline float SiParams::lineopeningdelimitertocurbprojectionfactor() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.lineOpeningDelimiterToCurbProjectionFactor)
  return _internal_lineopeningdelimitertocurbprojectionfactor();
}
inline void SiParams::_internal_set_lineopeningdelimitertocurbprojectionfactor(float value) {
  _has_bits_[2] |= 0x00000020u;
  lineopeningdelimitertocurbprojectionfactor_ = value;
}
inline void SiParams::set_lineopeningdelimitertocurbprojectionfactor(float value) {
  _internal_set_lineopeningdelimitertocurbprojectionfactor(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.lineOpeningDelimiterToCurbProjectionFactor)
}

// optional bool enableCnnWheelStoppers = 3141;
inline bool SiParams::_internal_has_enablecnnwheelstoppers() const {
  bool value = (_has_bits_[5] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_enablecnnwheelstoppers() const {
  return _internal_has_enablecnnwheelstoppers();
}
inline void SiParams::clear_enablecnnwheelstoppers() {
  enablecnnwheelstoppers_ = false;
  _has_bits_[5] &= ~0x00040000u;
}
inline bool SiParams::_internal_enablecnnwheelstoppers() const {
  return enablecnnwheelstoppers_;
}
inline bool SiParams::enablecnnwheelstoppers() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableCnnWheelStoppers)
  return _internal_enablecnnwheelstoppers();
}
inline void SiParams::_internal_set_enablecnnwheelstoppers(bool value) {
  _has_bits_[5] |= 0x00040000u;
  enablecnnwheelstoppers_ = value;
}
inline void SiParams::set_enablecnnwheelstoppers(bool value) {
  _internal_set_enablecnnwheelstoppers(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableCnnWheelStoppers)
}

// optional bool enableCnnWheelStopperStatObjVerification = 1382;
inline bool SiParams::_internal_has_enablecnnwheelstopperstatobjverification() const {
  bool value = (_has_bits_[5] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_enablecnnwheelstopperstatobjverification() const {
  return _internal_has_enablecnnwheelstopperstatobjverification();
}
inline void SiParams::clear_enablecnnwheelstopperstatobjverification() {
  enablecnnwheelstopperstatobjverification_ = false;
  _has_bits_[5] &= ~0x00080000u;
}
inline bool SiParams::_internal_enablecnnwheelstopperstatobjverification() const {
  return enablecnnwheelstopperstatobjverification_;
}
inline bool SiParams::enablecnnwheelstopperstatobjverification() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableCnnWheelStopperStatObjVerification)
  return _internal_enablecnnwheelstopperstatobjverification();
}
inline void SiParams::_internal_set_enablecnnwheelstopperstatobjverification(bool value) {
  _has_bits_[5] |= 0x00080000u;
  enablecnnwheelstopperstatobjverification_ = value;
}
inline void SiParams::set_enablecnnwheelstopperstatobjverification(bool value) {
  _internal_set_enablecnnwheelstopperstatobjverification(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableCnnWheelStopperStatObjVerification)
}

// optional float allowedWsPosOutsideSlot_m = 913;
inline bool SiParams::_internal_has_allowedwsposoutsideslot_m() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_allowedwsposoutsideslot_m() const {
  return _internal_has_allowedwsposoutsideslot_m();
}
inline void SiParams::clear_allowedwsposoutsideslot_m() {
  allowedwsposoutsideslot_m_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline float SiParams::_internal_allowedwsposoutsideslot_m() const {
  return allowedwsposoutsideslot_m_;
}
inline float SiParams::allowedwsposoutsideslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowedWsPosOutsideSlot_m)
  return _internal_allowedwsposoutsideslot_m();
}
inline void SiParams::_internal_set_allowedwsposoutsideslot_m(float value) {
  _has_bits_[1] |= 0x00008000u;
  allowedwsposoutsideslot_m_ = value;
}
inline void SiParams::set_allowedwsposoutsideslot_m(float value) {
  _internal_set_allowedwsposoutsideslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowedWsPosOutsideSlot_m)
}

// optional bool wsStatObjIgnoreEvaluation = 3340;
inline bool SiParams::_internal_has_wsstatobjignoreevaluation() const {
  bool value = (_has_bits_[5] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_wsstatobjignoreevaluation() const {
  return _internal_has_wsstatobjignoreevaluation();
}
inline void SiParams::clear_wsstatobjignoreevaluation() {
  wsstatobjignoreevaluation_ = false;
  _has_bits_[5] &= ~0x00100000u;
}
inline bool SiParams::_internal_wsstatobjignoreevaluation() const {
  return wsstatobjignoreevaluation_;
}
inline bool SiParams::wsstatobjignoreevaluation() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.wsStatObjIgnoreEvaluation)
  return _internal_wsstatobjignoreevaluation();
}
inline void SiParams::_internal_set_wsstatobjignoreevaluation(bool value) {
  _has_bits_[5] |= 0x00100000u;
  wsstatobjignoreevaluation_ = value;
}
inline void SiParams::set_wsstatobjignoreevaluation(bool value) {
  _internal_set_wsstatobjignoreevaluation(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.wsStatObjIgnoreEvaluation)
}

// optional float allowedDistToExistingWsWithWlSuppression_m = 1590;
inline bool SiParams::_internal_has_alloweddisttoexistingwswithwlsuppression_m() const {
  bool value = (_has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_alloweddisttoexistingwswithwlsuppression_m() const {
  return _internal_has_alloweddisttoexistingwswithwlsuppression_m();
}
inline void SiParams::clear_alloweddisttoexistingwswithwlsuppression_m() {
  alloweddisttoexistingwswithwlsuppression_m_ = 0;
  _has_bits_[3] &= ~0x00000008u;
}
inline float SiParams::_internal_alloweddisttoexistingwswithwlsuppression_m() const {
  return alloweddisttoexistingwswithwlsuppression_m_;
}
inline float SiParams::alloweddisttoexistingwswithwlsuppression_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowedDistToExistingWsWithWlSuppression_m)
  return _internal_alloweddisttoexistingwswithwlsuppression_m();
}
inline void SiParams::_internal_set_alloweddisttoexistingwswithwlsuppression_m(float value) {
  _has_bits_[3] |= 0x00000008u;
  alloweddisttoexistingwswithwlsuppression_m_ = value;
}
inline void SiParams::set_alloweddisttoexistingwswithwlsuppression_m(float value) {
  _internal_set_alloweddisttoexistingwswithwlsuppression_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowedDistToExistingWsWithWlSuppression_m)
}

// optional float allowedDistToExistingWsWithoutWlSuppression_m = 1249;
inline bool SiParams::_internal_has_alloweddisttoexistingwswithoutwlsuppression_m() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_alloweddisttoexistingwswithoutwlsuppression_m() const {
  return _internal_has_alloweddisttoexistingwswithoutwlsuppression_m();
}
inline void SiParams::clear_alloweddisttoexistingwswithoutwlsuppression_m() {
  alloweddisttoexistingwswithoutwlsuppression_m_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline float SiParams::_internal_alloweddisttoexistingwswithoutwlsuppression_m() const {
  return alloweddisttoexistingwswithoutwlsuppression_m_;
}
inline float SiParams::alloweddisttoexistingwswithoutwlsuppression_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowedDistToExistingWsWithoutWlSuppression_m)
  return _internal_alloweddisttoexistingwswithoutwlsuppression_m();
}
inline void SiParams::_internal_set_alloweddisttoexistingwswithoutwlsuppression_m(float value) {
  _has_bits_[2] |= 0x00000010u;
  alloweddisttoexistingwswithoutwlsuppression_m_ = value;
}
inline void SiParams::set_alloweddisttoexistingwswithoutwlsuppression_m(float value) {
  _internal_set_alloweddisttoexistingwswithoutwlsuppression_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowedDistToExistingWsWithoutWlSuppression_m)
}

// optional uint32 integrationMessagesLevel_nu = 757;
inline bool SiParams::_internal_has_integrationmessageslevel_nu() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_integrationmessageslevel_nu() const {
  return _internal_has_integrationmessageslevel_nu();
}
inline void SiParams::clear_integrationmessageslevel_nu() {
  integrationmessageslevel_nu_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::_internal_integrationmessageslevel_nu() const {
  return integrationmessageslevel_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::integrationmessageslevel_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.integrationMessagesLevel_nu)
  return _internal_integrationmessageslevel_nu();
}
inline void SiParams::_internal_set_integrationmessageslevel_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  integrationmessageslevel_nu_ = value;
}
inline void SiParams::set_integrationmessageslevel_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_integrationmessageslevel_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.integrationMessagesLevel_nu)
}

// optional uint32 integrationMessagesComponent_nu = 610;
inline bool SiParams::_internal_has_integrationmessagescomponent_nu() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_integrationmessagescomponent_nu() const {
  return _internal_has_integrationmessagescomponent_nu();
}
inline void SiParams::clear_integrationmessagescomponent_nu() {
  integrationmessagescomponent_nu_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::_internal_integrationmessagescomponent_nu() const {
  return integrationmessagescomponent_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::integrationmessagescomponent_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.integrationMessagesComponent_nu)
  return _internal_integrationmessagescomponent_nu();
}
inline void SiParams::_internal_set_integrationmessagescomponent_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  integrationmessagescomponent_nu_ = value;
}
inline void SiParams::set_integrationmessagescomponent_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_integrationmessagescomponent_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.integrationMessagesComponent_nu)
}

// optional float collFunctionRoiWidthDelta_m = 974;
inline bool SiParams::_internal_has_collfunctionroiwidthdelta_m() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_collfunctionroiwidthdelta_m() const {
  return _internal_has_collfunctionroiwidthdelta_m();
}
inline void SiParams::clear_collfunctionroiwidthdelta_m() {
  collfunctionroiwidthdelta_m_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline float SiParams::_internal_collfunctionroiwidthdelta_m() const {
  return collfunctionroiwidthdelta_m_;
}
inline float SiParams::collfunctionroiwidthdelta_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.collFunctionRoiWidthDelta_m)
  return _internal_collfunctionroiwidthdelta_m();
}
inline void SiParams::_internal_set_collfunctionroiwidthdelta_m(float value) {
  _has_bits_[1] |= 0x00080000u;
  collfunctionroiwidthdelta_m_ = value;
}
inline void SiParams::set_collfunctionroiwidthdelta_m(float value) {
  _internal_set_collfunctionroiwidthdelta_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.collFunctionRoiWidthDelta_m)
}

// optional float collFunctionRoiLengthDelta_m = 919;
inline bool SiParams::_internal_has_collfunctionroilengthdelta_m() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_collfunctionroilengthdelta_m() const {
  return _internal_has_collfunctionroilengthdelta_m();
}
inline void SiParams::clear_collfunctionroilengthdelta_m() {
  collfunctionroilengthdelta_m_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline float SiParams::_internal_collfunctionroilengthdelta_m() const {
  return collfunctionroilengthdelta_m_;
}
inline float SiParams::collfunctionroilengthdelta_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.collFunctionRoiLengthDelta_m)
  return _internal_collfunctionroilengthdelta_m();
}
inline void SiParams::_internal_set_collfunctionroilengthdelta_m(float value) {
  _has_bits_[1] |= 0x00010000u;
  collfunctionroilengthdelta_m_ = value;
}
inline void SiParams::set_collfunctionroilengthdelta_m(float value) {
  _internal_set_collfunctionroilengthdelta_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.collFunctionRoiLengthDelta_m)
}

// optional float barrierDelimiterWidth_m = 3039;
inline bool SiParams::_internal_has_barrierdelimiterwidth_m() const {
  bool value = (_has_bits_[7] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_barrierdelimiterwidth_m() const {
  return _internal_has_barrierdelimiterwidth_m();
}
inline void SiParams::clear_barrierdelimiterwidth_m() {
  barrierdelimiterwidth_m_ = 0;
  _has_bits_[7] &= ~0x00000004u;
}
inline float SiParams::_internal_barrierdelimiterwidth_m() const {
  return barrierdelimiterwidth_m_;
}
inline float SiParams::barrierdelimiterwidth_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.barrierDelimiterWidth_m)
  return _internal_barrierdelimiterwidth_m();
}
inline void SiParams::_internal_set_barrierdelimiterwidth_m(float value) {
  _has_bits_[7] |= 0x00000004u;
  barrierdelimiterwidth_m_ = value;
}
inline void SiParams::set_barrierdelimiterwidth_m(float value) {
  _internal_set_barrierdelimiterwidth_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.barrierDelimiterWidth_m)
}

// optional float minBarrierDelimiterLength_m = 1558;
inline bool SiParams::_internal_has_minbarrierdelimiterlength_m() const {
  bool value = (_has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_minbarrierdelimiterlength_m() const {
  return _internal_has_minbarrierdelimiterlength_m();
}
inline void SiParams::clear_minbarrierdelimiterlength_m() {
  minbarrierdelimiterlength_m_ = 0;
  _has_bits_[2] &= ~0x08000000u;
}
inline float SiParams::_internal_minbarrierdelimiterlength_m() const {
  return minbarrierdelimiterlength_m_;
}
inline float SiParams::minbarrierdelimiterlength_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minBarrierDelimiterLength_m)
  return _internal_minbarrierdelimiterlength_m();
}
inline void SiParams::_internal_set_minbarrierdelimiterlength_m(float value) {
  _has_bits_[2] |= 0x08000000u;
  minbarrierdelimiterlength_m_ = value;
}
inline void SiParams::set_minbarrierdelimiterlength_m(float value) {
  _internal_set_minbarrierdelimiterlength_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minBarrierDelimiterLength_m)
}

// optional float minBarrierPointOverhang_m = 90;
inline bool SiParams::_internal_has_minbarrierpointoverhang_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_minbarrierpointoverhang_m() const {
  return _internal_has_minbarrierpointoverhang_m();
}
inline void SiParams::clear_minbarrierpointoverhang_m() {
  minbarrierpointoverhang_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float SiParams::_internal_minbarrierpointoverhang_m() const {
  return minbarrierpointoverhang_m_;
}
inline float SiParams::minbarrierpointoverhang_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minBarrierPointOverhang_m)
  return _internal_minbarrierpointoverhang_m();
}
inline void SiParams::_internal_set_minbarrierpointoverhang_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  minbarrierpointoverhang_m_ = value;
}
inline void SiParams::set_minbarrierpointoverhang_m(float value) {
  _internal_set_minbarrierpointoverhang_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minBarrierPointOverhang_m)
}

// optional float delZoneRoadMaxRelToVehWidthPar_nu = 1533;
inline bool SiParams::_internal_has_delzoneroadmaxreltovehwidthpar_nu() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_delzoneroadmaxreltovehwidthpar_nu() const {
  return _internal_has_delzoneroadmaxreltovehwidthpar_nu();
}
inline void SiParams::clear_delzoneroadmaxreltovehwidthpar_nu() {
  delzoneroadmaxreltovehwidthpar_nu_ = 0;
  _has_bits_[2] &= ~0x04000000u;
}
inline float SiParams::_internal_delzoneroadmaxreltovehwidthpar_nu() const {
  return delzoneroadmaxreltovehwidthpar_nu_;
}
inline float SiParams::delzoneroadmaxreltovehwidthpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneRoadMaxRelToVehWidthPar_nu)
  return _internal_delzoneroadmaxreltovehwidthpar_nu();
}
inline void SiParams::_internal_set_delzoneroadmaxreltovehwidthpar_nu(float value) {
  _has_bits_[2] |= 0x04000000u;
  delzoneroadmaxreltovehwidthpar_nu_ = value;
}
inline void SiParams::set_delzoneroadmaxreltovehwidthpar_nu(float value) {
  _internal_set_delzoneroadmaxreltovehwidthpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneRoadMaxRelToVehWidthPar_nu)
}

// optional float delZoneRoadMaxRelToVehLengthNonPar_nu = 3847;
inline bool SiParams::_internal_has_delzoneroadmaxreltovehlengthnonpar_nu() const {
  bool value = (_has_bits_[8] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_delzoneroadmaxreltovehlengthnonpar_nu() const {
  return _internal_has_delzoneroadmaxreltovehlengthnonpar_nu();
}
inline void SiParams::clear_delzoneroadmaxreltovehlengthnonpar_nu() {
  delzoneroadmaxreltovehlengthnonpar_nu_ = 0;
  _has_bits_[8] &= ~0x00000040u;
}
inline float SiParams::_internal_delzoneroadmaxreltovehlengthnonpar_nu() const {
  return delzoneroadmaxreltovehlengthnonpar_nu_;
}
inline float SiParams::delzoneroadmaxreltovehlengthnonpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneRoadMaxRelToVehLengthNonPar_nu)
  return _internal_delzoneroadmaxreltovehlengthnonpar_nu();
}
inline void SiParams::_internal_set_delzoneroadmaxreltovehlengthnonpar_nu(float value) {
  _has_bits_[8] |= 0x00000040u;
  delzoneroadmaxreltovehlengthnonpar_nu_ = value;
}
inline void SiParams::set_delzoneroadmaxreltovehlengthnonpar_nu(float value) {
  _internal_set_delzoneroadmaxreltovehlengthnonpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneRoadMaxRelToVehLengthNonPar_nu)
}

// optional float delZoneRoadFactorPar_nu = 2770;
inline bool SiParams::_internal_has_delzoneroadfactorpar_nu() const {
  bool value = (_has_bits_[6] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_delzoneroadfactorpar_nu() const {
  return _internal_has_delzoneroadfactorpar_nu();
}
inline void SiParams::clear_delzoneroadfactorpar_nu() {
  delzoneroadfactorpar_nu_ = 0;
  _has_bits_[6] &= ~0x00010000u;
}
inline float SiParams::_internal_delzoneroadfactorpar_nu() const {
  return delzoneroadfactorpar_nu_;
}
inline float SiParams::delzoneroadfactorpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneRoadFactorPar_nu)
  return _internal_delzoneroadfactorpar_nu();
}
inline void SiParams::_internal_set_delzoneroadfactorpar_nu(float value) {
  _has_bits_[6] |= 0x00010000u;
  delzoneroadfactorpar_nu_ = value;
}
inline void SiParams::set_delzoneroadfactorpar_nu(float value) {
  _internal_set_delzoneroadfactorpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneRoadFactorPar_nu)
}

// optional float delZoneRoadFactorNonPar_nu = 1967;
inline bool SiParams::_internal_has_delzoneroadfactornonpar_nu() const {
  bool value = (_has_bits_[4] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_delzoneroadfactornonpar_nu() const {
  return _internal_has_delzoneroadfactornonpar_nu();
}
inline void SiParams::clear_delzoneroadfactornonpar_nu() {
  delzoneroadfactornonpar_nu_ = 0;
  _has_bits_[4] &= ~0x00000004u;
}
inline float SiParams::_internal_delzoneroadfactornonpar_nu() const {
  return delzoneroadfactornonpar_nu_;
}
inline float SiParams::delzoneroadfactornonpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneRoadFactorNonPar_nu)
  return _internal_delzoneroadfactornonpar_nu();
}
inline void SiParams::_internal_set_delzoneroadfactornonpar_nu(float value) {
  _has_bits_[4] |= 0x00000004u;
  delzoneroadfactornonpar_nu_ = value;
}
inline void SiParams::set_delzoneroadfactornonpar_nu(float value) {
  _internal_set_delzoneroadfactornonpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneRoadFactorNonPar_nu)
}

// optional float delZoneRoadMinDistNonPar_m = 976;
inline bool SiParams::_internal_has_delzoneroadmindistnonpar_m() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_delzoneroadmindistnonpar_m() const {
  return _internal_has_delzoneroadmindistnonpar_m();
}
inline void SiParams::clear_delzoneroadmindistnonpar_m() {
  delzoneroadmindistnonpar_m_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline float SiParams::_internal_delzoneroadmindistnonpar_m() const {
  return delzoneroadmindistnonpar_m_;
}
inline float SiParams::delzoneroadmindistnonpar_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneRoadMinDistNonPar_m)
  return _internal_delzoneroadmindistnonpar_m();
}
inline void SiParams::_internal_set_delzoneroadmindistnonpar_m(float value) {
  _has_bits_[1] |= 0x00100000u;
  delzoneroadmindistnonpar_m_ = value;
}
inline void SiParams::set_delzoneroadmindistnonpar_m(float value) {
  _internal_set_delzoneroadmindistnonpar_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneRoadMinDistNonPar_m)
}

// optional float delZoneRoadMinDistPar_m = 1695;
inline bool SiParams::_internal_has_delzoneroadmindistpar_m() const {
  bool value = (_has_bits_[3] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_delzoneroadmindistpar_m() const {
  return _internal_has_delzoneroadmindistpar_m();
}
inline void SiParams::clear_delzoneroadmindistpar_m() {
  delzoneroadmindistpar_m_ = 0;
  _has_bits_[3] &= ~0x00000200u;
}
inline float SiParams::_internal_delzoneroadmindistpar_m() const {
  return delzoneroadmindistpar_m_;
}
inline float SiParams::delzoneroadmindistpar_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneRoadMinDistPar_m)
  return _internal_delzoneroadmindistpar_m();
}
inline void SiParams::_internal_set_delzoneroadmindistpar_m(float value) {
  _has_bits_[3] |= 0x00000200u;
  delzoneroadmindistpar_m_ = value;
}
inline void SiParams::set_delzoneroadmindistpar_m(float value) {
  _internal_set_delzoneroadmindistpar_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneRoadMinDistPar_m)
}

// optional float delZoneCurbMaxRelToVehWidthPar_nu = 1221;
inline bool SiParams::_internal_has_delzonecurbmaxreltovehwidthpar_nu() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_delzonecurbmaxreltovehwidthpar_nu() const {
  return _internal_has_delzonecurbmaxreltovehwidthpar_nu();
}
inline void SiParams::clear_delzonecurbmaxreltovehwidthpar_nu() {
  delzonecurbmaxreltovehwidthpar_nu_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float SiParams::_internal_delzonecurbmaxreltovehwidthpar_nu() const {
  return delzonecurbmaxreltovehwidthpar_nu_;
}
inline float SiParams::delzonecurbmaxreltovehwidthpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneCurbMaxRelToVehWidthPar_nu)
  return _internal_delzonecurbmaxreltovehwidthpar_nu();
}
inline void SiParams::_internal_set_delzonecurbmaxreltovehwidthpar_nu(float value) {
  _has_bits_[2] |= 0x00000001u;
  delzonecurbmaxreltovehwidthpar_nu_ = value;
}
inline void SiParams::set_delzonecurbmaxreltovehwidthpar_nu(float value) {
  _internal_set_delzonecurbmaxreltovehwidthpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneCurbMaxRelToVehWidthPar_nu)
}

// optional float delZoneCurbMaxRelToVehLengthNonPar_nu = 1463;
inline bool SiParams::_internal_has_delzonecurbmaxreltovehlengthnonpar_nu() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_delzonecurbmaxreltovehlengthnonpar_nu() const {
  return _internal_has_delzonecurbmaxreltovehlengthnonpar_nu();
}
inline void SiParams::clear_delzonecurbmaxreltovehlengthnonpar_nu() {
  delzonecurbmaxreltovehlengthnonpar_nu_ = 0;
  _has_bits_[2] &= ~0x01000000u;
}
inline float SiParams::_internal_delzonecurbmaxreltovehlengthnonpar_nu() const {
  return delzonecurbmaxreltovehlengthnonpar_nu_;
}
inline float SiParams::delzonecurbmaxreltovehlengthnonpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneCurbMaxRelToVehLengthNonPar_nu)
  return _internal_delzonecurbmaxreltovehlengthnonpar_nu();
}
inline void SiParams::_internal_set_delzonecurbmaxreltovehlengthnonpar_nu(float value) {
  _has_bits_[2] |= 0x01000000u;
  delzonecurbmaxreltovehlengthnonpar_nu_ = value;
}
inline void SiParams::set_delzonecurbmaxreltovehlengthnonpar_nu(float value) {
  _internal_set_delzonecurbmaxreltovehlengthnonpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneCurbMaxRelToVehLengthNonPar_nu)
}

// optional float delZoneCurbFactorPar_nu = 469;
inline bool SiParams::_internal_has_delzonecurbfactorpar_nu() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_delzonecurbfactorpar_nu() const {
  return _internal_has_delzonecurbfactorpar_nu();
}
inline void SiParams::clear_delzonecurbfactorpar_nu() {
  delzonecurbfactorpar_nu_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float SiParams::_internal_delzonecurbfactorpar_nu() const {
  return delzonecurbfactorpar_nu_;
}
inline float SiParams::delzonecurbfactorpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneCurbFactorPar_nu)
  return _internal_delzonecurbfactorpar_nu();
}
inline void SiParams::_internal_set_delzonecurbfactorpar_nu(float value) {
  _has_bits_[0] |= 0x00800000u;
  delzonecurbfactorpar_nu_ = value;
}
inline void SiParams::set_delzonecurbfactorpar_nu(float value) {
  _internal_set_delzonecurbfactorpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneCurbFactorPar_nu)
}

// optional float delZoneCurbFactorNonPar_nu = 1442;
inline bool SiParams::_internal_has_delzonecurbfactornonpar_nu() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_delzonecurbfactornonpar_nu() const {
  return _internal_has_delzonecurbfactornonpar_nu();
}
inline void SiParams::clear_delzonecurbfactornonpar_nu() {
  delzonecurbfactornonpar_nu_ = 0;
  _has_bits_[2] &= ~0x00200000u;
}
inline float SiParams::_internal_delzonecurbfactornonpar_nu() const {
  return delzonecurbfactornonpar_nu_;
}
inline float SiParams::delzonecurbfactornonpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneCurbFactorNonPar_nu)
  return _internal_delzonecurbfactornonpar_nu();
}
inline void SiParams::_internal_set_delzonecurbfactornonpar_nu(float value) {
  _has_bits_[2] |= 0x00200000u;
  delzonecurbfactornonpar_nu_ = value;
}
inline void SiParams::set_delzonecurbfactornonpar_nu(float value) {
  _internal_set_delzonecurbfactornonpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneCurbFactorNonPar_nu)
}

// optional float delZoneLeftRightMaxRelToVehLengthPar_nu = 236;
inline bool SiParams::_internal_has_delzoneleftrightmaxreltovehlengthpar_nu() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_delzoneleftrightmaxreltovehlengthpar_nu() const {
  return _internal_has_delzoneleftrightmaxreltovehlengthpar_nu();
}
inline void SiParams::clear_delzoneleftrightmaxreltovehlengthpar_nu() {
  delzoneleftrightmaxreltovehlengthpar_nu_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float SiParams::_internal_delzoneleftrightmaxreltovehlengthpar_nu() const {
  return delzoneleftrightmaxreltovehlengthpar_nu_;
}
inline float SiParams::delzoneleftrightmaxreltovehlengthpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneLeftRightMaxRelToVehLengthPar_nu)
  return _internal_delzoneleftrightmaxreltovehlengthpar_nu();
}
inline void SiParams::_internal_set_delzoneleftrightmaxreltovehlengthpar_nu(float value) {
  _has_bits_[0] |= 0x00020000u;
  delzoneleftrightmaxreltovehlengthpar_nu_ = value;
}
inline void SiParams::set_delzoneleftrightmaxreltovehlengthpar_nu(float value) {
  _internal_set_delzoneleftrightmaxreltovehlengthpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneLeftRightMaxRelToVehLengthPar_nu)
}

// optional float delZoneLeftRightFactorNonPar_nu = 1139;
inline bool SiParams::_internal_has_delzoneleftrightfactornonpar_nu() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_delzoneleftrightfactornonpar_nu() const {
  return _internal_has_delzoneleftrightfactornonpar_nu();
}
inline void SiParams::clear_delzoneleftrightfactornonpar_nu() {
  delzoneleftrightfactornonpar_nu_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline float SiParams::_internal_delzoneleftrightfactornonpar_nu() const {
  return delzoneleftrightfactornonpar_nu_;
}
inline float SiParams::delzoneleftrightfactornonpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneLeftRightFactorNonPar_nu)
  return _internal_delzoneleftrightfactornonpar_nu();
}
inline void SiParams::_internal_set_delzoneleftrightfactornonpar_nu(float value) {
  _has_bits_[1] |= 0x08000000u;
  delzoneleftrightfactornonpar_nu_ = value;
}
inline void SiParams::set_delzoneleftrightfactornonpar_nu(float value) {
  _internal_set_delzoneleftrightfactornonpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneLeftRightFactorNonPar_nu)
}

// optional float delZoneLeftRightMaxRelToVehWidthNonPar_nu = 3109;
inline bool SiParams::_internal_has_delzoneleftrightmaxreltovehwidthnonpar_nu() const {
  bool value = (_has_bits_[7] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_delzoneleftrightmaxreltovehwidthnonpar_nu() const {
  return _internal_has_delzoneleftrightmaxreltovehwidthnonpar_nu();
}
inline void SiParams::clear_delzoneleftrightmaxreltovehwidthnonpar_nu() {
  delzoneleftrightmaxreltovehwidthnonpar_nu_ = 0;
  _has_bits_[7] &= ~0x00000200u;
}
inline float SiParams::_internal_delzoneleftrightmaxreltovehwidthnonpar_nu() const {
  return delzoneleftrightmaxreltovehwidthnonpar_nu_;
}
inline float SiParams::delzoneleftrightmaxreltovehwidthnonpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneLeftRightMaxRelToVehWidthNonPar_nu)
  return _internal_delzoneleftrightmaxreltovehwidthnonpar_nu();
}
inline void SiParams::_internal_set_delzoneleftrightmaxreltovehwidthnonpar_nu(float value) {
  _has_bits_[7] |= 0x00000200u;
  delzoneleftrightmaxreltovehwidthnonpar_nu_ = value;
}
inline void SiParams::set_delzoneleftrightmaxreltovehwidthnonpar_nu(float value) {
  _internal_set_delzoneleftrightmaxreltovehwidthnonpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneLeftRightMaxRelToVehWidthNonPar_nu)
}

// optional float delZoneLeftRightFactorPar_nu = 1290;
inline bool SiParams::_internal_has_delzoneleftrightfactorpar_nu() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_delzoneleftrightfactorpar_nu() const {
  return _internal_has_delzoneleftrightfactorpar_nu();
}
inline void SiParams::clear_delzoneleftrightfactorpar_nu() {
  delzoneleftrightfactorpar_nu_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline float SiParams::_internal_delzoneleftrightfactorpar_nu() const {
  return delzoneleftrightfactorpar_nu_;
}
inline float SiParams::delzoneleftrightfactorpar_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZoneLeftRightFactorPar_nu)
  return _internal_delzoneleftrightfactorpar_nu();
}
inline void SiParams::_internal_set_delzoneleftrightfactorpar_nu(float value) {
  _has_bits_[2] |= 0x00000080u;
  delzoneleftrightfactorpar_nu_ = value;
}
inline void SiParams::set_delzoneleftrightfactorpar_nu(float value) {
  _internal_set_delzoneleftrightfactorpar_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZoneLeftRightFactorPar_nu)
}

// optional float thDelimiterDist_m = 1609;
inline bool SiParams::_internal_has_thdelimiterdist_m() const {
  bool value = (_has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_thdelimiterdist_m() const {
  return _internal_has_thdelimiterdist_m();
}
inline void SiParams::clear_thdelimiterdist_m() {
  thdelimiterdist_m_ = 0;
  _has_bits_[3] &= ~0x00000010u;
}
inline float SiParams::_internal_thdelimiterdist_m() const {
  return thdelimiterdist_m_;
}
inline float SiParams::thdelimiterdist_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.thDelimiterDist_m)
  return _internal_thdelimiterdist_m();
}
inline void SiParams::_internal_set_thdelimiterdist_m(float value) {
  _has_bits_[3] |= 0x00000010u;
  thdelimiterdist_m_ = value;
}
inline void SiParams::set_thdelimiterdist_m(float value) {
  _internal_set_thdelimiterdist_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.thDelimiterDist_m)
}

// optional float insideZoneDist_m = 1458;
inline bool SiParams::_internal_has_insidezonedist_m() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_insidezonedist_m() const {
  return _internal_has_insidezonedist_m();
}
inline void SiParams::clear_insidezonedist_m() {
  insidezonedist_m_ = 0;
  _has_bits_[2] &= ~0x00800000u;
}
inline float SiParams::_internal_insidezonedist_m() const {
  return insidezonedist_m_;
}
inline float SiParams::insidezonedist_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.insideZoneDist_m)
  return _internal_insidezonedist_m();
}
inline void SiParams::_internal_set_insidezonedist_m(float value) {
  _has_bits_[2] |= 0x00800000u;
  insidezonedist_m_ = value;
}
inline void SiParams::set_insidezonedist_m(float value) {
  _internal_set_insidezonedist_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.insideZoneDist_m)
}

// optional float minRequiredDelimiterProjectionRatio_nu = 1046;
inline bool SiParams::_internal_has_minrequireddelimiterprojectionratio_nu() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_minrequireddelimiterprojectionratio_nu() const {
  return _internal_has_minrequireddelimiterprojectionratio_nu();
}
inline void SiParams::clear_minrequireddelimiterprojectionratio_nu() {
  minrequireddelimiterprojectionratio_nu_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline float SiParams::_internal_minrequireddelimiterprojectionratio_nu() const {
  return minrequireddelimiterprojectionratio_nu_;
}
inline float SiParams::minrequireddelimiterprojectionratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minRequiredDelimiterProjectionRatio_nu)
  return _internal_minrequireddelimiterprojectionratio_nu();
}
inline void SiParams::_internal_set_minrequireddelimiterprojectionratio_nu(float value) {
  _has_bits_[1] |= 0x00800000u;
  minrequireddelimiterprojectionratio_nu_ = value;
}
inline void SiParams::set_minrequireddelimiterprojectionratio_nu(float value) {
  _internal_set_minrequireddelimiterprojectionratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minRequiredDelimiterProjectionRatio_nu)
}

// optional bool enableInsideObjectPenetrationDepth = 1300;
inline bool SiParams::_internal_has_enableinsideobjectpenetrationdepth() const {
  bool value = (_has_bits_[3] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_enableinsideobjectpenetrationdepth() const {
  return _internal_has_enableinsideobjectpenetrationdepth();
}
inline void SiParams::clear_enableinsideobjectpenetrationdepth() {
  enableinsideobjectpenetrationdepth_ = false;
  _has_bits_[3] &= ~0x00800000u;
}
inline bool SiParams::_internal_enableinsideobjectpenetrationdepth() const {
  return enableinsideobjectpenetrationdepth_;
}
inline bool SiParams::enableinsideobjectpenetrationdepth() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.enableInsideObjectPenetrationDepth)
  return _internal_enableinsideobjectpenetrationdepth();
}
inline void SiParams::_internal_set_enableinsideobjectpenetrationdepth(bool value) {
  _has_bits_[3] |= 0x00800000u;
  enableinsideobjectpenetrationdepth_ = value;
}
inline void SiParams::set_enableinsideobjectpenetrationdepth(bool value) {
  _internal_set_enableinsideobjectpenetrationdepth(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.enableInsideObjectPenetrationDepth)
}

// optional float insideObjectMaxProjectionLength_m = 3865;
inline bool SiParams::_internal_has_insideobjectmaxprojectionlength_m() const {
  bool value = (_has_bits_[8] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_insideobjectmaxprojectionlength_m() const {
  return _internal_has_insideobjectmaxprojectionlength_m();
}
inline void SiParams::clear_insideobjectmaxprojectionlength_m() {
  insideobjectmaxprojectionlength_m_ = 0;
  _has_bits_[8] &= ~0x00000100u;
}
inline float SiParams::_internal_insideobjectmaxprojectionlength_m() const {
  return insideobjectmaxprojectionlength_m_;
}
inline float SiParams::insideobjectmaxprojectionlength_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.insideObjectMaxProjectionLength_m)
  return _internal_insideobjectmaxprojectionlength_m();
}
inline void SiParams::_internal_set_insideobjectmaxprojectionlength_m(float value) {
  _has_bits_[8] |= 0x00000100u;
  insideobjectmaxprojectionlength_m_ = value;
}
inline void SiParams::set_insideobjectmaxprojectionlength_m(float value) {
  _internal_set_insideobjectmaxprojectionlength_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.insideObjectMaxProjectionLength_m)
}

// optional bool vlProjectOntoBoxIfFailed = 1532;
inline bool SiParams::_internal_has_vlprojectontoboxiffailed() const {
  bool value = (_has_bits_[3] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_vlprojectontoboxiffailed() const {
  return _internal_has_vlprojectontoboxiffailed();
}
inline void SiParams::clear_vlprojectontoboxiffailed() {
  vlprojectontoboxiffailed_ = false;
  _has_bits_[3] &= ~0x01000000u;
}
inline bool SiParams::_internal_vlprojectontoboxiffailed() const {
  return vlprojectontoboxiffailed_;
}
inline bool SiParams::vlprojectontoboxiffailed() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlProjectOntoBoxIfFailed)
  return _internal_vlprojectontoboxiffailed();
}
inline void SiParams::_internal_set_vlprojectontoboxiffailed(bool value) {
  _has_bits_[3] |= 0x01000000u;
  vlprojectontoboxiffailed_ = value;
}
inline void SiParams::set_vlprojectontoboxiffailed(bool value) {
  _internal_set_vlprojectontoboxiffailed(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlProjectOntoBoxIfFailed)
}

// optional float vlMaxTotalAngle_rad = 2683;
inline bool SiParams::_internal_has_vlmaxtotalangle_rad() const {
  bool value = (_has_bits_[6] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_vlmaxtotalangle_rad() const {
  return _internal_has_vlmaxtotalangle_rad();
}
inline void SiParams::clear_vlmaxtotalangle_rad() {
  vlmaxtotalangle_rad_ = 0;
  _has_bits_[6] &= ~0x00000080u;
}
inline float SiParams::_internal_vlmaxtotalangle_rad() const {
  return vlmaxtotalangle_rad_;
}
inline float SiParams::vlmaxtotalangle_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMaxTotalAngle_rad)
  return _internal_vlmaxtotalangle_rad();
}
inline void SiParams::_internal_set_vlmaxtotalangle_rad(float value) {
  _has_bits_[6] |= 0x00000080u;
  vlmaxtotalangle_rad_ = value;
}
inline void SiParams::set_vlmaxtotalangle_rad(float value) {
  _internal_set_vlmaxtotalangle_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMaxTotalAngle_rad)
}

// optional float vlMaxNextEdgeAngle_rad = 3965;
inline bool SiParams::_internal_has_vlmaxnextedgeangle_rad() const {
  bool value = (_has_bits_[8] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_vlmaxnextedgeangle_rad() const {
  return _internal_has_vlmaxnextedgeangle_rad();
}
inline void SiParams::clear_vlmaxnextedgeangle_rad() {
  vlmaxnextedgeangle_rad_ = 0;
  _has_bits_[8] &= ~0x00002000u;
}
inline float SiParams::_internal_vlmaxnextedgeangle_rad() const {
  return vlmaxnextedgeangle_rad_;
}
inline float SiParams::vlmaxnextedgeangle_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMaxNextEdgeAngle_rad)
  return _internal_vlmaxnextedgeangle_rad();
}
inline void SiParams::_internal_set_vlmaxnextedgeangle_rad(float value) {
  _has_bits_[8] |= 0x00002000u;
  vlmaxnextedgeangle_rad_ = value;
}
inline void SiParams::set_vlmaxnextedgeangle_rad(float value) {
  _internal_set_vlmaxnextedgeangle_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMaxNextEdgeAngle_rad)
}

// optional float vlMinVirtualLineLengthPerpSide_m = 1326;
inline bool SiParams::_internal_has_vlminvirtuallinelengthperpside_m() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_vlminvirtuallinelengthperpside_m() const {
  return _internal_has_vlminvirtuallinelengthperpside_m();
}
inline void SiParams::clear_vlminvirtuallinelengthperpside_m() {
  vlminvirtuallinelengthperpside_m_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline float SiParams::_internal_vlminvirtuallinelengthperpside_m() const {
  return vlminvirtuallinelengthperpside_m_;
}
inline float SiParams::vlminvirtuallinelengthperpside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMinVirtualLineLengthPerpSide_m)
  return _internal_vlminvirtuallinelengthperpside_m();
}
inline void SiParams::_internal_set_vlminvirtuallinelengthperpside_m(float value) {
  _has_bits_[2] |= 0x00000100u;
  vlminvirtuallinelengthperpside_m_ = value;
}
inline void SiParams::set_vlminvirtuallinelengthperpside_m(float value) {
  _internal_set_vlminvirtuallinelengthperpside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMinVirtualLineLengthPerpSide_m)
}

// optional float vlMinVirtualLineLengthParSide_m = 372;
inline bool SiParams::_internal_has_vlminvirtuallinelengthparside_m() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_vlminvirtuallinelengthparside_m() const {
  return _internal_has_vlminvirtuallinelengthparside_m();
}
inline void SiParams::clear_vlminvirtuallinelengthparside_m() {
  vlminvirtuallinelengthparside_m_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float SiParams::_internal_vlminvirtuallinelengthparside_m() const {
  return vlminvirtuallinelengthparside_m_;
}
inline float SiParams::vlminvirtuallinelengthparside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMinVirtualLineLengthParSide_m)
  return _internal_vlminvirtuallinelengthparside_m();
}
inline void SiParams::_internal_set_vlminvirtuallinelengthparside_m(float value) {
  _has_bits_[0] |= 0x00200000u;
  vlminvirtuallinelengthparside_m_ = value;
}
inline void SiParams::set_vlminvirtuallinelengthparside_m(float value) {
  _internal_set_vlminvirtuallinelengthparside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMinVirtualLineLengthParSide_m)
}

// optional float vlMinVirtualLineLengthCurb_m = 3337;
inline bool SiParams::_internal_has_vlminvirtuallinelengthcurb_m() const {
  bool value = (_has_bits_[7] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_vlminvirtuallinelengthcurb_m() const {
  return _internal_has_vlminvirtuallinelengthcurb_m();
}
inline void SiParams::clear_vlminvirtuallinelengthcurb_m() {
  vlminvirtuallinelengthcurb_m_ = 0;
  _has_bits_[7] &= ~0x00040000u;
}
inline float SiParams::_internal_vlminvirtuallinelengthcurb_m() const {
  return vlminvirtuallinelengthcurb_m_;
}
inline float SiParams::vlminvirtuallinelengthcurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMinVirtualLineLengthCurb_m)
  return _internal_vlminvirtuallinelengthcurb_m();
}
inline void SiParams::_internal_set_vlminvirtuallinelengthcurb_m(float value) {
  _has_bits_[7] |= 0x00040000u;
  vlminvirtuallinelengthcurb_m_ = value;
}
inline void SiParams::set_vlminvirtuallinelengthcurb_m(float value) {
  _internal_set_vlminvirtuallinelengthcurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMinVirtualLineLengthCurb_m)
}

// optional float vlMinVirtualLineLengthRoad_m = 514;
inline bool SiParams::_internal_has_vlminvirtuallinelengthroad_m() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_vlminvirtuallinelengthroad_m() const {
  return _internal_has_vlminvirtuallinelengthroad_m();
}
inline void SiParams::clear_vlminvirtuallinelengthroad_m() {
  vlminvirtuallinelengthroad_m_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float SiParams::_internal_vlminvirtuallinelengthroad_m() const {
  return vlminvirtuallinelengthroad_m_;
}
inline float SiParams::vlminvirtuallinelengthroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMinVirtualLineLengthRoad_m)
  return _internal_vlminvirtuallinelengthroad_m();
}
inline void SiParams::_internal_set_vlminvirtuallinelengthroad_m(float value) {
  _has_bits_[0] |= 0x04000000u;
  vlminvirtuallinelengthroad_m_ = value;
}
inline void SiParams::set_vlminvirtuallinelengthroad_m(float value) {
  _internal_set_vlminvirtuallinelengthroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMinVirtualLineLengthRoad_m)
}

// optional bool vlDoRoadInsideOptimization = 739;
inline bool SiParams::_internal_has_vldoroadinsideoptimization() const {
  bool value = (_has_bits_[3] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_vldoroadinsideoptimization() const {
  return _internal_has_vldoroadinsideoptimization();
}
inline void SiParams::clear_vldoroadinsideoptimization() {
  vldoroadinsideoptimization_ = false;
  _has_bits_[3] &= ~0x02000000u;
}
inline bool SiParams::_internal_vldoroadinsideoptimization() const {
  return vldoroadinsideoptimization_;
}
inline bool SiParams::vldoroadinsideoptimization() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlDoRoadInsideOptimization)
  return _internal_vldoroadinsideoptimization();
}
inline void SiParams::_internal_set_vldoroadinsideoptimization(bool value) {
  _has_bits_[3] |= 0x02000000u;
  vldoroadinsideoptimization_ = value;
}
inline void SiParams::set_vldoroadinsideoptimization(bool value) {
  _internal_set_vldoroadinsideoptimization(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlDoRoadInsideOptimization)
}

// optional bool vlUseRoadFacingForNonParallelSlots = 4010;
inline bool SiParams::_internal_has_vluseroadfacingfornonparallelslots() const {
  bool value = (_has_bits_[3] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_vluseroadfacingfornonparallelslots() const {
  return _internal_has_vluseroadfacingfornonparallelslots();
}
inline void SiParams::clear_vluseroadfacingfornonparallelslots() {
  vluseroadfacingfornonparallelslots_ = false;
  _has_bits_[3] &= ~0x04000000u;
}
inline bool SiParams::_internal_vluseroadfacingfornonparallelslots() const {
  return vluseroadfacingfornonparallelslots_;
}
inline bool SiParams::vluseroadfacingfornonparallelslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlUseRoadFacingForNonParallelSlots)
  return _internal_vluseroadfacingfornonparallelslots();
}
inline void SiParams::_internal_set_vluseroadfacingfornonparallelslots(bool value) {
  _has_bits_[3] |= 0x04000000u;
  vluseroadfacingfornonparallelslots_ = value;
}
inline void SiParams::set_vluseroadfacingfornonparallelslots(bool value) {
  _internal_set_vluseroadfacingfornonparallelslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlUseRoadFacingForNonParallelSlots)
}

// optional float vlMinLengthStartDirectionSq_m = 2860;
inline bool SiParams::_internal_has_vlminlengthstartdirectionsq_m() const {
  bool value = (_has_bits_[6] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_vlminlengthstartdirectionsq_m() const {
  return _internal_has_vlminlengthstartdirectionsq_m();
}
inline void SiParams::clear_vlminlengthstartdirectionsq_m() {
  vlminlengthstartdirectionsq_m_ = 0;
  _has_bits_[6] &= ~0x00080000u;
}
inline float SiParams::_internal_vlminlengthstartdirectionsq_m() const {
  return vlminlengthstartdirectionsq_m_;
}
inline float SiParams::vlminlengthstartdirectionsq_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMinLengthStartDirectionSq_m)
  return _internal_vlminlengthstartdirectionsq_m();
}
inline void SiParams::_internal_set_vlminlengthstartdirectionsq_m(float value) {
  _has_bits_[6] |= 0x00080000u;
  vlminlengthstartdirectionsq_m_ = value;
}
inline void SiParams::set_vlminlengthstartdirectionsq_m(float value) {
  _internal_set_vlminlengthstartdirectionsq_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMinLengthStartDirectionSq_m)
}

// optional float vlInsideLargerThanRoadFactor = 718;
inline bool SiParams::_internal_has_vlinsidelargerthanroadfactor() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_vlinsidelargerthanroadfactor() const {
  return _internal_has_vlinsidelargerthanroadfactor();
}
inline void SiParams::clear_vlinsidelargerthanroadfactor() {
  vlinsidelargerthanroadfactor_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline float SiParams::_internal_vlinsidelargerthanroadfactor() const {
  return vlinsidelargerthanroadfactor_;
}
inline float SiParams::vlinsidelargerthanroadfactor() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlInsideLargerThanRoadFactor)
  return _internal_vlinsidelargerthanroadfactor();
}
inline void SiParams::_internal_set_vlinsidelargerthanroadfactor(float value) {
  _has_bits_[1] |= 0x00000008u;
  vlinsidelargerthanroadfactor_ = value;
}
inline void SiParams::set_vlinsidelargerthanroadfactor(float value) {
  _internal_set_vlinsidelargerthanroadfactor(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlInsideLargerThanRoadFactor)
}

// optional bool vlUseMaxAngleToParkingBoxEdge = 522962;
inline bool SiParams::_internal_has_vlusemaxangletoparkingboxedge() const {
  bool value = (_has_bits_[8] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_vlusemaxangletoparkingboxedge() const {
  return _internal_has_vlusemaxangletoparkingboxedge();
}
inline void SiParams::clear_vlusemaxangletoparkingboxedge() {
  vlusemaxangletoparkingboxedge_ = false;
  _has_bits_[8] &= ~0x00200000u;
}
inline bool SiParams::_internal_vlusemaxangletoparkingboxedge() const {
  return vlusemaxangletoparkingboxedge_;
}
inline bool SiParams::vlusemaxangletoparkingboxedge() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlUseMaxAngleToParkingBoxEdge)
  return _internal_vlusemaxangletoparkingboxedge();
}
inline void SiParams::_internal_set_vlusemaxangletoparkingboxedge(bool value) {
  _has_bits_[8] |= 0x00200000u;
  vlusemaxangletoparkingboxedge_ = value;
}
inline void SiParams::set_vlusemaxangletoparkingboxedge(bool value) {
  _internal_set_vlusemaxangletoparkingboxedge(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlUseMaxAngleToParkingBoxEdge)
}

// optional float vlMaxAngleToParkingBoxEdge_rad = 3851;
inline bool SiParams::_internal_has_vlmaxangletoparkingboxedge_rad() const {
  bool value = (_has_bits_[8] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_vlmaxangletoparkingboxedge_rad() const {
  return _internal_has_vlmaxangletoparkingboxedge_rad();
}
inline void SiParams::clear_vlmaxangletoparkingboxedge_rad() {
  vlmaxangletoparkingboxedge_rad_ = 0;
  _has_bits_[8] &= ~0x00000080u;
}
inline float SiParams::_internal_vlmaxangletoparkingboxedge_rad() const {
  return vlmaxangletoparkingboxedge_rad_;
}
inline float SiParams::vlmaxangletoparkingboxedge_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMaxAngleToParkingBoxEdge_rad)
  return _internal_vlmaxangletoparkingboxedge_rad();
}
inline void SiParams::_internal_set_vlmaxangletoparkingboxedge_rad(float value) {
  _has_bits_[8] |= 0x00000080u;
  vlmaxangletoparkingboxedge_rad_ = value;
}
inline void SiParams::set_vlmaxangletoparkingboxedge_rad(float value) {
  _internal_set_vlmaxangletoparkingboxedge_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMaxAngleToParkingBoxEdge_rad)
}

// optional bool slotExpansion = 3436;
inline bool SiParams::_internal_has_slotexpansion() const {
  bool value = (_has_bits_[8] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_slotexpansion() const {
  return _internal_has_slotexpansion();
}
inline void SiParams::clear_slotexpansion() {
  slotexpansion_ = false;
  _has_bits_[8] &= ~0x00400000u;
}
inline bool SiParams::_internal_slotexpansion() const {
  return slotexpansion_;
}
inline bool SiParams::slotexpansion() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotExpansion)
  return _internal_slotexpansion();
}
inline void SiParams::_internal_set_slotexpansion(bool value) {
  _has_bits_[8] |= 0x00400000u;
  slotexpansion_ = value;
}
inline void SiParams::set_slotexpansion(bool value) {
  _internal_set_slotexpansion(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotExpansion)
}

// optional bool slotExpansionOnLines = 3304;
inline bool SiParams::_internal_has_slotexpansiononlines() const {
  bool value = (_has_bits_[8] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_slotexpansiononlines() const {
  return _internal_has_slotexpansiononlines();
}
inline void SiParams::clear_slotexpansiononlines() {
  slotexpansiononlines_ = false;
  _has_bits_[8] &= ~0x00800000u;
}
inline bool SiParams::_internal_slotexpansiononlines() const {
  return slotexpansiononlines_;
}
inline bool SiParams::slotexpansiononlines() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotExpansionOnLines)
  return _internal_slotexpansiononlines();
}
inline void SiParams::_internal_set_slotexpansiononlines(bool value) {
  _has_bits_[8] |= 0x00800000u;
  slotexpansiononlines_ = value;
}
inline void SiParams::set_slotexpansiononlines(bool value) {
  _internal_set_slotexpansiononlines(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotExpansionOnLines)
}

// optional uint32 slotExpFrameCounterStable_nu = 3095;
inline bool SiParams::_internal_has_slotexpframecounterstable_nu() const {
  bool value = (_has_bits_[7] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_slotexpframecounterstable_nu() const {
  return _internal_has_slotexpframecounterstable_nu();
}
inline void SiParams::clear_slotexpframecounterstable_nu() {
  slotexpframecounterstable_nu_ = 0u;
  _has_bits_[7] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::_internal_slotexpframecounterstable_nu() const {
  return slotexpframecounterstable_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::slotexpframecounterstable_nu() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotExpFrameCounterStable_nu)
  return _internal_slotexpframecounterstable_nu();
}
inline void SiParams::_internal_set_slotexpframecounterstable_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[7] |= 0x00000040u;
  slotexpframecounterstable_nu_ = value;
}
inline void SiParams::set_slotexpframecounterstable_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slotexpframecounterstable_nu(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotExpFrameCounterStable_nu)
}

// optional float slotExpMaxAngleDiff_rad = 11519704;
inline bool SiParams::_internal_has_slotexpmaxanglediff_rad() const {
  bool value = (_has_bits_[9] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_slotexpmaxanglediff_rad() const {
  return _internal_has_slotexpmaxanglediff_rad();
}
inline void SiParams::clear_slotexpmaxanglediff_rad() {
  slotexpmaxanglediff_rad_ = 0;
  _has_bits_[9] &= ~0x00000002u;
}
inline float SiParams::_internal_slotexpmaxanglediff_rad() const {
  return slotexpmaxanglediff_rad_;
}
inline float SiParams::slotexpmaxanglediff_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotExpMaxAngleDiff_rad)
  return _internal_slotexpmaxanglediff_rad();
}
inline void SiParams::_internal_set_slotexpmaxanglediff_rad(float value) {
  _has_bits_[9] |= 0x00000002u;
  slotexpmaxanglediff_rad_ = value;
}
inline void SiParams::set_slotexpmaxanglediff_rad(float value) {
  _internal_set_slotexpmaxanglediff_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotExpMaxAngleDiff_rad)
}

// optional float slotExpMaxTriangleExpansion_m = 2427;
inline bool SiParams::_internal_has_slotexpmaxtriangleexpansion_m() const {
  bool value = (_has_bits_[5] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_slotexpmaxtriangleexpansion_m() const {
  return _internal_has_slotexpmaxtriangleexpansion_m();
}
inline void SiParams::clear_slotexpmaxtriangleexpansion_m() {
  slotexpmaxtriangleexpansion_m_ = 0;
  _has_bits_[5] &= ~0x00400000u;
}
inline float SiParams::_internal_slotexpmaxtriangleexpansion_m() const {
  return slotexpmaxtriangleexpansion_m_;
}
inline float SiParams::slotexpmaxtriangleexpansion_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotExpMaxTriangleExpansion_m)
  return _internal_slotexpmaxtriangleexpansion_m();
}
inline void SiParams::_internal_set_slotexpmaxtriangleexpansion_m(float value) {
  _has_bits_[5] |= 0x00400000u;
  slotexpmaxtriangleexpansion_m_ = value;
}
inline void SiParams::set_slotexpmaxtriangleexpansion_m(float value) {
  _internal_set_slotexpmaxtriangleexpansion_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotExpMaxTriangleExpansion_m)
}

// optional float slotExpMinTriangleExpansion_rad = 3099;
inline bool SiParams::_internal_has_slotexpmintriangleexpansion_rad() const {
  bool value = (_has_bits_[7] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_slotexpmintriangleexpansion_rad() const {
  return _internal_has_slotexpmintriangleexpansion_rad();
}
inline void SiParams::clear_slotexpmintriangleexpansion_rad() {
  slotexpmintriangleexpansion_rad_ = 0;
  _has_bits_[7] &= ~0x00000080u;
}
inline float SiParams::_internal_slotexpmintriangleexpansion_rad() const {
  return slotexpmintriangleexpansion_rad_;
}
inline float SiParams::slotexpmintriangleexpansion_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotExpMinTriangleExpansion_rad)
  return _internal_slotexpmintriangleexpansion_rad();
}
inline void SiParams::_internal_set_slotexpmintriangleexpansion_rad(float value) {
  _has_bits_[7] |= 0x00000080u;
  slotexpmintriangleexpansion_rad_ = value;
}
inline void SiParams::set_slotexpmintriangleexpansion_rad(float value) {
  _internal_set_slotexpmintriangleexpansion_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotExpMinTriangleExpansion_rad)
}

// optional float slotExpansionSideRoiWidth_m = 1245;
inline bool SiParams::_internal_has_slotexpansionsideroiwidth_m() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_slotexpansionsideroiwidth_m() const {
  return _internal_has_slotexpansionsideroiwidth_m();
}
inline void SiParams::clear_slotexpansionsideroiwidth_m() {
  slotexpansionsideroiwidth_m_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float SiParams::_internal_slotexpansionsideroiwidth_m() const {
  return slotexpansionsideroiwidth_m_;
}
inline float SiParams::slotexpansionsideroiwidth_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotExpansionSideRoiWidth_m)
  return _internal_slotexpansionsideroiwidth_m();
}
inline void SiParams::_internal_set_slotexpansionsideroiwidth_m(float value) {
  _has_bits_[2] |= 0x00000008u;
  slotexpansionsideroiwidth_m_ = value;
}
inline void SiParams::set_slotexpansionsideroiwidth_m(float value) {
  _internal_set_slotexpansionsideroiwidth_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotExpansionSideRoiWidth_m)
}

// optional float relevantObjectMinBoxSide_m = 897;
inline bool SiParams::_internal_has_relevantobjectminboxside_m() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_relevantobjectminboxside_m() const {
  return _internal_has_relevantobjectminboxside_m();
}
inline void SiParams::clear_relevantobjectminboxside_m() {
  relevantobjectminboxside_m_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline float SiParams::_internal_relevantobjectminboxside_m() const {
  return relevantobjectminboxside_m_;
}
inline float SiParams::relevantobjectminboxside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.relevantObjectMinBoxSide_m)
  return _internal_relevantobjectminboxside_m();
}
inline void SiParams::_internal_set_relevantobjectminboxside_m(float value) {
  _has_bits_[1] |= 0x00002000u;
  relevantobjectminboxside_m_ = value;
}
inline void SiParams::set_relevantobjectminboxside_m(float value) {
  _internal_set_relevantobjectminboxside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.relevantObjectMinBoxSide_m)
}

// optional bool doObjectInflation = 477;
inline bool SiParams::_internal_has_doobjectinflation() const {
  bool value = (_has_bits_[8] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_doobjectinflation() const {
  return _internal_has_doobjectinflation();
}
inline void SiParams::clear_doobjectinflation() {
  doobjectinflation_ = false;
  _has_bits_[8] &= ~0x01000000u;
}
inline bool SiParams::_internal_doobjectinflation() const {
  return doobjectinflation_;
}
inline bool SiParams::doobjectinflation() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.doObjectInflation)
  return _internal_doobjectinflation();
}
inline void SiParams::_internal_set_doobjectinflation(bool value) {
  _has_bits_[8] |= 0x01000000u;
  doobjectinflation_ = value;
}
inline void SiParams::set_doobjectinflation(bool value) {
  _internal_set_doobjectinflation(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.doObjectInflation)
}

// optional bool useCovMatrixInflation = 957;
inline bool SiParams::_internal_has_usecovmatrixinflation() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_usecovmatrixinflation() const {
  return _internal_has_usecovmatrixinflation();
}
inline void SiParams::clear_usecovmatrixinflation() {
  usecovmatrixinflation_ = false;
  _has_bits_[2] &= ~0x00000400u;
}
inline bool SiParams::_internal_usecovmatrixinflation() const {
  return usecovmatrixinflation_;
}
inline bool SiParams::usecovmatrixinflation() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.useCovMatrixInflation)
  return _internal_usecovmatrixinflation();
}
inline void SiParams::_internal_set_usecovmatrixinflation(bool value) {
  _has_bits_[2] |= 0x00000400u;
  usecovmatrixinflation_ = value;
}
inline void SiParams::set_usecovmatrixinflation(bool value) {
  _internal_set_usecovmatrixinflation(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.useCovMatrixInflation)
}

// optional float inflationSafetyDistanceDefault_m = 4034;
inline bool SiParams::_internal_has_inflationsafetydistancedefault_m() const {
  bool value = (_has_bits_[8] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_inflationsafetydistancedefault_m() const {
  return _internal_has_inflationsafetydistancedefault_m();
}
inline void SiParams::clear_inflationsafetydistancedefault_m() {
  inflationsafetydistancedefault_m_ = 0;
  _has_bits_[8] &= ~0x00040000u;
}
inline float SiParams::_internal_inflationsafetydistancedefault_m() const {
  return inflationsafetydistancedefault_m_;
}
inline float SiParams::inflationsafetydistancedefault_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.inflationSafetyDistanceDefault_m)
  return _internal_inflationsafetydistancedefault_m();
}
inline void SiParams::_internal_set_inflationsafetydistancedefault_m(float value) {
  _has_bits_[8] |= 0x00040000u;
  inflationsafetydistancedefault_m_ = value;
}
inline void SiParams::set_inflationsafetydistancedefault_m(float value) {
  _internal_set_inflationsafetydistancedefault_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.inflationSafetyDistanceDefault_m)
}

// optional float inflationSafetyDistanceParkOut_m = 3473;
inline bool SiParams::_internal_has_inflationsafetydistanceparkout_m() const {
  bool value = (_has_bits_[7] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_inflationsafetydistanceparkout_m() const {
  return _internal_has_inflationsafetydistanceparkout_m();
}
inline void SiParams::clear_inflationsafetydistanceparkout_m() {
  inflationsafetydistanceparkout_m_ = 0;
  _has_bits_[7] &= ~0x02000000u;
}
inline float SiParams::_internal_inflationsafetydistanceparkout_m() const {
  return inflationsafetydistanceparkout_m_;
}
inline float SiParams::inflationsafetydistanceparkout_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.inflationSafetyDistanceParkOut_m)
  return _internal_inflationsafetydistanceparkout_m();
}
inline void SiParams::_internal_set_inflationsafetydistanceparkout_m(float value) {
  _has_bits_[7] |= 0x02000000u;
  inflationsafetydistanceparkout_m_ = value;
}
inline void SiParams::set_inflationsafetydistanceparkout_m(float value) {
  _internal_set_inflationsafetydistanceparkout_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.inflationSafetyDistanceParkOut_m)
}

// optional float ncSplitMaxSkippableNCAreaPerStep_m2 = 2186;
inline bool SiParams::_internal_has_ncsplitmaxskippablencareaperstep_m2() const {
  bool value = (_has_bits_[4] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_ncsplitmaxskippablencareaperstep_m2() const {
  return _internal_has_ncsplitmaxskippablencareaperstep_m2();
}
inline void SiParams::clear_ncsplitmaxskippablencareaperstep_m2() {
  ncsplitmaxskippablencareaperstep_m2_ = 0;
  _has_bits_[4] &= ~0x08000000u;
}
inline float SiParams::_internal_ncsplitmaxskippablencareaperstep_m2() const {
  return ncsplitmaxskippablencareaperstep_m2_;
}
inline float SiParams::ncsplitmaxskippablencareaperstep_m2() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ncSplitMaxSkippableNCAreaPerStep_m2)
  return _internal_ncsplitmaxskippablencareaperstep_m2();
}
inline void SiParams::_internal_set_ncsplitmaxskippablencareaperstep_m2(float value) {
  _has_bits_[4] |= 0x08000000u;
  ncsplitmaxskippablencareaperstep_m2_ = value;
}
inline void SiParams::set_ncsplitmaxskippablencareaperstep_m2(float value) {
  _internal_set_ncsplitmaxskippablencareaperstep_m2(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ncSplitMaxSkippableNCAreaPerStep_m2)
}

// optional bool ncSplitUseMostXStartIdx = 622;
inline bool SiParams::_internal_has_ncsplitusemostxstartidx() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_ncsplitusemostxstartidx() const {
  return _internal_has_ncsplitusemostxstartidx();
}
inline void SiParams::clear_ncsplitusemostxstartidx() {
  ncsplitusemostxstartidx_ = false;
  _has_bits_[2] &= ~0x00000800u;
}
inline bool SiParams::_internal_ncsplitusemostxstartidx() const {
  return ncsplitusemostxstartidx_;
}
inline bool SiParams::ncsplitusemostxstartidx() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ncSplitUseMostXStartIdx)
  return _internal_ncsplitusemostxstartidx();
}
inline void SiParams::_internal_set_ncsplitusemostxstartidx(bool value) {
  _has_bits_[2] |= 0x00000800u;
  ncsplitusemostxstartidx_ = value;
}
inline void SiParams::set_ncsplitusemostxstartidx(bool value) {
  _internal_set_ncsplitusemostxstartidx(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ncSplitUseMostXStartIdx)
}

// optional bool ncSplitOn = 2843;
inline bool SiParams::_internal_has_ncspliton() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_ncspliton() const {
  return _internal_has_ncspliton();
}
inline void SiParams::clear_ncspliton() {
  ncspliton_ = false;
  _has_bits_[2] &= ~0x00001000u;
}
inline bool SiParams::_internal_ncspliton() const {
  return ncspliton_;
}
inline bool SiParams::ncspliton() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ncSplitOn)
  return _internal_ncspliton();
}
inline void SiParams::_internal_set_ncspliton(bool value) {
  _has_bits_[2] |= 0x00001000u;
  ncspliton_ = value;
}
inline void SiParams::set_ncspliton(bool value) {
  _internal_set_ncspliton(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ncSplitOn)
}

// optional bool doObjectClustering = 1052;
inline bool SiParams::_internal_has_doobjectclustering() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_doobjectclustering() const {
  return _internal_has_doobjectclustering();
}
inline void SiParams::clear_doobjectclustering() {
  doobjectclustering_ = false;
  _has_bits_[2] &= ~0x00002000u;
}
inline bool SiParams::_internal_doobjectclustering() const {
  return doobjectclustering_;
}
inline bool SiParams::doobjectclustering() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.doObjectClustering)
  return _internal_doobjectclustering();
}
inline void SiParams::_internal_set_doobjectclustering(bool value) {
  _has_bits_[2] |= 0x00002000u;
  doobjectclustering_ = value;
}
inline void SiParams::set_doobjectclustering(bool value) {
  _internal_set_doobjectclustering(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.doObjectClustering)
}

// optional float ocPerpMaxDistanceSide_m = 1587;
inline bool SiParams::_internal_has_ocperpmaxdistanceside_m() const {
  bool value = (_has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_ocperpmaxdistanceside_m() const {
  return _internal_has_ocperpmaxdistanceside_m();
}
inline void SiParams::clear_ocperpmaxdistanceside_m() {
  ocperpmaxdistanceside_m_ = 0;
  _has_bits_[3] &= ~0x00000002u;
}
inline float SiParams::_internal_ocperpmaxdistanceside_m() const {
  return ocperpmaxdistanceside_m_;
}
inline float SiParams::ocperpmaxdistanceside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPerpMaxDistanceSide_m)
  return _internal_ocperpmaxdistanceside_m();
}
inline void SiParams::_internal_set_ocperpmaxdistanceside_m(float value) {
  _has_bits_[3] |= 0x00000002u;
  ocperpmaxdistanceside_m_ = value;
}
inline void SiParams::set_ocperpmaxdistanceside_m(float value) {
  _internal_set_ocperpmaxdistanceside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPerpMaxDistanceSide_m)
}

// optional float ocPerpMaxDistanceCurb_m = 2664;
inline bool SiParams::_internal_has_ocperpmaxdistancecurb_m() const {
  bool value = (_has_bits_[6] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_ocperpmaxdistancecurb_m() const {
  return _internal_has_ocperpmaxdistancecurb_m();
}
inline void SiParams::clear_ocperpmaxdistancecurb_m() {
  ocperpmaxdistancecurb_m_ = 0;
  _has_bits_[6] &= ~0x00000040u;
}
inline float SiParams::_internal_ocperpmaxdistancecurb_m() const {
  return ocperpmaxdistancecurb_m_;
}
inline float SiParams::ocperpmaxdistancecurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPerpMaxDistanceCurb_m)
  return _internal_ocperpmaxdistancecurb_m();
}
inline void SiParams::_internal_set_ocperpmaxdistancecurb_m(float value) {
  _has_bits_[6] |= 0x00000040u;
  ocperpmaxdistancecurb_m_ = value;
}
inline void SiParams::set_ocperpmaxdistancecurb_m(float value) {
  _internal_set_ocperpmaxdistancecurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPerpMaxDistanceCurb_m)
}

// optional float ocPerpendicularMaxDistanceXForCurbSideClustering_m = 2200;
inline bool SiParams::_internal_has_ocperpendicularmaxdistancexforcurbsideclustering_m() const {
  bool value = (_has_bits_[5] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_ocperpendicularmaxdistancexforcurbsideclustering_m() const {
  return _internal_has_ocperpendicularmaxdistancexforcurbsideclustering_m();
}
inline void SiParams::clear_ocperpendicularmaxdistancexforcurbsideclustering_m() {
  ocperpendicularmaxdistancexforcurbsideclustering_m_ = 0;
  _has_bits_[5] &= ~0x00000002u;
}
inline float SiParams::_internal_ocperpendicularmaxdistancexforcurbsideclustering_m() const {
  return ocperpendicularmaxdistancexforcurbsideclustering_m_;
}
inline float SiParams::ocperpendicularmaxdistancexforcurbsideclustering_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPerpendicularMaxDistanceXForCurbSideClustering_m)
  return _internal_ocperpendicularmaxdistancexforcurbsideclustering_m();
}
inline void SiParams::_internal_set_ocperpendicularmaxdistancexforcurbsideclustering_m(float value) {
  _has_bits_[5] |= 0x00000002u;
  ocperpendicularmaxdistancexforcurbsideclustering_m_ = value;
}
inline void SiParams::set_ocperpendicularmaxdistancexforcurbsideclustering_m(float value) {
  _internal_set_ocperpendicularmaxdistancexforcurbsideclustering_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPerpendicularMaxDistanceXForCurbSideClustering_m)
}

// optional float ocParallelMaxDistanceXForCurbSideClustering_m = 2605;
inline bool SiParams::_internal_has_ocparallelmaxdistancexforcurbsideclustering_m() const {
  bool value = (_has_bits_[6] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_ocparallelmaxdistancexforcurbsideclustering_m() const {
  return _internal_has_ocparallelmaxdistancexforcurbsideclustering_m();
}
inline void SiParams::clear_ocparallelmaxdistancexforcurbsideclustering_m() {
  ocparallelmaxdistancexforcurbsideclustering_m_ = 0;
  _has_bits_[6] &= ~0x00000010u;
}
inline float SiParams::_internal_ocparallelmaxdistancexforcurbsideclustering_m() const {
  return ocparallelmaxdistancexforcurbsideclustering_m_;
}
inline float SiParams::ocparallelmaxdistancexforcurbsideclustering_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocParallelMaxDistanceXForCurbSideClustering_m)
  return _internal_ocparallelmaxdistancexforcurbsideclustering_m();
}
inline void SiParams::_internal_set_ocparallelmaxdistancexforcurbsideclustering_m(float value) {
  _has_bits_[6] |= 0x00000010u;
  ocparallelmaxdistancexforcurbsideclustering_m_ = value;
}
inline void SiParams::set_ocparallelmaxdistancexforcurbsideclustering_m(float value) {
  _internal_set_ocparallelmaxdistancexforcurbsideclustering_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocParallelMaxDistanceXForCurbSideClustering_m)
}

// optional float ocAngMaxDistanceCurb_m = 1147;
inline bool SiParams::_internal_has_ocangmaxdistancecurb_m() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_ocangmaxdistancecurb_m() const {
  return _internal_has_ocangmaxdistancecurb_m();
}
inline void SiParams::clear_ocangmaxdistancecurb_m() {
  ocangmaxdistancecurb_m_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline float SiParams::_internal_ocangmaxdistancecurb_m() const {
  return ocangmaxdistancecurb_m_;
}
inline float SiParams::ocangmaxdistancecurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocAngMaxDistanceCurb_m)
  return _internal_ocangmaxdistancecurb_m();
}
inline void SiParams::_internal_set_ocangmaxdistancecurb_m(float value) {
  _has_bits_[1] |= 0x10000000u;
  ocangmaxdistancecurb_m_ = value;
}
inline void SiParams::set_ocangmaxdistancecurb_m(float value) {
  _internal_set_ocangmaxdistancecurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocAngMaxDistanceCurb_m)
}

// optional float ocPrimZonePerpSideOpening_m = 3357;
inline bool SiParams::_internal_has_ocprimzoneperpsideopening_m() const {
  bool value = (_has_bits_[7] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneperpsideopening_m() const {
  return _internal_has_ocprimzoneperpsideopening_m();
}
inline void SiParams::clear_ocprimzoneperpsideopening_m() {
  ocprimzoneperpsideopening_m_ = 0;
  _has_bits_[7] &= ~0x00100000u;
}
inline float SiParams::_internal_ocprimzoneperpsideopening_m() const {
  return ocprimzoneperpsideopening_m_;
}
inline float SiParams::ocprimzoneperpsideopening_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZonePerpSideOpening_m)
  return _internal_ocprimzoneperpsideopening_m();
}
inline void SiParams::_internal_set_ocprimzoneperpsideopening_m(float value) {
  _has_bits_[7] |= 0x00100000u;
  ocprimzoneperpsideopening_m_ = value;
}
inline void SiParams::set_ocprimzoneperpsideopening_m(float value) {
  _internal_set_ocprimzoneperpsideopening_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZonePerpSideOpening_m)
}

// optional float ocPrimZoneAngSideOpening_m = 3788;
inline bool SiParams::_internal_has_ocprimzoneangsideopening_m() const {
  bool value = (_has_bits_[8] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneangsideopening_m() const {
  return _internal_has_ocprimzoneangsideopening_m();
}
inline void SiParams::clear_ocprimzoneangsideopening_m() {
  ocprimzoneangsideopening_m_ = 0;
  _has_bits_[8] &= ~0x00000002u;
}
inline float SiParams::_internal_ocprimzoneangsideopening_m() const {
  return ocprimzoneangsideopening_m_;
}
inline float SiParams::ocprimzoneangsideopening_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZoneAngSideOpening_m)
  return _internal_ocprimzoneangsideopening_m();
}
inline void SiParams::_internal_set_ocprimzoneangsideopening_m(float value) {
  _has_bits_[8] |= 0x00000002u;
  ocprimzoneangsideopening_m_ = value;
}
inline void SiParams::set_ocprimzoneangsideopening_m(float value) {
  _internal_set_ocprimzoneangsideopening_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZoneAngSideOpening_m)
}

// optional float ocPrimZoneParSideOpening_m = 2563;
inline bool SiParams::_internal_has_ocprimzoneparsideopening_m() const {
  bool value = (_has_bits_[6] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneparsideopening_m() const {
  return _internal_has_ocprimzoneparsideopening_m();
}
inline void SiParams::clear_ocprimzoneparsideopening_m() {
  ocprimzoneparsideopening_m_ = 0;
  _has_bits_[6] &= ~0x00000004u;
}
inline float SiParams::_internal_ocprimzoneparsideopening_m() const {
  return ocprimzoneparsideopening_m_;
}
inline float SiParams::ocprimzoneparsideopening_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZoneParSideOpening_m)
  return _internal_ocprimzoneparsideopening_m();
}
inline void SiParams::_internal_set_ocprimzoneparsideopening_m(float value) {
  _has_bits_[6] |= 0x00000004u;
  ocprimzoneparsideopening_m_ = value;
}
inline void SiParams::set_ocprimzoneparsideopening_m(float value) {
  _internal_set_ocprimzoneparsideopening_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZoneParSideOpening_m)
}

// optional float ocPrimZoneCurbBelowSlot_m = 1229;
inline bool SiParams::_internal_has_ocprimzonecurbbelowslot_m() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzonecurbbelowslot_m() const {
  return _internal_has_ocprimzonecurbbelowslot_m();
}
inline void SiParams::clear_ocprimzonecurbbelowslot_m() {
  ocprimzonecurbbelowslot_m_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline float SiParams::_internal_ocprimzonecurbbelowslot_m() const {
  return ocprimzonecurbbelowslot_m_;
}
inline float SiParams::ocprimzonecurbbelowslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZoneCurbBelowSlot_m)
  return _internal_ocprimzonecurbbelowslot_m();
}
inline void SiParams::_internal_set_ocprimzonecurbbelowslot_m(float value) {
  _has_bits_[2] |= 0x00000002u;
  ocprimzonecurbbelowslot_m_ = value;
}
inline void SiParams::set_ocprimzonecurbbelowslot_m(float value) {
  _internal_set_ocprimzonecurbbelowslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZoneCurbBelowSlot_m)
}

// optional float ocPrimZonePerpCurbIntoSlot_m = 1911;
inline bool SiParams::_internal_has_ocprimzoneperpcurbintoslot_m() const {
  bool value = (_has_bits_[3] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneperpcurbintoslot_m() const {
  return _internal_has_ocprimzoneperpcurbintoslot_m();
}
inline void SiParams::clear_ocprimzoneperpcurbintoslot_m() {
  ocprimzoneperpcurbintoslot_m_ = 0;
  _has_bits_[3] &= ~0x10000000u;
}
inline float SiParams::_internal_ocprimzoneperpcurbintoslot_m() const {
  return ocprimzoneperpcurbintoslot_m_;
}
inline float SiParams::ocprimzoneperpcurbintoslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZonePerpCurbIntoSlot_m)
  return _internal_ocprimzoneperpcurbintoslot_m();
}
inline void SiParams::_internal_set_ocprimzoneperpcurbintoslot_m(float value) {
  _has_bits_[3] |= 0x10000000u;
  ocprimzoneperpcurbintoslot_m_ = value;
}
inline void SiParams::set_ocprimzoneperpcurbintoslot_m(float value) {
  _internal_set_ocprimzoneperpcurbintoslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZonePerpCurbIntoSlot_m)
}

// optional float ocPrimZoneAngCurbIntoSlot_m = 3433;
inline bool SiParams::_internal_has_ocprimzoneangcurbintoslot_m() const {
  bool value = (_has_bits_[7] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneangcurbintoslot_m() const {
  return _internal_has_ocprimzoneangcurbintoslot_m();
}
inline void SiParams::clear_ocprimzoneangcurbintoslot_m() {
  ocprimzoneangcurbintoslot_m_ = 0;
  _has_bits_[7] &= ~0x00400000u;
}
inline float SiParams::_internal_ocprimzoneangcurbintoslot_m() const {
  return ocprimzoneangcurbintoslot_m_;
}
inline float SiParams::ocprimzoneangcurbintoslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZoneAngCurbIntoSlot_m)
  return _internal_ocprimzoneangcurbintoslot_m();
}
inline void SiParams::_internal_set_ocprimzoneangcurbintoslot_m(float value) {
  _has_bits_[7] |= 0x00400000u;
  ocprimzoneangcurbintoslot_m_ = value;
}
inline void SiParams::set_ocprimzoneangcurbintoslot_m(float value) {
  _internal_set_ocprimzoneangcurbintoslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZoneAngCurbIntoSlot_m)
}

// optional float ocPrimZoneParCurbIntoSlot_m = 340;
inline bool SiParams::_internal_has_ocprimzoneparcurbintoslot_m() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneparcurbintoslot_m() const {
  return _internal_has_ocprimzoneparcurbintoslot_m();
}
inline void SiParams::clear_ocprimzoneparcurbintoslot_m() {
  ocprimzoneparcurbintoslot_m_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float SiParams::_internal_ocprimzoneparcurbintoslot_m() const {
  return ocprimzoneparcurbintoslot_m_;
}
inline float SiParams::ocprimzoneparcurbintoslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZoneParCurbIntoSlot_m)
  return _internal_ocprimzoneparcurbintoslot_m();
}
inline void SiParams::_internal_set_ocprimzoneparcurbintoslot_m(float value) {
  _has_bits_[0] |= 0x00100000u;
  ocprimzoneparcurbintoslot_m_ = value;
}
inline void SiParams::set_ocprimzoneparcurbintoslot_m(float value) {
  _internal_set_ocprimzoneparcurbintoslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZoneParCurbIntoSlot_m)
}

// optional float ocPrimZonePerpSideToRoad_m = 2160;
inline bool SiParams::_internal_has_ocprimzoneperpsidetoroad_m() const {
  bool value = (_has_bits_[4] & 0x00400000u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneperpsidetoroad_m() const {
  return _internal_has_ocprimzoneperpsidetoroad_m();
}
inline void SiParams::clear_ocprimzoneperpsidetoroad_m() {
  ocprimzoneperpsidetoroad_m_ = 0;
  _has_bits_[4] &= ~0x00400000u;
}
inline float SiParams::_internal_ocprimzoneperpsidetoroad_m() const {
  return ocprimzoneperpsidetoroad_m_;
}
inline float SiParams::ocprimzoneperpsidetoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZonePerpSideToRoad_m)
  return _internal_ocprimzoneperpsidetoroad_m();
}
inline void SiParams::_internal_set_ocprimzoneperpsidetoroad_m(float value) {
  _has_bits_[4] |= 0x00400000u;
  ocprimzoneperpsidetoroad_m_ = value;
}
inline void SiParams::set_ocprimzoneperpsidetoroad_m(float value) {
  _internal_set_ocprimzoneperpsidetoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZonePerpSideToRoad_m)
}

// optional float ocPrimZoneParSideToRoad_m = 3020;
inline bool SiParams::_internal_has_ocprimzoneparsidetoroad_m() const {
  bool value = (_has_bits_[7] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_ocprimzoneparsidetoroad_m() const {
  return _internal_has_ocprimzoneparsidetoroad_m();
}
inline void SiParams::clear_ocprimzoneparsidetoroad_m() {
  ocprimzoneparsidetoroad_m_ = 0;
  _has_bits_[7] &= ~0x00000001u;
}
inline float SiParams::_internal_ocprimzoneparsidetoroad_m() const {
  return ocprimzoneparsidetoroad_m_;
}
inline float SiParams::ocprimzoneparsidetoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocPrimZoneParSideToRoad_m)
  return _internal_ocprimzoneparsidetoroad_m();
}
inline void SiParams::_internal_set_ocprimzoneparsidetoroad_m(float value) {
  _has_bits_[7] |= 0x00000001u;
  ocprimzoneparsidetoroad_m_ = value;
}
inline void SiParams::set_ocprimzoneparsidetoroad_m(float value) {
  _internal_set_ocprimzoneparsidetoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocPrimZoneParSideToRoad_m)
}

// optional float ocSecZonePerpSideToSide_m = 243;
inline bool SiParams::_internal_has_ocseczoneperpsidetoside_m() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneperpsidetoside_m() const {
  return _internal_has_ocseczoneperpsidetoside_m();
}
inline void SiParams::clear_ocseczoneperpsidetoside_m() {
  ocseczoneperpsidetoside_m_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float SiParams::_internal_ocseczoneperpsidetoside_m() const {
  return ocseczoneperpsidetoside_m_;
}
inline float SiParams::ocseczoneperpsidetoside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZonePerpSideToSide_m)
  return _internal_ocseczoneperpsidetoside_m();
}
inline void SiParams::_internal_set_ocseczoneperpsidetoside_m(float value) {
  _has_bits_[0] |= 0x00040000u;
  ocseczoneperpsidetoside_m_ = value;
}
inline void SiParams::set_ocseczoneperpsidetoside_m(float value) {
  _internal_set_ocseczoneperpsidetoside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZonePerpSideToSide_m)
}

// optional float ocSecZonePerpSideToSlot_m = 2536;
inline bool SiParams::_internal_has_ocseczoneperpsidetoslot_m() const {
  bool value = (_has_bits_[6] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneperpsidetoslot_m() const {
  return _internal_has_ocseczoneperpsidetoslot_m();
}
inline void SiParams::clear_ocseczoneperpsidetoslot_m() {
  ocseczoneperpsidetoslot_m_ = 0;
  _has_bits_[6] &= ~0x00000001u;
}
inline float SiParams::_internal_ocseczoneperpsidetoslot_m() const {
  return ocseczoneperpsidetoslot_m_;
}
inline float SiParams::ocseczoneperpsidetoslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZonePerpSideToSlot_m)
  return _internal_ocseczoneperpsidetoslot_m();
}
inline void SiParams::_internal_set_ocseczoneperpsidetoslot_m(float value) {
  _has_bits_[6] |= 0x00000001u;
  ocseczoneperpsidetoslot_m_ = value;
}
inline void SiParams::set_ocseczoneperpsidetoslot_m(float value) {
  _internal_set_ocseczoneperpsidetoslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZonePerpSideToSlot_m)
}

// optional float ocSecZonePerpSideToRoad_m = 931;
inline bool SiParams::_internal_has_ocseczoneperpsidetoroad_m() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneperpsidetoroad_m() const {
  return _internal_has_ocseczoneperpsidetoroad_m();
}
inline void SiParams::clear_ocseczoneperpsidetoroad_m() {
  ocseczoneperpsidetoroad_m_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline float SiParams::_internal_ocseczoneperpsidetoroad_m() const {
  return ocseczoneperpsidetoroad_m_;
}
inline float SiParams::ocseczoneperpsidetoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZonePerpSideToRoad_m)
  return _internal_ocseczoneperpsidetoroad_m();
}
inline void SiParams::_internal_set_ocseczoneperpsidetoroad_m(float value) {
  _has_bits_[1] |= 0x00020000u;
  ocseczoneperpsidetoroad_m_ = value;
}
inline void SiParams::set_ocseczoneperpsidetoroad_m(float value) {
  _internal_set_ocseczoneperpsidetoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZonePerpSideToRoad_m)
}

// optional float ocSecZonePerpSideToCurb_m = 3240;
inline bool SiParams::_internal_has_ocseczoneperpsidetocurb_m() const {
  bool value = (_has_bits_[7] & 0x00010000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneperpsidetocurb_m() const {
  return _internal_has_ocseczoneperpsidetocurb_m();
}
inline void SiParams::clear_ocseczoneperpsidetocurb_m() {
  ocseczoneperpsidetocurb_m_ = 0;
  _has_bits_[7] &= ~0x00010000u;
}
inline float SiParams::_internal_ocseczoneperpsidetocurb_m() const {
  return ocseczoneperpsidetocurb_m_;
}
inline float SiParams::ocseczoneperpsidetocurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZonePerpSideToCurb_m)
  return _internal_ocseczoneperpsidetocurb_m();
}
inline void SiParams::_internal_set_ocseczoneperpsidetocurb_m(float value) {
  _has_bits_[7] |= 0x00010000u;
  ocseczoneperpsidetocurb_m_ = value;
}
inline void SiParams::set_ocseczoneperpsidetocurb_m(float value) {
  _internal_set_ocseczoneperpsidetocurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZonePerpSideToCurb_m)
}

// optional float ocSecZonePerpCurbToSide_m = 2005;
inline bool SiParams::_internal_has_ocseczoneperpcurbtoside_m() const {
  bool value = (_has_bits_[4] & 0x00000200u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneperpcurbtoside_m() const {
  return _internal_has_ocseczoneperpcurbtoside_m();
}
inline void SiParams::clear_ocseczoneperpcurbtoside_m() {
  ocseczoneperpcurbtoside_m_ = 0;
  _has_bits_[4] &= ~0x00000200u;
}
inline float SiParams::_internal_ocseczoneperpcurbtoside_m() const {
  return ocseczoneperpcurbtoside_m_;
}
inline float SiParams::ocseczoneperpcurbtoside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZonePerpCurbToSide_m)
  return _internal_ocseczoneperpcurbtoside_m();
}
inline void SiParams::_internal_set_ocseczoneperpcurbtoside_m(float value) {
  _has_bits_[4] |= 0x00000200u;
  ocseczoneperpcurbtoside_m_ = value;
}
inline void SiParams::set_ocseczoneperpcurbtoside_m(float value) {
  _internal_set_ocseczoneperpcurbtoside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZonePerpCurbToSide_m)
}

// optional float ocSecZonePerpCurbToRoad_m = 1157;
inline bool SiParams::_internal_has_ocseczoneperpcurbtoroad_m() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneperpcurbtoroad_m() const {
  return _internal_has_ocseczoneperpcurbtoroad_m();
}
inline void SiParams::clear_ocseczoneperpcurbtoroad_m() {
  ocseczoneperpcurbtoroad_m_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline float SiParams::_internal_ocseczoneperpcurbtoroad_m() const {
  return ocseczoneperpcurbtoroad_m_;
}
inline float SiParams::ocseczoneperpcurbtoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZonePerpCurbToRoad_m)
  return _internal_ocseczoneperpcurbtoroad_m();
}
inline void SiParams::_internal_set_ocseczoneperpcurbtoroad_m(float value) {
  _has_bits_[1] |= 0x20000000u;
  ocseczoneperpcurbtoroad_m_ = value;
}
inline void SiParams::set_ocseczoneperpcurbtoroad_m(float value) {
  _internal_set_ocseczoneperpcurbtoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZonePerpCurbToRoad_m)
}

// optional float ocSecZonePerpCurbToCurb_m = 2958;
inline bool SiParams::_internal_has_ocseczoneperpcurbtocurb_m() const {
  bool value = (_has_bits_[6] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneperpcurbtocurb_m() const {
  return _internal_has_ocseczoneperpcurbtocurb_m();
}
inline void SiParams::clear_ocseczoneperpcurbtocurb_m() {
  ocseczoneperpcurbtocurb_m_ = 0;
  _has_bits_[6] &= ~0x40000000u;
}
inline float SiParams::_internal_ocseczoneperpcurbtocurb_m() const {
  return ocseczoneperpcurbtocurb_m_;
}
inline float SiParams::ocseczoneperpcurbtocurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZonePerpCurbToCurb_m)
  return _internal_ocseczoneperpcurbtocurb_m();
}
inline void SiParams::_internal_set_ocseczoneperpcurbtocurb_m(float value) {
  _has_bits_[6] |= 0x40000000u;
  ocseczoneperpcurbtocurb_m_ = value;
}
inline void SiParams::set_ocseczoneperpcurbtocurb_m(float value) {
  _internal_set_ocseczoneperpcurbtocurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZonePerpCurbToCurb_m)
}

// optional float ocSecZoneAngSideToSide_m = 3488;
inline bool SiParams::_internal_has_ocseczoneangsidetoside_m() const {
  bool value = (_has_bits_[7] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneangsidetoside_m() const {
  return _internal_has_ocseczoneangsidetoside_m();
}
inline void SiParams::clear_ocseczoneangsidetoside_m() {
  ocseczoneangsidetoside_m_ = 0;
  _has_bits_[7] &= ~0x04000000u;
}
inline float SiParams::_internal_ocseczoneangsidetoside_m() const {
  return ocseczoneangsidetoside_m_;
}
inline float SiParams::ocseczoneangsidetoside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneAngSideToSide_m)
  return _internal_ocseczoneangsidetoside_m();
}
inline void SiParams::_internal_set_ocseczoneangsidetoside_m(float value) {
  _has_bits_[7] |= 0x04000000u;
  ocseczoneangsidetoside_m_ = value;
}
inline void SiParams::set_ocseczoneangsidetoside_m(float value) {
  _internal_set_ocseczoneangsidetoside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneAngSideToSide_m)
}

// optional float ocSecZoneAngSideToSlot_m = 1211;
inline bool SiParams::_internal_has_ocseczoneangsidetoslot_m() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneangsidetoslot_m() const {
  return _internal_has_ocseczoneangsidetoslot_m();
}
inline void SiParams::clear_ocseczoneangsidetoslot_m() {
  ocseczoneangsidetoslot_m_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline float SiParams::_internal_ocseczoneangsidetoslot_m() const {
  return ocseczoneangsidetoslot_m_;
}
inline float SiParams::ocseczoneangsidetoslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneAngSideToSlot_m)
  return _internal_ocseczoneangsidetoslot_m();
}
inline void SiParams::_internal_set_ocseczoneangsidetoslot_m(float value) {
  _has_bits_[1] |= 0x80000000u;
  ocseczoneangsidetoslot_m_ = value;
}
inline void SiParams::set_ocseczoneangsidetoslot_m(float value) {
  _internal_set_ocseczoneangsidetoslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneAngSideToSlot_m)
}

// optional float ocSecZoneAngSideToRoad_m = 3824;
inline bool SiParams::_internal_has_ocseczoneangsidetoroad_m() const {
  bool value = (_has_bits_[8] & 0x00000008u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneangsidetoroad_m() const {
  return _internal_has_ocseczoneangsidetoroad_m();
}
inline void SiParams::clear_ocseczoneangsidetoroad_m() {
  ocseczoneangsidetoroad_m_ = 0;
  _has_bits_[8] &= ~0x00000008u;
}
inline float SiParams::_internal_ocseczoneangsidetoroad_m() const {
  return ocseczoneangsidetoroad_m_;
}
inline float SiParams::ocseczoneangsidetoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneAngSideToRoad_m)
  return _internal_ocseczoneangsidetoroad_m();
}
inline void SiParams::_internal_set_ocseczoneangsidetoroad_m(float value) {
  _has_bits_[8] |= 0x00000008u;
  ocseczoneangsidetoroad_m_ = value;
}
inline void SiParams::set_ocseczoneangsidetoroad_m(float value) {
  _internal_set_ocseczoneangsidetoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneAngSideToRoad_m)
}

// optional float ocSecZoneAngSideToCurb_m = 8701776;
inline bool SiParams::_internal_has_ocseczoneangsidetocurb_m() const {
  bool value = (_has_bits_[9] & 0x00000001u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneangsidetocurb_m() const {
  return _internal_has_ocseczoneangsidetocurb_m();
}
inline void SiParams::clear_ocseczoneangsidetocurb_m() {
  ocseczoneangsidetocurb_m_ = 0;
  _has_bits_[9] &= ~0x00000001u;
}
inline float SiParams::_internal_ocseczoneangsidetocurb_m() const {
  return ocseczoneangsidetocurb_m_;
}
inline float SiParams::ocseczoneangsidetocurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneAngSideToCurb_m)
  return _internal_ocseczoneangsidetocurb_m();
}
inline void SiParams::_internal_set_ocseczoneangsidetocurb_m(float value) {
  _has_bits_[9] |= 0x00000001u;
  ocseczoneangsidetocurb_m_ = value;
}
inline void SiParams::set_ocseczoneangsidetocurb_m(float value) {
  _internal_set_ocseczoneangsidetocurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneAngSideToCurb_m)
}

// optional float ocSecZoneAngCurbToSide_m = 2694;
inline bool SiParams::_internal_has_ocseczoneangcurbtoside_m() const {
  bool value = (_has_bits_[6] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneangcurbtoside_m() const {
  return _internal_has_ocseczoneangcurbtoside_m();
}
inline void SiParams::clear_ocseczoneangcurbtoside_m() {
  ocseczoneangcurbtoside_m_ = 0;
  _has_bits_[6] &= ~0x00000100u;
}
inline float SiParams::_internal_ocseczoneangcurbtoside_m() const {
  return ocseczoneangcurbtoside_m_;
}
inline float SiParams::ocseczoneangcurbtoside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneAngCurbToSide_m)
  return _internal_ocseczoneangcurbtoside_m();
}
inline void SiParams::_internal_set_ocseczoneangcurbtoside_m(float value) {
  _has_bits_[6] |= 0x00000100u;
  ocseczoneangcurbtoside_m_ = value;
}
inline void SiParams::set_ocseczoneangcurbtoside_m(float value) {
  _internal_set_ocseczoneangcurbtoside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneAngCurbToSide_m)
}

// optional float ocSecZoneAngCurbToRoad_m = 2518;
inline bool SiParams::_internal_has_ocseczoneangcurbtoroad_m() const {
  bool value = (_has_bits_[5] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneangcurbtoroad_m() const {
  return _internal_has_ocseczoneangcurbtoroad_m();
}
inline void SiParams::clear_ocseczoneangcurbtoroad_m() {
  ocseczoneangcurbtoroad_m_ = 0;
  _has_bits_[5] &= ~0x40000000u;
}
inline float SiParams::_internal_ocseczoneangcurbtoroad_m() const {
  return ocseczoneangcurbtoroad_m_;
}
inline float SiParams::ocseczoneangcurbtoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneAngCurbToRoad_m)
  return _internal_ocseczoneangcurbtoroad_m();
}
inline void SiParams::_internal_set_ocseczoneangcurbtoroad_m(float value) {
  _has_bits_[5] |= 0x40000000u;
  ocseczoneangcurbtoroad_m_ = value;
}
inline void SiParams::set_ocseczoneangcurbtoroad_m(float value) {
  _internal_set_ocseczoneangcurbtoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneAngCurbToRoad_m)
}

// optional float ocSecZoneAngCurbToCurb_m = 1757;
inline bool SiParams::_internal_has_ocseczoneangcurbtocurb_m() const {
  bool value = (_has_bits_[3] & 0x00020000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneangcurbtocurb_m() const {
  return _internal_has_ocseczoneangcurbtocurb_m();
}
inline void SiParams::clear_ocseczoneangcurbtocurb_m() {
  ocseczoneangcurbtocurb_m_ = 0;
  _has_bits_[3] &= ~0x00020000u;
}
inline float SiParams::_internal_ocseczoneangcurbtocurb_m() const {
  return ocseczoneangcurbtocurb_m_;
}
inline float SiParams::ocseczoneangcurbtocurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneAngCurbToCurb_m)
  return _internal_ocseczoneangcurbtocurb_m();
}
inline void SiParams::_internal_set_ocseczoneangcurbtocurb_m(float value) {
  _has_bits_[3] |= 0x00020000u;
  ocseczoneangcurbtocurb_m_ = value;
}
inline void SiParams::set_ocseczoneangcurbtocurb_m(float value) {
  _internal_set_ocseczoneangcurbtocurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneAngCurbToCurb_m)
}

// optional float ocSecZoneParSideToSide_m = 193;
inline bool SiParams::_internal_has_ocseczoneparsidetoside_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneparsidetoside_m() const {
  return _internal_has_ocseczoneparsidetoside_m();
}
inline void SiParams::clear_ocseczoneparsidetoside_m() {
  ocseczoneparsidetoside_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float SiParams::_internal_ocseczoneparsidetoside_m() const {
  return ocseczoneparsidetoside_m_;
}
inline float SiParams::ocseczoneparsidetoside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneParSideToSide_m)
  return _internal_ocseczoneparsidetoside_m();
}
inline void SiParams::_internal_set_ocseczoneparsidetoside_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  ocseczoneparsidetoside_m_ = value;
}
inline void SiParams::set_ocseczoneparsidetoside_m(float value) {
  _internal_set_ocseczoneparsidetoside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneParSideToSide_m)
}

// optional float ocSecZoneParSideToSlot_m = 2522;
inline bool SiParams::_internal_has_ocseczoneparsidetoslot_m() const {
  bool value = (_has_bits_[5] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneparsidetoslot_m() const {
  return _internal_has_ocseczoneparsidetoslot_m();
}
inline void SiParams::clear_ocseczoneparsidetoslot_m() {
  ocseczoneparsidetoslot_m_ = 0;
  _has_bits_[5] &= ~0x80000000u;
}
inline float SiParams::_internal_ocseczoneparsidetoslot_m() const {
  return ocseczoneparsidetoslot_m_;
}
inline float SiParams::ocseczoneparsidetoslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneParSideToSlot_m)
  return _internal_ocseczoneparsidetoslot_m();
}
inline void SiParams::_internal_set_ocseczoneparsidetoslot_m(float value) {
  _has_bits_[5] |= 0x80000000u;
  ocseczoneparsidetoslot_m_ = value;
}
inline void SiParams::set_ocseczoneparsidetoslot_m(float value) {
  _internal_set_ocseczoneparsidetoslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneParSideToSlot_m)
}

// optional float ocSecZoneParSideToRoad_m = 1493409;
inline bool SiParams::_internal_has_ocseczoneparsidetoroad_m() const {
  bool value = (_has_bits_[8] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneparsidetoroad_m() const {
  return _internal_has_ocseczoneparsidetoroad_m();
}
inline void SiParams::clear_ocseczoneparsidetoroad_m() {
  ocseczoneparsidetoroad_m_ = 0;
  _has_bits_[8] &= ~0x02000000u;
}
inline float SiParams::_internal_ocseczoneparsidetoroad_m() const {
  return ocseczoneparsidetoroad_m_;
}
inline float SiParams::ocseczoneparsidetoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneParSideToRoad_m)
  return _internal_ocseczoneparsidetoroad_m();
}
inline void SiParams::_internal_set_ocseczoneparsidetoroad_m(float value) {
  _has_bits_[8] |= 0x02000000u;
  ocseczoneparsidetoroad_m_ = value;
}
inline void SiParams::set_ocseczoneparsidetoroad_m(float value) {
  _internal_set_ocseczoneparsidetoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneParSideToRoad_m)
}

// optional float ocSecZoneParSideToCurb_m = 3226;
inline bool SiParams::_internal_has_ocseczoneparsidetocurb_m() const {
  bool value = (_has_bits_[7] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneparsidetocurb_m() const {
  return _internal_has_ocseczoneparsidetocurb_m();
}
inline void SiParams::clear_ocseczoneparsidetocurb_m() {
  ocseczoneparsidetocurb_m_ = 0;
  _has_bits_[7] &= ~0x00004000u;
}
inline float SiParams::_internal_ocseczoneparsidetocurb_m() const {
  return ocseczoneparsidetocurb_m_;
}
inline float SiParams::ocseczoneparsidetocurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneParSideToCurb_m)
  return _internal_ocseczoneparsidetocurb_m();
}
inline void SiParams::_internal_set_ocseczoneparsidetocurb_m(float value) {
  _has_bits_[7] |= 0x00004000u;
  ocseczoneparsidetocurb_m_ = value;
}
inline void SiParams::set_ocseczoneparsidetocurb_m(float value) {
  _internal_set_ocseczoneparsidetocurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneParSideToCurb_m)
}

// optional float ocSecZoneParCurbToSide_m = 2023;
inline bool SiParams::_internal_has_ocseczoneparcurbtoside_m() const {
  bool value = (_has_bits_[4] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneparcurbtoside_m() const {
  return _internal_has_ocseczoneparcurbtoside_m();
}
inline void SiParams::clear_ocseczoneparcurbtoside_m() {
  ocseczoneparcurbtoside_m_ = 0;
  _has_bits_[4] &= ~0x00000800u;
}
inline float SiParams::_internal_ocseczoneparcurbtoside_m() const {
  return ocseczoneparcurbtoside_m_;
}
inline float SiParams::ocseczoneparcurbtoside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneParCurbToSide_m)
  return _internal_ocseczoneparcurbtoside_m();
}
inline void SiParams::_internal_set_ocseczoneparcurbtoside_m(float value) {
  _has_bits_[4] |= 0x00000800u;
  ocseczoneparcurbtoside_m_ = value;
}
inline void SiParams::set_ocseczoneparcurbtoside_m(float value) {
  _internal_set_ocseczoneparcurbtoside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneParCurbToSide_m)
}

// optional float ocSecZoneParCurbToRoad_m = 1207;
inline bool SiParams::_internal_has_ocseczoneparcurbtoroad_m() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneparcurbtoroad_m() const {
  return _internal_has_ocseczoneparcurbtoroad_m();
}
inline void SiParams::clear_ocseczoneparcurbtoroad_m() {
  ocseczoneparcurbtoroad_m_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline float SiParams::_internal_ocseczoneparcurbtoroad_m() const {
  return ocseczoneparcurbtoroad_m_;
}
inline float SiParams::ocseczoneparcurbtoroad_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneParCurbToRoad_m)
  return _internal_ocseczoneparcurbtoroad_m();
}
inline void SiParams::_internal_set_ocseczoneparcurbtoroad_m(float value) {
  _has_bits_[1] |= 0x40000000u;
  ocseczoneparcurbtoroad_m_ = value;
}
inline void SiParams::set_ocseczoneparcurbtoroad_m(float value) {
  _internal_set_ocseczoneparcurbtoroad_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneParCurbToRoad_m)
}

// optional float ocSecZoneParCurbToCurb_m = 3004;
inline bool SiParams::_internal_has_ocseczoneparcurbtocurb_m() const {
  bool value = (_has_bits_[6] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_ocseczoneparcurbtocurb_m() const {
  return _internal_has_ocseczoneparcurbtocurb_m();
}
inline void SiParams::clear_ocseczoneparcurbtocurb_m() {
  ocseczoneparcurbtocurb_m_ = 0;
  _has_bits_[6] &= ~0x80000000u;
}
inline float SiParams::_internal_ocseczoneparcurbtocurb_m() const {
  return ocseczoneparcurbtocurb_m_;
}
inline float SiParams::ocseczoneparcurbtocurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.ocSecZoneParCurbToCurb_m)
  return _internal_ocseczoneparcurbtocurb_m();
}
inline void SiParams::_internal_set_ocseczoneparcurbtocurb_m(float value) {
  _has_bits_[6] |= 0x80000000u;
  ocseczoneparcurbtocurb_m_ = value;
}
inline void SiParams::set_ocseczoneparcurbtocurb_m(float value) {
  _internal_set_ocseczoneparcurbtocurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.ocSecZoneParCurbToCurb_m)
}

// optional float outsideInAllowedOverlap_m = 1371;
inline bool SiParams::_internal_has_outsideinallowedoverlap_m() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_outsideinallowedoverlap_m() const {
  return _internal_has_outsideinallowedoverlap_m();
}
inline void SiParams::clear_outsideinallowedoverlap_m() {
  outsideinallowedoverlap_m_ = 0;
  _has_bits_[2] &= ~0x00004000u;
}
inline float SiParams::_internal_outsideinallowedoverlap_m() const {
  return outsideinallowedoverlap_m_;
}
inline float SiParams::outsideinallowedoverlap_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.outsideInAllowedOverlap_m)
  return _internal_outsideinallowedoverlap_m();
}
inline void SiParams::_internal_set_outsideinallowedoverlap_m(float value) {
  _has_bits_[2] |= 0x00004000u;
  outsideinallowedoverlap_m_ = value;
}
inline void SiParams::set_outsideinallowedoverlap_m(float value) {
  _internal_set_outsideinallowedoverlap_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.outsideInAllowedOverlap_m)
}

// optional float sideAllowedOverlap_m = 3100;
inline bool SiParams::_internal_has_sideallowedoverlap_m() const {
  bool value = (_has_bits_[7] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_sideallowedoverlap_m() const {
  return _internal_has_sideallowedoverlap_m();
}
inline void SiParams::clear_sideallowedoverlap_m() {
  sideallowedoverlap_m_ = 0;
  _has_bits_[7] &= ~0x00000100u;
}
inline float SiParams::_internal_sideallowedoverlap_m() const {
  return sideallowedoverlap_m_;
}
inline float SiParams::sideallowedoverlap_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.sideAllowedOverlap_m)
  return _internal_sideallowedoverlap_m();
}
inline void SiParams::_internal_set_sideallowedoverlap_m(float value) {
  _has_bits_[7] |= 0x00000100u;
  sideallowedoverlap_m_ = value;
}
inline void SiParams::set_sideallowedoverlap_m(float value) {
  _internal_set_sideallowedoverlap_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.sideAllowedOverlap_m)
}

// optional bool useAreaCriteria = 14368221;
inline bool SiParams::_internal_has_useareacriteria() const {
  bool value = (_has_bits_[8] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_useareacriteria() const {
  return _internal_has_useareacriteria();
}
inline void SiParams::clear_useareacriteria() {
  useareacriteria_ = false;
  _has_bits_[8] &= ~0x10000000u;
}
inline bool SiParams::_internal_useareacriteria() const {
  return useareacriteria_;
}
inline bool SiParams::useareacriteria() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.useAreaCriteria)
  return _internal_useareacriteria();
}
inline void SiParams::_internal_set_useareacriteria(bool value) {
  _has_bits_[8] |= 0x10000000u;
  useareacriteria_ = value;
}
inline void SiParams::set_useareacriteria(bool value) {
  _internal_set_useareacriteria(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.useAreaCriteria)
}

// optional float angularCurbRoadAreaFactor = 3119;
inline bool SiParams::_internal_has_angularcurbroadareafactor() const {
  bool value = (_has_bits_[7] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_angularcurbroadareafactor() const {
  return _internal_has_angularcurbroadareafactor();
}
inline void SiParams::clear_angularcurbroadareafactor() {
  angularcurbroadareafactor_ = 0;
  _has_bits_[7] &= ~0x00000400u;
}
inline float SiParams::_internal_angularcurbroadareafactor() const {
  return angularcurbroadareafactor_;
}
inline float SiParams::angularcurbroadareafactor() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.angularCurbRoadAreaFactor)
  return _internal_angularcurbroadareafactor();
}
inline void SiParams::_internal_set_angularcurbroadareafactor(float value) {
  _has_bits_[7] |= 0x00000400u;
  angularcurbroadareafactor_ = value;
}
inline void SiParams::set_angularcurbroadareafactor(float value) {
  _internal_set_angularcurbroadareafactor(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.angularCurbRoadAreaFactor)
}

// optional float prohibitionZoneRelativeLength = 1829;
inline bool SiParams::_internal_has_prohibitionzonerelativelength() const {
  bool value = (_has_bits_[3] & 0x00040000u) != 0;
  return value;
}
inline bool SiParams::has_prohibitionzonerelativelength() const {
  return _internal_has_prohibitionzonerelativelength();
}
inline void SiParams::clear_prohibitionzonerelativelength() {
  prohibitionzonerelativelength_ = 0;
  _has_bits_[3] &= ~0x00040000u;
}
inline float SiParams::_internal_prohibitionzonerelativelength() const {
  return prohibitionzonerelativelength_;
}
inline float SiParams::prohibitionzonerelativelength() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.prohibitionZoneRelativeLength)
  return _internal_prohibitionzonerelativelength();
}
inline void SiParams::_internal_set_prohibitionzonerelativelength(float value) {
  _has_bits_[3] |= 0x00040000u;
  prohibitionzonerelativelength_ = value;
}
inline void SiParams::set_prohibitionzonerelativelength(float value) {
  _internal_set_prohibitionzonerelativelength(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.prohibitionZoneRelativeLength)
}

// optional bool useLinearOverlapDropOff = 1707;
inline bool SiParams::_internal_has_uselinearoverlapdropoff() const {
  bool value = (_has_bits_[8] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_uselinearoverlapdropoff() const {
  return _internal_has_uselinearoverlapdropoff();
}
inline void SiParams::clear_uselinearoverlapdropoff() {
  uselinearoverlapdropoff_ = false;
  _has_bits_[8] &= ~0x20000000u;
}
inline bool SiParams::_internal_uselinearoverlapdropoff() const {
  return uselinearoverlapdropoff_;
}
inline bool SiParams::uselinearoverlapdropoff() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.useLinearOverlapDropOff)
  return _internal_uselinearoverlapdropoff();
}
inline void SiParams::_internal_set_uselinearoverlapdropoff(bool value) {
  _has_bits_[8] |= 0x20000000u;
  uselinearoverlapdropoff_ = value;
}
inline void SiParams::set_uselinearoverlapdropoff(bool value) {
  _internal_set_uselinearoverlapdropoff(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.useLinearOverlapDropOff)
}

// optional float vlInsideLargeEnough_m = 1425;
inline bool SiParams::_internal_has_vlinsidelargeenough_m() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool SiParams::has_vlinsidelargeenough_m() const {
  return _internal_has_vlinsidelargeenough_m();
}
inline void SiParams::clear_vlinsidelargeenough_m() {
  vlinsidelargeenough_m_ = 0;
  _has_bits_[2] &= ~0x00100000u;
}
inline float SiParams::_internal_vlinsidelargeenough_m() const {
  return vlinsidelargeenough_m_;
}
inline float SiParams::vlinsidelargeenough_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlInsideLargeEnough_m)
  return _internal_vlinsidelargeenough_m();
}
inline void SiParams::_internal_set_vlinsidelargeenough_m(float value) {
  _has_bits_[2] |= 0x00100000u;
  vlinsidelargeenough_m_ = value;
}
inline void SiParams::set_vlinsidelargeenough_m(float value) {
  _internal_set_vlinsidelargeenough_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlInsideLargeEnough_m)
}

// optional float vlMaxAllowedRoadInsideAngleDiff_rad = 1704;
inline bool SiParams::_internal_has_vlmaxallowedroadinsideanglediff_rad() const {
  bool value = (_has_bits_[3] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_vlmaxallowedroadinsideanglediff_rad() const {
  return _internal_has_vlmaxallowedroadinsideanglediff_rad();
}
inline void SiParams::clear_vlmaxallowedroadinsideanglediff_rad() {
  vlmaxallowedroadinsideanglediff_rad_ = 0;
  _has_bits_[3] &= ~0x00000400u;
}
inline float SiParams::_internal_vlmaxallowedroadinsideanglediff_rad() const {
  return vlmaxallowedroadinsideanglediff_rad_;
}
inline float SiParams::vlmaxallowedroadinsideanglediff_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.vlMaxAllowedRoadInsideAngleDiff_rad)
  return _internal_vlmaxallowedroadinsideanglediff_rad();
}
inline void SiParams::_internal_set_vlmaxallowedroadinsideanglediff_rad(float value) {
  _has_bits_[3] |= 0x00000400u;
  vlmaxallowedroadinsideanglediff_rad_ = value;
}
inline void SiParams::set_vlmaxallowedroadinsideanglediff_rad(float value) {
  _internal_set_vlmaxallowedroadinsideanglediff_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.vlMaxAllowedRoadInsideAngleDiff_rad)
}

// optional bool teCalculateRoadSideExpansion = 19;
inline bool SiParams::_internal_has_tecalculateroadsideexpansion() const {
  bool value = (_has_bits_[8] & 0x40000000u) != 0;
  return value;
}
inline bool SiParams::has_tecalculateroadsideexpansion() const {
  return _internal_has_tecalculateroadsideexpansion();
}
inline void SiParams::clear_tecalculateroadsideexpansion() {
  tecalculateroadsideexpansion_ = false;
  _has_bits_[8] &= ~0x40000000u;
}
inline bool SiParams::_internal_tecalculateroadsideexpansion() const {
  return tecalculateroadsideexpansion_;
}
inline bool SiParams::tecalculateroadsideexpansion() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.teCalculateRoadSideExpansion)
  return _internal_tecalculateroadsideexpansion();
}
inline void SiParams::_internal_set_tecalculateroadsideexpansion(bool value) {
  _has_bits_[8] |= 0x40000000u;
  tecalculateroadsideexpansion_ = value;
}
inline void SiParams::set_tecalculateroadsideexpansion(bool value) {
  _internal_set_tecalculateroadsideexpansion(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.teCalculateRoadSideExpansion)
}

// optional bool delZonesUseHighComplexityGetScore = 16563677;
inline bool SiParams::_internal_has_delzonesusehighcomplexitygetscore() const {
  bool value = (_has_bits_[8] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_delzonesusehighcomplexitygetscore() const {
  return _internal_has_delzonesusehighcomplexitygetscore();
}
inline void SiParams::clear_delzonesusehighcomplexitygetscore() {
  delzonesusehighcomplexitygetscore_ = false;
  _has_bits_[8] &= ~0x80000000u;
}
inline bool SiParams::_internal_delzonesusehighcomplexitygetscore() const {
  return delzonesusehighcomplexitygetscore_;
}
inline bool SiParams::delzonesusehighcomplexitygetscore() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.delZonesUseHighComplexityGetScore)
  return _internal_delzonesusehighcomplexitygetscore();
}
inline void SiParams::_internal_set_delzonesusehighcomplexitygetscore(bool value) {
  _has_bits_[8] |= 0x80000000u;
  delzonesusehighcomplexitygetscore_ = value;
}
inline void SiParams::set_delzonesusehighcomplexitygetscore(bool value) {
  _internal_set_delzonesusehighcomplexitygetscore(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.delZonesUseHighComplexityGetScore)
}

// optional bool cnnSlotsEnableSiSlotDetectionVerification = 3857;
inline bool SiParams::_internal_has_cnnslotsenablesislotdetectionverification() const {
  bool value = (_has_bits_[5] & 0x00800000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsenablesislotdetectionverification() const {
  return _internal_has_cnnslotsenablesislotdetectionverification();
}
inline void SiParams::clear_cnnslotsenablesislotdetectionverification() {
  cnnslotsenablesislotdetectionverification_ = false;
  _has_bits_[5] &= ~0x00800000u;
}
inline bool SiParams::_internal_cnnslotsenablesislotdetectionverification() const {
  return cnnslotsenablesislotdetectionverification_;
}
inline bool SiParams::cnnslotsenablesislotdetectionverification() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsEnableSiSlotDetectionVerification)
  return _internal_cnnslotsenablesislotdetectionverification();
}
inline void SiParams::_internal_set_cnnslotsenablesislotdetectionverification(bool value) {
  _has_bits_[5] |= 0x00800000u;
  cnnslotsenablesislotdetectionverification_ = value;
}
inline void SiParams::set_cnnslotsenablesislotdetectionverification(bool value) {
  _internal_set_cnnslotsenablesislotdetectionverification(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsEnableSiSlotDetectionVerification)
}

// optional bool cnnCompareSlotTypeFPSuppression = 2272;
inline bool SiParams::_internal_has_cnncompareslottypefpsuppression() const {
  bool value = (_has_bits_[5] & 0x01000000u) != 0;
  return value;
}
inline bool SiParams::has_cnncompareslottypefpsuppression() const {
  return _internal_has_cnncompareslottypefpsuppression();
}
inline void SiParams::clear_cnncompareslottypefpsuppression() {
  cnncompareslottypefpsuppression_ = false;
  _has_bits_[5] &= ~0x01000000u;
}
inline bool SiParams::_internal_cnncompareslottypefpsuppression() const {
  return cnncompareslottypefpsuppression_;
}
inline bool SiParams::cnncompareslottypefpsuppression() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnCompareSlotTypeFPSuppression)
  return _internal_cnncompareslottypefpsuppression();
}
inline void SiParams::_internal_set_cnncompareslottypefpsuppression(bool value) {
  _has_bits_[5] |= 0x01000000u;
  cnncompareslottypefpsuppression_ = value;
}
inline void SiParams::set_cnncompareslottypefpsuppression(bool value) {
  _internal_set_cnncompareslottypefpsuppression(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnCompareSlotTypeFPSuppression)
}

// optional uint32 cnnSlotsMinScenarioConfidenceTheshold = 566;
inline bool SiParams::_internal_has_cnnslotsminscenarioconfidencetheshold() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsminscenarioconfidencetheshold() const {
  return _internal_has_cnnslotsminscenarioconfidencetheshold();
}
inline void SiParams::clear_cnnslotsminscenarioconfidencetheshold() {
  cnnslotsminscenarioconfidencetheshold_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::_internal_cnnslotsminscenarioconfidencetheshold() const {
  return cnnslotsminscenarioconfidencetheshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::cnnslotsminscenarioconfidencetheshold() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsMinScenarioConfidenceTheshold)
  return _internal_cnnslotsminscenarioconfidencetheshold();
}
inline void SiParams::_internal_set_cnnslotsminscenarioconfidencetheshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  cnnslotsminscenarioconfidencetheshold_ = value;
}
inline void SiParams::set_cnnslotsminscenarioconfidencetheshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cnnslotsminscenarioconfidencetheshold(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsMinScenarioConfidenceTheshold)
}

// optional bool cnnSlotsPerpendicularValidatesAngular = 1447;
inline bool SiParams::_internal_has_cnnslotsperpendicularvalidatesangular() const {
  bool value = (_has_bits_[5] & 0x02000000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsperpendicularvalidatesangular() const {
  return _internal_has_cnnslotsperpendicularvalidatesangular();
}
inline void SiParams::clear_cnnslotsperpendicularvalidatesangular() {
  cnnslotsperpendicularvalidatesangular_ = false;
  _has_bits_[5] &= ~0x02000000u;
}
inline bool SiParams::_internal_cnnslotsperpendicularvalidatesangular() const {
  return cnnslotsperpendicularvalidatesangular_;
}
inline bool SiParams::cnnslotsperpendicularvalidatesangular() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsPerpendicularValidatesAngular)
  return _internal_cnnslotsperpendicularvalidatesangular();
}
inline void SiParams::_internal_set_cnnslotsperpendicularvalidatesangular(bool value) {
  _has_bits_[5] |= 0x02000000u;
  cnnslotsperpendicularvalidatesangular_ = value;
}
inline void SiParams::set_cnnslotsperpendicularvalidatesangular(bool value) {
  _internal_set_cnnslotsperpendicularvalidatesangular(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsPerpendicularValidatesAngular)
}

// optional float cnnSlotsValidationMaxOpeningAngleDiff_rad = 1982;
inline bool SiParams::_internal_has_cnnslotsvalidationmaxopeninganglediff_rad() const {
  bool value = (_has_bits_[4] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsvalidationmaxopeninganglediff_rad() const {
  return _internal_has_cnnslotsvalidationmaxopeninganglediff_rad();
}
inline void SiParams::clear_cnnslotsvalidationmaxopeninganglediff_rad() {
  cnnslotsvalidationmaxopeninganglediff_rad_ = 0;
  _has_bits_[4] &= ~0x00000080u;
}
inline float SiParams::_internal_cnnslotsvalidationmaxopeninganglediff_rad() const {
  return cnnslotsvalidationmaxopeninganglediff_rad_;
}
inline float SiParams::cnnslotsvalidationmaxopeninganglediff_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsValidationMaxOpeningAngleDiff_rad)
  return _internal_cnnslotsvalidationmaxopeninganglediff_rad();
}
inline void SiParams::_internal_set_cnnslotsvalidationmaxopeninganglediff_rad(float value) {
  _has_bits_[4] |= 0x00000080u;
  cnnslotsvalidationmaxopeninganglediff_rad_ = value;
}
inline void SiParams::set_cnnslotsvalidationmaxopeninganglediff_rad(float value) {
  _internal_set_cnnslotsvalidationmaxopeninganglediff_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsValidationMaxOpeningAngleDiff_rad)
}

// optional bool cnnSlotsEnableCnnSlotPrototypes = 2136;
inline bool SiParams::_internal_has_cnnslotsenablecnnslotprototypes() const {
  bool value = (_has_bits_[5] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsenablecnnslotprototypes() const {
  return _internal_has_cnnslotsenablecnnslotprototypes();
}
inline void SiParams::clear_cnnslotsenablecnnslotprototypes() {
  cnnslotsenablecnnslotprototypes_ = false;
  _has_bits_[5] &= ~0x04000000u;
}
inline bool SiParams::_internal_cnnslotsenablecnnslotprototypes() const {
  return cnnslotsenablecnnslotprototypes_;
}
inline bool SiParams::cnnslotsenablecnnslotprototypes() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsEnableCnnSlotPrototypes)
  return _internal_cnnslotsenablecnnslotprototypes();
}
inline void SiParams::_internal_set_cnnslotsenablecnnslotprototypes(bool value) {
  _has_bits_[5] |= 0x04000000u;
  cnnslotsenablecnnslotprototypes_ = value;
}
inline void SiParams::set_cnnslotsenablecnnslotprototypes(bool value) {
  _internal_set_cnnslotsenablecnnslotprototypes(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsEnableCnnSlotPrototypes)
}

// optional bool allowNakedCnnSlots = 835;
inline bool SiParams::_internal_has_allownakedcnnslots() const {
  bool value = (_has_bits_[5] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_allownakedcnnslots() const {
  return _internal_has_allownakedcnnslots();
}
inline void SiParams::clear_allownakedcnnslots() {
  allownakedcnnslots_ = false;
  _has_bits_[5] &= ~0x00000400u;
}
inline bool SiParams::_internal_allownakedcnnslots() const {
  return allownakedcnnslots_;
}
inline bool SiParams::allownakedcnnslots() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.allowNakedCnnSlots)
  return _internal_allownakedcnnslots();
}
inline void SiParams::_internal_set_allownakedcnnslots(bool value) {
  _has_bits_[5] |= 0x00000400u;
  allownakedcnnslots_ = value;
}
inline void SiParams::set_allownakedcnnslots(bool value) {
  _internal_set_allownakedcnnslots(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.allowNakedCnnSlots)
}

// optional float cnnSlotBlowUpLimitParSide_m = 991;
inline bool SiParams::_internal_has_cnnslotblowuplimitparside_m() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotblowuplimitparside_m() const {
  return _internal_has_cnnslotblowuplimitparside_m();
}
inline void SiParams::clear_cnnslotblowuplimitparside_m() {
  cnnslotblowuplimitparside_m_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline float SiParams::_internal_cnnslotblowuplimitparside_m() const {
  return cnnslotblowuplimitparside_m_;
}
inline float SiParams::cnnslotblowuplimitparside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotBlowUpLimitParSide_m)
  return _internal_cnnslotblowuplimitparside_m();
}
inline void SiParams::_internal_set_cnnslotblowuplimitparside_m(float value) {
  _has_bits_[1] |= 0x00200000u;
  cnnslotblowuplimitparside_m_ = value;
}
inline void SiParams::set_cnnslotblowuplimitparside_m(float value) {
  _internal_set_cnnslotblowuplimitparside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotBlowUpLimitParSide_m)
}

// optional float cnnSlotBlowUpLimitParCurb_m = 3972;
inline bool SiParams::_internal_has_cnnslotblowuplimitparcurb_m() const {
  bool value = (_has_bits_[8] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotblowuplimitparcurb_m() const {
  return _internal_has_cnnslotblowuplimitparcurb_m();
}
inline void SiParams::clear_cnnslotblowuplimitparcurb_m() {
  cnnslotblowuplimitparcurb_m_ = 0;
  _has_bits_[8] &= ~0x00004000u;
}
inline float SiParams::_internal_cnnslotblowuplimitparcurb_m() const {
  return cnnslotblowuplimitparcurb_m_;
}
inline float SiParams::cnnslotblowuplimitparcurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotBlowUpLimitParCurb_m)
  return _internal_cnnslotblowuplimitparcurb_m();
}
inline void SiParams::_internal_set_cnnslotblowuplimitparcurb_m(float value) {
  _has_bits_[8] |= 0x00004000u;
  cnnslotblowuplimitparcurb_m_ = value;
}
inline void SiParams::set_cnnslotblowuplimitparcurb_m(float value) {
  _internal_set_cnnslotblowuplimitparcurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotBlowUpLimitParCurb_m)
}

// optional float cnnSlotRoadAlignmentLimitPar_m = 3835;
inline bool SiParams::_internal_has_cnnslotroadalignmentlimitpar_m() const {
  bool value = (_has_bits_[8] & 0x00000010u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotroadalignmentlimitpar_m() const {
  return _internal_has_cnnslotroadalignmentlimitpar_m();
}
inline void SiParams::clear_cnnslotroadalignmentlimitpar_m() {
  cnnslotroadalignmentlimitpar_m_ = 0;
  _has_bits_[8] &= ~0x00000010u;
}
inline float SiParams::_internal_cnnslotroadalignmentlimitpar_m() const {
  return cnnslotroadalignmentlimitpar_m_;
}
inline float SiParams::cnnslotroadalignmentlimitpar_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotRoadAlignmentLimitPar_m)
  return _internal_cnnslotroadalignmentlimitpar_m();
}
inline void SiParams::_internal_set_cnnslotroadalignmentlimitpar_m(float value) {
  _has_bits_[8] |= 0x00000010u;
  cnnslotroadalignmentlimitpar_m_ = value;
}
inline void SiParams::set_cnnslotroadalignmentlimitpar_m(float value) {
  _internal_set_cnnslotroadalignmentlimitpar_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotRoadAlignmentLimitPar_m)
}

// optional float cnnSlotBlowUpLimitNonParSide_m = 2089;
inline bool SiParams::_internal_has_cnnslotblowuplimitnonparside_m() const {
  bool value = (_has_bits_[4] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotblowuplimitnonparside_m() const {
  return _internal_has_cnnslotblowuplimitnonparside_m();
}
inline void SiParams::clear_cnnslotblowuplimitnonparside_m() {
  cnnslotblowuplimitnonparside_m_ = 0;
  _has_bits_[4] &= ~0x00004000u;
}
inline float SiParams::_internal_cnnslotblowuplimitnonparside_m() const {
  return cnnslotblowuplimitnonparside_m_;
}
inline float SiParams::cnnslotblowuplimitnonparside_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotBlowUpLimitNonParSide_m)
  return _internal_cnnslotblowuplimitnonparside_m();
}
inline void SiParams::_internal_set_cnnslotblowuplimitnonparside_m(float value) {
  _has_bits_[4] |= 0x00004000u;
  cnnslotblowuplimitnonparside_m_ = value;
}
inline void SiParams::set_cnnslotblowuplimitnonparside_m(float value) {
  _internal_set_cnnslotblowuplimitnonparside_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotBlowUpLimitNonParSide_m)
}

// optional float cnnSlotBlowUpLimitNonParCurb_m = 1138;
inline bool SiParams::_internal_has_cnnslotblowuplimitnonparcurb_m() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotblowuplimitnonparcurb_m() const {
  return _internal_has_cnnslotblowuplimitnonparcurb_m();
}
inline void SiParams::clear_cnnslotblowuplimitnonparcurb_m() {
  cnnslotblowuplimitnonparcurb_m_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline float SiParams::_internal_cnnslotblowuplimitnonparcurb_m() const {
  return cnnslotblowuplimitnonparcurb_m_;
}
inline float SiParams::cnnslotblowuplimitnonparcurb_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotBlowUpLimitNonParCurb_m)
  return _internal_cnnslotblowuplimitnonparcurb_m();
}
inline void SiParams::_internal_set_cnnslotblowuplimitnonparcurb_m(float value) {
  _has_bits_[1] |= 0x04000000u;
  cnnslotblowuplimitnonparcurb_m_ = value;
}
inline void SiParams::set_cnnslotblowuplimitnonparcurb_m(float value) {
  _internal_set_cnnslotblowuplimitnonparcurb_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotBlowUpLimitNonParCurb_m)
}

// optional float cnnSlotRoadAlignmentLimitNonPar_m = 849;
inline bool SiParams::_internal_has_cnnslotroadalignmentlimitnonpar_m() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotroadalignmentlimitnonpar_m() const {
  return _internal_has_cnnslotroadalignmentlimitnonpar_m();
}
inline void SiParams::clear_cnnslotroadalignmentlimitnonpar_m() {
  cnnslotroadalignmentlimitnonpar_m_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline float SiParams::_internal_cnnslotroadalignmentlimitnonpar_m() const {
  return cnnslotroadalignmentlimitnonpar_m_;
}
inline float SiParams::cnnslotroadalignmentlimitnonpar_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotRoadAlignmentLimitNonPar_m)
  return _internal_cnnslotroadalignmentlimitnonpar_m();
}
inline void SiParams::_internal_set_cnnslotroadalignmentlimitnonpar_m(float value) {
  _has_bits_[1] |= 0x00000400u;
  cnnslotroadalignmentlimitnonpar_m_ = value;
}
inline void SiParams::set_cnnslotroadalignmentlimitnonpar_m(float value) {
  _internal_set_cnnslotroadalignmentlimitnonpar_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotRoadAlignmentLimitNonPar_m)
}

// optional float cnnOrientationErrorCostFunctionFactor = 3120;
inline bool SiParams::_internal_has_cnnorientationerrorcostfunctionfactor() const {
  bool value = (_has_bits_[7] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_cnnorientationerrorcostfunctionfactor() const {
  return _internal_has_cnnorientationerrorcostfunctionfactor();
}
inline void SiParams::clear_cnnorientationerrorcostfunctionfactor() {
  cnnorientationerrorcostfunctionfactor_ = 0;
  _has_bits_[7] &= ~0x00000800u;
}
inline float SiParams::_internal_cnnorientationerrorcostfunctionfactor() const {
  return cnnorientationerrorcostfunctionfactor_;
}
inline float SiParams::cnnorientationerrorcostfunctionfactor() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnOrientationErrorCostFunctionFactor)
  return _internal_cnnorientationerrorcostfunctionfactor();
}
inline void SiParams::_internal_set_cnnorientationerrorcostfunctionfactor(float value) {
  _has_bits_[7] |= 0x00000800u;
  cnnorientationerrorcostfunctionfactor_ = value;
}
inline void SiParams::set_cnnorientationerrorcostfunctionfactor(float value) {
  _internal_set_cnnorientationerrorcostfunctionfactor(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnOrientationErrorCostFunctionFactor)
}

// optional bool cnnSlotsAllowSiSlotOverride = 3762;
inline bool SiParams::_internal_has_cnnslotsallowsislotoverride() const {
  bool value = (_has_bits_[5] & 0x00000800u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsallowsislotoverride() const {
  return _internal_has_cnnslotsallowsislotoverride();
}
inline void SiParams::clear_cnnslotsallowsislotoverride() {
  cnnslotsallowsislotoverride_ = false;
  _has_bits_[5] &= ~0x00000800u;
}
inline bool SiParams::_internal_cnnslotsallowsislotoverride() const {
  return cnnslotsallowsislotoverride_;
}
inline bool SiParams::cnnslotsallowsislotoverride() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsAllowSiSlotOverride)
  return _internal_cnnslotsallowsislotoverride();
}
inline void SiParams::_internal_set_cnnslotsallowsislotoverride(bool value) {
  _has_bits_[5] |= 0x00000800u;
  cnnslotsallowsislotoverride_ = value;
}
inline void SiParams::set_cnnslotsallowsislotoverride(bool value) {
  _internal_set_cnnslotsallowsislotoverride(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsAllowSiSlotOverride)
}

// optional float slotScoringMaxParLineLength_m = 2287;
inline bool SiParams::_internal_has_slotscoringmaxparlinelength_m() const {
  bool value = (_has_bits_[5] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_slotscoringmaxparlinelength_m() const {
  return _internal_has_slotscoringmaxparlinelength_m();
}
inline void SiParams::clear_slotscoringmaxparlinelength_m() {
  slotscoringmaxparlinelength_m_ = 0;
  _has_bits_[5] &= ~0x00002000u;
}
inline float SiParams::_internal_slotscoringmaxparlinelength_m() const {
  return slotscoringmaxparlinelength_m_;
}
inline float SiParams::slotscoringmaxparlinelength_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotScoringMaxParLineLength_m)
  return _internal_slotscoringmaxparlinelength_m();
}
inline void SiParams::_internal_set_slotscoringmaxparlinelength_m(float value) {
  _has_bits_[5] |= 0x00002000u;
  slotscoringmaxparlinelength_m_ = value;
}
inline void SiParams::set_slotscoringmaxparlinelength_m(float value) {
  _internal_set_slotscoringmaxparlinelength_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotScoringMaxParLineLength_m)
}

// optional float slotScoringMinParWingLength_m = 846;
inline bool SiParams::_internal_has_slotscoringminparwinglength_m() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_slotscoringminparwinglength_m() const {
  return _internal_has_slotscoringminparwinglength_m();
}
inline void SiParams::clear_slotscoringminparwinglength_m() {
  slotscoringminparwinglength_m_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float SiParams::_internal_slotscoringminparwinglength_m() const {
  return slotscoringminparwinglength_m_;
}
inline float SiParams::slotscoringminparwinglength_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotScoringMinParWingLength_m)
  return _internal_slotscoringminparwinglength_m();
}
inline void SiParams::_internal_set_slotscoringminparwinglength_m(float value) {
  _has_bits_[1] |= 0x00000100u;
  slotscoringminparwinglength_m_ = value;
}
inline void SiParams::set_slotscoringminparwinglength_m(float value) {
  _internal_set_slotscoringminparwinglength_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotScoringMinParWingLength_m)
}

// optional float slotScoringMinNonParSideLength_m = 1986;
inline bool SiParams::_internal_has_slotscoringminnonparsidelength_m() const {
  bool value = (_has_bits_[4] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_slotscoringminnonparsidelength_m() const {
  return _internal_has_slotscoringminnonparsidelength_m();
}
inline void SiParams::clear_slotscoringminnonparsidelength_m() {
  slotscoringminnonparsidelength_m_ = 0;
  _has_bits_[4] &= ~0x00000100u;
}
inline float SiParams::_internal_slotscoringminnonparsidelength_m() const {
  return slotscoringminnonparsidelength_m_;
}
inline float SiParams::slotscoringminnonparsidelength_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotScoringMinNonParSideLength_m)
  return _internal_slotscoringminnonparsidelength_m();
}
inline void SiParams::_internal_set_slotscoringminnonparsidelength_m(float value) {
  _has_bits_[4] |= 0x00000100u;
  slotscoringminnonparsidelength_m_ = value;
}
inline void SiParams::set_slotscoringminnonparsidelength_m(float value) {
  _internal_set_slotscoringminnonparsidelength_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotScoringMinNonParSideLength_m)
}

// optional float slotScoringMaxVlOrLineAngleDiff_rad = 2293;
inline bool SiParams::_internal_has_slotscoringmaxvlorlineanglediff_rad() const {
  bool value = (_has_bits_[5] & 0x00004000u) != 0;
  return value;
}
inline bool SiParams::has_slotscoringmaxvlorlineanglediff_rad() const {
  return _internal_has_slotscoringmaxvlorlineanglediff_rad();
}
inline void SiParams::clear_slotscoringmaxvlorlineanglediff_rad() {
  slotscoringmaxvlorlineanglediff_rad_ = 0;
  _has_bits_[5] &= ~0x00004000u;
}
inline float SiParams::_internal_slotscoringmaxvlorlineanglediff_rad() const {
  return slotscoringmaxvlorlineanglediff_rad_;
}
inline float SiParams::slotscoringmaxvlorlineanglediff_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.slotScoringMaxVlOrLineAngleDiff_rad)
  return _internal_slotscoringmaxvlorlineanglediff_rad();
}
inline void SiParams::_internal_set_slotscoringmaxvlorlineanglediff_rad(float value) {
  _has_bits_[5] |= 0x00004000u;
  slotscoringmaxvlorlineanglediff_rad_ = value;
}
inline void SiParams::set_slotscoringmaxvlorlineanglediff_rad(float value) {
  _internal_set_slotscoringmaxvlorlineanglediff_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.slotScoringMaxVlOrLineAngleDiff_rad)
}

// optional float cnnSlotsMinValidationOverlap_m = 1287;
inline bool SiParams::_internal_has_cnnslotsminvalidationoverlap_m() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsminvalidationoverlap_m() const {
  return _internal_has_cnnslotsminvalidationoverlap_m();
}
inline void SiParams::clear_cnnslotsminvalidationoverlap_m() {
  cnnslotsminvalidationoverlap_m_ = 0;
  _has_bits_[2] &= ~0x00000040u;
}
inline float SiParams::_internal_cnnslotsminvalidationoverlap_m() const {
  return cnnslotsminvalidationoverlap_m_;
}
inline float SiParams::cnnslotsminvalidationoverlap_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsMinValidationOverlap_m)
  return _internal_cnnslotsminvalidationoverlap_m();
}
inline void SiParams::_internal_set_cnnslotsminvalidationoverlap_m(float value) {
  _has_bits_[2] |= 0x00000040u;
  cnnslotsminvalidationoverlap_m_ = value;
}
inline void SiParams::set_cnnslotsminvalidationoverlap_m(float value) {
  _internal_set_cnnslotsminvalidationoverlap_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsMinValidationOverlap_m)
}

// optional float cnnSlotsMinInvalidationOverlap_m = 4038;
inline bool SiParams::_internal_has_cnnslotsmininvalidationoverlap_m() const {
  bool value = (_has_bits_[8] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotsmininvalidationoverlap_m() const {
  return _internal_has_cnnslotsmininvalidationoverlap_m();
}
inline void SiParams::clear_cnnslotsmininvalidationoverlap_m() {
  cnnslotsmininvalidationoverlap_m_ = 0;
  _has_bits_[8] &= ~0x00080000u;
}
inline float SiParams::_internal_cnnslotsmininvalidationoverlap_m() const {
  return cnnslotsmininvalidationoverlap_m_;
}
inline float SiParams::cnnslotsmininvalidationoverlap_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotsMinInvalidationOverlap_m)
  return _internal_cnnslotsmininvalidationoverlap_m();
}
inline void SiParams::_internal_set_cnnslotsmininvalidationoverlap_m(float value) {
  _has_bits_[8] |= 0x00080000u;
  cnnslotsmininvalidationoverlap_m_ = value;
}
inline void SiParams::set_cnnslotsmininvalidationoverlap_m(float value) {
  _internal_set_cnnslotsmininvalidationoverlap_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotsMinInvalidationOverlap_m)
}

// optional float minDistGapCnnSlotVsTrackedSlot_m = 1930;
inline bool SiParams::_internal_has_mindistgapcnnslotvstrackedslot_m() const {
  bool value = (_has_bits_[3] & 0x20000000u) != 0;
  return value;
}
inline bool SiParams::has_mindistgapcnnslotvstrackedslot_m() const {
  return _internal_has_mindistgapcnnslotvstrackedslot_m();
}
inline void SiParams::clear_mindistgapcnnslotvstrackedslot_m() {
  mindistgapcnnslotvstrackedslot_m_ = 0;
  _has_bits_[3] &= ~0x20000000u;
}
inline float SiParams::_internal_mindistgapcnnslotvstrackedslot_m() const {
  return mindistgapcnnslotvstrackedslot_m_;
}
inline float SiParams::mindistgapcnnslotvstrackedslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minDistGapCnnSlotVsTrackedSlot_m)
  return _internal_mindistgapcnnslotvstrackedslot_m();
}
inline void SiParams::_internal_set_mindistgapcnnslotvstrackedslot_m(float value) {
  _has_bits_[3] |= 0x20000000u;
  mindistgapcnnslotvstrackedslot_m_ = value;
}
inline void SiParams::set_mindistgapcnnslotvstrackedslot_m(float value) {
  _internal_set_mindistgapcnnslotvstrackedslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minDistGapCnnSlotVsTrackedSlot_m)
}

// optional float cnnSlotOdSlotEnlargement_m = 156;
inline bool SiParams::_internal_has_cnnslotodslotenlargement_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SiParams::has_cnnslotodslotenlargement_m() const {
  return _internal_has_cnnslotodslotenlargement_m();
}
inline void SiParams::clear_cnnslotodslotenlargement_m() {
  cnnslotodslotenlargement_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float SiParams::_internal_cnnslotodslotenlargement_m() const {
  return cnnslotodslotenlargement_m_;
}
inline float SiParams::cnnslotodslotenlargement_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.cnnSlotOdSlotEnlargement_m)
  return _internal_cnnslotodslotenlargement_m();
}
inline void SiParams::_internal_set_cnnslotodslotenlargement_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  cnnslotodslotenlargement_m_ = value;
}
inline void SiParams::set_cnnslotodslotenlargement_m(float value) {
  _internal_set_cnnslotodslotenlargement_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.cnnSlotOdSlotEnlargement_m)
}

// optional float memParkExtendSlot_m = 3954;
inline bool SiParams::_internal_has_memparkextendslot_m() const {
  bool value = (_has_bits_[8] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_memparkextendslot_m() const {
  return _internal_has_memparkextendslot_m();
}
inline void SiParams::clear_memparkextendslot_m() {
  memparkextendslot_m_ = 0;
  _has_bits_[8] &= ~0x00001000u;
}
inline float SiParams::_internal_memparkextendslot_m() const {
  return memparkextendslot_m_;
}
inline float SiParams::memparkextendslot_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.memParkExtendSlot_m)
  return _internal_memparkextendslot_m();
}
inline void SiParams::_internal_set_memparkextendslot_m(float value) {
  _has_bits_[8] |= 0x00001000u;
  memparkextendslot_m_ = value;
}
inline void SiParams::set_memparkextendslot_m(float value) {
  _internal_set_memparkextendslot_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.memParkExtendSlot_m)
}

// optional float leftRightMemParkOffsetX_m = 629;
inline bool SiParams::_internal_has_leftrightmemparkoffsetx_m() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_leftrightmemparkoffsetx_m() const {
  return _internal_has_leftrightmemparkoffsetx_m();
}
inline void SiParams::clear_leftrightmemparkoffsetx_m() {
  leftrightmemparkoffsetx_m_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float SiParams::_internal_leftrightmemparkoffsetx_m() const {
  return leftrightmemparkoffsetx_m_;
}
inline float SiParams::leftrightmemparkoffsetx_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.leftRightMemParkOffsetX_m)
  return _internal_leftrightmemparkoffsetx_m();
}
inline void SiParams::_internal_set_leftrightmemparkoffsetx_m(float value) {
  _has_bits_[1] |= 0x00000002u;
  leftrightmemparkoffsetx_m_ = value;
}
inline void SiParams::set_leftrightmemparkoffsetx_m(float value) {
  _internal_set_leftrightmemparkoffsetx_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.leftRightMemParkOffsetX_m)
}

// optional float leftRightMemParkGapY_m = 2918;
inline bool SiParams::_internal_has_leftrightmemparkgapy_m() const {
  bool value = (_has_bits_[6] & 0x10000000u) != 0;
  return value;
}
inline bool SiParams::has_leftrightmemparkgapy_m() const {
  return _internal_has_leftrightmemparkgapy_m();
}
inline void SiParams::clear_leftrightmemparkgapy_m() {
  leftrightmemparkgapy_m_ = 0;
  _has_bits_[6] &= ~0x10000000u;
}
inline float SiParams::_internal_leftrightmemparkgapy_m() const {
  return leftrightmemparkgapy_m_;
}
inline float SiParams::leftrightmemparkgapy_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.leftRightMemParkGapY_m)
  return _internal_leftrightmemparkgapy_m();
}
inline void SiParams::_internal_set_leftrightmemparkgapy_m(float value) {
  _has_bits_[6] |= 0x10000000u;
  leftrightmemparkgapy_m_ = value;
}
inline void SiParams::set_leftrightmemparkgapy_m(float value) {
  _internal_set_leftrightmemparkgapy_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.leftRightMemParkGapY_m)
}

// optional float frontMemParkGap_m = 3217;
inline bool SiParams::_internal_has_frontmemparkgap_m() const {
  bool value = (_has_bits_[7] & 0x00002000u) != 0;
  return value;
}
inline bool SiParams::has_frontmemparkgap_m() const {
  return _internal_has_frontmemparkgap_m();
}
inline void SiParams::clear_frontmemparkgap_m() {
  frontmemparkgap_m_ = 0;
  _has_bits_[7] &= ~0x00002000u;
}
inline float SiParams::_internal_frontmemparkgap_m() const {
  return frontmemparkgap_m_;
}
inline float SiParams::frontmemparkgap_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.frontMemParkGap_m)
  return _internal_frontmemparkgap_m();
}
inline void SiParams::_internal_set_frontmemparkgap_m(float value) {
  _has_bits_[7] |= 0x00002000u;
  frontmemparkgap_m_ = value;
}
inline void SiParams::set_frontmemparkgap_m(float value) {
  _internal_set_frontmemparkgap_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.frontMemParkGap_m)
}

// optional float rearMemParkGap_m = 2241;
inline bool SiParams::_internal_has_rearmemparkgap_m() const {
  bool value = (_has_bits_[5] & 0x00000080u) != 0;
  return value;
}
inline bool SiParams::has_rearmemparkgap_m() const {
  return _internal_has_rearmemparkgap_m();
}
inline void SiParams::clear_rearmemparkgap_m() {
  rearmemparkgap_m_ = 0;
  _has_bits_[5] &= ~0x00000080u;
}
inline float SiParams::_internal_rearmemparkgap_m() const {
  return rearmemparkgap_m_;
}
inline float SiParams::rearmemparkgap_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.rearMemParkGap_m)
  return _internal_rearmemparkgap_m();
}
inline void SiParams::_internal_set_rearmemparkgap_m(float value) {
  _has_bits_[5] |= 0x00000080u;
  rearmemparkgap_m_ = value;
}
inline void SiParams::set_rearmemparkgap_m(float value) {
  _internal_set_rearmemparkgap_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.rearMemParkGap_m)
}

// optional float maxMemParkRotAdj_rad = 12895248;
inline bool SiParams::_internal_has_maxmemparkrotadj_rad() const {
  bool value = (_has_bits_[9] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_maxmemparkrotadj_rad() const {
  return _internal_has_maxmemparkrotadj_rad();
}
inline void SiParams::clear_maxmemparkrotadj_rad() {
  maxmemparkrotadj_rad_ = 0;
  _has_bits_[9] &= ~0x00000004u;
}
inline float SiParams::_internal_maxmemparkrotadj_rad() const {
  return maxmemparkrotadj_rad_;
}
inline float SiParams::maxmemparkrotadj_rad() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxMemParkRotAdj_rad)
  return _internal_maxmemparkrotadj_rad();
}
inline void SiParams::_internal_set_maxmemparkrotadj_rad(float value) {
  _has_bits_[9] |= 0x00000004u;
  maxmemparkrotadj_rad_ = value;
}
inline void SiParams::set_maxmemparkrotadj_rad(float value) {
  _internal_set_maxmemparkrotadj_rad(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxMemParkRotAdj_rad)
}

// optional float maxMemParkLinearAdj_m = 91;
inline bool SiParams::_internal_has_maxmemparklinearadj_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_maxmemparklinearadj_m() const {
  return _internal_has_maxmemparklinearadj_m();
}
inline void SiParams::clear_maxmemparklinearadj_m() {
  maxmemparklinearadj_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float SiParams::_internal_maxmemparklinearadj_m() const {
  return maxmemparklinearadj_m_;
}
inline float SiParams::maxmemparklinearadj_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.maxMemParkLinearAdj_m)
  return _internal_maxmemparklinearadj_m();
}
inline void SiParams::_internal_set_maxmemparklinearadj_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  maxmemparklinearadj_m_ = value;
}
inline void SiParams::set_maxmemparklinearadj_m(float value) {
  _internal_set_maxmemparklinearadj_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.maxMemParkLinearAdj_m)
}

// optional bool preapplyRoadsideExtension = 2224;
inline bool SiParams::_internal_has_preapplyroadsideextension() const {
  bool value = (_has_bits_[5] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_preapplyroadsideextension() const {
  return _internal_has_preapplyroadsideextension();
}
inline void SiParams::clear_preapplyroadsideextension() {
  preapplyroadsideextension_ = false;
  _has_bits_[5] &= ~0x00001000u;
}
inline bool SiParams::_internal_preapplyroadsideextension() const {
  return preapplyroadsideextension_;
}
inline bool SiParams::preapplyroadsideextension() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.preapplyRoadsideExtension)
  return _internal_preapplyroadsideextension();
}
inline void SiParams::_internal_set_preapplyroadsideextension(bool value) {
  _has_bits_[5] |= 0x00001000u;
  preapplyroadsideextension_ = value;
}
inline void SiParams::set_preapplyroadsideextension(bool value) {
  _internal_set_preapplyroadsideextension(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.preapplyRoadsideExtension)
}

// optional float safetyMarginDynObjEnlargingPed_m = 3035;
inline bool SiParams::_internal_has_safetymargindynobjenlargingped_m() const {
  bool value = (_has_bits_[7] & 0x00000002u) != 0;
  return value;
}
inline bool SiParams::has_safetymargindynobjenlargingped_m() const {
  return _internal_has_safetymargindynobjenlargingped_m();
}
inline void SiParams::clear_safetymargindynobjenlargingped_m() {
  safetymargindynobjenlargingped_m_ = 0;
  _has_bits_[7] &= ~0x00000002u;
}
inline float SiParams::_internal_safetymargindynobjenlargingped_m() const {
  return safetymargindynobjenlargingped_m_;
}
inline float SiParams::safetymargindynobjenlargingped_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.safetyMarginDynObjEnlargingPed_m)
  return _internal_safetymargindynobjenlargingped_m();
}
inline void SiParams::_internal_set_safetymargindynobjenlargingped_m(float value) {
  _has_bits_[7] |= 0x00000002u;
  safetymargindynobjenlargingped_m_ = value;
}
inline void SiParams::set_safetymargindynobjenlargingped_m(float value) {
  _internal_set_safetymargindynobjenlargingped_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.safetyMarginDynObjEnlargingPed_m)
}

// optional float safetyMarginDynObjEnlargingCar_m = 2657;
inline bool SiParams::_internal_has_safetymargindynobjenlargingcar_m() const {
  bool value = (_has_bits_[6] & 0x00000020u) != 0;
  return value;
}
inline bool SiParams::has_safetymargindynobjenlargingcar_m() const {
  return _internal_has_safetymargindynobjenlargingcar_m();
}
inline void SiParams::clear_safetymargindynobjenlargingcar_m() {
  safetymargindynobjenlargingcar_m_ = 0;
  _has_bits_[6] &= ~0x00000020u;
}
inline float SiParams::_internal_safetymargindynobjenlargingcar_m() const {
  return safetymargindynobjenlargingcar_m_;
}
inline float SiParams::safetymargindynobjenlargingcar_m() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.safetyMarginDynObjEnlargingCar_m)
  return _internal_safetymargindynobjenlargingcar_m();
}
inline void SiParams::_internal_set_safetymargindynobjenlargingcar_m(float value) {
  _has_bits_[6] |= 0x00000020u;
  safetymargindynobjenlargingcar_m_ = value;
}
inline void SiParams::set_safetymargindynobjenlargingcar_m(float value) {
  _internal_set_safetymargindynobjenlargingcar_m(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.safetyMarginDynObjEnlargingCar_m)
}

// optional uint32 minHeightConfDeltaStaticObj = 2213;
inline bool SiParams::_internal_has_minheightconfdeltastaticobj() const {
  bool value = (_has_bits_[5] & 0x00000040u) != 0;
  return value;
}
inline bool SiParams::has_minheightconfdeltastaticobj() const {
  return _internal_has_minheightconfdeltastaticobj();
}
inline void SiParams::clear_minheightconfdeltastaticobj() {
  minheightconfdeltastaticobj_ = 0u;
  _has_bits_[5] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::_internal_minheightconfdeltastaticobj() const {
  return minheightconfdeltastaticobj_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiParams::minheightconfdeltastaticobj() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.minHeightConfDeltaStaticObj)
  return _internal_minheightconfdeltastaticobj();
}
inline void SiParams::_internal_set_minheightconfdeltastaticobj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[5] |= 0x00000040u;
  minheightconfdeltastaticobj_ = value;
}
inline void SiParams::set_minheightconfdeltastaticobj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minheightconfdeltastaticobj(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.minHeightConfDeltaStaticObj)
}

// optional float developerGenericFloat0 = 152;
inline bool SiParams::_internal_has_developergenericfloat0() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SiParams::has_developergenericfloat0() const {
  return _internal_has_developergenericfloat0();
}
inline void SiParams::clear_developergenericfloat0() {
  developergenericfloat0_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float SiParams::_internal_developergenericfloat0() const {
  return developergenericfloat0_;
}
inline float SiParams::developergenericfloat0() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.developerGenericFloat0)
  return _internal_developergenericfloat0();
}
inline void SiParams::_internal_set_developergenericfloat0(float value) {
  _has_bits_[0] |= 0x00000100u;
  developergenericfloat0_ = value;
}
inline void SiParams::set_developergenericfloat0(float value) {
  _internal_set_developergenericfloat0(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.developerGenericFloat0)
}

// optional float developerGenericFloat1 = 185;
inline bool SiParams::_internal_has_developergenericfloat1() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SiParams::has_developergenericfloat1() const {
  return _internal_has_developergenericfloat1();
}
inline void SiParams::clear_developergenericfloat1() {
  developergenericfloat1_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float SiParams::_internal_developergenericfloat1() const {
  return developergenericfloat1_;
}
inline float SiParams::developergenericfloat1() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.developerGenericFloat1)
  return _internal_developergenericfloat1();
}
inline void SiParams::_internal_set_developergenericfloat1(float value) {
  _has_bits_[0] |= 0x00001000u;
  developergenericfloat1_ = value;
}
inline void SiParams::set_developergenericfloat1(float value) {
  _internal_set_developergenericfloat1(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.developerGenericFloat1)
}

// optional float developerGenericFloat2 = 218;
inline bool SiParams::_internal_has_developergenericfloat2() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SiParams::has_developergenericfloat2() const {
  return _internal_has_developergenericfloat2();
}
inline void SiParams::clear_developergenericfloat2() {
  developergenericfloat2_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float SiParams::_internal_developergenericfloat2() const {
  return developergenericfloat2_;
}
inline float SiParams::developergenericfloat2() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.developerGenericFloat2)
  return _internal_developergenericfloat2();
}
inline void SiParams::_internal_set_developergenericfloat2(float value) {
  _has_bits_[0] |= 0x00008000u;
  developergenericfloat2_ = value;
}
inline void SiParams::set_developergenericfloat2(float value) {
  _internal_set_developergenericfloat2(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.developerGenericFloat2)
}

// optional float developerGenericFloat3 = 251;
inline bool SiParams::_internal_has_developergenericfloat3() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SiParams::has_developergenericfloat3() const {
  return _internal_has_developergenericfloat3();
}
inline void SiParams::clear_developergenericfloat3() {
  developergenericfloat3_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float SiParams::_internal_developergenericfloat3() const {
  return developergenericfloat3_;
}
inline float SiParams::developergenericfloat3() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.developerGenericFloat3)
  return _internal_developergenericfloat3();
}
inline void SiParams::_internal_set_developergenericfloat3(float value) {
  _has_bits_[0] |= 0x00080000u;
  developergenericfloat3_ = value;
}
inline void SiParams::set_developergenericfloat3(float value) {
  _internal_set_developergenericfloat3(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.developerGenericFloat3)
}

// optional float developerGenericFloat4 = 4286347;
inline bool SiParams::_internal_has_developergenericfloat4() const {
  bool value = (_has_bits_[8] & 0x08000000u) != 0;
  return value;
}
inline bool SiParams::has_developergenericfloat4() const {
  return _internal_has_developergenericfloat4();
}
inline void SiParams::clear_developergenericfloat4() {
  developergenericfloat4_ = 0;
  _has_bits_[8] &= ~0x08000000u;
}
inline float SiParams::_internal_developergenericfloat4() const {
  return developergenericfloat4_;
}
inline float SiParams::developergenericfloat4() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.developerGenericFloat4)
  return _internal_developergenericfloat4();
}
inline void SiParams::_internal_set_developergenericfloat4(float value) {
  _has_bits_[8] |= 0x08000000u;
  developergenericfloat4_ = value;
}
inline void SiParams::set_developergenericfloat4(float value) {
  _internal_set_developergenericfloat4(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.developerGenericFloat4)
}

// optional float developerGenericFloat5 = 61;
inline bool SiParams::_internal_has_developergenericfloat5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SiParams::has_developergenericfloat5() const {
  return _internal_has_developergenericfloat5();
}
inline void SiParams::clear_developergenericfloat5() {
  developergenericfloat5_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SiParams::_internal_developergenericfloat5() const {
  return developergenericfloat5_;
}
inline float SiParams::developergenericfloat5() const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams.developerGenericFloat5)
  return _internal_developergenericfloat5();
}
inline void SiParams::_internal_set_developergenericfloat5(float value) {
  _has_bits_[0] |= 0x00000004u;
  developergenericfloat5_ = value;
}
inline void SiParams::set_developergenericfloat5(float value) {
  _internal_set_developergenericfloat5(value);
  // @@protoc_insertion_point(field_set:pb.si.si_params.SiParams.developerGenericFloat5)
}

// -------------------------------------------------------------------

// SiParams_array_port

// repeated .pb.si.si_params.SiParams data = 4025;
inline int SiParams_array_port::_internal_data_size() const {
  return data_.size();
}
inline int SiParams_array_port::data_size() const {
  return _internal_data_size();
}
inline void SiParams_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::si::si_params::SiParams* SiParams_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.si.si_params.SiParams_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::si_params::SiParams >*
SiParams_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.si.si_params.SiParams_array_port.data)
  return &data_;
}
inline const ::pb::si::si_params::SiParams& SiParams_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::si::si_params::SiParams& SiParams_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.si.si_params.SiParams_array_port.data)
  return _internal_data(index);
}
inline ::pb::si::si_params::SiParams* SiParams_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::si::si_params::SiParams* SiParams_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.si.si_params.SiParams_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::si::si_params::SiParams >&
SiParams_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.si.si_params.SiParams_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace si_params
}  // namespace si
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_si_2fsi_5fparams_2eproto
