// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/virtual_line_info.proto

#include "si/virtual_line_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_si_2fvirtual_5fline_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualLineInfo_si_2fvirtual_5fline_5finfo_2eproto;
namespace pb {
namespace si {
namespace virtual_line_info {
class VirtualLineInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtualLineInfo> _instance;
} _VirtualLineInfo_default_instance_;
class VirtualLineInfo_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtualLineInfo_array_port> _instance;
} _VirtualLineInfo_array_port_default_instance_;
}  // namespace virtual_line_info
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_VirtualLineInfo_si_2fvirtual_5fline_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::virtual_line_info::_VirtualLineInfo_default_instance_;
    new (ptr) ::pb::si::virtual_line_info::VirtualLineInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::virtual_line_info::VirtualLineInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualLineInfo_si_2fvirtual_5fline_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VirtualLineInfo_si_2fvirtual_5fline_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_VirtualLineInfo_array_port_si_2fvirtual_5fline_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::virtual_line_info::_VirtualLineInfo_array_port_default_instance_;
    new (ptr) ::pb::si::virtual_line_info::VirtualLineInfo_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::virtual_line_info::VirtualLineInfo_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VirtualLineInfo_array_port_si_2fvirtual_5fline_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VirtualLineInfo_array_port_si_2fvirtual_5fline_5finfo_2eproto}, {
      &scc_info_VirtualLineInfo_si_2fvirtual_5fline_5finfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fvirtual_5fline_5finfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fvirtual_5fline_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fvirtual_5fline_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fvirtual_5fline_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, parkingslotid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, delimiterid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, staticstructureid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, virtuallineid_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, startvertex_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo, endvertex_nu_),
  1,
  0,
  3,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::virtual_line_info::VirtualLineInfo_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::pb::si::virtual_line_info::VirtualLineInfo)},
  { 17, 23, sizeof(::pb::si::virtual_line_info::VirtualLineInfo_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::virtual_line_info::_VirtualLineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::virtual_line_info::_VirtualLineInfo_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fvirtual_5fline_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032si/virtual_line_info.proto\022\027pb.si.virt"
  "ual_line_info\"\257\001\n\017VirtualLineInfo\022\031\n\020par"
  "kingSlotId_nu\030\256\022 \001(\r\022\027\n\016delimiterId_nu\030\255"
  "\016 \001(\r\022\035\n\024staticStructureId_nu\030\323\026 \001(\r\022\031\n\020"
  "virtualLineId_nu\030\374\031 \001(\r\022\027\n\016startVertex_n"
  "u\030\266\026 \001(\r\022\025\n\014endVertex_nu\030\237\033 \001(\r\"U\n\032Virtu"
  "alLineInfo_array_port\0227\n\004data\030\326\003 \003(\0132(.p"
  "b.si.virtual_line_info.VirtualLineInfo"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_sccs[2] = {
  &scc_info_VirtualLineInfo_si_2fvirtual_5fline_5finfo_2eproto.base,
  &scc_info_VirtualLineInfo_array_port_si_2fvirtual_5fline_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_once;
static bool descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fvirtual_5fline_5finfo_2eproto = {
  &descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_initialized, descriptor_table_protodef_si_2fvirtual_5fline_5finfo_2eproto, "si/virtual_line_info.proto", 318,
  &descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_once, descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_sccs, descriptor_table_si_2fvirtual_5fline_5finfo_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_si_2fvirtual_5fline_5finfo_2eproto::offsets,
  file_level_metadata_si_2fvirtual_5fline_5finfo_2eproto, 2, file_level_enum_descriptors_si_2fvirtual_5fline_5finfo_2eproto, file_level_service_descriptors_si_2fvirtual_5fline_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fvirtual_5fline_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fvirtual_5fline_5finfo_2eproto), true);
namespace pb {
namespace si {
namespace virtual_line_info {

// ===================================================================

void VirtualLineInfo::InitAsDefaultInstance() {
}
class VirtualLineInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualLineInfo>()._has_bits_);
  static void set_has_parkingslotid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delimiterid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_staticstructureid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_virtuallineid_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_startvertex_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endvertex_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

VirtualLineInfo::VirtualLineInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.virtual_line_info.VirtualLineInfo)
}
VirtualLineInfo::VirtualLineInfo(const VirtualLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delimiterid_nu_, &from.delimiterid_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&endvertex_nu_) -
    reinterpret_cast<char*>(&delimiterid_nu_)) + sizeof(endvertex_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.si.virtual_line_info.VirtualLineInfo)
}

void VirtualLineInfo::SharedCtor() {
  ::memset(&delimiterid_nu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endvertex_nu_) -
      reinterpret_cast<char*>(&delimiterid_nu_)) + sizeof(endvertex_nu_));
}

VirtualLineInfo::~VirtualLineInfo() {
  // @@protoc_insertion_point(destructor:pb.si.virtual_line_info.VirtualLineInfo)
  SharedDtor();
}

void VirtualLineInfo::SharedDtor() {
}

void VirtualLineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtualLineInfo& VirtualLineInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtualLineInfo_si_2fvirtual_5fline_5finfo_2eproto.base);
  return *internal_default_instance();
}


void VirtualLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.virtual_line_info.VirtualLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&delimiterid_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endvertex_nu_) -
        reinterpret_cast<char*>(&delimiterid_nu_)) + sizeof(endvertex_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VirtualLineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 delimiterId_nu = 1837;
      case 1837:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_delimiterid_nu(&has_bits);
          delimiterid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parkingSlotId_nu = 2350;
      case 2350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_parkingslotid_nu(&has_bits);
          parkingslotid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 startVertex_nu = 2870;
      case 2870:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_startvertex_nu(&has_bits);
          startvertex_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 staticStructureId_nu = 2899;
      case 2899:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_staticstructureid_nu(&has_bits);
          staticstructureid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 virtualLineId_nu = 3324;
      case 3324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_virtuallineid_nu(&has_bits);
          virtuallineid_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 endVertex_nu = 3487;
      case 3487:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_endvertex_nu(&has_bits);
          endvertex_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualLineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.virtual_line_info.VirtualLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 delimiterId_nu = 1837;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1837, this->_internal_delimiterid_nu(), target);
  }

  // optional uint32 parkingSlotId_nu = 2350;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2350, this->_internal_parkingslotid_nu(), target);
  }

  // optional uint32 startVertex_nu = 2870;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2870, this->_internal_startvertex_nu(), target);
  }

  // optional uint32 staticStructureId_nu = 2899;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2899, this->_internal_staticstructureid_nu(), target);
  }

  // optional uint32 virtualLineId_nu = 3324;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3324, this->_internal_virtuallineid_nu(), target);
  }

  // optional uint32 endVertex_nu = 3487;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3487, this->_internal_endvertex_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.virtual_line_info.VirtualLineInfo)
  return target;
}

size_t VirtualLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.virtual_line_info.VirtualLineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 delimiterId_nu = 1837;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delimiterid_nu());
    }

    // optional uint32 parkingSlotId_nu = 2350;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parkingslotid_nu());
    }

    // optional uint32 startVertex_nu = 2870;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_startvertex_nu());
    }

    // optional uint32 staticStructureId_nu = 2899;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_staticstructureid_nu());
    }

    // optional uint32 virtualLineId_nu = 3324;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_virtuallineid_nu());
    }

    // optional uint32 endVertex_nu = 3487;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endvertex_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtualLineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.virtual_line_info.VirtualLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualLineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirtualLineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.virtual_line_info.VirtualLineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.virtual_line_info.VirtualLineInfo)
    MergeFrom(*source);
  }
}

void VirtualLineInfo::MergeFrom(const VirtualLineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.virtual_line_info.VirtualLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      delimiterid_nu_ = from.delimiterid_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      parkingslotid_nu_ = from.parkingslotid_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      startvertex_nu_ = from.startvertex_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      staticstructureid_nu_ = from.staticstructureid_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      virtuallineid_nu_ = from.virtuallineid_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      endvertex_nu_ = from.endvertex_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VirtualLineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.virtual_line_info.VirtualLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualLineInfo::CopyFrom(const VirtualLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.virtual_line_info.VirtualLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualLineInfo::IsInitialized() const {
  return true;
}

void VirtualLineInfo::InternalSwap(VirtualLineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delimiterid_nu_, other->delimiterid_nu_);
  swap(parkingslotid_nu_, other->parkingslotid_nu_);
  swap(startvertex_nu_, other->startvertex_nu_);
  swap(staticstructureid_nu_, other->staticstructureid_nu_);
  swap(virtuallineid_nu_, other->virtuallineid_nu_);
  swap(endvertex_nu_, other->endvertex_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualLineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VirtualLineInfo_array_port::InitAsDefaultInstance() {
}
class VirtualLineInfo_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<VirtualLineInfo_array_port>()._has_bits_);
};

VirtualLineInfo_array_port::VirtualLineInfo_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.virtual_line_info.VirtualLineInfo_array_port)
}
VirtualLineInfo_array_port::VirtualLineInfo_array_port(const VirtualLineInfo_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.virtual_line_info.VirtualLineInfo_array_port)
}

void VirtualLineInfo_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VirtualLineInfo_array_port_si_2fvirtual_5fline_5finfo_2eproto.base);
}

VirtualLineInfo_array_port::~VirtualLineInfo_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  SharedDtor();
}

void VirtualLineInfo_array_port::SharedDtor() {
}

void VirtualLineInfo_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtualLineInfo_array_port& VirtualLineInfo_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtualLineInfo_array_port_si_2fvirtual_5fline_5finfo_2eproto.base);
  return *internal_default_instance();
}


void VirtualLineInfo_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VirtualLineInfo_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.virtual_line_info.VirtualLineInfo data = 470;
      case 470:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3762>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualLineInfo_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.virtual_line_info.VirtualLineInfo data = 470;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(470, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  return target;
}

size_t VirtualLineInfo_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.virtual_line_info.VirtualLineInfo data = 470;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtualLineInfo_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualLineInfo_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirtualLineInfo_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.virtual_line_info.VirtualLineInfo_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.virtual_line_info.VirtualLineInfo_array_port)
    MergeFrom(*source);
  }
}

void VirtualLineInfo_array_port::MergeFrom(const VirtualLineInfo_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void VirtualLineInfo_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualLineInfo_array_port::CopyFrom(const VirtualLineInfo_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.virtual_line_info.VirtualLineInfo_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualLineInfo_array_port::IsInitialized() const {
  return true;
}

void VirtualLineInfo_array_port::InternalSwap(VirtualLineInfo_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualLineInfo_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace virtual_line_info
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::virtual_line_info::VirtualLineInfo* Arena::CreateMaybeMessage< ::pb::si::virtual_line_info::VirtualLineInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::virtual_line_info::VirtualLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::virtual_line_info::VirtualLineInfo_array_port* Arena::CreateMaybeMessage< ::pb::si::virtual_line_info::VirtualLineInfo_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::virtual_line_info::VirtualLineInfo_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
