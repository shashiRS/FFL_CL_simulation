// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: si/si_params.proto

#include "si/si_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_si_2fsi_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SiParams_si_2fsi_5fparams_2eproto;
namespace pb {
namespace si {
namespace si_params {
class SiParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiParams> _instance;
} _SiParams_default_instance_;
class SiParams_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiParams_array_port> _instance;
} _SiParams_array_port_default_instance_;
}  // namespace si_params
}  // namespace si
}  // namespace pb
static void InitDefaultsscc_info_SiParams_si_2fsi_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::si_params::_SiParams_default_instance_;
    new (ptr) ::pb::si::si_params::SiParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::si_params::SiParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SiParams_si_2fsi_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SiParams_si_2fsi_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_SiParams_array_port_si_2fsi_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::si::si_params::_SiParams_array_port_default_instance_;
    new (ptr) ::pb::si::si_params::SiParams_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::si::si_params::SiParams_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SiParams_array_port_si_2fsi_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SiParams_array_port_si_2fsi_5fparams_2eproto}, {
      &scc_info_SiParams_si_2fsi_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_si_2fsi_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_si_2fsi_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_si_2fsi_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_si_2fsi_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, isstaticobjectinputccworiented_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, increaseoverhanglowobject_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, coveredintervalsroiwidth_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, uselinemarkings_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, treatunknowncurbsideobjectsasbodytraversable_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotidentfromtrajectory_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotidentmaxyawdevparallel_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotidentmaxdevfromstraightline_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enablesecondsidedelimiteronlyscenario_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enablefirstsidedelimiteronlyscenario_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, prefersecondsideosd_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, osdsideroixfront_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, osdsideroixback_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, requiredcurbobjectforonesidedelimitingslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, horizontalmovementlimitofaslotslotcoords_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxallowedvehcurboverlapforperp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, mincurbobjlengthforonesidedel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, allownakedslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, requireatleastonedelimitingobjectfornakedslot_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxroadsideextensionperpendicular_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxroadsideextensionparallel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxroadsideextensionangular_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, minappliedroadsideextension_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, mindistancetoobject_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, mindistancenoobject_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableangularparking_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableangularrightopeningtowardsback_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableangularrightopeningtowardsfront_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableangularleftopeningtowardsback_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableangularleftopeningtowardsfront_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableangularslotbruteforcedetection_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotposedetectiononvirtuallines_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, outlierdistsqrparallelslot_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, outlierdistsqrnonparallelslot_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotreplacementdeltaoutlierdistsqr_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, angularparkingdetectionwindowabsmin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, angularparkingdetectionwindowabsmax_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, angularslotmaxdepthextension_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableparallelslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotlengthdeltamin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotlengthdeltamodel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotlengthdeltamax_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotwidthdeltamodel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotwidthdeltamin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotwidthdeltamax_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotopeningdeltamaxpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotopeningdeltaminpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotdepthdeltamaxpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotdepthdeltaminpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableperpendicularslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotwidthdeltamin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotwidthdeltamodel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotwidthdeltamax_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotlengthdeltamodel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotlengthdeltamin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotlengthdeltamax_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotopeningdeltamaxpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotopeningdeltaminpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotdepthdeltamaxpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, perpendicularslotdepthdeltaminpark_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enablegarageparkingslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, garageparkingslotwidthdeltamin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, garageparkingslotwidthdeltamax_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, garageparkingslotlengthdeltamin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, garageparkingslotlengthdeltamodel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, garageparkingslotlengthdeltamax_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, garageparkingslotdoorarealength_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxallowedslotopeningoverlap_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, preferwideslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, offeroverlappingslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, performoptimization_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, shrinkslotfornumericalinaccuracy_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotpositioningroileftrightdelta_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotpositioningroiroaddelta_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotedgepullsearchdistfront_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxdrivenrotationparallel_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxdrivenrotationperpendicular_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxdrivenrotationgarage_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxdrivenrotationangled_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotdepthhorizontallinealignment_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotshrinkingbelowusualsizeduringtrack_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, invalidateoverlappingestablishedslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, weightcurborientation_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, weightlineorientation_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, mincoveragepersidenonpar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotorientationonsidevls_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotorientationonwingvls_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sidealignmentroiwidth_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sidealignmentweight_mpr_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, wingalignmentweight_mpr_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, minimumobstaclefittedlinelength_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lineorientationroidelta_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, highsidedelimiterrequired_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, curbobjectevaluationroidepthdelta_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallellinealloweddeviation_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enlargedynobj_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, dynobjmaxvel_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, dynobjmaxpreviewtime_s_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, dynobjminexistenceprob_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, doexactshiftvectortoegocollisioncheck_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, minslotopeningoffsetsideblowup_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, parallelslotlinetoolongpenalty_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotlengthadaptiontoadjacentobjects_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotlengthadaptiontoadjacentlines_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, allowslotextensionoverlinestominopening_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxallowedslotextensionoverlinestominopening_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, allowshrinkonlinesdespitesideobjects_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, prefershifttotoponcurbobjects_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideshiftpenaltyforcurbobjects_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, prefershifttotoproiyborderoffset_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableslotfallback_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableunspecifiedshift_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, penaltyforshrinktomindim_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, shrinkpenaltyforclassifyingobjectasdynamic_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, shrinkpenaltyforshiftbelowmin_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, shrinkpenaltyforexceedinggivenlimits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideandcurbdelimiterroiextension_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideandcurbdelimiterroibottomshift_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, typicalorientationofangledslot_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, dolinecategorization_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, smallslotopeningpenalty_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lcanglecostfactor_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lclinedistcostfactor_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lclinelengthcostfactor_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, docurbonlylinecategorization_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lccurbonlyanglediff_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lccurbonlyspatialdiff_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ignorelinesforsandwichslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lcnocurblineoptimizationifnocurblc_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sensingrange_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotpenetrationdepth_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableleftsidescanning_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enablerightsidescanning_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideroiystart_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideroiyend_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideroixfront_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideroixback_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enablefrontscanning_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, frontroiyside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, frontroixstart_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, frontroixend_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, allownarrowslotsscan_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lineopeningdelimitermaxroadprotrusion_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, lineopeningdelimitertocurbprojectionfactor_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enablecnnwheelstoppers_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enablecnnwheelstopperstatobjverification_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, allowedwsposoutsideslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, wsstatobjignoreevaluation_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, alloweddisttoexistingwswithwlsuppression_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, alloweddisttoexistingwswithoutwlsuppression_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, integrationmessageslevel_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, integrationmessagescomponent_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, collfunctionroiwidthdelta_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, collfunctionroilengthdelta_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, barrierdelimiterwidth_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, minbarrierdelimiterlength_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, minbarrierpointoverhang_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneroadmaxreltovehwidthpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneroadmaxreltovehlengthnonpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneroadfactorpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneroadfactornonpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneroadmindistnonpar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneroadmindistpar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzonecurbmaxreltovehwidthpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzonecurbmaxreltovehlengthnonpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzonecurbfactorpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzonecurbfactornonpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneleftrightmaxreltovehlengthpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneleftrightfactornonpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneleftrightmaxreltovehwidthnonpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzoneleftrightfactorpar_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, thdelimiterdist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, insidezonedist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, minrequireddelimiterprojectionratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, enableinsideobjectpenetrationdepth_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, insideobjectmaxprojectionlength_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlprojectontoboxiffailed_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlmaxtotalangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlmaxnextedgeangle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlminvirtuallinelengthperpside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlminvirtuallinelengthparside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlminvirtuallinelengthcurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlminvirtuallinelengthroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vldoroadinsideoptimization_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vluseroadfacingfornonparallelslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlminlengthstartdirectionsq_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlinsidelargerthanroadfactor_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlusemaxangletoparkingboxedge_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlmaxangletoparkingboxedge_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotexpansion_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotexpansiononlines_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotexpframecounterstable_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotexpmaxanglediff_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotexpmaxtriangleexpansion_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotexpmintriangleexpansion_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotexpansionsideroiwidth_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, relevantobjectminboxside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, doobjectinflation_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, usecovmatrixinflation_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, inflationsafetydistancedefault_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, inflationsafetydistanceparkout_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ncsplitmaxskippablencareaperstep_m2_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ncsplitusemostxstartidx_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ncspliton_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, doobjectclustering_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocperpmaxdistanceside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocperpmaxdistancecurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocperpendicularmaxdistancexforcurbsideclustering_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocparallelmaxdistancexforcurbsideclustering_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocangmaxdistancecurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneperpsideopening_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneangsideopening_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneparsideopening_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzonecurbbelowslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneperpcurbintoslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneangcurbintoslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneparcurbintoslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneperpsidetoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocprimzoneparsidetoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneperpsidetoside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneperpsidetoslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneperpsidetoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneperpsidetocurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneperpcurbtoside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneperpcurbtoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneperpcurbtocurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneangsidetoside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneangsidetoslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneangsidetoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneangsidetocurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneangcurbtoside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneangcurbtoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneangcurbtocurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneparsidetoside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneparsidetoslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneparsidetoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneparsidetocurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneparcurbtoside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneparcurbtoroad_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, ocseczoneparcurbtocurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, outsideinallowedoverlap_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, sideallowedoverlap_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, useareacriteria_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, angularcurbroadareafactor_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, prohibitionzonerelativelength_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, uselinearoverlapdropoff_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlinsidelargeenough_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, vlmaxallowedroadinsideanglediff_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, tecalculateroadsideexpansion_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, delzonesusehighcomplexitygetscore_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsenablesislotdetectionverification_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnncompareslottypefpsuppression_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsminscenarioconfidencetheshold_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsperpendicularvalidatesangular_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsvalidationmaxopeninganglediff_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsenablecnnslotprototypes_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, allownakedcnnslots_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotblowuplimitparside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotblowuplimitparcurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotroadalignmentlimitpar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotblowuplimitnonparside_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotblowuplimitnonparcurb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotroadalignmentlimitnonpar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnorientationerrorcostfunctionfactor_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsallowsislotoverride_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotscoringmaxparlinelength_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotscoringminparwinglength_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotscoringminnonparsidelength_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, slotscoringmaxvlorlineanglediff_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsminvalidationoverlap_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotsmininvalidationoverlap_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, mindistgapcnnslotvstrackedslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, cnnslotodslotenlargement_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, memparkextendslot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, leftrightmemparkoffsetx_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, leftrightmemparkgapy_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, frontmemparkgap_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, rearmemparkgap_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxmemparkrotadj_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, maxmemparklinearadj_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, preapplyroadsideextension_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, safetymargindynobjenlargingped_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, safetymargindynobjenlargingcar_m_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, minheightconfdeltastaticobj_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, developergenericfloat0_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, developergenericfloat1_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, developergenericfloat2_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, developergenericfloat3_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, developergenericfloat4_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams, developergenericfloat5_),
  148,
  0,
  201,
  241,
  57,
  202,
  203,
  204,
  215,
  132,
  216,
  217,
  218,
  258,
  169,
  219,
  96,
  138,
  221,
  109,
  110,
  107,
  212,
  210,
  181,
  160,
  168,
  111,
  112,
  92,
  93,
  94,
  95,
  80,
  54,
  56,
  7,
  252,
  189,
  248,
  81,
  253,
  25,
  193,
  265,
  41,
  117,
  98,
  256,
  43,
  227,
  82,
  116,
  188,
  39,
  14,
  175,
  243,
  236,
  66,
  86,
  245,
  83,
  131,
  50,
  214,
  30,
  267,
  147,
  22,
  101,
  102,
  103,
  34,
  1,
  89,
  206,
  282,
  11,
  140,
  27,
  24,
  104,
  156,
  149,
  134,
  37,
  157,
  158,
  255,
  9,
  213,
  44,
  108,
  159,
  291,
  195,
  143,
  133,
  176,
  3,
  144,
  29,
  251,
  145,
  146,
  126,
  46,
  127,
  128,
  141,
  261,
  129,
  162,
  28,
  205,
  254,
  73,
  276,
  123,
  273,
  163,
  187,
  272,
  209,
  266,
  164,
  207,
  247,
  165,
  151,
  228,
  115,
  152,
  153,
  6,
  16,
  271,
  38,
  154,
  118,
  79,
  229,
  177,
  239,
  69,
  178,
  179,
  47,
  180,
  99,
  68,
  36,
  32,
  51,
  48,
  226,
  91,
  4,
  90,
  262,
  208,
  130,
  52,
  105,
  64,
  88,
  23,
  85,
  17,
  59,
  233,
  71,
  100,
  87,
  55,
  119,
  264,
  120,
  199,
  269,
  72,
  21,
  242,
  26,
  121,
  122,
  211,
  35,
  277,
  263,
  278,
  279,
  230,
  289,
  182,
  231,
  67,
  45,
  280,
  74,
  274,
  249,
  155,
  75,
  76,
  77,
  97,
  198,
  161,
  196,
  60,
  244,
  257,
  194,
  65,
  124,
  246,
  20,
  150,
  224,
  18,
  192,
  49,
  240,
  137,
  61,
  222,
  250,
  63,
  259,
  288,
  200,
  190,
  113,
  13,
  191,
  281,
  238,
  139,
  62,
  223,
  78,
  232,
  284,
  234,
  114,
  285,
  84,
  106,
  286,
  287,
  183,
  184,
  31,
  185,
  135,
  186,
  170,
  53,
  270,
  260,
  142,
  58,
  42,
  235,
  171,
  173,
  40,
  136,
  174,
  70,
  275,
  125,
  10,
  268,
  33,
  220,
  237,
  167,
  290,
  5,
  172,
  225,
  197,
  166,
  8,
  12,
  15,
  19,
  283,
  2,
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::si::si_params::SiParams_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 297, sizeof(::pb::si::si_params::SiParams)},
  { 589, 595, sizeof(::pb::si::si_params::SiParams_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::si_params::_SiParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::si::si_params::_SiParams_array_port_default_instance_),
};

const char descriptor_table_protodef_si_2fsi_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022si/si_params.proto\022\017pb.si.si_params\032\027e"
  "co/signal_header.proto\"\233Y\n\010SiParams\022\030\n\017u"
  "iVersionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001"
  "(\0132\".pb.eco.signal_header.SignalHeader\022\'"
  "\n\036isStaticObjectInputCCWOriented\030\273\030 \001(\010\022"
  "$\n\033increaseOverhangLowObject_m\030\304\031 \001(\002\022#\n"
  "\032coveredIntervalsRoiWidth_m\030\344\010 \001(\002\022\030\n\017us"
  "eLineMarkings\030\256\006 \001(\010\0225\n,treatUnknownCurb"
  "sideObjectsAsBodyTraversable\030\344\026 \001(\010\022&\n\035e"
  "nableSlotIdentFromTrajectory\030\322\036 \001(\010\022\'\n\036s"
  "lotIdentMaxYawDevParallel_rad\030\337\026 \001(\002\022*\n!"
  "slotIdentMaxDevFromStraightLine_m\030\265\017 \001(\002"
  "\022.\n%enableSecondSideDelimiterOnlyScenari"
  "o\030\205\024 \001(\010\022-\n$enableFirstSideDelimiterOnly"
  "Scenario\030\375\027 \001(\010\022\034\n\023preferSecondSideOSD\030\277"
  "\027 \001(\010\022\033\n\022osdSideRoiXFront_m\030\324\035 \001(\002\022\032\n\021os"
  "dSideRoiXBack_m\030\322\021 \001(\002\0224\n+requiredCurbOb"
  "jectForOneSideDelimitingSlots\030\275\027 \001(\010\0223\n*"
  "horizontalMovementLimitOfASlotSlotCoords"
  "_m\030\245\014 \001(\002\022*\n!maxAllowedVehCurbOverlapFor"
  "Perp_m\030\332\017 \001(\002\022(\n\037minCurbObjLengthForOneS"
  "ideDel_m\030\364\026 \001(\002\022\030\n\017allowNakedSlots\030\271\007 \001("
  "\010\0226\n-requireAtLeastOneDelimitingObjectFo"
  "rNakedSlot\030\207\017 \001(\010\022,\n#maxRoadsideExtensio"
  "nPerpendicular_m\030\257\r \001(\002\022\'\n\036maxRoadsideEx"
  "tensionParallel_m\030\310\026 \001(\002\022&\n\035maxRoadsideE"
  "xtensionAngular_m\030\246\026 \001(\002\022&\n\035minAppliedRo"
  "adsideExtension_m\030\352\022 \001(\002\022\036\n\025minDistanceT"
  "oObject_m\030\223\021 \001(\002\022\036\n\025minDistanceNoObject_"
  "m\030\304\021 \001(\002\022\035\n\024enableAngularParking\030\272\001 \001(\010\022"
  "-\n$enableAngularRightOpeningTowardsBack\030"
  "\360\036 \001(\010\022.\n%enableAngularRightOpeningTowar"
  "dsFront\030\377\023 \001(\010\022,\n#enableAngularLeftOpeni"
  "ngTowardsBack\030\227\n \001(\010\022-\n$enableAngularLef"
  "tOpeningTowardsFront\030\242\002 \001(\010\022-\n$enableAng"
  "ularSlotBruteForceDetection\030\316\020 \001(\010\022.\n%en"
  "ableSlotPoseDetectionOnVirtualLines\030\234\037 \001"
  "(\010\022&\n\035outlierDistSqrParallelSlot_m2\030\343\007 \001"
  "(\002\022)\n outlierDistSqrNonParallelSlot_m2\030\252"
  "\010 \001(\002\022-\n%slotReplacementDeltaOutlierDist"
  "Sqr_m2\030r \001(\002\022.\n%angularParkingDetectionW"
  "indowAbsMin_m\030\302\033 \001(\002\022.\n%angularParkingDe"
  "tectionWindowAbsMax_m\030\302\023 \001(\002\022\'\n\036angularS"
  "lotMaxDepthExtension_m\030\214\033 \001(\002\022\033\n\023enableP"
  "arallelSlots\030l \001(\010\022%\n\034parallelSlotLength"
  "DeltaMin_m\030\363\033 \001(\002\022\'\n\036parallelSlotLengthD"
  "eltaModel_m\030\344\003 \001(\002\022%\n\034parallelSlotLength"
  "DeltaMax_m\030\363\023 \001(\002\022&\n\035parallelSlotWidthDe"
  "ltaModel_m\030\244\036 \001(\002\022$\n\033parallelSlotWidthDe"
  "ltaMin_m\030\317\006 \001(\002\022$\n\033parallelSlotWidthDelt"
  "aMax_m\030\317\016 \001(\002\022*\n!parallelSlotOpeningDelt"
  "aMaxPark_m\030\264\014 \001(\002\022*\n!parallelSlotOpening"
  "DeltaMinPark_m\030\260\035 \001(\002\022(\n\037parallelSlotDep"
  "thDeltaMaxPark_m\030\342\006 \001(\002\022(\n\037parallelSlotD"
  "epthDeltaMinPark_m\030\346\027 \001(\002\022!\n\030enablePerpe"
  "ndicularSlots\030\374\n \001(\010\022)\n perpendicularSlo"
  "tWidthDeltaMin_m\030\260\016 \001(\002\022+\n\"perpendicular"
  "SlotWidthDeltaModel_m\030\277\023 \001(\002\022)\n perpendi"
  "cularSlotWidthDeltaMax_m\030\260\006 \001(\002\022,\n#perpe"
  "ndicularSlotLengthDeltaModel_m\030\327\001 \001(\002\022*\n"
  "!perpendicularSlotLengthDeltaMin_m\030\212\022 \001("
  "\002\022*\n!perpendicularSlotLengthDeltaMax_m\030\212"
  "\032 \001(\002\022/\n&perpendicularSlotOpeningDeltaMa"
  "xPark_m\030\336\030 \001(\002\022/\n&perpendicularSlotOpeni"
  "ngDeltaMinPark_m\030\332\t \001(\002\022-\n$perpendicular"
  "SlotDepthDeltaMaxPark_m\030\251\013 \001(\002\022-\n$perpen"
  "dicularSlotDepthDeltaMinPark_m\030\255\032 \001(\002\022!\n"
  "\030enableGarageParkingSlots\030\267\001 \001(\010\022)\n gara"
  "geParkingSlotWidthDeltaMin_m\030\264\017 \001(\002\022)\n g"
  "arageParkingSlotWidthDeltaMax_m\030\264\007 \001(\002\022*"
  "\n!garageParkingSlotLengthDeltaMin_m\030\331\026 \001"
  "(\002\022,\n#garageParkingSlotLengthDeltaModel_"
  "m\030\256\004 \001(\002\022*\n!garageParkingSlotLengthDelta"
  "Max_m\030\331\036 \001(\002\022*\n!garageParkingSlotDoorAre"
  "aLength_m\030\307\020 \001(\002\022\'\n\036maxAllowedSlotOpenin"
  "gOverlap_m\030\324\003 \001(\002\022\027\n\017preferWideSlots\030V \001"
  "(\010\022\036\n\025offerOverlappingSlots\030\336\006 \001(\010\022\034\n\023pe"
  "rformOptimization\030\213\021 \001(\010\022+\n\"shrinkSlotFo"
  "rNumericalInaccuracy_m\030\240\005 \001(\002\022*\n\"slotPos"
  "itioningRoiLeftRightDelta_m\030\034 \001(\002\022&\n\035slo"
  "tPositioningRoiRoadDelta_m\030\325\013 \001(\002\022&\n\035slo"
  "tEdgePullSearchDistFront_m\030\235\025 \001(\002\022\'\n\035max"
  "DrivenRotationParallel_rad\030\312\343w \001(\002\022+\n\"ma"
  "xDrivenRotationPerpendicular_rad\030\241\001 \001(\002\022"
  "$\n\033maxDrivenRotationGarage_rad\030\350\017 \001(\002\022$\n"
  "\033maxDrivenRotationAngled_rad\030\222\004 \001(\002\022+\n\"s"
  "lotDepthHorizontalLineAlignment_m\030\343\003 \001(\002"
  "\0225\n,enableSlotShrinkingBelowUsualSizeDur"
  "ingTrack\030\363\031 \001(\010\022.\n%invalidateOverlapping"
  "EstablishedSlots\030\352\003 \001(\010\022\036\n\025weightCurbOri"
  "entation\030\337\020 \001(\002\022\036\n\025weightLineOrientation"
  "\030\274\017 \001(\002\022#\n\032minCoveragePerSideNonPar_m\030\213\006"
  " \001(\002\022\'\n\036enableSlotOrientationOnSideVLs\030\301"
  "\017 \001(\010\022\'\n\036enableSlotOrientationOnWingVLs\030"
  "\301\033 \001(\010\022 \n\027sideAlignmentROIWidth_m\030\265\034 \001(\002"
  "\022 \n\027sideAlignmentWeight_mpr\030\231\001 \001(\002\022 \n\027wi"
  "ngAlignmentWeight_mpr\030\311\026 \001(\002\022*\n!minimumO"
  "bstacleFittedLineLength_m\030\370\006 \001(\002\022\"\n\031line"
  "OrientationRoiDelta_m\030\332\r \001(\002\022\"\n\031highSide"
  "DelimiterRequired\030\301\025 \001(\010\022.\n#curbObjectEv"
  "aluationRoiDepthDelta_m\030\272\275\245\007 \001(\002\022)\n para"
  "llelLineAllowedDeviation_rad\030\224\024 \001(\002\022\026\n\re"
  "nlargeDynObj\030\336\014 \001(\010\022\031\n\020dynObjMaxVel_mps\030"
  "\267\017 \001(\002\022\037\n\026dynObjMaxPreviewTime_s\030\273\022 \001(\002\022"
  "#\n\033dynObjMinExistenceProb_perc\030O \001(\r\022.\n%"
  "doExactShiftVectorToEgoCollisionCheck\030\337\014"
  " \001(\010\022)\n minSlotOpeningOffsetSideBlowUp_m"
  "\030\250\004 \001(\002\022\'\n\036parallelSlotLineTooLongPenalt"
  "y\030\257\033 \001(\002\0222\n)enableSlotLengthAdaptionToAd"
  "jacentObjects\030\342\034 \001(\010\0220\n\'enableSlotLength"
  "AdaptionToAdjacentLines\030\304\013 \001(\010\0220\n\'allowS"
  "lotExtensionOverLinesToMinOpening\030\316\022 \001(\010"
  "\0227\n.maxAllowedSlotExtensionOverLinesToMi"
  "nOpening_m\030\211\007 \001(\002\022-\n$allowShrinkOnLinesD"
  "espiteSideObjects\030\230\026 \001(\010\022&\n\035preferShiftT"
  "oTopOnCurbObjects\030\333\017 \001(\010\022\'\n\036sideShiftPen"
  "altyForCurbObjects\030\231\020 \001(\002\022+\n\"preferShift"
  "ToTopRoiYBorderOffset_m\030\204\036 \001(\002\022\033\n\022enable"
  "SlotFallback\030\356\003 \001(\010\022\037\n\026enableUnspecified"
  "Shift\030\374\r \001(\010\022!\n\030penaltyForShrinkToMinDim"
  "\030\247\004 \001(\002\0223\n*shrinkPenaltyForClassifyingOb"
  "jectAsDynamic\030\214\025 \001(\002\022&\n\035shrinkPenaltyFor"
  "ShiftBelowMin\030\212\034 \001(\002\022-\n$shrinkPenaltyFor"
  "ExceedingGivenLimits\030\312\n \001(\002\022+\n\"sideAndCu"
  "rbDelimiterRoiExtension_m\030\314\037 \001(\002\022-\n$side"
  "AndCurbDelimiterRoiBottomShift_m\030\366\016 \001(\002\022"
  "+\n\"typicalOrientationOfAngledSlot_rad\030\267\037"
  " \001(\002\022\035\n\024doLineCategorization\030\300\032 \001(\010\022 \n\027s"
  "mallSlotOpeningPenalty\030\257\023 \001(\002\022\032\n\021lcAngle"
  "CostFactor\030\224\037 \001(\002\022\035\n\024lcLineDistCostFacto"
  "r\030\245\026 \001(\002\022\037\n\026lcLineLengthCostFactor\030\304\036 \001("
  "\002\022%\n\034doCurbOnlyLineCategorization\030\310\020 \001(\010"
  "\022 \n\027lcCurbOnlyAngleDiff_rad\030\263\025 \001(\002\022 \n\027lc"
  "CurbOnlySpatialDiff_m\030\360\032 \001(\002\022$\n\033ignoreLi"
  "nesForSandwichSlots\030\214\014 \001(\010\022+\n\"lcNoCurbLi"
  "neOptimizationIfNoCurbLc\030\232\034 \001(\010\022\027\n\016sensi"
  "ngRange_m\030\356\027 \001(\002\022\037\n\026slotPenetrationDepth"
  "_m\030\250\016 \001(\002\022\037\n\026enableLeftSideScanning\030\327\030 \001"
  "(\010\022 \n\027enableRightSideScanning\030\373\003 \001(\010\022\027\n\017"
  "sideRoiYStart_m\030] \001(\002\022\026\n\rsideRoiYEnd_m\030\353"
  "\001 \001(\002\022\030\n\017sideRoiXFront_m\030\216\037 \001(\002\022\027\n\016sideR"
  "oiXBack_m\030\220\006 \001(\002\022\034\n\023enableFrontScanning\030"
  "\330\n \001(\010\022\030\n\017frontRoiYSide_m\030\323\016 \001(\002\022\031\n\020fron"
  "tRoiXStart_m\030\207\013 \001(\002\022\027\n\016frontRoiXEnd_m\030\214\030"
  " \001(\002\022\035\n\024allowNarrowSlotsScan\030\277\r \001(\010\0220\n\'l"
  "ineOpeningDelimiterMaxRoadProtrusion_m\030\242"
  "\031 \001(\002\0223\n*lineOpeningDelimiterToCurbProje"
  "ctionFactor\030\351\t \001(\002\022\037\n\026enableCnnWheelStop"
  "pers\030\305\030 \001(\010\0221\n(enableCnnWheelStopperStat"
  "ObjVerification\030\346\n \001(\010\022\"\n\031allowedWsPosOu"
  "tsideSlot_m\030\221\007 \001(\002\022\"\n\031wsStatObjIgnoreEva"
  "luation\030\214\032 \001(\010\0223\n*allowedDistToExistingW"
  "sWithWlSuppression_m\030\266\014 \001(\002\0226\n-allowedDi"
  "stToExistingWsWithoutWlSuppression_m\030\341\t "
  "\001(\002\022$\n\033integrationMessagesLevel_nu\030\365\005 \001("
  "\r\022(\n\037integrationMessagesComponent_nu\030\342\004 "
  "\001(\r\022$\n\033collFunctionRoiWidthDelta_m\030\316\007 \001("
  "\002\022%\n\034collFunctionRoiLengthDelta_m\030\227\007 \001(\002"
  "\022 \n\027barrierDelimiterWidth_m\030\337\027 \001(\002\022$\n\033mi"
  "nBarrierDelimiterLength_m\030\226\014 \001(\002\022!\n\031minB"
  "arrierPointOverhang_m\030Z \001(\002\022*\n!delZoneRo"
  "adMaxRelToVehWidthPar_nu\030\375\013 \001(\002\022.\n%delZo"
  "neRoadMaxRelToVehLengthNonPar_nu\030\207\036 \001(\002\022"
  " \n\027delZoneRoadFactorPar_nu\030\322\025 \001(\002\022#\n\032del"
  "ZoneRoadFactorNonPar_nu\030\257\017 \001(\002\022#\n\032delZon"
  "eRoadMinDistNonPar_m\030\320\007 \001(\002\022 \n\027delZoneRo"
  "adMinDistPar_m\030\237\r \001(\002\022*\n!delZoneCurbMaxR"
  "elToVehWidthPar_nu\030\305\t \001(\002\022.\n%delZoneCurb"
  "MaxRelToVehLengthNonPar_nu\030\267\013 \001(\002\022 \n\027del"
  "ZoneCurbFactorPar_nu\030\325\003 \001(\002\022#\n\032delZoneCu"
  "rbFactorNonPar_nu\030\242\013 \001(\002\0220\n\'delZoneLeftR"
  "ightMaxRelToVehLengthPar_nu\030\354\001 \001(\002\022(\n\037de"
  "lZoneLeftRightFactorNonPar_nu\030\363\010 \001(\002\0222\n)"
  "delZoneLeftRightMaxRelToVehWidthNonPar_n"
  "u\030\245\030 \001(\002\022%\n\034delZoneLeftRightFactorPar_nu"
  "\030\212\n \001(\002\022\032\n\021thDelimiterDist_m\030\311\014 \001(\002\022\031\n\020i"
  "nsideZoneDist_m\030\262\013 \001(\002\022/\n&minRequiredDel"
  "imiterProjectionRatio_nu\030\226\010 \001(\002\022+\n\"enabl"
  "eInsideObjectPenetrationDepth\030\224\n \001(\010\022*\n!"
  "insideObjectMaxProjectionLength_m\030\231\036 \001(\002"
  "\022!\n\030vlProjectOntoBoxIfFailed\030\374\013 \001(\010\022\034\n\023v"
  "lMaxTotalAngle_rad\030\373\024 \001(\002\022\037\n\026vlMaxNextEd"
  "geAngle_rad\030\375\036 \001(\002\022)\n vlMinVirtualLineLe"
  "ngthPerpSide_m\030\256\n \001(\002\022(\n\037vlMinVirtualLin"
  "eLengthParSide_m\030\364\002 \001(\002\022%\n\034vlMinVirtualL"
  "ineLengthCurb_m\030\211\032 \001(\002\022%\n\034vlMinVirtualLi"
  "neLengthRoad_m\030\202\004 \001(\002\022#\n\032vlDoRoadInsideO"
  "ptimization\030\343\005 \001(\010\022+\n\"vlUseRoadFacingFor"
  "NonParallelSlots\030\252\037 \001(\010\022&\n\035vlMinLengthSt"
  "artDirectionSq_m\030\254\026 \001(\002\022%\n\034vlInsideLarge"
  "rThanRoadFactor\030\316\005 \001(\002\022\'\n\035vlUseMaxAngleT"
  "oParkingBoxEdge\030\322\365\037 \001(\010\022\'\n\036vlMaxAngleToP"
  "arkingBoxEdge_rad\030\213\036 \001(\002\022\026\n\rslotExpansio"
  "n\030\354\032 \001(\010\022\035\n\024slotExpansionOnLines\030\350\031 \001(\010\022"
  "%\n\034slotExpFrameCounterStable_nu\030\227\030 \001(\r\022\""
  "\n\027slotExpMaxAngleDiff_rad\030\330\215\277\005 \001(\002\022&\n\035sl"
  "otExpMaxTriangleExpansion_m\030\373\022 \001(\002\022(\n\037sl"
  "otExpMinTriangleExpansion_rad\030\233\030 \001(\002\022$\n\033"
  "slotExpansionSideRoiWidth_m\030\335\t \001(\002\022#\n\032re"
  "levantObjectMinBoxSide_m\030\201\007 \001(\002\022\032\n\021doObj"
  "ectInflation\030\335\003 \001(\010\022\036\n\025useCovMatrixInfla"
  "tion\030\275\007 \001(\010\022)\n inflationSafetyDistanceDe"
  "fault_m\030\302\037 \001(\002\022)\n inflationSafetyDistanc"
  "eParkOut_m\030\221\033 \001(\002\022,\n#ncSplitMaxSkippable"
  "NCAreaPerStep_m2\030\212\021 \001(\002\022 \n\027ncSplitUseMos"
  "tXStartIdx\030\356\004 \001(\010\022\022\n\tncSplitOn\030\233\026 \001(\010\022\033\n"
  "\022doObjectClustering\030\234\010 \001(\010\022 \n\027ocPerpMaxD"
  "istanceSide_m\030\263\014 \001(\002\022 \n\027ocPerpMaxDistanc"
  "eCurb_m\030\350\024 \001(\002\022;\n2ocPerpendicularMaxDist"
  "anceXForCurbSideClustering_m\030\230\021 \001(\002\0226\n-o"
  "cParallelMaxDistanceXForCurbSideClusteri"
  "ng_m\030\255\024 \001(\002\022\037\n\026ocAngMaxDistanceCurb_m\030\373\010"
  " \001(\002\022$\n\033ocPrimZonePerpSideOpening_m\030\235\032 \001"
  "(\002\022#\n\032ocPrimZoneAngSideOpening_m\030\314\035 \001(\002\022"
  "#\n\032ocPrimZoneParSideOpening_m\030\203\024 \001(\002\022\"\n\031"
  "ocPrimZoneCurbBelowSlot_m\030\315\t \001(\002\022%\n\034ocPr"
  "imZonePerpCurbIntoSlot_m\030\367\016 \001(\002\022$\n\033ocPri"
  "mZoneAngCurbIntoSlot_m\030\351\032 \001(\002\022$\n\033ocPrimZ"
  "oneParCurbIntoSlot_m\030\324\002 \001(\002\022#\n\032ocPrimZon"
  "ePerpSideToRoad_m\030\360\020 \001(\002\022\"\n\031ocPrimZonePa"
  "rSideToRoad_m\030\314\027 \001(\002\022\"\n\031ocSecZonePerpSid"
  "eToSide_m\030\363\001 \001(\002\022\"\n\031ocSecZonePerpSideToS"
  "lot_m\030\350\023 \001(\002\022\"\n\031ocSecZonePerpSideToRoad_"
  "m\030\243\007 \001(\002\022\"\n\031ocSecZonePerpSideToCurb_m\030\250\031"
  " \001(\002\022\"\n\031ocSecZonePerpCurbToSide_m\030\325\017 \001(\002"
  "\022\"\n\031ocSecZonePerpCurbToRoad_m\030\205\t \001(\002\022\"\n\031"
  "ocSecZonePerpCurbToCurb_m\030\216\027 \001(\002\022!\n\030ocSe"
  "cZoneAngSideToSide_m\030\240\033 \001(\002\022!\n\030ocSecZone"
  "AngSideToSlot_m\030\273\t \001(\002\022!\n\030ocSecZoneAngSi"
  "deToRoad_m\030\360\035 \001(\002\022#\n\030ocSecZoneAngSideToC"
  "urb_m\030\320\216\223\004 \001(\002\022!\n\030ocSecZoneAngCurbToSide"
  "_m\030\206\025 \001(\002\022!\n\030ocSecZoneAngCurbToRoad_m\030\326\023"
  " \001(\002\022!\n\030ocSecZoneAngCurbToCurb_m\030\335\r \001(\002\022"
  "!\n\030ocSecZoneParSideToSide_m\030\301\001 \001(\002\022!\n\030oc"
  "SecZoneParSideToSlot_m\030\332\023 \001(\002\022\"\n\030ocSecZo"
  "neParSideToRoad_m\030\241\223[ \001(\002\022!\n\030ocSecZonePa"
  "rSideToCurb_m\030\232\031 \001(\002\022!\n\030ocSecZoneParCurb"
  "ToSide_m\030\347\017 \001(\002\022!\n\030ocSecZoneParCurbToRoa"
  "d_m\030\267\t \001(\002\022!\n\030ocSecZoneParCurbToCurb_m\030\274"
  "\027 \001(\002\022\"\n\031outsideInAllowedOverlap_m\030\333\n \001("
  "\002\022\035\n\024sideAllowedOverlap_m\030\234\030 \001(\002\022\032\n\017useA"
  "reaCriteria\030\335\373\354\006 \001(\010\022\"\n\031angularCurbRoadA"
  "reaFactor\030\257\030 \001(\002\022&\n\035prohibitionZoneRelat"
  "iveLength\030\245\016 \001(\002\022 \n\027useLinearOverlapDrop"
  "Off\030\253\r \001(\010\022\036\n\025vlInsideLargeEnough_m\030\221\013 \001"
  "(\002\022,\n#vlMaxAllowedRoadInsideAngleDiff_ra"
  "d\030\250\r \001(\002\022$\n\034teCalculateRoadSideExpansion"
  "\030\023 \001(\010\022,\n!delZonesUseHighComplexityGetSc"
  "ore\030\335\373\362\007 \001(\010\0222\n)cnnSlotsEnableSiSlotDete"
  "ctionVerification\030\221\036 \001(\010\022(\n\037cnnCompareSl"
  "otTypeFPSuppression\030\340\021 \001(\010\022.\n%cnnSlotsMi"
  "nScenarioConfidenceTheshold\030\266\004 \001(\r\022.\n%cn"
  "nSlotsPerpendicularValidatesAngular\030\247\013 \001"
  "(\010\0222\n)cnnSlotsValidationMaxOpeningAngleD"
  "iff_rad\030\276\017 \001(\002\022(\n\037cnnSlotsEnableCnnSlotP"
  "rototypes\030\330\020 \001(\010\022\033\n\022allowNakedCnnSlots\030\303"
  "\006 \001(\010\022$\n\033cnnSlotBlowUpLimitParSide_m\030\337\007 "
  "\001(\002\022$\n\033cnnSlotBlowUpLimitParCurb_m\030\204\037 \001("
  "\002\022\'\n\036cnnSlotRoadAlignmentLimitPar_m\030\373\035 \001"
  "(\002\022\'\n\036cnnSlotBlowUpLimitNonParSide_m\030\251\020 "
  "\001(\002\022\'\n\036cnnSlotBlowUpLimitNonParCurb_m\030\362\010"
  " \001(\002\022*\n!cnnSlotRoadAlignmentLimitNonPar_"
  "m\030\321\006 \001(\002\022.\n%cnnOrientationErrorCostFunct"
  "ionFactor\030\260\030 \001(\002\022$\n\033cnnSlotsAllowSiSlotO"
  "verride\030\262\035 \001(\010\022&\n\035slotScoringMaxParLineL"
  "ength_m\030\357\021 \001(\002\022&\n\035slotScoringMinParWingL"
  "ength_m\030\316\006 \001(\002\022)\n slotScoringMinNonParSi"
  "deLength_m\030\302\017 \001(\002\022,\n#slotScoringMaxVlOrL"
  "ineAngleDiff_rad\030\365\021 \001(\002\022\'\n\036cnnSlotsMinVa"
  "lidationOverlap_m\030\207\n \001(\002\022)\n cnnSlotsMinI"
  "nvalidationOverlap_m\030\306\037 \001(\002\022)\n minDistGa"
  "pCnnSlotVsTrackedSlot_m\030\212\017 \001(\002\022#\n\032cnnSlo"
  "tOdSlotEnlargement_m\030\234\001 \001(\002\022\034\n\023memParkEx"
  "tendSlot_m\030\362\036 \001(\002\022\"\n\031leftRightMemParkOff"
  "setX_m\030\365\004 \001(\002\022\037\n\026leftRightMemParkGapY_m\030"
  "\346\026 \001(\002\022\032\n\021frontMemParkGap_m\030\221\031 \001(\002\022\031\n\020re"
  "arMemParkGap_m\030\301\021 \001(\002\022\037\n\024maxMemParkRotAd"
  "j_rad\030\220\210\223\006 \001(\002\022\035\n\025maxMemParkLinearAdj_m\030"
  "[ \001(\002\022\"\n\031preapplyRoadsideExtension\030\260\021 \001("
  "\010\022)\n safetyMarginDynObjEnlargingPed_m\030\333\027"
  " \001(\002\022)\n safetyMarginDynObjEnlargingCar_m"
  "\030\341\024 \001(\002\022$\n\033minHeightConfDeltaStaticObj\030\245"
  "\021 \001(\r\022\037\n\026developerGenericFloat0\030\230\001 \001(\002\022\037"
  "\n\026developerGenericFloat1\030\271\001 \001(\002\022\037\n\026devel"
  "operGenericFloat2\030\332\001 \001(\002\022\037\n\026developerGen"
  "ericFloat3\030\373\001 \001(\002\022!\n\026developerGenericFlo"
  "at4\030\213\317\205\002 \001(\002\022\036\n\026developerGenericFloat5\030="
  " \001(\002\"\?\n\023SiParams_array_port\022(\n\004data\030\271\037 \003"
  "(\0132\031.pb.si.si_params.SiParams"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_si_2fsi_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_si_2fsi_5fparams_2eproto_sccs[2] = {
  &scc_info_SiParams_si_2fsi_5fparams_2eproto.base,
  &scc_info_SiParams_array_port_si_2fsi_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_si_2fsi_5fparams_2eproto_once;
static bool descriptor_table_si_2fsi_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_si_2fsi_5fparams_2eproto = {
  &descriptor_table_si_2fsi_5fparams_2eproto_initialized, descriptor_table_protodef_si_2fsi_5fparams_2eproto, "si/si_params.proto", 11549,
  &descriptor_table_si_2fsi_5fparams_2eproto_once, descriptor_table_si_2fsi_5fparams_2eproto_sccs, descriptor_table_si_2fsi_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_si_2fsi_5fparams_2eproto::offsets,
  file_level_metadata_si_2fsi_5fparams_2eproto, 2, file_level_enum_descriptors_si_2fsi_5fparams_2eproto, file_level_service_descriptors_si_2fsi_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_si_2fsi_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_si_2fsi_5fparams_2eproto), true);
namespace pb {
namespace si {
namespace si_params {

// ===================================================================

void SiParams::InitAsDefaultInstance() {
  ::pb::si::si_params::_SiParams_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class SiParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SiParams>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[4] |= 1048576u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const SiParams* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isstaticobjectinputccworiented(HasBits* has_bits) {
    (*has_bits)[6] |= 512u;
  }
  static void set_has_increaseoverhanglowobject_m(HasBits* has_bits) {
    (*has_bits)[7] |= 131072u;
  }
  static void set_has_coveredintervalsroiwidth_m(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_uselinemarkings(HasBits* has_bits) {
    (*has_bits)[6] |= 1024u;
  }
  static void set_has_treatunknowncurbsideobjectsasbodytraversable(HasBits* has_bits) {
    (*has_bits)[6] |= 2048u;
  }
  static void set_has_enableslotidentfromtrajectory(HasBits* has_bits) {
    (*has_bits)[6] |= 4096u;
  }
  static void set_has_slotidentmaxyawdevparallel_rad(HasBits* has_bits) {
    (*has_bits)[6] |= 8388608u;
  }
  static void set_has_slotidentmaxdevfromstraightline_m(HasBits* has_bits) {
    (*has_bits)[4] |= 16u;
  }
  static void set_has_enablesecondsidedelimiteronlyscenario(HasBits* has_bits) {
    (*has_bits)[6] |= 16777216u;
  }
  static void set_has_enablefirstsidedelimiteronlyscenario(HasBits* has_bits) {
    (*has_bits)[6] |= 33554432u;
  }
  static void set_has_prefersecondsideosd(HasBits* has_bits) {
    (*has_bits)[6] |= 67108864u;
  }
  static void set_has_osdsideroixfront_m(HasBits* has_bits) {
    (*has_bits)[8] |= 4u;
  }
  static void set_has_osdsideroixback_m(HasBits* has_bits) {
    (*has_bits)[5] |= 512u;
  }
  static void set_has_requiredcurbobjectforonesidedelimitingslots(HasBits* has_bits) {
    (*has_bits)[6] |= 134217728u;
  }
  static void set_has_horizontalmovementlimitofaslotslotcoords_m(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_maxallowedvehcurboverlapforperp_m(HasBits* has_bits) {
    (*has_bits)[4] |= 1024u;
  }
  static void set_has_mincurbobjlengthforonesidedel_m(HasBits* has_bits) {
    (*has_bits)[6] |= 536870912u;
  }
  static void set_has_allownakedslots(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static void set_has_requireatleastonedelimitingobjectfornakedslot(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static void set_has_maxroadsideextensionperpendicular_m(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_maxroadsideextensionparallel_m(HasBits* has_bits) {
    (*has_bits)[6] |= 1048576u;
  }
  static void set_has_maxroadsideextensionangular_m(HasBits* has_bits) {
    (*has_bits)[6] |= 262144u;
  }
  static void set_has_minappliedroadsideextension_m(HasBits* has_bits) {
    (*has_bits)[5] |= 2097152u;
  }
  static void set_has_mindistancetoobject_m(HasBits* has_bits) {
    (*has_bits)[5] |= 1u;
  }
  static void set_has_mindistancenoobject_m(HasBits* has_bits) {
    (*has_bits)[5] |= 256u;
  }
  static void set_has_enableangularparking(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_enableangularrightopeningtowardsback(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static void set_has_enableangularrightopeningtowardsfront(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_enableangularleftopeningtowardsback(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_enableangularleftopeningtowardsfront(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_enableangularslotbruteforcedetection(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_enableslotposedetectiononvirtuallines(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_outlierdistsqrparallelslot_m2(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_outlierdistsqrnonparallelslot_m2(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_slotreplacementdeltaoutlierdistsqr_m2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_angularparkingdetectionwindowabsmin_m(HasBits* has_bits) {
    (*has_bits)[7] |= 268435456u;
  }
  static void set_has_angularparkingdetectionwindowabsmax_m(HasBits* has_bits) {
    (*has_bits)[5] |= 536870912u;
  }
  static void set_has_angularslotmaxdepthextension_m(HasBits* has_bits) {
    (*has_bits)[7] |= 16777216u;
  }
  static void set_has_enableparallelslots(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_parallelslotlengthdeltamin_m(HasBits* has_bits) {
    (*has_bits)[7] |= 536870912u;
  }
  static void set_has_parallelslotlengthdeltamodel_m(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_parallelslotlengthdeltamax_m(HasBits* has_bits) {
    (*has_bits)[6] |= 2u;
  }
  static void set_has_parallelslotwidthdeltamodel_m(HasBits* has_bits) {
    (*has_bits)[8] |= 512u;
  }
  static void set_has_parallelslotwidthdeltamin_m(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_parallelslotwidthdeltamax_m(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static void set_has_parallelslotopeningdeltamaxpark_m(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_parallelslotopeningdeltaminpark_m(HasBits* has_bits) {
    (*has_bits)[8] |= 1u;
  }
  static void set_has_parallelslotdepthdeltamaxpark_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_parallelslotdepthdeltaminpark_m(HasBits* has_bits) {
    (*has_bits)[7] |= 8u;
  }
  static void set_has_enableperpendicularslots(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_perpendicularslotwidthdeltamin_m(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static void set_has_perpendicularslotwidthdeltamodel_m(HasBits* has_bits) {
    (*has_bits)[5] |= 268435456u;
  }
  static void set_has_perpendicularslotwidthdeltamax_m(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_perpendicularslotlengthdeltamodel_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_perpendicularslotlengthdeltamin_m(HasBits* has_bits) {
    (*has_bits)[5] |= 32768u;
  }
  static void set_has_perpendicularslotlengthdeltamax_m(HasBits* has_bits) {
    (*has_bits)[7] |= 524288u;
  }
  static void set_has_perpendicularslotopeningdeltamaxpark_m(HasBits* has_bits) {
    (*has_bits)[7] |= 4096u;
  }
  static void set_has_perpendicularslotopeningdeltaminpark_m(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_perpendicularslotdepthdeltamaxpark_m(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_perpendicularslotdepthdeltaminpark_m(HasBits* has_bits) {
    (*has_bits)[7] |= 2097152u;
  }
  static void set_has_enablegarageparkingslots(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_garageparkingslotwidthdeltamin_m(HasBits* has_bits) {
    (*has_bits)[4] |= 8u;
  }
  static void set_has_garageparkingslotwidthdeltamax_m(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_garageparkingslotlengthdeltamin_m(HasBits* has_bits) {
    (*has_bits)[6] |= 4194304u;
  }
  static void set_has_garageparkingslotlengthdeltamodel_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_garageparkingslotlengthdeltamax_m(HasBits* has_bits) {
    (*has_bits)[8] |= 2048u;
  }
  static void set_has_garageparkingslotdoorarealength_m(HasBits* has_bits) {
    (*has_bits)[4] |= 524288u;
  }
  static void set_has_maxallowedslotopeningoverlap_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_preferwideslots(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_offeroverlappingslots(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_performoptimization(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_shrinkslotfornumericalinaccuracy_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_slotpositioningroileftrightdelta_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slotpositioningroiroaddelta_m(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_slotedgepullsearchdistfront_m(HasBits* has_bits) {
    (*has_bits)[6] |= 16384u;
  }
  static void set_has_maxdrivenrotationparallel_rad(HasBits* has_bits) {
    (*has_bits)[8] |= 67108864u;
  }
  static void set_has_maxdrivenrotationperpendicular_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_maxdrivenrotationgarage_rad(HasBits* has_bits) {
    (*has_bits)[4] |= 4096u;
  }
  static void set_has_maxdrivenrotationangled_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_slotdepthhorizontallinealignment_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_enableslotshrinkingbelowusualsizeduringtrack(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_invalidateoverlappingestablishedslots(HasBits* has_bits) {
    (*has_bits)[4] |= 268435456u;
  }
  static void set_has_weightcurborientation(HasBits* has_bits) {
    (*has_bits)[4] |= 2097152u;
  }
  static void set_has_weightlineorientation(HasBits* has_bits) {
    (*has_bits)[4] |= 64u;
  }
  static void set_has_mincoveragepersidenonpar_m(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_enableslotorientationonsidevls(HasBits* has_bits) {
    (*has_bits)[4] |= 536870912u;
  }
  static void set_has_enableslotorientationonwingvls(HasBits* has_bits) {
    (*has_bits)[4] |= 1073741824u;
  }
  static void set_has_sidealignmentroiwidth_m(HasBits* has_bits) {
    (*has_bits)[7] |= 2147483648u;
  }
  static void set_has_sidealignmentweight_mpr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wingalignmentweight_mpr(HasBits* has_bits) {
    (*has_bits)[6] |= 2097152u;
  }
  static void set_has_minimumobstaclefittedlinelength_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_lineorientationroidelta_m(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_highsidedelimiterrequired(HasBits* has_bits) {
    (*has_bits)[4] |= 2147483648u;
  }
  static void set_has_curbobjectevaluationroidepthdelta_m(HasBits* has_bits) {
    (*has_bits)[9] |= 8u;
  }
  static void set_has_parallellinealloweddeviation_rad(HasBits* has_bits) {
    (*has_bits)[6] |= 8u;
  }
  static void set_has_enlargedynobj(HasBits* has_bits) {
    (*has_bits)[4] |= 32768u;
  }
  static void set_has_dynobjmaxvel_mps(HasBits* has_bits) {
    (*has_bits)[4] |= 32u;
  }
  static void set_has_dynobjmaxpreviewtime_s(HasBits* has_bits) {
    (*has_bits)[5] |= 65536u;
  }
  static void set_has_dynobjminexistenceprob_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_doexactshiftvectortoegocollisioncheck(HasBits* has_bits) {
    (*has_bits)[4] |= 65536u;
  }
  static void set_has_minslotopeningoffsetsideblowup_m(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_parallelslotlinetoolongpenalty(HasBits* has_bits) {
    (*has_bits)[7] |= 134217728u;
  }
  static void set_has_enableslotlengthadaptiontoadjacentobjects(HasBits* has_bits) {
    (*has_bits)[4] |= 131072u;
  }
  static void set_has_enableslotlengthadaptiontoadjacentlines(HasBits* has_bits) {
    (*has_bits)[4] |= 262144u;
  }
  static void set_has_allowslotextensionoverlinestominopening(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static void set_has_maxallowedslotextensionoverlinestominopening_m(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_allowshrinkonlinesdespitesideobjects(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
  static void set_has_prefershifttotoponcurbobjects(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static void set_has_sideshiftpenaltyforcurbobjects(HasBits* has_bits) {
    (*has_bits)[4] |= 8192u;
  }
  static void set_has_prefershifttotoproiyborderoffset_m(HasBits* has_bits) {
    (*has_bits)[8] |= 32u;
  }
  static void set_has_enableslotfallback(HasBits* has_bits) {
    (*has_bits)[4] |= 2u;
  }
  static void set_has_enableunspecifiedshift(HasBits* has_bits) {
    (*has_bits)[5] |= 4u;
  }
  static void set_has_penaltyforshrinktomindim(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_shrinkpenaltyforclassifyingobjectasdynamic(HasBits* has_bits) {
    (*has_bits)[6] |= 8192u;
  }
  static void set_has_shrinkpenaltyforshiftbelowmin(HasBits* has_bits) {
    (*has_bits)[7] |= 1073741824u;
  }
  static void set_has_shrinkpenaltyforexceedinggivenlimits(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_sideandcurbdelimiterroiextension_m(HasBits* has_bits) {
    (*has_bits)[8] |= 1048576u;
  }
  static void set_has_sideandcurbdelimiterroibottomshift_m(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static void set_has_typicalorientationofangledslot_rad(HasBits* has_bits) {
    (*has_bits)[8] |= 131072u;
  }
  static void set_has_dolinecategorization(HasBits* has_bits) {
    (*has_bits)[5] |= 8u;
  }
  static void set_has_smallslotopeningpenalty(HasBits* has_bits) {
    (*has_bits)[5] |= 134217728u;
  }
  static void set_has_lcanglecostfactor(HasBits* has_bits) {
    (*has_bits)[8] |= 65536u;
  }
  static void set_has_lclinedistcostfactor(HasBits* has_bits) {
    (*has_bits)[6] |= 131072u;
  }
  static void set_has_lclinelengthcostfactor(HasBits* has_bits) {
    (*has_bits)[8] |= 1024u;
  }
  static void set_has_docurbonlylinecategorization(HasBits* has_bits) {
    (*has_bits)[5] |= 16u;
  }
  static void set_has_lccurbonlyanglediff_rad(HasBits* has_bits) {
    (*has_bits)[6] |= 32768u;
  }
  static void set_has_lccurbonlyspatialdiff_m(HasBits* has_bits) {
    (*has_bits)[7] |= 8388608u;
  }
  static void set_has_ignorelinesforsandwichslots(HasBits* has_bits) {
    (*has_bits)[5] |= 32u;
  }
  static void set_has_lcnocurblineoptimizationifnocurblc(HasBits* has_bits) {
    (*has_bits)[4] |= 8388608u;
  }
  static void set_has_sensingrange_m(HasBits* has_bits) {
    (*has_bits)[7] |= 16u;
  }
  static void set_has_slotpenetrationdepth_m(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static void set_has_enableleftsidescanning(HasBits* has_bits) {
    (*has_bits)[4] |= 16777216u;
  }
  static void set_has_enablerightsidescanning(HasBits* has_bits) {
    (*has_bits)[4] |= 33554432u;
  }
  static void set_has_sideroiystart_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sideroiyend_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sideroixfront_m(HasBits* has_bits) {
    (*has_bits)[8] |= 32768u;
  }
  static void set_has_sideroixback_m(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_enablefrontscanning(HasBits* has_bits) {
    (*has_bits)[4] |= 67108864u;
  }
  static void set_has_frontroiyside_m(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static void set_has_frontroixstart_m(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_frontroixend_m(HasBits* has_bits) {
    (*has_bits)[7] |= 32u;
  }
  static void set_has_allownarrowslotsscan(HasBits* has_bits) {
    (*has_bits)[5] |= 131072u;
  }
  static void set_has_lineopeningdelimitermaxroadprotrusion_m(HasBits* has_bits) {
    (*has_bits)[7] |= 32768u;
  }
  static void set_has_lineopeningdelimitertocurbprojectionfactor(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_enablecnnwheelstoppers(HasBits* has_bits) {
    (*has_bits)[5] |= 262144u;
  }
  static void set_has_enablecnnwheelstopperstatobjverification(HasBits* has_bits) {
    (*has_bits)[5] |= 524288u;
  }
  static void set_has_allowedwsposoutsideslot_m(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_wsstatobjignoreevaluation(HasBits* has_bits) {
    (*has_bits)[5] |= 1048576u;
  }
  static void set_has_alloweddisttoexistingwswithwlsuppression_m(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_alloweddisttoexistingwswithoutwlsuppression_m(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_integrationmessageslevel_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_integrationmessagescomponent_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_collfunctionroiwidthdelta_m(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_collfunctionroilengthdelta_m(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_barrierdelimiterwidth_m(HasBits* has_bits) {
    (*has_bits)[7] |= 4u;
  }
  static void set_has_minbarrierdelimiterlength_m(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_minbarrierpointoverhang_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delzoneroadmaxreltovehwidthpar_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_delzoneroadmaxreltovehlengthnonpar_nu(HasBits* has_bits) {
    (*has_bits)[8] |= 64u;
  }
  static void set_has_delzoneroadfactorpar_nu(HasBits* has_bits) {
    (*has_bits)[6] |= 65536u;
  }
  static void set_has_delzoneroadfactornonpar_nu(HasBits* has_bits) {
    (*has_bits)[4] |= 4u;
  }
  static void set_has_delzoneroadmindistnonpar_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_delzoneroadmindistpar_m(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_delzonecurbmaxreltovehwidthpar_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_delzonecurbmaxreltovehlengthnonpar_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_delzonecurbfactorpar_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_delzonecurbfactornonpar_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_delzoneleftrightmaxreltovehlengthpar_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_delzoneleftrightfactornonpar_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_delzoneleftrightmaxreltovehwidthnonpar_nu(HasBits* has_bits) {
    (*has_bits)[7] |= 512u;
  }
  static void set_has_delzoneleftrightfactorpar_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_thdelimiterdist_m(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_insidezonedist_m(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_minrequireddelimiterprojectionratio_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_enableinsideobjectpenetrationdepth(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static void set_has_insideobjectmaxprojectionlength_m(HasBits* has_bits) {
    (*has_bits)[8] |= 256u;
  }
  static void set_has_vlprojectontoboxiffailed(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static void set_has_vlmaxtotalangle_rad(HasBits* has_bits) {
    (*has_bits)[6] |= 128u;
  }
  static void set_has_vlmaxnextedgeangle_rad(HasBits* has_bits) {
    (*has_bits)[8] |= 8192u;
  }
  static void set_has_vlminvirtuallinelengthperpside_m(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_vlminvirtuallinelengthparside_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_vlminvirtuallinelengthcurb_m(HasBits* has_bits) {
    (*has_bits)[7] |= 262144u;
  }
  static void set_has_vlminvirtuallinelengthroad_m(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_vldoroadinsideoptimization(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static void set_has_vluseroadfacingfornonparallelslots(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static void set_has_vlminlengthstartdirectionsq_m(HasBits* has_bits) {
    (*has_bits)[6] |= 524288u;
  }
  static void set_has_vlinsidelargerthanroadfactor(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_vlusemaxangletoparkingboxedge(HasBits* has_bits) {
    (*has_bits)[8] |= 2097152u;
  }
  static void set_has_vlmaxangletoparkingboxedge_rad(HasBits* has_bits) {
    (*has_bits)[8] |= 128u;
  }
  static void set_has_slotexpansion(HasBits* has_bits) {
    (*has_bits)[8] |= 4194304u;
  }
  static void set_has_slotexpansiononlines(HasBits* has_bits) {
    (*has_bits)[8] |= 8388608u;
  }
  static void set_has_slotexpframecounterstable_nu(HasBits* has_bits) {
    (*has_bits)[7] |= 64u;
  }
  static void set_has_slotexpmaxanglediff_rad(HasBits* has_bits) {
    (*has_bits)[9] |= 2u;
  }
  static void set_has_slotexpmaxtriangleexpansion_m(HasBits* has_bits) {
    (*has_bits)[5] |= 4194304u;
  }
  static void set_has_slotexpmintriangleexpansion_rad(HasBits* has_bits) {
    (*has_bits)[7] |= 128u;
  }
  static void set_has_slotexpansionsideroiwidth_m(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_relevantobjectminboxside_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_doobjectinflation(HasBits* has_bits) {
    (*has_bits)[8] |= 16777216u;
  }
  static void set_has_usecovmatrixinflation(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_inflationsafetydistancedefault_m(HasBits* has_bits) {
    (*has_bits)[8] |= 262144u;
  }
  static void set_has_inflationsafetydistanceparkout_m(HasBits* has_bits) {
    (*has_bits)[7] |= 33554432u;
  }
  static void set_has_ncsplitmaxskippablencareaperstep_m2(HasBits* has_bits) {
    (*has_bits)[4] |= 134217728u;
  }
  static void set_has_ncsplitusemostxstartidx(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_ncspliton(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_doobjectclustering(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_ocperpmaxdistanceside_m(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_ocperpmaxdistancecurb_m(HasBits* has_bits) {
    (*has_bits)[6] |= 64u;
  }
  static void set_has_ocperpendicularmaxdistancexforcurbsideclustering_m(HasBits* has_bits) {
    (*has_bits)[5] |= 2u;
  }
  static void set_has_ocparallelmaxdistancexforcurbsideclustering_m(HasBits* has_bits) {
    (*has_bits)[6] |= 16u;
  }
  static void set_has_ocangmaxdistancecurb_m(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_ocprimzoneperpsideopening_m(HasBits* has_bits) {
    (*has_bits)[7] |= 1048576u;
  }
  static void set_has_ocprimzoneangsideopening_m(HasBits* has_bits) {
    (*has_bits)[8] |= 2u;
  }
  static void set_has_ocprimzoneparsideopening_m(HasBits* has_bits) {
    (*has_bits)[6] |= 4u;
  }
  static void set_has_ocprimzonecurbbelowslot_m(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_ocprimzoneperpcurbintoslot_m(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static void set_has_ocprimzoneangcurbintoslot_m(HasBits* has_bits) {
    (*has_bits)[7] |= 4194304u;
  }
  static void set_has_ocprimzoneparcurbintoslot_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ocprimzoneperpsidetoroad_m(HasBits* has_bits) {
    (*has_bits)[4] |= 4194304u;
  }
  static void set_has_ocprimzoneparsidetoroad_m(HasBits* has_bits) {
    (*has_bits)[7] |= 1u;
  }
  static void set_has_ocseczoneperpsidetoside_m(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ocseczoneperpsidetoslot_m(HasBits* has_bits) {
    (*has_bits)[6] |= 1u;
  }
  static void set_has_ocseczoneperpsidetoroad_m(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_ocseczoneperpsidetocurb_m(HasBits* has_bits) {
    (*has_bits)[7] |= 65536u;
  }
  static void set_has_ocseczoneperpcurbtoside_m(HasBits* has_bits) {
    (*has_bits)[4] |= 512u;
  }
  static void set_has_ocseczoneperpcurbtoroad_m(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_ocseczoneperpcurbtocurb_m(HasBits* has_bits) {
    (*has_bits)[6] |= 1073741824u;
  }
  static void set_has_ocseczoneangsidetoside_m(HasBits* has_bits) {
    (*has_bits)[7] |= 67108864u;
  }
  static void set_has_ocseczoneangsidetoslot_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_ocseczoneangsidetoroad_m(HasBits* has_bits) {
    (*has_bits)[8] |= 8u;
  }
  static void set_has_ocseczoneangsidetocurb_m(HasBits* has_bits) {
    (*has_bits)[9] |= 1u;
  }
  static void set_has_ocseczoneangcurbtoside_m(HasBits* has_bits) {
    (*has_bits)[6] |= 256u;
  }
  static void set_has_ocseczoneangcurbtoroad_m(HasBits* has_bits) {
    (*has_bits)[5] |= 1073741824u;
  }
  static void set_has_ocseczoneangcurbtocurb_m(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_ocseczoneparsidetoside_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ocseczoneparsidetoslot_m(HasBits* has_bits) {
    (*has_bits)[5] |= 2147483648u;
  }
  static void set_has_ocseczoneparsidetoroad_m(HasBits* has_bits) {
    (*has_bits)[8] |= 33554432u;
  }
  static void set_has_ocseczoneparsidetocurb_m(HasBits* has_bits) {
    (*has_bits)[7] |= 16384u;
  }
  static void set_has_ocseczoneparcurbtoside_m(HasBits* has_bits) {
    (*has_bits)[4] |= 2048u;
  }
  static void set_has_ocseczoneparcurbtoroad_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_ocseczoneparcurbtocurb_m(HasBits* has_bits) {
    (*has_bits)[6] |= 2147483648u;
  }
  static void set_has_outsideinallowedoverlap_m(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_sideallowedoverlap_m(HasBits* has_bits) {
    (*has_bits)[7] |= 256u;
  }
  static void set_has_useareacriteria(HasBits* has_bits) {
    (*has_bits)[8] |= 268435456u;
  }
  static void set_has_angularcurbroadareafactor(HasBits* has_bits) {
    (*has_bits)[7] |= 1024u;
  }
  static void set_has_prohibitionzonerelativelength(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static void set_has_uselinearoverlapdropoff(HasBits* has_bits) {
    (*has_bits)[8] |= 536870912u;
  }
  static void set_has_vlinsidelargeenough_m(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_vlmaxallowedroadinsideanglediff_rad(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_tecalculateroadsideexpansion(HasBits* has_bits) {
    (*has_bits)[8] |= 1073741824u;
  }
  static void set_has_delzonesusehighcomplexitygetscore(HasBits* has_bits) {
    (*has_bits)[8] |= 2147483648u;
  }
  static void set_has_cnnslotsenablesislotdetectionverification(HasBits* has_bits) {
    (*has_bits)[5] |= 8388608u;
  }
  static void set_has_cnncompareslottypefpsuppression(HasBits* has_bits) {
    (*has_bits)[5] |= 16777216u;
  }
  static void set_has_cnnslotsminscenarioconfidencetheshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_cnnslotsperpendicularvalidatesangular(HasBits* has_bits) {
    (*has_bits)[5] |= 33554432u;
  }
  static void set_has_cnnslotsvalidationmaxopeninganglediff_rad(HasBits* has_bits) {
    (*has_bits)[4] |= 128u;
  }
  static void set_has_cnnslotsenablecnnslotprototypes(HasBits* has_bits) {
    (*has_bits)[5] |= 67108864u;
  }
  static void set_has_allownakedcnnslots(HasBits* has_bits) {
    (*has_bits)[5] |= 1024u;
  }
  static void set_has_cnnslotblowuplimitparside_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_cnnslotblowuplimitparcurb_m(HasBits* has_bits) {
    (*has_bits)[8] |= 16384u;
  }
  static void set_has_cnnslotroadalignmentlimitpar_m(HasBits* has_bits) {
    (*has_bits)[8] |= 16u;
  }
  static void set_has_cnnslotblowuplimitnonparside_m(HasBits* has_bits) {
    (*has_bits)[4] |= 16384u;
  }
  static void set_has_cnnslotblowuplimitnonparcurb_m(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_cnnslotroadalignmentlimitnonpar_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_cnnorientationerrorcostfunctionfactor(HasBits* has_bits) {
    (*has_bits)[7] |= 2048u;
  }
  static void set_has_cnnslotsallowsislotoverride(HasBits* has_bits) {
    (*has_bits)[5] |= 2048u;
  }
  static void set_has_slotscoringmaxparlinelength_m(HasBits* has_bits) {
    (*has_bits)[5] |= 8192u;
  }
  static void set_has_slotscoringminparwinglength_m(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_slotscoringminnonparsidelength_m(HasBits* has_bits) {
    (*has_bits)[4] |= 256u;
  }
  static void set_has_slotscoringmaxvlorlineanglediff_rad(HasBits* has_bits) {
    (*has_bits)[5] |= 16384u;
  }
  static void set_has_cnnslotsminvalidationoverlap_m(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_cnnslotsmininvalidationoverlap_m(HasBits* has_bits) {
    (*has_bits)[8] |= 524288u;
  }
  static void set_has_mindistgapcnnslotvstrackedslot_m(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static void set_has_cnnslotodslotenlargement_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_memparkextendslot_m(HasBits* has_bits) {
    (*has_bits)[8] |= 4096u;
  }
  static void set_has_leftrightmemparkoffsetx_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_leftrightmemparkgapy_m(HasBits* has_bits) {
    (*has_bits)[6] |= 268435456u;
  }
  static void set_has_frontmemparkgap_m(HasBits* has_bits) {
    (*has_bits)[7] |= 8192u;
  }
  static void set_has_rearmemparkgap_m(HasBits* has_bits) {
    (*has_bits)[5] |= 128u;
  }
  static void set_has_maxmemparkrotadj_rad(HasBits* has_bits) {
    (*has_bits)[9] |= 4u;
  }
  static void set_has_maxmemparklinearadj_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preapplyroadsideextension(HasBits* has_bits) {
    (*has_bits)[5] |= 4096u;
  }
  static void set_has_safetymargindynobjenlargingped_m(HasBits* has_bits) {
    (*has_bits)[7] |= 2u;
  }
  static void set_has_safetymargindynobjenlargingcar_m(HasBits* has_bits) {
    (*has_bits)[6] |= 32u;
  }
  static void set_has_minheightconfdeltastaticobj(HasBits* has_bits) {
    (*has_bits)[5] |= 64u;
  }
  static void set_has_developergenericfloat0(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_developergenericfloat1(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_developergenericfloat2(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_developergenericfloat3(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_developergenericfloat4(HasBits* has_bits) {
    (*has_bits)[8] |= 134217728u;
  }
  static void set_has_developergenericfloat5(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
SiParams::_Internal::ssigheader(const SiParams* msg) {
  return *msg->ssigheader_;
}
void SiParams::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SiParams::SiParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.si_params.SiParams)
}
SiParams::SiParams(const SiParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&slotpositioningroileftrightdelta_m_, &from.slotpositioningroileftrightdelta_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&curbobjectevaluationroidepthdelta_m_) -
    reinterpret_cast<char*>(&slotpositioningroileftrightdelta_m_)) + sizeof(curbobjectevaluationroidepthdelta_m_));
  // @@protoc_insertion_point(copy_constructor:pb.si.si_params.SiParams)
}

void SiParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiParams_si_2fsi_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curbobjectevaluationroidepthdelta_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(curbobjectevaluationroidepthdelta_m_));
}

SiParams::~SiParams() {
  // @@protoc_insertion_point(destructor:pb.si.si_params.SiParams)
  SharedDtor();
}

void SiParams::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void SiParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiParams& SiParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiParams_si_2fsi_5fparams_2eproto.base);
  return *internal_default_instance();
}


void SiParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.si_params.SiParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&slotpositioningroileftrightdelta_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotreplacementdeltaoutlierdistsqr_m2_) -
        reinterpret_cast<char*>(&slotpositioningroileftrightdelta_m_)) + sizeof(slotreplacementdeltaoutlierdistsqr_m2_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&developergenericfloat0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&developergenericfloat2_) -
        reinterpret_cast<char*>(&developergenericfloat0_)) + sizeof(developergenericfloat2_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&sideroiyend_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delzonecurbfactorpar_nu_) -
        reinterpret_cast<char*>(&sideroiyend_m_)) + sizeof(delzonecurbfactorpar_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&slotdepthhorizontallinealignment_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cnnslotsminscenarioconfidencetheshold_) -
        reinterpret_cast<char*>(&slotdepthhorizontallinealignment_m_)) + sizeof(cnnslotsminscenarioconfidencetheshold_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&integrationmessagescomponent_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&perpendicularslotwidthdeltamax_m_) -
        reinterpret_cast<char*>(&integrationmessagescomponent_nu_)) + sizeof(perpendicularslotwidthdeltamax_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&slotscoringminparwinglength_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allowedwsposoutsideslot_m_) -
        reinterpret_cast<char*>(&slotscoringminparwinglength_m_)) + sizeof(allowedwsposoutsideslot_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&collfunctionroilengthdelta_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minrequireddelimiterprojectionratio_nu_) -
        reinterpret_cast<char*>(&collfunctionroilengthdelta_m_)) + sizeof(minrequireddelimiterprojectionratio_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&outlierdistsqrnonparallelslot_m2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ocseczoneangsidetoslot_m_) -
        reinterpret_cast<char*>(&outlierdistsqrnonparallelslot_m2_)) + sizeof(ocseczoneangsidetoslot_m_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&delzonecurbmaxreltovehwidthpar_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delzoneleftrightfactorpar_nu_) -
        reinterpret_cast<char*>(&delzonecurbmaxreltovehwidthpar_nu_)) + sizeof(delzoneleftrightfactorpar_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&vlminvirtuallinelengthperpside_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frontroixstart_m_) -
        reinterpret_cast<char*>(&vlminvirtuallinelengthperpside_m_)) + sizeof(frontroixstart_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enableslotposedetectiononvirtuallines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&insidezonedist_m_) -
        reinterpret_cast<char*>(&enableslotposedetectiononvirtuallines_)) + sizeof(insidezonedist_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&delzonecurbmaxreltovehlengthnonpar_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enableangularslotbruteforcedetection_) -
        reinterpret_cast<char*>(&delzonecurbmaxreltovehlengthnonpar_nu_)) + sizeof(enableangularslotbruteforcedetection_));
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&horizontalmovementlimitofaslotslotcoords_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&performoptimization_) -
        reinterpret_cast<char*>(&horizontalmovementlimitofaslotslotcoords_m_)) + sizeof(performoptimization_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&enableslotshrinkingbelowusualsizeduringtrack_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enableangularparking_) -
        reinterpret_cast<char*>(&enableslotshrinkingbelowusualsizeduringtrack_)) + sizeof(enableangularparking_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enableangularrightopeningtowardsback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enableinsideobjectpenetrationdepth_) -
        reinterpret_cast<char*>(&enableangularrightopeningtowardsback_)) + sizeof(enableinsideobjectpenetrationdepth_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&vlprojectontoboxiffailed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allowshrinkonlinesdespitesideobjects_) -
        reinterpret_cast<char*>(&vlprojectontoboxiffailed_)) + sizeof(allowshrinkonlinesdespitesideobjects_));
  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&prefershifttotoponcurbobjects_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cnnslotsvalidationmaxopeninganglediff_rad_) -
        reinterpret_cast<char*>(&prefershifttotoponcurbobjects_)) + sizeof(cnnslotsvalidationmaxopeninganglediff_rad_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&slotscoringminnonparsidelength_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enlargedynobj_) -
        reinterpret_cast<char*>(&slotscoringminnonparsidelength_m_)) + sizeof(enlargedynobj_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&doexactshiftvectortoegocollisioncheck_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lcnocurblineoptimizationifnocurblc_) -
        reinterpret_cast<char*>(&doexactshiftvectortoegocollisioncheck_)) + sizeof(lcnocurblineoptimizationifnocurblc_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&enableleftsidescanning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highsidedelimiterrequired_) -
        reinterpret_cast<char*>(&enableleftsidescanning_)) + sizeof(highsidedelimiterrequired_));
  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mindistancetoobject_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rearmemparkgap_m_) -
        reinterpret_cast<char*>(&mindistancetoobject_m_)) + sizeof(rearmemparkgap_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mindistancenoobject_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&perpendicularslotlengthdeltamin_m_) -
        reinterpret_cast<char*>(&mindistancenoobject_m_)) + sizeof(perpendicularslotlengthdeltamin_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&dynobjmaxpreviewtime_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cnnslotsenablesislotdetectionverification_) -
        reinterpret_cast<char*>(&dynobjmaxpreviewtime_s_)) + sizeof(cnnslotsenablesislotdetectionverification_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&cnncompareslottypefpsuppression_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ocseczoneparsidetoslot_m_) -
        reinterpret_cast<char*>(&cnncompareslottypefpsuppression_)) + sizeof(ocseczoneparsidetoslot_m_));
  }
  cached_has_bits = _has_bits_[6];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ocseczoneperpsidetoslot_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vlmaxtotalangle_rad_) -
        reinterpret_cast<char*>(&ocseczoneperpsidetoslot_m_)) + sizeof(vlmaxtotalangle_rad_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ocseczoneangcurbtoside_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lccurbonlyanglediff_rad_) -
        reinterpret_cast<char*>(&ocseczoneangcurbtoside_m_)) + sizeof(lccurbonlyanglediff_rad_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&delzoneroadfactorpar_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotidentmaxyawdevparallel_rad_) -
        reinterpret_cast<char*>(&delzoneroadfactorpar_nu_)) + sizeof(slotidentmaxyawdevparallel_rad_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&enablesecondsidedelimiteronlyscenario_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ocseczoneparcurbtocurb_m_) -
        reinterpret_cast<char*>(&enablesecondsidedelimiteronlyscenario_)) + sizeof(ocseczoneparcurbtocurb_m_));
  }
  cached_has_bits = _has_bits_[7];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ocprimzoneparsidetoroad_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotexpmintriangleexpansion_rad_) -
        reinterpret_cast<char*>(&ocprimzoneparsidetoroad_m_)) + sizeof(slotexpmintriangleexpansion_rad_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&sideallowedoverlap_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lineopeningdelimitermaxroadprotrusion_m_) -
        reinterpret_cast<char*>(&sideallowedoverlap_m_)) + sizeof(lineopeningdelimitermaxroadprotrusion_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ocseczoneperpsidetocurb_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lccurbonlyspatialdiff_m_) -
        reinterpret_cast<char*>(&ocseczoneperpsidetocurb_m_)) + sizeof(lccurbonlyspatialdiff_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&angularslotmaxdepthextension_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sidealignmentroiwidth_m_) -
        reinterpret_cast<char*>(&angularslotmaxdepthextension_m_)) + sizeof(sidealignmentroiwidth_m_));
  }
  cached_has_bits = _has_bits_[8];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&parallelslotopeningdeltaminpark_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vlmaxangletoparkingboxedge_rad_) -
        reinterpret_cast<char*>(&parallelslotopeningdeltaminpark_m_)) + sizeof(vlmaxangletoparkingboxedge_rad_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&insideobjectmaxprojectionlength_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sideroixfront_m_) -
        reinterpret_cast<char*>(&insideobjectmaxprojectionlength_m_)) + sizeof(sideroixfront_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&lcanglecostfactor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slotexpansiononlines_) -
        reinterpret_cast<char*>(&lcanglecostfactor_)) + sizeof(slotexpansiononlines_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&doobjectinflation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delzonesusehighcomplexitygetscore_) -
        reinterpret_cast<char*>(&doobjectinflation_)) + sizeof(delzonesusehighcomplexitygetscore_));
  }
  cached_has_bits = _has_bits_[9];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ocseczoneangsidetocurb_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curbobjectevaluationroidepthdelta_m_) -
        reinterpret_cast<char*>(&ocseczoneangsidetocurb_m_)) + sizeof(curbobjectevaluationroidepthdelta_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SiParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool teCalculateRoadSideExpansion = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tecalculateroadsideexpansion(&_has_bits_);
          tecalculateroadsideexpansion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotPositioningRoiLeftRightDelta_m = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_slotpositioningroileftrightdelta_m(&_has_bits_);
          slotpositioningroileftrightdelta_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float developerGenericFloat5 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_developergenericfloat5(&_has_bits_);
          developergenericfloat5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 dynObjMinExistenceProb_perc = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dynobjminexistenceprob_perc(&_has_bits_);
          dynobjminexistenceprob_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preferWideSlots = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_preferwideslots(&_has_bits_);
          preferwideslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minBarrierPointOverhang_m = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_minbarrierpointoverhang_m(&_has_bits_);
          minbarrierpointoverhang_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxMemParkLinearAdj_m = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_maxmemparklinearadj_m(&_has_bits_);
          maxmemparklinearadj_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideRoiYStart_m = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_sideroiystart_m(&_has_bits_);
          sideroiystart_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableParallelSlots = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_enableparallelslots(&_has_bits_);
          enableparallelslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotReplacementDeltaOutlierDistSqr_m2 = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_slotreplacementdeltaoutlierdistsqr_m2(&_has_bits_);
          slotreplacementdeltaoutlierdistsqr_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float developerGenericFloat0 = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_developergenericfloat0(&_has_bits_);
          developergenericfloat0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideAlignmentWeight_mpr = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_sidealignmentweight_mpr(&_has_bits_);
          sidealignmentweight_mpr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotOdSlotEnlargement_m = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_cnnslotodslotenlargement_m(&_has_bits_);
          cnnslotodslotenlargement_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxDrivenRotationPerpendicular_rad = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_maxdrivenrotationperpendicular_rad(&_has_bits_);
          maxdrivenrotationperpendicular_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableGarageParkingSlots = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enablegarageparkingslots(&_has_bits_);
          enablegarageparkingslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float developerGenericFloat1 = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_developergenericfloat1(&_has_bits_);
          developergenericfloat1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableAngularParking = 186;
      case 186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_enableangularparking(&_has_bits_);
          enableangularparking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneParSideToSide_m = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ocseczoneparsidetoside_m(&_has_bits_);
          ocseczoneparsidetoside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotLengthDeltaModel_m = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_perpendicularslotlengthdeltamodel_m(&_has_bits_);
          perpendicularslotlengthdeltamodel_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float developerGenericFloat2 = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_developergenericfloat2(&_has_bits_);
          developergenericfloat2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideRoiYEnd_m = 235;
      case 235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_sideroiyend_m(&_has_bits_);
          sideroiyend_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneLeftRightMaxRelToVehLengthPar_nu = 236;
      case 236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_delzoneleftrightmaxreltovehlengthpar_nu(&_has_bits_);
          delzoneleftrightmaxreltovehlengthpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZonePerpSideToSide_m = 243;
      case 243:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ocseczoneperpsidetoside_m(&_has_bits_);
          ocseczoneperpsidetoside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float developerGenericFloat3 = 251;
      case 251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_developergenericfloat3(&_has_bits_);
          developergenericfloat3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableAngularLeftOpeningTowardsFront = 290;
      case 290:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enableangularleftopeningtowardsfront(&_has_bits_);
          enableangularleftopeningtowardsfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZoneParCurbIntoSlot_m = 340;
      case 340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ocprimzoneparcurbintoslot_m(&_has_bits_);
          ocprimzoneparcurbintoslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlMinVirtualLineLengthParSide_m = 372;
      case 372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_vlminvirtuallinelengthparside_m(&_has_bits_);
          vlminvirtuallinelengthparside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxAllowedSlotOpeningOverlap_m = 468;
      case 468:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_maxallowedslotopeningoverlap_m(&_has_bits_);
          maxallowedslotopeningoverlap_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneCurbFactorPar_nu = 469;
      case 469:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_delzonecurbfactorpar_nu(&_has_bits_);
          delzonecurbfactorpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool doObjectInflation = 477;
      case 477:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_doobjectinflation(&_has_bits_);
          doobjectinflation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotDepthHorizontalLineAlignment_m = 483;
      case 483:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_slotdepthhorizontallinealignment_m(&_has_bits_);
          slotdepthhorizontallinealignment_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotLengthDeltaModel_m = 484;
      case 484:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_parallelslotlengthdeltamodel_m(&_has_bits_);
          parallelslotlengthdeltamodel_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool invalidateOverlappingEstablishedSlots = 490;
      case 490:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_invalidateoverlappingestablishedslots(&_has_bits_);
          invalidateoverlappingestablishedslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotFallback = 494;
      case 494:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enableslotfallback(&_has_bits_);
          enableslotfallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableRightSideScanning = 507;
      case 507:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_enablerightsidescanning(&_has_bits_);
          enablerightsidescanning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float vlMinVirtualLineLengthRoad_m = 514;
      case 514:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_vlminvirtuallinelengthroad_m(&_has_bits_);
          vlminvirtuallinelengthroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxDrivenRotationAngled_rad = 530;
      case 530:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_maxdrivenrotationangled_rad(&_has_bits_);
          maxdrivenrotationangled_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float penaltyForShrinkToMinDim = 551;
      case 551:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_penaltyforshrinktomindim(&_has_bits_);
          penaltyforshrinktomindim_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float minSlotOpeningOffsetSideBlowUp_m = 552;
      case 552:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_minslotopeningoffsetsideblowup_m(&_has_bits_);
          minslotopeningoffsetsideblowup_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float garageParkingSlotLengthDeltaModel_m = 558;
      case 558:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_garageparkingslotlengthdeltamodel_m(&_has_bits_);
          garageparkingslotlengthdeltamodel_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 cnnSlotsMinScenarioConfidenceTheshold = 566;
      case 566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_cnnslotsminscenarioconfidencetheshold(&_has_bits_);
          cnnslotsminscenarioconfidencetheshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 integrationMessagesComponent_nu = 610;
      case 610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_integrationmessagescomponent_nu(&_has_bits_);
          integrationmessagescomponent_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ncSplitUseMostXStartIdx = 622;
      case 622:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ncsplitusemostxstartidx(&_has_bits_);
          ncsplitusemostxstartidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float leftRightMemParkOffsetX_m = 629;
      case 629:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_leftrightmemparkoffsetx_m(&_has_bits_);
          leftrightmemparkoffsetx_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shrinkSlotForNumericalInaccuracy_m = 672;
      case 672:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_shrinkslotfornumericalinaccuracy_m(&_has_bits_);
          shrinkslotfornumericalinaccuracy_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlInsideLargerThanRoadFactor = 718;
      case 718:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_vlinsidelargerthanroadfactor(&_has_bits_);
          vlinsidelargerthanroadfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool vlDoRoadInsideOptimization = 739;
      case 739:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vldoroadinsideoptimization(&_has_bits_);
          vldoroadinsideoptimization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 integrationMessagesLevel_nu = 757;
      case 757:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_integrationmessageslevel_nu(&_has_bits_);
          integrationmessageslevel_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minCoveragePerSideNonPar_m = 779;
      case 779:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_mincoveragepersidenonpar_m(&_has_bits_);
          mincoveragepersidenonpar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideRoiXBack_m = 784;
      case 784:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_sideroixback_m(&_has_bits_);
          sideroixback_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool useLineMarkings = 814;
      case 814:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_uselinemarkings(&_has_bits_);
          uselinemarkings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotWidthDeltaMax_m = 816;
      case 816:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_perpendicularslotwidthdeltamax_m(&_has_bits_);
          perpendicularslotwidthdeltamax_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool allowNakedCnnSlots = 835;
      case 835:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allownakedcnnslots(&_has_bits_);
          allownakedcnnslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotScoringMinParWingLength_m = 846;
      case 846:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_slotscoringminparwinglength_m(&_has_bits_);
          slotscoringminparwinglength_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotWidthDeltaMin_m = 847;
      case 847:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_parallelslotwidthdeltamin_m(&_has_bits_);
          parallelslotwidthdeltamin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotRoadAlignmentLimitNonPar_m = 849;
      case 849:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_cnnslotroadalignmentlimitnonpar_m(&_has_bits_);
          cnnslotroadalignmentlimitnonpar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool offerOverlappingSlots = 862;
      case 862:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_offeroverlappingslots(&_has_bits_);
          offeroverlappingslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotDepthDeltaMaxPark_m = 866;
      case 866:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_parallelslotdepthdeltamaxpark_m(&_has_bits_);
          parallelslotdepthdeltamaxpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float minimumObstacleFittedLineLength_m = 888;
      case 888:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_minimumobstaclefittedlinelength_m(&_has_bits_);
          minimumobstaclefittedlinelength_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float relevantObjectMinBoxSide_m = 897;
      case 897:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_relevantobjectminboxside_m(&_has_bits_);
          relevantobjectminboxside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxAllowedSlotExtensionOverLinesToMinOpening_m = 905;
      case 905:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_maxallowedslotextensionoverlinestominopening_m(&_has_bits_);
          maxallowedslotextensionoverlinestominopening_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float allowedWsPosOutsideSlot_m = 913;
      case 913:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_allowedwsposoutsideslot_m(&_has_bits_);
          allowedwsposoutsideslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float collFunctionRoiLengthDelta_m = 919;
      case 919:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_collfunctionroilengthdelta_m(&_has_bits_);
          collfunctionroilengthdelta_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZonePerpSideToRoad_m = 931;
      case 931:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ocseczoneperpsidetoroad_m(&_has_bits_);
          ocseczoneperpsidetoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float garageParkingSlotWidthDeltaMax_m = 948;
      case 948:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_garageparkingslotwidthdeltamax_m(&_has_bits_);
          garageparkingslotwidthdeltamax_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool allowNakedSlots = 953;
      case 953:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_allownakedslots(&_has_bits_);
          allownakedslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool useCovMatrixInflation = 957;
      case 957:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_usecovmatrixinflation(&_has_bits_);
          usecovmatrixinflation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float collFunctionRoiWidthDelta_m = 974;
      case 974:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_collfunctionroiwidthdelta_m(&_has_bits_);
          collfunctionroiwidthdelta_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneRoadMinDistNonPar_m = 976;
      case 976:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_delzoneroadmindistnonpar_m(&_has_bits_);
          delzoneroadmindistnonpar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotBlowUpLimitParSide_m = 991;
      case 991:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_cnnslotblowuplimitparside_m(&_has_bits_);
          cnnslotblowuplimitparside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outlierDistSqrParallelSlot_m2 = 995;
      case 995:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_outlierdistsqrparallelslot_m2(&_has_bits_);
          outlierdistsqrparallelslot_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minRequiredDelimiterProjectionRatio_nu = 1046;
      case 1046:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_minrequireddelimiterprojectionratio_nu(&_has_bits_);
          minrequireddelimiterprojectionratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool doObjectClustering = 1052;
      case 1052:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_doobjectclustering(&_has_bits_);
          doobjectclustering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float outlierDistSqrNonParallelSlot_m2 = 1066;
      case 1066:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_outlierdistsqrnonparallelslot_m2(&_has_bits_);
          outlierdistsqrnonparallelslot_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float coveredIntervalsRoiWidth_m = 1124;
      case 1124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_coveredintervalsroiwidth_m(&_has_bits_);
          coveredintervalsroiwidth_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotBlowUpLimitNonParCurb_m = 1138;
      case 1138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_cnnslotblowuplimitnonparcurb_m(&_has_bits_);
          cnnslotblowuplimitnonparcurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneLeftRightFactorNonPar_nu = 1139;
      case 1139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_delzoneleftrightfactornonpar_nu(&_has_bits_);
          delzoneleftrightfactornonpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocAngMaxDistanceCurb_m = 1147;
      case 1147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ocangmaxdistancecurb_m(&_has_bits_);
          ocangmaxdistancecurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZonePerpCurbToRoad_m = 1157;
      case 1157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ocseczoneperpcurbtoroad_m(&_has_bits_);
          ocseczoneperpcurbtoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneParCurbToRoad_m = 1207;
      case 1207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ocseczoneparcurbtoroad_m(&_has_bits_);
          ocseczoneparcurbtoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneAngSideToSlot_m = 1211;
      case 1211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ocseczoneangsidetoslot_m(&_has_bits_);
          ocseczoneangsidetoslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneCurbMaxRelToVehWidthPar_nu = 1221;
      case 1221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_delzonecurbmaxreltovehwidthpar_nu(&_has_bits_);
          delzonecurbmaxreltovehwidthpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZoneCurbBelowSlot_m = 1229;
      case 1229:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ocprimzonecurbbelowslot_m(&_has_bits_);
          ocprimzonecurbbelowslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotOpeningDeltaMinPark_m = 1242;
      case 1242:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_perpendicularslotopeningdeltaminpark_m(&_has_bits_);
          perpendicularslotopeningdeltaminpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotExpansionSideRoiWidth_m = 1245;
      case 1245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_slotexpansionsideroiwidth_m(&_has_bits_);
          slotexpansionsideroiwidth_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float allowedDistToExistingWsWithoutWlSuppression_m = 1249;
      case 1249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_alloweddisttoexistingwswithoutwlsuppression_m(&_has_bits_);
          alloweddisttoexistingwswithoutwlsuppression_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lineOpeningDelimiterToCurbProjectionFactor = 1257;
      case 1257:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_lineopeningdelimitertocurbprojectionfactor(&_has_bits_);
          lineopeningdelimitertocurbprojectionfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotsMinValidationOverlap_m = 1287;
      case 1287:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_cnnslotsminvalidationoverlap_m(&_has_bits_);
          cnnslotsminvalidationoverlap_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneLeftRightFactorPar_nu = 1290;
      case 1290:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_delzoneleftrightfactorpar_nu(&_has_bits_);
          delzoneleftrightfactorpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableInsideObjectPenetrationDepth = 1300;
      case 1300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_enableinsideobjectpenetrationdepth(&_has_bits_);
          enableinsideobjectpenetrationdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableAngularLeftOpeningTowardsBack = 1303;
      case 1303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enableangularleftopeningtowardsback(&_has_bits_);
          enableangularleftopeningtowardsback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float vlMinVirtualLineLengthPerpSide_m = 1326;
      case 1326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_vlminvirtuallinelengthperpside_m(&_has_bits_);
          vlminvirtuallinelengthperpside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shrinkPenaltyForExceedingGivenLimits = 1354;
      case 1354:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_shrinkpenaltyforexceedinggivenlimits(&_has_bits_);
          shrinkpenaltyforexceedinggivenlimits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableFrontScanning = 1368;
      case 1368:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_enablefrontscanning(&_has_bits_);
          enablefrontscanning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float outsideInAllowedOverlap_m = 1371;
      case 1371:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_outsideinallowedoverlap_m(&_has_bits_);
          outsideinallowedoverlap_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableCnnWheelStopperStatObjVerification = 1382;
      case 1382:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enablecnnwheelstopperstatobjverification(&_has_bits_);
          enablecnnwheelstopperstatobjverification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enablePerpendicularSlots = 1404;
      case 1404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_enableperpendicularslots(&_has_bits_);
          enableperpendicularslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float frontRoiXStart_m = 1415;
      case 1415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_frontroixstart_m(&_has_bits_);
          frontroixstart_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlInsideLargeEnough_m = 1425;
      case 1425:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_vlinsidelargeenough_m(&_has_bits_);
          vlinsidelargeenough_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneCurbFactorNonPar_nu = 1442;
      case 1442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_delzonecurbfactornonpar_nu(&_has_bits_);
          delzonecurbfactornonpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool cnnSlotsPerpendicularValidatesAngular = 1447;
      case 1447:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cnnslotsperpendicularvalidatesangular(&_has_bits_);
          cnnslotsperpendicularvalidatesangular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotDepthDeltaMaxPark_m = 1449;
      case 1449:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_perpendicularslotdepthdeltamaxpark_m(&_has_bits_);
          perpendicularslotdepthdeltamaxpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float insideZoneDist_m = 1458;
      case 1458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_insidezonedist_m(&_has_bits_);
          insidezonedist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneCurbMaxRelToVehLengthNonPar_nu = 1463;
      case 1463:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_delzonecurbmaxreltovehlengthnonpar_nu(&_has_bits_);
          delzonecurbmaxreltovehlengthnonpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotLengthAdaptionToAdjacentLines = 1476;
      case 1476:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enableslotlengthadaptiontoadjacentlines(&_has_bits_);
          enableslotlengthadaptiontoadjacentlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotPositioningRoiRoadDelta_m = 1493;
      case 1493:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_slotpositioningroiroaddelta_m(&_has_bits_);
          slotpositioningroiroaddelta_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool vlProjectOntoBoxIfFailed = 1532;
      case 1532:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_vlprojectontoboxiffailed(&_has_bits_);
          vlprojectontoboxiffailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float delZoneRoadMaxRelToVehWidthPar_nu = 1533;
      case 1533:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_delzoneroadmaxreltovehwidthpar_nu(&_has_bits_);
          delzoneroadmaxreltovehwidthpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool ignoreLinesForSandwichSlots = 1548;
      case 1548:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ignorelinesforsandwichslots(&_has_bits_);
          ignorelinesforsandwichslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minBarrierDelimiterLength_m = 1558;
      case 1558:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_minbarrierdelimiterlength_m(&_has_bits_);
          minbarrierdelimiterlength_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float horizontalMovementLimitOfASlotSlotCoords_m = 1573;
      case 1573:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_horizontalmovementlimitofaslotslotcoords_m(&_has_bits_);
          horizontalmovementlimitofaslotslotcoords_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocPerpMaxDistanceSide_m = 1587;
      case 1587:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ocperpmaxdistanceside_m(&_has_bits_);
          ocperpmaxdistanceside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotOpeningDeltaMaxPark_m = 1588;
      case 1588:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_parallelslotopeningdeltamaxpark_m(&_has_bits_);
          parallelslotopeningdeltamaxpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float allowedDistToExistingWsWithWlSuppression_m = 1590;
      case 1590:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_alloweddisttoexistingwswithwlsuppression_m(&_has_bits_);
          alloweddisttoexistingwswithwlsuppression_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float thDelimiterDist_m = 1609;
      case 1609:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_thdelimiterdist_m(&_has_bits_);
          thdelimiterdist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enlargeDynObj = 1630;
      case 1630:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_enlargedynobj(&_has_bits_);
          enlargedynobj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool doExactShiftVectorToEgoCollisionCheck = 1631;
      case 1631:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_doexactshiftvectortoegocollisioncheck(&_has_bits_);
          doexactshiftvectortoegocollisioncheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float delZoneRoadMinDistPar_m = 1695;
      case 1695:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_delzoneroadmindistpar_m(&_has_bits_);
          delzoneroadmindistpar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlMaxAllowedRoadInsideAngleDiff_rad = 1704;
      case 1704:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_vlmaxallowedroadinsideanglediff_rad(&_has_bits_);
          vlmaxallowedroadinsideanglediff_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool useLinearOverlapDropOff = 1707;
      case 1707:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_uselinearoverlapdropoff(&_has_bits_);
          uselinearoverlapdropoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float maxRoadsideExtensionPerpendicular_m = 1711;
      case 1711:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_maxroadsideextensionperpendicular_m(&_has_bits_);
          maxroadsideextensionperpendicular_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool allowNarrowSlotsScan = 1727;
      case 1727:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_allownarrowslotsscan(&_has_bits_);
          allownarrowslotsscan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lineOrientationRoiDelta_m = 1754;
      case 1754:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_lineorientationroidelta_m(&_has_bits_);
          lineorientationroidelta_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneAngCurbToCurb_m = 1757;
      case 1757:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ocseczoneangcurbtocurb_m(&_has_bits_);
          ocseczoneangcurbtocurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableUnspecifiedShift = 1788;
      case 1788:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_enableunspecifiedshift(&_has_bits_);
          enableunspecifiedshift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float prohibitionZoneRelativeLength = 1829;
      case 1829:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_prohibitionzonerelativelength(&_has_bits_);
          prohibitionzonerelativelength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotPenetrationDepth_m = 1832;
      case 1832:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_slotpenetrationdepth_m(&_has_bits_);
          slotpenetrationdepth_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotWidthDeltaMin_m = 1840;
      case 1840:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_perpendicularslotwidthdeltamin_m(&_has_bits_);
          perpendicularslotwidthdeltamin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotWidthDeltaMax_m = 1871;
      case 1871:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_parallelslotwidthdeltamax_m(&_has_bits_);
          parallelslotwidthdeltamax_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frontRoiYSide_m = 1875;
      case 1875:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_frontroiyside_m(&_has_bits_);
          frontroiyside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideAndCurbDelimiterRoiBottomShift_m = 1910;
      case 1910:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_sideandcurbdelimiterroibottomshift_m(&_has_bits_);
          sideandcurbdelimiterroibottomshift_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZonePerpCurbIntoSlot_m = 1911;
      case 1911:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ocprimzoneperpcurbintoslot_m(&_has_bits_);
          ocprimzoneperpcurbintoslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool requireAtLeastOneDelimitingObjectForNakedSlot = 1927;
      case 1927:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_requireatleastonedelimitingobjectfornakedslot(&_has_bits_);
          requireatleastonedelimitingobjectfornakedslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minDistGapCnnSlotVsTrackedSlot_m = 1930;
      case 1930:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_mindistgapcnnslotvstrackedslot_m(&_has_bits_);
          mindistgapcnnslotvstrackedslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneRoadFactorNonPar_nu = 1967;
      case 1967:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_delzoneroadfactornonpar_nu(&_has_bits_);
          delzoneroadfactornonpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float garageParkingSlotWidthDeltaMin_m = 1972;
      case 1972:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_garageparkingslotwidthdeltamin_m(&_has_bits_);
          garageparkingslotwidthdeltamin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotIdentMaxDevFromStraightLine_m = 1973;
      case 1973:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_slotidentmaxdevfromstraightline_m(&_has_bits_);
          slotidentmaxdevfromstraightline_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dynObjMaxVel_mps = 1975;
      case 1975:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_dynobjmaxvel_mps(&_has_bits_);
          dynobjmaxvel_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weightLineOrientation = 1980;
      case 1980:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_weightlineorientation(&_has_bits_);
          weightlineorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotsValidationMaxOpeningAngleDiff_rad = 1982;
      case 1982:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_cnnslotsvalidationmaxopeninganglediff_rad(&_has_bits_);
          cnnslotsvalidationmaxopeninganglediff_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotOrientationOnSideVLs = 1985;
      case 1985:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enableslotorientationonsidevls(&_has_bits_);
          enableslotorientationonsidevls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotScoringMinNonParSideLength_m = 1986;
      case 1986:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_slotscoringminnonparsidelength_m(&_has_bits_);
          slotscoringminnonparsidelength_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZonePerpCurbToSide_m = 2005;
      case 2005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ocseczoneperpcurbtoside_m(&_has_bits_);
          ocseczoneperpcurbtoside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxAllowedVehCurbOverlapForPerp_m = 2010;
      case 2010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_maxallowedvehcurboverlapforperp_m(&_has_bits_);
          maxallowedvehcurboverlapforperp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool preferShiftToTopOnCurbObjects = 2011;
      case 2011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_prefershifttotoponcurbobjects(&_has_bits_);
          prefershifttotoponcurbobjects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneParCurbToSide_m = 2023;
      case 2023:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ocseczoneparcurbtoside_m(&_has_bits_);
          ocseczoneparcurbtoside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxDrivenRotationGarage_rad = 2024;
      case 2024:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_maxdrivenrotationgarage_rad(&_has_bits_);
          maxdrivenrotationgarage_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideShiftPenaltyForCurbObjects = 2073;
      case 2073:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_sideshiftpenaltyforcurbobjects(&_has_bits_);
          sideshiftpenaltyforcurbobjects_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotBlowUpLimitNonParSide_m = 2089;
      case 2089:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_cnnslotblowuplimitnonparside_m(&_has_bits_);
          cnnslotblowuplimitnonparside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float garageParkingSlotDoorAreaLength_m = 2119;
      case 2119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_garageparkingslotdoorarealength_m(&_has_bits_);
          garageparkingslotdoorarealength_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool doCurbOnlyLineCategorization = 2120;
      case 2120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_docurbonlylinecategorization(&_has_bits_);
          docurbonlylinecategorization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableAngularSlotBruteForceDetection = 2126;
      case 2126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enableangularslotbruteforcedetection(&_has_bits_);
          enableangularslotbruteforcedetection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cnnSlotsEnableCnnSlotPrototypes = 2136;
      case 2136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_cnnslotsenablecnnslotprototypes(&_has_bits_);
          cnnslotsenablecnnslotprototypes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float weightCurbOrientation = 2143;
      case 2143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_weightcurborientation(&_has_bits_);
          weightcurborientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZonePerpSideToRoad_m = 2160;
      case 2160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ocprimzoneperpsidetoroad_m(&_has_bits_);
          ocprimzoneperpsidetoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ncSplitMaxSkippableNCAreaPerStep_m2 = 2186;
      case 2186:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ncsplitmaxskippablencareaperstep_m2(&_has_bits_);
          ncsplitmaxskippablencareaperstep_m2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool performOptimization = 2187;
      case 2187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_performoptimization(&_has_bits_);
          performoptimization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minDistanceToObject_m = 2195;
      case 2195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_mindistancetoobject_m(&_has_bits_);
          mindistancetoobject_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocPerpendicularMaxDistanceXForCurbSideClustering_m = 2200;
      case 2200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ocperpendicularmaxdistancexforcurbsideclustering_m(&_has_bits_);
          ocperpendicularmaxdistancexforcurbsideclustering_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 minHeightConfDeltaStaticObj = 2213;
      case 2213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_minheightconfdeltastaticobj(&_has_bits_);
          minheightconfdeltastaticobj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preapplyRoadsideExtension = 2224;
      case 2224:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_preapplyroadsideextension(&_has_bits_);
          preapplyroadsideextension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rearMemParkGap_m = 2241;
      case 2241:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_rearmemparkgap_m(&_has_bits_);
          rearmemparkgap_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float minDistanceNoObject_m = 2244;
      case 2244:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_mindistancenoobject_m(&_has_bits_);
          mindistancenoobject_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float osdSideRoiXBack_m = 2258;
      case 2258:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_osdsideroixback_m(&_has_bits_);
          osdsideroixback_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool cnnCompareSlotTypeFPSuppression = 2272;
      case 2272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_cnncompareslottypefpsuppression(&_has_bits_);
          cnncompareslottypefpsuppression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotScoringMaxParLineLength_m = 2287;
      case 2287:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_slotscoringmaxparlinelength_m(&_has_bits_);
          slotscoringmaxparlinelength_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotScoringMaxVlOrLineAngleDiff_rad = 2293;
      case 2293:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_slotscoringmaxvlorlineanglediff_rad(&_has_bits_);
          slotscoringmaxvlorlineanglediff_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotLengthDeltaMin_m = 2314;
      case 2314:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_perpendicularslotlengthdeltamin_m(&_has_bits_);
          perpendicularslotlengthdeltamin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dynObjMaxPreviewTime_s = 2363;
      case 2363:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_dynobjmaxpreviewtime_s(&_has_bits_);
          dynobjmaxpreviewtime_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool allowSlotExtensionOverLinesToMinOpening = 2382;
      case 2382:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_allowslotextensionoverlinestominopening(&_has_bits_);
          allowslotextensionoverlinestominopening_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minAppliedRoadsideExtension_m = 2410;
      case 2410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_minappliedroadsideextension_m(&_has_bits_);
          minappliedroadsideextension_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotExpMaxTriangleExpansion_m = 2427;
      case 2427:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_slotexpmaxtriangleexpansion_m(&_has_bits_);
          slotexpmaxtriangleexpansion_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float smallSlotOpeningPenalty = 2479;
      case 2479:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_smallslotopeningpenalty(&_has_bits_);
          smallslotopeningpenalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotWidthDeltaModel_m = 2495;
      case 2495:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_perpendicularslotwidthdeltamodel_m(&_has_bits_);
          perpendicularslotwidthdeltamodel_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angularParkingDetectionWindowAbsMax_m = 2498;
      case 2498:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_angularparkingdetectionwindowabsmax_m(&_has_bits_);
          angularparkingdetectionwindowabsmax_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneAngCurbToRoad_m = 2518;
      case 2518:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ocseczoneangcurbtoroad_m(&_has_bits_);
          ocseczoneangcurbtoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneParSideToSlot_m = 2522;
      case 2522:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ocseczoneparsidetoslot_m(&_has_bits_);
          ocseczoneparsidetoslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZonePerpSideToSlot_m = 2536;
      case 2536:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ocseczoneperpsidetoslot_m(&_has_bits_);
          ocseczoneperpsidetoslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotLengthDeltaMax_m = 2547;
      case 2547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_parallelslotlengthdeltamax_m(&_has_bits_);
          parallelslotlengthdeltamax_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableAngularRightOpeningTowardsFront = 2559;
      case 2559:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_enableangularrightopeningtowardsfront(&_has_bits_);
          enableangularrightopeningtowardsfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZoneParSideOpening_m = 2563;
      case 2563:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ocprimzoneparsideopening_m(&_has_bits_);
          ocprimzoneparsideopening_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableSecondSideDelimiterOnlyScenario = 2565;
      case 2565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enablesecondsidedelimiteronlyscenario(&_has_bits_);
          enablesecondsidedelimiteronlyscenario_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float parallelLineAllowedDeviation_rad = 2580;
      case 2580:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_parallellinealloweddeviation_rad(&_has_bits_);
          parallellinealloweddeviation_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocParallelMaxDistanceXForCurbSideClustering_m = 2605;
      case 2605:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ocparallelmaxdistancexforcurbsideclustering_m(&_has_bits_);
          ocparallelmaxdistancexforcurbsideclustering_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float safetyMarginDynObjEnlargingCar_m = 2657;
      case 2657:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_safetymargindynobjenlargingcar_m(&_has_bits_);
          safetymargindynobjenlargingcar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocPerpMaxDistanceCurb_m = 2664;
      case 2664:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ocperpmaxdistancecurb_m(&_has_bits_);
          ocperpmaxdistancecurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlMaxTotalAngle_rad = 2683;
      case 2683:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_vlmaxtotalangle_rad(&_has_bits_);
          vlmaxtotalangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneAngCurbToSide_m = 2694;
      case 2694:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ocseczoneangcurbtoside_m(&_has_bits_);
          ocseczoneangcurbtoside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shrinkPenaltyForClassifyingObjectAsDynamic = 2700;
      case 2700:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_shrinkpenaltyforclassifyingobjectasdynamic(&_has_bits_);
          shrinkpenaltyforclassifyingobjectasdynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotEdgePullSearchDistFront_m = 2717;
      case 2717:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_slotedgepullsearchdistfront_m(&_has_bits_);
          slotedgepullsearchdistfront_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lcCurbOnlyAngleDiff_rad = 2739;
      case 2739:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_lccurbonlyanglediff_rad(&_has_bits_);
          lccurbonlyanglediff_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool highSideDelimiterRequired = 2753;
      case 2753:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_highsidedelimiterrequired(&_has_bits_);
          highsidedelimiterrequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float delZoneRoadFactorPar_nu = 2770;
      case 2770:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_delzoneroadfactorpar_nu(&_has_bits_);
          delzoneroadfactorpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool allowShrinkOnLinesDespiteSideObjects = 2840;
      case 2840:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_allowshrinkonlinesdespitesideobjects(&_has_bits_);
          allowshrinkonlinesdespitesideobjects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ncSplitOn = 2843;
      case 2843:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_ncspliton(&_has_bits_);
          ncspliton_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lcLineDistCostFactor = 2853;
      case 2853:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_lclinedistcostfactor(&_has_bits_);
          lclinedistcostfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxRoadsideExtensionAngular_m = 2854;
      case 2854:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_maxroadsideextensionangular_m(&_has_bits_);
          maxroadsideextensionangular_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlMinLengthStartDirectionSq_m = 2860;
      case 2860:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_vlminlengthstartdirectionsq_m(&_has_bits_);
          vlminlengthstartdirectionsq_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxRoadsideExtensionParallel_m = 2888;
      case 2888:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_maxroadsideextensionparallel_m(&_has_bits_);
          maxroadsideextensionparallel_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wingAlignmentWeight_mpr = 2889;
      case 2889:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_wingalignmentweight_mpr(&_has_bits_);
          wingalignmentweight_mpr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float garageParkingSlotLengthDeltaMin_m = 2905;
      case 2905:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_garageparkingslotlengthdeltamin_m(&_has_bits_);
          garageparkingslotlengthdeltamin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotIdentMaxYawDevParallel_rad = 2911;
      case 2911:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_slotidentmaxyawdevparallel_rad(&_has_bits_);
          slotidentmaxyawdevparallel_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool treatUnknownCurbsideObjectsAsBodyTraversable = 2916;
      case 2916:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_treatunknowncurbsideobjectsasbodytraversable(&_has_bits_);
          treatunknowncurbsideobjectsasbodytraversable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float leftRightMemParkGapY_m = 2918;
      case 2918:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_leftrightmemparkgapy_m(&_has_bits_);
          leftrightmemparkgapy_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float minCurbObjLengthForOneSideDel_m = 2932;
      case 2932:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_mincurbobjlengthforonesidedel_m(&_has_bits_);
          mincurbobjlengthforonesidedel_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZonePerpCurbToCurb_m = 2958;
      case 2958:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ocseczoneperpcurbtocurb_m(&_has_bits_);
          ocseczoneperpcurbtocurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneParCurbToCurb_m = 3004;
      case 3004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ocseczoneparcurbtocurb_m(&_has_bits_);
          ocseczoneparcurbtocurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool requiredCurbObjectForOneSideDelimitingSlots = 3005;
      case 3005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_requiredcurbobjectforonesidedelimitingslots(&_has_bits_);
          requiredcurbobjectforonesidedelimitingslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool preferSecondSideOSD = 3007;
      case 3007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_prefersecondsideosd(&_has_bits_);
          prefersecondsideosd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZoneParSideToRoad_m = 3020;
      case 3020:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ocprimzoneparsidetoroad_m(&_has_bits_);
          ocprimzoneparsidetoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float safetyMarginDynObjEnlargingPed_m = 3035;
      case 3035:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_safetymargindynobjenlargingped_m(&_has_bits_);
          safetymargindynobjenlargingped_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float barrierDelimiterWidth_m = 3039;
      case 3039:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_barrierdelimiterwidth_m(&_has_bits_);
          barrierdelimiterwidth_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotDepthDeltaMinPark_m = 3046;
      case 3046:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_parallelslotdepthdeltaminpark_m(&_has_bits_);
          parallelslotdepthdeltaminpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sensingRange_m = 3054;
      case 3054:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_sensingrange_m(&_has_bits_);
          sensingrange_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableFirstSideDelimiterOnlyScenario = 3069;
      case 3069:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_enablefirstsidedelimiteronlyscenario(&_has_bits_);
          enablefirstsidedelimiteronlyscenario_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float frontRoiXEnd_m = 3084;
      case 3084:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_frontroixend_m(&_has_bits_);
          frontroixend_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 slotExpFrameCounterStable_nu = 3095;
      case 3095:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_slotexpframecounterstable_nu(&_has_bits_);
          slotexpframecounterstable_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float slotExpMinTriangleExpansion_rad = 3099;
      case 3099:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_slotexpmintriangleexpansion_rad(&_has_bits_);
          slotexpmintriangleexpansion_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideAllowedOverlap_m = 3100;
      case 3100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_sideallowedoverlap_m(&_has_bits_);
          sideallowedoverlap_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneLeftRightMaxRelToVehWidthNonPar_nu = 3109;
      case 3109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_delzoneleftrightmaxreltovehwidthnonpar_nu(&_has_bits_);
          delzoneleftrightmaxreltovehwidthnonpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angularCurbRoadAreaFactor = 3119;
      case 3119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_angularcurbroadareafactor(&_has_bits_);
          angularcurbroadareafactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnOrientationErrorCostFunctionFactor = 3120;
      case 3120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_cnnorientationerrorcostfunctionfactor(&_has_bits_);
          cnnorientationerrorcostfunctionfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool isStaticObjectInputCCWOriented = 3131;
      case 3131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_isstaticobjectinputccworiented(&_has_bits_);
          isstaticobjectinputccworiented_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableCnnWheelStoppers = 3141;
      case 3141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enablecnnwheelstoppers(&_has_bits_);
          enablecnnwheelstoppers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableLeftSideScanning = 3159;
      case 3159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enableleftsidescanning(&_has_bits_);
          enableleftsidescanning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotOpeningDeltaMaxPark_m = 3166;
      case 3166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_perpendicularslotopeningdeltamaxpark_m(&_has_bits_);
          perpendicularslotopeningdeltamaxpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frontMemParkGap_m = 3217;
      case 3217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_frontmemparkgap_m(&_has_bits_);
          frontmemparkgap_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneParSideToCurb_m = 3226;
      case 3226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ocseczoneparsidetocurb_m(&_has_bits_);
          ocseczoneparsidetocurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lineOpeningDelimiterMaxRoadProtrusion_m = 3234;
      case 3234:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lineopeningdelimitermaxroadprotrusion_m(&_has_bits_);
          lineopeningdelimitermaxroadprotrusion_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZonePerpSideToCurb_m = 3240;
      case 3240:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ocseczoneperpsidetocurb_m(&_has_bits_);
          ocseczoneperpsidetocurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float increaseOverhangLowObject_m = 3268;
      case 3268:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_increaseoverhanglowobject_m(&_has_bits_);
          increaseoverhanglowobject_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool slotExpansionOnLines = 3304;
      case 3304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_slotexpansiononlines(&_has_bits_);
          slotexpansiononlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotShrinkingBelowUsualSizeDuringTrack = 3315;
      case 3315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_enableslotshrinkingbelowusualsizeduringtrack(&_has_bits_);
          enableslotshrinkingbelowusualsizeduringtrack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float vlMinVirtualLineLengthCurb_m = 3337;
      case 3337:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_vlminvirtuallinelengthcurb_m(&_has_bits_);
          vlminvirtuallinelengthcurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotLengthDeltaMax_m = 3338;
      case 3338:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_perpendicularslotlengthdeltamax_m(&_has_bits_);
          perpendicularslotlengthdeltamax_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool wsStatObjIgnoreEvaluation = 3340;
      case 3340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_wsstatobjignoreevaluation(&_has_bits_);
          wsstatobjignoreevaluation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZonePerpSideOpening_m = 3357;
      case 3357:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ocprimzoneperpsideopening_m(&_has_bits_);
          ocprimzoneperpsideopening_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float perpendicularSlotDepthDeltaMinPark_m = 3373;
      case 3373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_perpendicularslotdepthdeltaminpark_m(&_has_bits_);
          perpendicularslotdepthdeltaminpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool doLineCategorization = 3392;
      case 3392:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_dolinecategorization(&_has_bits_);
          dolinecategorization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZoneAngCurbIntoSlot_m = 3433;
      case 3433:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ocprimzoneangcurbintoslot_m(&_has_bits_);
          ocprimzoneangcurbintoslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool slotExpansion = 3436;
      case 3436:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_slotexpansion(&_has_bits_);
          slotexpansion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lcCurbOnlySpatialDiff_m = 3440;
      case 3440:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_lccurbonlyspatialdiff_m(&_has_bits_);
          lccurbonlyspatialdiff_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angularSlotMaxDepthExtension_m = 3468;
      case 3468:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_angularslotmaxdepthextension_m(&_has_bits_);
          angularslotmaxdepthextension_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inflationSafetyDistanceParkOut_m = 3473;
      case 3473:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_inflationsafetydistanceparkout_m(&_has_bits_);
          inflationsafetydistanceparkout_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneAngSideToSide_m = 3488;
      case 3488:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ocseczoneangsidetoside_m(&_has_bits_);
          ocseczoneangsidetoside_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotLineTooLongPenalty = 3503;
      case 3503:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_parallelslotlinetoolongpenalty(&_has_bits_);
          parallelslotlinetoolongpenalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotOrientationOnWingVLs = 3521;
      case 3521:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enableslotorientationonwingvls(&_has_bits_);
          enableslotorientationonwingvls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angularParkingDetectionWindowAbsMin_m = 3522;
      case 3522:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_angularparkingdetectionwindowabsmin_m(&_has_bits_);
          angularparkingdetectionwindowabsmin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotLengthDeltaMin_m = 3571;
      case 3571:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_parallelslotlengthdeltamin_m(&_has_bits_);
          parallelslotlengthdeltamin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shrinkPenaltyForShiftBelowMin = 3594;
      case 3594:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_shrinkpenaltyforshiftbelowmin(&_has_bits_);
          shrinkpenaltyforshiftbelowmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool lcNoCurbLineOptimizationIfNoCurbLc = 3610;
      case 3610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_lcnocurblineoptimizationifnocurblc(&_has_bits_);
          lcnocurblineoptimizationifnocurblc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sideAlignmentROIWidth_m = 3637;
      case 3637:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_sidealignmentroiwidth_m(&_has_bits_);
          sidealignmentroiwidth_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotLengthAdaptionToAdjacentObjects = 3682;
      case 3682:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enableslotlengthadaptiontoadjacentobjects(&_has_bits_);
          enableslotlengthadaptiontoadjacentobjects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotOpeningDeltaMinPark_m = 3760;
      case 3760:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_parallelslotopeningdeltaminpark_m(&_has_bits_);
          parallelslotopeningdeltaminpark_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool cnnSlotsAllowSiSlotOverride = 3762;
      case 3762:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_cnnslotsallowsislotoverride(&_has_bits_);
          cnnslotsallowsislotoverride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocPrimZoneAngSideOpening_m = 3788;
      case 3788:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ocprimzoneangsideopening_m(&_has_bits_);
          ocprimzoneangsideopening_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float osdSideRoiXFront_m = 3796;
      case 3796:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_osdsideroixfront_m(&_has_bits_);
          osdsideroixfront_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneAngSideToRoad_m = 3824;
      case 3824:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ocseczoneangsidetoroad_m(&_has_bits_);
          ocseczoneangsidetoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotRoadAlignmentLimitPar_m = 3835;
      case 3835:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_cnnslotroadalignmentlimitpar_m(&_has_bits_);
          cnnslotroadalignmentlimitpar_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float preferShiftToTopRoiYBorderOffset_m = 3844;
      case 3844:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_prefershifttotoproiyborderoffset_m(&_has_bits_);
          prefershifttotoproiyborderoffset_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float delZoneRoadMaxRelToVehLengthNonPar_nu = 3847;
      case 3847:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_delzoneroadmaxreltovehlengthnonpar_nu(&_has_bits_);
          delzoneroadmaxreltovehlengthnonpar_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlMaxAngleToParkingBoxEdge_rad = 3851;
      case 3851:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_vlmaxangletoparkingboxedge_rad(&_has_bits_);
          vlmaxangletoparkingboxedge_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool cnnSlotsEnableSiSlotDetectionVerification = 3857;
      case 3857:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_cnnslotsenablesislotdetectionverification(&_has_bits_);
          cnnslotsenablesislotdetectionverification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float insideObjectMaxProjectionLength_m = 3865;
      case 3865:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_insideobjectmaxprojectionlength_m(&_has_bits_);
          insideobjectmaxprojectionlength_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float parallelSlotWidthDeltaModel_m = 3876;
      case 3876:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_parallelslotwidthdeltamodel_m(&_has_bits_);
          parallelslotwidthdeltamodel_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lcLineLengthCostFactor = 3908;
      case 3908:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_lclinelengthcostfactor(&_has_bits_);
          lclinelengthcostfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotIdentFromTrajectory = 3922;
      case 3922:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_enableslotidentfromtrajectory(&_has_bits_);
          enableslotidentfromtrajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float garageParkingSlotLengthDeltaMax_m = 3929;
      case 3929:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_garageparkingslotlengthdeltamax_m(&_has_bits_);
          garageparkingslotlengthdeltamax_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableAngularRightOpeningTowardsBack = 3952;
      case 3952:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_enableangularrightopeningtowardsback(&_has_bits_);
          enableangularrightopeningtowardsback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float memParkExtendSlot_m = 3954;
      case 3954:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_memparkextendslot_m(&_has_bits_);
          memparkextendslot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vlMaxNextEdgeAngle_rad = 3965;
      case 3965:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_vlmaxnextedgeangle_rad(&_has_bits_);
          vlmaxnextedgeangle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotBlowUpLimitParCurb_m = 3972;
      case 3972:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_cnnslotblowuplimitparcurb_m(&_has_bits_);
          cnnslotblowuplimitparcurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideRoiXFront_m = 3982;
      case 3982:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_sideroixfront_m(&_has_bits_);
          sideroixfront_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lcAngleCostFactor = 3988;
      case 3988:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_lcanglecostfactor(&_has_bits_);
          lcanglecostfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enableSlotPoseDetectionOnVirtualLines = 3996;
      case 3996:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_enableslotposedetectiononvirtuallines(&_has_bits_);
          enableslotposedetectiononvirtuallines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vlUseRoadFacingForNonParallelSlots = 4010;
      case 4010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_vluseroadfacingfornonparallelslots(&_has_bits_);
          vluseroadfacingfornonparallelslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float typicalOrientationOfAngledSlot_rad = 4023;
      case 4023:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_typicalorientationofangledslot_rad(&_has_bits_);
          typicalorientationofangledslot_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inflationSafetyDistanceDefault_m = 4034;
      case 4034:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_inflationsafetydistancedefault_m(&_has_bits_);
          inflationsafetydistancedefault_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cnnSlotsMinInvalidationOverlap_m = 4038;
      case 4038:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_cnnslotsmininvalidationoverlap_m(&_has_bits_);
          cnnslotsmininvalidationoverlap_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sideAndCurbDelimiterRoiExtension_m = 4044;
      case 4044:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_sideandcurbdelimiterroiextension_m(&_has_bits_);
          sideandcurbdelimiterroiextension_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool vlUseMaxAngleToParkingBoxEdge = 522962;
      case 522962:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_vlusemaxangletoparkingboxedge(&_has_bits_);
          vlusemaxangletoparkingboxedge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneParSideToRoad_m = 1493409;
      case 1493409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ocseczoneparsidetoroad_m(&_has_bits_);
          ocseczoneparsidetoroad_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxDrivenRotationParallel_rad = 1962442;
      case 1962442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_maxdrivenrotationparallel_rad(&_has_bits_);
          maxdrivenrotationparallel_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float developerGenericFloat4 = 4286347;
      case 4286347:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_developergenericfloat4(&_has_bits_);
          developergenericfloat4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ocSecZoneAngSideToCurb_m = 8701776;
      case 8701776:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ocseczoneangsidetocurb_m(&_has_bits_);
          ocseczoneangsidetocurb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float slotExpMaxAngleDiff_rad = 11519704;
      case 11519704:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_slotexpmaxanglediff_rad(&_has_bits_);
          slotexpmaxanglediff_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxMemParkRotAdj_rad = 12895248;
      case 12895248:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_maxmemparkrotadj_rad(&_has_bits_);
          maxmemparkrotadj_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool useAreaCriteria = 14368221;
      case 14368221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_useareacriteria(&_has_bits_);
          useareacriteria_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float curbObjectEvaluationRoiDepthDelta_m = 15294138;
      case 15294138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_curbobjectevaluationroidepthdelta_m(&_has_bits_);
          curbobjectevaluationroidepthdelta_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool delZonesUseHighComplexityGetScore = 16563677;
      case 16563677:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_delzonesusehighcomplexitygetscore(&_has_bits_);
          delzonesusehighcomplexitygetscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.si_params.SiParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[8];
  // optional bool teCalculateRoadSideExpansion = 19;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_tecalculateroadsideexpansion(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float slotPositioningRoiLeftRightDelta_m = 28;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_slotpositioningroileftrightdelta_m(), target);
  }

  // optional float developerGenericFloat5 = 61;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(61, this->_internal_developergenericfloat5(), target);
  }

  // optional uint32 dynObjMinExistenceProb_perc = 79;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(79, this->_internal_dynobjminexistenceprob_perc(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool preferWideSlots = 86;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(86, this->_internal_preferwideslots(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float minBarrierPointOverhang_m = 90;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(90, this->_internal_minbarrierpointoverhang_m(), target);
  }

  // optional float maxMemParkLinearAdj_m = 91;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(91, this->_internal_maxmemparklinearadj_m(), target);
  }

  // optional float sideRoiYStart_m = 93;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(93, this->_internal_sideroiystart_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enableParallelSlots = 108;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(108, this->_internal_enableparallelslots(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float slotReplacementDeltaOutlierDistSqr_m2 = 114;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(114, this->_internal_slotreplacementdeltaoutlierdistsqr_m2(), target);
  }

  // optional float developerGenericFloat0 = 152;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(152, this->_internal_developergenericfloat0(), target);
  }

  // optional float sideAlignmentWeight_mpr = 153;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(153, this->_internal_sidealignmentweight_mpr(), target);
  }

  // optional float cnnSlotOdSlotEnlargement_m = 156;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(156, this->_internal_cnnslotodslotenlargement_m(), target);
  }

  // optional float maxDrivenRotationPerpendicular_rad = 161;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(161, this->_internal_maxdrivenrotationperpendicular_rad(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enableGarageParkingSlots = 183;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(183, this->_internal_enablegarageparkingslots(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float developerGenericFloat1 = 185;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(185, this->_internal_developergenericfloat1(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool enableAngularParking = 186;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(186, this->_internal_enableangularparking(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float ocSecZoneParSideToSide_m = 193;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(193, this->_internal_ocseczoneparsidetoside_m(), target);
  }

  // optional float perpendicularSlotLengthDeltaModel_m = 215;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(215, this->_internal_perpendicularslotlengthdeltamodel_m(), target);
  }

  // optional float developerGenericFloat2 = 218;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(218, this->_internal_developergenericfloat2(), target);
  }

  // optional float sideRoiYEnd_m = 235;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(235, this->_internal_sideroiyend_m(), target);
  }

  // optional float delZoneLeftRightMaxRelToVehLengthPar_nu = 236;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(236, this->_internal_delzoneleftrightmaxreltovehlengthpar_nu(), target);
  }

  // optional float ocSecZonePerpSideToSide_m = 243;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(243, this->_internal_ocseczoneperpsidetoside_m(), target);
  }

  // optional float developerGenericFloat3 = 251;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(251, this->_internal_developergenericfloat3(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enableAngularLeftOpeningTowardsFront = 290;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(290, this->_internal_enableangularleftopeningtowardsfront(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float ocPrimZoneParCurbIntoSlot_m = 340;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(340, this->_internal_ocprimzoneparcurbintoslot_m(), target);
  }

  // optional float vlMinVirtualLineLengthParSide_m = 372;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(372, this->_internal_vlminvirtuallinelengthparside_m(), target);
  }

  // optional float maxAllowedSlotOpeningOverlap_m = 468;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(468, this->_internal_maxallowedslotopeningoverlap_m(), target);
  }

  // optional float delZoneCurbFactorPar_nu = 469;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(469, this->_internal_delzonecurbfactorpar_nu(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional bool doObjectInflation = 477;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(477, this->_internal_doobjectinflation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float slotDepthHorizontalLineAlignment_m = 483;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(483, this->_internal_slotdepthhorizontallinealignment_m(), target);
  }

  // optional float parallelSlotLengthDeltaModel_m = 484;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(484, this->_internal_parallelslotlengthdeltamodel_m(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool invalidateOverlappingEstablishedSlots = 490;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(490, this->_internal_invalidateoverlappingestablishedslots(), target);
  }

  // optional bool enableSlotFallback = 494;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(494, this->_internal_enableslotfallback(), target);
  }

  // optional bool enableRightSideScanning = 507;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(507, this->_internal_enablerightsidescanning(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float vlMinVirtualLineLengthRoad_m = 514;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(514, this->_internal_vlminvirtuallinelengthroad_m(), target);
  }

  // optional float maxDrivenRotationAngled_rad = 530;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(530, this->_internal_maxdrivenrotationangled_rad(), target);
  }

  // optional float penaltyForShrinkToMinDim = 551;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(551, this->_internal_penaltyforshrinktomindim(), target);
  }

  // optional float minSlotOpeningOffsetSideBlowUp_m = 552;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(552, this->_internal_minslotopeningoffsetsideblowup_m(), target);
  }

  // optional float garageParkingSlotLengthDeltaModel_m = 558;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(558, this->_internal_garageparkingslotlengthdeltamodel_m(), target);
  }

  // optional uint32 cnnSlotsMinScenarioConfidenceTheshold = 566;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(566, this->_internal_cnnslotsminscenarioconfidencetheshold(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 integrationMessagesComponent_nu = 610;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(610, this->_internal_integrationmessagescomponent_nu(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool ncSplitUseMostXStartIdx = 622;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(622, this->_internal_ncsplitusemostxstartidx(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float leftRightMemParkOffsetX_m = 629;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(629, this->_internal_leftrightmemparkoffsetx_m(), target);
  }

  // optional float shrinkSlotForNumericalInaccuracy_m = 672;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(672, this->_internal_shrinkslotfornumericalinaccuracy_m(), target);
  }

  // optional float vlInsideLargerThanRoadFactor = 718;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(718, this->_internal_vlinsidelargerthanroadfactor(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool vlDoRoadInsideOptimization = 739;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(739, this->_internal_vldoroadinsideoptimization(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 integrationMessagesLevel_nu = 757;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(757, this->_internal_integrationmessageslevel_nu(), target);
  }

  // optional float minCoveragePerSideNonPar_m = 779;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(779, this->_internal_mincoveragepersidenonpar_m(), target);
  }

  // optional float sideRoiXBack_m = 784;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(784, this->_internal_sideroixback_m(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional bool useLineMarkings = 814;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(814, this->_internal_uselinemarkings(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float perpendicularSlotWidthDeltaMax_m = 816;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(816, this->_internal_perpendicularslotwidthdeltamax_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool allowNakedCnnSlots = 835;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(835, this->_internal_allownakedcnnslots(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float slotScoringMinParWingLength_m = 846;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(846, this->_internal_slotscoringminparwinglength_m(), target);
  }

  // optional float parallelSlotWidthDeltaMin_m = 847;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(847, this->_internal_parallelslotwidthdeltamin_m(), target);
  }

  // optional float cnnSlotRoadAlignmentLimitNonPar_m = 849;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(849, this->_internal_cnnslotroadalignmentlimitnonpar_m(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool offerOverlappingSlots = 862;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(862, this->_internal_offeroverlappingslots(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float parallelSlotDepthDeltaMaxPark_m = 866;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(866, this->_internal_parallelslotdepthdeltamaxpark_m(), target);
  }

  // optional float minimumObstacleFittedLineLength_m = 888;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(888, this->_internal_minimumobstaclefittedlinelength_m(), target);
  }

  // optional float relevantObjectMinBoxSide_m = 897;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(897, this->_internal_relevantobjectminboxside_m(), target);
  }

  // optional float maxAllowedSlotExtensionOverLinesToMinOpening_m = 905;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(905, this->_internal_maxallowedslotextensionoverlinestominopening_m(), target);
  }

  // optional float allowedWsPosOutsideSlot_m = 913;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(913, this->_internal_allowedwsposoutsideslot_m(), target);
  }

  // optional float collFunctionRoiLengthDelta_m = 919;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(919, this->_internal_collfunctionroilengthdelta_m(), target);
  }

  // optional float ocSecZonePerpSideToRoad_m = 931;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(931, this->_internal_ocseczoneperpsidetoroad_m(), target);
  }

  // optional float garageParkingSlotWidthDeltaMax_m = 948;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(948, this->_internal_garageparkingslotwidthdeltamax_m(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool allowNakedSlots = 953;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(953, this->_internal_allownakedslots(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool useCovMatrixInflation = 957;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(957, this->_internal_usecovmatrixinflation(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float collFunctionRoiWidthDelta_m = 974;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(974, this->_internal_collfunctionroiwidthdelta_m(), target);
  }

  // optional float delZoneRoadMinDistNonPar_m = 976;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(976, this->_internal_delzoneroadmindistnonpar_m(), target);
  }

  // optional float cnnSlotBlowUpLimitParSide_m = 991;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(991, this->_internal_cnnslotblowuplimitparside_m(), target);
  }

  // optional float outlierDistSqrParallelSlot_m2 = 995;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(995, this->_internal_outlierdistsqrparallelslot_m2(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional float minRequiredDelimiterProjectionRatio_nu = 1046;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1046, this->_internal_minrequireddelimiterprojectionratio_nu(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool doObjectClustering = 1052;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1052, this->_internal_doobjectclustering(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float outlierDistSqrNonParallelSlot_m2 = 1066;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1066, this->_internal_outlierdistsqrnonparallelslot_m2(), target);
  }

  // optional float coveredIntervalsRoiWidth_m = 1124;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1124, this->_internal_coveredintervalsroiwidth_m(), target);
  }

  // optional float cnnSlotBlowUpLimitNonParCurb_m = 1138;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1138, this->_internal_cnnslotblowuplimitnonparcurb_m(), target);
  }

  // optional float delZoneLeftRightFactorNonPar_nu = 1139;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1139, this->_internal_delzoneleftrightfactornonpar_nu(), target);
  }

  // optional float ocAngMaxDistanceCurb_m = 1147;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1147, this->_internal_ocangmaxdistancecurb_m(), target);
  }

  // optional float ocSecZonePerpCurbToRoad_m = 1157;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1157, this->_internal_ocseczoneperpcurbtoroad_m(), target);
  }

  // optional float ocSecZoneParCurbToRoad_m = 1207;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1207, this->_internal_ocseczoneparcurbtoroad_m(), target);
  }

  // optional float ocSecZoneAngSideToSlot_m = 1211;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1211, this->_internal_ocseczoneangsidetoslot_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float delZoneCurbMaxRelToVehWidthPar_nu = 1221;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1221, this->_internal_delzonecurbmaxreltovehwidthpar_nu(), target);
  }

  // optional float ocPrimZoneCurbBelowSlot_m = 1229;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1229, this->_internal_ocprimzonecurbbelowslot_m(), target);
  }

  // optional float perpendicularSlotOpeningDeltaMinPark_m = 1242;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1242, this->_internal_perpendicularslotopeningdeltaminpark_m(), target);
  }

  // optional float slotExpansionSideRoiWidth_m = 1245;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1245, this->_internal_slotexpansionsideroiwidth_m(), target);
  }

  // optional float allowedDistToExistingWsWithoutWlSuppression_m = 1249;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1249, this->_internal_alloweddisttoexistingwswithoutwlsuppression_m(), target);
  }

  // optional float lineOpeningDelimiterToCurbProjectionFactor = 1257;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1257, this->_internal_lineopeningdelimitertocurbprojectionfactor(), target);
  }

  // optional float cnnSlotsMinValidationOverlap_m = 1287;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1287, this->_internal_cnnslotsminvalidationoverlap_m(), target);
  }

  // optional float delZoneLeftRightFactorPar_nu = 1290;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1290, this->_internal_delzoneleftrightfactorpar_nu(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool enableInsideObjectPenetrationDepth = 1300;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1300, this->_internal_enableinsideobjectpenetrationdepth(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enableAngularLeftOpeningTowardsBack = 1303;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1303, this->_internal_enableangularleftopeningtowardsback(), target);
  }

  // optional float vlMinVirtualLineLengthPerpSide_m = 1326;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1326, this->_internal_vlminvirtuallinelengthperpside_m(), target);
  }

  // optional float shrinkPenaltyForExceedingGivenLimits = 1354;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1354, this->_internal_shrinkpenaltyforexceedinggivenlimits(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool enableFrontScanning = 1368;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1368, this->_internal_enablefrontscanning(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float outsideInAllowedOverlap_m = 1371;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1371, this->_internal_outsideinallowedoverlap_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool enableCnnWheelStopperStatObjVerification = 1382;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1382, this->_internal_enablecnnwheelstopperstatobjverification(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enablePerpendicularSlots = 1404;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1404, this->_internal_enableperpendicularslots(), target);
  }

  // optional float frontRoiXStart_m = 1415;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1415, this->_internal_frontroixstart_m(), target);
  }

  // optional float vlInsideLargeEnough_m = 1425;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1425, this->_internal_vlinsidelargeenough_m(), target);
  }

  // optional float delZoneCurbFactorNonPar_nu = 1442;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1442, this->_internal_delzonecurbfactornonpar_nu(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool cnnSlotsPerpendicularValidatesAngular = 1447;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1447, this->_internal_cnnslotsperpendicularvalidatesangular(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float perpendicularSlotDepthDeltaMaxPark_m = 1449;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1449, this->_internal_perpendicularslotdepthdeltamaxpark_m(), target);
  }

  // optional float insideZoneDist_m = 1458;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1458, this->_internal_insidezonedist_m(), target);
  }

  // optional float delZoneCurbMaxRelToVehLengthNonPar_nu = 1463;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1463, this->_internal_delzonecurbmaxreltovehlengthnonpar_nu(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool enableSlotLengthAdaptionToAdjacentLines = 1476;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1476, this->_internal_enableslotlengthadaptiontoadjacentlines(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float slotPositioningRoiRoadDelta_m = 1493;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1493, this->_internal_slotpositioningroiroaddelta_m(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool vlProjectOntoBoxIfFailed = 1532;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1532, this->_internal_vlprojectontoboxiffailed(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float delZoneRoadMaxRelToVehWidthPar_nu = 1533;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1533, this->_internal_delzoneroadmaxreltovehwidthpar_nu(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool ignoreLinesForSandwichSlots = 1548;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1548, this->_internal_ignorelinesforsandwichslots(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float minBarrierDelimiterLength_m = 1558;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1558, this->_internal_minbarrierdelimiterlength_m(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional float horizontalMovementLimitOfASlotSlotCoords_m = 1573;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1573, this->_internal_horizontalmovementlimitofaslotslotcoords_m(), target);
  }

  // optional float ocPerpMaxDistanceSide_m = 1587;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1587, this->_internal_ocperpmaxdistanceside_m(), target);
  }

  // optional float parallelSlotOpeningDeltaMaxPark_m = 1588;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1588, this->_internal_parallelslotopeningdeltamaxpark_m(), target);
  }

  // optional float allowedDistToExistingWsWithWlSuppression_m = 1590;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1590, this->_internal_alloweddisttoexistingwswithwlsuppression_m(), target);
  }

  // optional float thDelimiterDist_m = 1609;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1609, this->_internal_thdelimiterdist_m(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool enlargeDynObj = 1630;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1630, this->_internal_enlargedynobj(), target);
  }

  // optional bool doExactShiftVectorToEgoCollisionCheck = 1631;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1631, this->_internal_doexactshiftvectortoegocollisioncheck(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional float delZoneRoadMinDistPar_m = 1695;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1695, this->_internal_delzoneroadmindistpar_m(), target);
  }

  // optional float vlMaxAllowedRoadInsideAngleDiff_rad = 1704;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1704, this->_internal_vlmaxallowedroadinsideanglediff_rad(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional bool useLinearOverlapDropOff = 1707;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1707, this->_internal_uselinearoverlapdropoff(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional float maxRoadsideExtensionPerpendicular_m = 1711;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1711, this->_internal_maxroadsideextensionperpendicular_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool allowNarrowSlotsScan = 1727;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1727, this->_internal_allownarrowslotsscan(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional float lineOrientationRoiDelta_m = 1754;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1754, this->_internal_lineorientationroidelta_m(), target);
  }

  // optional float ocSecZoneAngCurbToCurb_m = 1757;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1757, this->_internal_ocseczoneangcurbtocurb_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool enableUnspecifiedShift = 1788;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1788, this->_internal_enableunspecifiedshift(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional float prohibitionZoneRelativeLength = 1829;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1829, this->_internal_prohibitionzonerelativelength(), target);
  }

  // optional float slotPenetrationDepth_m = 1832;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1832, this->_internal_slotpenetrationdepth_m(), target);
  }

  // optional float perpendicularSlotWidthDeltaMin_m = 1840;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1840, this->_internal_perpendicularslotwidthdeltamin_m(), target);
  }

  // optional float parallelSlotWidthDeltaMax_m = 1871;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1871, this->_internal_parallelslotwidthdeltamax_m(), target);
  }

  // optional float frontRoiYSide_m = 1875;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1875, this->_internal_frontroiyside_m(), target);
  }

  // optional float sideAndCurbDelimiterRoiBottomShift_m = 1910;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1910, this->_internal_sideandcurbdelimiterroibottomshift_m(), target);
  }

  // optional float ocPrimZonePerpCurbIntoSlot_m = 1911;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1911, this->_internal_ocprimzoneperpcurbintoslot_m(), target);
  }

  // optional bool requireAtLeastOneDelimitingObjectForNakedSlot = 1927;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1927, this->_internal_requireatleastonedelimitingobjectfornakedslot(), target);
  }

  // optional float minDistGapCnnSlotVsTrackedSlot_m = 1930;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1930, this->_internal_mindistgapcnnslotvstrackedslot_m(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional float delZoneRoadFactorNonPar_nu = 1967;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1967, this->_internal_delzoneroadfactornonpar_nu(), target);
  }

  // optional float garageParkingSlotWidthDeltaMin_m = 1972;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1972, this->_internal_garageparkingslotwidthdeltamin_m(), target);
  }

  // optional float slotIdentMaxDevFromStraightLine_m = 1973;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1973, this->_internal_slotidentmaxdevfromstraightline_m(), target);
  }

  // optional float dynObjMaxVel_mps = 1975;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1975, this->_internal_dynobjmaxvel_mps(), target);
  }

  // optional float weightLineOrientation = 1980;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1980, this->_internal_weightlineorientation(), target);
  }

  // optional float cnnSlotsValidationMaxOpeningAngleDiff_rad = 1982;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1982, this->_internal_cnnslotsvalidationmaxopeninganglediff_rad(), target);
  }

  // optional bool enableSlotOrientationOnSideVLs = 1985;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1985, this->_internal_enableslotorientationonsidevls(), target);
  }

  // optional float slotScoringMinNonParSideLength_m = 1986;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1986, this->_internal_slotscoringminnonparsidelength_m(), target);
  }

  // optional float ocSecZonePerpCurbToSide_m = 2005;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2005, this->_internal_ocseczoneperpcurbtoside_m(), target);
  }

  // optional float maxAllowedVehCurbOverlapForPerp_m = 2010;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2010, this->_internal_maxallowedvehcurboverlapforperp_m(), target);
  }

  // optional bool preferShiftToTopOnCurbObjects = 2011;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2011, this->_internal_prefershifttotoponcurbobjects(), target);
  }

  // optional float ocSecZoneParCurbToSide_m = 2023;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2023, this->_internal_ocseczoneparcurbtoside_m(), target);
  }

  // optional float maxDrivenRotationGarage_rad = 2024;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2024, this->_internal_maxdrivenrotationgarage_rad(), target);
  }

  // optional float sideShiftPenaltyForCurbObjects = 2073;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2073, this->_internal_sideshiftpenaltyforcurbobjects(), target);
  }

  // optional float cnnSlotBlowUpLimitNonParSide_m = 2089;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2089, this->_internal_cnnslotblowuplimitnonparside_m(), target);
  }

  // optional float garageParkingSlotDoorAreaLength_m = 2119;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2119, this->_internal_garageparkingslotdoorarealength_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool doCurbOnlyLineCategorization = 2120;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2120, this->_internal_docurbonlylinecategorization(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enableAngularSlotBruteForceDetection = 2126;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2126, this->_internal_enableangularslotbruteforcedetection(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool cnnSlotsEnableCnnSlotPrototypes = 2136;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2136, this->_internal_cnnslotsenablecnnslotprototypes(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional float weightCurbOrientation = 2143;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2143, this->_internal_weightcurborientation(), target);
  }

  // optional float ocPrimZonePerpSideToRoad_m = 2160;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2160, this->_internal_ocprimzoneperpsidetoroad_m(), target);
  }

  // optional float ncSplitMaxSkippableNCAreaPerStep_m2 = 2186;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2186, this->_internal_ncsplitmaxskippablencareaperstep_m2(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool performOptimization = 2187;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2187, this->_internal_performoptimization(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional float minDistanceToObject_m = 2195;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2195, this->_internal_mindistancetoobject_m(), target);
  }

  // optional float ocPerpendicularMaxDistanceXForCurbSideClustering_m = 2200;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2200, this->_internal_ocperpendicularmaxdistancexforcurbsideclustering_m(), target);
  }

  // optional uint32 minHeightConfDeltaStaticObj = 2213;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2213, this->_internal_minheightconfdeltastaticobj(), target);
  }

  // optional bool preapplyRoadsideExtension = 2224;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2224, this->_internal_preapplyroadsideextension(), target);
  }

  // optional float rearMemParkGap_m = 2241;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2241, this->_internal_rearmemparkgap_m(), target);
  }

  // optional float minDistanceNoObject_m = 2244;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2244, this->_internal_mindistancenoobject_m(), target);
  }

  // optional float osdSideRoiXBack_m = 2258;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2258, this->_internal_osdsideroixback_m(), target);
  }

  // optional bool cnnCompareSlotTypeFPSuppression = 2272;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2272, this->_internal_cnncompareslottypefpsuppression(), target);
  }

  // optional float slotScoringMaxParLineLength_m = 2287;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2287, this->_internal_slotscoringmaxparlinelength_m(), target);
  }

  // optional float slotScoringMaxVlOrLineAngleDiff_rad = 2293;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2293, this->_internal_slotscoringmaxvlorlineanglediff_rad(), target);
  }

  // optional float perpendicularSlotLengthDeltaMin_m = 2314;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2314, this->_internal_perpendicularslotlengthdeltamin_m(), target);
  }

  // optional float dynObjMaxPreviewTime_s = 2363;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2363, this->_internal_dynobjmaxpreviewtime_s(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool allowSlotExtensionOverLinesToMinOpening = 2382;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2382, this->_internal_allowslotextensionoverlinestominopening(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional float minAppliedRoadsideExtension_m = 2410;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2410, this->_internal_minappliedroadsideextension_m(), target);
  }

  // optional float slotExpMaxTriangleExpansion_m = 2427;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2427, this->_internal_slotexpmaxtriangleexpansion_m(), target);
  }

  // optional float smallSlotOpeningPenalty = 2479;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2479, this->_internal_smallslotopeningpenalty(), target);
  }

  // optional float perpendicularSlotWidthDeltaModel_m = 2495;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2495, this->_internal_perpendicularslotwidthdeltamodel_m(), target);
  }

  // optional float angularParkingDetectionWindowAbsMax_m = 2498;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2498, this->_internal_angularparkingdetectionwindowabsmax_m(), target);
  }

  // optional float ocSecZoneAngCurbToRoad_m = 2518;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2518, this->_internal_ocseczoneangcurbtoroad_m(), target);
  }

  // optional float ocSecZoneParSideToSlot_m = 2522;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2522, this->_internal_ocseczoneparsidetoslot_m(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional float ocSecZonePerpSideToSlot_m = 2536;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2536, this->_internal_ocseczoneperpsidetoslot_m(), target);
  }

  // optional float parallelSlotLengthDeltaMax_m = 2547;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2547, this->_internal_parallelslotlengthdeltamax_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enableAngularRightOpeningTowardsFront = 2559;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2559, this->_internal_enableangularrightopeningtowardsfront(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional float ocPrimZoneParSideOpening_m = 2563;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2563, this->_internal_ocprimzoneparsideopening_m(), target);
  }

  // optional bool enableSecondSideDelimiterOnlyScenario = 2565;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2565, this->_internal_enablesecondsidedelimiteronlyscenario(), target);
  }

  // optional float parallelLineAllowedDeviation_rad = 2580;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2580, this->_internal_parallellinealloweddeviation_rad(), target);
  }

  // optional float ocParallelMaxDistanceXForCurbSideClustering_m = 2605;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2605, this->_internal_ocparallelmaxdistancexforcurbsideclustering_m(), target);
  }

  // optional float safetyMarginDynObjEnlargingCar_m = 2657;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2657, this->_internal_safetymargindynobjenlargingcar_m(), target);
  }

  // optional float ocPerpMaxDistanceCurb_m = 2664;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2664, this->_internal_ocperpmaxdistancecurb_m(), target);
  }

  // optional float vlMaxTotalAngle_rad = 2683;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2683, this->_internal_vlmaxtotalangle_rad(), target);
  }

  // optional float ocSecZoneAngCurbToSide_m = 2694;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2694, this->_internal_ocseczoneangcurbtoside_m(), target);
  }

  // optional float shrinkPenaltyForClassifyingObjectAsDynamic = 2700;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2700, this->_internal_shrinkpenaltyforclassifyingobjectasdynamic(), target);
  }

  // optional float slotEdgePullSearchDistFront_m = 2717;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2717, this->_internal_slotedgepullsearchdistfront_m(), target);
  }

  // optional float lcCurbOnlyAngleDiff_rad = 2739;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2739, this->_internal_lccurbonlyanglediff_rad(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool highSideDelimiterRequired = 2753;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2753, this->_internal_highsidedelimiterrequired(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional float delZoneRoadFactorPar_nu = 2770;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2770, this->_internal_delzoneroadfactorpar_nu(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool allowShrinkOnLinesDespiteSideObjects = 2840;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2840, this->_internal_allowshrinkonlinesdespitesideobjects(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool ncSplitOn = 2843;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2843, this->_internal_ncspliton(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional float lcLineDistCostFactor = 2853;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2853, this->_internal_lclinedistcostfactor(), target);
  }

  // optional float maxRoadsideExtensionAngular_m = 2854;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2854, this->_internal_maxroadsideextensionangular_m(), target);
  }

  // optional float vlMinLengthStartDirectionSq_m = 2860;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2860, this->_internal_vlminlengthstartdirectionsq_m(), target);
  }

  // optional float maxRoadsideExtensionParallel_m = 2888;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2888, this->_internal_maxroadsideextensionparallel_m(), target);
  }

  // optional float wingAlignmentWeight_mpr = 2889;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2889, this->_internal_wingalignmentweight_mpr(), target);
  }

  // optional float garageParkingSlotLengthDeltaMin_m = 2905;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2905, this->_internal_garageparkingslotlengthdeltamin_m(), target);
  }

  // optional float slotIdentMaxYawDevParallel_rad = 2911;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2911, this->_internal_slotidentmaxyawdevparallel_rad(), target);
  }

  // optional bool treatUnknownCurbsideObjectsAsBodyTraversable = 2916;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2916, this->_internal_treatunknowncurbsideobjectsasbodytraversable(), target);
  }

  // optional float leftRightMemParkGapY_m = 2918;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2918, this->_internal_leftrightmemparkgapy_m(), target);
  }

  // optional float minCurbObjLengthForOneSideDel_m = 2932;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2932, this->_internal_mincurbobjlengthforonesidedel_m(), target);
  }

  // optional float ocSecZonePerpCurbToCurb_m = 2958;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2958, this->_internal_ocseczoneperpcurbtocurb_m(), target);
  }

  // optional float ocSecZoneParCurbToCurb_m = 3004;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3004, this->_internal_ocseczoneparcurbtocurb_m(), target);
  }

  // optional bool requiredCurbObjectForOneSideDelimitingSlots = 3005;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3005, this->_internal_requiredcurbobjectforonesidedelimitingslots(), target);
  }

  // optional bool preferSecondSideOSD = 3007;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3007, this->_internal_prefersecondsideosd(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float ocPrimZoneParSideToRoad_m = 3020;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3020, this->_internal_ocprimzoneparsidetoroad_m(), target);
  }

  // optional float safetyMarginDynObjEnlargingPed_m = 3035;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3035, this->_internal_safetymargindynobjenlargingped_m(), target);
  }

  // optional float barrierDelimiterWidth_m = 3039;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3039, this->_internal_barrierdelimiterwidth_m(), target);
  }

  // optional float parallelSlotDepthDeltaMinPark_m = 3046;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3046, this->_internal_parallelslotdepthdeltaminpark_m(), target);
  }

  // optional float sensingRange_m = 3054;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3054, this->_internal_sensingrange_m(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional bool enableFirstSideDelimiterOnlyScenario = 3069;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3069, this->_internal_enablefirstsidedelimiteronlyscenario(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float frontRoiXEnd_m = 3084;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3084, this->_internal_frontroixend_m(), target);
  }

  // optional uint32 slotExpFrameCounterStable_nu = 3095;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3095, this->_internal_slotexpframecounterstable_nu(), target);
  }

  // optional float slotExpMinTriangleExpansion_rad = 3099;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3099, this->_internal_slotexpmintriangleexpansion_rad(), target);
  }

  // optional float sideAllowedOverlap_m = 3100;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3100, this->_internal_sideallowedoverlap_m(), target);
  }

  // optional float delZoneLeftRightMaxRelToVehWidthNonPar_nu = 3109;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3109, this->_internal_delzoneleftrightmaxreltovehwidthnonpar_nu(), target);
  }

  // optional float angularCurbRoadAreaFactor = 3119;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3119, this->_internal_angularcurbroadareafactor(), target);
  }

  // optional float cnnOrientationErrorCostFunctionFactor = 3120;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3120, this->_internal_cnnorientationerrorcostfunctionfactor(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional bool isStaticObjectInputCCWOriented = 3131;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3131, this->_internal_isstaticobjectinputccworiented(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool enableCnnWheelStoppers = 3141;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3141, this->_internal_enablecnnwheelstoppers(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool enableLeftSideScanning = 3159;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3159, this->_internal_enableleftsidescanning(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float perpendicularSlotOpeningDeltaMaxPark_m = 3166;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3166, this->_internal_perpendicularslotopeningdeltamaxpark_m(), target);
  }

  // optional float frontMemParkGap_m = 3217;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3217, this->_internal_frontmemparkgap_m(), target);
  }

  // optional float ocSecZoneParSideToCurb_m = 3226;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3226, this->_internal_ocseczoneparsidetocurb_m(), target);
  }

  // optional float lineOpeningDelimiterMaxRoadProtrusion_m = 3234;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3234, this->_internal_lineopeningdelimitermaxroadprotrusion_m(), target);
  }

  // optional float ocSecZonePerpSideToCurb_m = 3240;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3240, this->_internal_ocseczoneperpsidetocurb_m(), target);
  }

  // optional float increaseOverhangLowObject_m = 3268;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3268, this->_internal_increaseoverhanglowobject_m(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional bool slotExpansionOnLines = 3304;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3304, this->_internal_slotexpansiononlines(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool enableSlotShrinkingBelowUsualSizeDuringTrack = 3315;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3315, this->_internal_enableslotshrinkingbelowusualsizeduringtrack(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float vlMinVirtualLineLengthCurb_m = 3337;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3337, this->_internal_vlminvirtuallinelengthcurb_m(), target);
  }

  // optional float perpendicularSlotLengthDeltaMax_m = 3338;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3338, this->_internal_perpendicularslotlengthdeltamax_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool wsStatObjIgnoreEvaluation = 3340;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3340, this->_internal_wsstatobjignoreevaluation(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float ocPrimZonePerpSideOpening_m = 3357;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3357, this->_internal_ocprimzoneperpsideopening_m(), target);
  }

  // optional float perpendicularSlotDepthDeltaMinPark_m = 3373;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3373, this->_internal_perpendicularslotdepthdeltaminpark_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool doLineCategorization = 3392;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3392, this->_internal_dolinecategorization(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float ocPrimZoneAngCurbIntoSlot_m = 3433;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3433, this->_internal_ocprimzoneangcurbintoslot_m(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional bool slotExpansion = 3436;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3436, this->_internal_slotexpansion(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float lcCurbOnlySpatialDiff_m = 3440;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3440, this->_internal_lccurbonlyspatialdiff_m(), target);
  }

  // optional float angularSlotMaxDepthExtension_m = 3468;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3468, this->_internal_angularslotmaxdepthextension_m(), target);
  }

  // optional float inflationSafetyDistanceParkOut_m = 3473;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3473, this->_internal_inflationsafetydistanceparkout_m(), target);
  }

  // optional float ocSecZoneAngSideToSide_m = 3488;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3488, this->_internal_ocseczoneangsidetoside_m(), target);
  }

  // optional float parallelSlotLineTooLongPenalty = 3503;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3503, this->_internal_parallelslotlinetoolongpenalty(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool enableSlotOrientationOnWingVLs = 3521;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3521, this->_internal_enableslotorientationonwingvls(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float angularParkingDetectionWindowAbsMin_m = 3522;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3522, this->_internal_angularparkingdetectionwindowabsmin_m(), target);
  }

  // optional float parallelSlotLengthDeltaMin_m = 3571;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3571, this->_internal_parallelslotlengthdeltamin_m(), target);
  }

  // optional float shrinkPenaltyForShiftBelowMin = 3594;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3594, this->_internal_shrinkpenaltyforshiftbelowmin(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool lcNoCurbLineOptimizationIfNoCurbLc = 3610;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3610, this->_internal_lcnocurblineoptimizationifnocurblc(), target);
  }

  cached_has_bits = _has_bits_[7];
  // optional float sideAlignmentROIWidth_m = 3637;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3637, this->_internal_sidealignmentroiwidth_m(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool enableSlotLengthAdaptionToAdjacentObjects = 3682;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3682, this->_internal_enableslotlengthadaptiontoadjacentobjects(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional float parallelSlotOpeningDeltaMinPark_m = 3760;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3760, this->_internal_parallelslotopeningdeltaminpark_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool cnnSlotsAllowSiSlotOverride = 3762;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3762, this->_internal_cnnslotsallowsislotoverride(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional float ocPrimZoneAngSideOpening_m = 3788;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3788, this->_internal_ocprimzoneangsideopening_m(), target);
  }

  // optional float osdSideRoiXFront_m = 3796;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3796, this->_internal_osdsideroixfront_m(), target);
  }

  // optional float ocSecZoneAngSideToRoad_m = 3824;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3824, this->_internal_ocseczoneangsidetoroad_m(), target);
  }

  // optional float cnnSlotRoadAlignmentLimitPar_m = 3835;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3835, this->_internal_cnnslotroadalignmentlimitpar_m(), target);
  }

  // optional float preferShiftToTopRoiYBorderOffset_m = 3844;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3844, this->_internal_prefershifttotoproiyborderoffset_m(), target);
  }

  // optional float delZoneRoadMaxRelToVehLengthNonPar_nu = 3847;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3847, this->_internal_delzoneroadmaxreltovehlengthnonpar_nu(), target);
  }

  // optional float vlMaxAngleToParkingBoxEdge_rad = 3851;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3851, this->_internal_vlmaxangletoparkingboxedge_rad(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional bool cnnSlotsEnableSiSlotDetectionVerification = 3857;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3857, this->_internal_cnnslotsenablesislotdetectionverification(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional float insideObjectMaxProjectionLength_m = 3865;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3865, this->_internal_insideobjectmaxprojectionlength_m(), target);
  }

  // optional float parallelSlotWidthDeltaModel_m = 3876;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3876, this->_internal_parallelslotwidthdeltamodel_m(), target);
  }

  // optional float lcLineLengthCostFactor = 3908;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3908, this->_internal_lclinelengthcostfactor(), target);
  }

  cached_has_bits = _has_bits_[6];
  // optional bool enableSlotIdentFromTrajectory = 3922;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3922, this->_internal_enableslotidentfromtrajectory(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional float garageParkingSlotLengthDeltaMax_m = 3929;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3929, this->_internal_garageparkingslotlengthdeltamax_m(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool enableAngularRightOpeningTowardsBack = 3952;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3952, this->_internal_enableangularrightopeningtowardsback(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional float memParkExtendSlot_m = 3954;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3954, this->_internal_memparkextendslot_m(), target);
  }

  // optional float vlMaxNextEdgeAngle_rad = 3965;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3965, this->_internal_vlmaxnextedgeangle_rad(), target);
  }

  // optional float cnnSlotBlowUpLimitParCurb_m = 3972;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3972, this->_internal_cnnslotblowuplimitparcurb_m(), target);
  }

  // optional float sideRoiXFront_m = 3982;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3982, this->_internal_sideroixfront_m(), target);
  }

  // optional float lcAngleCostFactor = 3988;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3988, this->_internal_lcanglecostfactor(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool enableSlotPoseDetectionOnVirtualLines = 3996;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3996, this->_internal_enableslotposedetectiononvirtuallines(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool vlUseRoadFacingForNonParallelSlots = 4010;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4010, this->_internal_vluseroadfacingfornonparallelslots(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional float typicalOrientationOfAngledSlot_rad = 4023;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4023, this->_internal_typicalorientationofangledslot_rad(), target);
  }

  // optional float inflationSafetyDistanceDefault_m = 4034;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4034, this->_internal_inflationsafetydistancedefault_m(), target);
  }

  // optional float cnnSlotsMinInvalidationOverlap_m = 4038;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4038, this->_internal_cnnslotsmininvalidationoverlap_m(), target);
  }

  // optional float sideAndCurbDelimiterRoiExtension_m = 4044;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4044, this->_internal_sideandcurbdelimiterroiextension_m(), target);
  }

  // optional bool vlUseMaxAngleToParkingBoxEdge = 522962;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(522962, this->_internal_vlusemaxangletoparkingboxedge(), target);
  }

  // optional float ocSecZoneParSideToRoad_m = 1493409;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1493409, this->_internal_ocseczoneparsidetoroad_m(), target);
  }

  // optional float maxDrivenRotationParallel_rad = 1962442;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1962442, this->_internal_maxdrivenrotationparallel_rad(), target);
  }

  // optional float developerGenericFloat4 = 4286347;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4286347, this->_internal_developergenericfloat4(), target);
  }

  cached_has_bits = _has_bits_[9];
  // optional float ocSecZoneAngSideToCurb_m = 8701776;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8701776, this->_internal_ocseczoneangsidetocurb_m(), target);
  }

  // optional float slotExpMaxAngleDiff_rad = 11519704;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11519704, this->_internal_slotexpmaxanglediff_rad(), target);
  }

  // optional float maxMemParkRotAdj_rad = 12895248;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12895248, this->_internal_maxmemparkrotadj_rad(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional bool useAreaCriteria = 14368221;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14368221, this->_internal_useareacriteria(), target);
  }

  cached_has_bits = _has_bits_[9];
  // optional float curbObjectEvaluationRoiDepthDelta_m = 15294138;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15294138, this->_internal_curbobjectevaluationroidepthdelta_m(), target);
  }

  cached_has_bits = _has_bits_[8];
  // optional bool delZonesUseHighComplexityGetScore = 16563677;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16563677, this->_internal_delzonesusehighcomplexitygetscore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.si_params.SiParams)
  return target;
}

size_t SiParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.si_params.SiParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float slotPositioningRoiLeftRightDelta_m = 28;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float developerGenericFloat5 = 61;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional uint32 dynObjMinExistenceProb_perc = 79;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dynobjminexistenceprob_perc());
    }

    // optional float minBarrierPointOverhang_m = 90;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float maxMemParkLinearAdj_m = 91;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float sideRoiYStart_m = 93;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float slotReplacementDeltaOutlierDistSqr_m2 = 114;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float developerGenericFloat0 = 152;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float sideAlignmentWeight_mpr = 153;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float cnnSlotOdSlotEnlargement_m = 156;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float maxDrivenRotationPerpendicular_rad = 161;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float developerGenericFloat1 = 185;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZoneParSideToSide_m = 193;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float perpendicularSlotLengthDeltaModel_m = 215;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float developerGenericFloat2 = 218;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float sideRoiYEnd_m = 235;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float delZoneLeftRightMaxRelToVehLengthPar_nu = 236;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZonePerpSideToSide_m = 243;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float developerGenericFloat3 = 251;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float ocPrimZoneParCurbIntoSlot_m = 340;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float vlMinVirtualLineLengthParSide_m = 372;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float maxAllowedSlotOpeningOverlap_m = 468;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float delZoneCurbFactorPar_nu = 469;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float slotDepthHorizontalLineAlignment_m = 483;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float parallelSlotLengthDeltaModel_m = 484;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float vlMinVirtualLineLengthRoad_m = 514;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float maxDrivenRotationAngled_rad = 530;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float penaltyForShrinkToMinDim = 551;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float minSlotOpeningOffsetSideBlowUp_m = 552;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float garageParkingSlotLengthDeltaModel_m = 558;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 cnnSlotsMinScenarioConfidenceTheshold = 566;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cnnslotsminscenarioconfidencetheshold());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 integrationMessagesComponent_nu = 610;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_integrationmessagescomponent_nu());
    }

    // optional float leftRightMemParkOffsetX_m = 629;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float shrinkSlotForNumericalInaccuracy_m = 672;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float vlInsideLargerThanRoadFactor = 718;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional uint32 integrationMessagesLevel_nu = 757;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_integrationmessageslevel_nu());
    }

    // optional float minCoveragePerSideNonPar_m = 779;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float sideRoiXBack_m = 784;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float perpendicularSlotWidthDeltaMax_m = 816;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float slotScoringMinParWingLength_m = 846;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float parallelSlotWidthDeltaMin_m = 847;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float cnnSlotRoadAlignmentLimitNonPar_m = 849;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float parallelSlotDepthDeltaMaxPark_m = 866;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float minimumObstacleFittedLineLength_m = 888;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float relevantObjectMinBoxSide_m = 897;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float maxAllowedSlotExtensionOverLinesToMinOpening_m = 905;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float allowedWsPosOutsideSlot_m = 913;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float collFunctionRoiLengthDelta_m = 919;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZonePerpSideToRoad_m = 931;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float garageParkingSlotWidthDeltaMax_m = 948;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float collFunctionRoiWidthDelta_m = 974;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float delZoneRoadMinDistNonPar_m = 976;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float cnnSlotBlowUpLimitParSide_m = 991;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float outlierDistSqrParallelSlot_m2 = 995;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float minRequiredDelimiterProjectionRatio_nu = 1046;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float outlierDistSqrNonParallelSlot_m2 = 1066;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float coveredIntervalsRoiWidth_m = 1124;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float cnnSlotBlowUpLimitNonParCurb_m = 1138;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float delZoneLeftRightFactorNonPar_nu = 1139;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float ocAngMaxDistanceCurb_m = 1147;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZonePerpCurbToRoad_m = 1157;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZoneParCurbToRoad_m = 1207;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZoneAngSideToSlot_m = 1211;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float delZoneCurbMaxRelToVehWidthPar_nu = 1221;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float ocPrimZoneCurbBelowSlot_m = 1229;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float perpendicularSlotOpeningDeltaMinPark_m = 1242;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float slotExpansionSideRoiWidth_m = 1245;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float allowedDistToExistingWsWithoutWlSuppression_m = 1249;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float lineOpeningDelimiterToCurbProjectionFactor = 1257;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float cnnSlotsMinValidationOverlap_m = 1287;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float delZoneLeftRightFactorPar_nu = 1290;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float vlMinVirtualLineLengthPerpSide_m = 1326;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float shrinkPenaltyForExceedingGivenLimits = 1354;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional bool useCovMatrixInflation = 957;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool ncSplitUseMostXStartIdx = 622;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool ncSplitOn = 2843;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional bool doObjectClustering = 1052;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional float outsideInAllowedOverlap_m = 1371;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float frontRoiXStart_m = 1415;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enableSlotPoseDetectionOnVirtualLines = 3996;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional bool enableParallelSlots = 108;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool enablePerpendicularSlots = 1404;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool enableGarageParkingSlots = 183;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional float vlInsideLargeEnough_m = 1425;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float delZoneCurbFactorNonPar_nu = 1442;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float perpendicularSlotDepthDeltaMaxPark_m = 1449;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float insideZoneDist_m = 1458;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float delZoneCurbMaxRelToVehLengthNonPar_nu = 1463;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float slotPositioningRoiRoadDelta_m = 1493;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float delZoneRoadMaxRelToVehWidthPar_nu = 1533;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float minBarrierDelimiterLength_m = 1558;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional bool enableAngularRightOpeningTowardsFront = 2559;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 1;
    }

    // optional bool enableAngularLeftOpeningTowardsBack = 1303;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool enableAngularLeftOpeningTowardsFront = 290;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool enableAngularSlotBruteForceDetection = 2126;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional float horizontalMovementLimitOfASlotSlotCoords_m = 1573;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float ocPerpMaxDistanceSide_m = 1587;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float parallelSlotOpeningDeltaMaxPark_m = 1588;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float allowedDistToExistingWsWithWlSuppression_m = 1590;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float thDelimiterDist_m = 1609;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional bool preferWideSlots = 86;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool offerOverlappingSlots = 862;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool performOptimization = 2187;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool enableSlotShrinkingBelowUsualSizeDuringTrack = 3315;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 1;
    }

    // optional float delZoneRoadMinDistPar_m = 1695;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float vlMaxAllowedRoadInsideAngleDiff_rad = 1704;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float maxRoadsideExtensionPerpendicular_m = 1711;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float lineOrientationRoiDelta_m = 1754;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional bool allowNakedSlots = 953;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool requireAtLeastOneDelimitingObjectForNakedSlot = 1927;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool enableAngularParking = 186;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enableAngularRightOpeningTowardsBack = 3952;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 1;
    }

    // optional float ocSecZoneAngCurbToCurb_m = 1757;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float prohibitionZoneRelativeLength = 1829;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float slotPenetrationDepth_m = 1832;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float perpendicularSlotWidthDeltaMin_m = 1840;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float parallelSlotWidthDeltaMax_m = 1871;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float frontRoiYSide_m = 1875;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional bool enableInsideObjectPenetrationDepth = 1300;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool vlProjectOntoBoxIfFailed = 1532;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool vlDoRoadInsideOptimization = 739;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool vlUseRoadFacingForNonParallelSlots = 4010;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional float sideAndCurbDelimiterRoiBottomShift_m = 1910;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float ocPrimZonePerpCurbIntoSlot_m = 1911;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float minDistGapCnnSlotVsTrackedSlot_m = 1930;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional bool allowSlotExtensionOverLinesToMinOpening = 2382;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool allowShrinkOnLinesDespiteSideObjects = 2840;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool preferShiftToTopOnCurbObjects = 2011;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool enableSlotFallback = 494;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional float delZoneRoadFactorNonPar_nu = 1967;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float garageParkingSlotWidthDeltaMin_m = 1972;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float slotIdentMaxDevFromStraightLine_m = 1973;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float dynObjMaxVel_mps = 1975;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float weightLineOrientation = 1980;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float cnnSlotsValidationMaxOpeningAngleDiff_rad = 1982;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float slotScoringMinNonParSideLength_m = 1986;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZonePerpCurbToSide_m = 2005;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float maxAllowedVehCurbOverlapForPerp_m = 2010;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float ocSecZoneParCurbToSide_m = 2023;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float maxDrivenRotationGarage_rad = 2024;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float sideShiftPenaltyForCurbObjects = 2073;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float cnnSlotBlowUpLimitNonParSide_m = 2089;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional bool enlargeDynObj = 1630;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool doExactShiftVectorToEgoCollisionCheck = 1631;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool enableSlotLengthAdaptionToAdjacentObjects = 3682;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 1;
    }

    // optional bool enableSlotLengthAdaptionToAdjacentLines = 1476;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional float garageParkingSlotDoorAreaLength_m = 2119;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float weightCurbOrientation = 2143;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float ocPrimZonePerpSideToRoad_m = 2160;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional bool lcNoCurbLineOptimizationIfNoCurbLc = 3610;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool enableLeftSideScanning = 3159;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool enableRightSideScanning = 507;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool enableFrontScanning = 1368;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional float ncSplitMaxSkippableNCAreaPerStep_m2 = 2186;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional bool invalidateOverlappingEstablishedSlots = 490;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool enableSlotOrientationOnSideVLs = 1985;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool enableSlotOrientationOnWingVLs = 3521;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 1;
    }

    // optional bool highSideDelimiterRequired = 2753;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    // optional float minDistanceToObject_m = 2195;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float ocPerpendicularMaxDistanceXForCurbSideClustering_m = 2200;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional bool enableUnspecifiedShift = 1788;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool doLineCategorization = 3392;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool doCurbOnlyLineCategorization = 2120;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 1;
    }

    // optional bool ignoreLinesForSandwichSlots = 1548;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional uint32 minHeightConfDeltaStaticObj = 2213;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minheightconfdeltastaticobj());
    }

    // optional float rearMemParkGap_m = 2241;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float minDistanceNoObject_m = 2244;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float osdSideRoiXBack_m = 2258;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional bool allowNakedCnnSlots = 835;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool cnnSlotsAllowSiSlotOverride = 3762;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool preapplyRoadsideExtension = 2224;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional float slotScoringMaxParLineLength_m = 2287;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float slotScoringMaxVlOrLineAngleDiff_rad = 2293;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float perpendicularSlotLengthDeltaMin_m = 2314;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float dynObjMaxPreviewTime_s = 2363;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional bool allowNarrowSlotsScan = 1727;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool enableCnnWheelStoppers = 3141;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool enableCnnWheelStopperStatObjVerification = 1382;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool wsStatObjIgnoreEvaluation = 3340;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 1;
    }

    // optional float minAppliedRoadsideExtension_m = 2410;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float slotExpMaxTriangleExpansion_m = 2427;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional bool cnnSlotsEnableSiSlotDetectionVerification = 3857;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool cnnCompareSlotTypeFPSuppression = 2272;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool cnnSlotsPerpendicularValidatesAngular = 1447;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool cnnSlotsEnableCnnSlotPrototypes = 2136;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional float smallSlotOpeningPenalty = 2479;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float perpendicularSlotWidthDeltaModel_m = 2495;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float angularParkingDetectionWindowAbsMax_m = 2498;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float ocSecZoneAngCurbToRoad_m = 2518;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float ocSecZoneParSideToSlot_m = 2522;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[6];
  if (cached_has_bits & 0x000000ffu) {
    // optional float ocSecZonePerpSideToSlot_m = 2536;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float parallelSlotLengthDeltaMax_m = 2547;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float ocPrimZoneParSideOpening_m = 2563;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float parallelLineAllowedDeviation_rad = 2580;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float ocParallelMaxDistanceXForCurbSideClustering_m = 2605;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float safetyMarginDynObjEnlargingCar_m = 2657;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float ocPerpMaxDistanceCurb_m = 2664;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float vlMaxTotalAngle_rad = 2683;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float ocSecZoneAngCurbToSide_m = 2694;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional bool isStaticObjectInputCCWOriented = 3131;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 1;
    }

    // optional bool useLineMarkings = 814;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool treatUnknownCurbsideObjectsAsBodyTraversable = 2916;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool enableSlotIdentFromTrajectory = 3922;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 1;
    }

    // optional float shrinkPenaltyForClassifyingObjectAsDynamic = 2700;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float slotEdgePullSearchDistFront_m = 2717;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float lcCurbOnlyAngleDiff_rad = 2739;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float delZoneRoadFactorPar_nu = 2770;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float lcLineDistCostFactor = 2853;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float maxRoadsideExtensionAngular_m = 2854;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float vlMinLengthStartDirectionSq_m = 2860;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float maxRoadsideExtensionParallel_m = 2888;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float wingAlignmentWeight_mpr = 2889;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float garageParkingSlotLengthDeltaMin_m = 2905;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float slotIdentMaxYawDevParallel_rad = 2911;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool enableSecondSideDelimiterOnlyScenario = 2565;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 1;
    }

    // optional bool enableFirstSideDelimiterOnlyScenario = 3069;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 1;
    }

    // optional bool preferSecondSideOSD = 3007;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 1;
    }

    // optional bool requiredCurbObjectForOneSideDelimitingSlots = 3005;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 1;
    }

    // optional float leftRightMemParkGapY_m = 2918;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float minCurbObjLengthForOneSideDel_m = 2932;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float ocSecZonePerpCurbToCurb_m = 2958;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float ocSecZoneParCurbToCurb_m = 3004;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[7];
  if (cached_has_bits & 0x000000ffu) {
    // optional float ocPrimZoneParSideToRoad_m = 3020;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float safetyMarginDynObjEnlargingPed_m = 3035;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float barrierDelimiterWidth_m = 3039;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float parallelSlotDepthDeltaMinPark_m = 3046;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float sensingRange_m = 3054;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float frontRoiXEnd_m = 3084;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional uint32 slotExpFrameCounterStable_nu = 3095;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slotexpframecounterstable_nu());
    }

    // optional float slotExpMinTriangleExpansion_rad = 3099;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float sideAllowedOverlap_m = 3100;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float delZoneLeftRightMaxRelToVehWidthNonPar_nu = 3109;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float angularCurbRoadAreaFactor = 3119;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float cnnOrientationErrorCostFunctionFactor = 3120;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float perpendicularSlotOpeningDeltaMaxPark_m = 3166;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float frontMemParkGap_m = 3217;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float ocSecZoneParSideToCurb_m = 3226;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float lineOpeningDelimiterMaxRoadProtrusion_m = 3234;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float ocSecZonePerpSideToCurb_m = 3240;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float increaseOverhangLowObject_m = 3268;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float vlMinVirtualLineLengthCurb_m = 3337;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float perpendicularSlotLengthDeltaMax_m = 3338;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float ocPrimZonePerpSideOpening_m = 3357;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float perpendicularSlotDepthDeltaMinPark_m = 3373;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float ocPrimZoneAngCurbIntoSlot_m = 3433;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float lcCurbOnlySpatialDiff_m = 3440;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float angularSlotMaxDepthExtension_m = 3468;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float inflationSafetyDistanceParkOut_m = 3473;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float ocSecZoneAngSideToSide_m = 3488;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float parallelSlotLineTooLongPenalty = 3503;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float angularParkingDetectionWindowAbsMin_m = 3522;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float parallelSlotLengthDeltaMin_m = 3571;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float shrinkPenaltyForShiftBelowMin = 3594;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float sideAlignmentROIWidth_m = 3637;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[8];
  if (cached_has_bits & 0x000000ffu) {
    // optional float parallelSlotOpeningDeltaMinPark_m = 3760;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float ocPrimZoneAngSideOpening_m = 3788;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float osdSideRoiXFront_m = 3796;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float ocSecZoneAngSideToRoad_m = 3824;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float cnnSlotRoadAlignmentLimitPar_m = 3835;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float preferShiftToTopRoiYBorderOffset_m = 3844;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float delZoneRoadMaxRelToVehLengthNonPar_nu = 3847;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float vlMaxAngleToParkingBoxEdge_rad = 3851;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float insideObjectMaxProjectionLength_m = 3865;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float parallelSlotWidthDeltaModel_m = 3876;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float lcLineLengthCostFactor = 3908;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float garageParkingSlotLengthDeltaMax_m = 3929;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float memParkExtendSlot_m = 3954;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float vlMaxNextEdgeAngle_rad = 3965;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float cnnSlotBlowUpLimitParCurb_m = 3972;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float sideRoiXFront_m = 3982;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float lcAngleCostFactor = 3988;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float typicalOrientationOfAngledSlot_rad = 4023;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float inflationSafetyDistanceDefault_m = 4034;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float cnnSlotsMinInvalidationOverlap_m = 4038;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float sideAndCurbDelimiterRoiExtension_m = 4044;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional bool vlUseMaxAngleToParkingBoxEdge = 522962;
    if (cached_has_bits & 0x00200000u) {
      total_size += 4 + 1;
    }

    // optional bool slotExpansion = 3436;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 1;
    }

    // optional bool slotExpansionOnLines = 3304;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool doObjectInflation = 477;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional float ocSecZoneParSideToRoad_m = 1493409;
    if (cached_has_bits & 0x02000000u) {
      total_size += 4 + 4;
    }

    // optional float maxDrivenRotationParallel_rad = 1962442;
    if (cached_has_bits & 0x04000000u) {
      total_size += 4 + 4;
    }

    // optional float developerGenericFloat4 = 4286347;
    if (cached_has_bits & 0x08000000u) {
      total_size += 4 + 4;
    }

    // optional bool useAreaCriteria = 14368221;
    if (cached_has_bits & 0x10000000u) {
      total_size += 4 + 1;
    }

    // optional bool useLinearOverlapDropOff = 1707;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool teCalculateRoadSideExpansion = 19;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool delZonesUseHighComplexityGetScore = 16563677;
    if (cached_has_bits & 0x80000000u) {
      total_size += 4 + 1;
    }

  }
  cached_has_bits = _has_bits_[9];
  if (cached_has_bits & 0x0000000fu) {
    // optional float ocSecZoneAngSideToCurb_m = 8701776;
    if (cached_has_bits & 0x00000001u) {
      total_size += 4 + 4;
    }

    // optional float slotExpMaxAngleDiff_rad = 11519704;
    if (cached_has_bits & 0x00000002u) {
      total_size += 4 + 4;
    }

    // optional float maxMemParkRotAdj_rad = 12895248;
    if (cached_has_bits & 0x00000004u) {
      total_size += 4 + 4;
    }

    // optional float curbObjectEvaluationRoiDepthDelta_m = 15294138;
    if (cached_has_bits & 0x00000008u) {
      total_size += 4 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.si_params.SiParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SiParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.si_params.SiParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.si_params.SiParams)
    MergeFrom(*source);
  }
}

void SiParams::MergeFrom(const SiParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.si_params.SiParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      slotpositioningroileftrightdelta_m_ = from.slotpositioningroileftrightdelta_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      developergenericfloat5_ = from.developergenericfloat5_;
    }
    if (cached_has_bits & 0x00000008u) {
      dynobjminexistenceprob_perc_ = from.dynobjminexistenceprob_perc_;
    }
    if (cached_has_bits & 0x00000010u) {
      minbarrierpointoverhang_m_ = from.minbarrierpointoverhang_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      maxmemparklinearadj_m_ = from.maxmemparklinearadj_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      sideroiystart_m_ = from.sideroiystart_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      slotreplacementdeltaoutlierdistsqr_m2_ = from.slotreplacementdeltaoutlierdistsqr_m2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      developergenericfloat0_ = from.developergenericfloat0_;
    }
    if (cached_has_bits & 0x00000200u) {
      sidealignmentweight_mpr_ = from.sidealignmentweight_mpr_;
    }
    if (cached_has_bits & 0x00000400u) {
      cnnslotodslotenlargement_m_ = from.cnnslotodslotenlargement_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxdrivenrotationperpendicular_rad_ = from.maxdrivenrotationperpendicular_rad_;
    }
    if (cached_has_bits & 0x00001000u) {
      developergenericfloat1_ = from.developergenericfloat1_;
    }
    if (cached_has_bits & 0x00002000u) {
      ocseczoneparsidetoside_m_ = from.ocseczoneparsidetoside_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      perpendicularslotlengthdeltamodel_m_ = from.perpendicularslotlengthdeltamodel_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      developergenericfloat2_ = from.developergenericfloat2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      sideroiyend_m_ = from.sideroiyend_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      delzoneleftrightmaxreltovehlengthpar_nu_ = from.delzoneleftrightmaxreltovehlengthpar_nu_;
    }
    if (cached_has_bits & 0x00040000u) {
      ocseczoneperpsidetoside_m_ = from.ocseczoneperpsidetoside_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      developergenericfloat3_ = from.developergenericfloat3_;
    }
    if (cached_has_bits & 0x00100000u) {
      ocprimzoneparcurbintoslot_m_ = from.ocprimzoneparcurbintoslot_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      vlminvirtuallinelengthparside_m_ = from.vlminvirtuallinelengthparside_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      maxallowedslotopeningoverlap_m_ = from.maxallowedslotopeningoverlap_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      delzonecurbfactorpar_nu_ = from.delzonecurbfactorpar_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      slotdepthhorizontallinealignment_m_ = from.slotdepthhorizontallinealignment_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      parallelslotlengthdeltamodel_m_ = from.parallelslotlengthdeltamodel_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      vlminvirtuallinelengthroad_m_ = from.vlminvirtuallinelengthroad_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      maxdrivenrotationangled_rad_ = from.maxdrivenrotationangled_rad_;
    }
    if (cached_has_bits & 0x10000000u) {
      penaltyforshrinktomindim_ = from.penaltyforshrinktomindim_;
    }
    if (cached_has_bits & 0x20000000u) {
      minslotopeningoffsetsideblowup_m_ = from.minslotopeningoffsetsideblowup_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      garageparkingslotlengthdeltamodel_m_ = from.garageparkingslotlengthdeltamodel_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      cnnslotsminscenarioconfidencetheshold_ = from.cnnslotsminscenarioconfidencetheshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      integrationmessagescomponent_nu_ = from.integrationmessagescomponent_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      leftrightmemparkoffsetx_m_ = from.leftrightmemparkoffsetx_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      shrinkslotfornumericalinaccuracy_m_ = from.shrinkslotfornumericalinaccuracy_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      vlinsidelargerthanroadfactor_ = from.vlinsidelargerthanroadfactor_;
    }
    if (cached_has_bits & 0x00000010u) {
      integrationmessageslevel_nu_ = from.integrationmessageslevel_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      mincoveragepersidenonpar_m_ = from.mincoveragepersidenonpar_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      sideroixback_m_ = from.sideroixback_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      perpendicularslotwidthdeltamax_m_ = from.perpendicularslotwidthdeltamax_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      slotscoringminparwinglength_m_ = from.slotscoringminparwinglength_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      parallelslotwidthdeltamin_m_ = from.parallelslotwidthdeltamin_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      cnnslotroadalignmentlimitnonpar_m_ = from.cnnslotroadalignmentlimitnonpar_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      parallelslotdepthdeltamaxpark_m_ = from.parallelslotdepthdeltamaxpark_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      minimumobstaclefittedlinelength_m_ = from.minimumobstaclefittedlinelength_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      relevantobjectminboxside_m_ = from.relevantobjectminboxside_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      maxallowedslotextensionoverlinestominopening_m_ = from.maxallowedslotextensionoverlinestominopening_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      allowedwsposoutsideslot_m_ = from.allowedwsposoutsideslot_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      collfunctionroilengthdelta_m_ = from.collfunctionroilengthdelta_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      ocseczoneperpsidetoroad_m_ = from.ocseczoneperpsidetoroad_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      garageparkingslotwidthdeltamax_m_ = from.garageparkingslotwidthdeltamax_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      collfunctionroiwidthdelta_m_ = from.collfunctionroiwidthdelta_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      delzoneroadmindistnonpar_m_ = from.delzoneroadmindistnonpar_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      cnnslotblowuplimitparside_m_ = from.cnnslotblowuplimitparside_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      outlierdistsqrparallelslot_m2_ = from.outlierdistsqrparallelslot_m2_;
    }
    if (cached_has_bits & 0x00800000u) {
      minrequireddelimiterprojectionratio_nu_ = from.minrequireddelimiterprojectionratio_nu_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      outlierdistsqrnonparallelslot_m2_ = from.outlierdistsqrnonparallelslot_m2_;
    }
    if (cached_has_bits & 0x02000000u) {
      coveredintervalsroiwidth_m_ = from.coveredintervalsroiwidth_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      cnnslotblowuplimitnonparcurb_m_ = from.cnnslotblowuplimitnonparcurb_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      delzoneleftrightfactornonpar_nu_ = from.delzoneleftrightfactornonpar_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      ocangmaxdistancecurb_m_ = from.ocangmaxdistancecurb_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ocseczoneperpcurbtoroad_m_ = from.ocseczoneperpcurbtoroad_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ocseczoneparcurbtoroad_m_ = from.ocseczoneparcurbtoroad_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ocseczoneangsidetoslot_m_ = from.ocseczoneangsidetoslot_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      delzonecurbmaxreltovehwidthpar_nu_ = from.delzonecurbmaxreltovehwidthpar_nu_;
    }
    if (cached_has_bits & 0x00000002u) {
      ocprimzonecurbbelowslot_m_ = from.ocprimzonecurbbelowslot_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      perpendicularslotopeningdeltaminpark_m_ = from.perpendicularslotopeningdeltaminpark_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      slotexpansionsideroiwidth_m_ = from.slotexpansionsideroiwidth_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      alloweddisttoexistingwswithoutwlsuppression_m_ = from.alloweddisttoexistingwswithoutwlsuppression_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      lineopeningdelimitertocurbprojectionfactor_ = from.lineopeningdelimitertocurbprojectionfactor_;
    }
    if (cached_has_bits & 0x00000040u) {
      cnnslotsminvalidationoverlap_m_ = from.cnnslotsminvalidationoverlap_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      delzoneleftrightfactorpar_nu_ = from.delzoneleftrightfactorpar_nu_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      vlminvirtuallinelengthperpside_m_ = from.vlminvirtuallinelengthperpside_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      shrinkpenaltyforexceedinggivenlimits_ = from.shrinkpenaltyforexceedinggivenlimits_;
    }
    if (cached_has_bits & 0x00000400u) {
      usecovmatrixinflation_ = from.usecovmatrixinflation_;
    }
    if (cached_has_bits & 0x00000800u) {
      ncsplitusemostxstartidx_ = from.ncsplitusemostxstartidx_;
    }
    if (cached_has_bits & 0x00001000u) {
      ncspliton_ = from.ncspliton_;
    }
    if (cached_has_bits & 0x00002000u) {
      doobjectclustering_ = from.doobjectclustering_;
    }
    if (cached_has_bits & 0x00004000u) {
      outsideinallowedoverlap_m_ = from.outsideinallowedoverlap_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      frontroixstart_m_ = from.frontroixstart_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enableslotposedetectiononvirtuallines_ = from.enableslotposedetectiononvirtuallines_;
    }
    if (cached_has_bits & 0x00020000u) {
      enableparallelslots_ = from.enableparallelslots_;
    }
    if (cached_has_bits & 0x00040000u) {
      enableperpendicularslots_ = from.enableperpendicularslots_;
    }
    if (cached_has_bits & 0x00080000u) {
      enablegarageparkingslots_ = from.enablegarageparkingslots_;
    }
    if (cached_has_bits & 0x00100000u) {
      vlinsidelargeenough_m_ = from.vlinsidelargeenough_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      delzonecurbfactornonpar_nu_ = from.delzonecurbfactornonpar_nu_;
    }
    if (cached_has_bits & 0x00400000u) {
      perpendicularslotdepthdeltamaxpark_m_ = from.perpendicularslotdepthdeltamaxpark_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      insidezonedist_m_ = from.insidezonedist_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      delzonecurbmaxreltovehlengthnonpar_nu_ = from.delzonecurbmaxreltovehlengthnonpar_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      slotpositioningroiroaddelta_m_ = from.slotpositioningroiroaddelta_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      delzoneroadmaxreltovehwidthpar_nu_ = from.delzoneroadmaxreltovehwidthpar_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      minbarrierdelimiterlength_m_ = from.minbarrierdelimiterlength_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      enableangularrightopeningtowardsfront_ = from.enableangularrightopeningtowardsfront_;
    }
    if (cached_has_bits & 0x20000000u) {
      enableangularleftopeningtowardsback_ = from.enableangularleftopeningtowardsback_;
    }
    if (cached_has_bits & 0x40000000u) {
      enableangularleftopeningtowardsfront_ = from.enableangularleftopeningtowardsfront_;
    }
    if (cached_has_bits & 0x80000000u) {
      enableangularslotbruteforcedetection_ = from.enableangularslotbruteforcedetection_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      horizontalmovementlimitofaslotslotcoords_m_ = from.horizontalmovementlimitofaslotslotcoords_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ocperpmaxdistanceside_m_ = from.ocperpmaxdistanceside_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      parallelslotopeningdeltamaxpark_m_ = from.parallelslotopeningdeltamaxpark_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      alloweddisttoexistingwswithwlsuppression_m_ = from.alloweddisttoexistingwswithwlsuppression_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      thdelimiterdist_m_ = from.thdelimiterdist_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferwideslots_ = from.preferwideslots_;
    }
    if (cached_has_bits & 0x00000040u) {
      offeroverlappingslots_ = from.offeroverlappingslots_;
    }
    if (cached_has_bits & 0x00000080u) {
      performoptimization_ = from.performoptimization_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      enableslotshrinkingbelowusualsizeduringtrack_ = from.enableslotshrinkingbelowusualsizeduringtrack_;
    }
    if (cached_has_bits & 0x00000200u) {
      delzoneroadmindistpar_m_ = from.delzoneroadmindistpar_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      vlmaxallowedroadinsideanglediff_rad_ = from.vlmaxallowedroadinsideanglediff_rad_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxroadsideextensionperpendicular_m_ = from.maxroadsideextensionperpendicular_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      lineorientationroidelta_m_ = from.lineorientationroidelta_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      allownakedslots_ = from.allownakedslots_;
    }
    if (cached_has_bits & 0x00004000u) {
      requireatleastonedelimitingobjectfornakedslot_ = from.requireatleastonedelimitingobjectfornakedslot_;
    }
    if (cached_has_bits & 0x00008000u) {
      enableangularparking_ = from.enableangularparking_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enableangularrightopeningtowardsback_ = from.enableangularrightopeningtowardsback_;
    }
    if (cached_has_bits & 0x00020000u) {
      ocseczoneangcurbtocurb_m_ = from.ocseczoneangcurbtocurb_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      prohibitionzonerelativelength_ = from.prohibitionzonerelativelength_;
    }
    if (cached_has_bits & 0x00080000u) {
      slotpenetrationdepth_m_ = from.slotpenetrationdepth_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      perpendicularslotwidthdeltamin_m_ = from.perpendicularslotwidthdeltamin_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      parallelslotwidthdeltamax_m_ = from.parallelslotwidthdeltamax_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      frontroiyside_m_ = from.frontroiyside_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      enableinsideobjectpenetrationdepth_ = from.enableinsideobjectpenetrationdepth_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      vlprojectontoboxiffailed_ = from.vlprojectontoboxiffailed_;
    }
    if (cached_has_bits & 0x02000000u) {
      vldoroadinsideoptimization_ = from.vldoroadinsideoptimization_;
    }
    if (cached_has_bits & 0x04000000u) {
      vluseroadfacingfornonparallelslots_ = from.vluseroadfacingfornonparallelslots_;
    }
    if (cached_has_bits & 0x08000000u) {
      sideandcurbdelimiterroibottomshift_m_ = from.sideandcurbdelimiterroibottomshift_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      ocprimzoneperpcurbintoslot_m_ = from.ocprimzoneperpcurbintoslot_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      mindistgapcnnslotvstrackedslot_m_ = from.mindistgapcnnslotvstrackedslot_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      allowslotextensionoverlinestominopening_ = from.allowslotextensionoverlinestominopening_;
    }
    if (cached_has_bits & 0x80000000u) {
      allowshrinkonlinesdespitesideobjects_ = from.allowshrinkonlinesdespitesideobjects_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      prefershifttotoponcurbobjects_ = from.prefershifttotoponcurbobjects_;
    }
    if (cached_has_bits & 0x00000002u) {
      enableslotfallback_ = from.enableslotfallback_;
    }
    if (cached_has_bits & 0x00000004u) {
      delzoneroadfactornonpar_nu_ = from.delzoneroadfactornonpar_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      garageparkingslotwidthdeltamin_m_ = from.garageparkingslotwidthdeltamin_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      slotidentmaxdevfromstraightline_m_ = from.slotidentmaxdevfromstraightline_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      dynobjmaxvel_mps_ = from.dynobjmaxvel_mps_;
    }
    if (cached_has_bits & 0x00000040u) {
      weightlineorientation_ = from.weightlineorientation_;
    }
    if (cached_has_bits & 0x00000080u) {
      cnnslotsvalidationmaxopeninganglediff_rad_ = from.cnnslotsvalidationmaxopeninganglediff_rad_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      slotscoringminnonparsidelength_m_ = from.slotscoringminnonparsidelength_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ocseczoneperpcurbtoside_m_ = from.ocseczoneperpcurbtoside_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      maxallowedvehcurboverlapforperp_m_ = from.maxallowedvehcurboverlapforperp_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ocseczoneparcurbtoside_m_ = from.ocseczoneparcurbtoside_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxdrivenrotationgarage_rad_ = from.maxdrivenrotationgarage_rad_;
    }
    if (cached_has_bits & 0x00002000u) {
      sideshiftpenaltyforcurbobjects_ = from.sideshiftpenaltyforcurbobjects_;
    }
    if (cached_has_bits & 0x00004000u) {
      cnnslotblowuplimitnonparside_m_ = from.cnnslotblowuplimitnonparside_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      enlargedynobj_ = from.enlargedynobj_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      doexactshiftvectortoegocollisioncheck_ = from.doexactshiftvectortoegocollisioncheck_;
    }
    if (cached_has_bits & 0x00020000u) {
      enableslotlengthadaptiontoadjacentobjects_ = from.enableslotlengthadaptiontoadjacentobjects_;
    }
    if (cached_has_bits & 0x00040000u) {
      enableslotlengthadaptiontoadjacentlines_ = from.enableslotlengthadaptiontoadjacentlines_;
    }
    if (cached_has_bits & 0x00080000u) {
      garageparkingslotdoorarealength_m_ = from.garageparkingslotdoorarealength_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00200000u) {
      weightcurborientation_ = from.weightcurborientation_;
    }
    if (cached_has_bits & 0x00400000u) {
      ocprimzoneperpsidetoroad_m_ = from.ocprimzoneperpsidetoroad_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      lcnocurblineoptimizationifnocurblc_ = from.lcnocurblineoptimizationifnocurblc_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      enableleftsidescanning_ = from.enableleftsidescanning_;
    }
    if (cached_has_bits & 0x02000000u) {
      enablerightsidescanning_ = from.enablerightsidescanning_;
    }
    if (cached_has_bits & 0x04000000u) {
      enablefrontscanning_ = from.enablefrontscanning_;
    }
    if (cached_has_bits & 0x08000000u) {
      ncsplitmaxskippablencareaperstep_m2_ = from.ncsplitmaxskippablencareaperstep_m2_;
    }
    if (cached_has_bits & 0x10000000u) {
      invalidateoverlappingestablishedslots_ = from.invalidateoverlappingestablishedslots_;
    }
    if (cached_has_bits & 0x20000000u) {
      enableslotorientationonsidevls_ = from.enableslotorientationonsidevls_;
    }
    if (cached_has_bits & 0x40000000u) {
      enableslotorientationonwingvls_ = from.enableslotorientationonwingvls_;
    }
    if (cached_has_bits & 0x80000000u) {
      highsidedelimiterrequired_ = from.highsidedelimiterrequired_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mindistancetoobject_m_ = from.mindistancetoobject_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ocperpendicularmaxdistancexforcurbsideclustering_m_ = from.ocperpendicularmaxdistancexforcurbsideclustering_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      enableunspecifiedshift_ = from.enableunspecifiedshift_;
    }
    if (cached_has_bits & 0x00000008u) {
      dolinecategorization_ = from.dolinecategorization_;
    }
    if (cached_has_bits & 0x00000010u) {
      docurbonlylinecategorization_ = from.docurbonlylinecategorization_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignorelinesforsandwichslots_ = from.ignorelinesforsandwichslots_;
    }
    if (cached_has_bits & 0x00000040u) {
      minheightconfdeltastaticobj_ = from.minheightconfdeltastaticobj_;
    }
    if (cached_has_bits & 0x00000080u) {
      rearmemparkgap_m_ = from.rearmemparkgap_m_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mindistancenoobject_m_ = from.mindistancenoobject_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      osdsideroixback_m_ = from.osdsideroixback_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      allownakedcnnslots_ = from.allownakedcnnslots_;
    }
    if (cached_has_bits & 0x00000800u) {
      cnnslotsallowsislotoverride_ = from.cnnslotsallowsislotoverride_;
    }
    if (cached_has_bits & 0x00001000u) {
      preapplyroadsideextension_ = from.preapplyroadsideextension_;
    }
    if (cached_has_bits & 0x00002000u) {
      slotscoringmaxparlinelength_m_ = from.slotscoringmaxparlinelength_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      slotscoringmaxvlorlineanglediff_rad_ = from.slotscoringmaxvlorlineanglediff_rad_;
    }
    if (cached_has_bits & 0x00008000u) {
      perpendicularslotlengthdeltamin_m_ = from.perpendicularslotlengthdeltamin_m_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      dynobjmaxpreviewtime_s_ = from.dynobjmaxpreviewtime_s_;
    }
    if (cached_has_bits & 0x00020000u) {
      allownarrowslotsscan_ = from.allownarrowslotsscan_;
    }
    if (cached_has_bits & 0x00040000u) {
      enablecnnwheelstoppers_ = from.enablecnnwheelstoppers_;
    }
    if (cached_has_bits & 0x00080000u) {
      enablecnnwheelstopperstatobjverification_ = from.enablecnnwheelstopperstatobjverification_;
    }
    if (cached_has_bits & 0x00100000u) {
      wsstatobjignoreevaluation_ = from.wsstatobjignoreevaluation_;
    }
    if (cached_has_bits & 0x00200000u) {
      minappliedroadsideextension_m_ = from.minappliedroadsideextension_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      slotexpmaxtriangleexpansion_m_ = from.slotexpmaxtriangleexpansion_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      cnnslotsenablesislotdetectionverification_ = from.cnnslotsenablesislotdetectionverification_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      cnncompareslottypefpsuppression_ = from.cnncompareslottypefpsuppression_;
    }
    if (cached_has_bits & 0x02000000u) {
      cnnslotsperpendicularvalidatesangular_ = from.cnnslotsperpendicularvalidatesangular_;
    }
    if (cached_has_bits & 0x04000000u) {
      cnnslotsenablecnnslotprototypes_ = from.cnnslotsenablecnnslotprototypes_;
    }
    if (cached_has_bits & 0x08000000u) {
      smallslotopeningpenalty_ = from.smallslotopeningpenalty_;
    }
    if (cached_has_bits & 0x10000000u) {
      perpendicularslotwidthdeltamodel_m_ = from.perpendicularslotwidthdeltamodel_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      angularparkingdetectionwindowabsmax_m_ = from.angularparkingdetectionwindowabsmax_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ocseczoneangcurbtoroad_m_ = from.ocseczoneangcurbtoroad_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ocseczoneparsidetoslot_m_ = from.ocseczoneparsidetoslot_m_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[6];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ocseczoneperpsidetoslot_m_ = from.ocseczoneperpsidetoslot_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      parallelslotlengthdeltamax_m_ = from.parallelslotlengthdeltamax_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ocprimzoneparsideopening_m_ = from.ocprimzoneparsideopening_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      parallellinealloweddeviation_rad_ = from.parallellinealloweddeviation_rad_;
    }
    if (cached_has_bits & 0x00000010u) {
      ocparallelmaxdistancexforcurbsideclustering_m_ = from.ocparallelmaxdistancexforcurbsideclustering_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      safetymargindynobjenlargingcar_m_ = from.safetymargindynobjenlargingcar_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ocperpmaxdistancecurb_m_ = from.ocperpmaxdistancecurb_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      vlmaxtotalangle_rad_ = from.vlmaxtotalangle_rad_;
    }
    _has_bits_[6] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ocseczoneangcurbtoside_m_ = from.ocseczoneangcurbtoside_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      isstaticobjectinputccworiented_ = from.isstaticobjectinputccworiented_;
    }
    if (cached_has_bits & 0x00000400u) {
      uselinemarkings_ = from.uselinemarkings_;
    }
    if (cached_has_bits & 0x00000800u) {
      treatunknowncurbsideobjectsasbodytraversable_ = from.treatunknowncurbsideobjectsasbodytraversable_;
    }
    if (cached_has_bits & 0x00001000u) {
      enableslotidentfromtrajectory_ = from.enableslotidentfromtrajectory_;
    }
    if (cached_has_bits & 0x00002000u) {
      shrinkpenaltyforclassifyingobjectasdynamic_ = from.shrinkpenaltyforclassifyingobjectasdynamic_;
    }
    if (cached_has_bits & 0x00004000u) {
      slotedgepullsearchdistfront_m_ = from.slotedgepullsearchdistfront_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      lccurbonlyanglediff_rad_ = from.lccurbonlyanglediff_rad_;
    }
    _has_bits_[6] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      delzoneroadfactorpar_nu_ = from.delzoneroadfactorpar_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      lclinedistcostfactor_ = from.lclinedistcostfactor_;
    }
    if (cached_has_bits & 0x00040000u) {
      maxroadsideextensionangular_m_ = from.maxroadsideextensionangular_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      vlminlengthstartdirectionsq_m_ = from.vlminlengthstartdirectionsq_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      maxroadsideextensionparallel_m_ = from.maxroadsideextensionparallel_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      wingalignmentweight_mpr_ = from.wingalignmentweight_mpr_;
    }
    if (cached_has_bits & 0x00400000u) {
      garageparkingslotlengthdeltamin_m_ = from.garageparkingslotlengthdeltamin_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      slotidentmaxyawdevparallel_rad_ = from.slotidentmaxyawdevparallel_rad_;
    }
    _has_bits_[6] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      enablesecondsidedelimiteronlyscenario_ = from.enablesecondsidedelimiteronlyscenario_;
    }
    if (cached_has_bits & 0x02000000u) {
      enablefirstsidedelimiteronlyscenario_ = from.enablefirstsidedelimiteronlyscenario_;
    }
    if (cached_has_bits & 0x04000000u) {
      prefersecondsideosd_ = from.prefersecondsideosd_;
    }
    if (cached_has_bits & 0x08000000u) {
      requiredcurbobjectforonesidedelimitingslots_ = from.requiredcurbobjectforonesidedelimitingslots_;
    }
    if (cached_has_bits & 0x10000000u) {
      leftrightmemparkgapy_m_ = from.leftrightmemparkgapy_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      mincurbobjlengthforonesidedel_m_ = from.mincurbobjlengthforonesidedel_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ocseczoneperpcurbtocurb_m_ = from.ocseczoneperpcurbtocurb_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ocseczoneparcurbtocurb_m_ = from.ocseczoneparcurbtocurb_m_;
    }
    _has_bits_[6] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[7];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ocprimzoneparsidetoroad_m_ = from.ocprimzoneparsidetoroad_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      safetymargindynobjenlargingped_m_ = from.safetymargindynobjenlargingped_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      barrierdelimiterwidth_m_ = from.barrierdelimiterwidth_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      parallelslotdepthdeltaminpark_m_ = from.parallelslotdepthdeltaminpark_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      sensingrange_m_ = from.sensingrange_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      frontroixend_m_ = from.frontroixend_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      slotexpframecounterstable_nu_ = from.slotexpframecounterstable_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      slotexpmintriangleexpansion_rad_ = from.slotexpmintriangleexpansion_rad_;
    }
    _has_bits_[7] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sideallowedoverlap_m_ = from.sideallowedoverlap_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      delzoneleftrightmaxreltovehwidthnonpar_nu_ = from.delzoneleftrightmaxreltovehwidthnonpar_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      angularcurbroadareafactor_ = from.angularcurbroadareafactor_;
    }
    if (cached_has_bits & 0x00000800u) {
      cnnorientationerrorcostfunctionfactor_ = from.cnnorientationerrorcostfunctionfactor_;
    }
    if (cached_has_bits & 0x00001000u) {
      perpendicularslotopeningdeltamaxpark_m_ = from.perpendicularslotopeningdeltamaxpark_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      frontmemparkgap_m_ = from.frontmemparkgap_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      ocseczoneparsidetocurb_m_ = from.ocseczoneparsidetocurb_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      lineopeningdelimitermaxroadprotrusion_m_ = from.lineopeningdelimitermaxroadprotrusion_m_;
    }
    _has_bits_[7] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ocseczoneperpsidetocurb_m_ = from.ocseczoneperpsidetocurb_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      increaseoverhanglowobject_m_ = from.increaseoverhanglowobject_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      vlminvirtuallinelengthcurb_m_ = from.vlminvirtuallinelengthcurb_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      perpendicularslotlengthdeltamax_m_ = from.perpendicularslotlengthdeltamax_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ocprimzoneperpsideopening_m_ = from.ocprimzoneperpsideopening_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      perpendicularslotdepthdeltaminpark_m_ = from.perpendicularslotdepthdeltaminpark_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      ocprimzoneangcurbintoslot_m_ = from.ocprimzoneangcurbintoslot_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      lccurbonlyspatialdiff_m_ = from.lccurbonlyspatialdiff_m_;
    }
    _has_bits_[7] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      angularslotmaxdepthextension_m_ = from.angularslotmaxdepthextension_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      inflationsafetydistanceparkout_m_ = from.inflationsafetydistanceparkout_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      ocseczoneangsidetoside_m_ = from.ocseczoneangsidetoside_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      parallelslotlinetoolongpenalty_ = from.parallelslotlinetoolongpenalty_;
    }
    if (cached_has_bits & 0x10000000u) {
      angularparkingdetectionwindowabsmin_m_ = from.angularparkingdetectionwindowabsmin_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      parallelslotlengthdeltamin_m_ = from.parallelslotlengthdeltamin_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      shrinkpenaltyforshiftbelowmin_ = from.shrinkpenaltyforshiftbelowmin_;
    }
    if (cached_has_bits & 0x80000000u) {
      sidealignmentroiwidth_m_ = from.sidealignmentroiwidth_m_;
    }
    _has_bits_[7] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[8];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      parallelslotopeningdeltaminpark_m_ = from.parallelslotopeningdeltaminpark_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ocprimzoneangsideopening_m_ = from.ocprimzoneangsideopening_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      osdsideroixfront_m_ = from.osdsideroixfront_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ocseczoneangsidetoroad_m_ = from.ocseczoneangsidetoroad_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      cnnslotroadalignmentlimitpar_m_ = from.cnnslotroadalignmentlimitpar_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      prefershifttotoproiyborderoffset_m_ = from.prefershifttotoproiyborderoffset_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      delzoneroadmaxreltovehlengthnonpar_nu_ = from.delzoneroadmaxreltovehlengthnonpar_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      vlmaxangletoparkingboxedge_rad_ = from.vlmaxangletoparkingboxedge_rad_;
    }
    _has_bits_[8] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      insideobjectmaxprojectionlength_m_ = from.insideobjectmaxprojectionlength_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      parallelslotwidthdeltamodel_m_ = from.parallelslotwidthdeltamodel_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      lclinelengthcostfactor_ = from.lclinelengthcostfactor_;
    }
    if (cached_has_bits & 0x00000800u) {
      garageparkingslotlengthdeltamax_m_ = from.garageparkingslotlengthdeltamax_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      memparkextendslot_m_ = from.memparkextendslot_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      vlmaxnextedgeangle_rad_ = from.vlmaxnextedgeangle_rad_;
    }
    if (cached_has_bits & 0x00004000u) {
      cnnslotblowuplimitparcurb_m_ = from.cnnslotblowuplimitparcurb_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      sideroixfront_m_ = from.sideroixfront_m_;
    }
    _has_bits_[8] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      lcanglecostfactor_ = from.lcanglecostfactor_;
    }
    if (cached_has_bits & 0x00020000u) {
      typicalorientationofangledslot_rad_ = from.typicalorientationofangledslot_rad_;
    }
    if (cached_has_bits & 0x00040000u) {
      inflationsafetydistancedefault_m_ = from.inflationsafetydistancedefault_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      cnnslotsmininvalidationoverlap_m_ = from.cnnslotsmininvalidationoverlap_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      sideandcurbdelimiterroiextension_m_ = from.sideandcurbdelimiterroiextension_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      vlusemaxangletoparkingboxedge_ = from.vlusemaxangletoparkingboxedge_;
    }
    if (cached_has_bits & 0x00400000u) {
      slotexpansion_ = from.slotexpansion_;
    }
    if (cached_has_bits & 0x00800000u) {
      slotexpansiononlines_ = from.slotexpansiononlines_;
    }
    _has_bits_[8] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      doobjectinflation_ = from.doobjectinflation_;
    }
    if (cached_has_bits & 0x02000000u) {
      ocseczoneparsidetoroad_m_ = from.ocseczoneparsidetoroad_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      maxdrivenrotationparallel_rad_ = from.maxdrivenrotationparallel_rad_;
    }
    if (cached_has_bits & 0x08000000u) {
      developergenericfloat4_ = from.developergenericfloat4_;
    }
    if (cached_has_bits & 0x10000000u) {
      useareacriteria_ = from.useareacriteria_;
    }
    if (cached_has_bits & 0x20000000u) {
      uselinearoverlapdropoff_ = from.uselinearoverlapdropoff_;
    }
    if (cached_has_bits & 0x40000000u) {
      tecalculateroadsideexpansion_ = from.tecalculateroadsideexpansion_;
    }
    if (cached_has_bits & 0x80000000u) {
      delzonesusehighcomplexitygetscore_ = from.delzonesusehighcomplexitygetscore_;
    }
    _has_bits_[8] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[9];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ocseczoneangsidetocurb_m_ = from.ocseczoneangsidetocurb_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      slotexpmaxanglediff_rad_ = from.slotexpmaxanglediff_rad_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxmemparkrotadj_rad_ = from.maxmemparkrotadj_rad_;
    }
    if (cached_has_bits & 0x00000008u) {
      curbobjectevaluationroidepthdelta_m_ = from.curbobjectevaluationroidepthdelta_m_;
    }
    _has_bits_[9] |= cached_has_bits;
  }
}

void SiParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.si_params.SiParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiParams::CopyFrom(const SiParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.si_params.SiParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiParams::IsInitialized() const {
  return true;
}

void SiParams::InternalSwap(SiParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(_has_bits_[4], other->_has_bits_[4]);
  swap(_has_bits_[5], other->_has_bits_[5]);
  swap(_has_bits_[6], other->_has_bits_[6]);
  swap(_has_bits_[7], other->_has_bits_[7]);
  swap(_has_bits_[8], other->_has_bits_[8]);
  swap(_has_bits_[9], other->_has_bits_[9]);
  swap(ssigheader_, other->ssigheader_);
  swap(slotpositioningroileftrightdelta_m_, other->slotpositioningroileftrightdelta_m_);
  swap(developergenericfloat5_, other->developergenericfloat5_);
  swap(dynobjminexistenceprob_perc_, other->dynobjminexistenceprob_perc_);
  swap(minbarrierpointoverhang_m_, other->minbarrierpointoverhang_m_);
  swap(maxmemparklinearadj_m_, other->maxmemparklinearadj_m_);
  swap(sideroiystart_m_, other->sideroiystart_m_);
  swap(slotreplacementdeltaoutlierdistsqr_m2_, other->slotreplacementdeltaoutlierdistsqr_m2_);
  swap(developergenericfloat0_, other->developergenericfloat0_);
  swap(sidealignmentweight_mpr_, other->sidealignmentweight_mpr_);
  swap(cnnslotodslotenlargement_m_, other->cnnslotodslotenlargement_m_);
  swap(maxdrivenrotationperpendicular_rad_, other->maxdrivenrotationperpendicular_rad_);
  swap(developergenericfloat1_, other->developergenericfloat1_);
  swap(ocseczoneparsidetoside_m_, other->ocseczoneparsidetoside_m_);
  swap(perpendicularslotlengthdeltamodel_m_, other->perpendicularslotlengthdeltamodel_m_);
  swap(developergenericfloat2_, other->developergenericfloat2_);
  swap(sideroiyend_m_, other->sideroiyend_m_);
  swap(delzoneleftrightmaxreltovehlengthpar_nu_, other->delzoneleftrightmaxreltovehlengthpar_nu_);
  swap(ocseczoneperpsidetoside_m_, other->ocseczoneperpsidetoside_m_);
  swap(developergenericfloat3_, other->developergenericfloat3_);
  swap(ocprimzoneparcurbintoslot_m_, other->ocprimzoneparcurbintoslot_m_);
  swap(vlminvirtuallinelengthparside_m_, other->vlminvirtuallinelengthparside_m_);
  swap(maxallowedslotopeningoverlap_m_, other->maxallowedslotopeningoverlap_m_);
  swap(delzonecurbfactorpar_nu_, other->delzonecurbfactorpar_nu_);
  swap(slotdepthhorizontallinealignment_m_, other->slotdepthhorizontallinealignment_m_);
  swap(parallelslotlengthdeltamodel_m_, other->parallelslotlengthdeltamodel_m_);
  swap(vlminvirtuallinelengthroad_m_, other->vlminvirtuallinelengthroad_m_);
  swap(maxdrivenrotationangled_rad_, other->maxdrivenrotationangled_rad_);
  swap(penaltyforshrinktomindim_, other->penaltyforshrinktomindim_);
  swap(minslotopeningoffsetsideblowup_m_, other->minslotopeningoffsetsideblowup_m_);
  swap(garageparkingslotlengthdeltamodel_m_, other->garageparkingslotlengthdeltamodel_m_);
  swap(cnnslotsminscenarioconfidencetheshold_, other->cnnslotsminscenarioconfidencetheshold_);
  swap(integrationmessagescomponent_nu_, other->integrationmessagescomponent_nu_);
  swap(leftrightmemparkoffsetx_m_, other->leftrightmemparkoffsetx_m_);
  swap(shrinkslotfornumericalinaccuracy_m_, other->shrinkslotfornumericalinaccuracy_m_);
  swap(vlinsidelargerthanroadfactor_, other->vlinsidelargerthanroadfactor_);
  swap(integrationmessageslevel_nu_, other->integrationmessageslevel_nu_);
  swap(mincoveragepersidenonpar_m_, other->mincoveragepersidenonpar_m_);
  swap(sideroixback_m_, other->sideroixback_m_);
  swap(perpendicularslotwidthdeltamax_m_, other->perpendicularslotwidthdeltamax_m_);
  swap(slotscoringminparwinglength_m_, other->slotscoringminparwinglength_m_);
  swap(parallelslotwidthdeltamin_m_, other->parallelslotwidthdeltamin_m_);
  swap(cnnslotroadalignmentlimitnonpar_m_, other->cnnslotroadalignmentlimitnonpar_m_);
  swap(parallelslotdepthdeltamaxpark_m_, other->parallelslotdepthdeltamaxpark_m_);
  swap(minimumobstaclefittedlinelength_m_, other->minimumobstaclefittedlinelength_m_);
  swap(relevantobjectminboxside_m_, other->relevantobjectminboxside_m_);
  swap(maxallowedslotextensionoverlinestominopening_m_, other->maxallowedslotextensionoverlinestominopening_m_);
  swap(allowedwsposoutsideslot_m_, other->allowedwsposoutsideslot_m_);
  swap(collfunctionroilengthdelta_m_, other->collfunctionroilengthdelta_m_);
  swap(ocseczoneperpsidetoroad_m_, other->ocseczoneperpsidetoroad_m_);
  swap(garageparkingslotwidthdeltamax_m_, other->garageparkingslotwidthdeltamax_m_);
  swap(collfunctionroiwidthdelta_m_, other->collfunctionroiwidthdelta_m_);
  swap(delzoneroadmindistnonpar_m_, other->delzoneroadmindistnonpar_m_);
  swap(cnnslotblowuplimitparside_m_, other->cnnslotblowuplimitparside_m_);
  swap(outlierdistsqrparallelslot_m2_, other->outlierdistsqrparallelslot_m2_);
  swap(minrequireddelimiterprojectionratio_nu_, other->minrequireddelimiterprojectionratio_nu_);
  swap(outlierdistsqrnonparallelslot_m2_, other->outlierdistsqrnonparallelslot_m2_);
  swap(coveredintervalsroiwidth_m_, other->coveredintervalsroiwidth_m_);
  swap(cnnslotblowuplimitnonparcurb_m_, other->cnnslotblowuplimitnonparcurb_m_);
  swap(delzoneleftrightfactornonpar_nu_, other->delzoneleftrightfactornonpar_nu_);
  swap(ocangmaxdistancecurb_m_, other->ocangmaxdistancecurb_m_);
  swap(ocseczoneperpcurbtoroad_m_, other->ocseczoneperpcurbtoroad_m_);
  swap(ocseczoneparcurbtoroad_m_, other->ocseczoneparcurbtoroad_m_);
  swap(ocseczoneangsidetoslot_m_, other->ocseczoneangsidetoslot_m_);
  swap(delzonecurbmaxreltovehwidthpar_nu_, other->delzonecurbmaxreltovehwidthpar_nu_);
  swap(ocprimzonecurbbelowslot_m_, other->ocprimzonecurbbelowslot_m_);
  swap(perpendicularslotopeningdeltaminpark_m_, other->perpendicularslotopeningdeltaminpark_m_);
  swap(slotexpansionsideroiwidth_m_, other->slotexpansionsideroiwidth_m_);
  swap(alloweddisttoexistingwswithoutwlsuppression_m_, other->alloweddisttoexistingwswithoutwlsuppression_m_);
  swap(lineopeningdelimitertocurbprojectionfactor_, other->lineopeningdelimitertocurbprojectionfactor_);
  swap(cnnslotsminvalidationoverlap_m_, other->cnnslotsminvalidationoverlap_m_);
  swap(delzoneleftrightfactorpar_nu_, other->delzoneleftrightfactorpar_nu_);
  swap(vlminvirtuallinelengthperpside_m_, other->vlminvirtuallinelengthperpside_m_);
  swap(shrinkpenaltyforexceedinggivenlimits_, other->shrinkpenaltyforexceedinggivenlimits_);
  swap(usecovmatrixinflation_, other->usecovmatrixinflation_);
  swap(ncsplitusemostxstartidx_, other->ncsplitusemostxstartidx_);
  swap(ncspliton_, other->ncspliton_);
  swap(doobjectclustering_, other->doobjectclustering_);
  swap(outsideinallowedoverlap_m_, other->outsideinallowedoverlap_m_);
  swap(frontroixstart_m_, other->frontroixstart_m_);
  swap(enableslotposedetectiononvirtuallines_, other->enableslotposedetectiononvirtuallines_);
  swap(enableparallelslots_, other->enableparallelslots_);
  swap(enableperpendicularslots_, other->enableperpendicularslots_);
  swap(enablegarageparkingslots_, other->enablegarageparkingslots_);
  swap(vlinsidelargeenough_m_, other->vlinsidelargeenough_m_);
  swap(delzonecurbfactornonpar_nu_, other->delzonecurbfactornonpar_nu_);
  swap(perpendicularslotdepthdeltamaxpark_m_, other->perpendicularslotdepthdeltamaxpark_m_);
  swap(insidezonedist_m_, other->insidezonedist_m_);
  swap(delzonecurbmaxreltovehlengthnonpar_nu_, other->delzonecurbmaxreltovehlengthnonpar_nu_);
  swap(slotpositioningroiroaddelta_m_, other->slotpositioningroiroaddelta_m_);
  swap(delzoneroadmaxreltovehwidthpar_nu_, other->delzoneroadmaxreltovehwidthpar_nu_);
  swap(minbarrierdelimiterlength_m_, other->minbarrierdelimiterlength_m_);
  swap(enableangularrightopeningtowardsfront_, other->enableangularrightopeningtowardsfront_);
  swap(enableangularleftopeningtowardsback_, other->enableangularleftopeningtowardsback_);
  swap(enableangularleftopeningtowardsfront_, other->enableangularleftopeningtowardsfront_);
  swap(enableangularslotbruteforcedetection_, other->enableangularslotbruteforcedetection_);
  swap(horizontalmovementlimitofaslotslotcoords_m_, other->horizontalmovementlimitofaslotslotcoords_m_);
  swap(ocperpmaxdistanceside_m_, other->ocperpmaxdistanceside_m_);
  swap(parallelslotopeningdeltamaxpark_m_, other->parallelslotopeningdeltamaxpark_m_);
  swap(alloweddisttoexistingwswithwlsuppression_m_, other->alloweddisttoexistingwswithwlsuppression_m_);
  swap(thdelimiterdist_m_, other->thdelimiterdist_m_);
  swap(preferwideslots_, other->preferwideslots_);
  swap(offeroverlappingslots_, other->offeroverlappingslots_);
  swap(performoptimization_, other->performoptimization_);
  swap(enableslotshrinkingbelowusualsizeduringtrack_, other->enableslotshrinkingbelowusualsizeduringtrack_);
  swap(delzoneroadmindistpar_m_, other->delzoneroadmindistpar_m_);
  swap(vlmaxallowedroadinsideanglediff_rad_, other->vlmaxallowedroadinsideanglediff_rad_);
  swap(maxroadsideextensionperpendicular_m_, other->maxroadsideextensionperpendicular_m_);
  swap(lineorientationroidelta_m_, other->lineorientationroidelta_m_);
  swap(allownakedslots_, other->allownakedslots_);
  swap(requireatleastonedelimitingobjectfornakedslot_, other->requireatleastonedelimitingobjectfornakedslot_);
  swap(enableangularparking_, other->enableangularparking_);
  swap(enableangularrightopeningtowardsback_, other->enableangularrightopeningtowardsback_);
  swap(ocseczoneangcurbtocurb_m_, other->ocseczoneangcurbtocurb_m_);
  swap(prohibitionzonerelativelength_, other->prohibitionzonerelativelength_);
  swap(slotpenetrationdepth_m_, other->slotpenetrationdepth_m_);
  swap(perpendicularslotwidthdeltamin_m_, other->perpendicularslotwidthdeltamin_m_);
  swap(parallelslotwidthdeltamax_m_, other->parallelslotwidthdeltamax_m_);
  swap(frontroiyside_m_, other->frontroiyside_m_);
  swap(enableinsideobjectpenetrationdepth_, other->enableinsideobjectpenetrationdepth_);
  swap(vlprojectontoboxiffailed_, other->vlprojectontoboxiffailed_);
  swap(vldoroadinsideoptimization_, other->vldoroadinsideoptimization_);
  swap(vluseroadfacingfornonparallelslots_, other->vluseroadfacingfornonparallelslots_);
  swap(sideandcurbdelimiterroibottomshift_m_, other->sideandcurbdelimiterroibottomshift_m_);
  swap(ocprimzoneperpcurbintoslot_m_, other->ocprimzoneperpcurbintoslot_m_);
  swap(mindistgapcnnslotvstrackedslot_m_, other->mindistgapcnnslotvstrackedslot_m_);
  swap(allowslotextensionoverlinestominopening_, other->allowslotextensionoverlinestominopening_);
  swap(allowshrinkonlinesdespitesideobjects_, other->allowshrinkonlinesdespitesideobjects_);
  swap(prefershifttotoponcurbobjects_, other->prefershifttotoponcurbobjects_);
  swap(enableslotfallback_, other->enableslotfallback_);
  swap(delzoneroadfactornonpar_nu_, other->delzoneroadfactornonpar_nu_);
  swap(garageparkingslotwidthdeltamin_m_, other->garageparkingslotwidthdeltamin_m_);
  swap(slotidentmaxdevfromstraightline_m_, other->slotidentmaxdevfromstraightline_m_);
  swap(dynobjmaxvel_mps_, other->dynobjmaxvel_mps_);
  swap(weightlineorientation_, other->weightlineorientation_);
  swap(cnnslotsvalidationmaxopeninganglediff_rad_, other->cnnslotsvalidationmaxopeninganglediff_rad_);
  swap(slotscoringminnonparsidelength_m_, other->slotscoringminnonparsidelength_m_);
  swap(ocseczoneperpcurbtoside_m_, other->ocseczoneperpcurbtoside_m_);
  swap(maxallowedvehcurboverlapforperp_m_, other->maxallowedvehcurboverlapforperp_m_);
  swap(ocseczoneparcurbtoside_m_, other->ocseczoneparcurbtoside_m_);
  swap(maxdrivenrotationgarage_rad_, other->maxdrivenrotationgarage_rad_);
  swap(sideshiftpenaltyforcurbobjects_, other->sideshiftpenaltyforcurbobjects_);
  swap(cnnslotblowuplimitnonparside_m_, other->cnnslotblowuplimitnonparside_m_);
  swap(enlargedynobj_, other->enlargedynobj_);
  swap(doexactshiftvectortoegocollisioncheck_, other->doexactshiftvectortoegocollisioncheck_);
  swap(enableslotlengthadaptiontoadjacentobjects_, other->enableslotlengthadaptiontoadjacentobjects_);
  swap(enableslotlengthadaptiontoadjacentlines_, other->enableslotlengthadaptiontoadjacentlines_);
  swap(garageparkingslotdoorarealength_m_, other->garageparkingslotdoorarealength_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(weightcurborientation_, other->weightcurborientation_);
  swap(ocprimzoneperpsidetoroad_m_, other->ocprimzoneperpsidetoroad_m_);
  swap(lcnocurblineoptimizationifnocurblc_, other->lcnocurblineoptimizationifnocurblc_);
  swap(enableleftsidescanning_, other->enableleftsidescanning_);
  swap(enablerightsidescanning_, other->enablerightsidescanning_);
  swap(enablefrontscanning_, other->enablefrontscanning_);
  swap(ncsplitmaxskippablencareaperstep_m2_, other->ncsplitmaxskippablencareaperstep_m2_);
  swap(invalidateoverlappingestablishedslots_, other->invalidateoverlappingestablishedslots_);
  swap(enableslotorientationonsidevls_, other->enableslotorientationonsidevls_);
  swap(enableslotorientationonwingvls_, other->enableslotorientationonwingvls_);
  swap(highsidedelimiterrequired_, other->highsidedelimiterrequired_);
  swap(mindistancetoobject_m_, other->mindistancetoobject_m_);
  swap(ocperpendicularmaxdistancexforcurbsideclustering_m_, other->ocperpendicularmaxdistancexforcurbsideclustering_m_);
  swap(enableunspecifiedshift_, other->enableunspecifiedshift_);
  swap(dolinecategorization_, other->dolinecategorization_);
  swap(docurbonlylinecategorization_, other->docurbonlylinecategorization_);
  swap(ignorelinesforsandwichslots_, other->ignorelinesforsandwichslots_);
  swap(minheightconfdeltastaticobj_, other->minheightconfdeltastaticobj_);
  swap(rearmemparkgap_m_, other->rearmemparkgap_m_);
  swap(mindistancenoobject_m_, other->mindistancenoobject_m_);
  swap(osdsideroixback_m_, other->osdsideroixback_m_);
  swap(allownakedcnnslots_, other->allownakedcnnslots_);
  swap(cnnslotsallowsislotoverride_, other->cnnslotsallowsislotoverride_);
  swap(preapplyroadsideextension_, other->preapplyroadsideextension_);
  swap(slotscoringmaxparlinelength_m_, other->slotscoringmaxparlinelength_m_);
  swap(slotscoringmaxvlorlineanglediff_rad_, other->slotscoringmaxvlorlineanglediff_rad_);
  swap(perpendicularslotlengthdeltamin_m_, other->perpendicularslotlengthdeltamin_m_);
  swap(dynobjmaxpreviewtime_s_, other->dynobjmaxpreviewtime_s_);
  swap(allownarrowslotsscan_, other->allownarrowslotsscan_);
  swap(enablecnnwheelstoppers_, other->enablecnnwheelstoppers_);
  swap(enablecnnwheelstopperstatobjverification_, other->enablecnnwheelstopperstatobjverification_);
  swap(wsstatobjignoreevaluation_, other->wsstatobjignoreevaluation_);
  swap(minappliedroadsideextension_m_, other->minappliedroadsideextension_m_);
  swap(slotexpmaxtriangleexpansion_m_, other->slotexpmaxtriangleexpansion_m_);
  swap(cnnslotsenablesislotdetectionverification_, other->cnnslotsenablesislotdetectionverification_);
  swap(cnncompareslottypefpsuppression_, other->cnncompareslottypefpsuppression_);
  swap(cnnslotsperpendicularvalidatesangular_, other->cnnslotsperpendicularvalidatesangular_);
  swap(cnnslotsenablecnnslotprototypes_, other->cnnslotsenablecnnslotprototypes_);
  swap(smallslotopeningpenalty_, other->smallslotopeningpenalty_);
  swap(perpendicularslotwidthdeltamodel_m_, other->perpendicularslotwidthdeltamodel_m_);
  swap(angularparkingdetectionwindowabsmax_m_, other->angularparkingdetectionwindowabsmax_m_);
  swap(ocseczoneangcurbtoroad_m_, other->ocseczoneangcurbtoroad_m_);
  swap(ocseczoneparsidetoslot_m_, other->ocseczoneparsidetoslot_m_);
  swap(ocseczoneperpsidetoslot_m_, other->ocseczoneperpsidetoslot_m_);
  swap(parallelslotlengthdeltamax_m_, other->parallelslotlengthdeltamax_m_);
  swap(ocprimzoneparsideopening_m_, other->ocprimzoneparsideopening_m_);
  swap(parallellinealloweddeviation_rad_, other->parallellinealloweddeviation_rad_);
  swap(ocparallelmaxdistancexforcurbsideclustering_m_, other->ocparallelmaxdistancexforcurbsideclustering_m_);
  swap(safetymargindynobjenlargingcar_m_, other->safetymargindynobjenlargingcar_m_);
  swap(ocperpmaxdistancecurb_m_, other->ocperpmaxdistancecurb_m_);
  swap(vlmaxtotalangle_rad_, other->vlmaxtotalangle_rad_);
  swap(ocseczoneangcurbtoside_m_, other->ocseczoneangcurbtoside_m_);
  swap(isstaticobjectinputccworiented_, other->isstaticobjectinputccworiented_);
  swap(uselinemarkings_, other->uselinemarkings_);
  swap(treatunknowncurbsideobjectsasbodytraversable_, other->treatunknowncurbsideobjectsasbodytraversable_);
  swap(enableslotidentfromtrajectory_, other->enableslotidentfromtrajectory_);
  swap(shrinkpenaltyforclassifyingobjectasdynamic_, other->shrinkpenaltyforclassifyingobjectasdynamic_);
  swap(slotedgepullsearchdistfront_m_, other->slotedgepullsearchdistfront_m_);
  swap(lccurbonlyanglediff_rad_, other->lccurbonlyanglediff_rad_);
  swap(delzoneroadfactorpar_nu_, other->delzoneroadfactorpar_nu_);
  swap(lclinedistcostfactor_, other->lclinedistcostfactor_);
  swap(maxroadsideextensionangular_m_, other->maxroadsideextensionangular_m_);
  swap(vlminlengthstartdirectionsq_m_, other->vlminlengthstartdirectionsq_m_);
  swap(maxroadsideextensionparallel_m_, other->maxroadsideextensionparallel_m_);
  swap(wingalignmentweight_mpr_, other->wingalignmentweight_mpr_);
  swap(garageparkingslotlengthdeltamin_m_, other->garageparkingslotlengthdeltamin_m_);
  swap(slotidentmaxyawdevparallel_rad_, other->slotidentmaxyawdevparallel_rad_);
  swap(enablesecondsidedelimiteronlyscenario_, other->enablesecondsidedelimiteronlyscenario_);
  swap(enablefirstsidedelimiteronlyscenario_, other->enablefirstsidedelimiteronlyscenario_);
  swap(prefersecondsideosd_, other->prefersecondsideosd_);
  swap(requiredcurbobjectforonesidedelimitingslots_, other->requiredcurbobjectforonesidedelimitingslots_);
  swap(leftrightmemparkgapy_m_, other->leftrightmemparkgapy_m_);
  swap(mincurbobjlengthforonesidedel_m_, other->mincurbobjlengthforonesidedel_m_);
  swap(ocseczoneperpcurbtocurb_m_, other->ocseczoneperpcurbtocurb_m_);
  swap(ocseczoneparcurbtocurb_m_, other->ocseczoneparcurbtocurb_m_);
  swap(ocprimzoneparsidetoroad_m_, other->ocprimzoneparsidetoroad_m_);
  swap(safetymargindynobjenlargingped_m_, other->safetymargindynobjenlargingped_m_);
  swap(barrierdelimiterwidth_m_, other->barrierdelimiterwidth_m_);
  swap(parallelslotdepthdeltaminpark_m_, other->parallelslotdepthdeltaminpark_m_);
  swap(sensingrange_m_, other->sensingrange_m_);
  swap(frontroixend_m_, other->frontroixend_m_);
  swap(slotexpframecounterstable_nu_, other->slotexpframecounterstable_nu_);
  swap(slotexpmintriangleexpansion_rad_, other->slotexpmintriangleexpansion_rad_);
  swap(sideallowedoverlap_m_, other->sideallowedoverlap_m_);
  swap(delzoneleftrightmaxreltovehwidthnonpar_nu_, other->delzoneleftrightmaxreltovehwidthnonpar_nu_);
  swap(angularcurbroadareafactor_, other->angularcurbroadareafactor_);
  swap(cnnorientationerrorcostfunctionfactor_, other->cnnorientationerrorcostfunctionfactor_);
  swap(perpendicularslotopeningdeltamaxpark_m_, other->perpendicularslotopeningdeltamaxpark_m_);
  swap(frontmemparkgap_m_, other->frontmemparkgap_m_);
  swap(ocseczoneparsidetocurb_m_, other->ocseczoneparsidetocurb_m_);
  swap(lineopeningdelimitermaxroadprotrusion_m_, other->lineopeningdelimitermaxroadprotrusion_m_);
  swap(ocseczoneperpsidetocurb_m_, other->ocseczoneperpsidetocurb_m_);
  swap(increaseoverhanglowobject_m_, other->increaseoverhanglowobject_m_);
  swap(vlminvirtuallinelengthcurb_m_, other->vlminvirtuallinelengthcurb_m_);
  swap(perpendicularslotlengthdeltamax_m_, other->perpendicularslotlengthdeltamax_m_);
  swap(ocprimzoneperpsideopening_m_, other->ocprimzoneperpsideopening_m_);
  swap(perpendicularslotdepthdeltaminpark_m_, other->perpendicularslotdepthdeltaminpark_m_);
  swap(ocprimzoneangcurbintoslot_m_, other->ocprimzoneangcurbintoslot_m_);
  swap(lccurbonlyspatialdiff_m_, other->lccurbonlyspatialdiff_m_);
  swap(angularslotmaxdepthextension_m_, other->angularslotmaxdepthextension_m_);
  swap(inflationsafetydistanceparkout_m_, other->inflationsafetydistanceparkout_m_);
  swap(ocseczoneangsidetoside_m_, other->ocseczoneangsidetoside_m_);
  swap(parallelslotlinetoolongpenalty_, other->parallelslotlinetoolongpenalty_);
  swap(angularparkingdetectionwindowabsmin_m_, other->angularparkingdetectionwindowabsmin_m_);
  swap(parallelslotlengthdeltamin_m_, other->parallelslotlengthdeltamin_m_);
  swap(shrinkpenaltyforshiftbelowmin_, other->shrinkpenaltyforshiftbelowmin_);
  swap(sidealignmentroiwidth_m_, other->sidealignmentroiwidth_m_);
  swap(parallelslotopeningdeltaminpark_m_, other->parallelslotopeningdeltaminpark_m_);
  swap(ocprimzoneangsideopening_m_, other->ocprimzoneangsideopening_m_);
  swap(osdsideroixfront_m_, other->osdsideroixfront_m_);
  swap(ocseczoneangsidetoroad_m_, other->ocseczoneangsidetoroad_m_);
  swap(cnnslotroadalignmentlimitpar_m_, other->cnnslotroadalignmentlimitpar_m_);
  swap(prefershifttotoproiyborderoffset_m_, other->prefershifttotoproiyborderoffset_m_);
  swap(delzoneroadmaxreltovehlengthnonpar_nu_, other->delzoneroadmaxreltovehlengthnonpar_nu_);
  swap(vlmaxangletoparkingboxedge_rad_, other->vlmaxangletoparkingboxedge_rad_);
  swap(insideobjectmaxprojectionlength_m_, other->insideobjectmaxprojectionlength_m_);
  swap(parallelslotwidthdeltamodel_m_, other->parallelslotwidthdeltamodel_m_);
  swap(lclinelengthcostfactor_, other->lclinelengthcostfactor_);
  swap(garageparkingslotlengthdeltamax_m_, other->garageparkingslotlengthdeltamax_m_);
  swap(memparkextendslot_m_, other->memparkextendslot_m_);
  swap(vlmaxnextedgeangle_rad_, other->vlmaxnextedgeangle_rad_);
  swap(cnnslotblowuplimitparcurb_m_, other->cnnslotblowuplimitparcurb_m_);
  swap(sideroixfront_m_, other->sideroixfront_m_);
  swap(lcanglecostfactor_, other->lcanglecostfactor_);
  swap(typicalorientationofangledslot_rad_, other->typicalorientationofangledslot_rad_);
  swap(inflationsafetydistancedefault_m_, other->inflationsafetydistancedefault_m_);
  swap(cnnslotsmininvalidationoverlap_m_, other->cnnslotsmininvalidationoverlap_m_);
  swap(sideandcurbdelimiterroiextension_m_, other->sideandcurbdelimiterroiextension_m_);
  swap(vlusemaxangletoparkingboxedge_, other->vlusemaxangletoparkingboxedge_);
  swap(slotexpansion_, other->slotexpansion_);
  swap(slotexpansiononlines_, other->slotexpansiononlines_);
  swap(doobjectinflation_, other->doobjectinflation_);
  swap(ocseczoneparsidetoroad_m_, other->ocseczoneparsidetoroad_m_);
  swap(maxdrivenrotationparallel_rad_, other->maxdrivenrotationparallel_rad_);
  swap(developergenericfloat4_, other->developergenericfloat4_);
  swap(useareacriteria_, other->useareacriteria_);
  swap(uselinearoverlapdropoff_, other->uselinearoverlapdropoff_);
  swap(tecalculateroadsideexpansion_, other->tecalculateroadsideexpansion_);
  swap(delzonesusehighcomplexitygetscore_, other->delzonesusehighcomplexitygetscore_);
  swap(ocseczoneangsidetocurb_m_, other->ocseczoneangsidetocurb_m_);
  swap(slotexpmaxanglediff_rad_, other->slotexpmaxanglediff_rad_);
  swap(maxmemparkrotadj_rad_, other->maxmemparkrotadj_rad_);
  swap(curbobjectevaluationroidepthdelta_m_, other->curbobjectevaluationroidepthdelta_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SiParams_array_port::InitAsDefaultInstance() {
}
class SiParams_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<SiParams_array_port>()._has_bits_);
};

SiParams_array_port::SiParams_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.si.si_params.SiParams_array_port)
}
SiParams_array_port::SiParams_array_port(const SiParams_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.si.si_params.SiParams_array_port)
}

void SiParams_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiParams_array_port_si_2fsi_5fparams_2eproto.base);
}

SiParams_array_port::~SiParams_array_port() {
  // @@protoc_insertion_point(destructor:pb.si.si_params.SiParams_array_port)
  SharedDtor();
}

void SiParams_array_port::SharedDtor() {
}

void SiParams_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiParams_array_port& SiParams_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiParams_array_port_si_2fsi_5fparams_2eproto.base);
  return *internal_default_instance();
}


void SiParams_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.si.si_params.SiParams_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SiParams_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.si.si_params.SiParams data = 4025;
      case 4025:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiParams_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.si.si_params.SiParams_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.si.si_params.SiParams data = 4025;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4025, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.si.si_params.SiParams_array_port)
  return target;
}

size_t SiParams_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.si.si_params.SiParams_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.si.si_params.SiParams data = 4025;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiParams_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.si.si_params.SiParams_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const SiParams_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiParams_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.si.si_params.SiParams_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.si.si_params.SiParams_array_port)
    MergeFrom(*source);
  }
}

void SiParams_array_port::MergeFrom(const SiParams_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.si.si_params.SiParams_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SiParams_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.si.si_params.SiParams_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiParams_array_port::CopyFrom(const SiParams_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.si.si_params.SiParams_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiParams_array_port::IsInitialized() const {
  return true;
}

void SiParams_array_port::InternalSwap(SiParams_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiParams_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace si_params
}  // namespace si
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::si::si_params::SiParams* Arena::CreateMaybeMessage< ::pb::si::si_params::SiParams >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::si_params::SiParams >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::si::si_params::SiParams_array_port* Arena::CreateMaybeMessage< ::pb::si::si_params::SiParams_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::si::si_params::SiParams_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
