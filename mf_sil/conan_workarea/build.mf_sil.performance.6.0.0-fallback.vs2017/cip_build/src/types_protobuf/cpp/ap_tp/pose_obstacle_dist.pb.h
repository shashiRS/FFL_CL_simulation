// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/pose_obstacle_dist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto;
namespace pb {
namespace ap_tp {
namespace pose_obstacle_dist {
class PoseObstacleDist;
class PoseObstacleDistDefaultTypeInternal;
extern PoseObstacleDistDefaultTypeInternal _PoseObstacleDist_default_instance_;
class PoseObstacleDist_array_port;
class PoseObstacleDist_array_portDefaultTypeInternal;
extern PoseObstacleDist_array_portDefaultTypeInternal _PoseObstacleDist_array_port_default_instance_;
}  // namespace pose_obstacle_dist
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* Arena::CreateMaybeMessage<::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist>(Arena*);
template<> ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port* Arena::CreateMaybeMessage<::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_tp {
namespace pose_obstacle_dist {

// ===================================================================

class PoseObstacleDist :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist) */ {
 public:
  PoseObstacleDist();
  virtual ~PoseObstacleDist();

  PoseObstacleDist(const PoseObstacleDist& from);
  PoseObstacleDist(PoseObstacleDist&& from) noexcept
    : PoseObstacleDist() {
    *this = ::std::move(from);
  }

  inline PoseObstacleDist& operator=(const PoseObstacleDist& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseObstacleDist& operator=(PoseObstacleDist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseObstacleDist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseObstacleDist* internal_default_instance() {
    return reinterpret_cast<const PoseObstacleDist*>(
               &_PoseObstacleDist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PoseObstacleDist& a, PoseObstacleDist& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseObstacleDist* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseObstacleDist* New() const final {
    return CreateMaybeMessage<PoseObstacleDist>(nullptr);
  }

  PoseObstacleDist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseObstacleDist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseObstacleDist& from);
  void MergeFrom(const PoseObstacleDist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseObstacleDist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.pose_obstacle_dist.PoseObstacleDist";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto);
    return ::descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRearObstDistMFieldNumber = 3413,
    kFrontObstDistMFieldNumber = 485,
    kLeftObstDistMFieldNumber = 529,
    kRightObstDistMFieldNumber = 1158,
    kFrontObstDistValidFieldNumber = 1826,
    kRearObstDistValidFieldNumber = 2708,
    kLeftObstDistValidFieldNumber = 569,
    kRightObstDistValidFieldNumber = 2723,
  };
  // optional float rearObstDist_m = 3413;
  bool has_rearobstdist_m() const;
  private:
  bool _internal_has_rearobstdist_m() const;
  public:
  void clear_rearobstdist_m();
  float rearobstdist_m() const;
  void set_rearobstdist_m(float value);
  private:
  float _internal_rearobstdist_m() const;
  void _internal_set_rearobstdist_m(float value);
  public:

  // optional float frontObstDist_m = 485;
  bool has_frontobstdist_m() const;
  private:
  bool _internal_has_frontobstdist_m() const;
  public:
  void clear_frontobstdist_m();
  float frontobstdist_m() const;
  void set_frontobstdist_m(float value);
  private:
  float _internal_frontobstdist_m() const;
  void _internal_set_frontobstdist_m(float value);
  public:

  // optional float leftObstDist_m = 529;
  bool has_leftobstdist_m() const;
  private:
  bool _internal_has_leftobstdist_m() const;
  public:
  void clear_leftobstdist_m();
  float leftobstdist_m() const;
  void set_leftobstdist_m(float value);
  private:
  float _internal_leftobstdist_m() const;
  void _internal_set_leftobstdist_m(float value);
  public:

  // optional float rightObstDist_m = 1158;
  bool has_rightobstdist_m() const;
  private:
  bool _internal_has_rightobstdist_m() const;
  public:
  void clear_rightobstdist_m();
  float rightobstdist_m() const;
  void set_rightobstdist_m(float value);
  private:
  float _internal_rightobstdist_m() const;
  void _internal_set_rightobstdist_m(float value);
  public:

  // optional bool frontObstDistValid = 1826;
  bool has_frontobstdistvalid() const;
  private:
  bool _internal_has_frontobstdistvalid() const;
  public:
  void clear_frontobstdistvalid();
  bool frontobstdistvalid() const;
  void set_frontobstdistvalid(bool value);
  private:
  bool _internal_frontobstdistvalid() const;
  void _internal_set_frontobstdistvalid(bool value);
  public:

  // optional bool rearObstDistValid = 2708;
  bool has_rearobstdistvalid() const;
  private:
  bool _internal_has_rearobstdistvalid() const;
  public:
  void clear_rearobstdistvalid();
  bool rearobstdistvalid() const;
  void set_rearobstdistvalid(bool value);
  private:
  bool _internal_rearobstdistvalid() const;
  void _internal_set_rearobstdistvalid(bool value);
  public:

  // optional bool leftObstDistValid = 569;
  bool has_leftobstdistvalid() const;
  private:
  bool _internal_has_leftobstdistvalid() const;
  public:
  void clear_leftobstdistvalid();
  bool leftobstdistvalid() const;
  void set_leftobstdistvalid(bool value);
  private:
  bool _internal_leftobstdistvalid() const;
  void _internal_set_leftobstdistvalid(bool value);
  public:

  // optional bool rightObstDistValid = 2723;
  bool has_rightobstdistvalid() const;
  private:
  bool _internal_has_rightobstdistvalid() const;
  public:
  void clear_rightobstdistvalid();
  bool rightobstdistvalid() const;
  void set_rightobstdistvalid(bool value);
  private:
  bool _internal_rightobstdistvalid() const;
  void _internal_set_rightobstdistvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float rearobstdist_m_;
  float frontobstdist_m_;
  float leftobstdist_m_;
  float rightobstdist_m_;
  bool frontobstdistvalid_;
  bool rearobstdistvalid_;
  bool leftobstdistvalid_;
  bool rightobstdistvalid_;
  friend struct ::TableStruct_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto;
};
// -------------------------------------------------------------------

class PoseObstacleDist_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port) */ {
 public:
  PoseObstacleDist_array_port();
  virtual ~PoseObstacleDist_array_port();

  PoseObstacleDist_array_port(const PoseObstacleDist_array_port& from);
  PoseObstacleDist_array_port(PoseObstacleDist_array_port&& from) noexcept
    : PoseObstacleDist_array_port() {
    *this = ::std::move(from);
  }

  inline PoseObstacleDist_array_port& operator=(const PoseObstacleDist_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseObstacleDist_array_port& operator=(PoseObstacleDist_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseObstacleDist_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseObstacleDist_array_port* internal_default_instance() {
    return reinterpret_cast<const PoseObstacleDist_array_port*>(
               &_PoseObstacleDist_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PoseObstacleDist_array_port& a, PoseObstacleDist_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseObstacleDist_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseObstacleDist_array_port* New() const final {
    return CreateMaybeMessage<PoseObstacleDist_array_port>(nullptr);
  }

  PoseObstacleDist_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseObstacleDist_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseObstacleDist_array_port& from);
  void MergeFrom(const PoseObstacleDist_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseObstacleDist_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto);
    return ::descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1634,
  };
  // repeated .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist data = 1634;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist >*
      mutable_data();
  private:
  const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& _internal_data(int index) const;
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* _internal_add_data();
  public:
  const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& data(int index) const;
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist > data_;
  friend struct ::TableStruct_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoseObstacleDist

// optional float frontObstDist_m = 485;
inline bool PoseObstacleDist::_internal_has_frontobstdist_m() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_frontobstdist_m() const {
  return _internal_has_frontobstdist_m();
}
inline void PoseObstacleDist::clear_frontobstdist_m() {
  frontobstdist_m_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PoseObstacleDist::_internal_frontobstdist_m() const {
  return frontobstdist_m_;
}
inline float PoseObstacleDist::frontobstdist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.frontObstDist_m)
  return _internal_frontobstdist_m();
}
inline void PoseObstacleDist::_internal_set_frontobstdist_m(float value) {
  _has_bits_[0] |= 0x00000002u;
  frontobstdist_m_ = value;
}
inline void PoseObstacleDist::set_frontobstdist_m(float value) {
  _internal_set_frontobstdist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.frontObstDist_m)
}

// optional bool frontObstDistValid = 1826;
inline bool PoseObstacleDist::_internal_has_frontobstdistvalid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_frontobstdistvalid() const {
  return _internal_has_frontobstdistvalid();
}
inline void PoseObstacleDist::clear_frontobstdistvalid() {
  frontobstdistvalid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PoseObstacleDist::_internal_frontobstdistvalid() const {
  return frontobstdistvalid_;
}
inline bool PoseObstacleDist::frontobstdistvalid() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.frontObstDistValid)
  return _internal_frontobstdistvalid();
}
inline void PoseObstacleDist::_internal_set_frontobstdistvalid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  frontobstdistvalid_ = value;
}
inline void PoseObstacleDist::set_frontobstdistvalid(bool value) {
  _internal_set_frontobstdistvalid(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.frontObstDistValid)
}

// optional float rearObstDist_m = 3413;
inline bool PoseObstacleDist::_internal_has_rearobstdist_m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_rearobstdist_m() const {
  return _internal_has_rearobstdist_m();
}
inline void PoseObstacleDist::clear_rearobstdist_m() {
  rearobstdist_m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PoseObstacleDist::_internal_rearobstdist_m() const {
  return rearobstdist_m_;
}
inline float PoseObstacleDist::rearobstdist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rearObstDist_m)
  return _internal_rearobstdist_m();
}
inline void PoseObstacleDist::_internal_set_rearobstdist_m(float value) {
  _has_bits_[0] |= 0x00000001u;
  rearobstdist_m_ = value;
}
inline void PoseObstacleDist::set_rearobstdist_m(float value) {
  _internal_set_rearobstdist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rearObstDist_m)
}

// optional bool rearObstDistValid = 2708;
inline bool PoseObstacleDist::_internal_has_rearobstdistvalid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_rearobstdistvalid() const {
  return _internal_has_rearobstdistvalid();
}
inline void PoseObstacleDist::clear_rearobstdistvalid() {
  rearobstdistvalid_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PoseObstacleDist::_internal_rearobstdistvalid() const {
  return rearobstdistvalid_;
}
inline bool PoseObstacleDist::rearobstdistvalid() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rearObstDistValid)
  return _internal_rearobstdistvalid();
}
inline void PoseObstacleDist::_internal_set_rearobstdistvalid(bool value) {
  _has_bits_[0] |= 0x00000020u;
  rearobstdistvalid_ = value;
}
inline void PoseObstacleDist::set_rearobstdistvalid(bool value) {
  _internal_set_rearobstdistvalid(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rearObstDistValid)
}

// optional float leftObstDist_m = 529;
inline bool PoseObstacleDist::_internal_has_leftobstdist_m() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_leftobstdist_m() const {
  return _internal_has_leftobstdist_m();
}
inline void PoseObstacleDist::clear_leftobstdist_m() {
  leftobstdist_m_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PoseObstacleDist::_internal_leftobstdist_m() const {
  return leftobstdist_m_;
}
inline float PoseObstacleDist::leftobstdist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.leftObstDist_m)
  return _internal_leftobstdist_m();
}
inline void PoseObstacleDist::_internal_set_leftobstdist_m(float value) {
  _has_bits_[0] |= 0x00000004u;
  leftobstdist_m_ = value;
}
inline void PoseObstacleDist::set_leftobstdist_m(float value) {
  _internal_set_leftobstdist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.leftObstDist_m)
}

// optional bool leftObstDistValid = 569;
inline bool PoseObstacleDist::_internal_has_leftobstdistvalid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_leftobstdistvalid() const {
  return _internal_has_leftobstdistvalid();
}
inline void PoseObstacleDist::clear_leftobstdistvalid() {
  leftobstdistvalid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PoseObstacleDist::_internal_leftobstdistvalid() const {
  return leftobstdistvalid_;
}
inline bool PoseObstacleDist::leftobstdistvalid() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.leftObstDistValid)
  return _internal_leftobstdistvalid();
}
inline void PoseObstacleDist::_internal_set_leftobstdistvalid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  leftobstdistvalid_ = value;
}
inline void PoseObstacleDist::set_leftobstdistvalid(bool value) {
  _internal_set_leftobstdistvalid(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.leftObstDistValid)
}

// optional float rightObstDist_m = 1158;
inline bool PoseObstacleDist::_internal_has_rightobstdist_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_rightobstdist_m() const {
  return _internal_has_rightobstdist_m();
}
inline void PoseObstacleDist::clear_rightobstdist_m() {
  rightobstdist_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PoseObstacleDist::_internal_rightobstdist_m() const {
  return rightobstdist_m_;
}
inline float PoseObstacleDist::rightobstdist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rightObstDist_m)
  return _internal_rightobstdist_m();
}
inline void PoseObstacleDist::_internal_set_rightobstdist_m(float value) {
  _has_bits_[0] |= 0x00000008u;
  rightobstdist_m_ = value;
}
inline void PoseObstacleDist::set_rightobstdist_m(float value) {
  _internal_set_rightobstdist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rightObstDist_m)
}

// optional bool rightObstDistValid = 2723;
inline bool PoseObstacleDist::_internal_has_rightobstdistvalid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PoseObstacleDist::has_rightobstdistvalid() const {
  return _internal_has_rightobstdistvalid();
}
inline void PoseObstacleDist::clear_rightobstdistvalid() {
  rightobstdistvalid_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PoseObstacleDist::_internal_rightobstdistvalid() const {
  return rightobstdistvalid_;
}
inline bool PoseObstacleDist::rightobstdistvalid() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rightObstDistValid)
  return _internal_rightobstdistvalid();
}
inline void PoseObstacleDist::_internal_set_rightobstdistvalid(bool value) {
  _has_bits_[0] |= 0x00000080u;
  rightobstdistvalid_ = value;
}
inline void PoseObstacleDist::set_rightobstdistvalid(bool value) {
  _internal_set_rightobstdistvalid(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist.rightObstDistValid)
}

// -------------------------------------------------------------------

// PoseObstacleDist_array_port

// repeated .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist data = 1634;
inline int PoseObstacleDist_array_port::_internal_data_size() const {
  return data_.size();
}
inline int PoseObstacleDist_array_port::data_size() const {
  return _internal_data_size();
}
inline void PoseObstacleDist_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* PoseObstacleDist_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist >*
PoseObstacleDist_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port.data)
  return &data_;
}
inline const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& PoseObstacleDist_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& PoseObstacleDist_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* PoseObstacleDist_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* PoseObstacleDist_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist >&
PoseObstacleDist_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pose_obstacle_dist
}  // namespace ap_tp
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto
