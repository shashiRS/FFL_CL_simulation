// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/traj_plan_debug_port.proto

#include "ap_tp/traj_plan_debug_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_tp {
namespace traj_plan_debug_port {
class TrajPlanDebugPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajPlanDebugPort> _instance;
} _TrajPlanDebugPort_default_instance_;
class TrajPlanDebugPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajPlanDebugPort_array_port> _instance;
} _TrajPlanDebugPort_array_port_default_instance_;
}  // namespace traj_plan_debug_port
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::traj_plan_debug_port::_TrajPlanDebugPort_default_instance_;
    new (ptr) ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_TrajPlanDebugPort_array_port_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::traj_plan_debug_port::_TrajPlanDebugPort_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajPlanDebugPort_array_port_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajPlanDebugPort_array_port_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto}, {
      &scc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, debugint_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, debugfloat_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, mnumofreplancalls_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, mtrajplanstate_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, mreplansuccessful_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort, mstateentry_nu_),
  4,
  0,
  ~0u,
  ~0u,
  3,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort)},
  { 21, 27, sizeof(::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::traj_plan_debug_port::_TrajPlanDebugPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::traj_plan_debug_port::_TrajPlanDebugPort_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ap_tp/traj_plan_debug_port.proto\022\035pb.a"
  "p_tp.traj_plan_debug_port\032\027eco/signal_he"
  "ader.proto\"\373\001\n\021TrajPlanDebugPort\022\030\n\017uiVe"
  "rsionNumber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132"
  "\".pb.eco.signal_header.SignalHeader\022\021\n\010d"
  "ebugInt\030\316\t \003(\021\022\023\n\ndebugFloat\030\371\017 \003(\002\022\032\n\021m"
  "NumOfReplanCalls\030\265\r \001(\r\022\027\n\016mTrajPlanStat"
  "e\030\305\030 \001(\r\022\035\n\024mReplanSuccessful_nu\030\273\005 \001(\010\022"
  "\027\n\016mStateEntry_nu\030\363\023 \001(\010\"_\n\034TrajPlanDebu"
  "gPort_array_port\022\?\n\004data\030\211\025 \003(\01320.pb.ap_"
  "tp.traj_plan_debug_port.TrajPlanDebugPor"
  "t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_sccs[2] = {
  &scc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto.base,
  &scc_info_TrajPlanDebugPort_array_port_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_once;
static bool descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto = {
  &descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto, "ap_tp/traj_plan_debug_port.proto", 441,
  &descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_once, descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_sccs, descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto::offsets,
  file_level_metadata_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto, file_level_service_descriptors_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto), true);
namespace pb {
namespace ap_tp {
namespace traj_plan_debug_port {

// ===================================================================

void TrajPlanDebugPort::InitAsDefaultInstance() {
  ::pb::ap_tp::traj_plan_debug_port::_TrajPlanDebugPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class TrajPlanDebugPort::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajPlanDebugPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const TrajPlanDebugPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mnumofreplancalls(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mtrajplanstate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mreplansuccessful_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mstateentry_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
TrajPlanDebugPort::_Internal::ssigheader(const TrajPlanDebugPort* msg) {
  return *msg->ssigheader_;
}
void TrajPlanDebugPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TrajPlanDebugPort::TrajPlanDebugPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
}
TrajPlanDebugPort::TrajPlanDebugPort(const TrajPlanDebugPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      debugint_(from.debugint_),
      debugfloat_(from.debugfloat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&mreplansuccessful_nu_, &from.mreplansuccessful_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&mtrajplanstate_) -
    reinterpret_cast<char*>(&mreplansuccessful_nu_)) + sizeof(mtrajplanstate_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
}

void TrajPlanDebugPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtrajplanstate_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(mtrajplanstate_));
}

TrajPlanDebugPort::~TrajPlanDebugPort() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  SharedDtor();
}

void TrajPlanDebugPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void TrajPlanDebugPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajPlanDebugPort& TrajPlanDebugPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajPlanDebugPort_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void TrajPlanDebugPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debugint_.Clear();
  debugfloat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&mreplansuccessful_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtrajplanstate_) -
        reinterpret_cast<char*>(&mreplansuccessful_nu_)) + sizeof(mtrajplanstate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajPlanDebugPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool mReplanSuccessful_nu = 699;
      case 699:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_mreplansuccessful_nu(&has_bits);
          mreplansuccessful_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 debugInt = 1230;
      case 1230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9840>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_debugint(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mNumOfReplanCalls = 1717;
      case 1717:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_mnumofreplancalls(&has_bits);
          mnumofreplancalls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float debugFloat = 2041;
      case 2041:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugfloat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16333>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_debugfloat(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mStateEntry_nu = 2547;
      case 2547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_mstateentry_nu(&has_bits);
          mstateentry_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mTrajPlanState = 3141;
      case 3141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mtrajplanstate(&has_bits);
          mtrajplanstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajPlanDebugPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool mReplanSuccessful_nu = 699;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(699, this->_internal_mreplansuccessful_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated sint32 debugInt = 1230;
  for (int i = 0, n = this->_internal_debugint_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1230, this->_internal_debugint(i), target);
  }

  // optional uint32 mNumOfReplanCalls = 1717;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1717, this->_internal_mnumofreplancalls(), target);
  }

  // repeated float debugFloat = 2041;
  for (int i = 0, n = this->_internal_debugfloat_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2041, this->_internal_debugfloat(i), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional bool mStateEntry_nu = 2547;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2547, this->_internal_mstateentry_nu(), target);
  }

  // optional uint32 mTrajPlanState = 3141;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3141, this->_internal_mtrajplanstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  return target;
}

size_t TrajPlanDebugPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 debugInt = 1230;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->debugint_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugint_size());
    total_size += data_size;
  }

  // repeated float debugFloat = 2041;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_debugfloat_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugfloat_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional bool mReplanSuccessful_nu = 699;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool mStateEntry_nu = 2547;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 1;
    }

    // optional uint32 mNumOfReplanCalls = 1717;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mnumofreplancalls());
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional uint32 mTrajPlanState = 3141;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mtrajplanstate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajPlanDebugPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajPlanDebugPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajPlanDebugPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
    MergeFrom(*source);
  }
}

void TrajPlanDebugPort::MergeFrom(const TrajPlanDebugPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debugint_.MergeFrom(from.debugint_);
  debugfloat_.MergeFrom(from.debugfloat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      mreplansuccessful_nu_ = from.mreplansuccessful_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      mstateentry_nu_ = from.mstateentry_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      mnumofreplancalls_ = from.mnumofreplancalls_;
    }
    if (cached_has_bits & 0x00000010u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000020u) {
      mtrajplanstate_ = from.mtrajplanstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajPlanDebugPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajPlanDebugPort::CopyFrom(const TrajPlanDebugPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajPlanDebugPort::IsInitialized() const {
  return true;
}

void TrajPlanDebugPort::InternalSwap(TrajPlanDebugPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  debugint_.InternalSwap(&other->debugint_);
  debugfloat_.InternalSwap(&other->debugfloat_);
  swap(ssigheader_, other->ssigheader_);
  swap(mreplansuccessful_nu_, other->mreplansuccessful_nu_);
  swap(mstateentry_nu_, other->mstateentry_nu_);
  swap(mnumofreplancalls_, other->mnumofreplancalls_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(mtrajplanstate_, other->mtrajplanstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajPlanDebugPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajPlanDebugPort_array_port::InitAsDefaultInstance() {
}
class TrajPlanDebugPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajPlanDebugPort_array_port>()._has_bits_);
};

TrajPlanDebugPort_array_port::TrajPlanDebugPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
}
TrajPlanDebugPort_array_port::TrajPlanDebugPort_array_port(const TrajPlanDebugPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
}

void TrajPlanDebugPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajPlanDebugPort_array_port_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto.base);
}

TrajPlanDebugPort_array_port::~TrajPlanDebugPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  SharedDtor();
}

void TrajPlanDebugPort_array_port::SharedDtor() {
}

void TrajPlanDebugPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajPlanDebugPort_array_port& TrajPlanDebugPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajPlanDebugPort_array_port_ap_5ftp_2ftraj_5fplan_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void TrajPlanDebugPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajPlanDebugPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort data = 2697;
      case 2697:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajPlanDebugPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort data = 2697;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2697, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  return target;
}

size_t TrajPlanDebugPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort data = 2697;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajPlanDebugPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajPlanDebugPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajPlanDebugPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
    MergeFrom(*source);
  }
}

void TrajPlanDebugPort_array_port::MergeFrom(const TrajPlanDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TrajPlanDebugPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajPlanDebugPort_array_port::CopyFrom(const TrajPlanDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.traj_plan_debug_port.TrajPlanDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajPlanDebugPort_array_port::IsInitialized() const {
  return true;
}

void TrajPlanDebugPort_array_port::InternalSwap(TrajPlanDebugPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajPlanDebugPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace traj_plan_debug_port
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort* Arena::CreateMaybeMessage< ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::traj_plan_debug_port::TrajPlanDebugPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
