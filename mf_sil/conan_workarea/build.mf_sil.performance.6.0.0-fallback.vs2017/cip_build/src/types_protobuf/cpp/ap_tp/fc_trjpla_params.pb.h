// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/fc_trjpla_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "ap_tp/fc_taposd_params.pb.h"
#include "ap_common/fc_trjpla_vehicle_params.pb.h"
#include "ap_common/fc_trjpla_sys_func_params.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto;
namespace pb {
namespace ap_tp {
namespace fc_trjpla_params {
class FC_TRJPLA_Params;
class FC_TRJPLA_ParamsDefaultTypeInternal;
extern FC_TRJPLA_ParamsDefaultTypeInternal _FC_TRJPLA_Params_default_instance_;
class FC_TRJPLA_Params_array_port;
class FC_TRJPLA_Params_array_portDefaultTypeInternal;
extern FC_TRJPLA_Params_array_portDefaultTypeInternal _FC_TRJPLA_Params_array_port_default_instance_;
}  // namespace fc_trjpla_params
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* Arena::CreateMaybeMessage<::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params>(Arena*);
template<> ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port* Arena::CreateMaybeMessage<::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_tp {
namespace fc_trjpla_params {

// ===================================================================

class FC_TRJPLA_Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params) */ {
 public:
  FC_TRJPLA_Params();
  virtual ~FC_TRJPLA_Params();

  FC_TRJPLA_Params(const FC_TRJPLA_Params& from);
  FC_TRJPLA_Params(FC_TRJPLA_Params&& from) noexcept
    : FC_TRJPLA_Params() {
    *this = ::std::move(from);
  }

  inline FC_TRJPLA_Params& operator=(const FC_TRJPLA_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TRJPLA_Params& operator=(FC_TRJPLA_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TRJPLA_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TRJPLA_Params* internal_default_instance() {
    return reinterpret_cast<const FC_TRJPLA_Params*>(
               &_FC_TRJPLA_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FC_TRJPLA_Params& a, FC_TRJPLA_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TRJPLA_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TRJPLA_Params* New() const final {
    return CreateMaybeMessage<FC_TRJPLA_Params>(nullptr);
  }

  FC_TRJPLA_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TRJPLA_Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TRJPLA_Params& from);
  void MergeFrom(const FC_TRJPLA_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TRJPLA_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto);
    return ::descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAPPADAPTVELXDISTANCEMFieldNumber = 65,
    kAPPKEYCORNERSWHEELFieldNumber = 754,
    kAPPKEYCORNERSCARBODYFieldNumber = 978,
    kAPPADAPTVELYVELOCITYMPSFieldNumber = 3711,
    kTaposdParamsFieldNumber = 236,
    kSysFuncParamsFieldNumber = 458,
    kSSigHeaderFieldNumber = 1033,
    kVehicleParamsFieldNumber = 2431,
    kAPPNUMTAPOSEVALFieldNumber = 12,
    kAPPMAXDISTTPTOINTERMPONESTROKEMFieldNumber = 38,
    kAPPPLANDISTANCEMARGINMFieldNumber = 88,
    kAPPRATIOPREPREPALIGNAXISFieldNumber = 94,
    kAPPDIRECTFWDSTEPDISTMFieldNumber = 105,
    kAPPMAXVELINPARSLOTMPSFieldNumber = 134,
    kAPPROICORNERXPAROUTMFieldNumber = 149,
    kAPPMAXNUMCLOTHOIDLOOPNUFieldNumber = 183,
    kAPPROICORNERXANGSINMFieldNumber = 216,
    kAPPROICORNERYPRPFOUTMFieldNumber = 223,
    kAPPENVFLICKERINGCOMPMFieldNumber = 226,
    kMPPROICORNERXPRPBOUTOPMFieldNumber = 238,
    kAPPSAFEPASSMARGINMFieldNumber = 240,
    kAPPROICORNERXPARINMFieldNumber = 276,
    kAPPROICORNERYPRPBOUTMFieldNumber = 281,
    kAPPPERPBWDINLONGDEVFCTRFieldNumber = 292,
    kAPPDIRECTFWDSTARTANGLETOLDEGFieldNumber = 310,
    kAPPENDPOSENEIGHBOURDISTMFieldNumber = 335,
    kAPPSTEPMOVINGRATIOCLOCOLLFieldNumber = 343,
    kMPPROIEDGELENGTHMFieldNumber = 373,
    kAPPADAPTVELSIZENUFieldNumber = 395,
    kMPPROICORNERYANGRINOPMFieldNumber = 419,
    kAPPDISTANCEFORLASTCALLMANPERPFieldNumber = 476,
    kMPPROICORNERXANGSINOPMFieldNumber = 481,
    kAPPROICORNERYANGROUTMFieldNumber = 499,
    kMPPROICORNERYPAROUTOPMFieldNumber = 578,
    kAPPNUMPOSECHECKDRVNPATHFieldNumber = 586,
    kAPPROICORNERXPRPBOUTMFieldNumber = 620,
    kAPPROICORNERXANGROUTMFieldNumber = 646,
    kAPPROICORNERYANGSOUTOPMFieldNumber = 656,
    kAPPSAFETYTURNRADIUSAXISMFieldNumber = 662,
    kAPPLONGSHIFTINTERMEDWSTAPOSMFieldNumber = 698,
    kAPPCLOTHOIDVELTUNESTEPMPSFieldNumber = 751,
    kMPPROICORNERYPRPFOUTOPMFieldNumber = 807,
    kAPPROICORNERXANGROUTOPMFieldNumber = 809,
    kAPPMINRADIUSADDCLOTHOIDMFieldNumber = 841,
    kAPPASYCLOSTMINLENGTHMFieldNumber = 862,
    kAPPRATIOSTRAIGHTPREPAREFWDSTROKEPREPALIGNFieldNumber = 881,
    kAPPMAXVELCLOSEOBSTACLEMPSFieldNumber = 883,
    kAPPSTRAIGHTPERPEXTRADISTMFieldNumber = 895,
    kMPPROICORNERXPRPBINOPMFieldNumber = 897,
    kAPPDESIREDDISTTOOBSTMFieldNumber = 921,
    kAPPROICORNERXPRPFOUTMFieldNumber = 938,
    kAPPLENGTHLONGCLOTRANSITMFieldNumber = 951,
    kAPPFACTORDETERMINATIONNUFieldNumber = 952,
    kAPPROICORNERXPRPFINMFieldNumber = 956,
    kAPPPARKOUTPARANGLEMAXLOOPFieldNumber = 965,
    kAPPPERPFWDINYAWDEVFCTRFieldNumber = 968,
    kAPPBESTPATHTIMETHRSFieldNumber = 983,
    kAPPDISTSTARTENDKEEPPATHMFieldNumber = 994,
    kAPPPERPBWDINLATDEVFCTRFieldNumber = 1001,
    kAPPROICORNERXPRPFINOPMFieldNumber = 1002,
    kAPPADDSTRAIGHTFSFMFieldNumber = 1008,
    kMPPROICORNERYPRPBINMFieldNumber = 1020,
    kMPPROICORNERYPRPFINOPMFieldNumber = 1039,
    kAPPMINPARKINGVELMPSFieldNumber = 1067,
    kMPPROICORNERXANGROUTMFieldNumber = 1111,
    kAPPROICORNERYPRPBINOPMFieldNumber = 1124,
    kAPPPLANNINGHORIZONMFieldNumber = 1134,
    kMPPROICORNERXPRPBOUTMFieldNumber = 1213,
    kAPPRATIOADDALIGNRADIUSANGLEDFieldNumber = 1219,
    kAPPPREPREPALIGNRADIUSEXTMFieldNumber = 1230,
    kAPPROICORNERXPRPFOUTOPMFieldNumber = 1265,
    kAPPSNAPRATIOTOAVOIDCOLLFieldNumber = 1267,
    kMPPROICORNERYANGROUTOPMFieldNumber = 1279,
    kAPPMINLONGDEVFORSTRAIGHTREPLPARMFieldNumber = 1306,
    kAPPROICORNERXPRPBINMFieldNumber = 1309,
    kAPPPARKOUTEGODISTTOFAKEOBJECTSPERPMFieldNumber = 1316,
    kMPPROICORNERXANGSOUTOPMFieldNumber = 1350,
    kMPPROICORNERYPRPFINMFieldNumber = 1373,
    kAPPPARKOUTBLINDDISTANCEPARMFieldNumber = 1379,
    kAPPSAVEEMREPLANNINGNUFieldNumber = 1380,
    kAPPROICORNERXANGRINMFieldNumber = 1400,
    kMPPROICORNERXPRPFOUTMFieldNumber = 1403,
    kAPPMAXDISTPARAWOBCKTMFieldNumber = 1432,
    kAPPROICORNERXPAROUTOPMFieldNumber = 1447,
    kAPPLENGTHSHORTCLOTRANSITMFieldNumber = 1474,
    kAPPENABLEOUTINSTROKESREPLANPARALLELFieldNumber = 1038,
    kAPPENABLELASTCALLMANEUVERPERPFieldNumber = 2093,
    kAPPENABLEFIRSTSTROKEFWDPERPBWDFieldNumber = 1893,
    kAPPENABLEEARLYSTEERFIRSTSTRKFWDFieldNumber = 1057,
    kAPPMINANGDIFFINFLECTIONRADFieldNumber = 1534,
    kAPPROICORNERYANGSINOPMFieldNumber = 1540,
    kMPPROICORNERYPRPFOUTMFieldNumber = 1550,
    kAPPMAXORIENTATIONDEVFORSTRAIGHTREPLPARRADFieldNumber = 1553,
    kAPPRATIODISTANCESHORTINGFIRSTSTRKFWDFieldNumber = 1565,
    kAPPMAXNUMCLOVELLOOPNUFieldNumber = 1589,
    kMPPROICORNERYANGSINMFieldNumber = 1593,
    kAPPROICORNERXANGRINOPMFieldNumber = 1606,
    kAPPBSTPOSESTEPSZDRVNPATHNUFieldNumber = 1624,
    kAPPENABLEFIRSTSTRKFWDPARFieldNumber = 257,
    kAPPPARKOUTENABLEFAKEOBJECTSFieldNumber = 2997,
    kMPPROICORNERYPAROUTMFieldNumber = 1652,
    kAPPDISABLESCANGREATDISTNUFieldNumber = 727,
    kAPPDISABLEPLANNERNUFieldNumber = 1985,
    kAPPENABLEONESTROKEPARKINGFieldNumber = 2387,
    kAPPENABLEDYNAMICREPLANNINGFieldNumber = 1584,
    kAPPMAXDEVIATIONCLOTHOIDMFieldNumber = 1761,
    kAPPPARKOUTBLINDDISTANCEANGMFieldNumber = 1813,
    kMPPROICORNERYANGROUTMFieldNumber = 1826,
    kAPPROICORNERYPRPBOUTOPMFieldNumber = 1848,
    kAPPMISALIGNEDSTARTPOSEANGLERADFieldNumber = 1897,
    kAPPSTRAIGHTCONVALLOWEDANGRADFieldNumber = 1916,
    kAPPPARKOUTPARSAFTEYDISTMFieldNumber = 1932,
    kAPPMINNUMVALIDTOOUTPUTNUFieldNumber = 1944,
    kAPPPARNODYNREPLANDISTTOSTOPMFieldNumber = 1975,
    kMPPROICORNERYPRPBOUTMFieldNumber = 1992,
    kAPPPERPFWDINLONGDEVFCTRFieldNumber = 2024,
    kUiVersionNumberFieldNumber = 2124,
    kAPPMAXPARKINGVELBWDMPSFieldNumber = 2140,
    kAPPROICORNERYPRPFINOPMFieldNumber = 2187,
    kAPPROICORNERYANGSINMFieldNumber = 2193,
    kAPPROIEDGELENGTHMFieldNumber = 2199,
    kAPPPERPENDLIMITVELDISTMFieldNumber = 2236,
    kAPPFACTORSAFETYNUFieldNumber = 2249,
    kAPPROICORNERYPAROUTMFieldNumber = 2268,
    kMPPROICORNERYPRPBINOPMFieldNumber = 2272,
    kMPPROICORNERXPARINOPMFieldNumber = 2277,
    kMPPROICORNERXPAROUTOPMFieldNumber = 2339,
    kAPPPARKOUTEGODISTTOFAKEOBJECTSANGMFieldNumber = 2395,
    kAPPROICORNERYANGSOUTMFieldNumber = 2450,
    kAPPMAXPARKINGVELFWDMPSFieldNumber = 2458,
    kAPPMINDISTSTARTTGTAXISMFieldNumber = 2463,
    kAPPROICORNERYPARINOPMFieldNumber = 2474,
    kAPPROICORNERXPRPBOUTOPMFieldNumber = 2500,
    kAPPPRPFWDRSCALE1STSTRKMFieldNumber = 2511,
    kAPPINCCIRLENGTHFORSCUROUTMFieldNumber = 2525,
    kMPPROICORNERXANGROUTOPMFieldNumber = 2563,
    kAPPROICORNERYPRPFOUTOPMFieldNumber = 2573,
    kAPPOUTVRTXRADIUSSCALINGNUFieldNumber = 2621,
    kAPPMAXLATDEVFORSTRAIGHTREPLPARMFieldNumber = 2674,
    kAPPRATIOCONFINEDSPACEFieldNumber = 2679,
    kMPPROICORNERYANGSINOPMFieldNumber = 2688,
    kAPPMAXALIGNMENTRADIUSMFieldNumber = 2697,
    kMPPROICORNERXANGRINOPMFieldNumber = 2754,
    kAPPMINRADIUSADDCIRCLEMFieldNumber = 2785,
    kAPPROICORNERXANGSOUTMFieldNumber = 2791,
    kAPPPARKOUTBLINDDISTANCEPERPMFieldNumber = 2794,
    kAPPMINALIGNMENTANGLERADFieldNumber = 2798,
    kAPPMAXPREPSTROKELENSTRAIGHTMFieldNumber = 2817,
    kAPPMAXATTEMPTWRAPUPTRIANGLEFieldNumber = 2846,
    kAPPPARKOUTEGODISTTOFAKEOBJECTSPARMFieldNumber = 2861,
    kAPPMAXHEIGHTOFTRIANGLECLOCOLLISIONMFieldNumber = 2917,
    kAPPVIRTUALOBJDISTTOTPMFieldNumber = 2931,
    kAPPRATIOADDMINRADIUSANGLEDFieldNumber = 2952,
    kMPPROICORNERYANGSOUTOPMFieldNumber = 3002,
    kMPPROICORNERXANGRINMFieldNumber = 3024,
    kAPPPERPBWDINYAWDEVFCTRFieldNumber = 3031,
    kAPPROICORNERYPRPFINMFieldNumber = 3061,
    kAPPPERPFWDINLATDEVFCTRFieldNumber = 3062,
    kAPPMAXSCURVEDISTTOTGTPOSEMFieldNumber = 3124,
    kMPPROICORNERXANGSOUTMFieldNumber = 3126,
    kMPPROICORNERYPARINMFieldNumber = 3130,
    kAPPROICORNERXANGSOUTOPMFieldNumber = 3180,
    kAPPROICORNERXPARINOPMFieldNumber = 3273,
    kAPPRADIUSEXTPERPFINSTROMFieldNumber = 3318,
    kMPPROICORNERXPRPFINMFieldNumber = 3348,
    kAPPPARREPLMAXEXTENDDISTAFTERSCURVEMFieldNumber = 3351,
    kAPPROICORNERYANGRINOPMFieldNumber = 3367,
    kAPPROICORNERYANGRINMFieldNumber = 3377,
    kAPPMAXDISTPERPWOBCKTMFieldNumber = 3393,
    kAPPROICORNERYPRPBINMFieldNumber = 3412,
    kAPPROICORNERXANGSINOPMFieldNumber = 3429,
    kMPPROICORNERYPARINOPMFieldNumber = 3462,
    kAPPMAXPOLYVELMPSFieldNumber = 3463,
    kAPPPARMAXDISTFORSYMSCURVEMFieldNumber = 3518,
    kAPPROICORNERYANGROUTOPMFieldNumber = 3541,
    kMPPROICORNERXPRPFOUTOPMFieldNumber = 3547,
    kMPPROICORNERYPRPBOUTOPMFieldNumber = 3602,
    kAPPBESTPATHGOALDEVTHRNUFieldNumber = 3633,
    kMPPROICORNERXPAROUTMFieldNumber = 3645,
    kAPPPOUTPERPSTRAIGHTEXTMFieldNumber = 3650,
    kAPPROICORNERYPARINMFieldNumber = 3665,
    kMPPROICORNERXANGSINMFieldNumber = 3696,
    kAPPMINPREPSTROKELENSTRAIGHTMFieldNumber = 3756,
    kAPPROICORNERYPAROUTOPMFieldNumber = 3782,
    kAPPROICORNERXPRPBINOPMFieldNumber = 3845,
    kAPPDISTTOPBFORMISALSTARTPOSEPLANNINGMFieldNumber = 3895,
    kMPPROICORNERYANGSOUTMFieldNumber = 3907,
    kMPPROICORNERXPRPFINOPMFieldNumber = 3950,
    kAPPADDSTRAIGHTTOWHEELSTOPPERMFieldNumber = 4001,
    kAPPMAXDISTANCESHORTENFIRSTSTRKFWDFieldNumber = 2716735,
    kMPPROICORNERYANGRINMFieldNumber = 3222586,
    kMPPROICORNERXPARINMFieldNumber = 8258625,
    kMPPROICORNERXPRPBINMFieldNumber = 10939324,
    kAPPBESTPATHLENGTHTHRMFieldNumber = 11680804,
    kAPPPERPSTRAIGHTMINBWDDISTFWDSTRKMFieldNumber = 14945121,
  };
  // repeated float AP_P_ADAPT_VEL_X_DISTANCE_M = 65;
  int ap_p_adapt_vel_x_distance_m_size() const;
  private:
  int _internal_ap_p_adapt_vel_x_distance_m_size() const;
  public:
  void clear_ap_p_adapt_vel_x_distance_m();
  private:
  float _internal_ap_p_adapt_vel_x_distance_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ap_p_adapt_vel_x_distance_m() const;
  void _internal_add_ap_p_adapt_vel_x_distance_m(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ap_p_adapt_vel_x_distance_m();
  public:
  float ap_p_adapt_vel_x_distance_m(int index) const;
  void set_ap_p_adapt_vel_x_distance_m(int index, float value);
  void add_ap_p_adapt_vel_x_distance_m(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ap_p_adapt_vel_x_distance_m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ap_p_adapt_vel_x_distance_m();

  // repeated uint32 AP_P_KEY_CORNERS_WHEEL = 754;
  int ap_p_key_corners_wheel_size() const;
  private:
  int _internal_ap_p_key_corners_wheel_size() const;
  public:
  void clear_ap_p_key_corners_wheel();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_key_corners_wheel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ap_p_key_corners_wheel() const;
  void _internal_add_ap_p_key_corners_wheel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ap_p_key_corners_wheel();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_key_corners_wheel(int index) const;
  void set_ap_p_key_corners_wheel(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ap_p_key_corners_wheel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ap_p_key_corners_wheel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ap_p_key_corners_wheel();

  // repeated uint32 AP_P_KEY_CORNERS_CARBODY = 978;
  int ap_p_key_corners_carbody_size() const;
  private:
  int _internal_ap_p_key_corners_carbody_size() const;
  public:
  void clear_ap_p_key_corners_carbody();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_key_corners_carbody(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ap_p_key_corners_carbody() const;
  void _internal_add_ap_p_key_corners_carbody(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ap_p_key_corners_carbody();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_key_corners_carbody(int index) const;
  void set_ap_p_key_corners_carbody(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ap_p_key_corners_carbody(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ap_p_key_corners_carbody() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ap_p_key_corners_carbody();

  // repeated float AP_P_ADAPT_VEL_Y_VELOCITY_MPS = 3711;
  int ap_p_adapt_vel_y_velocity_mps_size() const;
  private:
  int _internal_ap_p_adapt_vel_y_velocity_mps_size() const;
  public:
  void clear_ap_p_adapt_vel_y_velocity_mps();
  private:
  float _internal_ap_p_adapt_vel_y_velocity_mps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ap_p_adapt_vel_y_velocity_mps() const;
  void _internal_add_ap_p_adapt_vel_y_velocity_mps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ap_p_adapt_vel_y_velocity_mps();
  public:
  float ap_p_adapt_vel_y_velocity_mps(int index) const;
  void set_ap_p_adapt_vel_y_velocity_mps(int index, float value);
  void add_ap_p_adapt_vel_y_velocity_mps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ap_p_adapt_vel_y_velocity_mps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ap_p_adapt_vel_y_velocity_mps();

  // optional .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params taposdParams = 236;
  bool has_taposdparams() const;
  private:
  bool _internal_has_taposdparams() const;
  public:
  void clear_taposdparams();
  const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& taposdparams() const;
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* release_taposdparams();
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* mutable_taposdparams();
  void set_allocated_taposdparams(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* taposdparams);
  private:
  const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& _internal_taposdparams() const;
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* _internal_mutable_taposdparams();
  public:

  // optional .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params sysFuncParams = 458;
  bool has_sysfuncparams() const;
  private:
  bool _internal_has_sysfuncparams() const;
  public:
  void clear_sysfuncparams();
  const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& sysfuncparams() const;
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* release_sysfuncparams();
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* mutable_sysfuncparams();
  void set_allocated_sysfuncparams(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* sysfuncparams);
  private:
  const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& _internal_sysfuncparams() const;
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* _internal_mutable_sysfuncparams();
  public:

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional .pb.ap_common.fc_trjpla_vehicle_params.FC_TRJPLA_Vehicle_Params vehicleParams = 2431;
  bool has_vehicleparams() const;
  private:
  bool _internal_has_vehicleparams() const;
  public:
  void clear_vehicleparams();
  const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params& vehicleparams() const;
  ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* release_vehicleparams();
  ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* mutable_vehicleparams();
  void set_allocated_vehicleparams(::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* vehicleparams);
  private:
  const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params& _internal_vehicleparams() const;
  ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* _internal_mutable_vehicleparams();
  public:

  // optional uint32 AP_P_NUM_TA_POS_EVAL = 12;
  bool has_ap_p_num_ta_pos_eval() const;
  private:
  bool _internal_has_ap_p_num_ta_pos_eval() const;
  public:
  void clear_ap_p_num_ta_pos_eval();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_num_ta_pos_eval() const;
  void set_ap_p_num_ta_pos_eval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_num_ta_pos_eval() const;
  void _internal_set_ap_p_num_ta_pos_eval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M = 38;
  bool has_ap_p_max_dist_tp_to_intermp_one_stroke_m() const;
  private:
  bool _internal_has_ap_p_max_dist_tp_to_intermp_one_stroke_m() const;
  public:
  void clear_ap_p_max_dist_tp_to_intermp_one_stroke_m();
  float ap_p_max_dist_tp_to_intermp_one_stroke_m() const;
  void set_ap_p_max_dist_tp_to_intermp_one_stroke_m(float value);
  private:
  float _internal_ap_p_max_dist_tp_to_intermp_one_stroke_m() const;
  void _internal_set_ap_p_max_dist_tp_to_intermp_one_stroke_m(float value);
  public:

  // optional float AP_P_PLAN_DISTANCE_MARGIN_M = 88;
  bool has_ap_p_plan_distance_margin_m() const;
  private:
  bool _internal_has_ap_p_plan_distance_margin_m() const;
  public:
  void clear_ap_p_plan_distance_margin_m();
  float ap_p_plan_distance_margin_m() const;
  void set_ap_p_plan_distance_margin_m(float value);
  private:
  float _internal_ap_p_plan_distance_margin_m() const;
  void _internal_set_ap_p_plan_distance_margin_m(float value);
  public:

  // optional float AP_P_RATIO_PRE_PREP_ALIGN_AXIS = 94;
  bool has_ap_p_ratio_pre_prep_align_axis() const;
  private:
  bool _internal_has_ap_p_ratio_pre_prep_align_axis() const;
  public:
  void clear_ap_p_ratio_pre_prep_align_axis();
  float ap_p_ratio_pre_prep_align_axis() const;
  void set_ap_p_ratio_pre_prep_align_axis(float value);
  private:
  float _internal_ap_p_ratio_pre_prep_align_axis() const;
  void _internal_set_ap_p_ratio_pre_prep_align_axis(float value);
  public:

  // optional float AP_P_DIRECT_FWD_STEP_DIST_M = 105;
  bool has_ap_p_direct_fwd_step_dist_m() const;
  private:
  bool _internal_has_ap_p_direct_fwd_step_dist_m() const;
  public:
  void clear_ap_p_direct_fwd_step_dist_m();
  float ap_p_direct_fwd_step_dist_m() const;
  void set_ap_p_direct_fwd_step_dist_m(float value);
  private:
  float _internal_ap_p_direct_fwd_step_dist_m() const;
  void _internal_set_ap_p_direct_fwd_step_dist_m(float value);
  public:

  // optional float AP_P_MAX_VEL_IN_PAR_SLOT_MPS = 134;
  bool has_ap_p_max_vel_in_par_slot_mps() const;
  private:
  bool _internal_has_ap_p_max_vel_in_par_slot_mps() const;
  public:
  void clear_ap_p_max_vel_in_par_slot_mps();
  float ap_p_max_vel_in_par_slot_mps() const;
  void set_ap_p_max_vel_in_par_slot_mps(float value);
  private:
  float _internal_ap_p_max_vel_in_par_slot_mps() const;
  void _internal_set_ap_p_max_vel_in_par_slot_mps(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PAR_OUT_M = 149;
  bool has_ap_p_roi_corner_x_par_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_par_out_m() const;
  public:
  void clear_ap_p_roi_corner_x_par_out_m();
  float ap_p_roi_corner_x_par_out_m() const;
  void set_ap_p_roi_corner_x_par_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_par_out_m() const;
  void _internal_set_ap_p_roi_corner_x_par_out_m(float value);
  public:

  // optional uint32 AP_P_MAX_NUM_CLOTHOID_LOOP_NU = 183;
  bool has_ap_p_max_num_clothoid_loop_nu() const;
  private:
  bool _internal_has_ap_p_max_num_clothoid_loop_nu() const;
  public:
  void clear_ap_p_max_num_clothoid_loop_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_max_num_clothoid_loop_nu() const;
  void set_ap_p_max_num_clothoid_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_max_num_clothoid_loop_nu() const;
  void _internal_set_ap_p_max_num_clothoid_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGS_IN_M = 216;
  bool has_ap_p_roi_corner_x_angs_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angs_in_m() const;
  public:
  void clear_ap_p_roi_corner_x_angs_in_m();
  float ap_p_roi_corner_x_angs_in_m() const;
  void set_ap_p_roi_corner_x_angs_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angs_in_m() const;
  void _internal_set_ap_p_roi_corner_x_angs_in_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_M = 223;
  bool has_ap_p_roi_corner_y_prpf_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpf_out_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpf_out_m();
  float ap_p_roi_corner_y_prpf_out_m() const;
  void set_ap_p_roi_corner_y_prpf_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpf_out_m() const;
  void _internal_set_ap_p_roi_corner_y_prpf_out_m(float value);
  public:

  // optional float AP_P_ENV_FLICKERING_COMP_M = 226;
  bool has_ap_p_env_flickering_comp_m() const;
  private:
  bool _internal_has_ap_p_env_flickering_comp_m() const;
  public:
  void clear_ap_p_env_flickering_comp_m();
  float ap_p_env_flickering_comp_m() const;
  void set_ap_p_env_flickering_comp_m(float value);
  private:
  float _internal_ap_p_env_flickering_comp_m() const;
  void _internal_set_ap_p_env_flickering_comp_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 238;
  bool has_mp_p_roi_corner_x_prpb_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpb_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpb_out_op_m();
  float mp_p_roi_corner_x_prpb_out_op_m() const;
  void set_mp_p_roi_corner_x_prpb_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpb_out_op_m() const;
  void _internal_set_mp_p_roi_corner_x_prpb_out_op_m(float value);
  public:

  // optional float AP_P_SAFE_PASS_MARGIN_M = 240;
  bool has_ap_p_safe_pass_margin_m() const;
  private:
  bool _internal_has_ap_p_safe_pass_margin_m() const;
  public:
  void clear_ap_p_safe_pass_margin_m();
  float ap_p_safe_pass_margin_m() const;
  void set_ap_p_safe_pass_margin_m(float value);
  private:
  float _internal_ap_p_safe_pass_margin_m() const;
  void _internal_set_ap_p_safe_pass_margin_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PAR_IN_M = 276;
  bool has_ap_p_roi_corner_x_par_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_par_in_m() const;
  public:
  void clear_ap_p_roi_corner_x_par_in_m();
  float ap_p_roi_corner_x_par_in_m() const;
  void set_ap_p_roi_corner_x_par_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_par_in_m() const;
  void _internal_set_ap_p_roi_corner_x_par_in_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_M = 281;
  bool has_ap_p_roi_corner_y_prpb_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpb_out_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpb_out_m();
  float ap_p_roi_corner_y_prpb_out_m() const;
  void set_ap_p_roi_corner_y_prpb_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpb_out_m() const;
  void _internal_set_ap_p_roi_corner_y_prpb_out_m(float value);
  public:

  // optional float AP_P_PERP_BWD_IN_LONG_DEV_FCTR = 292;
  bool has_ap_p_perp_bwd_in_long_dev_fctr() const;
  private:
  bool _internal_has_ap_p_perp_bwd_in_long_dev_fctr() const;
  public:
  void clear_ap_p_perp_bwd_in_long_dev_fctr();
  float ap_p_perp_bwd_in_long_dev_fctr() const;
  void set_ap_p_perp_bwd_in_long_dev_fctr(float value);
  private:
  float _internal_ap_p_perp_bwd_in_long_dev_fctr() const;
  void _internal_set_ap_p_perp_bwd_in_long_dev_fctr(float value);
  public:

  // optional float AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG = 310;
  bool has_ap_p_direct_fwd_start_angle_tol_deg() const;
  private:
  bool _internal_has_ap_p_direct_fwd_start_angle_tol_deg() const;
  public:
  void clear_ap_p_direct_fwd_start_angle_tol_deg();
  float ap_p_direct_fwd_start_angle_tol_deg() const;
  void set_ap_p_direct_fwd_start_angle_tol_deg(float value);
  private:
  float _internal_ap_p_direct_fwd_start_angle_tol_deg() const;
  void _internal_set_ap_p_direct_fwd_start_angle_tol_deg(float value);
  public:

  // optional float AP_P_ENDPOSE_NEIGHBOUR_DIST_M = 335;
  bool has_ap_p_endpose_neighbour_dist_m() const;
  private:
  bool _internal_has_ap_p_endpose_neighbour_dist_m() const;
  public:
  void clear_ap_p_endpose_neighbour_dist_m();
  float ap_p_endpose_neighbour_dist_m() const;
  void set_ap_p_endpose_neighbour_dist_m(float value);
  private:
  float _internal_ap_p_endpose_neighbour_dist_m() const;
  void _internal_set_ap_p_endpose_neighbour_dist_m(float value);
  public:

  // optional float AP_P_STEP_MOVING_RATIO_CLO_COLL = 343;
  bool has_ap_p_step_moving_ratio_clo_coll() const;
  private:
  bool _internal_has_ap_p_step_moving_ratio_clo_coll() const;
  public:
  void clear_ap_p_step_moving_ratio_clo_coll();
  float ap_p_step_moving_ratio_clo_coll() const;
  void set_ap_p_step_moving_ratio_clo_coll(float value);
  private:
  float _internal_ap_p_step_moving_ratio_clo_coll() const;
  void _internal_set_ap_p_step_moving_ratio_clo_coll(float value);
  public:

  // optional float MP_P_ROI_EDGE_LENGTH_M = 373;
  bool has_mp_p_roi_edge_length_m() const;
  private:
  bool _internal_has_mp_p_roi_edge_length_m() const;
  public:
  void clear_mp_p_roi_edge_length_m();
  float mp_p_roi_edge_length_m() const;
  void set_mp_p_roi_edge_length_m(float value);
  private:
  float _internal_mp_p_roi_edge_length_m() const;
  void _internal_set_mp_p_roi_edge_length_m(float value);
  public:

  // optional uint32 AP_P_ADAPT_VEL_SIZE_NU = 395;
  bool has_ap_p_adapt_vel_size_nu() const;
  private:
  bool _internal_has_ap_p_adapt_vel_size_nu() const;
  public:
  void clear_ap_p_adapt_vel_size_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_adapt_vel_size_nu() const;
  void set_ap_p_adapt_vel_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_adapt_vel_size_nu() const;
  void _internal_set_ap_p_adapt_vel_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 419;
  bool has_mp_p_roi_corner_y_angr_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angr_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_angr_in_op_m();
  float mp_p_roi_corner_y_angr_in_op_m() const;
  void set_mp_p_roi_corner_y_angr_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angr_in_op_m() const;
  void _internal_set_mp_p_roi_corner_y_angr_in_op_m(float value);
  public:

  // optional float AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP = 476;
  bool has_ap_p_distance_for_last_call_man_perp() const;
  private:
  bool _internal_has_ap_p_distance_for_last_call_man_perp() const;
  public:
  void clear_ap_p_distance_for_last_call_man_perp();
  float ap_p_distance_for_last_call_man_perp() const;
  void set_ap_p_distance_for_last_call_man_perp(float value);
  private:
  float _internal_ap_p_distance_for_last_call_man_perp() const;
  void _internal_set_ap_p_distance_for_last_call_man_perp(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGS_IN_OP_M = 481;
  bool has_mp_p_roi_corner_x_angs_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angs_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_angs_in_op_m();
  float mp_p_roi_corner_x_angs_in_op_m() const;
  void set_mp_p_roi_corner_x_angs_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angs_in_op_m() const;
  void _internal_set_mp_p_roi_corner_x_angs_in_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_M = 499;
  bool has_ap_p_roi_corner_y_angr_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angr_out_m() const;
  public:
  void clear_ap_p_roi_corner_y_angr_out_m();
  float ap_p_roi_corner_y_angr_out_m() const;
  void set_ap_p_roi_corner_y_angr_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angr_out_m() const;
  void _internal_set_ap_p_roi_corner_y_angr_out_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 578;
  bool has_mp_p_roi_corner_y_par_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_par_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_par_out_op_m();
  float mp_p_roi_corner_y_par_out_op_m() const;
  void set_mp_p_roi_corner_y_par_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_par_out_op_m() const;
  void _internal_set_mp_p_roi_corner_y_par_out_op_m(float value);
  public:

  // optional uint32 AP_P_NUM_POSE_CHECK_DRVNPATH = 586;
  bool has_ap_p_num_pose_check_drvnpath() const;
  private:
  bool _internal_has_ap_p_num_pose_check_drvnpath() const;
  public:
  void clear_ap_p_num_pose_check_drvnpath();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_num_pose_check_drvnpath() const;
  void set_ap_p_num_pose_check_drvnpath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_num_pose_check_drvnpath() const;
  void _internal_set_ap_p_num_pose_check_drvnpath(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPB_OUT_M = 620;
  bool has_ap_p_roi_corner_x_prpb_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpb_out_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpb_out_m();
  float ap_p_roi_corner_x_prpb_out_m() const;
  void set_ap_p_roi_corner_x_prpb_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpb_out_m() const;
  void _internal_set_ap_p_roi_corner_x_prpb_out_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGR_OUT_M = 646;
  bool has_ap_p_roi_corner_x_angr_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angr_out_m() const;
  public:
  void clear_ap_p_roi_corner_x_angr_out_m();
  float ap_p_roi_corner_x_angr_out_m() const;
  void set_ap_p_roi_corner_x_angr_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angr_out_m() const;
  void _internal_set_ap_p_roi_corner_x_angr_out_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 656;
  bool has_ap_p_roi_corner_y_angs_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angs_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_angs_out_op_m();
  float ap_p_roi_corner_y_angs_out_op_m() const;
  void set_ap_p_roi_corner_y_angs_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angs_out_op_m() const;
  void _internal_set_ap_p_roi_corner_y_angs_out_op_m(float value);
  public:

  // optional float AP_P_SAFETY_TURN_RADIUS_AXIS_M = 662;
  bool has_ap_p_safety_turn_radius_axis_m() const;
  private:
  bool _internal_has_ap_p_safety_turn_radius_axis_m() const;
  public:
  void clear_ap_p_safety_turn_radius_axis_m();
  float ap_p_safety_turn_radius_axis_m() const;
  void set_ap_p_safety_turn_radius_axis_m(float value);
  private:
  float _internal_ap_p_safety_turn_radius_axis_m() const;
  void _internal_set_ap_p_safety_turn_radius_axis_m(float value);
  public:

  // optional float AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M = 698;
  bool has_ap_p_long_shift_intermed_ws_tapos_m() const;
  private:
  bool _internal_has_ap_p_long_shift_intermed_ws_tapos_m() const;
  public:
  void clear_ap_p_long_shift_intermed_ws_tapos_m();
  float ap_p_long_shift_intermed_ws_tapos_m() const;
  void set_ap_p_long_shift_intermed_ws_tapos_m(float value);
  private:
  float _internal_ap_p_long_shift_intermed_ws_tapos_m() const;
  void _internal_set_ap_p_long_shift_intermed_ws_tapos_m(float value);
  public:

  // optional float AP_P_CLOTHOID_VEL_TUNE_STEP_MPS = 751;
  bool has_ap_p_clothoid_vel_tune_step_mps() const;
  private:
  bool _internal_has_ap_p_clothoid_vel_tune_step_mps() const;
  public:
  void clear_ap_p_clothoid_vel_tune_step_mps();
  float ap_p_clothoid_vel_tune_step_mps() const;
  void set_ap_p_clothoid_vel_tune_step_mps(float value);
  private:
  float _internal_ap_p_clothoid_vel_tune_step_mps() const;
  void _internal_set_ap_p_clothoid_vel_tune_step_mps(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 807;
  bool has_mp_p_roi_corner_y_prpf_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpf_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpf_out_op_m();
  float mp_p_roi_corner_y_prpf_out_op_m() const;
  void set_mp_p_roi_corner_y_prpf_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpf_out_op_m() const;
  void _internal_set_mp_p_roi_corner_y_prpf_out_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 809;
  bool has_ap_p_roi_corner_x_angr_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angr_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_angr_out_op_m();
  float ap_p_roi_corner_x_angr_out_op_m() const;
  void set_ap_p_roi_corner_x_angr_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angr_out_op_m() const;
  void _internal_set_ap_p_roi_corner_x_angr_out_op_m(float value);
  public:

  // optional float AP_P_MIN_RADIUS_ADD_CLOTHOID_M = 841;
  bool has_ap_p_min_radius_add_clothoid_m() const;
  private:
  bool _internal_has_ap_p_min_radius_add_clothoid_m() const;
  public:
  void clear_ap_p_min_radius_add_clothoid_m();
  float ap_p_min_radius_add_clothoid_m() const;
  void set_ap_p_min_radius_add_clothoid_m(float value);
  private:
  float _internal_ap_p_min_radius_add_clothoid_m() const;
  void _internal_set_ap_p_min_radius_add_clothoid_m(float value);
  public:

  // optional float AP_P_ASY_CLO_ST_MIN_LENGTH_M = 862;
  bool has_ap_p_asy_clo_st_min_length_m() const;
  private:
  bool _internal_has_ap_p_asy_clo_st_min_length_m() const;
  public:
  void clear_ap_p_asy_clo_st_min_length_m();
  float ap_p_asy_clo_st_min_length_m() const;
  void set_ap_p_asy_clo_st_min_length_m(float value);
  private:
  float _internal_ap_p_asy_clo_st_min_length_m() const;
  void _internal_set_ap_p_asy_clo_st_min_length_m(float value);
  public:

  // optional float AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN = 881;
  bool has_ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const;
  private:
  bool _internal_has_ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const;
  public:
  void clear_ap_p_ratio_straight_prepare_fwd_stroke_prep_align();
  float ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const;
  void set_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(float value);
  private:
  float _internal_ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const;
  void _internal_set_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(float value);
  public:

  // optional float AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS = 883;
  bool has_ap_p_max_vel_close_obstacle_mps() const;
  private:
  bool _internal_has_ap_p_max_vel_close_obstacle_mps() const;
  public:
  void clear_ap_p_max_vel_close_obstacle_mps();
  float ap_p_max_vel_close_obstacle_mps() const;
  void set_ap_p_max_vel_close_obstacle_mps(float value);
  private:
  float _internal_ap_p_max_vel_close_obstacle_mps() const;
  void _internal_set_ap_p_max_vel_close_obstacle_mps(float value);
  public:

  // optional float AP_P_STRAIGHT_PERP_EXTRA_DIST_M = 895;
  bool has_ap_p_straight_perp_extra_dist_m() const;
  private:
  bool _internal_has_ap_p_straight_perp_extra_dist_m() const;
  public:
  void clear_ap_p_straight_perp_extra_dist_m();
  float ap_p_straight_perp_extra_dist_m() const;
  void set_ap_p_straight_perp_extra_dist_m(float value);
  private:
  float _internal_ap_p_straight_perp_extra_dist_m() const;
  void _internal_set_ap_p_straight_perp_extra_dist_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPB_IN_OP_M = 897;
  bool has_mp_p_roi_corner_x_prpb_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpb_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpb_in_op_m();
  float mp_p_roi_corner_x_prpb_in_op_m() const;
  void set_mp_p_roi_corner_x_prpb_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpb_in_op_m() const;
  void _internal_set_mp_p_roi_corner_x_prpb_in_op_m(float value);
  public:

  // optional float AP_P_DESIRED_DIST_TO_OBST_M = 921;
  bool has_ap_p_desired_dist_to_obst_m() const;
  private:
  bool _internal_has_ap_p_desired_dist_to_obst_m() const;
  public:
  void clear_ap_p_desired_dist_to_obst_m();
  float ap_p_desired_dist_to_obst_m() const;
  void set_ap_p_desired_dist_to_obst_m(float value);
  private:
  float _internal_ap_p_desired_dist_to_obst_m() const;
  void _internal_set_ap_p_desired_dist_to_obst_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPF_OUT_M = 938;
  bool has_ap_p_roi_corner_x_prpf_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpf_out_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpf_out_m();
  float ap_p_roi_corner_x_prpf_out_m() const;
  void set_ap_p_roi_corner_x_prpf_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpf_out_m() const;
  void _internal_set_ap_p_roi_corner_x_prpf_out_m(float value);
  public:

  // optional float AP_P_LENGTH_LONG_CLO_TRANSIT_M = 951;
  bool has_ap_p_length_long_clo_transit_m() const;
  private:
  bool _internal_has_ap_p_length_long_clo_transit_m() const;
  public:
  void clear_ap_p_length_long_clo_transit_m();
  float ap_p_length_long_clo_transit_m() const;
  void set_ap_p_length_long_clo_transit_m(float value);
  private:
  float _internal_ap_p_length_long_clo_transit_m() const;
  void _internal_set_ap_p_length_long_clo_transit_m(float value);
  public:

  // optional float AP_P_FACTOR_DETERMINATION_NU = 952;
  bool has_ap_p_factor_determination_nu() const;
  private:
  bool _internal_has_ap_p_factor_determination_nu() const;
  public:
  void clear_ap_p_factor_determination_nu();
  float ap_p_factor_determination_nu() const;
  void set_ap_p_factor_determination_nu(float value);
  private:
  float _internal_ap_p_factor_determination_nu() const;
  void _internal_set_ap_p_factor_determination_nu(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPF_IN_M = 956;
  bool has_ap_p_roi_corner_x_prpf_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpf_in_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpf_in_m();
  float ap_p_roi_corner_x_prpf_in_m() const;
  void set_ap_p_roi_corner_x_prpf_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpf_in_m() const;
  void _internal_set_ap_p_roi_corner_x_prpf_in_m(float value);
  public:

  // optional uint32 AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP = 965;
  bool has_ap_p_parkout_par_angle_max_loop() const;
  private:
  bool _internal_has_ap_p_parkout_par_angle_max_loop() const;
  public:
  void clear_ap_p_parkout_par_angle_max_loop();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_parkout_par_angle_max_loop() const;
  void set_ap_p_parkout_par_angle_max_loop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_parkout_par_angle_max_loop() const;
  void _internal_set_ap_p_parkout_par_angle_max_loop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_PERP_FWD_IN_YAW_DEV_FCTR = 968;
  bool has_ap_p_perp_fwd_in_yaw_dev_fctr() const;
  private:
  bool _internal_has_ap_p_perp_fwd_in_yaw_dev_fctr() const;
  public:
  void clear_ap_p_perp_fwd_in_yaw_dev_fctr();
  float ap_p_perp_fwd_in_yaw_dev_fctr() const;
  void set_ap_p_perp_fwd_in_yaw_dev_fctr(float value);
  private:
  float _internal_ap_p_perp_fwd_in_yaw_dev_fctr() const;
  void _internal_set_ap_p_perp_fwd_in_yaw_dev_fctr(float value);
  public:

  // optional float AP_P_BEST_PATH_TIME_THR_S = 983;
  bool has_ap_p_best_path_time_thr_s() const;
  private:
  bool _internal_has_ap_p_best_path_time_thr_s() const;
  public:
  void clear_ap_p_best_path_time_thr_s();
  float ap_p_best_path_time_thr_s() const;
  void set_ap_p_best_path_time_thr_s(float value);
  private:
  float _internal_ap_p_best_path_time_thr_s() const;
  void _internal_set_ap_p_best_path_time_thr_s(float value);
  public:

  // optional float AP_P_DIST_START_END_KEEP_PATH_M = 994;
  bool has_ap_p_dist_start_end_keep_path_m() const;
  private:
  bool _internal_has_ap_p_dist_start_end_keep_path_m() const;
  public:
  void clear_ap_p_dist_start_end_keep_path_m();
  float ap_p_dist_start_end_keep_path_m() const;
  void set_ap_p_dist_start_end_keep_path_m(float value);
  private:
  float _internal_ap_p_dist_start_end_keep_path_m() const;
  void _internal_set_ap_p_dist_start_end_keep_path_m(float value);
  public:

  // optional float AP_P_PERP_BWD_IN_LAT_DEV_FCTR = 1001;
  bool has_ap_p_perp_bwd_in_lat_dev_fctr() const;
  private:
  bool _internal_has_ap_p_perp_bwd_in_lat_dev_fctr() const;
  public:
  void clear_ap_p_perp_bwd_in_lat_dev_fctr();
  float ap_p_perp_bwd_in_lat_dev_fctr() const;
  void set_ap_p_perp_bwd_in_lat_dev_fctr(float value);
  private:
  float _internal_ap_p_perp_bwd_in_lat_dev_fctr() const;
  void _internal_set_ap_p_perp_bwd_in_lat_dev_fctr(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPF_IN_OP_M = 1002;
  bool has_ap_p_roi_corner_x_prpf_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpf_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpf_in_op_m();
  float ap_p_roi_corner_x_prpf_in_op_m() const;
  void set_ap_p_roi_corner_x_prpf_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpf_in_op_m() const;
  void _internal_set_ap_p_roi_corner_x_prpf_in_op_m(float value);
  public:

  // optional float AP_P_ADD_STRAIGHT_FSF_M = 1008;
  bool has_ap_p_add_straight_fsf_m() const;
  private:
  bool _internal_has_ap_p_add_straight_fsf_m() const;
  public:
  void clear_ap_p_add_straight_fsf_m();
  float ap_p_add_straight_fsf_m() const;
  void set_ap_p_add_straight_fsf_m(float value);
  private:
  float _internal_ap_p_add_straight_fsf_m() const;
  void _internal_set_ap_p_add_straight_fsf_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPB_IN_M = 1020;
  bool has_mp_p_roi_corner_y_prpb_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpb_in_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpb_in_m();
  float mp_p_roi_corner_y_prpb_in_m() const;
  void set_mp_p_roi_corner_y_prpb_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpb_in_m() const;
  void _internal_set_mp_p_roi_corner_y_prpb_in_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 1039;
  bool has_mp_p_roi_corner_y_prpf_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpf_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpf_in_op_m();
  float mp_p_roi_corner_y_prpf_in_op_m() const;
  void set_mp_p_roi_corner_y_prpf_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpf_in_op_m() const;
  void _internal_set_mp_p_roi_corner_y_prpf_in_op_m(float value);
  public:

  // optional float AP_P_MIN_PARKING_VEL_MPS = 1067;
  bool has_ap_p_min_parking_vel_mps() const;
  private:
  bool _internal_has_ap_p_min_parking_vel_mps() const;
  public:
  void clear_ap_p_min_parking_vel_mps();
  float ap_p_min_parking_vel_mps() const;
  void set_ap_p_min_parking_vel_mps(float value);
  private:
  float _internal_ap_p_min_parking_vel_mps() const;
  void _internal_set_ap_p_min_parking_vel_mps(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGR_OUT_M = 1111;
  bool has_mp_p_roi_corner_x_angr_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angr_out_m() const;
  public:
  void clear_mp_p_roi_corner_x_angr_out_m();
  float mp_p_roi_corner_x_angr_out_m() const;
  void set_mp_p_roi_corner_x_angr_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angr_out_m() const;
  void _internal_set_mp_p_roi_corner_x_angr_out_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 1124;
  bool has_ap_p_roi_corner_y_prpb_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpb_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpb_in_op_m();
  float ap_p_roi_corner_y_prpb_in_op_m() const;
  void set_ap_p_roi_corner_y_prpb_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpb_in_op_m() const;
  void _internal_set_ap_p_roi_corner_y_prpb_in_op_m(float value);
  public:

  // optional float AP_P_PLANNING_HORIZON_M = 1134;
  bool has_ap_p_planning_horizon_m() const;
  private:
  bool _internal_has_ap_p_planning_horizon_m() const;
  public:
  void clear_ap_p_planning_horizon_m();
  float ap_p_planning_horizon_m() const;
  void set_ap_p_planning_horizon_m(float value);
  private:
  float _internal_ap_p_planning_horizon_m() const;
  void _internal_set_ap_p_planning_horizon_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPB_OUT_M = 1213;
  bool has_mp_p_roi_corner_x_prpb_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpb_out_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpb_out_m();
  float mp_p_roi_corner_x_prpb_out_m() const;
  void set_mp_p_roi_corner_x_prpb_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpb_out_m() const;
  void _internal_set_mp_p_roi_corner_x_prpb_out_m(float value);
  public:

  // optional float AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED = 1219;
  bool has_ap_p_ratio_add_align_radius_angled() const;
  private:
  bool _internal_has_ap_p_ratio_add_align_radius_angled() const;
  public:
  void clear_ap_p_ratio_add_align_radius_angled();
  float ap_p_ratio_add_align_radius_angled() const;
  void set_ap_p_ratio_add_align_radius_angled(float value);
  private:
  float _internal_ap_p_ratio_add_align_radius_angled() const;
  void _internal_set_ap_p_ratio_add_align_radius_angled(float value);
  public:

  // optional float AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M = 1230;
  bool has_ap_p_pre_prep_align_radius_ext_m() const;
  private:
  bool _internal_has_ap_p_pre_prep_align_radius_ext_m() const;
  public:
  void clear_ap_p_pre_prep_align_radius_ext_m();
  float ap_p_pre_prep_align_radius_ext_m() const;
  void set_ap_p_pre_prep_align_radius_ext_m(float value);
  private:
  float _internal_ap_p_pre_prep_align_radius_ext_m() const;
  void _internal_set_ap_p_pre_prep_align_radius_ext_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 1265;
  bool has_ap_p_roi_corner_x_prpf_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpf_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpf_out_op_m();
  float ap_p_roi_corner_x_prpf_out_op_m() const;
  void set_ap_p_roi_corner_x_prpf_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpf_out_op_m() const;
  void _internal_set_ap_p_roi_corner_x_prpf_out_op_m(float value);
  public:

  // optional float AP_P_SNAP_RATIO_TO_AVOID_COLL = 1267;
  bool has_ap_p_snap_ratio_to_avoid_coll() const;
  private:
  bool _internal_has_ap_p_snap_ratio_to_avoid_coll() const;
  public:
  void clear_ap_p_snap_ratio_to_avoid_coll();
  float ap_p_snap_ratio_to_avoid_coll() const;
  void set_ap_p_snap_ratio_to_avoid_coll(float value);
  private:
  float _internal_ap_p_snap_ratio_to_avoid_coll() const;
  void _internal_set_ap_p_snap_ratio_to_avoid_coll(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 1279;
  bool has_mp_p_roi_corner_y_angr_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angr_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_angr_out_op_m();
  float mp_p_roi_corner_y_angr_out_op_m() const;
  void set_mp_p_roi_corner_y_angr_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angr_out_op_m() const;
  void _internal_set_mp_p_roi_corner_y_angr_out_op_m(float value);
  public:

  // optional float AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M = 1306;
  bool has_ap_p_min_long_dev_for_straight_repl_par_m() const;
  private:
  bool _internal_has_ap_p_min_long_dev_for_straight_repl_par_m() const;
  public:
  void clear_ap_p_min_long_dev_for_straight_repl_par_m();
  float ap_p_min_long_dev_for_straight_repl_par_m() const;
  void set_ap_p_min_long_dev_for_straight_repl_par_m(float value);
  private:
  float _internal_ap_p_min_long_dev_for_straight_repl_par_m() const;
  void _internal_set_ap_p_min_long_dev_for_straight_repl_par_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPB_IN_M = 1309;
  bool has_ap_p_roi_corner_x_prpb_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpb_in_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpb_in_m();
  float ap_p_roi_corner_x_prpb_in_m() const;
  void set_ap_p_roi_corner_x_prpb_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpb_in_m() const;
  void _internal_set_ap_p_roi_corner_x_prpb_in_m(float value);
  public:

  // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M = 1316;
  bool has_ap_p_parkout_ego_dist_to_fake_objects_perp_m() const;
  private:
  bool _internal_has_ap_p_parkout_ego_dist_to_fake_objects_perp_m() const;
  public:
  void clear_ap_p_parkout_ego_dist_to_fake_objects_perp_m();
  float ap_p_parkout_ego_dist_to_fake_objects_perp_m() const;
  void set_ap_p_parkout_ego_dist_to_fake_objects_perp_m(float value);
  private:
  float _internal_ap_p_parkout_ego_dist_to_fake_objects_perp_m() const;
  void _internal_set_ap_p_parkout_ego_dist_to_fake_objects_perp_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 1350;
  bool has_mp_p_roi_corner_x_angs_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angs_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_angs_out_op_m();
  float mp_p_roi_corner_x_angs_out_op_m() const;
  void set_mp_p_roi_corner_x_angs_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angs_out_op_m() const;
  void _internal_set_mp_p_roi_corner_x_angs_out_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPF_IN_M = 1373;
  bool has_mp_p_roi_corner_y_prpf_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpf_in_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpf_in_m();
  float mp_p_roi_corner_y_prpf_in_m() const;
  void set_mp_p_roi_corner_y_prpf_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpf_in_m() const;
  void _internal_set_mp_p_roi_corner_y_prpf_in_m(float value);
  public:

  // optional float AP_P_PARKOUT_BLIND_DISTANCE_PAR_M = 1379;
  bool has_ap_p_parkout_blind_distance_par_m() const;
  private:
  bool _internal_has_ap_p_parkout_blind_distance_par_m() const;
  public:
  void clear_ap_p_parkout_blind_distance_par_m();
  float ap_p_parkout_blind_distance_par_m() const;
  void set_ap_p_parkout_blind_distance_par_m(float value);
  private:
  float _internal_ap_p_parkout_blind_distance_par_m() const;
  void _internal_set_ap_p_parkout_blind_distance_par_m(float value);
  public:

  // optional uint32 AP_P_SAVE_EM_REPLANNING_NU = 1380;
  bool has_ap_p_save_em_replanning_nu() const;
  private:
  bool _internal_has_ap_p_save_em_replanning_nu() const;
  public:
  void clear_ap_p_save_em_replanning_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_save_em_replanning_nu() const;
  void set_ap_p_save_em_replanning_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_save_em_replanning_nu() const;
  void _internal_set_ap_p_save_em_replanning_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGR_IN_M = 1400;
  bool has_ap_p_roi_corner_x_angr_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angr_in_m() const;
  public:
  void clear_ap_p_roi_corner_x_angr_in_m();
  float ap_p_roi_corner_x_angr_in_m() const;
  void set_ap_p_roi_corner_x_angr_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angr_in_m() const;
  void _internal_set_ap_p_roi_corner_x_angr_in_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPF_OUT_M = 1403;
  bool has_mp_p_roi_corner_x_prpf_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpf_out_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpf_out_m();
  float mp_p_roi_corner_x_prpf_out_m() const;
  void set_mp_p_roi_corner_x_prpf_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpf_out_m() const;
  void _internal_set_mp_p_roi_corner_x_prpf_out_m(float value);
  public:

  // optional float AP_P_MAX_DIST_PARA_WO_BCKT_M = 1432;
  bool has_ap_p_max_dist_para_wo_bckt_m() const;
  private:
  bool _internal_has_ap_p_max_dist_para_wo_bckt_m() const;
  public:
  void clear_ap_p_max_dist_para_wo_bckt_m();
  float ap_p_max_dist_para_wo_bckt_m() const;
  void set_ap_p_max_dist_para_wo_bckt_m(float value);
  private:
  float _internal_ap_p_max_dist_para_wo_bckt_m() const;
  void _internal_set_ap_p_max_dist_para_wo_bckt_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PAR_OUT_OP_M = 1447;
  bool has_ap_p_roi_corner_x_par_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_par_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_par_out_op_m();
  float ap_p_roi_corner_x_par_out_op_m() const;
  void set_ap_p_roi_corner_x_par_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_par_out_op_m() const;
  void _internal_set_ap_p_roi_corner_x_par_out_op_m(float value);
  public:

  // optional float AP_P_LENGTH_SHORT_CLO_TRANSIT_M = 1474;
  bool has_ap_p_length_short_clo_transit_m() const;
  private:
  bool _internal_has_ap_p_length_short_clo_transit_m() const;
  public:
  void clear_ap_p_length_short_clo_transit_m();
  float ap_p_length_short_clo_transit_m() const;
  void set_ap_p_length_short_clo_transit_m(float value);
  private:
  float _internal_ap_p_length_short_clo_transit_m() const;
  void _internal_set_ap_p_length_short_clo_transit_m(float value);
  public:

  // optional bool AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL = 1038;
  bool has_ap_p_enable_out_in_strokes_replan_parallel() const;
  private:
  bool _internal_has_ap_p_enable_out_in_strokes_replan_parallel() const;
  public:
  void clear_ap_p_enable_out_in_strokes_replan_parallel();
  bool ap_p_enable_out_in_strokes_replan_parallel() const;
  void set_ap_p_enable_out_in_strokes_replan_parallel(bool value);
  private:
  bool _internal_ap_p_enable_out_in_strokes_replan_parallel() const;
  void _internal_set_ap_p_enable_out_in_strokes_replan_parallel(bool value);
  public:

  // optional bool AP_P_ENABLE_LAST_CALL_MANEUVER_PERP = 2093;
  bool has_ap_p_enable_last_call_maneuver_perp() const;
  private:
  bool _internal_has_ap_p_enable_last_call_maneuver_perp() const;
  public:
  void clear_ap_p_enable_last_call_maneuver_perp();
  bool ap_p_enable_last_call_maneuver_perp() const;
  void set_ap_p_enable_last_call_maneuver_perp(bool value);
  private:
  bool _internal_ap_p_enable_last_call_maneuver_perp() const;
  void _internal_set_ap_p_enable_last_call_maneuver_perp(bool value);
  public:

  // optional bool AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD = 1893;
  bool has_ap_p_enable_first_stroke_fwd_perp_bwd() const;
  private:
  bool _internal_has_ap_p_enable_first_stroke_fwd_perp_bwd() const;
  public:
  void clear_ap_p_enable_first_stroke_fwd_perp_bwd();
  bool ap_p_enable_first_stroke_fwd_perp_bwd() const;
  void set_ap_p_enable_first_stroke_fwd_perp_bwd(bool value);
  private:
  bool _internal_ap_p_enable_first_stroke_fwd_perp_bwd() const;
  void _internal_set_ap_p_enable_first_stroke_fwd_perp_bwd(bool value);
  public:

  // optional bool AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD = 1057;
  bool has_ap_p_enable_early_steer_first_strk_fwd() const;
  private:
  bool _internal_has_ap_p_enable_early_steer_first_strk_fwd() const;
  public:
  void clear_ap_p_enable_early_steer_first_strk_fwd();
  bool ap_p_enable_early_steer_first_strk_fwd() const;
  void set_ap_p_enable_early_steer_first_strk_fwd(bool value);
  private:
  bool _internal_ap_p_enable_early_steer_first_strk_fwd() const;
  void _internal_set_ap_p_enable_early_steer_first_strk_fwd(bool value);
  public:

  // optional float AP_P_MIN_ANG_DIFF_INFLECTION_RAD = 1534;
  bool has_ap_p_min_ang_diff_inflection_rad() const;
  private:
  bool _internal_has_ap_p_min_ang_diff_inflection_rad() const;
  public:
  void clear_ap_p_min_ang_diff_inflection_rad();
  float ap_p_min_ang_diff_inflection_rad() const;
  void set_ap_p_min_ang_diff_inflection_rad(float value);
  private:
  float _internal_ap_p_min_ang_diff_inflection_rad() const;
  void _internal_set_ap_p_min_ang_diff_inflection_rad(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 1540;
  bool has_ap_p_roi_corner_y_angs_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angs_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_angs_in_op_m();
  float ap_p_roi_corner_y_angs_in_op_m() const;
  void set_ap_p_roi_corner_y_angs_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angs_in_op_m() const;
  void _internal_set_ap_p_roi_corner_y_angs_in_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_M = 1550;
  bool has_mp_p_roi_corner_y_prpf_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpf_out_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpf_out_m();
  float mp_p_roi_corner_y_prpf_out_m() const;
  void set_mp_p_roi_corner_y_prpf_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpf_out_m() const;
  void _internal_set_mp_p_roi_corner_y_prpf_out_m(float value);
  public:

  // optional float AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD = 1553;
  bool has_ap_p_max_orientation_dev_for_straight_repl_par_rad() const;
  private:
  bool _internal_has_ap_p_max_orientation_dev_for_straight_repl_par_rad() const;
  public:
  void clear_ap_p_max_orientation_dev_for_straight_repl_par_rad();
  float ap_p_max_orientation_dev_for_straight_repl_par_rad() const;
  void set_ap_p_max_orientation_dev_for_straight_repl_par_rad(float value);
  private:
  float _internal_ap_p_max_orientation_dev_for_straight_repl_par_rad() const;
  void _internal_set_ap_p_max_orientation_dev_for_straight_repl_par_rad(float value);
  public:

  // optional float AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD = 1565;
  bool has_ap_p_ratio_distance_shorting_first_strk_fwd() const;
  private:
  bool _internal_has_ap_p_ratio_distance_shorting_first_strk_fwd() const;
  public:
  void clear_ap_p_ratio_distance_shorting_first_strk_fwd();
  float ap_p_ratio_distance_shorting_first_strk_fwd() const;
  void set_ap_p_ratio_distance_shorting_first_strk_fwd(float value);
  private:
  float _internal_ap_p_ratio_distance_shorting_first_strk_fwd() const;
  void _internal_set_ap_p_ratio_distance_shorting_first_strk_fwd(float value);
  public:

  // optional uint32 AP_P_MAX_NUM_CLO_VEL_LOOP_NU = 1589;
  bool has_ap_p_max_num_clo_vel_loop_nu() const;
  private:
  bool _internal_has_ap_p_max_num_clo_vel_loop_nu() const;
  public:
  void clear_ap_p_max_num_clo_vel_loop_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_max_num_clo_vel_loop_nu() const;
  void set_ap_p_max_num_clo_vel_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_max_num_clo_vel_loop_nu() const;
  void _internal_set_ap_p_max_num_clo_vel_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGS_IN_M = 1593;
  bool has_mp_p_roi_corner_y_angs_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angs_in_m() const;
  public:
  void clear_mp_p_roi_corner_y_angs_in_m();
  float mp_p_roi_corner_y_angs_in_m() const;
  void set_mp_p_roi_corner_y_angs_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angs_in_m() const;
  void _internal_set_mp_p_roi_corner_y_angs_in_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGR_IN_OP_M = 1606;
  bool has_ap_p_roi_corner_x_angr_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angr_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_angr_in_op_m();
  float ap_p_roi_corner_x_angr_in_op_m() const;
  void set_ap_p_roi_corner_x_angr_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angr_in_op_m() const;
  void _internal_set_ap_p_roi_corner_x_angr_in_op_m(float value);
  public:

  // optional uint32 AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU = 1624;
  bool has_ap_p_bstpose_stepsz_drvnpath_nu() const;
  private:
  bool _internal_has_ap_p_bstpose_stepsz_drvnpath_nu() const;
  public:
  void clear_ap_p_bstpose_stepsz_drvnpath_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_bstpose_stepsz_drvnpath_nu() const;
  void set_ap_p_bstpose_stepsz_drvnpath_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_bstpose_stepsz_drvnpath_nu() const;
  void _internal_set_ap_p_bstpose_stepsz_drvnpath_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool AP_P_ENABLE_FIRST_STRK_FWD_PAR = 257;
  bool has_ap_p_enable_first_strk_fwd_par() const;
  private:
  bool _internal_has_ap_p_enable_first_strk_fwd_par() const;
  public:
  void clear_ap_p_enable_first_strk_fwd_par();
  bool ap_p_enable_first_strk_fwd_par() const;
  void set_ap_p_enable_first_strk_fwd_par(bool value);
  private:
  bool _internal_ap_p_enable_first_strk_fwd_par() const;
  void _internal_set_ap_p_enable_first_strk_fwd_par(bool value);
  public:

  // optional bool AP_P_PARKOUT_ENABLE_FAKE_OBJECTS = 2997;
  bool has_ap_p_parkout_enable_fake_objects() const;
  private:
  bool _internal_has_ap_p_parkout_enable_fake_objects() const;
  public:
  void clear_ap_p_parkout_enable_fake_objects();
  bool ap_p_parkout_enable_fake_objects() const;
  void set_ap_p_parkout_enable_fake_objects(bool value);
  private:
  bool _internal_ap_p_parkout_enable_fake_objects() const;
  void _internal_set_ap_p_parkout_enable_fake_objects(bool value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PAR_OUT_M = 1652;
  bool has_mp_p_roi_corner_y_par_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_par_out_m() const;
  public:
  void clear_mp_p_roi_corner_y_par_out_m();
  float mp_p_roi_corner_y_par_out_m() const;
  void set_mp_p_roi_corner_y_par_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_par_out_m() const;
  void _internal_set_mp_p_roi_corner_y_par_out_m(float value);
  public:

  // optional bool AP_P_DISABLE_SCAN_GREAT_DIST_NU = 727;
  bool has_ap_p_disable_scan_great_dist_nu() const;
  private:
  bool _internal_has_ap_p_disable_scan_great_dist_nu() const;
  public:
  void clear_ap_p_disable_scan_great_dist_nu();
  bool ap_p_disable_scan_great_dist_nu() const;
  void set_ap_p_disable_scan_great_dist_nu(bool value);
  private:
  bool _internal_ap_p_disable_scan_great_dist_nu() const;
  void _internal_set_ap_p_disable_scan_great_dist_nu(bool value);
  public:

  // optional bool AP_P_DISABLE_PLANNER_NU = 1985;
  bool has_ap_p_disable_planner_nu() const;
  private:
  bool _internal_has_ap_p_disable_planner_nu() const;
  public:
  void clear_ap_p_disable_planner_nu();
  bool ap_p_disable_planner_nu() const;
  void set_ap_p_disable_planner_nu(bool value);
  private:
  bool _internal_ap_p_disable_planner_nu() const;
  void _internal_set_ap_p_disable_planner_nu(bool value);
  public:

  // optional bool AP_P_ENABLE_ONE_STROKE_PARKING = 2387;
  bool has_ap_p_enable_one_stroke_parking() const;
  private:
  bool _internal_has_ap_p_enable_one_stroke_parking() const;
  public:
  void clear_ap_p_enable_one_stroke_parking();
  bool ap_p_enable_one_stroke_parking() const;
  void set_ap_p_enable_one_stroke_parking(bool value);
  private:
  bool _internal_ap_p_enable_one_stroke_parking() const;
  void _internal_set_ap_p_enable_one_stroke_parking(bool value);
  public:

  // optional bool AP_P_ENABLE_DYNAMIC_REPLANNING = 1584;
  bool has_ap_p_enable_dynamic_replanning() const;
  private:
  bool _internal_has_ap_p_enable_dynamic_replanning() const;
  public:
  void clear_ap_p_enable_dynamic_replanning();
  bool ap_p_enable_dynamic_replanning() const;
  void set_ap_p_enable_dynamic_replanning(bool value);
  private:
  bool _internal_ap_p_enable_dynamic_replanning() const;
  void _internal_set_ap_p_enable_dynamic_replanning(bool value);
  public:

  // optional float AP_P_MAX_DEVIATION_CLOTHOID_M = 1761;
  bool has_ap_p_max_deviation_clothoid_m() const;
  private:
  bool _internal_has_ap_p_max_deviation_clothoid_m() const;
  public:
  void clear_ap_p_max_deviation_clothoid_m();
  float ap_p_max_deviation_clothoid_m() const;
  void set_ap_p_max_deviation_clothoid_m(float value);
  private:
  float _internal_ap_p_max_deviation_clothoid_m() const;
  void _internal_set_ap_p_max_deviation_clothoid_m(float value);
  public:

  // optional float AP_P_PARKOUT_BLIND_DISTANCE_ANG_M = 1813;
  bool has_ap_p_parkout_blind_distance_ang_m() const;
  private:
  bool _internal_has_ap_p_parkout_blind_distance_ang_m() const;
  public:
  void clear_ap_p_parkout_blind_distance_ang_m();
  float ap_p_parkout_blind_distance_ang_m() const;
  void set_ap_p_parkout_blind_distance_ang_m(float value);
  private:
  float _internal_ap_p_parkout_blind_distance_ang_m() const;
  void _internal_set_ap_p_parkout_blind_distance_ang_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_M = 1826;
  bool has_mp_p_roi_corner_y_angr_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angr_out_m() const;
  public:
  void clear_mp_p_roi_corner_y_angr_out_m();
  float mp_p_roi_corner_y_angr_out_m() const;
  void set_mp_p_roi_corner_y_angr_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angr_out_m() const;
  void _internal_set_mp_p_roi_corner_y_angr_out_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 1848;
  bool has_ap_p_roi_corner_y_prpb_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpb_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpb_out_op_m();
  float ap_p_roi_corner_y_prpb_out_op_m() const;
  void set_ap_p_roi_corner_y_prpb_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpb_out_op_m() const;
  void _internal_set_ap_p_roi_corner_y_prpb_out_op_m(float value);
  public:

  // optional float AP_P_MISALIGNED_START_POSE_ANGLE_RAD = 1897;
  bool has_ap_p_misaligned_start_pose_angle_rad() const;
  private:
  bool _internal_has_ap_p_misaligned_start_pose_angle_rad() const;
  public:
  void clear_ap_p_misaligned_start_pose_angle_rad();
  float ap_p_misaligned_start_pose_angle_rad() const;
  void set_ap_p_misaligned_start_pose_angle_rad(float value);
  private:
  float _internal_ap_p_misaligned_start_pose_angle_rad() const;
  void _internal_set_ap_p_misaligned_start_pose_angle_rad(float value);
  public:

  // optional float AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD = 1916;
  bool has_ap_p_straight_conv_allowed_ang_rad() const;
  private:
  bool _internal_has_ap_p_straight_conv_allowed_ang_rad() const;
  public:
  void clear_ap_p_straight_conv_allowed_ang_rad();
  float ap_p_straight_conv_allowed_ang_rad() const;
  void set_ap_p_straight_conv_allowed_ang_rad(float value);
  private:
  float _internal_ap_p_straight_conv_allowed_ang_rad() const;
  void _internal_set_ap_p_straight_conv_allowed_ang_rad(float value);
  public:

  // optional float AP_P_PARKOUT_PAR_SAFTEY_DIST_M = 1932;
  bool has_ap_p_parkout_par_saftey_dist_m() const;
  private:
  bool _internal_has_ap_p_parkout_par_saftey_dist_m() const;
  public:
  void clear_ap_p_parkout_par_saftey_dist_m();
  float ap_p_parkout_par_saftey_dist_m() const;
  void set_ap_p_parkout_par_saftey_dist_m(float value);
  private:
  float _internal_ap_p_parkout_par_saftey_dist_m() const;
  void _internal_set_ap_p_parkout_par_saftey_dist_m(float value);
  public:

  // optional uint32 AP_P_MIN_NUM_VALID_TO_OUTPUT_NU = 1944;
  bool has_ap_p_min_num_valid_to_output_nu() const;
  private:
  bool _internal_has_ap_p_min_num_valid_to_output_nu() const;
  public:
  void clear_ap_p_min_num_valid_to_output_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_min_num_valid_to_output_nu() const;
  void set_ap_p_min_num_valid_to_output_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_min_num_valid_to_output_nu() const;
  void _internal_set_ap_p_min_num_valid_to_output_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M = 1975;
  bool has_ap_p_par_nodynreplan_dist_to_stop_m() const;
  private:
  bool _internal_has_ap_p_par_nodynreplan_dist_to_stop_m() const;
  public:
  void clear_ap_p_par_nodynreplan_dist_to_stop_m();
  float ap_p_par_nodynreplan_dist_to_stop_m() const;
  void set_ap_p_par_nodynreplan_dist_to_stop_m(float value);
  private:
  float _internal_ap_p_par_nodynreplan_dist_to_stop_m() const;
  void _internal_set_ap_p_par_nodynreplan_dist_to_stop_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_M = 1992;
  bool has_mp_p_roi_corner_y_prpb_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpb_out_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpb_out_m();
  float mp_p_roi_corner_y_prpb_out_m() const;
  void set_mp_p_roi_corner_y_prpb_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpb_out_m() const;
  void _internal_set_mp_p_roi_corner_y_prpb_out_m(float value);
  public:

  // optional float AP_P_PERP_FWD_IN_LONG_DEV_FCTR = 2024;
  bool has_ap_p_perp_fwd_in_long_dev_fctr() const;
  private:
  bool _internal_has_ap_p_perp_fwd_in_long_dev_fctr() const;
  public:
  void clear_ap_p_perp_fwd_in_long_dev_fctr();
  float ap_p_perp_fwd_in_long_dev_fctr() const;
  void set_ap_p_perp_fwd_in_long_dev_fctr(float value);
  private:
  float _internal_ap_p_perp_fwd_in_long_dev_fctr() const;
  void _internal_set_ap_p_perp_fwd_in_long_dev_fctr(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_MAX_PARKING_VEL_BWD_MPS = 2140;
  bool has_ap_p_max_parking_vel_bwd_mps() const;
  private:
  bool _internal_has_ap_p_max_parking_vel_bwd_mps() const;
  public:
  void clear_ap_p_max_parking_vel_bwd_mps();
  float ap_p_max_parking_vel_bwd_mps() const;
  void set_ap_p_max_parking_vel_bwd_mps(float value);
  private:
  float _internal_ap_p_max_parking_vel_bwd_mps() const;
  void _internal_set_ap_p_max_parking_vel_bwd_mps(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 2187;
  bool has_ap_p_roi_corner_y_prpf_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpf_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpf_in_op_m();
  float ap_p_roi_corner_y_prpf_in_op_m() const;
  void set_ap_p_roi_corner_y_prpf_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpf_in_op_m() const;
  void _internal_set_ap_p_roi_corner_y_prpf_in_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGS_IN_M = 2193;
  bool has_ap_p_roi_corner_y_angs_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angs_in_m() const;
  public:
  void clear_ap_p_roi_corner_y_angs_in_m();
  float ap_p_roi_corner_y_angs_in_m() const;
  void set_ap_p_roi_corner_y_angs_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angs_in_m() const;
  void _internal_set_ap_p_roi_corner_y_angs_in_m(float value);
  public:

  // optional float AP_P_ROI_EDGE_LENGTH_M = 2199;
  bool has_ap_p_roi_edge_length_m() const;
  private:
  bool _internal_has_ap_p_roi_edge_length_m() const;
  public:
  void clear_ap_p_roi_edge_length_m();
  float ap_p_roi_edge_length_m() const;
  void set_ap_p_roi_edge_length_m(float value);
  private:
  float _internal_ap_p_roi_edge_length_m() const;
  void _internal_set_ap_p_roi_edge_length_m(float value);
  public:

  // optional float AP_P_PERP_END_LIMIT_VEL_DIST_M = 2236;
  bool has_ap_p_perp_end_limit_vel_dist_m() const;
  private:
  bool _internal_has_ap_p_perp_end_limit_vel_dist_m() const;
  public:
  void clear_ap_p_perp_end_limit_vel_dist_m();
  float ap_p_perp_end_limit_vel_dist_m() const;
  void set_ap_p_perp_end_limit_vel_dist_m(float value);
  private:
  float _internal_ap_p_perp_end_limit_vel_dist_m() const;
  void _internal_set_ap_p_perp_end_limit_vel_dist_m(float value);
  public:

  // optional float AP_P_FACTOR_SAFETY_NU = 2249;
  bool has_ap_p_factor_safety_nu() const;
  private:
  bool _internal_has_ap_p_factor_safety_nu() const;
  public:
  void clear_ap_p_factor_safety_nu();
  float ap_p_factor_safety_nu() const;
  void set_ap_p_factor_safety_nu(float value);
  private:
  float _internal_ap_p_factor_safety_nu() const;
  void _internal_set_ap_p_factor_safety_nu(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PAR_OUT_M = 2268;
  bool has_ap_p_roi_corner_y_par_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_par_out_m() const;
  public:
  void clear_ap_p_roi_corner_y_par_out_m();
  float ap_p_roi_corner_y_par_out_m() const;
  void set_ap_p_roi_corner_y_par_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_par_out_m() const;
  void _internal_set_ap_p_roi_corner_y_par_out_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 2272;
  bool has_mp_p_roi_corner_y_prpb_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpb_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpb_in_op_m();
  float mp_p_roi_corner_y_prpb_in_op_m() const;
  void set_mp_p_roi_corner_y_prpb_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpb_in_op_m() const;
  void _internal_set_mp_p_roi_corner_y_prpb_in_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PAR_IN_OP_M = 2277;
  bool has_mp_p_roi_corner_x_par_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_par_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_par_in_op_m();
  float mp_p_roi_corner_x_par_in_op_m() const;
  void set_mp_p_roi_corner_x_par_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_par_in_op_m() const;
  void _internal_set_mp_p_roi_corner_x_par_in_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PAR_OUT_OP_M = 2339;
  bool has_mp_p_roi_corner_x_par_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_par_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_par_out_op_m();
  float mp_p_roi_corner_x_par_out_op_m() const;
  void set_mp_p_roi_corner_x_par_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_par_out_op_m() const;
  void _internal_set_mp_p_roi_corner_x_par_out_op_m(float value);
  public:

  // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M = 2395;
  bool has_ap_p_parkout_ego_dist_to_fake_objects_ang_m() const;
  private:
  bool _internal_has_ap_p_parkout_ego_dist_to_fake_objects_ang_m() const;
  public:
  void clear_ap_p_parkout_ego_dist_to_fake_objects_ang_m();
  float ap_p_parkout_ego_dist_to_fake_objects_ang_m() const;
  void set_ap_p_parkout_ego_dist_to_fake_objects_ang_m(float value);
  private:
  float _internal_ap_p_parkout_ego_dist_to_fake_objects_ang_m() const;
  void _internal_set_ap_p_parkout_ego_dist_to_fake_objects_ang_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_M = 2450;
  bool has_ap_p_roi_corner_y_angs_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angs_out_m() const;
  public:
  void clear_ap_p_roi_corner_y_angs_out_m();
  float ap_p_roi_corner_y_angs_out_m() const;
  void set_ap_p_roi_corner_y_angs_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angs_out_m() const;
  void _internal_set_ap_p_roi_corner_y_angs_out_m(float value);
  public:

  // optional float AP_P_MAX_PARKING_VEL_FWD_MPS = 2458;
  bool has_ap_p_max_parking_vel_fwd_mps() const;
  private:
  bool _internal_has_ap_p_max_parking_vel_fwd_mps() const;
  public:
  void clear_ap_p_max_parking_vel_fwd_mps();
  float ap_p_max_parking_vel_fwd_mps() const;
  void set_ap_p_max_parking_vel_fwd_mps(float value);
  private:
  float _internal_ap_p_max_parking_vel_fwd_mps() const;
  void _internal_set_ap_p_max_parking_vel_fwd_mps(float value);
  public:

  // optional float AP_P_MIN_DIST_START_TGTAXIS_M = 2463;
  bool has_ap_p_min_dist_start_tgtaxis_m() const;
  private:
  bool _internal_has_ap_p_min_dist_start_tgtaxis_m() const;
  public:
  void clear_ap_p_min_dist_start_tgtaxis_m();
  float ap_p_min_dist_start_tgtaxis_m() const;
  void set_ap_p_min_dist_start_tgtaxis_m(float value);
  private:
  float _internal_ap_p_min_dist_start_tgtaxis_m() const;
  void _internal_set_ap_p_min_dist_start_tgtaxis_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PAR_IN_OP_M = 2474;
  bool has_ap_p_roi_corner_y_par_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_par_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_par_in_op_m();
  float ap_p_roi_corner_y_par_in_op_m() const;
  void set_ap_p_roi_corner_y_par_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_par_in_op_m() const;
  void _internal_set_ap_p_roi_corner_y_par_in_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 2500;
  bool has_ap_p_roi_corner_x_prpb_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpb_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpb_out_op_m();
  float ap_p_roi_corner_x_prpb_out_op_m() const;
  void set_ap_p_roi_corner_x_prpb_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpb_out_op_m() const;
  void _internal_set_ap_p_roi_corner_x_prpb_out_op_m(float value);
  public:

  // optional float AP_P_PRP_FWD_R_SCALE_1ST_STRK_M = 2511;
  bool has_ap_p_prp_fwd_r_scale_1st_strk_m() const;
  private:
  bool _internal_has_ap_p_prp_fwd_r_scale_1st_strk_m() const;
  public:
  void clear_ap_p_prp_fwd_r_scale_1st_strk_m();
  float ap_p_prp_fwd_r_scale_1st_strk_m() const;
  void set_ap_p_prp_fwd_r_scale_1st_strk_m(float value);
  private:
  float _internal_ap_p_prp_fwd_r_scale_1st_strk_m() const;
  void _internal_set_ap_p_prp_fwd_r_scale_1st_strk_m(float value);
  public:

  // optional float AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M = 2525;
  bool has_ap_p_inc_cir_length_for_scur_out_m() const;
  private:
  bool _internal_has_ap_p_inc_cir_length_for_scur_out_m() const;
  public:
  void clear_ap_p_inc_cir_length_for_scur_out_m();
  float ap_p_inc_cir_length_for_scur_out_m() const;
  void set_ap_p_inc_cir_length_for_scur_out_m(float value);
  private:
  float _internal_ap_p_inc_cir_length_for_scur_out_m() const;
  void _internal_set_ap_p_inc_cir_length_for_scur_out_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 2563;
  bool has_mp_p_roi_corner_x_angr_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angr_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_angr_out_op_m();
  float mp_p_roi_corner_x_angr_out_op_m() const;
  void set_mp_p_roi_corner_x_angr_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angr_out_op_m() const;
  void _internal_set_mp_p_roi_corner_x_angr_out_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 2573;
  bool has_ap_p_roi_corner_y_prpf_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpf_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpf_out_op_m();
  float ap_p_roi_corner_y_prpf_out_op_m() const;
  void set_ap_p_roi_corner_y_prpf_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpf_out_op_m() const;
  void _internal_set_ap_p_roi_corner_y_prpf_out_op_m(float value);
  public:

  // optional float AP_P_OUT_VRTX_RADIUS_SCALING_NU = 2621;
  bool has_ap_p_out_vrtx_radius_scaling_nu() const;
  private:
  bool _internal_has_ap_p_out_vrtx_radius_scaling_nu() const;
  public:
  void clear_ap_p_out_vrtx_radius_scaling_nu();
  float ap_p_out_vrtx_radius_scaling_nu() const;
  void set_ap_p_out_vrtx_radius_scaling_nu(float value);
  private:
  float _internal_ap_p_out_vrtx_radius_scaling_nu() const;
  void _internal_set_ap_p_out_vrtx_radius_scaling_nu(float value);
  public:

  // optional float AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M = 2674;
  bool has_ap_p_max_lat_dev_for_straight_repl_par_m() const;
  private:
  bool _internal_has_ap_p_max_lat_dev_for_straight_repl_par_m() const;
  public:
  void clear_ap_p_max_lat_dev_for_straight_repl_par_m();
  float ap_p_max_lat_dev_for_straight_repl_par_m() const;
  void set_ap_p_max_lat_dev_for_straight_repl_par_m(float value);
  private:
  float _internal_ap_p_max_lat_dev_for_straight_repl_par_m() const;
  void _internal_set_ap_p_max_lat_dev_for_straight_repl_par_m(float value);
  public:

  // optional float AP_P_RATIO_CONFINED_SPACE = 2679;
  bool has_ap_p_ratio_confined_space() const;
  private:
  bool _internal_has_ap_p_ratio_confined_space() const;
  public:
  void clear_ap_p_ratio_confined_space();
  float ap_p_ratio_confined_space() const;
  void set_ap_p_ratio_confined_space(float value);
  private:
  float _internal_ap_p_ratio_confined_space() const;
  void _internal_set_ap_p_ratio_confined_space(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 2688;
  bool has_mp_p_roi_corner_y_angs_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angs_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_angs_in_op_m();
  float mp_p_roi_corner_y_angs_in_op_m() const;
  void set_mp_p_roi_corner_y_angs_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angs_in_op_m() const;
  void _internal_set_mp_p_roi_corner_y_angs_in_op_m(float value);
  public:

  // optional float AP_P_MAX_ALIGNMENT_RADIUS_M = 2697;
  bool has_ap_p_max_alignment_radius_m() const;
  private:
  bool _internal_has_ap_p_max_alignment_radius_m() const;
  public:
  void clear_ap_p_max_alignment_radius_m();
  float ap_p_max_alignment_radius_m() const;
  void set_ap_p_max_alignment_radius_m(float value);
  private:
  float _internal_ap_p_max_alignment_radius_m() const;
  void _internal_set_ap_p_max_alignment_radius_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGR_IN_OP_M = 2754;
  bool has_mp_p_roi_corner_x_angr_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angr_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_angr_in_op_m();
  float mp_p_roi_corner_x_angr_in_op_m() const;
  void set_mp_p_roi_corner_x_angr_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angr_in_op_m() const;
  void _internal_set_mp_p_roi_corner_x_angr_in_op_m(float value);
  public:

  // optional float AP_P_MIN_RADIUS_ADD_CIRCLE_M = 2785;
  bool has_ap_p_min_radius_add_circle_m() const;
  private:
  bool _internal_has_ap_p_min_radius_add_circle_m() const;
  public:
  void clear_ap_p_min_radius_add_circle_m();
  float ap_p_min_radius_add_circle_m() const;
  void set_ap_p_min_radius_add_circle_m(float value);
  private:
  float _internal_ap_p_min_radius_add_circle_m() const;
  void _internal_set_ap_p_min_radius_add_circle_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGS_OUT_M = 2791;
  bool has_ap_p_roi_corner_x_angs_out_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angs_out_m() const;
  public:
  void clear_ap_p_roi_corner_x_angs_out_m();
  float ap_p_roi_corner_x_angs_out_m() const;
  void set_ap_p_roi_corner_x_angs_out_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angs_out_m() const;
  void _internal_set_ap_p_roi_corner_x_angs_out_m(float value);
  public:

  // optional float AP_P_PARKOUT_BLIND_DISTANCE_PERP_M = 2794;
  bool has_ap_p_parkout_blind_distance_perp_m() const;
  private:
  bool _internal_has_ap_p_parkout_blind_distance_perp_m() const;
  public:
  void clear_ap_p_parkout_blind_distance_perp_m();
  float ap_p_parkout_blind_distance_perp_m() const;
  void set_ap_p_parkout_blind_distance_perp_m(float value);
  private:
  float _internal_ap_p_parkout_blind_distance_perp_m() const;
  void _internal_set_ap_p_parkout_blind_distance_perp_m(float value);
  public:

  // optional float AP_P_MIN_ALIGNMENT_ANGLE_RAD = 2798;
  bool has_ap_p_min_alignment_angle_rad() const;
  private:
  bool _internal_has_ap_p_min_alignment_angle_rad() const;
  public:
  void clear_ap_p_min_alignment_angle_rad();
  float ap_p_min_alignment_angle_rad() const;
  void set_ap_p_min_alignment_angle_rad(float value);
  private:
  float _internal_ap_p_min_alignment_angle_rad() const;
  void _internal_set_ap_p_min_alignment_angle_rad(float value);
  public:

  // optional float AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M = 2817;
  bool has_ap_p_max_prep_stroke_len_straight_m() const;
  private:
  bool _internal_has_ap_p_max_prep_stroke_len_straight_m() const;
  public:
  void clear_ap_p_max_prep_stroke_len_straight_m();
  float ap_p_max_prep_stroke_len_straight_m() const;
  void set_ap_p_max_prep_stroke_len_straight_m(float value);
  private:
  float _internal_ap_p_max_prep_stroke_len_straight_m() const;
  void _internal_set_ap_p_max_prep_stroke_len_straight_m(float value);
  public:

  // optional uint32 AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE = 2846;
  bool has_ap_p_max_attempt_wrap_up_triangle() const;
  private:
  bool _internal_has_ap_p_max_attempt_wrap_up_triangle() const;
  public:
  void clear_ap_p_max_attempt_wrap_up_triangle();
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_max_attempt_wrap_up_triangle() const;
  void set_ap_p_max_attempt_wrap_up_triangle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ap_p_max_attempt_wrap_up_triangle() const;
  void _internal_set_ap_p_max_attempt_wrap_up_triangle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M = 2861;
  bool has_ap_p_parkout_ego_dist_to_fake_objects_par_m() const;
  private:
  bool _internal_has_ap_p_parkout_ego_dist_to_fake_objects_par_m() const;
  public:
  void clear_ap_p_parkout_ego_dist_to_fake_objects_par_m();
  float ap_p_parkout_ego_dist_to_fake_objects_par_m() const;
  void set_ap_p_parkout_ego_dist_to_fake_objects_par_m(float value);
  private:
  float _internal_ap_p_parkout_ego_dist_to_fake_objects_par_m() const;
  void _internal_set_ap_p_parkout_ego_dist_to_fake_objects_par_m(float value);
  public:

  // optional float AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M = 2917;
  bool has_ap_p_max_height_of_triangle_clo_collision_m() const;
  private:
  bool _internal_has_ap_p_max_height_of_triangle_clo_collision_m() const;
  public:
  void clear_ap_p_max_height_of_triangle_clo_collision_m();
  float ap_p_max_height_of_triangle_clo_collision_m() const;
  void set_ap_p_max_height_of_triangle_clo_collision_m(float value);
  private:
  float _internal_ap_p_max_height_of_triangle_clo_collision_m() const;
  void _internal_set_ap_p_max_height_of_triangle_clo_collision_m(float value);
  public:

  // optional float AP_P_VIRTUAL_OBJ_DIST_TO_TP_M = 2931;
  bool has_ap_p_virtual_obj_dist_to_tp_m() const;
  private:
  bool _internal_has_ap_p_virtual_obj_dist_to_tp_m() const;
  public:
  void clear_ap_p_virtual_obj_dist_to_tp_m();
  float ap_p_virtual_obj_dist_to_tp_m() const;
  void set_ap_p_virtual_obj_dist_to_tp_m(float value);
  private:
  float _internal_ap_p_virtual_obj_dist_to_tp_m() const;
  void _internal_set_ap_p_virtual_obj_dist_to_tp_m(float value);
  public:

  // optional float AP_P_RATIO_ADD_MIN_RADIUS_ANGLED = 2952;
  bool has_ap_p_ratio_add_min_radius_angled() const;
  private:
  bool _internal_has_ap_p_ratio_add_min_radius_angled() const;
  public:
  void clear_ap_p_ratio_add_min_radius_angled();
  float ap_p_ratio_add_min_radius_angled() const;
  void set_ap_p_ratio_add_min_radius_angled(float value);
  private:
  float _internal_ap_p_ratio_add_min_radius_angled() const;
  void _internal_set_ap_p_ratio_add_min_radius_angled(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 3002;
  bool has_mp_p_roi_corner_y_angs_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angs_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_angs_out_op_m();
  float mp_p_roi_corner_y_angs_out_op_m() const;
  void set_mp_p_roi_corner_y_angs_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angs_out_op_m() const;
  void _internal_set_mp_p_roi_corner_y_angs_out_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGR_IN_M = 3024;
  bool has_mp_p_roi_corner_x_angr_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angr_in_m() const;
  public:
  void clear_mp_p_roi_corner_x_angr_in_m();
  float mp_p_roi_corner_x_angr_in_m() const;
  void set_mp_p_roi_corner_x_angr_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angr_in_m() const;
  void _internal_set_mp_p_roi_corner_x_angr_in_m(float value);
  public:

  // optional float AP_P_PERP_BWD_IN_YAW_DEV_FCTR = 3031;
  bool has_ap_p_perp_bwd_in_yaw_dev_fctr() const;
  private:
  bool _internal_has_ap_p_perp_bwd_in_yaw_dev_fctr() const;
  public:
  void clear_ap_p_perp_bwd_in_yaw_dev_fctr();
  float ap_p_perp_bwd_in_yaw_dev_fctr() const;
  void set_ap_p_perp_bwd_in_yaw_dev_fctr(float value);
  private:
  float _internal_ap_p_perp_bwd_in_yaw_dev_fctr() const;
  void _internal_set_ap_p_perp_bwd_in_yaw_dev_fctr(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPF_IN_M = 3061;
  bool has_ap_p_roi_corner_y_prpf_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpf_in_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpf_in_m();
  float ap_p_roi_corner_y_prpf_in_m() const;
  void set_ap_p_roi_corner_y_prpf_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpf_in_m() const;
  void _internal_set_ap_p_roi_corner_y_prpf_in_m(float value);
  public:

  // optional float AP_P_PERP_FWD_IN_LAT_DEV_FCTR = 3062;
  bool has_ap_p_perp_fwd_in_lat_dev_fctr() const;
  private:
  bool _internal_has_ap_p_perp_fwd_in_lat_dev_fctr() const;
  public:
  void clear_ap_p_perp_fwd_in_lat_dev_fctr();
  float ap_p_perp_fwd_in_lat_dev_fctr() const;
  void set_ap_p_perp_fwd_in_lat_dev_fctr(float value);
  private:
  float _internal_ap_p_perp_fwd_in_lat_dev_fctr() const;
  void _internal_set_ap_p_perp_fwd_in_lat_dev_fctr(float value);
  public:

  // optional float AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M = 3124;
  bool has_ap_p_max_scurve_dist_to_tgt_pose_m() const;
  private:
  bool _internal_has_ap_p_max_scurve_dist_to_tgt_pose_m() const;
  public:
  void clear_ap_p_max_scurve_dist_to_tgt_pose_m();
  float ap_p_max_scurve_dist_to_tgt_pose_m() const;
  void set_ap_p_max_scurve_dist_to_tgt_pose_m(float value);
  private:
  float _internal_ap_p_max_scurve_dist_to_tgt_pose_m() const;
  void _internal_set_ap_p_max_scurve_dist_to_tgt_pose_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGS_OUT_M = 3126;
  bool has_mp_p_roi_corner_x_angs_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angs_out_m() const;
  public:
  void clear_mp_p_roi_corner_x_angs_out_m();
  float mp_p_roi_corner_x_angs_out_m() const;
  void set_mp_p_roi_corner_x_angs_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angs_out_m() const;
  void _internal_set_mp_p_roi_corner_x_angs_out_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PAR_IN_M = 3130;
  bool has_mp_p_roi_corner_y_par_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_par_in_m() const;
  public:
  void clear_mp_p_roi_corner_y_par_in_m();
  float mp_p_roi_corner_y_par_in_m() const;
  void set_mp_p_roi_corner_y_par_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_par_in_m() const;
  void _internal_set_mp_p_roi_corner_y_par_in_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 3180;
  bool has_ap_p_roi_corner_x_angs_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angs_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_angs_out_op_m();
  float ap_p_roi_corner_x_angs_out_op_m() const;
  void set_ap_p_roi_corner_x_angs_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angs_out_op_m() const;
  void _internal_set_ap_p_roi_corner_x_angs_out_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PAR_IN_OP_M = 3273;
  bool has_ap_p_roi_corner_x_par_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_par_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_par_in_op_m();
  float ap_p_roi_corner_x_par_in_op_m() const;
  void set_ap_p_roi_corner_x_par_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_par_in_op_m() const;
  void _internal_set_ap_p_roi_corner_x_par_in_op_m(float value);
  public:

  // optional float AP_P_RADIUS_EXT_PERP_FIN_STRO_M = 3318;
  bool has_ap_p_radius_ext_perp_fin_stro_m() const;
  private:
  bool _internal_has_ap_p_radius_ext_perp_fin_stro_m() const;
  public:
  void clear_ap_p_radius_ext_perp_fin_stro_m();
  float ap_p_radius_ext_perp_fin_stro_m() const;
  void set_ap_p_radius_ext_perp_fin_stro_m(float value);
  private:
  float _internal_ap_p_radius_ext_perp_fin_stro_m() const;
  void _internal_set_ap_p_radius_ext_perp_fin_stro_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPF_IN_M = 3348;
  bool has_mp_p_roi_corner_x_prpf_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpf_in_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpf_in_m();
  float mp_p_roi_corner_x_prpf_in_m() const;
  void set_mp_p_roi_corner_x_prpf_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpf_in_m() const;
  void _internal_set_mp_p_roi_corner_x_prpf_in_m(float value);
  public:

  // optional float AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M = 3351;
  bool has_ap_p_par_repl_max_extend_dist_after_scurve_m() const;
  private:
  bool _internal_has_ap_p_par_repl_max_extend_dist_after_scurve_m() const;
  public:
  void clear_ap_p_par_repl_max_extend_dist_after_scurve_m();
  float ap_p_par_repl_max_extend_dist_after_scurve_m() const;
  void set_ap_p_par_repl_max_extend_dist_after_scurve_m(float value);
  private:
  float _internal_ap_p_par_repl_max_extend_dist_after_scurve_m() const;
  void _internal_set_ap_p_par_repl_max_extend_dist_after_scurve_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 3367;
  bool has_ap_p_roi_corner_y_angr_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angr_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_angr_in_op_m();
  float ap_p_roi_corner_y_angr_in_op_m() const;
  void set_ap_p_roi_corner_y_angr_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angr_in_op_m() const;
  void _internal_set_ap_p_roi_corner_y_angr_in_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGR_IN_M = 3377;
  bool has_ap_p_roi_corner_y_angr_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angr_in_m() const;
  public:
  void clear_ap_p_roi_corner_y_angr_in_m();
  float ap_p_roi_corner_y_angr_in_m() const;
  void set_ap_p_roi_corner_y_angr_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angr_in_m() const;
  void _internal_set_ap_p_roi_corner_y_angr_in_m(float value);
  public:

  // optional float AP_P_MAX_DIST_PERP_WO_BCKT_M = 3393;
  bool has_ap_p_max_dist_perp_wo_bckt_m() const;
  private:
  bool _internal_has_ap_p_max_dist_perp_wo_bckt_m() const;
  public:
  void clear_ap_p_max_dist_perp_wo_bckt_m();
  float ap_p_max_dist_perp_wo_bckt_m() const;
  void set_ap_p_max_dist_perp_wo_bckt_m(float value);
  private:
  float _internal_ap_p_max_dist_perp_wo_bckt_m() const;
  void _internal_set_ap_p_max_dist_perp_wo_bckt_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PRPB_IN_M = 3412;
  bool has_ap_p_roi_corner_y_prpb_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_prpb_in_m() const;
  public:
  void clear_ap_p_roi_corner_y_prpb_in_m();
  float ap_p_roi_corner_y_prpb_in_m() const;
  void set_ap_p_roi_corner_y_prpb_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_prpb_in_m() const;
  void _internal_set_ap_p_roi_corner_y_prpb_in_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_ANGS_IN_OP_M = 3429;
  bool has_ap_p_roi_corner_x_angs_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_angs_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_angs_in_op_m();
  float ap_p_roi_corner_x_angs_in_op_m() const;
  void set_ap_p_roi_corner_x_angs_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_angs_in_op_m() const;
  void _internal_set_ap_p_roi_corner_x_angs_in_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PAR_IN_OP_M = 3462;
  bool has_mp_p_roi_corner_y_par_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_par_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_par_in_op_m();
  float mp_p_roi_corner_y_par_in_op_m() const;
  void set_mp_p_roi_corner_y_par_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_par_in_op_m() const;
  void _internal_set_mp_p_roi_corner_y_par_in_op_m(float value);
  public:

  // optional float AP_P_MAX_POLY_VEL_MPS = 3463;
  bool has_ap_p_max_poly_vel_mps() const;
  private:
  bool _internal_has_ap_p_max_poly_vel_mps() const;
  public:
  void clear_ap_p_max_poly_vel_mps();
  float ap_p_max_poly_vel_mps() const;
  void set_ap_p_max_poly_vel_mps(float value);
  private:
  float _internal_ap_p_max_poly_vel_mps() const;
  void _internal_set_ap_p_max_poly_vel_mps(float value);
  public:

  // optional float AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M = 3518;
  bool has_ap_p_par_max_dist_for_sym_scurve_m() const;
  private:
  bool _internal_has_ap_p_par_max_dist_for_sym_scurve_m() const;
  public:
  void clear_ap_p_par_max_dist_for_sym_scurve_m();
  float ap_p_par_max_dist_for_sym_scurve_m() const;
  void set_ap_p_par_max_dist_for_sym_scurve_m(float value);
  private:
  float _internal_ap_p_par_max_dist_for_sym_scurve_m() const;
  void _internal_set_ap_p_par_max_dist_for_sym_scurve_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 3541;
  bool has_ap_p_roi_corner_y_angr_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_angr_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_angr_out_op_m();
  float ap_p_roi_corner_y_angr_out_op_m() const;
  void set_ap_p_roi_corner_y_angr_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_angr_out_op_m() const;
  void _internal_set_ap_p_roi_corner_y_angr_out_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 3547;
  bool has_mp_p_roi_corner_x_prpf_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpf_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpf_out_op_m();
  float mp_p_roi_corner_x_prpf_out_op_m() const;
  void set_mp_p_roi_corner_x_prpf_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpf_out_op_m() const;
  void _internal_set_mp_p_roi_corner_x_prpf_out_op_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 3602;
  bool has_mp_p_roi_corner_y_prpb_out_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_prpb_out_op_m() const;
  public:
  void clear_mp_p_roi_corner_y_prpb_out_op_m();
  float mp_p_roi_corner_y_prpb_out_op_m() const;
  void set_mp_p_roi_corner_y_prpb_out_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_prpb_out_op_m() const;
  void _internal_set_mp_p_roi_corner_y_prpb_out_op_m(float value);
  public:

  // optional float AP_P_BEST_PATH_GOAL_DEV_THR_NU = 3633;
  bool has_ap_p_best_path_goal_dev_thr_nu() const;
  private:
  bool _internal_has_ap_p_best_path_goal_dev_thr_nu() const;
  public:
  void clear_ap_p_best_path_goal_dev_thr_nu();
  float ap_p_best_path_goal_dev_thr_nu() const;
  void set_ap_p_best_path_goal_dev_thr_nu(float value);
  private:
  float _internal_ap_p_best_path_goal_dev_thr_nu() const;
  void _internal_set_ap_p_best_path_goal_dev_thr_nu(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PAR_OUT_M = 3645;
  bool has_mp_p_roi_corner_x_par_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_par_out_m() const;
  public:
  void clear_mp_p_roi_corner_x_par_out_m();
  float mp_p_roi_corner_x_par_out_m() const;
  void set_mp_p_roi_corner_x_par_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_par_out_m() const;
  void _internal_set_mp_p_roi_corner_x_par_out_m(float value);
  public:

  // optional float AP_P_POUT_PERP_STRAIGHT_EXT_M = 3650;
  bool has_ap_p_pout_perp_straight_ext_m() const;
  private:
  bool _internal_has_ap_p_pout_perp_straight_ext_m() const;
  public:
  void clear_ap_p_pout_perp_straight_ext_m();
  float ap_p_pout_perp_straight_ext_m() const;
  void set_ap_p_pout_perp_straight_ext_m(float value);
  private:
  float _internal_ap_p_pout_perp_straight_ext_m() const;
  void _internal_set_ap_p_pout_perp_straight_ext_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PAR_IN_M = 3665;
  bool has_ap_p_roi_corner_y_par_in_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_par_in_m() const;
  public:
  void clear_ap_p_roi_corner_y_par_in_m();
  float ap_p_roi_corner_y_par_in_m() const;
  void set_ap_p_roi_corner_y_par_in_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_par_in_m() const;
  void _internal_set_ap_p_roi_corner_y_par_in_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_ANGS_IN_M = 3696;
  bool has_mp_p_roi_corner_x_angs_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_angs_in_m() const;
  public:
  void clear_mp_p_roi_corner_x_angs_in_m();
  float mp_p_roi_corner_x_angs_in_m() const;
  void set_mp_p_roi_corner_x_angs_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_angs_in_m() const;
  void _internal_set_mp_p_roi_corner_x_angs_in_m(float value);
  public:

  // optional float AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M = 3756;
  bool has_ap_p_min_prep_stroke_len_straight_m() const;
  private:
  bool _internal_has_ap_p_min_prep_stroke_len_straight_m() const;
  public:
  void clear_ap_p_min_prep_stroke_len_straight_m();
  float ap_p_min_prep_stroke_len_straight_m() const;
  void set_ap_p_min_prep_stroke_len_straight_m(float value);
  private:
  float _internal_ap_p_min_prep_stroke_len_straight_m() const;
  void _internal_set_ap_p_min_prep_stroke_len_straight_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 3782;
  bool has_ap_p_roi_corner_y_par_out_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_y_par_out_op_m() const;
  public:
  void clear_ap_p_roi_corner_y_par_out_op_m();
  float ap_p_roi_corner_y_par_out_op_m() const;
  void set_ap_p_roi_corner_y_par_out_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_y_par_out_op_m() const;
  void _internal_set_ap_p_roi_corner_y_par_out_op_m(float value);
  public:

  // optional float AP_P_ROI_CORNER_X_PRPB_IN_OP_M = 3845;
  bool has_ap_p_roi_corner_x_prpb_in_op_m() const;
  private:
  bool _internal_has_ap_p_roi_corner_x_prpb_in_op_m() const;
  public:
  void clear_ap_p_roi_corner_x_prpb_in_op_m();
  float ap_p_roi_corner_x_prpb_in_op_m() const;
  void set_ap_p_roi_corner_x_prpb_in_op_m(float value);
  private:
  float _internal_ap_p_roi_corner_x_prpb_in_op_m() const;
  void _internal_set_ap_p_roi_corner_x_prpb_in_op_m(float value);
  public:

  // optional float AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M = 3895;
  bool has_ap_p_dist_to_pb_for_misal_start_pose_planning_m() const;
  private:
  bool _internal_has_ap_p_dist_to_pb_for_misal_start_pose_planning_m() const;
  public:
  void clear_ap_p_dist_to_pb_for_misal_start_pose_planning_m();
  float ap_p_dist_to_pb_for_misal_start_pose_planning_m() const;
  void set_ap_p_dist_to_pb_for_misal_start_pose_planning_m(float value);
  private:
  float _internal_ap_p_dist_to_pb_for_misal_start_pose_planning_m() const;
  void _internal_set_ap_p_dist_to_pb_for_misal_start_pose_planning_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_M = 3907;
  bool has_mp_p_roi_corner_y_angs_out_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angs_out_m() const;
  public:
  void clear_mp_p_roi_corner_y_angs_out_m();
  float mp_p_roi_corner_y_angs_out_m() const;
  void set_mp_p_roi_corner_y_angs_out_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angs_out_m() const;
  void _internal_set_mp_p_roi_corner_y_angs_out_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPF_IN_OP_M = 3950;
  bool has_mp_p_roi_corner_x_prpf_in_op_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpf_in_op_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpf_in_op_m();
  float mp_p_roi_corner_x_prpf_in_op_m() const;
  void set_mp_p_roi_corner_x_prpf_in_op_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpf_in_op_m() const;
  void _internal_set_mp_p_roi_corner_x_prpf_in_op_m(float value);
  public:

  // optional float AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M = 4001;
  bool has_ap_p_add_straight_to_wheelstopper_m() const;
  private:
  bool _internal_has_ap_p_add_straight_to_wheelstopper_m() const;
  public:
  void clear_ap_p_add_straight_to_wheelstopper_m();
  float ap_p_add_straight_to_wheelstopper_m() const;
  void set_ap_p_add_straight_to_wheelstopper_m(float value);
  private:
  float _internal_ap_p_add_straight_to_wheelstopper_m() const;
  void _internal_set_ap_p_add_straight_to_wheelstopper_m(float value);
  public:

  // optional float AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD = 2716735;
  bool has_ap_p_max_distance_shorten_first_strk_fwd() const;
  private:
  bool _internal_has_ap_p_max_distance_shorten_first_strk_fwd() const;
  public:
  void clear_ap_p_max_distance_shorten_first_strk_fwd();
  float ap_p_max_distance_shorten_first_strk_fwd() const;
  void set_ap_p_max_distance_shorten_first_strk_fwd(float value);
  private:
  float _internal_ap_p_max_distance_shorten_first_strk_fwd() const;
  void _internal_set_ap_p_max_distance_shorten_first_strk_fwd(float value);
  public:

  // optional float MP_P_ROI_CORNER_Y_ANGR_IN_M = 3222586;
  bool has_mp_p_roi_corner_y_angr_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_y_angr_in_m() const;
  public:
  void clear_mp_p_roi_corner_y_angr_in_m();
  float mp_p_roi_corner_y_angr_in_m() const;
  void set_mp_p_roi_corner_y_angr_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_y_angr_in_m() const;
  void _internal_set_mp_p_roi_corner_y_angr_in_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PAR_IN_M = 8258625;
  bool has_mp_p_roi_corner_x_par_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_par_in_m() const;
  public:
  void clear_mp_p_roi_corner_x_par_in_m();
  float mp_p_roi_corner_x_par_in_m() const;
  void set_mp_p_roi_corner_x_par_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_par_in_m() const;
  void _internal_set_mp_p_roi_corner_x_par_in_m(float value);
  public:

  // optional float MP_P_ROI_CORNER_X_PRPB_IN_M = 10939324;
  bool has_mp_p_roi_corner_x_prpb_in_m() const;
  private:
  bool _internal_has_mp_p_roi_corner_x_prpb_in_m() const;
  public:
  void clear_mp_p_roi_corner_x_prpb_in_m();
  float mp_p_roi_corner_x_prpb_in_m() const;
  void set_mp_p_roi_corner_x_prpb_in_m(float value);
  private:
  float _internal_mp_p_roi_corner_x_prpb_in_m() const;
  void _internal_set_mp_p_roi_corner_x_prpb_in_m(float value);
  public:

  // optional float AP_P_BEST_PATH_LENGTH_THR_M = 11680804;
  bool has_ap_p_best_path_length_thr_m() const;
  private:
  bool _internal_has_ap_p_best_path_length_thr_m() const;
  public:
  void clear_ap_p_best_path_length_thr_m();
  float ap_p_best_path_length_thr_m() const;
  void set_ap_p_best_path_length_thr_m(float value);
  private:
  float _internal_ap_p_best_path_length_thr_m() const;
  void _internal_set_ap_p_best_path_length_thr_m(float value);
  public:

  // optional float AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M = 14945121;
  bool has_ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const;
  private:
  bool _internal_has_ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const;
  public:
  void clear_ap_p_perp_straight_min_bwd_dist_fwd_strk_m();
  float ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const;
  void set_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(float value);
  private:
  float _internal_ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const;
  void _internal_set_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<6> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ap_p_adapt_vel_x_distance_m_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ap_p_key_corners_wheel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ap_p_key_corners_carbody_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ap_p_adapt_vel_y_velocity_mps_;
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* taposdparams_;
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* sysfuncparams_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* vehicleparams_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_num_ta_pos_eval_;
  float ap_p_max_dist_tp_to_intermp_one_stroke_m_;
  float ap_p_plan_distance_margin_m_;
  float ap_p_ratio_pre_prep_align_axis_;
  float ap_p_direct_fwd_step_dist_m_;
  float ap_p_max_vel_in_par_slot_mps_;
  float ap_p_roi_corner_x_par_out_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_max_num_clothoid_loop_nu_;
  float ap_p_roi_corner_x_angs_in_m_;
  float ap_p_roi_corner_y_prpf_out_m_;
  float ap_p_env_flickering_comp_m_;
  float mp_p_roi_corner_x_prpb_out_op_m_;
  float ap_p_safe_pass_margin_m_;
  float ap_p_roi_corner_x_par_in_m_;
  float ap_p_roi_corner_y_prpb_out_m_;
  float ap_p_perp_bwd_in_long_dev_fctr_;
  float ap_p_direct_fwd_start_angle_tol_deg_;
  float ap_p_endpose_neighbour_dist_m_;
  float ap_p_step_moving_ratio_clo_coll_;
  float mp_p_roi_edge_length_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_adapt_vel_size_nu_;
  float mp_p_roi_corner_y_angr_in_op_m_;
  float ap_p_distance_for_last_call_man_perp_;
  float mp_p_roi_corner_x_angs_in_op_m_;
  float ap_p_roi_corner_y_angr_out_m_;
  float mp_p_roi_corner_y_par_out_op_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_num_pose_check_drvnpath_;
  float ap_p_roi_corner_x_prpb_out_m_;
  float ap_p_roi_corner_x_angr_out_m_;
  float ap_p_roi_corner_y_angs_out_op_m_;
  float ap_p_safety_turn_radius_axis_m_;
  float ap_p_long_shift_intermed_ws_tapos_m_;
  float ap_p_clothoid_vel_tune_step_mps_;
  float mp_p_roi_corner_y_prpf_out_op_m_;
  float ap_p_roi_corner_x_angr_out_op_m_;
  float ap_p_min_radius_add_clothoid_m_;
  float ap_p_asy_clo_st_min_length_m_;
  float ap_p_ratio_straight_prepare_fwd_stroke_prep_align_;
  float ap_p_max_vel_close_obstacle_mps_;
  float ap_p_straight_perp_extra_dist_m_;
  float mp_p_roi_corner_x_prpb_in_op_m_;
  float ap_p_desired_dist_to_obst_m_;
  float ap_p_roi_corner_x_prpf_out_m_;
  float ap_p_length_long_clo_transit_m_;
  float ap_p_factor_determination_nu_;
  float ap_p_roi_corner_x_prpf_in_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_parkout_par_angle_max_loop_;
  float ap_p_perp_fwd_in_yaw_dev_fctr_;
  float ap_p_best_path_time_thr_s_;
  float ap_p_dist_start_end_keep_path_m_;
  float ap_p_perp_bwd_in_lat_dev_fctr_;
  float ap_p_roi_corner_x_prpf_in_op_m_;
  float ap_p_add_straight_fsf_m_;
  float mp_p_roi_corner_y_prpb_in_m_;
  float mp_p_roi_corner_y_prpf_in_op_m_;
  float ap_p_min_parking_vel_mps_;
  float mp_p_roi_corner_x_angr_out_m_;
  float ap_p_roi_corner_y_prpb_in_op_m_;
  float ap_p_planning_horizon_m_;
  float mp_p_roi_corner_x_prpb_out_m_;
  float ap_p_ratio_add_align_radius_angled_;
  float ap_p_pre_prep_align_radius_ext_m_;
  float ap_p_roi_corner_x_prpf_out_op_m_;
  float ap_p_snap_ratio_to_avoid_coll_;
  float mp_p_roi_corner_y_angr_out_op_m_;
  float ap_p_min_long_dev_for_straight_repl_par_m_;
  float ap_p_roi_corner_x_prpb_in_m_;
  float ap_p_parkout_ego_dist_to_fake_objects_perp_m_;
  float mp_p_roi_corner_x_angs_out_op_m_;
  float mp_p_roi_corner_y_prpf_in_m_;
  float ap_p_parkout_blind_distance_par_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_save_em_replanning_nu_;
  float ap_p_roi_corner_x_angr_in_m_;
  float mp_p_roi_corner_x_prpf_out_m_;
  float ap_p_max_dist_para_wo_bckt_m_;
  float ap_p_roi_corner_x_par_out_op_m_;
  float ap_p_length_short_clo_transit_m_;
  bool ap_p_enable_out_in_strokes_replan_parallel_;
  bool ap_p_enable_last_call_maneuver_perp_;
  bool ap_p_enable_first_stroke_fwd_perp_bwd_;
  bool ap_p_enable_early_steer_first_strk_fwd_;
  float ap_p_min_ang_diff_inflection_rad_;
  float ap_p_roi_corner_y_angs_in_op_m_;
  float mp_p_roi_corner_y_prpf_out_m_;
  float ap_p_max_orientation_dev_for_straight_repl_par_rad_;
  float ap_p_ratio_distance_shorting_first_strk_fwd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_max_num_clo_vel_loop_nu_;
  float mp_p_roi_corner_y_angs_in_m_;
  float ap_p_roi_corner_x_angr_in_op_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_bstpose_stepsz_drvnpath_nu_;
  bool ap_p_enable_first_strk_fwd_par_;
  bool ap_p_parkout_enable_fake_objects_;
  float mp_p_roi_corner_y_par_out_m_;
  bool ap_p_disable_scan_great_dist_nu_;
  bool ap_p_disable_planner_nu_;
  bool ap_p_enable_one_stroke_parking_;
  bool ap_p_enable_dynamic_replanning_;
  float ap_p_max_deviation_clothoid_m_;
  float ap_p_parkout_blind_distance_ang_m_;
  float mp_p_roi_corner_y_angr_out_m_;
  float ap_p_roi_corner_y_prpb_out_op_m_;
  float ap_p_misaligned_start_pose_angle_rad_;
  float ap_p_straight_conv_allowed_ang_rad_;
  float ap_p_parkout_par_saftey_dist_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_min_num_valid_to_output_nu_;
  float ap_p_par_nodynreplan_dist_to_stop_m_;
  float mp_p_roi_corner_y_prpb_out_m_;
  float ap_p_perp_fwd_in_long_dev_fctr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float ap_p_max_parking_vel_bwd_mps_;
  float ap_p_roi_corner_y_prpf_in_op_m_;
  float ap_p_roi_corner_y_angs_in_m_;
  float ap_p_roi_edge_length_m_;
  float ap_p_perp_end_limit_vel_dist_m_;
  float ap_p_factor_safety_nu_;
  float ap_p_roi_corner_y_par_out_m_;
  float mp_p_roi_corner_y_prpb_in_op_m_;
  float mp_p_roi_corner_x_par_in_op_m_;
  float mp_p_roi_corner_x_par_out_op_m_;
  float ap_p_parkout_ego_dist_to_fake_objects_ang_m_;
  float ap_p_roi_corner_y_angs_out_m_;
  float ap_p_max_parking_vel_fwd_mps_;
  float ap_p_min_dist_start_tgtaxis_m_;
  float ap_p_roi_corner_y_par_in_op_m_;
  float ap_p_roi_corner_x_prpb_out_op_m_;
  float ap_p_prp_fwd_r_scale_1st_strk_m_;
  float ap_p_inc_cir_length_for_scur_out_m_;
  float mp_p_roi_corner_x_angr_out_op_m_;
  float ap_p_roi_corner_y_prpf_out_op_m_;
  float ap_p_out_vrtx_radius_scaling_nu_;
  float ap_p_max_lat_dev_for_straight_repl_par_m_;
  float ap_p_ratio_confined_space_;
  float mp_p_roi_corner_y_angs_in_op_m_;
  float ap_p_max_alignment_radius_m_;
  float mp_p_roi_corner_x_angr_in_op_m_;
  float ap_p_min_radius_add_circle_m_;
  float ap_p_roi_corner_x_angs_out_m_;
  float ap_p_parkout_blind_distance_perp_m_;
  float ap_p_min_alignment_angle_rad_;
  float ap_p_max_prep_stroke_len_straight_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ap_p_max_attempt_wrap_up_triangle_;
  float ap_p_parkout_ego_dist_to_fake_objects_par_m_;
  float ap_p_max_height_of_triangle_clo_collision_m_;
  float ap_p_virtual_obj_dist_to_tp_m_;
  float ap_p_ratio_add_min_radius_angled_;
  float mp_p_roi_corner_y_angs_out_op_m_;
  float mp_p_roi_corner_x_angr_in_m_;
  float ap_p_perp_bwd_in_yaw_dev_fctr_;
  float ap_p_roi_corner_y_prpf_in_m_;
  float ap_p_perp_fwd_in_lat_dev_fctr_;
  float ap_p_max_scurve_dist_to_tgt_pose_m_;
  float mp_p_roi_corner_x_angs_out_m_;
  float mp_p_roi_corner_y_par_in_m_;
  float ap_p_roi_corner_x_angs_out_op_m_;
  float ap_p_roi_corner_x_par_in_op_m_;
  float ap_p_radius_ext_perp_fin_stro_m_;
  float mp_p_roi_corner_x_prpf_in_m_;
  float ap_p_par_repl_max_extend_dist_after_scurve_m_;
  float ap_p_roi_corner_y_angr_in_op_m_;
  float ap_p_roi_corner_y_angr_in_m_;
  float ap_p_max_dist_perp_wo_bckt_m_;
  float ap_p_roi_corner_y_prpb_in_m_;
  float ap_p_roi_corner_x_angs_in_op_m_;
  float mp_p_roi_corner_y_par_in_op_m_;
  float ap_p_max_poly_vel_mps_;
  float ap_p_par_max_dist_for_sym_scurve_m_;
  float ap_p_roi_corner_y_angr_out_op_m_;
  float mp_p_roi_corner_x_prpf_out_op_m_;
  float mp_p_roi_corner_y_prpb_out_op_m_;
  float ap_p_best_path_goal_dev_thr_nu_;
  float mp_p_roi_corner_x_par_out_m_;
  float ap_p_pout_perp_straight_ext_m_;
  float ap_p_roi_corner_y_par_in_m_;
  float mp_p_roi_corner_x_angs_in_m_;
  float ap_p_min_prep_stroke_len_straight_m_;
  float ap_p_roi_corner_y_par_out_op_m_;
  float ap_p_roi_corner_x_prpb_in_op_m_;
  float ap_p_dist_to_pb_for_misal_start_pose_planning_m_;
  float mp_p_roi_corner_y_angs_out_m_;
  float mp_p_roi_corner_x_prpf_in_op_m_;
  float ap_p_add_straight_to_wheelstopper_m_;
  float ap_p_max_distance_shorten_first_strk_fwd_;
  float mp_p_roi_corner_y_angr_in_m_;
  float mp_p_roi_corner_x_par_in_m_;
  float mp_p_roi_corner_x_prpb_in_m_;
  float ap_p_best_path_length_thr_m_;
  float ap_p_perp_straight_min_bwd_dist_fwd_strk_m_;
  friend struct ::TableStruct_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FC_TRJPLA_Params_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port) */ {
 public:
  FC_TRJPLA_Params_array_port();
  virtual ~FC_TRJPLA_Params_array_port();

  FC_TRJPLA_Params_array_port(const FC_TRJPLA_Params_array_port& from);
  FC_TRJPLA_Params_array_port(FC_TRJPLA_Params_array_port&& from) noexcept
    : FC_TRJPLA_Params_array_port() {
    *this = ::std::move(from);
  }

  inline FC_TRJPLA_Params_array_port& operator=(const FC_TRJPLA_Params_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TRJPLA_Params_array_port& operator=(FC_TRJPLA_Params_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TRJPLA_Params_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TRJPLA_Params_array_port* internal_default_instance() {
    return reinterpret_cast<const FC_TRJPLA_Params_array_port*>(
               &_FC_TRJPLA_Params_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FC_TRJPLA_Params_array_port& a, FC_TRJPLA_Params_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TRJPLA_Params_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TRJPLA_Params_array_port* New() const final {
    return CreateMaybeMessage<FC_TRJPLA_Params_array_port>(nullptr);
  }

  FC_TRJPLA_Params_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TRJPLA_Params_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TRJPLA_Params_array_port& from);
  void MergeFrom(const FC_TRJPLA_Params_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TRJPLA_Params_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto);
    return ::descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3531,
  };
  // repeated .pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params data = 3531;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params >*
      mutable_data();
  private:
  const ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params& _internal_data(int index) const;
  ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* _internal_add_data();
  public:
  const ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params& data(int index) const;
  ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params > data_;
  friend struct ::TableStruct_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FC_TRJPLA_Params

// optional uint32 uiVersionNumber = 2124;
inline bool FC_TRJPLA_Params::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[3] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FC_TRJPLA_Params::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[3] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FC_TRJPLA_Params::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[3] |= 0x00010000u;
  uiversionnumber_ = value;
}
inline void FC_TRJPLA_Params::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FC_TRJPLA_Params::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FC_TRJPLA_Params::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TRJPLA_Params::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TRJPLA_Params::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJPLA_Params::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sSigHeader)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJPLA_Params::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000004u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJPLA_Params::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FC_TRJPLA_Params::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sSigHeader)
}

// optional float AP_P_MAX_DIST_PERP_WO_BCKT_M = 3393;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_dist_perp_wo_bckt_m() const {
  bool value = (_has_bits_[5] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_dist_perp_wo_bckt_m() const {
  return _internal_has_ap_p_max_dist_perp_wo_bckt_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_dist_perp_wo_bckt_m() {
  ap_p_max_dist_perp_wo_bckt_m_ = 0;
  _has_bits_[5] &= ~0x00000010u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_dist_perp_wo_bckt_m() const {
  return ap_p_max_dist_perp_wo_bckt_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_dist_perp_wo_bckt_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DIST_PERP_WO_BCKT_M)
  return _internal_ap_p_max_dist_perp_wo_bckt_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_dist_perp_wo_bckt_m(float value) {
  _has_bits_[5] |= 0x00000010u;
  ap_p_max_dist_perp_wo_bckt_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_dist_perp_wo_bckt_m(float value) {
  _internal_set_ap_p_max_dist_perp_wo_bckt_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DIST_PERP_WO_BCKT_M)
}

// optional float AP_P_MAX_DIST_PARA_WO_BCKT_M = 1432;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_dist_para_wo_bckt_m() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_dist_para_wo_bckt_m() const {
  return _internal_has_ap_p_max_dist_para_wo_bckt_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_dist_para_wo_bckt_m() {
  ap_p_max_dist_para_wo_bckt_m_ = 0;
  _has_bits_[2] &= ~0x00004000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_dist_para_wo_bckt_m() const {
  return ap_p_max_dist_para_wo_bckt_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_dist_para_wo_bckt_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DIST_PARA_WO_BCKT_M)
  return _internal_ap_p_max_dist_para_wo_bckt_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_dist_para_wo_bckt_m(float value) {
  _has_bits_[2] |= 0x00004000u;
  ap_p_max_dist_para_wo_bckt_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_dist_para_wo_bckt_m(float value) {
  _internal_set_ap_p_max_dist_para_wo_bckt_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DIST_PARA_WO_BCKT_M)
}

// optional float AP_P_SAFE_PASS_MARGIN_M = 240;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_safe_pass_margin_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_safe_pass_margin_m() const {
  return _internal_has_ap_p_safe_pass_margin_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_safe_pass_margin_m() {
  ap_p_safe_pass_margin_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_safe_pass_margin_m() const {
  return ap_p_safe_pass_margin_m_;
}
inline float FC_TRJPLA_Params::ap_p_safe_pass_margin_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SAFE_PASS_MARGIN_M)
  return _internal_ap_p_safe_pass_margin_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_safe_pass_margin_m(float value) {
  _has_bits_[0] |= 0x00010000u;
  ap_p_safe_pass_margin_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_safe_pass_margin_m(float value) {
  _internal_set_ap_p_safe_pass_margin_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SAFE_PASS_MARGIN_M)
}

// optional float AP_P_VIRTUAL_OBJ_DIST_TO_TP_M = 2931;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_virtual_obj_dist_to_tp_m() const {
  bool value = (_has_bits_[4] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_virtual_obj_dist_to_tp_m() const {
  return _internal_has_ap_p_virtual_obj_dist_to_tp_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_virtual_obj_dist_to_tp_m() {
  ap_p_virtual_obj_dist_to_tp_m_ = 0;
  _has_bits_[4] &= ~0x00080000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_virtual_obj_dist_to_tp_m() const {
  return ap_p_virtual_obj_dist_to_tp_m_;
}
inline float FC_TRJPLA_Params::ap_p_virtual_obj_dist_to_tp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_VIRTUAL_OBJ_DIST_TO_TP_M)
  return _internal_ap_p_virtual_obj_dist_to_tp_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_virtual_obj_dist_to_tp_m(float value) {
  _has_bits_[4] |= 0x00080000u;
  ap_p_virtual_obj_dist_to_tp_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_virtual_obj_dist_to_tp_m(float value) {
  _internal_set_ap_p_virtual_obj_dist_to_tp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_VIRTUAL_OBJ_DIST_TO_TP_M)
}

// optional float AP_P_MAX_PARKING_VEL_FWD_MPS = 2458;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_parking_vel_fwd_mps() const {
  bool value = (_has_bits_[3] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_parking_vel_fwd_mps() const {
  return _internal_has_ap_p_max_parking_vel_fwd_mps();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_parking_vel_fwd_mps() {
  ap_p_max_parking_vel_fwd_mps_ = 0;
  _has_bits_[3] &= ~0x20000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_parking_vel_fwd_mps() const {
  return ap_p_max_parking_vel_fwd_mps_;
}
inline float FC_TRJPLA_Params::ap_p_max_parking_vel_fwd_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_PARKING_VEL_FWD_MPS)
  return _internal_ap_p_max_parking_vel_fwd_mps();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_parking_vel_fwd_mps(float value) {
  _has_bits_[3] |= 0x20000000u;
  ap_p_max_parking_vel_fwd_mps_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_parking_vel_fwd_mps(float value) {
  _internal_set_ap_p_max_parking_vel_fwd_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_PARKING_VEL_FWD_MPS)
}

// optional float AP_P_MAX_PARKING_VEL_BWD_MPS = 2140;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_parking_vel_bwd_mps() const {
  bool value = (_has_bits_[3] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_parking_vel_bwd_mps() const {
  return _internal_has_ap_p_max_parking_vel_bwd_mps();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_parking_vel_bwd_mps() {
  ap_p_max_parking_vel_bwd_mps_ = 0;
  _has_bits_[3] &= ~0x00020000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_parking_vel_bwd_mps() const {
  return ap_p_max_parking_vel_bwd_mps_;
}
inline float FC_TRJPLA_Params::ap_p_max_parking_vel_bwd_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_PARKING_VEL_BWD_MPS)
  return _internal_ap_p_max_parking_vel_bwd_mps();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_parking_vel_bwd_mps(float value) {
  _has_bits_[3] |= 0x00020000u;
  ap_p_max_parking_vel_bwd_mps_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_parking_vel_bwd_mps(float value) {
  _internal_set_ap_p_max_parking_vel_bwd_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_PARKING_VEL_BWD_MPS)
}

// optional float AP_P_MIN_PARKING_VEL_MPS = 1067;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_parking_vel_mps() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_parking_vel_mps() const {
  return _internal_has_ap_p_min_parking_vel_mps();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_parking_vel_mps() {
  ap_p_min_parking_vel_mps_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_parking_vel_mps() const {
  return ap_p_min_parking_vel_mps_;
}
inline float FC_TRJPLA_Params::ap_p_min_parking_vel_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_PARKING_VEL_MPS)
  return _internal_ap_p_min_parking_vel_mps();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_parking_vel_mps(float value) {
  _has_bits_[1] |= 0x08000000u;
  ap_p_min_parking_vel_mps_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_parking_vel_mps(float value) {
  _internal_set_ap_p_min_parking_vel_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_PARKING_VEL_MPS)
}

// optional float AP_P_PARKOUT_PAR_SAFTEY_DIST_M = 1932;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_par_saftey_dist_m() const {
  bool value = (_has_bits_[3] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_par_saftey_dist_m() const {
  return _internal_has_ap_p_parkout_par_saftey_dist_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_par_saftey_dist_m() {
  ap_p_parkout_par_saftey_dist_m_ = 0;
  _has_bits_[3] &= ~0x00000800u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_parkout_par_saftey_dist_m() const {
  return ap_p_parkout_par_saftey_dist_m_;
}
inline float FC_TRJPLA_Params::ap_p_parkout_par_saftey_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_PAR_SAFTEY_DIST_M)
  return _internal_ap_p_parkout_par_saftey_dist_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_par_saftey_dist_m(float value) {
  _has_bits_[3] |= 0x00000800u;
  ap_p_parkout_par_saftey_dist_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_par_saftey_dist_m(float value) {
  _internal_set_ap_p_parkout_par_saftey_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_PAR_SAFTEY_DIST_M)
}

// optional float AP_P_SAFETY_TURN_RADIUS_AXIS_M = 662;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_safety_turn_radius_axis_m() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_safety_turn_radius_axis_m() const {
  return _internal_has_ap_p_safety_turn_radius_axis_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_safety_turn_radius_axis_m() {
  ap_p_safety_turn_radius_axis_m_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_safety_turn_radius_axis_m() const {
  return ap_p_safety_turn_radius_axis_m_;
}
inline float FC_TRJPLA_Params::ap_p_safety_turn_radius_axis_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SAFETY_TURN_RADIUS_AXIS_M)
  return _internal_ap_p_safety_turn_radius_axis_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_safety_turn_radius_axis_m(float value) {
  _has_bits_[1] |= 0x00000004u;
  ap_p_safety_turn_radius_axis_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_safety_turn_radius_axis_m(float value) {
  _internal_set_ap_p_safety_turn_radius_axis_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SAFETY_TURN_RADIUS_AXIS_M)
}

// optional float AP_P_POUT_PERP_STRAIGHT_EXT_M = 3650;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_pout_perp_straight_ext_m() const {
  bool value = (_has_bits_[5] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_pout_perp_straight_ext_m() const {
  return _internal_has_ap_p_pout_perp_straight_ext_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_pout_perp_straight_ext_m() {
  ap_p_pout_perp_straight_ext_m_ = 0;
  _has_bits_[5] &= ~0x00008000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_pout_perp_straight_ext_m() const {
  return ap_p_pout_perp_straight_ext_m_;
}
inline float FC_TRJPLA_Params::ap_p_pout_perp_straight_ext_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_POUT_PERP_STRAIGHT_EXT_M)
  return _internal_ap_p_pout_perp_straight_ext_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_pout_perp_straight_ext_m(float value) {
  _has_bits_[5] |= 0x00008000u;
  ap_p_pout_perp_straight_ext_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_pout_perp_straight_ext_m(float value) {
  _internal_set_ap_p_pout_perp_straight_ext_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_POUT_PERP_STRAIGHT_EXT_M)
}

// optional float AP_P_MIN_RADIUS_ADD_CIRCLE_M = 2785;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_radius_add_circle_m() const {
  bool value = (_has_bits_[4] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_radius_add_circle_m() const {
  return _internal_has_ap_p_min_radius_add_circle_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_radius_add_circle_m() {
  ap_p_min_radius_add_circle_m_ = 0;
  _has_bits_[4] &= ~0x00000800u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_radius_add_circle_m() const {
  return ap_p_min_radius_add_circle_m_;
}
inline float FC_TRJPLA_Params::ap_p_min_radius_add_circle_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_RADIUS_ADD_CIRCLE_M)
  return _internal_ap_p_min_radius_add_circle_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_radius_add_circle_m(float value) {
  _has_bits_[4] |= 0x00000800u;
  ap_p_min_radius_add_circle_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_radius_add_circle_m(float value) {
  _internal_set_ap_p_min_radius_add_circle_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_RADIUS_ADD_CIRCLE_M)
}

// optional float AP_P_RADIUS_EXT_PERP_FIN_STRO_M = 3318;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_radius_ext_perp_fin_stro_m() const {
  bool value = (_has_bits_[4] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_radius_ext_perp_fin_stro_m() const {
  return _internal_has_ap_p_radius_ext_perp_fin_stro_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_radius_ext_perp_fin_stro_m() {
  ap_p_radius_ext_perp_fin_stro_m_ = 0;
  _has_bits_[4] &= ~0x80000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_radius_ext_perp_fin_stro_m() const {
  return ap_p_radius_ext_perp_fin_stro_m_;
}
inline float FC_TRJPLA_Params::ap_p_radius_ext_perp_fin_stro_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RADIUS_EXT_PERP_FIN_STRO_M)
  return _internal_ap_p_radius_ext_perp_fin_stro_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_radius_ext_perp_fin_stro_m(float value) {
  _has_bits_[4] |= 0x80000000u;
  ap_p_radius_ext_perp_fin_stro_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_radius_ext_perp_fin_stro_m(float value) {
  _internal_set_ap_p_radius_ext_perp_fin_stro_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RADIUS_EXT_PERP_FIN_STRO_M)
}

// optional float AP_P_MIN_RADIUS_ADD_CLOTHOID_M = 841;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_radius_add_clothoid_m() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_radius_add_clothoid_m() const {
  return _internal_has_ap_p_min_radius_add_clothoid_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_radius_add_clothoid_m() {
  ap_p_min_radius_add_clothoid_m_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_radius_add_clothoid_m() const {
  return ap_p_min_radius_add_clothoid_m_;
}
inline float FC_TRJPLA_Params::ap_p_min_radius_add_clothoid_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_RADIUS_ADD_CLOTHOID_M)
  return _internal_ap_p_min_radius_add_clothoid_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_radius_add_clothoid_m(float value) {
  _has_bits_[1] |= 0x00000080u;
  ap_p_min_radius_add_clothoid_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_radius_add_clothoid_m(float value) {
  _internal_set_ap_p_min_radius_add_clothoid_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_RADIUS_ADD_CLOTHOID_M)
}

// optional float AP_P_MAX_DEVIATION_CLOTHOID_M = 1761;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_deviation_clothoid_m() const {
  bool value = (_has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_deviation_clothoid_m() const {
  return _internal_has_ap_p_max_deviation_clothoid_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_deviation_clothoid_m() {
  ap_p_max_deviation_clothoid_m_ = 0;
  _has_bits_[3] &= ~0x00000020u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_deviation_clothoid_m() const {
  return ap_p_max_deviation_clothoid_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_deviation_clothoid_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DEVIATION_CLOTHOID_M)
  return _internal_ap_p_max_deviation_clothoid_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_deviation_clothoid_m(float value) {
  _has_bits_[3] |= 0x00000020u;
  ap_p_max_deviation_clothoid_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_deviation_clothoid_m(float value) {
  _internal_set_ap_p_max_deviation_clothoid_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DEVIATION_CLOTHOID_M)
}

// optional uint32 AP_P_MAX_NUM_CLOTHOID_LOOP_NU = 183;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_num_clothoid_loop_nu() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_num_clothoid_loop_nu() const {
  return _internal_has_ap_p_max_num_clothoid_loop_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_num_clothoid_loop_nu() {
  ap_p_max_num_clothoid_loop_nu_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_max_num_clothoid_loop_nu() const {
  return ap_p_max_num_clothoid_loop_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_max_num_clothoid_loop_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_NUM_CLOTHOID_LOOP_NU)
  return _internal_ap_p_max_num_clothoid_loop_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_num_clothoid_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  ap_p_max_num_clothoid_loop_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_num_clothoid_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_max_num_clothoid_loop_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_NUM_CLOTHOID_LOOP_NU)
}

// optional float AP_P_CLOTHOID_VEL_TUNE_STEP_MPS = 751;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_clothoid_vel_tune_step_mps() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_clothoid_vel_tune_step_mps() const {
  return _internal_has_ap_p_clothoid_vel_tune_step_mps();
}
inline void FC_TRJPLA_Params::clear_ap_p_clothoid_vel_tune_step_mps() {
  ap_p_clothoid_vel_tune_step_mps_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_clothoid_vel_tune_step_mps() const {
  return ap_p_clothoid_vel_tune_step_mps_;
}
inline float FC_TRJPLA_Params::ap_p_clothoid_vel_tune_step_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_CLOTHOID_VEL_TUNE_STEP_MPS)
  return _internal_ap_p_clothoid_vel_tune_step_mps();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_clothoid_vel_tune_step_mps(float value) {
  _has_bits_[1] |= 0x00000010u;
  ap_p_clothoid_vel_tune_step_mps_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_clothoid_vel_tune_step_mps(float value) {
  _internal_set_ap_p_clothoid_vel_tune_step_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_CLOTHOID_VEL_TUNE_STEP_MPS)
}

// optional float AP_P_PLAN_DISTANCE_MARGIN_M = 88;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_plan_distance_margin_m() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_plan_distance_margin_m() const {
  return _internal_has_ap_p_plan_distance_margin_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_plan_distance_margin_m() {
  ap_p_plan_distance_margin_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_plan_distance_margin_m() const {
  return ap_p_plan_distance_margin_m_;
}
inline float FC_TRJPLA_Params::ap_p_plan_distance_margin_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PLAN_DISTANCE_MARGIN_M)
  return _internal_ap_p_plan_distance_margin_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_plan_distance_margin_m(float value) {
  _has_bits_[0] |= 0x00000040u;
  ap_p_plan_distance_margin_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_plan_distance_margin_m(float value) {
  _internal_set_ap_p_plan_distance_margin_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PLAN_DISTANCE_MARGIN_M)
}

// optional float AP_P_ROI_EDGE_LENGTH_M = 2199;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_edge_length_m() const {
  bool value = (_has_bits_[3] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_edge_length_m() const {
  return _internal_has_ap_p_roi_edge_length_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_edge_length_m() {
  ap_p_roi_edge_length_m_ = 0;
  _has_bits_[3] &= ~0x00100000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_edge_length_m() const {
  return ap_p_roi_edge_length_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_edge_length_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_EDGE_LENGTH_M)
  return _internal_ap_p_roi_edge_length_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_edge_length_m(float value) {
  _has_bits_[3] |= 0x00100000u;
  ap_p_roi_edge_length_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_edge_length_m(float value) {
  _internal_set_ap_p_roi_edge_length_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_EDGE_LENGTH_M)
}

// optional float AP_P_ROI_CORNER_X_PAR_IN_M = 276;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_par_in_m() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_par_in_m() const {
  return _internal_has_ap_p_roi_corner_x_par_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_par_in_m() {
  ap_p_roi_corner_x_par_in_m_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_par_in_m() const {
  return ap_p_roi_corner_x_par_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_par_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_IN_M)
  return _internal_ap_p_roi_corner_x_par_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_par_in_m(float value) {
  _has_bits_[0] |= 0x00020000u;
  ap_p_roi_corner_x_par_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_par_in_m(float value) {
  _internal_set_ap_p_roi_corner_x_par_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_IN_M)
}

// optional float AP_P_ROI_CORNER_Y_PAR_IN_M = 3665;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_par_in_m() const {
  bool value = (_has_bits_[5] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_par_in_m() const {
  return _internal_has_ap_p_roi_corner_y_par_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_par_in_m() {
  ap_p_roi_corner_y_par_in_m_ = 0;
  _has_bits_[5] &= ~0x00010000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_par_in_m() const {
  return ap_p_roi_corner_y_par_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_par_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_IN_M)
  return _internal_ap_p_roi_corner_y_par_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_par_in_m(float value) {
  _has_bits_[5] |= 0x00010000u;
  ap_p_roi_corner_y_par_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_par_in_m(float value) {
  _internal_set_ap_p_roi_corner_y_par_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_IN_M)
}

// optional float AP_P_ROI_CORNER_X_PRPF_IN_M = 956;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpf_in_m() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpf_in_m() const {
  return _internal_has_ap_p_roi_corner_x_prpf_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpf_in_m() {
  ap_p_roi_corner_x_prpf_in_m_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpf_in_m() const {
  return ap_p_roi_corner_x_prpf_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpf_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_IN_M)
  return _internal_ap_p_roi_corner_x_prpf_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpf_in_m(float value) {
  _has_bits_[1] |= 0x00020000u;
  ap_p_roi_corner_x_prpf_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpf_in_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpf_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_IN_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPF_IN_M = 3061;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpf_in_m() const {
  bool value = (_has_bits_[4] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpf_in_m() const {
  return _internal_has_ap_p_roi_corner_y_prpf_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpf_in_m() {
  ap_p_roi_corner_y_prpf_in_m_ = 0;
  _has_bits_[4] &= ~0x01000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpf_in_m() const {
  return ap_p_roi_corner_y_prpf_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpf_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_IN_M)
  return _internal_ap_p_roi_corner_y_prpf_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpf_in_m(float value) {
  _has_bits_[4] |= 0x01000000u;
  ap_p_roi_corner_y_prpf_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpf_in_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpf_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_IN_M)
}

// optional float AP_P_ROI_CORNER_X_PRPB_IN_M = 1309;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpb_in_m() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpb_in_m() const {
  return _internal_has_ap_p_roi_corner_x_prpb_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpb_in_m() {
  ap_p_roi_corner_x_prpb_in_m_ = 0;
  _has_bits_[2] &= ~0x00000040u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpb_in_m() const {
  return ap_p_roi_corner_x_prpb_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpb_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_IN_M)
  return _internal_ap_p_roi_corner_x_prpb_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpb_in_m(float value) {
  _has_bits_[2] |= 0x00000040u;
  ap_p_roi_corner_x_prpb_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpb_in_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpb_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_IN_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPB_IN_M = 3412;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpb_in_m() const {
  bool value = (_has_bits_[5] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpb_in_m() const {
  return _internal_has_ap_p_roi_corner_y_prpb_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpb_in_m() {
  ap_p_roi_corner_y_prpb_in_m_ = 0;
  _has_bits_[5] &= ~0x00000020u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpb_in_m() const {
  return ap_p_roi_corner_y_prpb_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpb_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_IN_M)
  return _internal_ap_p_roi_corner_y_prpb_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpb_in_m(float value) {
  _has_bits_[5] |= 0x00000020u;
  ap_p_roi_corner_y_prpb_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpb_in_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpb_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_IN_M)
}

// optional float AP_P_ROI_CORNER_X_ANGS_IN_M = 216;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angs_in_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angs_in_m() const {
  return _internal_has_ap_p_roi_corner_x_angs_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angs_in_m() {
  ap_p_roi_corner_x_angs_in_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angs_in_m() const {
  return ap_p_roi_corner_x_angs_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angs_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_IN_M)
  return _internal_ap_p_roi_corner_x_angs_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angs_in_m(float value) {
  _has_bits_[0] |= 0x00001000u;
  ap_p_roi_corner_x_angs_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angs_in_m(float value) {
  _internal_set_ap_p_roi_corner_x_angs_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_IN_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGS_IN_M = 2193;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angs_in_m() const {
  bool value = (_has_bits_[3] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angs_in_m() const {
  return _internal_has_ap_p_roi_corner_y_angs_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angs_in_m() {
  ap_p_roi_corner_y_angs_in_m_ = 0;
  _has_bits_[3] &= ~0x00080000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angs_in_m() const {
  return ap_p_roi_corner_y_angs_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angs_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_IN_M)
  return _internal_ap_p_roi_corner_y_angs_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angs_in_m(float value) {
  _has_bits_[3] |= 0x00080000u;
  ap_p_roi_corner_y_angs_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angs_in_m(float value) {
  _internal_set_ap_p_roi_corner_y_angs_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_IN_M)
}

// optional float AP_P_ROI_CORNER_X_ANGR_IN_M = 1400;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angr_in_m() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angr_in_m() const {
  return _internal_has_ap_p_roi_corner_x_angr_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angr_in_m() {
  ap_p_roi_corner_x_angr_in_m_ = 0;
  _has_bits_[2] &= ~0x00001000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angr_in_m() const {
  return ap_p_roi_corner_x_angr_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angr_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_IN_M)
  return _internal_ap_p_roi_corner_x_angr_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angr_in_m(float value) {
  _has_bits_[2] |= 0x00001000u;
  ap_p_roi_corner_x_angr_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angr_in_m(float value) {
  _internal_set_ap_p_roi_corner_x_angr_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_IN_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGR_IN_M = 3377;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angr_in_m() const {
  bool value = (_has_bits_[5] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angr_in_m() const {
  return _internal_has_ap_p_roi_corner_y_angr_in_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angr_in_m() {
  ap_p_roi_corner_y_angr_in_m_ = 0;
  _has_bits_[5] &= ~0x00000008u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angr_in_m() const {
  return ap_p_roi_corner_y_angr_in_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angr_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_IN_M)
  return _internal_ap_p_roi_corner_y_angr_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angr_in_m(float value) {
  _has_bits_[5] |= 0x00000008u;
  ap_p_roi_corner_y_angr_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angr_in_m(float value) {
  _internal_set_ap_p_roi_corner_y_angr_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_IN_M)
}

// optional float AP_P_ROI_CORNER_X_PAR_OUT_M = 149;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_par_out_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_par_out_m() const {
  return _internal_has_ap_p_roi_corner_x_par_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_par_out_m() {
  ap_p_roi_corner_x_par_out_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_par_out_m() const {
  return ap_p_roi_corner_x_par_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_par_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_OUT_M)
  return _internal_ap_p_roi_corner_x_par_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_par_out_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  ap_p_roi_corner_x_par_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_par_out_m(float value) {
  _internal_set_ap_p_roi_corner_x_par_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_OUT_M)
}

// optional float AP_P_ROI_CORNER_Y_PAR_OUT_M = 2268;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_par_out_m() const {
  bool value = (_has_bits_[3] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_par_out_m() const {
  return _internal_has_ap_p_roi_corner_y_par_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_par_out_m() {
  ap_p_roi_corner_y_par_out_m_ = 0;
  _has_bits_[3] &= ~0x00800000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_par_out_m() const {
  return ap_p_roi_corner_y_par_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_par_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_OUT_M)
  return _internal_ap_p_roi_corner_y_par_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_par_out_m(float value) {
  _has_bits_[3] |= 0x00800000u;
  ap_p_roi_corner_y_par_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_par_out_m(float value) {
  _internal_set_ap_p_roi_corner_y_par_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_OUT_M)
}

// optional float AP_P_ROI_CORNER_X_PRPF_OUT_M = 938;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpf_out_m() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpf_out_m() const {
  return _internal_has_ap_p_roi_corner_x_prpf_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpf_out_m() {
  ap_p_roi_corner_x_prpf_out_m_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpf_out_m() const {
  return ap_p_roi_corner_x_prpf_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpf_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_OUT_M)
  return _internal_ap_p_roi_corner_x_prpf_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpf_out_m(float value) {
  _has_bits_[1] |= 0x00004000u;
  ap_p_roi_corner_x_prpf_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpf_out_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpf_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_OUT_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPF_OUT_M = 223;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpf_out_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpf_out_m() const {
  return _internal_has_ap_p_roi_corner_y_prpf_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpf_out_m() {
  ap_p_roi_corner_y_prpf_out_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpf_out_m() const {
  return ap_p_roi_corner_y_prpf_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpf_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_OUT_M)
  return _internal_ap_p_roi_corner_y_prpf_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpf_out_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  ap_p_roi_corner_y_prpf_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpf_out_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpf_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_OUT_M)
}

// optional float AP_P_ROI_CORNER_X_PRPB_OUT_M = 620;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpb_out_m() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpb_out_m() const {
  return _internal_has_ap_p_roi_corner_x_prpb_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpb_out_m() {
  ap_p_roi_corner_x_prpb_out_m_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpb_out_m() const {
  return ap_p_roi_corner_x_prpb_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpb_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_OUT_M)
  return _internal_ap_p_roi_corner_x_prpb_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpb_out_m(float value) {
  _has_bits_[0] |= 0x80000000u;
  ap_p_roi_corner_x_prpb_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpb_out_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpb_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_OUT_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPB_OUT_M = 281;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpb_out_m() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpb_out_m() const {
  return _internal_has_ap_p_roi_corner_y_prpb_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpb_out_m() {
  ap_p_roi_corner_y_prpb_out_m_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpb_out_m() const {
  return ap_p_roi_corner_y_prpb_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpb_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_OUT_M)
  return _internal_ap_p_roi_corner_y_prpb_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpb_out_m(float value) {
  _has_bits_[0] |= 0x00040000u;
  ap_p_roi_corner_y_prpb_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpb_out_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpb_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_OUT_M)
}

// optional float AP_P_ROI_CORNER_X_ANGS_OUT_M = 2791;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angs_out_m() const {
  bool value = (_has_bits_[4] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angs_out_m() const {
  return _internal_has_ap_p_roi_corner_x_angs_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angs_out_m() {
  ap_p_roi_corner_x_angs_out_m_ = 0;
  _has_bits_[4] &= ~0x00001000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angs_out_m() const {
  return ap_p_roi_corner_x_angs_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angs_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_OUT_M)
  return _internal_ap_p_roi_corner_x_angs_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angs_out_m(float value) {
  _has_bits_[4] |= 0x00001000u;
  ap_p_roi_corner_x_angs_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angs_out_m(float value) {
  _internal_set_ap_p_roi_corner_x_angs_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_OUT_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGS_OUT_M = 2450;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angs_out_m() const {
  bool value = (_has_bits_[3] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angs_out_m() const {
  return _internal_has_ap_p_roi_corner_y_angs_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angs_out_m() {
  ap_p_roi_corner_y_angs_out_m_ = 0;
  _has_bits_[3] &= ~0x10000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angs_out_m() const {
  return ap_p_roi_corner_y_angs_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angs_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_OUT_M)
  return _internal_ap_p_roi_corner_y_angs_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angs_out_m(float value) {
  _has_bits_[3] |= 0x10000000u;
  ap_p_roi_corner_y_angs_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angs_out_m(float value) {
  _internal_set_ap_p_roi_corner_y_angs_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_OUT_M)
}

// optional float AP_P_ROI_CORNER_X_ANGR_OUT_M = 646;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angr_out_m() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angr_out_m() const {
  return _internal_has_ap_p_roi_corner_x_angr_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angr_out_m() {
  ap_p_roi_corner_x_angr_out_m_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angr_out_m() const {
  return ap_p_roi_corner_x_angr_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angr_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_OUT_M)
  return _internal_ap_p_roi_corner_x_angr_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angr_out_m(float value) {
  _has_bits_[1] |= 0x00000001u;
  ap_p_roi_corner_x_angr_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angr_out_m(float value) {
  _internal_set_ap_p_roi_corner_x_angr_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_OUT_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGR_OUT_M = 499;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angr_out_m() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angr_out_m() const {
  return _internal_has_ap_p_roi_corner_y_angr_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angr_out_m() {
  ap_p_roi_corner_y_angr_out_m_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angr_out_m() const {
  return ap_p_roi_corner_y_angr_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angr_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_OUT_M)
  return _internal_ap_p_roi_corner_y_angr_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angr_out_m(float value) {
  _has_bits_[0] |= 0x10000000u;
  ap_p_roi_corner_y_angr_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angr_out_m(float value) {
  _internal_set_ap_p_roi_corner_y_angr_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_OUT_M)
}

// optional float AP_P_ROI_CORNER_X_PAR_IN_OP_M = 3273;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_par_in_op_m() const {
  bool value = (_has_bits_[4] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_par_in_op_m() const {
  return _internal_has_ap_p_roi_corner_x_par_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_par_in_op_m() {
  ap_p_roi_corner_x_par_in_op_m_ = 0;
  _has_bits_[4] &= ~0x40000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_par_in_op_m() const {
  return ap_p_roi_corner_x_par_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_par_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_IN_OP_M)
  return _internal_ap_p_roi_corner_x_par_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_par_in_op_m(float value) {
  _has_bits_[4] |= 0x40000000u;
  ap_p_roi_corner_x_par_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_par_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_par_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_PAR_IN_OP_M = 2474;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_par_in_op_m() const {
  bool value = (_has_bits_[3] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_par_in_op_m() const {
  return _internal_has_ap_p_roi_corner_y_par_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_par_in_op_m() {
  ap_p_roi_corner_y_par_in_op_m_ = 0;
  _has_bits_[3] &= ~0x80000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_par_in_op_m() const {
  return ap_p_roi_corner_y_par_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_par_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_IN_OP_M)
  return _internal_ap_p_roi_corner_y_par_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_par_in_op_m(float value) {
  _has_bits_[3] |= 0x80000000u;
  ap_p_roi_corner_y_par_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_par_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_par_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_X_PRPF_IN_OP_M = 1002;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpf_in_op_m() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpf_in_op_m() const {
  return _internal_has_ap_p_roi_corner_x_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpf_in_op_m() {
  ap_p_roi_corner_x_prpf_in_op_m_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpf_in_op_m() const {
  return ap_p_roi_corner_x_prpf_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpf_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_IN_OP_M)
  return _internal_ap_p_roi_corner_x_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpf_in_op_m(float value) {
  _has_bits_[1] |= 0x00800000u;
  ap_p_roi_corner_x_prpf_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpf_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpf_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 2187;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpf_in_op_m() const {
  bool value = (_has_bits_[3] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpf_in_op_m() const {
  return _internal_has_ap_p_roi_corner_y_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpf_in_op_m() {
  ap_p_roi_corner_y_prpf_in_op_m_ = 0;
  _has_bits_[3] &= ~0x00040000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpf_in_op_m() const {
  return ap_p_roi_corner_y_prpf_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpf_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_IN_OP_M)
  return _internal_ap_p_roi_corner_y_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpf_in_op_m(float value) {
  _has_bits_[3] |= 0x00040000u;
  ap_p_roi_corner_y_prpf_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpf_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpf_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_X_PRPB_IN_OP_M = 3845;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpb_in_op_m() const {
  bool value = (_has_bits_[5] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpb_in_op_m() const {
  return _internal_has_ap_p_roi_corner_x_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpb_in_op_m() {
  ap_p_roi_corner_x_prpb_in_op_m_ = 0;
  _has_bits_[5] &= ~0x00100000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpb_in_op_m() const {
  return ap_p_roi_corner_x_prpb_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpb_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_IN_OP_M)
  return _internal_ap_p_roi_corner_x_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpb_in_op_m(float value) {
  _has_bits_[5] |= 0x00100000u;
  ap_p_roi_corner_x_prpb_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpb_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpb_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 1124;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpb_in_op_m() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpb_in_op_m() const {
  return _internal_has_ap_p_roi_corner_y_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpb_in_op_m() {
  ap_p_roi_corner_y_prpb_in_op_m_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpb_in_op_m() const {
  return ap_p_roi_corner_y_prpb_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpb_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_IN_OP_M)
  return _internal_ap_p_roi_corner_y_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpb_in_op_m(float value) {
  _has_bits_[1] |= 0x20000000u;
  ap_p_roi_corner_y_prpb_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpb_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpb_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_X_ANGS_IN_OP_M = 3429;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angs_in_op_m() const {
  bool value = (_has_bits_[5] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angs_in_op_m() const {
  return _internal_has_ap_p_roi_corner_x_angs_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angs_in_op_m() {
  ap_p_roi_corner_x_angs_in_op_m_ = 0;
  _has_bits_[5] &= ~0x00000040u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angs_in_op_m() const {
  return ap_p_roi_corner_x_angs_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angs_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_IN_OP_M)
  return _internal_ap_p_roi_corner_x_angs_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angs_in_op_m(float value) {
  _has_bits_[5] |= 0x00000040u;
  ap_p_roi_corner_x_angs_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angs_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_angs_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 1540;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angs_in_op_m() const {
  bool value = (_has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angs_in_op_m() const {
  return _internal_has_ap_p_roi_corner_y_angs_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angs_in_op_m() {
  ap_p_roi_corner_y_angs_in_op_m_ = 0;
  _has_bits_[2] &= ~0x00400000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angs_in_op_m() const {
  return ap_p_roi_corner_y_angs_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angs_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_IN_OP_M)
  return _internal_ap_p_roi_corner_y_angs_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angs_in_op_m(float value) {
  _has_bits_[2] |= 0x00400000u;
  ap_p_roi_corner_y_angs_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angs_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_angs_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_X_ANGR_IN_OP_M = 1606;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angr_in_op_m() const {
  bool value = (_has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angr_in_op_m() const {
  return _internal_has_ap_p_roi_corner_x_angr_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angr_in_op_m() {
  ap_p_roi_corner_x_angr_in_op_m_ = 0;
  _has_bits_[2] &= ~0x10000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angr_in_op_m() const {
  return ap_p_roi_corner_x_angr_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angr_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_IN_OP_M)
  return _internal_ap_p_roi_corner_x_angr_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angr_in_op_m(float value) {
  _has_bits_[2] |= 0x10000000u;
  ap_p_roi_corner_x_angr_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angr_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_angr_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 3367;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angr_in_op_m() const {
  bool value = (_has_bits_[5] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angr_in_op_m() const {
  return _internal_has_ap_p_roi_corner_y_angr_in_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angr_in_op_m() {
  ap_p_roi_corner_y_angr_in_op_m_ = 0;
  _has_bits_[5] &= ~0x00000004u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angr_in_op_m() const {
  return ap_p_roi_corner_y_angr_in_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angr_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_IN_OP_M)
  return _internal_ap_p_roi_corner_y_angr_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angr_in_op_m(float value) {
  _has_bits_[5] |= 0x00000004u;
  ap_p_roi_corner_y_angr_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angr_in_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_angr_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_IN_OP_M)
}

// optional float AP_P_ROI_CORNER_X_PAR_OUT_OP_M = 1447;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_par_out_op_m() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_par_out_op_m() const {
  return _internal_has_ap_p_roi_corner_x_par_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_par_out_op_m() {
  ap_p_roi_corner_x_par_out_op_m_ = 0;
  _has_bits_[2] &= ~0x00008000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_par_out_op_m() const {
  return ap_p_roi_corner_x_par_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_par_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_OUT_OP_M)
  return _internal_ap_p_roi_corner_x_par_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_par_out_op_m(float value) {
  _has_bits_[2] |= 0x00008000u;
  ap_p_roi_corner_x_par_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_par_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_par_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PAR_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 3782;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_par_out_op_m() const {
  bool value = (_has_bits_[5] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_par_out_op_m() const {
  return _internal_has_ap_p_roi_corner_y_par_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_par_out_op_m() {
  ap_p_roi_corner_y_par_out_op_m_ = 0;
  _has_bits_[5] &= ~0x00080000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_par_out_op_m() const {
  return ap_p_roi_corner_y_par_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_par_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_OUT_OP_M)
  return _internal_ap_p_roi_corner_y_par_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_par_out_op_m(float value) {
  _has_bits_[5] |= 0x00080000u;
  ap_p_roi_corner_y_par_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_par_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_par_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PAR_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 2500;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpb_out_op_m() const {
  bool value = (_has_bits_[4] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpb_out_op_m() const {
  return _internal_has_ap_p_roi_corner_x_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpb_out_op_m() {
  ap_p_roi_corner_x_prpb_out_op_m_ = 0;
  _has_bits_[4] &= ~0x00000001u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpb_out_op_m() const {
  return ap_p_roi_corner_x_prpb_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpb_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_OUT_OP_M)
  return _internal_ap_p_roi_corner_x_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpb_out_op_m(float value) {
  _has_bits_[4] |= 0x00000001u;
  ap_p_roi_corner_x_prpb_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpb_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpb_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPB_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 1848;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpb_out_op_m() const {
  bool value = (_has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpb_out_op_m() const {
  return _internal_has_ap_p_roi_corner_y_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpb_out_op_m() {
  ap_p_roi_corner_y_prpb_out_op_m_ = 0;
  _has_bits_[3] &= ~0x00000100u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpb_out_op_m() const {
  return ap_p_roi_corner_y_prpb_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpb_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M)
  return _internal_ap_p_roi_corner_y_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpb_out_op_m(float value) {
  _has_bits_[3] |= 0x00000100u;
  ap_p_roi_corner_y_prpb_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpb_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpb_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 1265;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_prpf_out_op_m() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_prpf_out_op_m() const {
  return _internal_has_ap_p_roi_corner_x_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_prpf_out_op_m() {
  ap_p_roi_corner_x_prpf_out_op_m_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_prpf_out_op_m() const {
  return ap_p_roi_corner_x_prpf_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_prpf_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_OUT_OP_M)
  return _internal_ap_p_roi_corner_x_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_prpf_out_op_m(float value) {
  _has_bits_[2] |= 0x00000004u;
  ap_p_roi_corner_x_prpf_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_prpf_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_prpf_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_PRPF_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 2573;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_prpf_out_op_m() const {
  bool value = (_has_bits_[4] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_prpf_out_op_m() const {
  return _internal_has_ap_p_roi_corner_y_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_prpf_out_op_m() {
  ap_p_roi_corner_y_prpf_out_op_m_ = 0;
  _has_bits_[4] &= ~0x00000010u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_prpf_out_op_m() const {
  return ap_p_roi_corner_y_prpf_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_prpf_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M)
  return _internal_ap_p_roi_corner_y_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_prpf_out_op_m(float value) {
  _has_bits_[4] |= 0x00000010u;
  ap_p_roi_corner_y_prpf_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_prpf_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_prpf_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 3180;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angs_out_op_m() const {
  bool value = (_has_bits_[4] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angs_out_op_m() const {
  return _internal_has_ap_p_roi_corner_x_angs_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angs_out_op_m() {
  ap_p_roi_corner_x_angs_out_op_m_ = 0;
  _has_bits_[4] &= ~0x20000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angs_out_op_m() const {
  return ap_p_roi_corner_x_angs_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angs_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_OUT_OP_M)
  return _internal_ap_p_roi_corner_x_angs_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angs_out_op_m(float value) {
  _has_bits_[4] |= 0x20000000u;
  ap_p_roi_corner_x_angs_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angs_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_angs_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGS_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 656;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angs_out_op_m() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angs_out_op_m() const {
  return _internal_has_ap_p_roi_corner_y_angs_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angs_out_op_m() {
  ap_p_roi_corner_y_angs_out_op_m_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angs_out_op_m() const {
  return ap_p_roi_corner_y_angs_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angs_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M)
  return _internal_ap_p_roi_corner_y_angs_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angs_out_op_m(float value) {
  _has_bits_[1] |= 0x00000002u;
  ap_p_roi_corner_y_angs_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angs_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_angs_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 809;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_x_angr_out_op_m() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_x_angr_out_op_m() const {
  return _internal_has_ap_p_roi_corner_x_angr_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_x_angr_out_op_m() {
  ap_p_roi_corner_x_angr_out_op_m_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_x_angr_out_op_m() const {
  return ap_p_roi_corner_x_angr_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_x_angr_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_OUT_OP_M)
  return _internal_ap_p_roi_corner_x_angr_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_x_angr_out_op_m(float value) {
  _has_bits_[1] |= 0x00000040u;
  ap_p_roi_corner_x_angr_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_x_angr_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_x_angr_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_X_ANGR_OUT_OP_M)
}

// optional float AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 3541;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_roi_corner_y_angr_out_op_m() const {
  bool value = (_has_bits_[5] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_roi_corner_y_angr_out_op_m() const {
  return _internal_has_ap_p_roi_corner_y_angr_out_op_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_roi_corner_y_angr_out_op_m() {
  ap_p_roi_corner_y_angr_out_op_m_ = 0;
  _has_bits_[5] &= ~0x00000400u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_roi_corner_y_angr_out_op_m() const {
  return ap_p_roi_corner_y_angr_out_op_m_;
}
inline float FC_TRJPLA_Params::ap_p_roi_corner_y_angr_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M)
  return _internal_ap_p_roi_corner_y_angr_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_roi_corner_y_angr_out_op_m(float value) {
  _has_bits_[5] |= 0x00000400u;
  ap_p_roi_corner_y_angr_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_roi_corner_y_angr_out_op_m(float value) {
  _internal_set_ap_p_roi_corner_y_angr_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M)
}

// optional float AP_P_PRP_FWD_R_SCALE_1ST_STRK_M = 2511;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_prp_fwd_r_scale_1st_strk_m() const {
  bool value = (_has_bits_[4] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_prp_fwd_r_scale_1st_strk_m() const {
  return _internal_has_ap_p_prp_fwd_r_scale_1st_strk_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_prp_fwd_r_scale_1st_strk_m() {
  ap_p_prp_fwd_r_scale_1st_strk_m_ = 0;
  _has_bits_[4] &= ~0x00000002u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_prp_fwd_r_scale_1st_strk_m() const {
  return ap_p_prp_fwd_r_scale_1st_strk_m_;
}
inline float FC_TRJPLA_Params::ap_p_prp_fwd_r_scale_1st_strk_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PRP_FWD_R_SCALE_1ST_STRK_M)
  return _internal_ap_p_prp_fwd_r_scale_1st_strk_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_prp_fwd_r_scale_1st_strk_m(float value) {
  _has_bits_[4] |= 0x00000002u;
  ap_p_prp_fwd_r_scale_1st_strk_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_prp_fwd_r_scale_1st_strk_m(float value) {
  _internal_set_ap_p_prp_fwd_r_scale_1st_strk_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PRP_FWD_R_SCALE_1ST_STRK_M)
}

// optional bool AP_P_DISABLE_SCAN_GREAT_DIST_NU = 727;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_disable_scan_great_dist_nu() const {
  bool value = (_has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_disable_scan_great_dist_nu() const {
  return _internal_has_ap_p_disable_scan_great_dist_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_disable_scan_great_dist_nu() {
  ap_p_disable_scan_great_dist_nu_ = false;
  _has_bits_[3] &= ~0x00000002u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_disable_scan_great_dist_nu() const {
  return ap_p_disable_scan_great_dist_nu_;
}
inline bool FC_TRJPLA_Params::ap_p_disable_scan_great_dist_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DISABLE_SCAN_GREAT_DIST_NU)
  return _internal_ap_p_disable_scan_great_dist_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_disable_scan_great_dist_nu(bool value) {
  _has_bits_[3] |= 0x00000002u;
  ap_p_disable_scan_great_dist_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_disable_scan_great_dist_nu(bool value) {
  _internal_set_ap_p_disable_scan_great_dist_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DISABLE_SCAN_GREAT_DIST_NU)
}

// optional float AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS = 883;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_vel_close_obstacle_mps() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_vel_close_obstacle_mps() const {
  return _internal_has_ap_p_max_vel_close_obstacle_mps();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_vel_close_obstacle_mps() {
  ap_p_max_vel_close_obstacle_mps_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_vel_close_obstacle_mps() const {
  return ap_p_max_vel_close_obstacle_mps_;
}
inline float FC_TRJPLA_Params::ap_p_max_vel_close_obstacle_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS)
  return _internal_ap_p_max_vel_close_obstacle_mps();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_vel_close_obstacle_mps(float value) {
  _has_bits_[1] |= 0x00000400u;
  ap_p_max_vel_close_obstacle_mps_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_vel_close_obstacle_mps(float value) {
  _internal_set_ap_p_max_vel_close_obstacle_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS)
}

// optional float AP_P_OUT_VRTX_RADIUS_SCALING_NU = 2621;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_out_vrtx_radius_scaling_nu() const {
  bool value = (_has_bits_[4] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_out_vrtx_radius_scaling_nu() const {
  return _internal_has_ap_p_out_vrtx_radius_scaling_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_out_vrtx_radius_scaling_nu() {
  ap_p_out_vrtx_radius_scaling_nu_ = 0;
  _has_bits_[4] &= ~0x00000020u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_out_vrtx_radius_scaling_nu() const {
  return ap_p_out_vrtx_radius_scaling_nu_;
}
inline float FC_TRJPLA_Params::ap_p_out_vrtx_radius_scaling_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_OUT_VRTX_RADIUS_SCALING_NU)
  return _internal_ap_p_out_vrtx_radius_scaling_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_out_vrtx_radius_scaling_nu(float value) {
  _has_bits_[4] |= 0x00000020u;
  ap_p_out_vrtx_radius_scaling_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_out_vrtx_radius_scaling_nu(float value) {
  _internal_set_ap_p_out_vrtx_radius_scaling_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_OUT_VRTX_RADIUS_SCALING_NU)
}

// optional uint32 AP_P_MIN_NUM_VALID_TO_OUTPUT_NU = 1944;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_num_valid_to_output_nu() const {
  bool value = (_has_bits_[3] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_num_valid_to_output_nu() const {
  return _internal_has_ap_p_min_num_valid_to_output_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_num_valid_to_output_nu() {
  ap_p_min_num_valid_to_output_nu_ = 0u;
  _has_bits_[3] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_min_num_valid_to_output_nu() const {
  return ap_p_min_num_valid_to_output_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_min_num_valid_to_output_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_NUM_VALID_TO_OUTPUT_NU)
  return _internal_ap_p_min_num_valid_to_output_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_num_valid_to_output_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[3] |= 0x00001000u;
  ap_p_min_num_valid_to_output_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_num_valid_to_output_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_min_num_valid_to_output_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_NUM_VALID_TO_OUTPUT_NU)
}

// optional float AP_P_MAX_VEL_IN_PAR_SLOT_MPS = 134;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_vel_in_par_slot_mps() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_vel_in_par_slot_mps() const {
  return _internal_has_ap_p_max_vel_in_par_slot_mps();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_vel_in_par_slot_mps() {
  ap_p_max_vel_in_par_slot_mps_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_vel_in_par_slot_mps() const {
  return ap_p_max_vel_in_par_slot_mps_;
}
inline float FC_TRJPLA_Params::ap_p_max_vel_in_par_slot_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_VEL_IN_PAR_SLOT_MPS)
  return _internal_ap_p_max_vel_in_par_slot_mps();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_vel_in_par_slot_mps(float value) {
  _has_bits_[0] |= 0x00000200u;
  ap_p_max_vel_in_par_slot_mps_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_vel_in_par_slot_mps(float value) {
  _internal_set_ap_p_max_vel_in_par_slot_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_VEL_IN_PAR_SLOT_MPS)
}

// optional bool AP_P_DISABLE_PLANNER_NU = 1985;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_disable_planner_nu() const {
  bool value = (_has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_disable_planner_nu() const {
  return _internal_has_ap_p_disable_planner_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_disable_planner_nu() {
  ap_p_disable_planner_nu_ = false;
  _has_bits_[3] &= ~0x00000004u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_disable_planner_nu() const {
  return ap_p_disable_planner_nu_;
}
inline bool FC_TRJPLA_Params::ap_p_disable_planner_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DISABLE_PLANNER_NU)
  return _internal_ap_p_disable_planner_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_disable_planner_nu(bool value) {
  _has_bits_[3] |= 0x00000004u;
  ap_p_disable_planner_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_disable_planner_nu(bool value) {
  _internal_set_ap_p_disable_planner_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DISABLE_PLANNER_NU)
}

// optional float AP_P_DIRECT_FWD_STEP_DIST_M = 105;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_direct_fwd_step_dist_m() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_direct_fwd_step_dist_m() const {
  return _internal_has_ap_p_direct_fwd_step_dist_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_direct_fwd_step_dist_m() {
  ap_p_direct_fwd_step_dist_m_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_direct_fwd_step_dist_m() const {
  return ap_p_direct_fwd_step_dist_m_;
}
inline float FC_TRJPLA_Params::ap_p_direct_fwd_step_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIRECT_FWD_STEP_DIST_M)
  return _internal_ap_p_direct_fwd_step_dist_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_direct_fwd_step_dist_m(float value) {
  _has_bits_[0] |= 0x00000100u;
  ap_p_direct_fwd_step_dist_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_direct_fwd_step_dist_m(float value) {
  _internal_set_ap_p_direct_fwd_step_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIRECT_FWD_STEP_DIST_M)
}

// optional float AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG = 310;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_direct_fwd_start_angle_tol_deg() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_direct_fwd_start_angle_tol_deg() const {
  return _internal_has_ap_p_direct_fwd_start_angle_tol_deg();
}
inline void FC_TRJPLA_Params::clear_ap_p_direct_fwd_start_angle_tol_deg() {
  ap_p_direct_fwd_start_angle_tol_deg_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_direct_fwd_start_angle_tol_deg() const {
  return ap_p_direct_fwd_start_angle_tol_deg_;
}
inline float FC_TRJPLA_Params::ap_p_direct_fwd_start_angle_tol_deg() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG)
  return _internal_ap_p_direct_fwd_start_angle_tol_deg();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_direct_fwd_start_angle_tol_deg(float value) {
  _has_bits_[0] |= 0x00100000u;
  ap_p_direct_fwd_start_angle_tol_deg_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_direct_fwd_start_angle_tol_deg(float value) {
  _internal_set_ap_p_direct_fwd_start_angle_tol_deg(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG)
}

// optional uint32 AP_P_MAX_NUM_CLO_VEL_LOOP_NU = 1589;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_num_clo_vel_loop_nu() const {
  bool value = (_has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_num_clo_vel_loop_nu() const {
  return _internal_has_ap_p_max_num_clo_vel_loop_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_num_clo_vel_loop_nu() {
  ap_p_max_num_clo_vel_loop_nu_ = 0u;
  _has_bits_[2] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_max_num_clo_vel_loop_nu() const {
  return ap_p_max_num_clo_vel_loop_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_max_num_clo_vel_loop_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_NUM_CLO_VEL_LOOP_NU)
  return _internal_ap_p_max_num_clo_vel_loop_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_num_clo_vel_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x04000000u;
  ap_p_max_num_clo_vel_loop_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_num_clo_vel_loop_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_max_num_clo_vel_loop_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_NUM_CLO_VEL_LOOP_NU)
}

// optional uint32 AP_P_SAVE_EM_REPLANNING_NU = 1380;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_save_em_replanning_nu() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_save_em_replanning_nu() const {
  return _internal_has_ap_p_save_em_replanning_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_save_em_replanning_nu() {
  ap_p_save_em_replanning_nu_ = 0u;
  _has_bits_[2] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_save_em_replanning_nu() const {
  return ap_p_save_em_replanning_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_save_em_replanning_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SAVE_EM_REPLANNING_NU)
  return _internal_ap_p_save_em_replanning_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_save_em_replanning_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000800u;
  ap_p_save_em_replanning_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_save_em_replanning_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_save_em_replanning_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SAVE_EM_REPLANNING_NU)
}

// optional float AP_P_ASY_CLO_ST_MIN_LENGTH_M = 862;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_asy_clo_st_min_length_m() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_asy_clo_st_min_length_m() const {
  return _internal_has_ap_p_asy_clo_st_min_length_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_asy_clo_st_min_length_m() {
  ap_p_asy_clo_st_min_length_m_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_asy_clo_st_min_length_m() const {
  return ap_p_asy_clo_st_min_length_m_;
}
inline float FC_TRJPLA_Params::ap_p_asy_clo_st_min_length_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ASY_CLO_ST_MIN_LENGTH_M)
  return _internal_ap_p_asy_clo_st_min_length_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_asy_clo_st_min_length_m(float value) {
  _has_bits_[1] |= 0x00000100u;
  ap_p_asy_clo_st_min_length_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_asy_clo_st_min_length_m(float value) {
  _internal_set_ap_p_asy_clo_st_min_length_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ASY_CLO_ST_MIN_LENGTH_M)
}

// repeated float AP_P_ADAPT_VEL_X_DISTANCE_M = 65;
inline int FC_TRJPLA_Params::_internal_ap_p_adapt_vel_x_distance_m_size() const {
  return ap_p_adapt_vel_x_distance_m_.size();
}
inline int FC_TRJPLA_Params::ap_p_adapt_vel_x_distance_m_size() const {
  return _internal_ap_p_adapt_vel_x_distance_m_size();
}
inline void FC_TRJPLA_Params::clear_ap_p_adapt_vel_x_distance_m() {
  ap_p_adapt_vel_x_distance_m_.Clear();
}
inline float FC_TRJPLA_Params::_internal_ap_p_adapt_vel_x_distance_m(int index) const {
  return ap_p_adapt_vel_x_distance_m_.Get(index);
}
inline float FC_TRJPLA_Params::ap_p_adapt_vel_x_distance_m(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_X_DISTANCE_M)
  return _internal_ap_p_adapt_vel_x_distance_m(index);
}
inline void FC_TRJPLA_Params::set_ap_p_adapt_vel_x_distance_m(int index, float value) {
  ap_p_adapt_vel_x_distance_m_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_X_DISTANCE_M)
}
inline void FC_TRJPLA_Params::_internal_add_ap_p_adapt_vel_x_distance_m(float value) {
  ap_p_adapt_vel_x_distance_m_.Add(value);
}
inline void FC_TRJPLA_Params::add_ap_p_adapt_vel_x_distance_m(float value) {
  _internal_add_ap_p_adapt_vel_x_distance_m(value);
  // @@protoc_insertion_point(field_add:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_X_DISTANCE_M)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJPLA_Params::_internal_ap_p_adapt_vel_x_distance_m() const {
  return ap_p_adapt_vel_x_distance_m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJPLA_Params::ap_p_adapt_vel_x_distance_m() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_X_DISTANCE_M)
  return _internal_ap_p_adapt_vel_x_distance_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJPLA_Params::_internal_mutable_ap_p_adapt_vel_x_distance_m() {
  return &ap_p_adapt_vel_x_distance_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJPLA_Params::mutable_ap_p_adapt_vel_x_distance_m() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_X_DISTANCE_M)
  return _internal_mutable_ap_p_adapt_vel_x_distance_m();
}

// repeated float AP_P_ADAPT_VEL_Y_VELOCITY_MPS = 3711;
inline int FC_TRJPLA_Params::_internal_ap_p_adapt_vel_y_velocity_mps_size() const {
  return ap_p_adapt_vel_y_velocity_mps_.size();
}
inline int FC_TRJPLA_Params::ap_p_adapt_vel_y_velocity_mps_size() const {
  return _internal_ap_p_adapt_vel_y_velocity_mps_size();
}
inline void FC_TRJPLA_Params::clear_ap_p_adapt_vel_y_velocity_mps() {
  ap_p_adapt_vel_y_velocity_mps_.Clear();
}
inline float FC_TRJPLA_Params::_internal_ap_p_adapt_vel_y_velocity_mps(int index) const {
  return ap_p_adapt_vel_y_velocity_mps_.Get(index);
}
inline float FC_TRJPLA_Params::ap_p_adapt_vel_y_velocity_mps(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_Y_VELOCITY_MPS)
  return _internal_ap_p_adapt_vel_y_velocity_mps(index);
}
inline void FC_TRJPLA_Params::set_ap_p_adapt_vel_y_velocity_mps(int index, float value) {
  ap_p_adapt_vel_y_velocity_mps_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_Y_VELOCITY_MPS)
}
inline void FC_TRJPLA_Params::_internal_add_ap_p_adapt_vel_y_velocity_mps(float value) {
  ap_p_adapt_vel_y_velocity_mps_.Add(value);
}
inline void FC_TRJPLA_Params::add_ap_p_adapt_vel_y_velocity_mps(float value) {
  _internal_add_ap_p_adapt_vel_y_velocity_mps(value);
  // @@protoc_insertion_point(field_add:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_Y_VELOCITY_MPS)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJPLA_Params::_internal_ap_p_adapt_vel_y_velocity_mps() const {
  return ap_p_adapt_vel_y_velocity_mps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FC_TRJPLA_Params::ap_p_adapt_vel_y_velocity_mps() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_Y_VELOCITY_MPS)
  return _internal_ap_p_adapt_vel_y_velocity_mps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJPLA_Params::_internal_mutable_ap_p_adapt_vel_y_velocity_mps() {
  return &ap_p_adapt_vel_y_velocity_mps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FC_TRJPLA_Params::mutable_ap_p_adapt_vel_y_velocity_mps() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_Y_VELOCITY_MPS)
  return _internal_mutable_ap_p_adapt_vel_y_velocity_mps();
}

// optional uint32 AP_P_ADAPT_VEL_SIZE_NU = 395;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_adapt_vel_size_nu() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_adapt_vel_size_nu() const {
  return _internal_has_ap_p_adapt_vel_size_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_adapt_vel_size_nu() {
  ap_p_adapt_vel_size_nu_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_adapt_vel_size_nu() const {
  return ap_p_adapt_vel_size_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_adapt_vel_size_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_SIZE_NU)
  return _internal_ap_p_adapt_vel_size_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_adapt_vel_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  ap_p_adapt_vel_size_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_adapt_vel_size_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_adapt_vel_size_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADAPT_VEL_SIZE_NU)
}

// optional float AP_P_STRAIGHT_PERP_EXTRA_DIST_M = 895;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_straight_perp_extra_dist_m() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_straight_perp_extra_dist_m() const {
  return _internal_has_ap_p_straight_perp_extra_dist_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_straight_perp_extra_dist_m() {
  ap_p_straight_perp_extra_dist_m_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_straight_perp_extra_dist_m() const {
  return ap_p_straight_perp_extra_dist_m_;
}
inline float FC_TRJPLA_Params::ap_p_straight_perp_extra_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_STRAIGHT_PERP_EXTRA_DIST_M)
  return _internal_ap_p_straight_perp_extra_dist_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_straight_perp_extra_dist_m(float value) {
  _has_bits_[1] |= 0x00000800u;
  ap_p_straight_perp_extra_dist_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_straight_perp_extra_dist_m(float value) {
  _internal_set_ap_p_straight_perp_extra_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_STRAIGHT_PERP_EXTRA_DIST_M)
}

// optional uint32 AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP = 965;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_par_angle_max_loop() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_par_angle_max_loop() const {
  return _internal_has_ap_p_parkout_par_angle_max_loop();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_par_angle_max_loop() {
  ap_p_parkout_par_angle_max_loop_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_parkout_par_angle_max_loop() const {
  return ap_p_parkout_par_angle_max_loop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_parkout_par_angle_max_loop() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP)
  return _internal_ap_p_parkout_par_angle_max_loop();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_par_angle_max_loop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  ap_p_parkout_par_angle_max_loop_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_par_angle_max_loop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_parkout_par_angle_max_loop(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP)
}

// optional float AP_P_MAX_ALIGNMENT_RADIUS_M = 2697;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_alignment_radius_m() const {
  bool value = (_has_bits_[4] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_alignment_radius_m() const {
  return _internal_has_ap_p_max_alignment_radius_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_alignment_radius_m() {
  ap_p_max_alignment_radius_m_ = 0;
  _has_bits_[4] &= ~0x00000200u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_alignment_radius_m() const {
  return ap_p_max_alignment_radius_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_alignment_radius_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_ALIGNMENT_RADIUS_M)
  return _internal_ap_p_max_alignment_radius_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_alignment_radius_m(float value) {
  _has_bits_[4] |= 0x00000200u;
  ap_p_max_alignment_radius_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_alignment_radius_m(float value) {
  _internal_set_ap_p_max_alignment_radius_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_ALIGNMENT_RADIUS_M)
}

// optional float AP_P_MIN_ALIGNMENT_ANGLE_RAD = 2798;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_alignment_angle_rad() const {
  bool value = (_has_bits_[4] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_alignment_angle_rad() const {
  return _internal_has_ap_p_min_alignment_angle_rad();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_alignment_angle_rad() {
  ap_p_min_alignment_angle_rad_ = 0;
  _has_bits_[4] &= ~0x00004000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_alignment_angle_rad() const {
  return ap_p_min_alignment_angle_rad_;
}
inline float FC_TRJPLA_Params::ap_p_min_alignment_angle_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_ALIGNMENT_ANGLE_RAD)
  return _internal_ap_p_min_alignment_angle_rad();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_alignment_angle_rad(float value) {
  _has_bits_[4] |= 0x00004000u;
  ap_p_min_alignment_angle_rad_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_alignment_angle_rad(float value) {
  _internal_set_ap_p_min_alignment_angle_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_ALIGNMENT_ANGLE_RAD)
}

// optional float AP_P_PLANNING_HORIZON_M = 1134;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_planning_horizon_m() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_planning_horizon_m() const {
  return _internal_has_ap_p_planning_horizon_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_planning_horizon_m() {
  ap_p_planning_horizon_m_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_planning_horizon_m() const {
  return ap_p_planning_horizon_m_;
}
inline float FC_TRJPLA_Params::ap_p_planning_horizon_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PLANNING_HORIZON_M)
  return _internal_ap_p_planning_horizon_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_planning_horizon_m(float value) {
  _has_bits_[1] |= 0x40000000u;
  ap_p_planning_horizon_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_planning_horizon_m(float value) {
  _internal_set_ap_p_planning_horizon_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PLANNING_HORIZON_M)
}

// optional float AP_P_ENDPOSE_NEIGHBOUR_DIST_M = 335;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_endpose_neighbour_dist_m() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_endpose_neighbour_dist_m() const {
  return _internal_has_ap_p_endpose_neighbour_dist_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_endpose_neighbour_dist_m() {
  ap_p_endpose_neighbour_dist_m_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_endpose_neighbour_dist_m() const {
  return ap_p_endpose_neighbour_dist_m_;
}
inline float FC_TRJPLA_Params::ap_p_endpose_neighbour_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENDPOSE_NEIGHBOUR_DIST_M)
  return _internal_ap_p_endpose_neighbour_dist_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_endpose_neighbour_dist_m(float value) {
  _has_bits_[0] |= 0x00200000u;
  ap_p_endpose_neighbour_dist_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_endpose_neighbour_dist_m(float value) {
  _internal_set_ap_p_endpose_neighbour_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENDPOSE_NEIGHBOUR_DIST_M)
}

// optional float AP_P_DESIRED_DIST_TO_OBST_M = 921;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_desired_dist_to_obst_m() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_desired_dist_to_obst_m() const {
  return _internal_has_ap_p_desired_dist_to_obst_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_desired_dist_to_obst_m() {
  ap_p_desired_dist_to_obst_m_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_desired_dist_to_obst_m() const {
  return ap_p_desired_dist_to_obst_m_;
}
inline float FC_TRJPLA_Params::ap_p_desired_dist_to_obst_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DESIRED_DIST_TO_OBST_M)
  return _internal_ap_p_desired_dist_to_obst_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_desired_dist_to_obst_m(float value) {
  _has_bits_[1] |= 0x00002000u;
  ap_p_desired_dist_to_obst_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_desired_dist_to_obst_m(float value) {
  _internal_set_ap_p_desired_dist_to_obst_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DESIRED_DIST_TO_OBST_M)
}

// optional float AP_P_FACTOR_DETERMINATION_NU = 952;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_factor_determination_nu() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_factor_determination_nu() const {
  return _internal_has_ap_p_factor_determination_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_factor_determination_nu() {
  ap_p_factor_determination_nu_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_factor_determination_nu() const {
  return ap_p_factor_determination_nu_;
}
inline float FC_TRJPLA_Params::ap_p_factor_determination_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_FACTOR_DETERMINATION_NU)
  return _internal_ap_p_factor_determination_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_factor_determination_nu(float value) {
  _has_bits_[1] |= 0x00010000u;
  ap_p_factor_determination_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_factor_determination_nu(float value) {
  _internal_set_ap_p_factor_determination_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_FACTOR_DETERMINATION_NU)
}

// optional float AP_P_FACTOR_SAFETY_NU = 2249;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_factor_safety_nu() const {
  bool value = (_has_bits_[3] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_factor_safety_nu() const {
  return _internal_has_ap_p_factor_safety_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_factor_safety_nu() {
  ap_p_factor_safety_nu_ = 0;
  _has_bits_[3] &= ~0x00400000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_factor_safety_nu() const {
  return ap_p_factor_safety_nu_;
}
inline float FC_TRJPLA_Params::ap_p_factor_safety_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_FACTOR_SAFETY_NU)
  return _internal_ap_p_factor_safety_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_factor_safety_nu(float value) {
  _has_bits_[3] |= 0x00400000u;
  ap_p_factor_safety_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_factor_safety_nu(float value) {
  _internal_set_ap_p_factor_safety_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_FACTOR_SAFETY_NU)
}

// optional float AP_P_MAX_POLY_VEL_MPS = 3463;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_poly_vel_mps() const {
  bool value = (_has_bits_[5] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_poly_vel_mps() const {
  return _internal_has_ap_p_max_poly_vel_mps();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_poly_vel_mps() {
  ap_p_max_poly_vel_mps_ = 0;
  _has_bits_[5] &= ~0x00000100u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_poly_vel_mps() const {
  return ap_p_max_poly_vel_mps_;
}
inline float FC_TRJPLA_Params::ap_p_max_poly_vel_mps() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_POLY_VEL_MPS)
  return _internal_ap_p_max_poly_vel_mps();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_poly_vel_mps(float value) {
  _has_bits_[5] |= 0x00000100u;
  ap_p_max_poly_vel_mps_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_poly_vel_mps(float value) {
  _internal_set_ap_p_max_poly_vel_mps(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_POLY_VEL_MPS)
}

// optional float AP_P_ENV_FLICKERING_COMP_M = 226;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_env_flickering_comp_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_env_flickering_comp_m() const {
  return _internal_has_ap_p_env_flickering_comp_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_env_flickering_comp_m() {
  ap_p_env_flickering_comp_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_env_flickering_comp_m() const {
  return ap_p_env_flickering_comp_m_;
}
inline float FC_TRJPLA_Params::ap_p_env_flickering_comp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENV_FLICKERING_COMP_M)
  return _internal_ap_p_env_flickering_comp_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_env_flickering_comp_m(float value) {
  _has_bits_[0] |= 0x00004000u;
  ap_p_env_flickering_comp_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_env_flickering_comp_m(float value) {
  _internal_set_ap_p_env_flickering_comp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENV_FLICKERING_COMP_M)
}

// optional float AP_P_DIST_START_END_KEEP_PATH_M = 994;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_dist_start_end_keep_path_m() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_dist_start_end_keep_path_m() const {
  return _internal_has_ap_p_dist_start_end_keep_path_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_dist_start_end_keep_path_m() {
  ap_p_dist_start_end_keep_path_m_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_dist_start_end_keep_path_m() const {
  return ap_p_dist_start_end_keep_path_m_;
}
inline float FC_TRJPLA_Params::ap_p_dist_start_end_keep_path_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIST_START_END_KEEP_PATH_M)
  return _internal_ap_p_dist_start_end_keep_path_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_dist_start_end_keep_path_m(float value) {
  _has_bits_[1] |= 0x00200000u;
  ap_p_dist_start_end_keep_path_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_dist_start_end_keep_path_m(float value) {
  _internal_set_ap_p_dist_start_end_keep_path_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIST_START_END_KEEP_PATH_M)
}

// optional float AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD = 1916;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_straight_conv_allowed_ang_rad() const {
  bool value = (_has_bits_[3] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_straight_conv_allowed_ang_rad() const {
  return _internal_has_ap_p_straight_conv_allowed_ang_rad();
}
inline void FC_TRJPLA_Params::clear_ap_p_straight_conv_allowed_ang_rad() {
  ap_p_straight_conv_allowed_ang_rad_ = 0;
  _has_bits_[3] &= ~0x00000400u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_straight_conv_allowed_ang_rad() const {
  return ap_p_straight_conv_allowed_ang_rad_;
}
inline float FC_TRJPLA_Params::ap_p_straight_conv_allowed_ang_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD)
  return _internal_ap_p_straight_conv_allowed_ang_rad();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_straight_conv_allowed_ang_rad(float value) {
  _has_bits_[3] |= 0x00000400u;
  ap_p_straight_conv_allowed_ang_rad_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_straight_conv_allowed_ang_rad(float value) {
  _internal_set_ap_p_straight_conv_allowed_ang_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD)
}

// optional float AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M = 2817;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_prep_stroke_len_straight_m() const {
  bool value = (_has_bits_[4] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_prep_stroke_len_straight_m() const {
  return _internal_has_ap_p_max_prep_stroke_len_straight_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_prep_stroke_len_straight_m() {
  ap_p_max_prep_stroke_len_straight_m_ = 0;
  _has_bits_[4] &= ~0x00008000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_prep_stroke_len_straight_m() const {
  return ap_p_max_prep_stroke_len_straight_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_prep_stroke_len_straight_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M)
  return _internal_ap_p_max_prep_stroke_len_straight_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_prep_stroke_len_straight_m(float value) {
  _has_bits_[4] |= 0x00008000u;
  ap_p_max_prep_stroke_len_straight_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_prep_stroke_len_straight_m(float value) {
  _internal_set_ap_p_max_prep_stroke_len_straight_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M)
}

// optional float AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M = 3756;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_prep_stroke_len_straight_m() const {
  bool value = (_has_bits_[5] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_prep_stroke_len_straight_m() const {
  return _internal_has_ap_p_min_prep_stroke_len_straight_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_prep_stroke_len_straight_m() {
  ap_p_min_prep_stroke_len_straight_m_ = 0;
  _has_bits_[5] &= ~0x00040000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_prep_stroke_len_straight_m() const {
  return ap_p_min_prep_stroke_len_straight_m_;
}
inline float FC_TRJPLA_Params::ap_p_min_prep_stroke_len_straight_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M)
  return _internal_ap_p_min_prep_stroke_len_straight_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_prep_stroke_len_straight_m(float value) {
  _has_bits_[5] |= 0x00040000u;
  ap_p_min_prep_stroke_len_straight_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_prep_stroke_len_straight_m(float value) {
  _internal_set_ap_p_min_prep_stroke_len_straight_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M)
}

// optional float AP_P_MIN_ANG_DIFF_INFLECTION_RAD = 1534;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_ang_diff_inflection_rad() const {
  bool value = (_has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_ang_diff_inflection_rad() const {
  return _internal_has_ap_p_min_ang_diff_inflection_rad();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_ang_diff_inflection_rad() {
  ap_p_min_ang_diff_inflection_rad_ = 0;
  _has_bits_[2] &= ~0x00200000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_ang_diff_inflection_rad() const {
  return ap_p_min_ang_diff_inflection_rad_;
}
inline float FC_TRJPLA_Params::ap_p_min_ang_diff_inflection_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_ANG_DIFF_INFLECTION_RAD)
  return _internal_ap_p_min_ang_diff_inflection_rad();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_ang_diff_inflection_rad(float value) {
  _has_bits_[2] |= 0x00200000u;
  ap_p_min_ang_diff_inflection_rad_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_ang_diff_inflection_rad(float value) {
  _internal_set_ap_p_min_ang_diff_inflection_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_ANG_DIFF_INFLECTION_RAD)
}

// optional bool AP_P_ENABLE_ONE_STROKE_PARKING = 2387;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_enable_one_stroke_parking() const {
  bool value = (_has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_enable_one_stroke_parking() const {
  return _internal_has_ap_p_enable_one_stroke_parking();
}
inline void FC_TRJPLA_Params::clear_ap_p_enable_one_stroke_parking() {
  ap_p_enable_one_stroke_parking_ = false;
  _has_bits_[3] &= ~0x00000008u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_enable_one_stroke_parking() const {
  return ap_p_enable_one_stroke_parking_;
}
inline bool FC_TRJPLA_Params::ap_p_enable_one_stroke_parking() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_ONE_STROKE_PARKING)
  return _internal_ap_p_enable_one_stroke_parking();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_enable_one_stroke_parking(bool value) {
  _has_bits_[3] |= 0x00000008u;
  ap_p_enable_one_stroke_parking_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_enable_one_stroke_parking(bool value) {
  _internal_set_ap_p_enable_one_stroke_parking(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_ONE_STROKE_PARKING)
}

// optional float AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M = 38;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_dist_tp_to_intermp_one_stroke_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_dist_tp_to_intermp_one_stroke_m() const {
  return _internal_has_ap_p_max_dist_tp_to_intermp_one_stroke_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_dist_tp_to_intermp_one_stroke_m() {
  ap_p_max_dist_tp_to_intermp_one_stroke_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_dist_tp_to_intermp_one_stroke_m() const {
  return ap_p_max_dist_tp_to_intermp_one_stroke_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_dist_tp_to_intermp_one_stroke_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M)
  return _internal_ap_p_max_dist_tp_to_intermp_one_stroke_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_dist_tp_to_intermp_one_stroke_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  ap_p_max_dist_tp_to_intermp_one_stroke_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_dist_tp_to_intermp_one_stroke_m(float value) {
  _internal_set_ap_p_max_dist_tp_to_intermp_one_stroke_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M)
}

// optional float AP_P_PERP_END_LIMIT_VEL_DIST_M = 2236;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_end_limit_vel_dist_m() const {
  bool value = (_has_bits_[3] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_end_limit_vel_dist_m() const {
  return _internal_has_ap_p_perp_end_limit_vel_dist_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_end_limit_vel_dist_m() {
  ap_p_perp_end_limit_vel_dist_m_ = 0;
  _has_bits_[3] &= ~0x00200000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_end_limit_vel_dist_m() const {
  return ap_p_perp_end_limit_vel_dist_m_;
}
inline float FC_TRJPLA_Params::ap_p_perp_end_limit_vel_dist_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_END_LIMIT_VEL_DIST_M)
  return _internal_ap_p_perp_end_limit_vel_dist_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_end_limit_vel_dist_m(float value) {
  _has_bits_[3] |= 0x00200000u;
  ap_p_perp_end_limit_vel_dist_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_end_limit_vel_dist_m(float value) {
  _internal_set_ap_p_perp_end_limit_vel_dist_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_END_LIMIT_VEL_DIST_M)
}

// optional float AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M = 3518;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_par_max_dist_for_sym_scurve_m() const {
  bool value = (_has_bits_[5] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_par_max_dist_for_sym_scurve_m() const {
  return _internal_has_ap_p_par_max_dist_for_sym_scurve_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_par_max_dist_for_sym_scurve_m() {
  ap_p_par_max_dist_for_sym_scurve_m_ = 0;
  _has_bits_[5] &= ~0x00000200u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_par_max_dist_for_sym_scurve_m() const {
  return ap_p_par_max_dist_for_sym_scurve_m_;
}
inline float FC_TRJPLA_Params::ap_p_par_max_dist_for_sym_scurve_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M)
  return _internal_ap_p_par_max_dist_for_sym_scurve_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_par_max_dist_for_sym_scurve_m(float value) {
  _has_bits_[5] |= 0x00000200u;
  ap_p_par_max_dist_for_sym_scurve_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_par_max_dist_for_sym_scurve_m(float value) {
  _internal_set_ap_p_par_max_dist_for_sym_scurve_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M)
}

// optional float AP_P_PERP_FWD_IN_LAT_DEV_FCTR = 3062;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_fwd_in_lat_dev_fctr() const {
  bool value = (_has_bits_[4] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_fwd_in_lat_dev_fctr() const {
  return _internal_has_ap_p_perp_fwd_in_lat_dev_fctr();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_fwd_in_lat_dev_fctr() {
  ap_p_perp_fwd_in_lat_dev_fctr_ = 0;
  _has_bits_[4] &= ~0x02000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_fwd_in_lat_dev_fctr() const {
  return ap_p_perp_fwd_in_lat_dev_fctr_;
}
inline float FC_TRJPLA_Params::ap_p_perp_fwd_in_lat_dev_fctr() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_FWD_IN_LAT_DEV_FCTR)
  return _internal_ap_p_perp_fwd_in_lat_dev_fctr();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_fwd_in_lat_dev_fctr(float value) {
  _has_bits_[4] |= 0x02000000u;
  ap_p_perp_fwd_in_lat_dev_fctr_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_fwd_in_lat_dev_fctr(float value) {
  _internal_set_ap_p_perp_fwd_in_lat_dev_fctr(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_FWD_IN_LAT_DEV_FCTR)
}

// optional float AP_P_PERP_FWD_IN_LONG_DEV_FCTR = 2024;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_fwd_in_long_dev_fctr() const {
  bool value = (_has_bits_[3] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_fwd_in_long_dev_fctr() const {
  return _internal_has_ap_p_perp_fwd_in_long_dev_fctr();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_fwd_in_long_dev_fctr() {
  ap_p_perp_fwd_in_long_dev_fctr_ = 0;
  _has_bits_[3] &= ~0x00008000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_fwd_in_long_dev_fctr() const {
  return ap_p_perp_fwd_in_long_dev_fctr_;
}
inline float FC_TRJPLA_Params::ap_p_perp_fwd_in_long_dev_fctr() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_FWD_IN_LONG_DEV_FCTR)
  return _internal_ap_p_perp_fwd_in_long_dev_fctr();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_fwd_in_long_dev_fctr(float value) {
  _has_bits_[3] |= 0x00008000u;
  ap_p_perp_fwd_in_long_dev_fctr_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_fwd_in_long_dev_fctr(float value) {
  _internal_set_ap_p_perp_fwd_in_long_dev_fctr(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_FWD_IN_LONG_DEV_FCTR)
}

// optional float AP_P_PERP_FWD_IN_YAW_DEV_FCTR = 968;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_fwd_in_yaw_dev_fctr() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_fwd_in_yaw_dev_fctr() const {
  return _internal_has_ap_p_perp_fwd_in_yaw_dev_fctr();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_fwd_in_yaw_dev_fctr() {
  ap_p_perp_fwd_in_yaw_dev_fctr_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_fwd_in_yaw_dev_fctr() const {
  return ap_p_perp_fwd_in_yaw_dev_fctr_;
}
inline float FC_TRJPLA_Params::ap_p_perp_fwd_in_yaw_dev_fctr() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_FWD_IN_YAW_DEV_FCTR)
  return _internal_ap_p_perp_fwd_in_yaw_dev_fctr();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_fwd_in_yaw_dev_fctr(float value) {
  _has_bits_[1] |= 0x00080000u;
  ap_p_perp_fwd_in_yaw_dev_fctr_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_fwd_in_yaw_dev_fctr(float value) {
  _internal_set_ap_p_perp_fwd_in_yaw_dev_fctr(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_FWD_IN_YAW_DEV_FCTR)
}

// optional float AP_P_PERP_BWD_IN_LAT_DEV_FCTR = 1001;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_bwd_in_lat_dev_fctr() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_bwd_in_lat_dev_fctr() const {
  return _internal_has_ap_p_perp_bwd_in_lat_dev_fctr();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_bwd_in_lat_dev_fctr() {
  ap_p_perp_bwd_in_lat_dev_fctr_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_bwd_in_lat_dev_fctr() const {
  return ap_p_perp_bwd_in_lat_dev_fctr_;
}
inline float FC_TRJPLA_Params::ap_p_perp_bwd_in_lat_dev_fctr() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_BWD_IN_LAT_DEV_FCTR)
  return _internal_ap_p_perp_bwd_in_lat_dev_fctr();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_bwd_in_lat_dev_fctr(float value) {
  _has_bits_[1] |= 0x00400000u;
  ap_p_perp_bwd_in_lat_dev_fctr_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_bwd_in_lat_dev_fctr(float value) {
  _internal_set_ap_p_perp_bwd_in_lat_dev_fctr(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_BWD_IN_LAT_DEV_FCTR)
}

// optional float AP_P_PERP_BWD_IN_LONG_DEV_FCTR = 292;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_bwd_in_long_dev_fctr() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_bwd_in_long_dev_fctr() const {
  return _internal_has_ap_p_perp_bwd_in_long_dev_fctr();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_bwd_in_long_dev_fctr() {
  ap_p_perp_bwd_in_long_dev_fctr_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_bwd_in_long_dev_fctr() const {
  return ap_p_perp_bwd_in_long_dev_fctr_;
}
inline float FC_TRJPLA_Params::ap_p_perp_bwd_in_long_dev_fctr() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_BWD_IN_LONG_DEV_FCTR)
  return _internal_ap_p_perp_bwd_in_long_dev_fctr();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_bwd_in_long_dev_fctr(float value) {
  _has_bits_[0] |= 0x00080000u;
  ap_p_perp_bwd_in_long_dev_fctr_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_bwd_in_long_dev_fctr(float value) {
  _internal_set_ap_p_perp_bwd_in_long_dev_fctr(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_BWD_IN_LONG_DEV_FCTR)
}

// optional float AP_P_PERP_BWD_IN_YAW_DEV_FCTR = 3031;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_bwd_in_yaw_dev_fctr() const {
  bool value = (_has_bits_[4] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_bwd_in_yaw_dev_fctr() const {
  return _internal_has_ap_p_perp_bwd_in_yaw_dev_fctr();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_bwd_in_yaw_dev_fctr() {
  ap_p_perp_bwd_in_yaw_dev_fctr_ = 0;
  _has_bits_[4] &= ~0x00800000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_bwd_in_yaw_dev_fctr() const {
  return ap_p_perp_bwd_in_yaw_dev_fctr_;
}
inline float FC_TRJPLA_Params::ap_p_perp_bwd_in_yaw_dev_fctr() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_BWD_IN_YAW_DEV_FCTR)
  return _internal_ap_p_perp_bwd_in_yaw_dev_fctr();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_bwd_in_yaw_dev_fctr(float value) {
  _has_bits_[4] |= 0x00800000u;
  ap_p_perp_bwd_in_yaw_dev_fctr_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_bwd_in_yaw_dev_fctr(float value) {
  _internal_set_ap_p_perp_bwd_in_yaw_dev_fctr(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_BWD_IN_YAW_DEV_FCTR)
}

// optional bool AP_P_ENABLE_DYNAMIC_REPLANNING = 1584;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_enable_dynamic_replanning() const {
  bool value = (_has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_enable_dynamic_replanning() const {
  return _internal_has_ap_p_enable_dynamic_replanning();
}
inline void FC_TRJPLA_Params::clear_ap_p_enable_dynamic_replanning() {
  ap_p_enable_dynamic_replanning_ = false;
  _has_bits_[3] &= ~0x00000010u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_enable_dynamic_replanning() const {
  return ap_p_enable_dynamic_replanning_;
}
inline bool FC_TRJPLA_Params::ap_p_enable_dynamic_replanning() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_DYNAMIC_REPLANNING)
  return _internal_ap_p_enable_dynamic_replanning();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_enable_dynamic_replanning(bool value) {
  _has_bits_[3] |= 0x00000010u;
  ap_p_enable_dynamic_replanning_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_enable_dynamic_replanning(bool value) {
  _internal_set_ap_p_enable_dynamic_replanning(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_DYNAMIC_REPLANNING)
}

// optional float AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M = 1975;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_par_nodynreplan_dist_to_stop_m() const {
  bool value = (_has_bits_[3] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_par_nodynreplan_dist_to_stop_m() const {
  return _internal_has_ap_p_par_nodynreplan_dist_to_stop_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_par_nodynreplan_dist_to_stop_m() {
  ap_p_par_nodynreplan_dist_to_stop_m_ = 0;
  _has_bits_[3] &= ~0x00002000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_par_nodynreplan_dist_to_stop_m() const {
  return ap_p_par_nodynreplan_dist_to_stop_m_;
}
inline float FC_TRJPLA_Params::ap_p_par_nodynreplan_dist_to_stop_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M)
  return _internal_ap_p_par_nodynreplan_dist_to_stop_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_par_nodynreplan_dist_to_stop_m(float value) {
  _has_bits_[3] |= 0x00002000u;
  ap_p_par_nodynreplan_dist_to_stop_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_par_nodynreplan_dist_to_stop_m(float value) {
  _internal_set_ap_p_par_nodynreplan_dist_to_stop_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M)
}

// optional float AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M = 2525;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_inc_cir_length_for_scur_out_m() const {
  bool value = (_has_bits_[4] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_inc_cir_length_for_scur_out_m() const {
  return _internal_has_ap_p_inc_cir_length_for_scur_out_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_inc_cir_length_for_scur_out_m() {
  ap_p_inc_cir_length_for_scur_out_m_ = 0;
  _has_bits_[4] &= ~0x00000004u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_inc_cir_length_for_scur_out_m() const {
  return ap_p_inc_cir_length_for_scur_out_m_;
}
inline float FC_TRJPLA_Params::ap_p_inc_cir_length_for_scur_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M)
  return _internal_ap_p_inc_cir_length_for_scur_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_inc_cir_length_for_scur_out_m(float value) {
  _has_bits_[4] |= 0x00000004u;
  ap_p_inc_cir_length_for_scur_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_inc_cir_length_for_scur_out_m(float value) {
  _internal_set_ap_p_inc_cir_length_for_scur_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M)
}

// optional uint32 AP_P_NUM_TA_POS_EVAL = 12;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_num_ta_pos_eval() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_num_ta_pos_eval() const {
  return _internal_has_ap_p_num_ta_pos_eval();
}
inline void FC_TRJPLA_Params::clear_ap_p_num_ta_pos_eval() {
  ap_p_num_ta_pos_eval_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_num_ta_pos_eval() const {
  return ap_p_num_ta_pos_eval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_num_ta_pos_eval() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_NUM_TA_POS_EVAL)
  return _internal_ap_p_num_ta_pos_eval();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_num_ta_pos_eval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ap_p_num_ta_pos_eval_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_num_ta_pos_eval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_num_ta_pos_eval(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_NUM_TA_POS_EVAL)
}

// optional uint32 AP_P_NUM_POSE_CHECK_DRVNPATH = 586;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_num_pose_check_drvnpath() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_num_pose_check_drvnpath() const {
  return _internal_has_ap_p_num_pose_check_drvnpath();
}
inline void FC_TRJPLA_Params::clear_ap_p_num_pose_check_drvnpath() {
  ap_p_num_pose_check_drvnpath_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_num_pose_check_drvnpath() const {
  return ap_p_num_pose_check_drvnpath_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_num_pose_check_drvnpath() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_NUM_POSE_CHECK_DRVNPATH)
  return _internal_ap_p_num_pose_check_drvnpath();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_num_pose_check_drvnpath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  ap_p_num_pose_check_drvnpath_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_num_pose_check_drvnpath(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_num_pose_check_drvnpath(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_NUM_POSE_CHECK_DRVNPATH)
}

// optional uint32 AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU = 1624;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_bstpose_stepsz_drvnpath_nu() const {
  bool value = (_has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_bstpose_stepsz_drvnpath_nu() const {
  return _internal_has_ap_p_bstpose_stepsz_drvnpath_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_bstpose_stepsz_drvnpath_nu() {
  ap_p_bstpose_stepsz_drvnpath_nu_ = 0u;
  _has_bits_[2] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_bstpose_stepsz_drvnpath_nu() const {
  return ap_p_bstpose_stepsz_drvnpath_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_bstpose_stepsz_drvnpath_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU)
  return _internal_ap_p_bstpose_stepsz_drvnpath_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_bstpose_stepsz_drvnpath_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x20000000u;
  ap_p_bstpose_stepsz_drvnpath_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_bstpose_stepsz_drvnpath_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_bstpose_stepsz_drvnpath_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU)
}

// optional float AP_P_MIN_DIST_START_TGTAXIS_M = 2463;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_dist_start_tgtaxis_m() const {
  bool value = (_has_bits_[3] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_dist_start_tgtaxis_m() const {
  return _internal_has_ap_p_min_dist_start_tgtaxis_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_dist_start_tgtaxis_m() {
  ap_p_min_dist_start_tgtaxis_m_ = 0;
  _has_bits_[3] &= ~0x40000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_dist_start_tgtaxis_m() const {
  return ap_p_min_dist_start_tgtaxis_m_;
}
inline float FC_TRJPLA_Params::ap_p_min_dist_start_tgtaxis_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_DIST_START_TGTAXIS_M)
  return _internal_ap_p_min_dist_start_tgtaxis_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_dist_start_tgtaxis_m(float value) {
  _has_bits_[3] |= 0x40000000u;
  ap_p_min_dist_start_tgtaxis_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_dist_start_tgtaxis_m(float value) {
  _internal_set_ap_p_min_dist_start_tgtaxis_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_DIST_START_TGTAXIS_M)
}

// optional float AP_P_BEST_PATH_GOAL_DEV_THR_NU = 3633;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_best_path_goal_dev_thr_nu() const {
  bool value = (_has_bits_[5] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_best_path_goal_dev_thr_nu() const {
  return _internal_has_ap_p_best_path_goal_dev_thr_nu();
}
inline void FC_TRJPLA_Params::clear_ap_p_best_path_goal_dev_thr_nu() {
  ap_p_best_path_goal_dev_thr_nu_ = 0;
  _has_bits_[5] &= ~0x00002000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_best_path_goal_dev_thr_nu() const {
  return ap_p_best_path_goal_dev_thr_nu_;
}
inline float FC_TRJPLA_Params::ap_p_best_path_goal_dev_thr_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BEST_PATH_GOAL_DEV_THR_NU)
  return _internal_ap_p_best_path_goal_dev_thr_nu();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_best_path_goal_dev_thr_nu(float value) {
  _has_bits_[5] |= 0x00002000u;
  ap_p_best_path_goal_dev_thr_nu_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_best_path_goal_dev_thr_nu(float value) {
  _internal_set_ap_p_best_path_goal_dev_thr_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BEST_PATH_GOAL_DEV_THR_NU)
}

// optional float AP_P_BEST_PATH_LENGTH_THR_M = 11680804;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_best_path_length_thr_m() const {
  bool value = (_has_bits_[5] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_best_path_length_thr_m() const {
  return _internal_has_ap_p_best_path_length_thr_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_best_path_length_thr_m() {
  ap_p_best_path_length_thr_m_ = 0;
  _has_bits_[5] &= ~0x20000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_best_path_length_thr_m() const {
  return ap_p_best_path_length_thr_m_;
}
inline float FC_TRJPLA_Params::ap_p_best_path_length_thr_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BEST_PATH_LENGTH_THR_M)
  return _internal_ap_p_best_path_length_thr_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_best_path_length_thr_m(float value) {
  _has_bits_[5] |= 0x20000000u;
  ap_p_best_path_length_thr_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_best_path_length_thr_m(float value) {
  _internal_set_ap_p_best_path_length_thr_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BEST_PATH_LENGTH_THR_M)
}

// optional float AP_P_BEST_PATH_TIME_THR_S = 983;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_best_path_time_thr_s() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_best_path_time_thr_s() const {
  return _internal_has_ap_p_best_path_time_thr_s();
}
inline void FC_TRJPLA_Params::clear_ap_p_best_path_time_thr_s() {
  ap_p_best_path_time_thr_s_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_best_path_time_thr_s() const {
  return ap_p_best_path_time_thr_s_;
}
inline float FC_TRJPLA_Params::ap_p_best_path_time_thr_s() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BEST_PATH_TIME_THR_S)
  return _internal_ap_p_best_path_time_thr_s();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_best_path_time_thr_s(float value) {
  _has_bits_[1] |= 0x00100000u;
  ap_p_best_path_time_thr_s_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_best_path_time_thr_s(float value) {
  _internal_set_ap_p_best_path_time_thr_s(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_BEST_PATH_TIME_THR_S)
}

// optional bool AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL = 1038;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_enable_out_in_strokes_replan_parallel() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_enable_out_in_strokes_replan_parallel() const {
  return _internal_has_ap_p_enable_out_in_strokes_replan_parallel();
}
inline void FC_TRJPLA_Params::clear_ap_p_enable_out_in_strokes_replan_parallel() {
  ap_p_enable_out_in_strokes_replan_parallel_ = false;
  _has_bits_[2] &= ~0x00020000u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_enable_out_in_strokes_replan_parallel() const {
  return ap_p_enable_out_in_strokes_replan_parallel_;
}
inline bool FC_TRJPLA_Params::ap_p_enable_out_in_strokes_replan_parallel() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL)
  return _internal_ap_p_enable_out_in_strokes_replan_parallel();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_enable_out_in_strokes_replan_parallel(bool value) {
  _has_bits_[2] |= 0x00020000u;
  ap_p_enable_out_in_strokes_replan_parallel_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_enable_out_in_strokes_replan_parallel(bool value) {
  _internal_set_ap_p_enable_out_in_strokes_replan_parallel(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL)
}

// optional bool AP_P_ENABLE_LAST_CALL_MANEUVER_PERP = 2093;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_enable_last_call_maneuver_perp() const {
  bool value = (_has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_enable_last_call_maneuver_perp() const {
  return _internal_has_ap_p_enable_last_call_maneuver_perp();
}
inline void FC_TRJPLA_Params::clear_ap_p_enable_last_call_maneuver_perp() {
  ap_p_enable_last_call_maneuver_perp_ = false;
  _has_bits_[2] &= ~0x00040000u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_enable_last_call_maneuver_perp() const {
  return ap_p_enable_last_call_maneuver_perp_;
}
inline bool FC_TRJPLA_Params::ap_p_enable_last_call_maneuver_perp() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_LAST_CALL_MANEUVER_PERP)
  return _internal_ap_p_enable_last_call_maneuver_perp();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_enable_last_call_maneuver_perp(bool value) {
  _has_bits_[2] |= 0x00040000u;
  ap_p_enable_last_call_maneuver_perp_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_enable_last_call_maneuver_perp(bool value) {
  _internal_set_ap_p_enable_last_call_maneuver_perp(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_LAST_CALL_MANEUVER_PERP)
}

// optional float AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP = 476;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_distance_for_last_call_man_perp() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_distance_for_last_call_man_perp() const {
  return _internal_has_ap_p_distance_for_last_call_man_perp();
}
inline void FC_TRJPLA_Params::clear_ap_p_distance_for_last_call_man_perp() {
  ap_p_distance_for_last_call_man_perp_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_distance_for_last_call_man_perp() const {
  return ap_p_distance_for_last_call_man_perp_;
}
inline float FC_TRJPLA_Params::ap_p_distance_for_last_call_man_perp() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP)
  return _internal_ap_p_distance_for_last_call_man_perp();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_distance_for_last_call_man_perp(float value) {
  _has_bits_[0] |= 0x04000000u;
  ap_p_distance_for_last_call_man_perp_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_distance_for_last_call_man_perp(float value) {
  _internal_set_ap_p_distance_for_last_call_man_perp(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP)
}

// optional float AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M = 3124;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_scurve_dist_to_tgt_pose_m() const {
  bool value = (_has_bits_[4] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_scurve_dist_to_tgt_pose_m() const {
  return _internal_has_ap_p_max_scurve_dist_to_tgt_pose_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_scurve_dist_to_tgt_pose_m() {
  ap_p_max_scurve_dist_to_tgt_pose_m_ = 0;
  _has_bits_[4] &= ~0x04000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_scurve_dist_to_tgt_pose_m() const {
  return ap_p_max_scurve_dist_to_tgt_pose_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_scurve_dist_to_tgt_pose_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M)
  return _internal_ap_p_max_scurve_dist_to_tgt_pose_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_scurve_dist_to_tgt_pose_m(float value) {
  _has_bits_[4] |= 0x04000000u;
  ap_p_max_scurve_dist_to_tgt_pose_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_scurve_dist_to_tgt_pose_m(float value) {
  _internal_set_ap_p_max_scurve_dist_to_tgt_pose_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M)
}

// optional bool AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD = 1893;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_enable_first_stroke_fwd_perp_bwd() const {
  bool value = (_has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_enable_first_stroke_fwd_perp_bwd() const {
  return _internal_has_ap_p_enable_first_stroke_fwd_perp_bwd();
}
inline void FC_TRJPLA_Params::clear_ap_p_enable_first_stroke_fwd_perp_bwd() {
  ap_p_enable_first_stroke_fwd_perp_bwd_ = false;
  _has_bits_[2] &= ~0x00080000u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_enable_first_stroke_fwd_perp_bwd() const {
  return ap_p_enable_first_stroke_fwd_perp_bwd_;
}
inline bool FC_TRJPLA_Params::ap_p_enable_first_stroke_fwd_perp_bwd() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD)
  return _internal_ap_p_enable_first_stroke_fwd_perp_bwd();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_enable_first_stroke_fwd_perp_bwd(bool value) {
  _has_bits_[2] |= 0x00080000u;
  ap_p_enable_first_stroke_fwd_perp_bwd_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_enable_first_stroke_fwd_perp_bwd(bool value) {
  _internal_set_ap_p_enable_first_stroke_fwd_perp_bwd(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD)
}

// optional float AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M = 14945121;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const {
  bool value = (_has_bits_[5] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const {
  return _internal_has_ap_p_perp_straight_min_bwd_dist_fwd_strk_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_perp_straight_min_bwd_dist_fwd_strk_m() {
  ap_p_perp_straight_min_bwd_dist_fwd_strk_m_ = 0;
  _has_bits_[5] &= ~0x40000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const {
  return ap_p_perp_straight_min_bwd_dist_fwd_strk_m_;
}
inline float FC_TRJPLA_Params::ap_p_perp_straight_min_bwd_dist_fwd_strk_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M)
  return _internal_ap_p_perp_straight_min_bwd_dist_fwd_strk_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(float value) {
  _has_bits_[5] |= 0x40000000u;
  ap_p_perp_straight_min_bwd_dist_fwd_strk_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(float value) {
  _internal_set_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M)
}

// optional float AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD = 2716735;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_distance_shorten_first_strk_fwd() const {
  bool value = (_has_bits_[5] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_distance_shorten_first_strk_fwd() const {
  return _internal_has_ap_p_max_distance_shorten_first_strk_fwd();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_distance_shorten_first_strk_fwd() {
  ap_p_max_distance_shorten_first_strk_fwd_ = 0;
  _has_bits_[5] &= ~0x02000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_distance_shorten_first_strk_fwd() const {
  return ap_p_max_distance_shorten_first_strk_fwd_;
}
inline float FC_TRJPLA_Params::ap_p_max_distance_shorten_first_strk_fwd() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD)
  return _internal_ap_p_max_distance_shorten_first_strk_fwd();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_distance_shorten_first_strk_fwd(float value) {
  _has_bits_[5] |= 0x02000000u;
  ap_p_max_distance_shorten_first_strk_fwd_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_distance_shorten_first_strk_fwd(float value) {
  _internal_set_ap_p_max_distance_shorten_first_strk_fwd(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD)
}

// optional float AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD = 1565;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_ratio_distance_shorting_first_strk_fwd() const {
  bool value = (_has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_ratio_distance_shorting_first_strk_fwd() const {
  return _internal_has_ap_p_ratio_distance_shorting_first_strk_fwd();
}
inline void FC_TRJPLA_Params::clear_ap_p_ratio_distance_shorting_first_strk_fwd() {
  ap_p_ratio_distance_shorting_first_strk_fwd_ = 0;
  _has_bits_[2] &= ~0x02000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_ratio_distance_shorting_first_strk_fwd() const {
  return ap_p_ratio_distance_shorting_first_strk_fwd_;
}
inline float FC_TRJPLA_Params::ap_p_ratio_distance_shorting_first_strk_fwd() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD)
  return _internal_ap_p_ratio_distance_shorting_first_strk_fwd();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_ratio_distance_shorting_first_strk_fwd(float value) {
  _has_bits_[2] |= 0x02000000u;
  ap_p_ratio_distance_shorting_first_strk_fwd_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_ratio_distance_shorting_first_strk_fwd(float value) {
  _internal_set_ap_p_ratio_distance_shorting_first_strk_fwd(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD)
}

// optional bool AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD = 1057;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_enable_early_steer_first_strk_fwd() const {
  bool value = (_has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_enable_early_steer_first_strk_fwd() const {
  return _internal_has_ap_p_enable_early_steer_first_strk_fwd();
}
inline void FC_TRJPLA_Params::clear_ap_p_enable_early_steer_first_strk_fwd() {
  ap_p_enable_early_steer_first_strk_fwd_ = false;
  _has_bits_[2] &= ~0x00100000u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_enable_early_steer_first_strk_fwd() const {
  return ap_p_enable_early_steer_first_strk_fwd_;
}
inline bool FC_TRJPLA_Params::ap_p_enable_early_steer_first_strk_fwd() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD)
  return _internal_ap_p_enable_early_steer_first_strk_fwd();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_enable_early_steer_first_strk_fwd(bool value) {
  _has_bits_[2] |= 0x00100000u;
  ap_p_enable_early_steer_first_strk_fwd_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_enable_early_steer_first_strk_fwd(bool value) {
  _internal_set_ap_p_enable_early_steer_first_strk_fwd(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD)
}

// optional float AP_P_RATIO_ADD_MIN_RADIUS_ANGLED = 2952;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_ratio_add_min_radius_angled() const {
  bool value = (_has_bits_[4] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_ratio_add_min_radius_angled() const {
  return _internal_has_ap_p_ratio_add_min_radius_angled();
}
inline void FC_TRJPLA_Params::clear_ap_p_ratio_add_min_radius_angled() {
  ap_p_ratio_add_min_radius_angled_ = 0;
  _has_bits_[4] &= ~0x00100000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_ratio_add_min_radius_angled() const {
  return ap_p_ratio_add_min_radius_angled_;
}
inline float FC_TRJPLA_Params::ap_p_ratio_add_min_radius_angled() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_ADD_MIN_RADIUS_ANGLED)
  return _internal_ap_p_ratio_add_min_radius_angled();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_ratio_add_min_radius_angled(float value) {
  _has_bits_[4] |= 0x00100000u;
  ap_p_ratio_add_min_radius_angled_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_ratio_add_min_radius_angled(float value) {
  _internal_set_ap_p_ratio_add_min_radius_angled(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_ADD_MIN_RADIUS_ANGLED)
}

// optional float AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED = 1219;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_ratio_add_align_radius_angled() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_ratio_add_align_radius_angled() const {
  return _internal_has_ap_p_ratio_add_align_radius_angled();
}
inline void FC_TRJPLA_Params::clear_ap_p_ratio_add_align_radius_angled() {
  ap_p_ratio_add_align_radius_angled_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_ratio_add_align_radius_angled() const {
  return ap_p_ratio_add_align_radius_angled_;
}
inline float FC_TRJPLA_Params::ap_p_ratio_add_align_radius_angled() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED)
  return _internal_ap_p_ratio_add_align_radius_angled();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_ratio_add_align_radius_angled(float value) {
  _has_bits_[2] |= 0x00000001u;
  ap_p_ratio_add_align_radius_angled_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_ratio_add_align_radius_angled(float value) {
  _internal_set_ap_p_ratio_add_align_radius_angled(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED)
}

// optional bool AP_P_ENABLE_FIRST_STRK_FWD_PAR = 257;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_enable_first_strk_fwd_par() const {
  bool value = (_has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_enable_first_strk_fwd_par() const {
  return _internal_has_ap_p_enable_first_strk_fwd_par();
}
inline void FC_TRJPLA_Params::clear_ap_p_enable_first_strk_fwd_par() {
  ap_p_enable_first_strk_fwd_par_ = false;
  _has_bits_[2] &= ~0x40000000u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_enable_first_strk_fwd_par() const {
  return ap_p_enable_first_strk_fwd_par_;
}
inline bool FC_TRJPLA_Params::ap_p_enable_first_strk_fwd_par() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_FIRST_STRK_FWD_PAR)
  return _internal_ap_p_enable_first_strk_fwd_par();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_enable_first_strk_fwd_par(bool value) {
  _has_bits_[2] |= 0x40000000u;
  ap_p_enable_first_strk_fwd_par_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_enable_first_strk_fwd_par(bool value) {
  _internal_set_ap_p_enable_first_strk_fwd_par(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ENABLE_FIRST_STRK_FWD_PAR)
}

// optional float AP_P_ADD_STRAIGHT_FSF_M = 1008;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_add_straight_fsf_m() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_add_straight_fsf_m() const {
  return _internal_has_ap_p_add_straight_fsf_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_add_straight_fsf_m() {
  ap_p_add_straight_fsf_m_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_add_straight_fsf_m() const {
  return ap_p_add_straight_fsf_m_;
}
inline float FC_TRJPLA_Params::ap_p_add_straight_fsf_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADD_STRAIGHT_FSF_M)
  return _internal_ap_p_add_straight_fsf_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_add_straight_fsf_m(float value) {
  _has_bits_[1] |= 0x01000000u;
  ap_p_add_straight_fsf_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_add_straight_fsf_m(float value) {
  _internal_set_ap_p_add_straight_fsf_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADD_STRAIGHT_FSF_M)
}

// optional float AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M = 4001;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_add_straight_to_wheelstopper_m() const {
  bool value = (_has_bits_[5] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_add_straight_to_wheelstopper_m() const {
  return _internal_has_ap_p_add_straight_to_wheelstopper_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_add_straight_to_wheelstopper_m() {
  ap_p_add_straight_to_wheelstopper_m_ = 0;
  _has_bits_[5] &= ~0x01000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_add_straight_to_wheelstopper_m() const {
  return ap_p_add_straight_to_wheelstopper_m_;
}
inline float FC_TRJPLA_Params::ap_p_add_straight_to_wheelstopper_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M)
  return _internal_ap_p_add_straight_to_wheelstopper_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_add_straight_to_wheelstopper_m(float value) {
  _has_bits_[5] |= 0x01000000u;
  ap_p_add_straight_to_wheelstopper_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_add_straight_to_wheelstopper_m(float value) {
  _internal_set_ap_p_add_straight_to_wheelstopper_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M)
}

// optional float AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M = 698;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_long_shift_intermed_ws_tapos_m() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_long_shift_intermed_ws_tapos_m() const {
  return _internal_has_ap_p_long_shift_intermed_ws_tapos_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_long_shift_intermed_ws_tapos_m() {
  ap_p_long_shift_intermed_ws_tapos_m_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_long_shift_intermed_ws_tapos_m() const {
  return ap_p_long_shift_intermed_ws_tapos_m_;
}
inline float FC_TRJPLA_Params::ap_p_long_shift_intermed_ws_tapos_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M)
  return _internal_ap_p_long_shift_intermed_ws_tapos_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_long_shift_intermed_ws_tapos_m(float value) {
  _has_bits_[1] |= 0x00000008u;
  ap_p_long_shift_intermed_ws_tapos_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_long_shift_intermed_ws_tapos_m(float value) {
  _internal_set_ap_p_long_shift_intermed_ws_tapos_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M)
}

// optional float AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M = 2917;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_height_of_triangle_clo_collision_m() const {
  bool value = (_has_bits_[4] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_height_of_triangle_clo_collision_m() const {
  return _internal_has_ap_p_max_height_of_triangle_clo_collision_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_height_of_triangle_clo_collision_m() {
  ap_p_max_height_of_triangle_clo_collision_m_ = 0;
  _has_bits_[4] &= ~0x00040000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_height_of_triangle_clo_collision_m() const {
  return ap_p_max_height_of_triangle_clo_collision_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_height_of_triangle_clo_collision_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M)
  return _internal_ap_p_max_height_of_triangle_clo_collision_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_height_of_triangle_clo_collision_m(float value) {
  _has_bits_[4] |= 0x00040000u;
  ap_p_max_height_of_triangle_clo_collision_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_height_of_triangle_clo_collision_m(float value) {
  _internal_set_ap_p_max_height_of_triangle_clo_collision_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M)
}

// optional float AP_P_SNAP_RATIO_TO_AVOID_COLL = 1267;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_snap_ratio_to_avoid_coll() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_snap_ratio_to_avoid_coll() const {
  return _internal_has_ap_p_snap_ratio_to_avoid_coll();
}
inline void FC_TRJPLA_Params::clear_ap_p_snap_ratio_to_avoid_coll() {
  ap_p_snap_ratio_to_avoid_coll_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_snap_ratio_to_avoid_coll() const {
  return ap_p_snap_ratio_to_avoid_coll_;
}
inline float FC_TRJPLA_Params::ap_p_snap_ratio_to_avoid_coll() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SNAP_RATIO_TO_AVOID_COLL)
  return _internal_ap_p_snap_ratio_to_avoid_coll();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_snap_ratio_to_avoid_coll(float value) {
  _has_bits_[2] |= 0x00000008u;
  ap_p_snap_ratio_to_avoid_coll_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_snap_ratio_to_avoid_coll(float value) {
  _internal_set_ap_p_snap_ratio_to_avoid_coll(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_SNAP_RATIO_TO_AVOID_COLL)
}

// optional float AP_P_STEP_MOVING_RATIO_CLO_COLL = 343;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_step_moving_ratio_clo_coll() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_step_moving_ratio_clo_coll() const {
  return _internal_has_ap_p_step_moving_ratio_clo_coll();
}
inline void FC_TRJPLA_Params::clear_ap_p_step_moving_ratio_clo_coll() {
  ap_p_step_moving_ratio_clo_coll_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_step_moving_ratio_clo_coll() const {
  return ap_p_step_moving_ratio_clo_coll_;
}
inline float FC_TRJPLA_Params::ap_p_step_moving_ratio_clo_coll() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_STEP_MOVING_RATIO_CLO_COLL)
  return _internal_ap_p_step_moving_ratio_clo_coll();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_step_moving_ratio_clo_coll(float value) {
  _has_bits_[0] |= 0x00400000u;
  ap_p_step_moving_ratio_clo_coll_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_step_moving_ratio_clo_coll(float value) {
  _internal_set_ap_p_step_moving_ratio_clo_coll(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_STEP_MOVING_RATIO_CLO_COLL)
}

// optional uint32 AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE = 2846;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_attempt_wrap_up_triangle() const {
  bool value = (_has_bits_[4] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_attempt_wrap_up_triangle() const {
  return _internal_has_ap_p_max_attempt_wrap_up_triangle();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_attempt_wrap_up_triangle() {
  ap_p_max_attempt_wrap_up_triangle_ = 0u;
  _has_bits_[4] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_max_attempt_wrap_up_triangle() const {
  return ap_p_max_attempt_wrap_up_triangle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_max_attempt_wrap_up_triangle() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE)
  return _internal_ap_p_max_attempt_wrap_up_triangle();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_attempt_wrap_up_triangle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[4] |= 0x00010000u;
  ap_p_max_attempt_wrap_up_triangle_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_attempt_wrap_up_triangle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ap_p_max_attempt_wrap_up_triangle(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE)
}

// repeated uint32 AP_P_KEY_CORNERS_CARBODY = 978;
inline int FC_TRJPLA_Params::_internal_ap_p_key_corners_carbody_size() const {
  return ap_p_key_corners_carbody_.size();
}
inline int FC_TRJPLA_Params::ap_p_key_corners_carbody_size() const {
  return _internal_ap_p_key_corners_carbody_size();
}
inline void FC_TRJPLA_Params::clear_ap_p_key_corners_carbody() {
  ap_p_key_corners_carbody_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_key_corners_carbody(int index) const {
  return ap_p_key_corners_carbody_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_key_corners_carbody(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_CARBODY)
  return _internal_ap_p_key_corners_carbody(index);
}
inline void FC_TRJPLA_Params::set_ap_p_key_corners_carbody(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ap_p_key_corners_carbody_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_CARBODY)
}
inline void FC_TRJPLA_Params::_internal_add_ap_p_key_corners_carbody(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ap_p_key_corners_carbody_.Add(value);
}
inline void FC_TRJPLA_Params::add_ap_p_key_corners_carbody(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ap_p_key_corners_carbody(value);
  // @@protoc_insertion_point(field_add:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_CARBODY)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FC_TRJPLA_Params::_internal_ap_p_key_corners_carbody() const {
  return ap_p_key_corners_carbody_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FC_TRJPLA_Params::ap_p_key_corners_carbody() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_CARBODY)
  return _internal_ap_p_key_corners_carbody();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FC_TRJPLA_Params::_internal_mutable_ap_p_key_corners_carbody() {
  return &ap_p_key_corners_carbody_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FC_TRJPLA_Params::mutable_ap_p_key_corners_carbody() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_CARBODY)
  return _internal_mutable_ap_p_key_corners_carbody();
}

// repeated uint32 AP_P_KEY_CORNERS_WHEEL = 754;
inline int FC_TRJPLA_Params::_internal_ap_p_key_corners_wheel_size() const {
  return ap_p_key_corners_wheel_.size();
}
inline int FC_TRJPLA_Params::ap_p_key_corners_wheel_size() const {
  return _internal_ap_p_key_corners_wheel_size();
}
inline void FC_TRJPLA_Params::clear_ap_p_key_corners_wheel() {
  ap_p_key_corners_wheel_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::_internal_ap_p_key_corners_wheel(int index) const {
  return ap_p_key_corners_wheel_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Params::ap_p_key_corners_wheel(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_WHEEL)
  return _internal_ap_p_key_corners_wheel(index);
}
inline void FC_TRJPLA_Params::set_ap_p_key_corners_wheel(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ap_p_key_corners_wheel_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_WHEEL)
}
inline void FC_TRJPLA_Params::_internal_add_ap_p_key_corners_wheel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ap_p_key_corners_wheel_.Add(value);
}
inline void FC_TRJPLA_Params::add_ap_p_key_corners_wheel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ap_p_key_corners_wheel(value);
  // @@protoc_insertion_point(field_add:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_WHEEL)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FC_TRJPLA_Params::_internal_ap_p_key_corners_wheel() const {
  return ap_p_key_corners_wheel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FC_TRJPLA_Params::ap_p_key_corners_wheel() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_WHEEL)
  return _internal_ap_p_key_corners_wheel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FC_TRJPLA_Params::_internal_mutable_ap_p_key_corners_wheel() {
  return &ap_p_key_corners_wheel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FC_TRJPLA_Params::mutable_ap_p_key_corners_wheel() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_KEY_CORNERS_WHEEL)
  return _internal_mutable_ap_p_key_corners_wheel();
}

// optional float AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M = 1306;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_min_long_dev_for_straight_repl_par_m() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_min_long_dev_for_straight_repl_par_m() const {
  return _internal_has_ap_p_min_long_dev_for_straight_repl_par_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_min_long_dev_for_straight_repl_par_m() {
  ap_p_min_long_dev_for_straight_repl_par_m_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_min_long_dev_for_straight_repl_par_m() const {
  return ap_p_min_long_dev_for_straight_repl_par_m_;
}
inline float FC_TRJPLA_Params::ap_p_min_long_dev_for_straight_repl_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M)
  return _internal_ap_p_min_long_dev_for_straight_repl_par_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_min_long_dev_for_straight_repl_par_m(float value) {
  _has_bits_[2] |= 0x00000020u;
  ap_p_min_long_dev_for_straight_repl_par_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_min_long_dev_for_straight_repl_par_m(float value) {
  _internal_set_ap_p_min_long_dev_for_straight_repl_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M)
}

// optional float AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M = 2674;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_lat_dev_for_straight_repl_par_m() const {
  bool value = (_has_bits_[4] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_lat_dev_for_straight_repl_par_m() const {
  return _internal_has_ap_p_max_lat_dev_for_straight_repl_par_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_lat_dev_for_straight_repl_par_m() {
  ap_p_max_lat_dev_for_straight_repl_par_m_ = 0;
  _has_bits_[4] &= ~0x00000040u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_lat_dev_for_straight_repl_par_m() const {
  return ap_p_max_lat_dev_for_straight_repl_par_m_;
}
inline float FC_TRJPLA_Params::ap_p_max_lat_dev_for_straight_repl_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M)
  return _internal_ap_p_max_lat_dev_for_straight_repl_par_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_lat_dev_for_straight_repl_par_m(float value) {
  _has_bits_[4] |= 0x00000040u;
  ap_p_max_lat_dev_for_straight_repl_par_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_lat_dev_for_straight_repl_par_m(float value) {
  _internal_set_ap_p_max_lat_dev_for_straight_repl_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M)
}

// optional float AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD = 1553;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_max_orientation_dev_for_straight_repl_par_rad() const {
  bool value = (_has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_max_orientation_dev_for_straight_repl_par_rad() const {
  return _internal_has_ap_p_max_orientation_dev_for_straight_repl_par_rad();
}
inline void FC_TRJPLA_Params::clear_ap_p_max_orientation_dev_for_straight_repl_par_rad() {
  ap_p_max_orientation_dev_for_straight_repl_par_rad_ = 0;
  _has_bits_[2] &= ~0x01000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_max_orientation_dev_for_straight_repl_par_rad() const {
  return ap_p_max_orientation_dev_for_straight_repl_par_rad_;
}
inline float FC_TRJPLA_Params::ap_p_max_orientation_dev_for_straight_repl_par_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD)
  return _internal_ap_p_max_orientation_dev_for_straight_repl_par_rad();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_max_orientation_dev_for_straight_repl_par_rad(float value) {
  _has_bits_[2] |= 0x01000000u;
  ap_p_max_orientation_dev_for_straight_repl_par_rad_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_max_orientation_dev_for_straight_repl_par_rad(float value) {
  _internal_set_ap_p_max_orientation_dev_for_straight_repl_par_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD)
}

// optional float AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M = 3351;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_par_repl_max_extend_dist_after_scurve_m() const {
  bool value = (_has_bits_[5] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_par_repl_max_extend_dist_after_scurve_m() const {
  return _internal_has_ap_p_par_repl_max_extend_dist_after_scurve_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_par_repl_max_extend_dist_after_scurve_m() {
  ap_p_par_repl_max_extend_dist_after_scurve_m_ = 0;
  _has_bits_[5] &= ~0x00000002u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_par_repl_max_extend_dist_after_scurve_m() const {
  return ap_p_par_repl_max_extend_dist_after_scurve_m_;
}
inline float FC_TRJPLA_Params::ap_p_par_repl_max_extend_dist_after_scurve_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M)
  return _internal_ap_p_par_repl_max_extend_dist_after_scurve_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_par_repl_max_extend_dist_after_scurve_m(float value) {
  _has_bits_[5] |= 0x00000002u;
  ap_p_par_repl_max_extend_dist_after_scurve_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_par_repl_max_extend_dist_after_scurve_m(float value) {
  _internal_set_ap_p_par_repl_max_extend_dist_after_scurve_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M)
}

// optional float AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN = 881;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const {
  return _internal_has_ap_p_ratio_straight_prepare_fwd_stroke_prep_align();
}
inline void FC_TRJPLA_Params::clear_ap_p_ratio_straight_prepare_fwd_stroke_prep_align() {
  ap_p_ratio_straight_prepare_fwd_stroke_prep_align_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const {
  return ap_p_ratio_straight_prepare_fwd_stroke_prep_align_;
}
inline float FC_TRJPLA_Params::ap_p_ratio_straight_prepare_fwd_stroke_prep_align() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN)
  return _internal_ap_p_ratio_straight_prepare_fwd_stroke_prep_align();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(float value) {
  _has_bits_[1] |= 0x00000200u;
  ap_p_ratio_straight_prepare_fwd_stroke_prep_align_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(float value) {
  _internal_set_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN)
}

// optional float AP_P_RATIO_PRE_PREP_ALIGN_AXIS = 94;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_ratio_pre_prep_align_axis() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_ratio_pre_prep_align_axis() const {
  return _internal_has_ap_p_ratio_pre_prep_align_axis();
}
inline void FC_TRJPLA_Params::clear_ap_p_ratio_pre_prep_align_axis() {
  ap_p_ratio_pre_prep_align_axis_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_ratio_pre_prep_align_axis() const {
  return ap_p_ratio_pre_prep_align_axis_;
}
inline float FC_TRJPLA_Params::ap_p_ratio_pre_prep_align_axis() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_PRE_PREP_ALIGN_AXIS)
  return _internal_ap_p_ratio_pre_prep_align_axis();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_ratio_pre_prep_align_axis(float value) {
  _has_bits_[0] |= 0x00000080u;
  ap_p_ratio_pre_prep_align_axis_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_ratio_pre_prep_align_axis(float value) {
  _internal_set_ap_p_ratio_pre_prep_align_axis(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_PRE_PREP_ALIGN_AXIS)
}

// optional float AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M = 1230;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_pre_prep_align_radius_ext_m() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_pre_prep_align_radius_ext_m() const {
  return _internal_has_ap_p_pre_prep_align_radius_ext_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_pre_prep_align_radius_ext_m() {
  ap_p_pre_prep_align_radius_ext_m_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_pre_prep_align_radius_ext_m() const {
  return ap_p_pre_prep_align_radius_ext_m_;
}
inline float FC_TRJPLA_Params::ap_p_pre_prep_align_radius_ext_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M)
  return _internal_ap_p_pre_prep_align_radius_ext_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_pre_prep_align_radius_ext_m(float value) {
  _has_bits_[2] |= 0x00000002u;
  ap_p_pre_prep_align_radius_ext_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_pre_prep_align_radius_ext_m(float value) {
  _internal_set_ap_p_pre_prep_align_radius_ext_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M)
}

// optional float AP_P_RATIO_CONFINED_SPACE = 2679;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_ratio_confined_space() const {
  bool value = (_has_bits_[4] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_ratio_confined_space() const {
  return _internal_has_ap_p_ratio_confined_space();
}
inline void FC_TRJPLA_Params::clear_ap_p_ratio_confined_space() {
  ap_p_ratio_confined_space_ = 0;
  _has_bits_[4] &= ~0x00000080u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_ratio_confined_space() const {
  return ap_p_ratio_confined_space_;
}
inline float FC_TRJPLA_Params::ap_p_ratio_confined_space() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_CONFINED_SPACE)
  return _internal_ap_p_ratio_confined_space();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_ratio_confined_space(float value) {
  _has_bits_[4] |= 0x00000080u;
  ap_p_ratio_confined_space_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_ratio_confined_space(float value) {
  _internal_set_ap_p_ratio_confined_space(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_RATIO_CONFINED_SPACE)
}

// optional float AP_P_MISALIGNED_START_POSE_ANGLE_RAD = 1897;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_misaligned_start_pose_angle_rad() const {
  bool value = (_has_bits_[3] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_misaligned_start_pose_angle_rad() const {
  return _internal_has_ap_p_misaligned_start_pose_angle_rad();
}
inline void FC_TRJPLA_Params::clear_ap_p_misaligned_start_pose_angle_rad() {
  ap_p_misaligned_start_pose_angle_rad_ = 0;
  _has_bits_[3] &= ~0x00000200u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_misaligned_start_pose_angle_rad() const {
  return ap_p_misaligned_start_pose_angle_rad_;
}
inline float FC_TRJPLA_Params::ap_p_misaligned_start_pose_angle_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MISALIGNED_START_POSE_ANGLE_RAD)
  return _internal_ap_p_misaligned_start_pose_angle_rad();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_misaligned_start_pose_angle_rad(float value) {
  _has_bits_[3] |= 0x00000200u;
  ap_p_misaligned_start_pose_angle_rad_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_misaligned_start_pose_angle_rad(float value) {
  _internal_set_ap_p_misaligned_start_pose_angle_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_MISALIGNED_START_POSE_ANGLE_RAD)
}

// optional float AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M = 3895;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_dist_to_pb_for_misal_start_pose_planning_m() const {
  bool value = (_has_bits_[5] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_dist_to_pb_for_misal_start_pose_planning_m() const {
  return _internal_has_ap_p_dist_to_pb_for_misal_start_pose_planning_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_dist_to_pb_for_misal_start_pose_planning_m() {
  ap_p_dist_to_pb_for_misal_start_pose_planning_m_ = 0;
  _has_bits_[5] &= ~0x00200000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_dist_to_pb_for_misal_start_pose_planning_m() const {
  return ap_p_dist_to_pb_for_misal_start_pose_planning_m_;
}
inline float FC_TRJPLA_Params::ap_p_dist_to_pb_for_misal_start_pose_planning_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M)
  return _internal_ap_p_dist_to_pb_for_misal_start_pose_planning_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_dist_to_pb_for_misal_start_pose_planning_m(float value) {
  _has_bits_[5] |= 0x00200000u;
  ap_p_dist_to_pb_for_misal_start_pose_planning_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_dist_to_pb_for_misal_start_pose_planning_m(float value) {
  _internal_set_ap_p_dist_to_pb_for_misal_start_pose_planning_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M)
}

// optional float AP_P_LENGTH_LONG_CLO_TRANSIT_M = 951;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_length_long_clo_transit_m() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_length_long_clo_transit_m() const {
  return _internal_has_ap_p_length_long_clo_transit_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_length_long_clo_transit_m() {
  ap_p_length_long_clo_transit_m_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_length_long_clo_transit_m() const {
  return ap_p_length_long_clo_transit_m_;
}
inline float FC_TRJPLA_Params::ap_p_length_long_clo_transit_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_LENGTH_LONG_CLO_TRANSIT_M)
  return _internal_ap_p_length_long_clo_transit_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_length_long_clo_transit_m(float value) {
  _has_bits_[1] |= 0x00008000u;
  ap_p_length_long_clo_transit_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_length_long_clo_transit_m(float value) {
  _internal_set_ap_p_length_long_clo_transit_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_LENGTH_LONG_CLO_TRANSIT_M)
}

// optional float AP_P_LENGTH_SHORT_CLO_TRANSIT_M = 1474;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_length_short_clo_transit_m() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_length_short_clo_transit_m() const {
  return _internal_has_ap_p_length_short_clo_transit_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_length_short_clo_transit_m() {
  ap_p_length_short_clo_transit_m_ = 0;
  _has_bits_[2] &= ~0x00010000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_length_short_clo_transit_m() const {
  return ap_p_length_short_clo_transit_m_;
}
inline float FC_TRJPLA_Params::ap_p_length_short_clo_transit_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_LENGTH_SHORT_CLO_TRANSIT_M)
  return _internal_ap_p_length_short_clo_transit_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_length_short_clo_transit_m(float value) {
  _has_bits_[2] |= 0x00010000u;
  ap_p_length_short_clo_transit_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_length_short_clo_transit_m(float value) {
  _internal_set_ap_p_length_short_clo_transit_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_LENGTH_SHORT_CLO_TRANSIT_M)
}

// optional bool AP_P_PARKOUT_ENABLE_FAKE_OBJECTS = 2997;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_enable_fake_objects() const {
  bool value = (_has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_enable_fake_objects() const {
  return _internal_has_ap_p_parkout_enable_fake_objects();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_enable_fake_objects() {
  ap_p_parkout_enable_fake_objects_ = false;
  _has_bits_[2] &= ~0x80000000u;
}
inline bool FC_TRJPLA_Params::_internal_ap_p_parkout_enable_fake_objects() const {
  return ap_p_parkout_enable_fake_objects_;
}
inline bool FC_TRJPLA_Params::ap_p_parkout_enable_fake_objects() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_ENABLE_FAKE_OBJECTS)
  return _internal_ap_p_parkout_enable_fake_objects();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_enable_fake_objects(bool value) {
  _has_bits_[2] |= 0x80000000u;
  ap_p_parkout_enable_fake_objects_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_enable_fake_objects(bool value) {
  _internal_set_ap_p_parkout_enable_fake_objects(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_ENABLE_FAKE_OBJECTS)
}

// optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M = 2861;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_ego_dist_to_fake_objects_par_m() const {
  bool value = (_has_bits_[4] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_ego_dist_to_fake_objects_par_m() const {
  return _internal_has_ap_p_parkout_ego_dist_to_fake_objects_par_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_ego_dist_to_fake_objects_par_m() {
  ap_p_parkout_ego_dist_to_fake_objects_par_m_ = 0;
  _has_bits_[4] &= ~0x00020000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_parkout_ego_dist_to_fake_objects_par_m() const {
  return ap_p_parkout_ego_dist_to_fake_objects_par_m_;
}
inline float FC_TRJPLA_Params::ap_p_parkout_ego_dist_to_fake_objects_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M)
  return _internal_ap_p_parkout_ego_dist_to_fake_objects_par_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_ego_dist_to_fake_objects_par_m(float value) {
  _has_bits_[4] |= 0x00020000u;
  ap_p_parkout_ego_dist_to_fake_objects_par_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_ego_dist_to_fake_objects_par_m(float value) {
  _internal_set_ap_p_parkout_ego_dist_to_fake_objects_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M)
}

// optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M = 1316;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_ego_dist_to_fake_objects_perp_m() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_ego_dist_to_fake_objects_perp_m() const {
  return _internal_has_ap_p_parkout_ego_dist_to_fake_objects_perp_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_ego_dist_to_fake_objects_perp_m() {
  ap_p_parkout_ego_dist_to_fake_objects_perp_m_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_parkout_ego_dist_to_fake_objects_perp_m() const {
  return ap_p_parkout_ego_dist_to_fake_objects_perp_m_;
}
inline float FC_TRJPLA_Params::ap_p_parkout_ego_dist_to_fake_objects_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M)
  return _internal_ap_p_parkout_ego_dist_to_fake_objects_perp_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_ego_dist_to_fake_objects_perp_m(float value) {
  _has_bits_[2] |= 0x00000080u;
  ap_p_parkout_ego_dist_to_fake_objects_perp_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_ego_dist_to_fake_objects_perp_m(float value) {
  _internal_set_ap_p_parkout_ego_dist_to_fake_objects_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M)
}

// optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M = 2395;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_ego_dist_to_fake_objects_ang_m() const {
  bool value = (_has_bits_[3] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_ego_dist_to_fake_objects_ang_m() const {
  return _internal_has_ap_p_parkout_ego_dist_to_fake_objects_ang_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_ego_dist_to_fake_objects_ang_m() {
  ap_p_parkout_ego_dist_to_fake_objects_ang_m_ = 0;
  _has_bits_[3] &= ~0x08000000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_parkout_ego_dist_to_fake_objects_ang_m() const {
  return ap_p_parkout_ego_dist_to_fake_objects_ang_m_;
}
inline float FC_TRJPLA_Params::ap_p_parkout_ego_dist_to_fake_objects_ang_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M)
  return _internal_ap_p_parkout_ego_dist_to_fake_objects_ang_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_ego_dist_to_fake_objects_ang_m(float value) {
  _has_bits_[3] |= 0x08000000u;
  ap_p_parkout_ego_dist_to_fake_objects_ang_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_ego_dist_to_fake_objects_ang_m(float value) {
  _internal_set_ap_p_parkout_ego_dist_to_fake_objects_ang_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M)
}

// optional float AP_P_PARKOUT_BLIND_DISTANCE_PERP_M = 2794;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_blind_distance_perp_m() const {
  bool value = (_has_bits_[4] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_blind_distance_perp_m() const {
  return _internal_has_ap_p_parkout_blind_distance_perp_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_blind_distance_perp_m() {
  ap_p_parkout_blind_distance_perp_m_ = 0;
  _has_bits_[4] &= ~0x00002000u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_parkout_blind_distance_perp_m() const {
  return ap_p_parkout_blind_distance_perp_m_;
}
inline float FC_TRJPLA_Params::ap_p_parkout_blind_distance_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_BLIND_DISTANCE_PERP_M)
  return _internal_ap_p_parkout_blind_distance_perp_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_blind_distance_perp_m(float value) {
  _has_bits_[4] |= 0x00002000u;
  ap_p_parkout_blind_distance_perp_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_blind_distance_perp_m(float value) {
  _internal_set_ap_p_parkout_blind_distance_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_BLIND_DISTANCE_PERP_M)
}

// optional float AP_P_PARKOUT_BLIND_DISTANCE_ANG_M = 1813;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_blind_distance_ang_m() const {
  bool value = (_has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_blind_distance_ang_m() const {
  return _internal_has_ap_p_parkout_blind_distance_ang_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_blind_distance_ang_m() {
  ap_p_parkout_blind_distance_ang_m_ = 0;
  _has_bits_[3] &= ~0x00000040u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_parkout_blind_distance_ang_m() const {
  return ap_p_parkout_blind_distance_ang_m_;
}
inline float FC_TRJPLA_Params::ap_p_parkout_blind_distance_ang_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_BLIND_DISTANCE_ANG_M)
  return _internal_ap_p_parkout_blind_distance_ang_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_blind_distance_ang_m(float value) {
  _has_bits_[3] |= 0x00000040u;
  ap_p_parkout_blind_distance_ang_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_blind_distance_ang_m(float value) {
  _internal_set_ap_p_parkout_blind_distance_ang_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_BLIND_DISTANCE_ANG_M)
}

// optional float AP_P_PARKOUT_BLIND_DISTANCE_PAR_M = 1379;
inline bool FC_TRJPLA_Params::_internal_has_ap_p_parkout_blind_distance_par_m() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_ap_p_parkout_blind_distance_par_m() const {
  return _internal_has_ap_p_parkout_blind_distance_par_m();
}
inline void FC_TRJPLA_Params::clear_ap_p_parkout_blind_distance_par_m() {
  ap_p_parkout_blind_distance_par_m_ = 0;
  _has_bits_[2] &= ~0x00000400u;
}
inline float FC_TRJPLA_Params::_internal_ap_p_parkout_blind_distance_par_m() const {
  return ap_p_parkout_blind_distance_par_m_;
}
inline float FC_TRJPLA_Params::ap_p_parkout_blind_distance_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_BLIND_DISTANCE_PAR_M)
  return _internal_ap_p_parkout_blind_distance_par_m();
}
inline void FC_TRJPLA_Params::_internal_set_ap_p_parkout_blind_distance_par_m(float value) {
  _has_bits_[2] |= 0x00000400u;
  ap_p_parkout_blind_distance_par_m_ = value;
}
inline void FC_TRJPLA_Params::set_ap_p_parkout_blind_distance_par_m(float value) {
  _internal_set_ap_p_parkout_blind_distance_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.AP_P_PARKOUT_BLIND_DISTANCE_PAR_M)
}

// optional .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params taposdParams = 236;
inline bool FC_TRJPLA_Params::_internal_has_taposdparams() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || taposdparams_ != nullptr);
  return value;
}
inline bool FC_TRJPLA_Params::has_taposdparams() const {
  return _internal_has_taposdparams();
}
inline const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& FC_TRJPLA_Params::_internal_taposdparams() const {
  const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* p = taposdparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params*>(
      &::pb::ap_tp::fc_taposd_params::_FC_TAPOSD_Params_default_instance_);
}
inline const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& FC_TRJPLA_Params::taposdparams() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.taposdParams)
  return _internal_taposdparams();
}
inline ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* FC_TRJPLA_Params::release_taposdparams() {
  // @@protoc_insertion_point(field_release:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.taposdParams)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* temp = taposdparams_;
  taposdparams_ = nullptr;
  return temp;
}
inline ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* FC_TRJPLA_Params::_internal_mutable_taposdparams() {
  _has_bits_[0] |= 0x00000001u;
  if (taposdparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params>(GetArenaNoVirtual());
    taposdparams_ = p;
  }
  return taposdparams_;
}
inline ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* FC_TRJPLA_Params::mutable_taposdparams() {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.taposdParams)
  return _internal_mutable_taposdparams();
}
inline void FC_TRJPLA_Params::set_allocated_taposdparams(::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params* taposdparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(taposdparams_);
  }
  if (taposdparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      taposdparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taposdparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  taposdparams_ = taposdparams;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.taposdParams)
}

// optional .pb.ap_common.fc_trjpla_vehicle_params.FC_TRJPLA_Vehicle_Params vehicleParams = 2431;
inline bool FC_TRJPLA_Params::_internal_has_vehicleparams() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || vehicleparams_ != nullptr);
  return value;
}
inline bool FC_TRJPLA_Params::has_vehicleparams() const {
  return _internal_has_vehicleparams();
}
inline const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params& FC_TRJPLA_Params::_internal_vehicleparams() const {
  const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* p = vehicleparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params*>(
      &::pb::ap_common::fc_trjpla_vehicle_params::_FC_TRJPLA_Vehicle_Params_default_instance_);
}
inline const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params& FC_TRJPLA_Params::vehicleparams() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.vehicleParams)
  return _internal_vehicleparams();
}
inline ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* FC_TRJPLA_Params::release_vehicleparams() {
  // @@protoc_insertion_point(field_release:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.vehicleParams)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* temp = vehicleparams_;
  vehicleparams_ = nullptr;
  return temp;
}
inline ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* FC_TRJPLA_Params::_internal_mutable_vehicleparams() {
  _has_bits_[0] |= 0x00000008u;
  if (vehicleparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params>(GetArenaNoVirtual());
    vehicleparams_ = p;
  }
  return vehicleparams_;
}
inline ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* FC_TRJPLA_Params::mutable_vehicleparams() {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.vehicleParams)
  return _internal_mutable_vehicleparams();
}
inline void FC_TRJPLA_Params::set_allocated_vehicleparams(::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params* vehicleparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicleparams_);
  }
  if (vehicleparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicleparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicleparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vehicleparams_ = vehicleparams;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.vehicleParams)
}

// optional .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params sysFuncParams = 458;
inline bool FC_TRJPLA_Params::_internal_has_sysfuncparams() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sysfuncparams_ != nullptr);
  return value;
}
inline bool FC_TRJPLA_Params::has_sysfuncparams() const {
  return _internal_has_sysfuncparams();
}
inline const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& FC_TRJPLA_Params::_internal_sysfuncparams() const {
  const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* p = sysfuncparams_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params*>(
      &::pb::ap_common::fc_trjpla_sys_func_params::_FC_TRJPLA_Sys_Func_Params_default_instance_);
}
inline const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& FC_TRJPLA_Params::sysfuncparams() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sysFuncParams)
  return _internal_sysfuncparams();
}
inline ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* FC_TRJPLA_Params::release_sysfuncparams() {
  // @@protoc_insertion_point(field_release:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sysFuncParams)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* temp = sysfuncparams_;
  sysfuncparams_ = nullptr;
  return temp;
}
inline ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* FC_TRJPLA_Params::_internal_mutable_sysfuncparams() {
  _has_bits_[0] |= 0x00000002u;
  if (sysfuncparams_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params>(GetArenaNoVirtual());
    sysfuncparams_ = p;
  }
  return sysfuncparams_;
}
inline ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* FC_TRJPLA_Params::mutable_sysfuncparams() {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sysFuncParams)
  return _internal_mutable_sysfuncparams();
}
inline void FC_TRJPLA_Params::set_allocated_sysfuncparams(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* sysfuncparams) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sysfuncparams_);
  }
  if (sysfuncparams) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sysfuncparams = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sysfuncparams, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sysfuncparams_ = sysfuncparams;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.sysFuncParams)
}

// optional float MP_P_ROI_EDGE_LENGTH_M = 373;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_edge_length_m() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_edge_length_m() const {
  return _internal_has_mp_p_roi_edge_length_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_edge_length_m() {
  mp_p_roi_edge_length_m_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_edge_length_m() const {
  return mp_p_roi_edge_length_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_edge_length_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_EDGE_LENGTH_M)
  return _internal_mp_p_roi_edge_length_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_edge_length_m(float value) {
  _has_bits_[0] |= 0x00800000u;
  mp_p_roi_edge_length_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_edge_length_m(float value) {
  _internal_set_mp_p_roi_edge_length_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_EDGE_LENGTH_M)
}

// optional float MP_P_ROI_CORNER_X_PAR_IN_M = 8258625;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_par_in_m() const {
  bool value = (_has_bits_[5] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_par_in_m() const {
  return _internal_has_mp_p_roi_corner_x_par_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_par_in_m() {
  mp_p_roi_corner_x_par_in_m_ = 0;
  _has_bits_[5] &= ~0x08000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_par_in_m() const {
  return mp_p_roi_corner_x_par_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_par_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_IN_M)
  return _internal_mp_p_roi_corner_x_par_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_par_in_m(float value) {
  _has_bits_[5] |= 0x08000000u;
  mp_p_roi_corner_x_par_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_par_in_m(float value) {
  _internal_set_mp_p_roi_corner_x_par_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_IN_M)
}

// optional float MP_P_ROI_CORNER_Y_PAR_IN_M = 3130;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_par_in_m() const {
  bool value = (_has_bits_[4] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_par_in_m() const {
  return _internal_has_mp_p_roi_corner_y_par_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_par_in_m() {
  mp_p_roi_corner_y_par_in_m_ = 0;
  _has_bits_[4] &= ~0x10000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_par_in_m() const {
  return mp_p_roi_corner_y_par_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_par_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_IN_M)
  return _internal_mp_p_roi_corner_y_par_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_par_in_m(float value) {
  _has_bits_[4] |= 0x10000000u;
  mp_p_roi_corner_y_par_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_par_in_m(float value) {
  _internal_set_mp_p_roi_corner_y_par_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_IN_M)
}

// optional float MP_P_ROI_CORNER_X_PRPF_IN_M = 3348;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpf_in_m() const {
  bool value = (_has_bits_[5] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpf_in_m() const {
  return _internal_has_mp_p_roi_corner_x_prpf_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpf_in_m() {
  mp_p_roi_corner_x_prpf_in_m_ = 0;
  _has_bits_[5] &= ~0x00000001u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpf_in_m() const {
  return mp_p_roi_corner_x_prpf_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpf_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_IN_M)
  return _internal_mp_p_roi_corner_x_prpf_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpf_in_m(float value) {
  _has_bits_[5] |= 0x00000001u;
  mp_p_roi_corner_x_prpf_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpf_in_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpf_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_IN_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPF_IN_M = 1373;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpf_in_m() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpf_in_m() const {
  return _internal_has_mp_p_roi_corner_y_prpf_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpf_in_m() {
  mp_p_roi_corner_y_prpf_in_m_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpf_in_m() const {
  return mp_p_roi_corner_y_prpf_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpf_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_IN_M)
  return _internal_mp_p_roi_corner_y_prpf_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpf_in_m(float value) {
  _has_bits_[2] |= 0x00000200u;
  mp_p_roi_corner_y_prpf_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpf_in_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpf_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_IN_M)
}

// optional float MP_P_ROI_CORNER_X_PRPB_IN_M = 10939324;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpb_in_m() const {
  bool value = (_has_bits_[5] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpb_in_m() const {
  return _internal_has_mp_p_roi_corner_x_prpb_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpb_in_m() {
  mp_p_roi_corner_x_prpb_in_m_ = 0;
  _has_bits_[5] &= ~0x10000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpb_in_m() const {
  return mp_p_roi_corner_x_prpb_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpb_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_IN_M)
  return _internal_mp_p_roi_corner_x_prpb_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpb_in_m(float value) {
  _has_bits_[5] |= 0x10000000u;
  mp_p_roi_corner_x_prpb_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpb_in_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpb_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_IN_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPB_IN_M = 1020;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpb_in_m() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpb_in_m() const {
  return _internal_has_mp_p_roi_corner_y_prpb_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpb_in_m() {
  mp_p_roi_corner_y_prpb_in_m_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpb_in_m() const {
  return mp_p_roi_corner_y_prpb_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpb_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_IN_M)
  return _internal_mp_p_roi_corner_y_prpb_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpb_in_m(float value) {
  _has_bits_[1] |= 0x02000000u;
  mp_p_roi_corner_y_prpb_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpb_in_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpb_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_IN_M)
}

// optional float MP_P_ROI_CORNER_X_ANGS_IN_M = 3696;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angs_in_m() const {
  bool value = (_has_bits_[5] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angs_in_m() const {
  return _internal_has_mp_p_roi_corner_x_angs_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angs_in_m() {
  mp_p_roi_corner_x_angs_in_m_ = 0;
  _has_bits_[5] &= ~0x00020000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angs_in_m() const {
  return mp_p_roi_corner_x_angs_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angs_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_IN_M)
  return _internal_mp_p_roi_corner_x_angs_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angs_in_m(float value) {
  _has_bits_[5] |= 0x00020000u;
  mp_p_roi_corner_x_angs_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angs_in_m(float value) {
  _internal_set_mp_p_roi_corner_x_angs_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_IN_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGS_IN_M = 1593;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angs_in_m() const {
  bool value = (_has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angs_in_m() const {
  return _internal_has_mp_p_roi_corner_y_angs_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angs_in_m() {
  mp_p_roi_corner_y_angs_in_m_ = 0;
  _has_bits_[2] &= ~0x08000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angs_in_m() const {
  return mp_p_roi_corner_y_angs_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angs_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_IN_M)
  return _internal_mp_p_roi_corner_y_angs_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angs_in_m(float value) {
  _has_bits_[2] |= 0x08000000u;
  mp_p_roi_corner_y_angs_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angs_in_m(float value) {
  _internal_set_mp_p_roi_corner_y_angs_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_IN_M)
}

// optional float MP_P_ROI_CORNER_X_ANGR_IN_M = 3024;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angr_in_m() const {
  bool value = (_has_bits_[4] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angr_in_m() const {
  return _internal_has_mp_p_roi_corner_x_angr_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angr_in_m() {
  mp_p_roi_corner_x_angr_in_m_ = 0;
  _has_bits_[4] &= ~0x00400000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angr_in_m() const {
  return mp_p_roi_corner_x_angr_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angr_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_IN_M)
  return _internal_mp_p_roi_corner_x_angr_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angr_in_m(float value) {
  _has_bits_[4] |= 0x00400000u;
  mp_p_roi_corner_x_angr_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angr_in_m(float value) {
  _internal_set_mp_p_roi_corner_x_angr_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_IN_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGR_IN_M = 3222586;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angr_in_m() const {
  bool value = (_has_bits_[5] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angr_in_m() const {
  return _internal_has_mp_p_roi_corner_y_angr_in_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angr_in_m() {
  mp_p_roi_corner_y_angr_in_m_ = 0;
  _has_bits_[5] &= ~0x04000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angr_in_m() const {
  return mp_p_roi_corner_y_angr_in_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angr_in_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_IN_M)
  return _internal_mp_p_roi_corner_y_angr_in_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angr_in_m(float value) {
  _has_bits_[5] |= 0x04000000u;
  mp_p_roi_corner_y_angr_in_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angr_in_m(float value) {
  _internal_set_mp_p_roi_corner_y_angr_in_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_IN_M)
}

// optional float MP_P_ROI_CORNER_X_PAR_OUT_M = 3645;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_par_out_m() const {
  bool value = (_has_bits_[5] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_par_out_m() const {
  return _internal_has_mp_p_roi_corner_x_par_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_par_out_m() {
  mp_p_roi_corner_x_par_out_m_ = 0;
  _has_bits_[5] &= ~0x00004000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_par_out_m() const {
  return mp_p_roi_corner_x_par_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_par_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_OUT_M)
  return _internal_mp_p_roi_corner_x_par_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_par_out_m(float value) {
  _has_bits_[5] |= 0x00004000u;
  mp_p_roi_corner_x_par_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_par_out_m(float value) {
  _internal_set_mp_p_roi_corner_x_par_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_OUT_M)
}

// optional float MP_P_ROI_CORNER_Y_PAR_OUT_M = 1652;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_par_out_m() const {
  bool value = (_has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_par_out_m() const {
  return _internal_has_mp_p_roi_corner_y_par_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_par_out_m() {
  mp_p_roi_corner_y_par_out_m_ = 0;
  _has_bits_[3] &= ~0x00000001u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_par_out_m() const {
  return mp_p_roi_corner_y_par_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_par_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_OUT_M)
  return _internal_mp_p_roi_corner_y_par_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_par_out_m(float value) {
  _has_bits_[3] |= 0x00000001u;
  mp_p_roi_corner_y_par_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_par_out_m(float value) {
  _internal_set_mp_p_roi_corner_y_par_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_OUT_M)
}

// optional float MP_P_ROI_CORNER_X_PRPF_OUT_M = 1403;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpf_out_m() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpf_out_m() const {
  return _internal_has_mp_p_roi_corner_x_prpf_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpf_out_m() {
  mp_p_roi_corner_x_prpf_out_m_ = 0;
  _has_bits_[2] &= ~0x00002000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpf_out_m() const {
  return mp_p_roi_corner_x_prpf_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpf_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_OUT_M)
  return _internal_mp_p_roi_corner_x_prpf_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpf_out_m(float value) {
  _has_bits_[2] |= 0x00002000u;
  mp_p_roi_corner_x_prpf_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpf_out_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpf_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_OUT_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPF_OUT_M = 1550;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpf_out_m() const {
  bool value = (_has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpf_out_m() const {
  return _internal_has_mp_p_roi_corner_y_prpf_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpf_out_m() {
  mp_p_roi_corner_y_prpf_out_m_ = 0;
  _has_bits_[2] &= ~0x00800000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpf_out_m() const {
  return mp_p_roi_corner_y_prpf_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpf_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_OUT_M)
  return _internal_mp_p_roi_corner_y_prpf_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpf_out_m(float value) {
  _has_bits_[2] |= 0x00800000u;
  mp_p_roi_corner_y_prpf_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpf_out_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpf_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_OUT_M)
}

// optional float MP_P_ROI_CORNER_X_PRPB_OUT_M = 1213;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpb_out_m() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpb_out_m() const {
  return _internal_has_mp_p_roi_corner_x_prpb_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpb_out_m() {
  mp_p_roi_corner_x_prpb_out_m_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpb_out_m() const {
  return mp_p_roi_corner_x_prpb_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpb_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_OUT_M)
  return _internal_mp_p_roi_corner_x_prpb_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpb_out_m(float value) {
  _has_bits_[1] |= 0x80000000u;
  mp_p_roi_corner_x_prpb_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpb_out_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpb_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_OUT_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPB_OUT_M = 1992;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpb_out_m() const {
  bool value = (_has_bits_[3] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpb_out_m() const {
  return _internal_has_mp_p_roi_corner_y_prpb_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpb_out_m() {
  mp_p_roi_corner_y_prpb_out_m_ = 0;
  _has_bits_[3] &= ~0x00004000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpb_out_m() const {
  return mp_p_roi_corner_y_prpb_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpb_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_OUT_M)
  return _internal_mp_p_roi_corner_y_prpb_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpb_out_m(float value) {
  _has_bits_[3] |= 0x00004000u;
  mp_p_roi_corner_y_prpb_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpb_out_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpb_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_OUT_M)
}

// optional float MP_P_ROI_CORNER_X_ANGS_OUT_M = 3126;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angs_out_m() const {
  bool value = (_has_bits_[4] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angs_out_m() const {
  return _internal_has_mp_p_roi_corner_x_angs_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angs_out_m() {
  mp_p_roi_corner_x_angs_out_m_ = 0;
  _has_bits_[4] &= ~0x08000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angs_out_m() const {
  return mp_p_roi_corner_x_angs_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angs_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_OUT_M)
  return _internal_mp_p_roi_corner_x_angs_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angs_out_m(float value) {
  _has_bits_[4] |= 0x08000000u;
  mp_p_roi_corner_x_angs_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angs_out_m(float value) {
  _internal_set_mp_p_roi_corner_x_angs_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_OUT_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGS_OUT_M = 3907;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angs_out_m() const {
  bool value = (_has_bits_[5] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angs_out_m() const {
  return _internal_has_mp_p_roi_corner_y_angs_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angs_out_m() {
  mp_p_roi_corner_y_angs_out_m_ = 0;
  _has_bits_[5] &= ~0x00400000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angs_out_m() const {
  return mp_p_roi_corner_y_angs_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angs_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_OUT_M)
  return _internal_mp_p_roi_corner_y_angs_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angs_out_m(float value) {
  _has_bits_[5] |= 0x00400000u;
  mp_p_roi_corner_y_angs_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angs_out_m(float value) {
  _internal_set_mp_p_roi_corner_y_angs_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_OUT_M)
}

// optional float MP_P_ROI_CORNER_X_ANGR_OUT_M = 1111;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angr_out_m() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angr_out_m() const {
  return _internal_has_mp_p_roi_corner_x_angr_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angr_out_m() {
  mp_p_roi_corner_x_angr_out_m_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angr_out_m() const {
  return mp_p_roi_corner_x_angr_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angr_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_OUT_M)
  return _internal_mp_p_roi_corner_x_angr_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angr_out_m(float value) {
  _has_bits_[1] |= 0x10000000u;
  mp_p_roi_corner_x_angr_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angr_out_m(float value) {
  _internal_set_mp_p_roi_corner_x_angr_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_OUT_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGR_OUT_M = 1826;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angr_out_m() const {
  bool value = (_has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angr_out_m() const {
  return _internal_has_mp_p_roi_corner_y_angr_out_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angr_out_m() {
  mp_p_roi_corner_y_angr_out_m_ = 0;
  _has_bits_[3] &= ~0x00000080u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angr_out_m() const {
  return mp_p_roi_corner_y_angr_out_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angr_out_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_OUT_M)
  return _internal_mp_p_roi_corner_y_angr_out_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angr_out_m(float value) {
  _has_bits_[3] |= 0x00000080u;
  mp_p_roi_corner_y_angr_out_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angr_out_m(float value) {
  _internal_set_mp_p_roi_corner_y_angr_out_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_OUT_M)
}

// optional float MP_P_ROI_CORNER_X_PAR_IN_OP_M = 2277;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_par_in_op_m() const {
  bool value = (_has_bits_[3] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_par_in_op_m() const {
  return _internal_has_mp_p_roi_corner_x_par_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_par_in_op_m() {
  mp_p_roi_corner_x_par_in_op_m_ = 0;
  _has_bits_[3] &= ~0x02000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_par_in_op_m() const {
  return mp_p_roi_corner_x_par_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_par_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_IN_OP_M)
  return _internal_mp_p_roi_corner_x_par_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_par_in_op_m(float value) {
  _has_bits_[3] |= 0x02000000u;
  mp_p_roi_corner_x_par_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_par_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_par_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_PAR_IN_OP_M = 3462;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_par_in_op_m() const {
  bool value = (_has_bits_[5] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_par_in_op_m() const {
  return _internal_has_mp_p_roi_corner_y_par_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_par_in_op_m() {
  mp_p_roi_corner_y_par_in_op_m_ = 0;
  _has_bits_[5] &= ~0x00000080u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_par_in_op_m() const {
  return mp_p_roi_corner_y_par_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_par_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_IN_OP_M)
  return _internal_mp_p_roi_corner_y_par_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_par_in_op_m(float value) {
  _has_bits_[5] |= 0x00000080u;
  mp_p_roi_corner_y_par_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_par_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_par_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_X_PRPF_IN_OP_M = 3950;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpf_in_op_m() const {
  bool value = (_has_bits_[5] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpf_in_op_m() const {
  return _internal_has_mp_p_roi_corner_x_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpf_in_op_m() {
  mp_p_roi_corner_x_prpf_in_op_m_ = 0;
  _has_bits_[5] &= ~0x00800000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpf_in_op_m() const {
  return mp_p_roi_corner_x_prpf_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpf_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_IN_OP_M)
  return _internal_mp_p_roi_corner_x_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpf_in_op_m(float value) {
  _has_bits_[5] |= 0x00800000u;
  mp_p_roi_corner_x_prpf_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpf_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpf_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 1039;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpf_in_op_m() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpf_in_op_m() const {
  return _internal_has_mp_p_roi_corner_y_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpf_in_op_m() {
  mp_p_roi_corner_y_prpf_in_op_m_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpf_in_op_m() const {
  return mp_p_roi_corner_y_prpf_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpf_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_IN_OP_M)
  return _internal_mp_p_roi_corner_y_prpf_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpf_in_op_m(float value) {
  _has_bits_[1] |= 0x04000000u;
  mp_p_roi_corner_y_prpf_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpf_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpf_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_X_PRPB_IN_OP_M = 897;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpb_in_op_m() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpb_in_op_m() const {
  return _internal_has_mp_p_roi_corner_x_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpb_in_op_m() {
  mp_p_roi_corner_x_prpb_in_op_m_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpb_in_op_m() const {
  return mp_p_roi_corner_x_prpb_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpb_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_IN_OP_M)
  return _internal_mp_p_roi_corner_x_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpb_in_op_m(float value) {
  _has_bits_[1] |= 0x00001000u;
  mp_p_roi_corner_x_prpb_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpb_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpb_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 2272;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpb_in_op_m() const {
  bool value = (_has_bits_[3] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpb_in_op_m() const {
  return _internal_has_mp_p_roi_corner_y_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpb_in_op_m() {
  mp_p_roi_corner_y_prpb_in_op_m_ = 0;
  _has_bits_[3] &= ~0x01000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpb_in_op_m() const {
  return mp_p_roi_corner_y_prpb_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpb_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_IN_OP_M)
  return _internal_mp_p_roi_corner_y_prpb_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpb_in_op_m(float value) {
  _has_bits_[3] |= 0x01000000u;
  mp_p_roi_corner_y_prpb_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpb_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpb_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_X_ANGS_IN_OP_M = 481;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angs_in_op_m() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angs_in_op_m() const {
  return _internal_has_mp_p_roi_corner_x_angs_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angs_in_op_m() {
  mp_p_roi_corner_x_angs_in_op_m_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angs_in_op_m() const {
  return mp_p_roi_corner_x_angs_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angs_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_IN_OP_M)
  return _internal_mp_p_roi_corner_x_angs_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angs_in_op_m(float value) {
  _has_bits_[0] |= 0x08000000u;
  mp_p_roi_corner_x_angs_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angs_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_angs_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 2688;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angs_in_op_m() const {
  bool value = (_has_bits_[4] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angs_in_op_m() const {
  return _internal_has_mp_p_roi_corner_y_angs_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angs_in_op_m() {
  mp_p_roi_corner_y_angs_in_op_m_ = 0;
  _has_bits_[4] &= ~0x00000100u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angs_in_op_m() const {
  return mp_p_roi_corner_y_angs_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angs_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_IN_OP_M)
  return _internal_mp_p_roi_corner_y_angs_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angs_in_op_m(float value) {
  _has_bits_[4] |= 0x00000100u;
  mp_p_roi_corner_y_angs_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angs_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_angs_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_X_ANGR_IN_OP_M = 2754;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angr_in_op_m() const {
  bool value = (_has_bits_[4] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angr_in_op_m() const {
  return _internal_has_mp_p_roi_corner_x_angr_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angr_in_op_m() {
  mp_p_roi_corner_x_angr_in_op_m_ = 0;
  _has_bits_[4] &= ~0x00000400u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angr_in_op_m() const {
  return mp_p_roi_corner_x_angr_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angr_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_IN_OP_M)
  return _internal_mp_p_roi_corner_x_angr_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angr_in_op_m(float value) {
  _has_bits_[4] |= 0x00000400u;
  mp_p_roi_corner_x_angr_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angr_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_angr_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 419;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angr_in_op_m() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angr_in_op_m() const {
  return _internal_has_mp_p_roi_corner_y_angr_in_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angr_in_op_m() {
  mp_p_roi_corner_y_angr_in_op_m_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angr_in_op_m() const {
  return mp_p_roi_corner_y_angr_in_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angr_in_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_IN_OP_M)
  return _internal_mp_p_roi_corner_y_angr_in_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angr_in_op_m(float value) {
  _has_bits_[0] |= 0x02000000u;
  mp_p_roi_corner_y_angr_in_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angr_in_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_angr_in_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_IN_OP_M)
}

// optional float MP_P_ROI_CORNER_X_PAR_OUT_OP_M = 2339;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_par_out_op_m() const {
  bool value = (_has_bits_[3] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_par_out_op_m() const {
  return _internal_has_mp_p_roi_corner_x_par_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_par_out_op_m() {
  mp_p_roi_corner_x_par_out_op_m_ = 0;
  _has_bits_[3] &= ~0x04000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_par_out_op_m() const {
  return mp_p_roi_corner_x_par_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_par_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_OUT_OP_M)
  return _internal_mp_p_roi_corner_x_par_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_par_out_op_m(float value) {
  _has_bits_[3] |= 0x04000000u;
  mp_p_roi_corner_x_par_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_par_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_par_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PAR_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 578;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_par_out_op_m() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_par_out_op_m() const {
  return _internal_has_mp_p_roi_corner_y_par_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_par_out_op_m() {
  mp_p_roi_corner_y_par_out_op_m_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_par_out_op_m() const {
  return mp_p_roi_corner_y_par_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_par_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_OUT_OP_M)
  return _internal_mp_p_roi_corner_y_par_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_par_out_op_m(float value) {
  _has_bits_[0] |= 0x20000000u;
  mp_p_roi_corner_y_par_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_par_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_par_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PAR_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 238;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpb_out_op_m() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpb_out_op_m() const {
  return _internal_has_mp_p_roi_corner_x_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpb_out_op_m() {
  mp_p_roi_corner_x_prpb_out_op_m_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpb_out_op_m() const {
  return mp_p_roi_corner_x_prpb_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpb_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_OUT_OP_M)
  return _internal_mp_p_roi_corner_x_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpb_out_op_m(float value) {
  _has_bits_[0] |= 0x00008000u;
  mp_p_roi_corner_x_prpb_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpb_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpb_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPB_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 3602;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpb_out_op_m() const {
  bool value = (_has_bits_[5] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpb_out_op_m() const {
  return _internal_has_mp_p_roi_corner_y_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpb_out_op_m() {
  mp_p_roi_corner_y_prpb_out_op_m_ = 0;
  _has_bits_[5] &= ~0x00001000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpb_out_op_m() const {
  return mp_p_roi_corner_y_prpb_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpb_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M)
  return _internal_mp_p_roi_corner_y_prpb_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpb_out_op_m(float value) {
  _has_bits_[5] |= 0x00001000u;
  mp_p_roi_corner_y_prpb_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpb_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpb_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 3547;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_prpf_out_op_m() const {
  bool value = (_has_bits_[5] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_prpf_out_op_m() const {
  return _internal_has_mp_p_roi_corner_x_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_prpf_out_op_m() {
  mp_p_roi_corner_x_prpf_out_op_m_ = 0;
  _has_bits_[5] &= ~0x00000800u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_prpf_out_op_m() const {
  return mp_p_roi_corner_x_prpf_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_prpf_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_OUT_OP_M)
  return _internal_mp_p_roi_corner_x_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_prpf_out_op_m(float value) {
  _has_bits_[5] |= 0x00000800u;
  mp_p_roi_corner_x_prpf_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_prpf_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_prpf_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_PRPF_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 807;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_prpf_out_op_m() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_prpf_out_op_m() const {
  return _internal_has_mp_p_roi_corner_y_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_prpf_out_op_m() {
  mp_p_roi_corner_y_prpf_out_op_m_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_prpf_out_op_m() const {
  return mp_p_roi_corner_y_prpf_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_prpf_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M)
  return _internal_mp_p_roi_corner_y_prpf_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_prpf_out_op_m(float value) {
  _has_bits_[1] |= 0x00000020u;
  mp_p_roi_corner_y_prpf_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_prpf_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_prpf_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 1350;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angs_out_op_m() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angs_out_op_m() const {
  return _internal_has_mp_p_roi_corner_x_angs_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angs_out_op_m() {
  mp_p_roi_corner_x_angs_out_op_m_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angs_out_op_m() const {
  return mp_p_roi_corner_x_angs_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angs_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_OUT_OP_M)
  return _internal_mp_p_roi_corner_x_angs_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angs_out_op_m(float value) {
  _has_bits_[2] |= 0x00000100u;
  mp_p_roi_corner_x_angs_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angs_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_angs_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGS_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 3002;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angs_out_op_m() const {
  bool value = (_has_bits_[4] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angs_out_op_m() const {
  return _internal_has_mp_p_roi_corner_y_angs_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angs_out_op_m() {
  mp_p_roi_corner_y_angs_out_op_m_ = 0;
  _has_bits_[4] &= ~0x00200000u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angs_out_op_m() const {
  return mp_p_roi_corner_y_angs_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angs_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M)
  return _internal_mp_p_roi_corner_y_angs_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angs_out_op_m(float value) {
  _has_bits_[4] |= 0x00200000u;
  mp_p_roi_corner_y_angs_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angs_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_angs_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 2563;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_x_angr_out_op_m() const {
  bool value = (_has_bits_[4] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_x_angr_out_op_m() const {
  return _internal_has_mp_p_roi_corner_x_angr_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_x_angr_out_op_m() {
  mp_p_roi_corner_x_angr_out_op_m_ = 0;
  _has_bits_[4] &= ~0x00000008u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_x_angr_out_op_m() const {
  return mp_p_roi_corner_x_angr_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_x_angr_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_OUT_OP_M)
  return _internal_mp_p_roi_corner_x_angr_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_x_angr_out_op_m(float value) {
  _has_bits_[4] |= 0x00000008u;
  mp_p_roi_corner_x_angr_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_x_angr_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_x_angr_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_X_ANGR_OUT_OP_M)
}

// optional float MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 1279;
inline bool FC_TRJPLA_Params::_internal_has_mp_p_roi_corner_y_angr_out_op_m() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Params::has_mp_p_roi_corner_y_angr_out_op_m() const {
  return _internal_has_mp_p_roi_corner_y_angr_out_op_m();
}
inline void FC_TRJPLA_Params::clear_mp_p_roi_corner_y_angr_out_op_m() {
  mp_p_roi_corner_y_angr_out_op_m_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline float FC_TRJPLA_Params::_internal_mp_p_roi_corner_y_angr_out_op_m() const {
  return mp_p_roi_corner_y_angr_out_op_m_;
}
inline float FC_TRJPLA_Params::mp_p_roi_corner_y_angr_out_op_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M)
  return _internal_mp_p_roi_corner_y_angr_out_op_m();
}
inline void FC_TRJPLA_Params::_internal_set_mp_p_roi_corner_y_angr_out_op_m(float value) {
  _has_bits_[2] |= 0x00000010u;
  mp_p_roi_corner_y_angr_out_op_m_ = value;
}
inline void FC_TRJPLA_Params::set_mp_p_roi_corner_y_angr_out_op_m(float value) {
  _internal_set_mp_p_roi_corner_y_angr_out_op_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params.MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M)
}

// -------------------------------------------------------------------

// FC_TRJPLA_Params_array_port

// repeated .pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params data = 3531;
inline int FC_TRJPLA_Params_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FC_TRJPLA_Params_array_port::data_size() const {
  return _internal_data_size();
}
inline void FC_TRJPLA_Params_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* FC_TRJPLA_Params_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params >*
FC_TRJPLA_Params_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port.data)
  return &data_;
}
inline const ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params& FC_TRJPLA_Params_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params& FC_TRJPLA_Params_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* FC_TRJPLA_Params_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* FC_TRJPLA_Params_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params >&
FC_TRJPLA_Params_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fc_trjpla_params
}  // namespace ap_tp
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto
