// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/pose_obstacle_dist.proto

#include "ap_tp/pose_obstacle_dist.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto;
namespace pb {
namespace ap_tp {
namespace pose_obstacle_dist {
class PoseObstacleDistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseObstacleDist> _instance;
} _PoseObstacleDist_default_instance_;
class PoseObstacleDist_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseObstacleDist_array_port> _instance;
} _PoseObstacleDist_array_port_default_instance_;
}  // namespace pose_obstacle_dist
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::pose_obstacle_dist::_PoseObstacleDist_default_instance_;
    new (ptr) ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto}, {}};

static void InitDefaultsscc_info_PoseObstacleDist_array_port_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::pose_obstacle_dist::_PoseObstacleDist_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseObstacleDist_array_port_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PoseObstacleDist_array_port_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto}, {
      &scc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, frontobstdist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, frontobstdistvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, rearobstdist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, rearobstdistvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, leftobstdist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, leftobstdistvalid_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, rightobstdist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist, rightobstdistvalid_),
  1,
  4,
  0,
  5,
  2,
  6,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist)},
  { 21, 27, sizeof(::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::pose_obstacle_dist::_PoseObstacleDist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::pose_obstacle_dist::_PoseObstacleDist_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036ap_tp/pose_obstacle_dist.proto\022\033pb.ap_"
  "tp.pose_obstacle_dist\"\352\001\n\020PoseObstacleDi"
  "st\022\030\n\017frontObstDist_m\030\345\003 \001(\002\022\033\n\022frontObs"
  "tDistValid\030\242\016 \001(\010\022\027\n\016rearObstDist_m\030\325\032 \001"
  "(\002\022\032\n\021rearObstDistValid\030\224\025 \001(\010\022\027\n\016leftOb"
  "stDist_m\030\221\004 \001(\002\022\032\n\021leftObstDistValid\030\271\004 "
  "\001(\010\022\030\n\017rightObstDist_m\030\206\t \001(\002\022\033\n\022rightOb"
  "stDistValid\030\243\025 \001(\010\"[\n\033PoseObstacleDist_a"
  "rray_port\022<\n\004data\030\342\014 \003(\0132-.pb.ap_tp.pose"
  "_obstacle_dist.PoseObstacleDist"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_sccs[2] = {
  &scc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.base,
  &scc_info_PoseObstacleDist_array_port_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_once;
static bool descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto = {
  &descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto, "ap_tp/pose_obstacle_dist.proto", 391,
  &descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_once, descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_sccs, descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto::offsets,
  file_level_metadata_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto, file_level_service_descriptors_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto), true);
namespace pb {
namespace ap_tp {
namespace pose_obstacle_dist {

// ===================================================================

void PoseObstacleDist::InitAsDefaultInstance() {
}
class PoseObstacleDist::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseObstacleDist>()._has_bits_);
  static void set_has_frontobstdist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frontobstdistvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rearobstdist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rearobstdistvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_leftobstdist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leftobstdistvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rightobstdist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rightobstdistvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

PoseObstacleDist::PoseObstacleDist()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
}
PoseObstacleDist::PoseObstacleDist(const PoseObstacleDist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rearobstdist_m_, &from.rearobstdist_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightobstdistvalid_) -
    reinterpret_cast<char*>(&rearobstdist_m_)) + sizeof(rightobstdistvalid_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
}

void PoseObstacleDist::SharedCtor() {
  ::memset(&rearobstdist_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightobstdistvalid_) -
      reinterpret_cast<char*>(&rearobstdist_m_)) + sizeof(rightobstdistvalid_));
}

PoseObstacleDist::~PoseObstacleDist() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  SharedDtor();
}

void PoseObstacleDist::SharedDtor() {
}

void PoseObstacleDist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseObstacleDist& PoseObstacleDist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.base);
  return *internal_default_instance();
}


void PoseObstacleDist::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rearobstdist_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rightobstdistvalid_) -
        reinterpret_cast<char*>(&rearobstdist_m_)) + sizeof(rightobstdistvalid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PoseObstacleDist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float frontObstDist_m = 485;
      case 485:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_frontobstdist_m(&has_bits);
          frontobstdist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float leftObstDist_m = 529;
      case 529:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_leftobstdist_m(&has_bits);
          leftobstdist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool leftObstDistValid = 569;
      case 569:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_leftobstdistvalid(&has_bits);
          leftobstdistvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rightObstDist_m = 1158;
      case 1158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_rightobstdist_m(&has_bits);
          rightobstdist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool frontObstDistValid = 1826;
      case 1826:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frontobstdistvalid(&has_bits);
          frontobstdistvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rearObstDistValid = 2708;
      case 2708:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rearobstdistvalid(&has_bits);
          rearobstdistvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rightObstDistValid = 2723;
      case 2723:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rightobstdistvalid(&has_bits);
          rightobstdistvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rearObstDist_m = 3413;
      case 3413:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_rearobstdist_m(&has_bits);
          rearobstdist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseObstacleDist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float frontObstDist_m = 485;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(485, this->_internal_frontobstdist_m(), target);
  }

  // optional float leftObstDist_m = 529;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(529, this->_internal_leftobstdist_m(), target);
  }

  // optional bool leftObstDistValid = 569;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(569, this->_internal_leftobstdistvalid(), target);
  }

  // optional float rightObstDist_m = 1158;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1158, this->_internal_rightobstdist_m(), target);
  }

  // optional bool frontObstDistValid = 1826;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1826, this->_internal_frontobstdistvalid(), target);
  }

  // optional bool rearObstDistValid = 2708;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2708, this->_internal_rearobstdistvalid(), target);
  }

  // optional bool rightObstDistValid = 2723;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2723, this->_internal_rightobstdistvalid(), target);
  }

  // optional float rearObstDist_m = 3413;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3413, this->_internal_rearobstdist_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  return target;
}

size_t PoseObstacleDist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float rearObstDist_m = 3413;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float frontObstDist_m = 485;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float leftObstDist_m = 529;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float rightObstDist_m = 1158;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional bool frontObstDistValid = 1826;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool rearObstDistValid = 2708;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 1;
    }

    // optional bool leftObstDistValid = 569;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool rightObstDistValid = 2723;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseObstacleDist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseObstacleDist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseObstacleDist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
    MergeFrom(*source);
  }
}

void PoseObstacleDist::MergeFrom(const PoseObstacleDist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rearobstdist_m_ = from.rearobstdist_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      frontobstdist_m_ = from.frontobstdist_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      leftobstdist_m_ = from.leftobstdist_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      rightobstdist_m_ = from.rightobstdist_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      frontobstdistvalid_ = from.frontobstdistvalid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rearobstdistvalid_ = from.rearobstdistvalid_;
    }
    if (cached_has_bits & 0x00000040u) {
      leftobstdistvalid_ = from.leftobstdistvalid_;
    }
    if (cached_has_bits & 0x00000080u) {
      rightobstdistvalid_ = from.rightobstdistvalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoseObstacleDist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseObstacleDist::CopyFrom(const PoseObstacleDist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseObstacleDist::IsInitialized() const {
  return true;
}

void PoseObstacleDist::InternalSwap(PoseObstacleDist* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rearobstdist_m_, other->rearobstdist_m_);
  swap(frontobstdist_m_, other->frontobstdist_m_);
  swap(leftobstdist_m_, other->leftobstdist_m_);
  swap(rightobstdist_m_, other->rightobstdist_m_);
  swap(frontobstdistvalid_, other->frontobstdistvalid_);
  swap(rearobstdistvalid_, other->rearobstdistvalid_);
  swap(leftobstdistvalid_, other->leftobstdistvalid_);
  swap(rightobstdistvalid_, other->rightobstdistvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseObstacleDist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseObstacleDist_array_port::InitAsDefaultInstance() {
}
class PoseObstacleDist_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseObstacleDist_array_port>()._has_bits_);
};

PoseObstacleDist_array_port::PoseObstacleDist_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
}
PoseObstacleDist_array_port::PoseObstacleDist_array_port(const PoseObstacleDist_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
}

void PoseObstacleDist_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseObstacleDist_array_port_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.base);
}

PoseObstacleDist_array_port::~PoseObstacleDist_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  SharedDtor();
}

void PoseObstacleDist_array_port::SharedDtor() {
}

void PoseObstacleDist_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseObstacleDist_array_port& PoseObstacleDist_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseObstacleDist_array_port_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.base);
  return *internal_default_instance();
}


void PoseObstacleDist_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PoseObstacleDist_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist data = 1634;
      case 1634:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13074>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseObstacleDist_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist data = 1634;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1634, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  return target;
}

size_t PoseObstacleDist_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist data = 1634;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseObstacleDist_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseObstacleDist_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseObstacleDist_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
    MergeFrom(*source);
  }
}

void PoseObstacleDist_array_port::MergeFrom(const PoseObstacleDist_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void PoseObstacleDist_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseObstacleDist_array_port::CopyFrom(const PoseObstacleDist_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.pose_obstacle_dist.PoseObstacleDist_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseObstacleDist_array_port::IsInitialized() const {
  return true;
}

void PoseObstacleDist_array_port::InternalSwap(PoseObstacleDist_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseObstacleDist_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pose_obstacle_dist
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist* Arena::CreateMaybeMessage< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
