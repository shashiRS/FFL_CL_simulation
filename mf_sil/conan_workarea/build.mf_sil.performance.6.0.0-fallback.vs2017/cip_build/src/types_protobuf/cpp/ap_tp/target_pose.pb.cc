// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/target_pose.proto

#include "ap_tp/target_pose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ftarget_5fpose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fgeoml_2fpose_5fpod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto;
namespace pb {
namespace ap_tp {
namespace target_pose {
class TargetPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetPose> _instance;
} _TargetPose_default_instance_;
class TargetPose_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetPose_array_port> _instance;
} _TargetPose_array_port_default_instance_;
}  // namespace target_pose
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::target_pose::_TargetPose_default_instance_;
    new (ptr) ::pb::ap_tp::target_pose::TargetPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::target_pose::TargetPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto}, {
      &scc_info_Pose_POD_lsm_5fgeoml_2fpose_5fpod_2eproto.base,
      &scc_info_PoseObstacleDist_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto.base,}};

static void InitDefaultsscc_info_TargetPose_array_port_ap_5ftp_2ftarget_5fpose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::target_pose::_TargetPose_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::target_pose::TargetPose_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::target_pose::TargetPose_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetPose_array_port_ap_5ftp_2ftarget_5fpose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TargetPose_array_port_ap_5ftp_2ftarget_5fpose_2eproto}, {
      &scc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2ftarget_5fpose_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2ftarget_5fpose_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2ftarget_5fpose_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2ftarget_5fpose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, pose_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, pose_id_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, relatedparkingboxid_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, type_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, targetside_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, reachablestatus_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, posefailreason_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose, poseobstacledist_),
  1,
  6,
  2,
  7,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::target_pose::TargetPose_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::pb::ap_tp::target_pose::TargetPose)},
  { 21, 27, sizeof(::pb::ap_tp::target_pose::TargetPose_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::target_pose::_TargetPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::target_pose::_TargetPose_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2ftarget_5fpose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ap_tp/target_pose.proto\022\024pb.ap_tp.targ"
  "et_pose\032\030lsm_geoml/pose_pod.proto\032\025ap_tp"
  "/pose_type.proto\032\027ap_tp/target_side.prot"
  "o\032!ap_tp/pose_reachable_status.proto\032\034ap"
  "_tp/pose_fail_reason.proto\032\036ap_tp/pose_o"
  "bstacle_dist.proto\"\255\003\n\nTargetPose\022.\n\004pos"
  "e\030\351\013 \001(\0132\037.pb.lsm_geoml.pose_pod.Pose_PO"
  "D\022\020\n\007pose_ID\030\327\024 \001(\r\022\034\n\023relatedParkingBox"
  "ID\030\327\001 \001(\r\022+\n\004type\030\264\035 \001(\0162\034.pb.ap_tp.pose"
  "_type.PoseType\0225\n\ntargetSide\030\372\t \001(\0162 .pb"
  ".ap_tp.target_side.TargetSide\022M\n\017reachab"
  "leStatus\030\336\r \001(\01623.pb.ap_tp.pose_reachabl"
  "e_status.PoseReachableStatus\022B\n\016poseFail"
  "Reason\030\224\023 \001(\0162).pb.ap_tp.pose_fail_reaso"
  "n.PoseFailReason\022H\n\020poseObstacleDist\030\302\005 "
  "\001(\0132-.pb.ap_tp.pose_obstacle_dist.PoseOb"
  "stacleDist\"H\n\025TargetPose_array_port\022/\n\004d"
  "ata\030\277\035 \003(\0132 .pb.ap_tp.target_pose.Target"
  "Pose"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_deps[6] = {
  &::descriptor_table_ap_5ftp_2fpose_5ffail_5freason_2eproto,
  &::descriptor_table_ap_5ftp_2fpose_5fobstacle_5fdist_2eproto,
  &::descriptor_table_ap_5ftp_2fpose_5freachable_5fstatus_2eproto,
  &::descriptor_table_ap_5ftp_2fpose_5ftype_2eproto,
  &::descriptor_table_ap_5ftp_2ftarget_5fside_2eproto,
  &::descriptor_table_lsm_5fgeoml_2fpose_5fpod_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_sccs[2] = {
  &scc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto.base,
  &scc_info_TargetPose_array_port_ap_5ftp_2ftarget_5fpose_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_once;
static bool descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto = {
  &descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2ftarget_5fpose_2eproto, "ap_tp/target_pose.proto", 724,
  &descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_once, descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_sccs, descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_ap_5ftp_2ftarget_5fpose_2eproto::offsets,
  file_level_metadata_ap_5ftp_2ftarget_5fpose_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2ftarget_5fpose_2eproto, file_level_service_descriptors_ap_5ftp_2ftarget_5fpose_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2ftarget_5fpose_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2ftarget_5fpose_2eproto), true);
namespace pb {
namespace ap_tp {
namespace target_pose {

// ===================================================================

void TargetPose::InitAsDefaultInstance() {
  ::pb::ap_tp::target_pose::_TargetPose_default_instance_._instance.get_mutable()->pose_ = const_cast< ::pb::lsm_geoml::pose_pod::Pose_POD*>(
      ::pb::lsm_geoml::pose_pod::Pose_POD::internal_default_instance());
  ::pb::ap_tp::target_pose::_TargetPose_default_instance_._instance.get_mutable()->poseobstacledist_ = const_cast< ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist*>(
      ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist::internal_default_instance());
}
class TargetPose::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetPose>()._has_bits_);
  static const ::pb::lsm_geoml::pose_pod::Pose_POD& pose(const TargetPose* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pose_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_relatedparkingboxid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_targetside(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reachablestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_posefailreason(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist& poseobstacledist(const TargetPose* msg);
  static void set_has_poseobstacledist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb::lsm_geoml::pose_pod::Pose_POD&
TargetPose::_Internal::pose(const TargetPose* msg) {
  return *msg->pose_;
}
const ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist&
TargetPose::_Internal::poseobstacledist(const TargetPose* msg) {
  return *msg->poseobstacledist_;
}
void TargetPose::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TargetPose::clear_poseobstacledist() {
  if (poseobstacledist_ != nullptr) poseobstacledist_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TargetPose::TargetPose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.target_pose.TargetPose)
}
TargetPose::TargetPose(const TargetPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_poseobstacledist()) {
    poseobstacledist_ = new ::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist(*from.poseobstacledist_);
  } else {
    poseobstacledist_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::pb::lsm_geoml::pose_pod::Pose_POD(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&relatedparkingboxid_, &from.relatedparkingboxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&relatedparkingboxid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.target_pose.TargetPose)
}

void TargetPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto.base);
  ::memset(&poseobstacledist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&poseobstacledist_)) + sizeof(type_));
}

TargetPose::~TargetPose() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.target_pose.TargetPose)
  SharedDtor();
}

void TargetPose::SharedDtor() {
  if (this != internal_default_instance()) delete poseobstacledist_;
  if (this != internal_default_instance()) delete pose_;
}

void TargetPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetPose& TargetPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetPose_ap_5ftp_2ftarget_5fpose_2eproto.base);
  return *internal_default_instance();
}


void TargetPose::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.target_pose.TargetPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(poseobstacledist_ != nullptr);
      poseobstacledist_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&relatedparkingboxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&relatedparkingboxid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TargetPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 relatedParkingBoxID = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_relatedparkingboxid(&has_bits);
          relatedparkingboxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist poseObstacleDist = 706;
      case 706:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_poseobstacledist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.target_side.TargetSide targetSide = 1274;
      case 1274:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_tp::target_side::TargetSide_IsValid(val))) {
            _internal_set_targetside(static_cast<::pb::ap_tp::target_side::TargetSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1274, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.lsm_geoml.pose_pod.Pose_POD pose = 1513;
      case 1513:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.pose_reachable_status.PoseReachableStatus reachableStatus = 1758;
      case 1758:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_tp::pose_reachable_status::PoseReachableStatus_IsValid(val))) {
            _internal_set_reachablestatus(static_cast<::pb::ap_tp::pose_reachable_status::PoseReachableStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1758, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.pose_fail_reason.PoseFailReason poseFailReason = 2452;
      case 2452:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_tp::pose_fail_reason::PoseFailReason_IsValid(val))) {
            _internal_set_posefailreason(static_cast<::pb::ap_tp::pose_fail_reason::PoseFailReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2452, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 pose_ID = 2647;
      case 2647:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_pose_id(&has_bits);
          pose_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.pose_type.PoseType type = 3764;
      case 3764:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_tp::pose_type::PoseType_IsValid(val))) {
            _internal_set_type(static_cast<::pb::ap_tp::pose_type::PoseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3764, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.target_pose.TargetPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relatedParkingBoxID = 215;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(215, this->_internal_relatedparkingboxid(), target);
  }

  // optional .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist poseObstacleDist = 706;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        706, _Internal::poseobstacledist(this), target, stream);
  }

  // optional .pb.ap_tp.target_side.TargetSide targetSide = 1274;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1274, this->_internal_targetside(), target);
  }

  // optional .pb.lsm_geoml.pose_pod.Pose_POD pose = 1513;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1513, _Internal::pose(this), target, stream);
  }

  // optional .pb.ap_tp.pose_reachable_status.PoseReachableStatus reachableStatus = 1758;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1758, this->_internal_reachablestatus(), target);
  }

  // optional .pb.ap_tp.pose_fail_reason.PoseFailReason poseFailReason = 2452;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2452, this->_internal_posefailreason(), target);
  }

  // optional uint32 pose_ID = 2647;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2647, this->_internal_pose_id(), target);
  }

  // optional .pb.ap_tp.pose_type.PoseType type = 3764;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3764, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.target_pose.TargetPose)
  return target;
}

size_t TargetPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.target_pose.TargetPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.ap_tp.pose_obstacle_dist.PoseObstacleDist poseObstacleDist = 706;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poseobstacledist_);
    }

    // optional .pb.lsm_geoml.pose_pod.Pose_POD pose = 1513;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional uint32 relatedParkingBoxID = 215;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relatedparkingboxid());
    }

    // optional .pb.ap_tp.target_side.TargetSide targetSide = 1274;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_targetside());
    }

    // optional .pb.ap_tp.pose_reachable_status.PoseReachableStatus reachableStatus = 1758;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reachablestatus());
    }

    // optional .pb.ap_tp.pose_fail_reason.PoseFailReason poseFailReason = 2452;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_posefailreason());
    }

    // optional uint32 pose_ID = 2647;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pose_id());
    }

    // optional .pb.ap_tp.pose_type.PoseType type = 3764;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.target_pose.TargetPose)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.target_pose.TargetPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.target_pose.TargetPose)
    MergeFrom(*source);
  }
}

void TargetPose::MergeFrom(const TargetPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.target_pose.TargetPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_poseobstacledist()->::pb::ap_tp::pose_obstacle_dist::PoseObstacleDist::MergeFrom(from._internal_poseobstacledist());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::pb::lsm_geoml::pose_pod::Pose_POD::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      relatedparkingboxid_ = from.relatedparkingboxid_;
    }
    if (cached_has_bits & 0x00000008u) {
      targetside_ = from.targetside_;
    }
    if (cached_has_bits & 0x00000010u) {
      reachablestatus_ = from.reachablestatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      posefailreason_ = from.posefailreason_;
    }
    if (cached_has_bits & 0x00000040u) {
      pose_id_ = from.pose_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.target_pose.TargetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetPose::CopyFrom(const TargetPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.target_pose.TargetPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetPose::IsInitialized() const {
  return true;
}

void TargetPose::InternalSwap(TargetPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(poseobstacledist_, other->poseobstacledist_);
  swap(pose_, other->pose_);
  swap(relatedparkingboxid_, other->relatedparkingboxid_);
  swap(targetside_, other->targetside_);
  swap(reachablestatus_, other->reachablestatus_);
  swap(posefailreason_, other->posefailreason_);
  swap(pose_id_, other->pose_id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetPose_array_port::InitAsDefaultInstance() {
}
class TargetPose_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetPose_array_port>()._has_bits_);
};

TargetPose_array_port::TargetPose_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.target_pose.TargetPose_array_port)
}
TargetPose_array_port::TargetPose_array_port(const TargetPose_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.target_pose.TargetPose_array_port)
}

void TargetPose_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetPose_array_port_ap_5ftp_2ftarget_5fpose_2eproto.base);
}

TargetPose_array_port::~TargetPose_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.target_pose.TargetPose_array_port)
  SharedDtor();
}

void TargetPose_array_port::SharedDtor() {
}

void TargetPose_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetPose_array_port& TargetPose_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetPose_array_port_ap_5ftp_2ftarget_5fpose_2eproto.base);
  return *internal_default_instance();
}


void TargetPose_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.target_pose.TargetPose_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TargetPose_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.target_pose.TargetPose data = 3775;
      case 3775:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetPose_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.target_pose.TargetPose_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.target_pose.TargetPose data = 3775;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3775, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.target_pose.TargetPose_array_port)
  return target;
}

size_t TargetPose_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.target_pose.TargetPose_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.target_pose.TargetPose data = 3775;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetPose_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.target_pose.TargetPose_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetPose_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetPose_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.target_pose.TargetPose_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.target_pose.TargetPose_array_port)
    MergeFrom(*source);
  }
}

void TargetPose_array_port::MergeFrom(const TargetPose_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.target_pose.TargetPose_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void TargetPose_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.target_pose.TargetPose_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetPose_array_port::CopyFrom(const TargetPose_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.target_pose.TargetPose_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetPose_array_port::IsInitialized() const {
  return true;
}

void TargetPose_array_port::InternalSwap(TargetPose_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetPose_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace target_pose
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::target_pose::TargetPose* Arena::CreateMaybeMessage< ::pb::ap_tp::target_pose::TargetPose >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::target_pose::TargetPose >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::target_pose::TargetPose_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::target_pose::TargetPose_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::target_pose::TargetPose_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
