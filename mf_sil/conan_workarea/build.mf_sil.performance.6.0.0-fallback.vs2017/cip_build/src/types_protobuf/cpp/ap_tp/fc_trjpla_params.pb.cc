// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_tp/fc_trjpla_params.proto

#include "ap_tp/fc_trjpla_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommon_2ffc_5ftrjpla_5fvehicle_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TRJPLA_Vehicle_Params_ap_5fcommon_2ffc_5ftrjpla_5fvehicle_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_tp {
namespace fc_trjpla_params {
class FC_TRJPLA_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TRJPLA_Params> _instance;
} _FC_TRJPLA_Params_default_instance_;
class FC_TRJPLA_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TRJPLA_Params_array_port> _instance;
} _FC_TRJPLA_Params_array_port_default_instance_;
}  // namespace fc_trjpla_params
}  // namespace ap_tp
}  // namespace pb
static void InitDefaultsscc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_default_instance_;
    new (ptr) ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,
      &scc_info_FC_TAPOSD_Params_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto.base,
      &scc_info_FC_TRJPLA_Vehicle_Params_ap_5fcommon_2ffc_5ftrjpla_5fvehicle_5fparams_2eproto.base,
      &scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base,}};

static void InitDefaultsscc_info_FC_TRJPLA_Params_array_port_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_array_port_default_instance_;
    new (ptr) ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TRJPLA_Params_array_port_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TRJPLA_Params_array_port_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto}, {
      &scc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_dist_perp_wo_bckt_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_dist_para_wo_bckt_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_safe_pass_margin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_virtual_obj_dist_to_tp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_parking_vel_fwd_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_parking_vel_bwd_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_parking_vel_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_par_saftey_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_safety_turn_radius_axis_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_pout_perp_straight_ext_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_radius_add_circle_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_radius_ext_perp_fin_stro_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_radius_add_clothoid_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_deviation_clothoid_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_num_clothoid_loop_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_clothoid_vel_tune_step_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_plan_distance_margin_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_edge_length_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_par_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_par_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpf_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpf_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpb_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpb_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angs_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angs_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angr_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angr_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_par_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_par_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpf_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpf_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpb_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpb_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angs_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angs_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angr_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angr_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_par_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_par_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpf_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpf_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpb_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpb_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angs_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angs_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angr_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angr_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_par_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_par_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpb_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpb_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_prpf_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_prpf_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angs_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angs_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_x_angr_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_roi_corner_y_angr_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_prp_fwd_r_scale_1st_strk_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_disable_scan_great_dist_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_vel_close_obstacle_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_out_vrtx_radius_scaling_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_num_valid_to_output_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_vel_in_par_slot_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_disable_planner_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_direct_fwd_step_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_direct_fwd_start_angle_tol_deg_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_num_clo_vel_loop_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_save_em_replanning_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_asy_clo_st_min_length_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_adapt_vel_x_distance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_adapt_vel_y_velocity_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_adapt_vel_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_straight_perp_extra_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_par_angle_max_loop_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_alignment_radius_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_alignment_angle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_planning_horizon_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_endpose_neighbour_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_desired_dist_to_obst_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_factor_determination_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_factor_safety_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_poly_vel_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_env_flickering_comp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_dist_start_end_keep_path_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_straight_conv_allowed_ang_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_prep_stroke_len_straight_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_prep_stroke_len_straight_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_ang_diff_inflection_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_enable_one_stroke_parking_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_dist_tp_to_intermp_one_stroke_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_end_limit_vel_dist_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_par_max_dist_for_sym_scurve_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_fwd_in_lat_dev_fctr_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_fwd_in_long_dev_fctr_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_fwd_in_yaw_dev_fctr_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_bwd_in_lat_dev_fctr_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_bwd_in_long_dev_fctr_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_bwd_in_yaw_dev_fctr_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_enable_dynamic_replanning_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_par_nodynreplan_dist_to_stop_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_inc_cir_length_for_scur_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_num_ta_pos_eval_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_num_pose_check_drvnpath_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_bstpose_stepsz_drvnpath_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_dist_start_tgtaxis_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_best_path_goal_dev_thr_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_best_path_length_thr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_best_path_time_thr_s_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_enable_out_in_strokes_replan_parallel_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_enable_last_call_maneuver_perp_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_distance_for_last_call_man_perp_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_scurve_dist_to_tgt_pose_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_enable_first_stroke_fwd_perp_bwd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_perp_straight_min_bwd_dist_fwd_strk_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_distance_shorten_first_strk_fwd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_ratio_distance_shorting_first_strk_fwd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_enable_early_steer_first_strk_fwd_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_ratio_add_min_radius_angled_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_ratio_add_align_radius_angled_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_enable_first_strk_fwd_par_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_add_straight_fsf_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_add_straight_to_wheelstopper_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_long_shift_intermed_ws_tapos_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_height_of_triangle_clo_collision_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_snap_ratio_to_avoid_coll_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_step_moving_ratio_clo_coll_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_attempt_wrap_up_triangle_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_key_corners_carbody_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_key_corners_wheel_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_min_long_dev_for_straight_repl_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_lat_dev_for_straight_repl_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_max_orientation_dev_for_straight_repl_par_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_par_repl_max_extend_dist_after_scurve_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_ratio_straight_prepare_fwd_stroke_prep_align_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_ratio_pre_prep_align_axis_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_pre_prep_align_radius_ext_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_ratio_confined_space_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_misaligned_start_pose_angle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_dist_to_pb_for_misal_start_pose_planning_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_length_long_clo_transit_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_length_short_clo_transit_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_enable_fake_objects_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_ego_dist_to_fake_objects_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_ego_dist_to_fake_objects_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_ego_dist_to_fake_objects_ang_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_blind_distance_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_blind_distance_ang_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, ap_p_parkout_blind_distance_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, taposdparams_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, vehicleparams_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, sysfuncparams_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_edge_length_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_par_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_par_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpf_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpf_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpb_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpb_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angs_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angs_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angr_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angr_in_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_par_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_par_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpf_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpf_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpb_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpb_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angs_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angs_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angr_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angr_out_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_par_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_par_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpf_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpf_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpb_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpb_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angs_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angs_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angr_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angr_in_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_par_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_par_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpb_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpb_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_prpf_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_prpf_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angs_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angs_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_x_angr_out_op_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params, mp_p_roi_corner_y_angr_out_op_m_),
  112,
  2,
  164,
  78,
  16,
  147,
  125,
  113,
  59,
  107,
  34,
  175,
  139,
  159,
  39,
  101,
  11,
  36,
  6,
  116,
  17,
  176,
  49,
  152,
  70,
  165,
  12,
  115,
  76,
  163,
  10,
  119,
  46,
  13,
  31,
  18,
  140,
  124,
  32,
  28,
  158,
  127,
  55,
  114,
  180,
  61,
  166,
  86,
  92,
  162,
  79,
  179,
  128,
  104,
  66,
  132,
  157,
  33,
  38,
  170,
  129,
  97,
  42,
  133,
  108,
  9,
  98,
  8,
  20,
  90,
  75,
  40,
  ~0u,
  ~0u,
  24,
  43,
  50,
  137,
  142,
  62,
  21,
  45,
  48,
  118,
  168,
  14,
  53,
  106,
  143,
  178,
  85,
  99,
  5,
  117,
  169,
  153,
  111,
  51,
  54,
  19,
  151,
  100,
  109,
  130,
  4,
  30,
  93,
  126,
  173,
  189,
  52,
  81,
  82,
  26,
  154,
  83,
  190,
  185,
  89,
  84,
  148,
  64,
  94,
  56,
  184,
  35,
  146,
  67,
  22,
  144,
  ~0u,
  ~0u,
  69,
  134,
  88,
  161,
  41,
  7,
  65,
  135,
  105,
  181,
  47,
  80,
  95,
  145,
  71,
  123,
  141,
  102,
  74,
  0,
  3,
  1,
  23,
  187,
  156,
  160,
  73,
  188,
  57,
  177,
  91,
  150,
  186,
  174,
  96,
  77,
  87,
  63,
  110,
  155,
  182,
  60,
  103,
  121,
  167,
  183,
  58,
  44,
  120,
  27,
  136,
  138,
  25,
  122,
  29,
  15,
  172,
  171,
  37,
  72,
  149,
  131,
  68,
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 200, sizeof(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params)},
  { 395, 401, sizeof(::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ap_tp/fc_trjpla_params.proto\022\031pb.ap_tp"
  ".fc_trjpla_params\032\027eco/signal_header.pro"
  "to\032\034ap_tp/fc_taposd_params.proto\032(ap_com"
  "mon/fc_trjpla_vehicle_params.proto\032)ap_c"
  "ommon/fc_trjpla_sys_func_params.proto\"\204@"
  "\n\020FC_TRJPLA_Params\022\030\n\017uiVersionNumber\030\314\020"
  " \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.eco.signa"
  "l_header.SignalHeader\022%\n\034AP_P_MAX_DIST_P"
  "ERP_WO_BCKT_M\030\301\032 \001(\002\022%\n\034AP_P_MAX_DIST_PA"
  "RA_WO_BCKT_M\030\230\013 \001(\002\022 \n\027AP_P_SAFE_PASS_MA"
  "RGIN_M\030\360\001 \001(\002\022&\n\035AP_P_VIRTUAL_OBJ_DIST_T"
  "O_TP_M\030\363\026 \001(\002\022%\n\034AP_P_MAX_PARKING_VEL_FW"
  "D_MPS\030\232\023 \001(\002\022%\n\034AP_P_MAX_PARKING_VEL_BWD"
  "_MPS\030\334\020 \001(\002\022!\n\030AP_P_MIN_PARKING_VEL_MPS\030"
  "\253\010 \001(\002\022\'\n\036AP_P_PARKOUT_PAR_SAFTEY_DIST_M"
  "\030\214\017 \001(\002\022\'\n\036AP_P_SAFETY_TURN_RADIUS_AXIS_"
  "M\030\226\005 \001(\002\022&\n\035AP_P_POUT_PERP_STRAIGHT_EXT_"
  "M\030\302\034 \001(\002\022%\n\034AP_P_MIN_RADIUS_ADD_CIRCLE_M"
  "\030\341\025 \001(\002\022(\n\037AP_P_RADIUS_EXT_PERP_FIN_STRO"
  "_M\030\366\031 \001(\002\022\'\n\036AP_P_MIN_RADIUS_ADD_CLOTHOI"
  "D_M\030\311\006 \001(\002\022&\n\035AP_P_MAX_DEVIATION_CLOTHOI"
  "D_M\030\341\r \001(\002\022&\n\035AP_P_MAX_NUM_CLOTHOID_LOOP"
  "_NU\030\267\001 \001(\r\022(\n\037AP_P_CLOTHOID_VEL_TUNE_STE"
  "P_MPS\030\357\005 \001(\002\022#\n\033AP_P_PLAN_DISTANCE_MARGI"
  "N_M\030X \001(\002\022\037\n\026AP_P_ROI_EDGE_LENGTH_M\030\227\021 \001"
  "(\002\022#\n\032AP_P_ROI_CORNER_X_PAR_IN_M\030\224\002 \001(\002\022"
  "#\n\032AP_P_ROI_CORNER_Y_PAR_IN_M\030\321\034 \001(\002\022$\n\033"
  "AP_P_ROI_CORNER_X_PRPF_IN_M\030\274\007 \001(\002\022$\n\033AP"
  "_P_ROI_CORNER_Y_PRPF_IN_M\030\365\027 \001(\002\022$\n\033AP_P"
  "_ROI_CORNER_X_PRPB_IN_M\030\235\n \001(\002\022$\n\033AP_P_R"
  "OI_CORNER_Y_PRPB_IN_M\030\324\032 \001(\002\022$\n\033AP_P_ROI"
  "_CORNER_X_ANGS_IN_M\030\330\001 \001(\002\022$\n\033AP_P_ROI_C"
  "ORNER_Y_ANGS_IN_M\030\221\021 \001(\002\022$\n\033AP_P_ROI_COR"
  "NER_X_ANGR_IN_M\030\370\n \001(\002\022$\n\033AP_P_ROI_CORNE"
  "R_Y_ANGR_IN_M\030\261\032 \001(\002\022$\n\033AP_P_ROI_CORNER_"
  "X_PAR_OUT_M\030\225\001 \001(\002\022$\n\033AP_P_ROI_CORNER_Y_"
  "PAR_OUT_M\030\334\021 \001(\002\022%\n\034AP_P_ROI_CORNER_X_PR"
  "PF_OUT_M\030\252\007 \001(\002\022%\n\034AP_P_ROI_CORNER_Y_PRP"
  "F_OUT_M\030\337\001 \001(\002\022%\n\034AP_P_ROI_CORNER_X_PRPB"
  "_OUT_M\030\354\004 \001(\002\022%\n\034AP_P_ROI_CORNER_Y_PRPB_"
  "OUT_M\030\231\002 \001(\002\022%\n\034AP_P_ROI_CORNER_X_ANGS_O"
  "UT_M\030\347\025 \001(\002\022%\n\034AP_P_ROI_CORNER_Y_ANGS_OU"
  "T_M\030\222\023 \001(\002\022%\n\034AP_P_ROI_CORNER_X_ANGR_OUT"
  "_M\030\206\005 \001(\002\022%\n\034AP_P_ROI_CORNER_Y_ANGR_OUT_"
  "M\030\363\003 \001(\002\022&\n\035AP_P_ROI_CORNER_X_PAR_IN_OP_"
  "M\030\311\031 \001(\002\022&\n\035AP_P_ROI_CORNER_Y_PAR_IN_OP_"
  "M\030\252\023 \001(\002\022\'\n\036AP_P_ROI_CORNER_X_PRPF_IN_OP"
  "_M\030\352\007 \001(\002\022\'\n\036AP_P_ROI_CORNER_Y_PRPF_IN_O"
  "P_M\030\213\021 \001(\002\022\'\n\036AP_P_ROI_CORNER_X_PRPB_IN_"
  "OP_M\030\205\036 \001(\002\022\'\n\036AP_P_ROI_CORNER_Y_PRPB_IN"
  "_OP_M\030\344\010 \001(\002\022\'\n\036AP_P_ROI_CORNER_X_ANGS_I"
  "N_OP_M\030\345\032 \001(\002\022\'\n\036AP_P_ROI_CORNER_Y_ANGS_"
  "IN_OP_M\030\204\014 \001(\002\022\'\n\036AP_P_ROI_CORNER_X_ANGR"
  "_IN_OP_M\030\306\014 \001(\002\022\'\n\036AP_P_ROI_CORNER_Y_ANG"
  "R_IN_OP_M\030\247\032 \001(\002\022\'\n\036AP_P_ROI_CORNER_X_PA"
  "R_OUT_OP_M\030\247\013 \001(\002\022\'\n\036AP_P_ROI_CORNER_Y_P"
  "AR_OUT_OP_M\030\306\035 \001(\002\022(\n\037AP_P_ROI_CORNER_X_"
  "PRPB_OUT_OP_M\030\304\023 \001(\002\022(\n\037AP_P_ROI_CORNER_"
  "Y_PRPB_OUT_OP_M\030\270\016 \001(\002\022(\n\037AP_P_ROI_CORNE"
  "R_X_PRPF_OUT_OP_M\030\361\t \001(\002\022(\n\037AP_P_ROI_COR"
  "NER_Y_PRPF_OUT_OP_M\030\215\024 \001(\002\022(\n\037AP_P_ROI_C"
  "ORNER_X_ANGS_OUT_OP_M\030\354\030 \001(\002\022(\n\037AP_P_ROI"
  "_CORNER_Y_ANGS_OUT_OP_M\030\220\005 \001(\002\022(\n\037AP_P_R"
  "OI_CORNER_X_ANGR_OUT_OP_M\030\251\006 \001(\002\022(\n\037AP_P"
  "_ROI_CORNER_Y_ANGR_OUT_OP_M\030\325\033 \001(\002\022(\n\037AP"
  "_P_PRP_FWD_R_SCALE_1ST_STRK_M\030\317\023 \001(\002\022(\n\037"
  "AP_P_DISABLE_SCAN_GREAT_DIST_NU\030\327\005 \001(\010\022("
  "\n\037AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS\030\363\006 \001(\002"
  "\022(\n\037AP_P_OUT_VRTX_RADIUS_SCALING_NU\030\275\024 \001"
  "(\002\022(\n\037AP_P_MIN_NUM_VALID_TO_OUTPUT_NU\030\230\017"
  " \001(\r\022%\n\034AP_P_MAX_VEL_IN_PAR_SLOT_MPS\030\206\001 "
  "\001(\002\022 \n\027AP_P_DISABLE_PLANNER_NU\030\301\017 \001(\010\022#\n"
  "\033AP_P_DIRECT_FWD_STEP_DIST_M\030i \001(\002\022,\n#AP"
  "_P_DIRECT_FWD_START_ANGLE_TOL_DEG\030\266\002 \001(\002"
  "\022%\n\034AP_P_MAX_NUM_CLO_VEL_LOOP_NU\030\265\014 \001(\r\022"
  "#\n\032AP_P_SAVE_EM_REPLANNING_NU\030\344\n \001(\r\022%\n\034"
  "AP_P_ASY_CLO_ST_MIN_LENGTH_M\030\336\006 \001(\002\022#\n\033A"
  "P_P_ADAPT_VEL_X_DISTANCE_M\030A \003(\002\022&\n\035AP_P"
  "_ADAPT_VEL_Y_VELOCITY_MPS\030\377\034 \003(\002\022\037\n\026AP_P"
  "_ADAPT_VEL_SIZE_NU\030\213\003 \001(\r\022(\n\037AP_P_STRAIG"
  "HT_PERP_EXTRA_DIST_M\030\377\006 \001(\002\022(\n\037AP_P_PARK"
  "OUT_PAR_ANGLE_MAX_LOOP\030\305\007 \001(\r\022$\n\033AP_P_MA"
  "X_ALIGNMENT_RADIUS_M\030\211\025 \001(\002\022%\n\034AP_P_MIN_"
  "ALIGNMENT_ANGLE_RAD\030\356\025 \001(\002\022 \n\027AP_P_PLANN"
  "ING_HORIZON_M\030\356\010 \001(\002\022&\n\035AP_P_ENDPOSE_NEI"
  "GHBOUR_DIST_M\030\317\002 \001(\002\022$\n\033AP_P_DESIRED_DIS"
  "T_TO_OBST_M\030\231\007 \001(\002\022%\n\034AP_P_FACTOR_DETERM"
  "INATION_NU\030\270\007 \001(\002\022\036\n\025AP_P_FACTOR_SAFETY_"
  "NU\030\311\021 \001(\002\022\036\n\025AP_P_MAX_POLY_VEL_MPS\030\207\033 \001("
  "\002\022#\n\032AP_P_ENV_FLICKERING_COMP_M\030\342\001 \001(\002\022("
  "\n\037AP_P_DIST_START_END_KEEP_PATH_M\030\342\007 \001(\002"
  "\022+\n\"AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD\030\374"
  "\016 \001(\002\022,\n#AP_P_MAX_PREP_STROKE_LEN_STRAIG"
  "HT_M\030\201\026 \001(\002\022,\n#AP_P_MIN_PREP_STROKE_LEN_"
  "STRAIGHT_M\030\254\035 \001(\002\022)\n AP_P_MIN_ANG_DIFF_I"
  "NFLECTION_RAD\030\376\013 \001(\002\022\'\n\036AP_P_ENABLE_ONE_"
  "STROKE_PARKING\030\323\022 \001(\010\0220\n(AP_P_MAX_DIST_T"
  "P_TO_INTERMP_ONE_STROKE_M\030& \001(\002\022\'\n\036AP_P_"
  "PERP_END_LIMIT_VEL_DIST_M\030\274\021 \001(\002\022+\n\"AP_P"
  "_PAR_MAX_DIST_FOR_SYM_SCURVE_M\030\276\033 \001(\002\022&\n"
  "\035AP_P_PERP_FWD_IN_LAT_DEV_FCTR\030\366\027 \001(\002\022\'\n"
  "\036AP_P_PERP_FWD_IN_LONG_DEV_FCTR\030\350\017 \001(\002\022&"
  "\n\035AP_P_PERP_FWD_IN_YAW_DEV_FCTR\030\310\007 \001(\002\022&"
  "\n\035AP_P_PERP_BWD_IN_LAT_DEV_FCTR\030\351\007 \001(\002\022\'"
  "\n\036AP_P_PERP_BWD_IN_LONG_DEV_FCTR\030\244\002 \001(\002\022"
  "&\n\035AP_P_PERP_BWD_IN_YAW_DEV_FCTR\030\327\027 \001(\002\022"
  "\'\n\036AP_P_ENABLE_DYNAMIC_REPLANNING\030\260\014 \001(\010"
  "\022,\n#AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M\030"
  "\267\017 \001(\002\022+\n\"AP_P_INC_CIR_LENGTH_FOR_SCUR_O"
  "UT_M\030\335\023 \001(\002\022\034\n\024AP_P_NUM_TA_POS_EVAL\030\014 \001("
  "\r\022%\n\034AP_P_NUM_POSE_CHECK_DRVNPATH\030\312\004 \001(\r"
  "\022(\n\037AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU\030\330\014 \001"
  "(\r\022&\n\035AP_P_MIN_DIST_START_TGTAXIS_M\030\237\023 \001"
  "(\002\022\'\n\036AP_P_BEST_PATH_GOAL_DEV_THR_NU\030\261\034 "
  "\001(\002\022&\n\033AP_P_BEST_PATH_LENGTH_THR_M\030\244\370\310\005 "
  "\001(\002\022\"\n\031AP_P_BEST_PATH_TIME_THR_S\030\327\007 \001(\002\022"
  "3\n*AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PAR"
  "ALLEL\030\216\010 \001(\010\022,\n#AP_P_ENABLE_LAST_CALL_MA"
  "NEUVER_PERP\030\255\020 \001(\010\022-\n$AP_P_DISTANCE_FOR_"
  "LAST_CALL_MAN_PERP\030\334\003 \001(\002\022+\n\"AP_P_MAX_SC"
  "URVE_DIST_TO_TGT_POSE_M\030\264\030 \001(\002\022.\n%AP_P_E"
  "NABLE_FIRST_STROKE_FWD_PERP_BWD\030\345\016 \001(\010\0225"
  "\n*AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_ST"
  "RK_M\030\341\226\220\007 \001(\002\0223\n(AP_P_MAX_DISTANCE_SHORT"
  "EN_FIRST_STRK_FWD\030\277\350\245\001 \001(\002\0224\n+AP_P_RATIO"
  "_DISTANCE_SHORTING_FIRST_STRK_FWD\030\235\014 \001(\002"
  "\022/\n&AP_P_ENABLE_EARLY_STEER_FIRST_STRK_F"
  "WD\030\241\010 \001(\010\022)\n AP_P_RATIO_ADD_MIN_RADIUS_A"
  "NGLED\030\210\027 \001(\002\022+\n\"AP_P_RATIO_ADD_ALIGN_RAD"
  "IUS_ANGLED\030\303\t \001(\002\022\'\n\036AP_P_ENABLE_FIRST_S"
  "TRK_FWD_PAR\030\201\002 \001(\010\022 \n\027AP_P_ADD_STRAIGHT_"
  "FSF_M\030\360\007 \001(\002\022,\n#AP_P_ADD_STRAIGHT_TO_WHE"
  "ELSTOPPER_M\030\241\037 \001(\002\022,\n#AP_P_LONG_SHIFT_IN"
  "TERMED_WS_TAPOS_M\030\272\005 \001(\002\0224\n+AP_P_MAX_HEI"
  "GHT_OF_TRIANGLE_CLO_COLLISION_M\030\345\026 \001(\002\022&"
  "\n\035AP_P_SNAP_RATIO_TO_AVOID_COLL\030\363\t \001(\002\022("
  "\n\037AP_P_STEP_MOVING_RATIO_CLO_COLL\030\327\002 \001(\002"
  "\022*\n!AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE\030\236\026"
  " \001(\r\022!\n\030AP_P_KEY_CORNERS_CARBODY\030\322\007 \003(\r\022"
  "\037\n\026AP_P_KEY_CORNERS_WHEEL\030\362\005 \003(\r\0222\n)AP_P"
  "_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M\030\232\n"
  " \001(\002\0221\n(AP_P_MAX_LAT_DEV_FOR_STRAIGHT_RE"
  "PL_PAR_M\030\362\024 \001(\002\022;\n2AP_P_MAX_ORIENTATION_"
  "DEV_FOR_STRAIGHT_REPL_PAR_RAD\030\221\014 \001(\002\0225\n,"
  "AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCUR"
  "VE_M\030\227\032 \001(\002\022:\n1AP_P_RATIO_STRAIGHT_PREPA"
  "RE_FWD_STROKE_PREP_ALIGN\030\361\006 \001(\002\022&\n\036AP_P_"
  "RATIO_PRE_PREP_ALIGN_AXIS\030^ \001(\002\022)\n AP_P_"
  "PRE_PREP_ALIGN_RADIUS_EXT_M\030\316\t \001(\002\022\"\n\031AP"
  "_P_RATIO_CONFINED_SPACE\030\367\024 \001(\002\022-\n$AP_P_M"
  "ISALIGNED_START_POSE_ANGLE_RAD\030\351\016 \001(\002\0228\n"
  "/AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PL"
  "ANNING_M\030\267\036 \001(\002\022\'\n\036AP_P_LENGTH_LONG_CLO_"
  "TRANSIT_M\030\267\007 \001(\002\022(\n\037AP_P_LENGTH_SHORT_CL"
  "O_TRANSIT_M\030\302\013 \001(\002\022)\n AP_P_PARKOUT_ENABL"
  "E_FAKE_OBJECTS\030\265\027 \001(\010\0224\n+AP_P_PARKOUT_EG"
  "O_DIST_TO_FAKE_OBJECTS_PAR_M\030\255\026 \001(\002\0225\n,A"
  "P_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PER"
  "P_M\030\244\n \001(\002\0224\n+AP_P_PARKOUT_EGO_DIST_TO_F"
  "AKE_OBJECTS_ANG_M\030\333\022 \001(\002\022+\n\"AP_P_PARKOUT"
  "_BLIND_DISTANCE_PERP_M\030\352\025 \001(\002\022*\n!AP_P_PA"
  "RKOUT_BLIND_DISTANCE_ANG_M\030\225\016 \001(\002\022*\n!AP_"
  "P_PARKOUT_BLIND_DISTANCE_PAR_M\030\343\n \001(\002\022B\n"
  "\014taposdParams\030\354\001 \001(\0132+.pb.ap_tp.fc_tapos"
  "d_params.FC_TAPOSD_Params\022W\n\rvehiclePara"
  "ms\030\377\022 \001(\0132\?.pb.ap_common.fc_trjpla_vehic"
  "le_params.FC_TRJPLA_Vehicle_Params\022Y\n\rsy"
  "sFuncParams\030\312\003 \001(\0132A.pb.ap_common.fc_trj"
  "pla_sys_func_params.FC_TRJPLA_Sys_Func_P"
  "arams\022\037\n\026MP_P_ROI_EDGE_LENGTH_M\030\365\002 \001(\002\022%"
  "\n\032MP_P_ROI_CORNER_X_PAR_IN_M\030\301\210\370\003 \001(\002\022#\n"
  "\032MP_P_ROI_CORNER_Y_PAR_IN_M\030\272\030 \001(\002\022$\n\033MP"
  "_P_ROI_CORNER_X_PRPF_IN_M\030\224\032 \001(\002\022$\n\033MP_P"
  "_ROI_CORNER_Y_PRPF_IN_M\030\335\n \001(\002\022&\n\033MP_P_R"
  "OI_CORNER_X_PRPB_IN_M\030\274\327\233\005 \001(\002\022$\n\033MP_P_R"
  "OI_CORNER_Y_PRPB_IN_M\030\374\007 \001(\002\022$\n\033MP_P_ROI"
  "_CORNER_X_ANGS_IN_M\030\360\034 \001(\002\022$\n\033MP_P_ROI_C"
  "ORNER_Y_ANGS_IN_M\030\271\014 \001(\002\022$\n\033MP_P_ROI_COR"
  "NER_X_ANGR_IN_M\030\320\027 \001(\002\022&\n\033MP_P_ROI_CORNE"
  "R_Y_ANGR_IN_M\030\272\330\304\001 \001(\002\022$\n\033MP_P_ROI_CORNE"
  "R_X_PAR_OUT_M\030\275\034 \001(\002\022$\n\033MP_P_ROI_CORNER_"
  "Y_PAR_OUT_M\030\364\014 \001(\002\022%\n\034MP_P_ROI_CORNER_X_"
  "PRPF_OUT_M\030\373\n \001(\002\022%\n\034MP_P_ROI_CORNER_Y_P"
  "RPF_OUT_M\030\216\014 \001(\002\022%\n\034MP_P_ROI_CORNER_X_PR"
  "PB_OUT_M\030\275\t \001(\002\022%\n\034MP_P_ROI_CORNER_Y_PRP"
  "B_OUT_M\030\310\017 \001(\002\022%\n\034MP_P_ROI_CORNER_X_ANGS"
  "_OUT_M\030\266\030 \001(\002\022%\n\034MP_P_ROI_CORNER_Y_ANGS_"
  "OUT_M\030\303\036 \001(\002\022%\n\034MP_P_ROI_CORNER_X_ANGR_O"
  "UT_M\030\327\010 \001(\002\022%\n\034MP_P_ROI_CORNER_Y_ANGR_OU"
  "T_M\030\242\016 \001(\002\022&\n\035MP_P_ROI_CORNER_X_PAR_IN_O"
  "P_M\030\345\021 \001(\002\022&\n\035MP_P_ROI_CORNER_Y_PAR_IN_O"
  "P_M\030\206\033 \001(\002\022\'\n\036MP_P_ROI_CORNER_X_PRPF_IN_"
  "OP_M\030\356\036 \001(\002\022\'\n\036MP_P_ROI_CORNER_Y_PRPF_IN"
  "_OP_M\030\217\010 \001(\002\022\'\n\036MP_P_ROI_CORNER_X_PRPB_I"
  "N_OP_M\030\201\007 \001(\002\022\'\n\036MP_P_ROI_CORNER_Y_PRPB_"
  "IN_OP_M\030\340\021 \001(\002\022\'\n\036MP_P_ROI_CORNER_X_ANGS"
  "_IN_OP_M\030\341\003 \001(\002\022\'\n\036MP_P_ROI_CORNER_Y_ANG"
  "S_IN_OP_M\030\200\025 \001(\002\022\'\n\036MP_P_ROI_CORNER_X_AN"
  "GR_IN_OP_M\030\302\025 \001(\002\022\'\n\036MP_P_ROI_CORNER_Y_A"
  "NGR_IN_OP_M\030\243\003 \001(\002\022\'\n\036MP_P_ROI_CORNER_X_"
  "PAR_OUT_OP_M\030\243\022 \001(\002\022\'\n\036MP_P_ROI_CORNER_Y"
  "_PAR_OUT_OP_M\030\302\004 \001(\002\022(\n\037MP_P_ROI_CORNER_"
  "X_PRPB_OUT_OP_M\030\356\001 \001(\002\022(\n\037MP_P_ROI_CORNE"
  "R_Y_PRPB_OUT_OP_M\030\222\034 \001(\002\022(\n\037MP_P_ROI_COR"
  "NER_X_PRPF_OUT_OP_M\030\333\033 \001(\002\022(\n\037MP_P_ROI_C"
  "ORNER_Y_PRPF_OUT_OP_M\030\247\006 \001(\002\022(\n\037MP_P_ROI"
  "_CORNER_X_ANGS_OUT_OP_M\030\306\n \001(\002\022(\n\037MP_P_R"
  "OI_CORNER_Y_ANGS_OUT_OP_M\030\272\027 \001(\002\022(\n\037MP_P"
  "_ROI_CORNER_X_ANGR_OUT_OP_M\030\203\024 \001(\002\022(\n\037MP"
  "_P_ROI_CORNER_Y_ANGR_OUT_OP_M\030\377\t \001(\002\"Y\n\033"
  "FC_TRJPLA_Params_array_port\022:\n\004data\030\313\033 \003"
  "(\0132+.pb.ap_tp.fc_trjpla_params.FC_TRJPLA"
  "_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_deps[4] = {
  &::descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto,
  &::descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fvehicle_5fparams_2eproto,
  &::descriptor_table_ap_5ftp_2ffc_5ftaposd_5fparams_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.base,
  &scc_info_FC_TRJPLA_Params_array_port_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_once;
static bool descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto = {
  &descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_initialized, descriptor_table_protodef_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto, "ap_tp/fc_trjpla_params.proto", 8487,
  &descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_once, descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_sccs, descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto::offsets,
  file_level_metadata_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto, 2, file_level_enum_descriptors_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto, file_level_service_descriptors_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto), true);
namespace pb {
namespace ap_tp {
namespace fc_trjpla_params {

// ===================================================================

void FC_TRJPLA_Params::InitAsDefaultInstance() {
  ::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
  ::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_default_instance_._instance.get_mutable()->taposdparams_ = const_cast< ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params*>(
      ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params::internal_default_instance());
  ::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_default_instance_._instance.get_mutable()->vehicleparams_ = const_cast< ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params*>(
      ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params::internal_default_instance());
  ::pb::ap_tp::fc_trjpla_params::_FC_TRJPLA_Params_default_instance_._instance.get_mutable()->sysfuncparams_ = const_cast< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params*>(
      ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params::internal_default_instance());
}
class FC_TRJPLA_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TRJPLA_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_TRJPLA_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_p_max_dist_perp_wo_bckt_m(HasBits* has_bits) {
    (*has_bits)[5] |= 16u;
  }
  static void set_has_ap_p_max_dist_para_wo_bckt_m(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_ap_p_safe_pass_margin_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ap_p_virtual_obj_dist_to_tp_m(HasBits* has_bits) {
    (*has_bits)[4] |= 524288u;
  }
  static void set_has_ap_p_max_parking_vel_fwd_mps(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static void set_has_ap_p_max_parking_vel_bwd_mps(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_ap_p_min_parking_vel_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_ap_p_parkout_par_saftey_dist_m(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_ap_p_safety_turn_radius_axis_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ap_p_pout_perp_straight_ext_m(HasBits* has_bits) {
    (*has_bits)[5] |= 32768u;
  }
  static void set_has_ap_p_min_radius_add_circle_m(HasBits* has_bits) {
    (*has_bits)[4] |= 2048u;
  }
  static void set_has_ap_p_radius_ext_perp_fin_stro_m(HasBits* has_bits) {
    (*has_bits)[4] |= 2147483648u;
  }
  static void set_has_ap_p_min_radius_add_clothoid_m(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_ap_p_max_deviation_clothoid_m(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_ap_p_max_num_clothoid_loop_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ap_p_clothoid_vel_tune_step_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ap_p_plan_distance_margin_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_p_roi_edge_length_m(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static void set_has_ap_p_roi_corner_x_par_in_m(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ap_p_roi_corner_y_par_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 65536u;
  }
  static void set_has_ap_p_roi_corner_x_prpf_in_m(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_ap_p_roi_corner_y_prpf_in_m(HasBits* has_bits) {
    (*has_bits)[4] |= 16777216u;
  }
  static void set_has_ap_p_roi_corner_x_prpb_in_m(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_ap_p_roi_corner_y_prpb_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 32u;
  }
  static void set_has_ap_p_roi_corner_x_angs_in_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ap_p_roi_corner_y_angs_in_m(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static void set_has_ap_p_roi_corner_x_angr_in_m(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_ap_p_roi_corner_y_angr_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 8u;
  }
  static void set_has_ap_p_roi_corner_x_par_out_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ap_p_roi_corner_y_par_out_m(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static void set_has_ap_p_roi_corner_x_prpf_out_m(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_ap_p_roi_corner_y_prpf_out_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ap_p_roi_corner_x_prpb_out_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ap_p_roi_corner_y_prpb_out_m(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ap_p_roi_corner_x_angs_out_m(HasBits* has_bits) {
    (*has_bits)[4] |= 4096u;
  }
  static void set_has_ap_p_roi_corner_y_angs_out_m(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static void set_has_ap_p_roi_corner_x_angr_out_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ap_p_roi_corner_y_angr_out_m(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ap_p_roi_corner_x_par_in_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 1073741824u;
  }
  static void set_has_ap_p_roi_corner_y_par_in_op_m(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
  static void set_has_ap_p_roi_corner_x_prpf_in_op_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_ap_p_roi_corner_y_prpf_in_op_m(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static void set_has_ap_p_roi_corner_x_prpb_in_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 1048576u;
  }
  static void set_has_ap_p_roi_corner_y_prpb_in_op_m(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_ap_p_roi_corner_x_angs_in_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 64u;
  }
  static void set_has_ap_p_roi_corner_y_angs_in_op_m(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_ap_p_roi_corner_x_angr_in_op_m(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_ap_p_roi_corner_y_angr_in_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 4u;
  }
  static void set_has_ap_p_roi_corner_x_par_out_op_m(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_ap_p_roi_corner_y_par_out_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 524288u;
  }
  static void set_has_ap_p_roi_corner_x_prpb_out_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static void set_has_ap_p_roi_corner_y_prpb_out_op_m(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_ap_p_roi_corner_x_prpf_out_op_m(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_ap_p_roi_corner_y_prpf_out_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 16u;
  }
  static void set_has_ap_p_roi_corner_x_angs_out_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 536870912u;
  }
  static void set_has_ap_p_roi_corner_y_angs_out_op_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ap_p_roi_corner_x_angr_out_op_m(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ap_p_roi_corner_y_angr_out_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 1024u;
  }
  static void set_has_ap_p_prp_fwd_r_scale_1st_strk_m(HasBits* has_bits) {
    (*has_bits)[4] |= 2u;
  }
  static void set_has_ap_p_disable_scan_great_dist_nu(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_ap_p_max_vel_close_obstacle_mps(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_ap_p_out_vrtx_radius_scaling_nu(HasBits* has_bits) {
    (*has_bits)[4] |= 32u;
  }
  static void set_has_ap_p_min_num_valid_to_output_nu(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_ap_p_max_vel_in_par_slot_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ap_p_disable_planner_nu(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_ap_p_direct_fwd_step_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_p_direct_fwd_start_angle_tol_deg(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ap_p_max_num_clo_vel_loop_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_ap_p_save_em_replanning_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_ap_p_asy_clo_st_min_length_m(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_ap_p_adapt_vel_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ap_p_straight_perp_extra_dist_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_ap_p_parkout_par_angle_max_loop(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_ap_p_max_alignment_radius_m(HasBits* has_bits) {
    (*has_bits)[4] |= 512u;
  }
  static void set_has_ap_p_min_alignment_angle_rad(HasBits* has_bits) {
    (*has_bits)[4] |= 16384u;
  }
  static void set_has_ap_p_planning_horizon_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_ap_p_endpose_neighbour_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ap_p_desired_dist_to_obst_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_ap_p_factor_determination_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_ap_p_factor_safety_nu(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static void set_has_ap_p_max_poly_vel_mps(HasBits* has_bits) {
    (*has_bits)[5] |= 256u;
  }
  static void set_has_ap_p_env_flickering_comp_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_p_dist_start_end_keep_path_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_ap_p_straight_conv_allowed_ang_rad(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_ap_p_max_prep_stroke_len_straight_m(HasBits* has_bits) {
    (*has_bits)[4] |= 32768u;
  }
  static void set_has_ap_p_min_prep_stroke_len_straight_m(HasBits* has_bits) {
    (*has_bits)[5] |= 262144u;
  }
  static void set_has_ap_p_min_ang_diff_inflection_rad(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_ap_p_enable_one_stroke_parking(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_ap_p_max_dist_tp_to_intermp_one_stroke_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_p_perp_end_limit_vel_dist_m(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static void set_has_ap_p_par_max_dist_for_sym_scurve_m(HasBits* has_bits) {
    (*has_bits)[5] |= 512u;
  }
  static void set_has_ap_p_perp_fwd_in_lat_dev_fctr(HasBits* has_bits) {
    (*has_bits)[4] |= 33554432u;
  }
  static void set_has_ap_p_perp_fwd_in_long_dev_fctr(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_ap_p_perp_fwd_in_yaw_dev_fctr(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_ap_p_perp_bwd_in_lat_dev_fctr(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_ap_p_perp_bwd_in_long_dev_fctr(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ap_p_perp_bwd_in_yaw_dev_fctr(HasBits* has_bits) {
    (*has_bits)[4] |= 8388608u;
  }
  static void set_has_ap_p_enable_dynamic_replanning(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_ap_p_par_nodynreplan_dist_to_stop_m(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static void set_has_ap_p_inc_cir_length_for_scur_out_m(HasBits* has_bits) {
    (*has_bits)[4] |= 4u;
  }
  static void set_has_ap_p_num_ta_pos_eval(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_p_num_pose_check_drvnpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ap_p_bstpose_stepsz_drvnpath_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_ap_p_min_dist_start_tgtaxis_m(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static void set_has_ap_p_best_path_goal_dev_thr_nu(HasBits* has_bits) {
    (*has_bits)[5] |= 8192u;
  }
  static void set_has_ap_p_best_path_length_thr_m(HasBits* has_bits) {
    (*has_bits)[5] |= 536870912u;
  }
  static void set_has_ap_p_best_path_time_thr_s(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_ap_p_enable_out_in_strokes_replan_parallel(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_ap_p_enable_last_call_maneuver_perp(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_ap_p_distance_for_last_call_man_perp(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ap_p_max_scurve_dist_to_tgt_pose_m(HasBits* has_bits) {
    (*has_bits)[4] |= 67108864u;
  }
  static void set_has_ap_p_enable_first_stroke_fwd_perp_bwd(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(HasBits* has_bits) {
    (*has_bits)[5] |= 1073741824u;
  }
  static void set_has_ap_p_max_distance_shorten_first_strk_fwd(HasBits* has_bits) {
    (*has_bits)[5] |= 33554432u;
  }
  static void set_has_ap_p_ratio_distance_shorting_first_strk_fwd(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_ap_p_enable_early_steer_first_strk_fwd(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_ap_p_ratio_add_min_radius_angled(HasBits* has_bits) {
    (*has_bits)[4] |= 1048576u;
  }
  static void set_has_ap_p_ratio_add_align_radius_angled(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_ap_p_enable_first_strk_fwd_par(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_ap_p_add_straight_fsf_m(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_ap_p_add_straight_to_wheelstopper_m(HasBits* has_bits) {
    (*has_bits)[5] |= 16777216u;
  }
  static void set_has_ap_p_long_shift_intermed_ws_tapos_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ap_p_max_height_of_triangle_clo_collision_m(HasBits* has_bits) {
    (*has_bits)[4] |= 262144u;
  }
  static void set_has_ap_p_snap_ratio_to_avoid_coll(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_ap_p_step_moving_ratio_clo_coll(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ap_p_max_attempt_wrap_up_triangle(HasBits* has_bits) {
    (*has_bits)[4] |= 65536u;
  }
  static void set_has_ap_p_min_long_dev_for_straight_repl_par_m(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_ap_p_max_lat_dev_for_straight_repl_par_m(HasBits* has_bits) {
    (*has_bits)[4] |= 64u;
  }
  static void set_has_ap_p_max_orientation_dev_for_straight_repl_par_rad(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_ap_p_par_repl_max_extend_dist_after_scurve_m(HasBits* has_bits) {
    (*has_bits)[5] |= 2u;
  }
  static void set_has_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_ap_p_ratio_pre_prep_align_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_p_pre_prep_align_radius_ext_m(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_ap_p_ratio_confined_space(HasBits* has_bits) {
    (*has_bits)[4] |= 128u;
  }
  static void set_has_ap_p_misaligned_start_pose_angle_rad(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_ap_p_dist_to_pb_for_misal_start_pose_planning_m(HasBits* has_bits) {
    (*has_bits)[5] |= 2097152u;
  }
  static void set_has_ap_p_length_long_clo_transit_m(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_ap_p_length_short_clo_transit_m(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_ap_p_parkout_enable_fake_objects(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_ap_p_parkout_ego_dist_to_fake_objects_par_m(HasBits* has_bits) {
    (*has_bits)[4] |= 131072u;
  }
  static void set_has_ap_p_parkout_ego_dist_to_fake_objects_perp_m(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_ap_p_parkout_ego_dist_to_fake_objects_ang_m(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static void set_has_ap_p_parkout_blind_distance_perp_m(HasBits* has_bits) {
    (*has_bits)[4] |= 8192u;
  }
  static void set_has_ap_p_parkout_blind_distance_ang_m(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_ap_p_parkout_blind_distance_par_m(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params& taposdparams(const FC_TRJPLA_Params* msg);
  static void set_has_taposdparams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params& vehicleparams(const FC_TRJPLA_Params* msg);
  static void set_has_vehicleparams(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& sysfuncparams(const FC_TRJPLA_Params* msg);
  static void set_has_sysfuncparams(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mp_p_roi_edge_length_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_mp_p_roi_corner_x_par_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 134217728u;
  }
  static void set_has_mp_p_roi_corner_y_par_in_m(HasBits* has_bits) {
    (*has_bits)[4] |= 268435456u;
  }
  static void set_has_mp_p_roi_corner_x_prpf_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 1u;
  }
  static void set_has_mp_p_roi_corner_y_prpf_in_m(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_mp_p_roi_corner_x_prpb_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 268435456u;
  }
  static void set_has_mp_p_roi_corner_y_prpb_in_m(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_mp_p_roi_corner_x_angs_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 131072u;
  }
  static void set_has_mp_p_roi_corner_y_angs_in_m(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_mp_p_roi_corner_x_angr_in_m(HasBits* has_bits) {
    (*has_bits)[4] |= 4194304u;
  }
  static void set_has_mp_p_roi_corner_y_angr_in_m(HasBits* has_bits) {
    (*has_bits)[5] |= 67108864u;
  }
  static void set_has_mp_p_roi_corner_x_par_out_m(HasBits* has_bits) {
    (*has_bits)[5] |= 16384u;
  }
  static void set_has_mp_p_roi_corner_y_par_out_m(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_mp_p_roi_corner_x_prpf_out_m(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_mp_p_roi_corner_y_prpf_out_m(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_mp_p_roi_corner_x_prpb_out_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_mp_p_roi_corner_y_prpb_out_m(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static void set_has_mp_p_roi_corner_x_angs_out_m(HasBits* has_bits) {
    (*has_bits)[4] |= 134217728u;
  }
  static void set_has_mp_p_roi_corner_y_angs_out_m(HasBits* has_bits) {
    (*has_bits)[5] |= 4194304u;
  }
  static void set_has_mp_p_roi_corner_x_angr_out_m(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_mp_p_roi_corner_y_angr_out_m(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_mp_p_roi_corner_x_par_in_op_m(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static void set_has_mp_p_roi_corner_y_par_in_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 128u;
  }
  static void set_has_mp_p_roi_corner_x_prpf_in_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 8388608u;
  }
  static void set_has_mp_p_roi_corner_y_prpf_in_op_m(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_mp_p_roi_corner_x_prpb_in_op_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_mp_p_roi_corner_y_prpb_in_op_m(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static void set_has_mp_p_roi_corner_x_angs_in_op_m(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_mp_p_roi_corner_y_angs_in_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 256u;
  }
  static void set_has_mp_p_roi_corner_x_angr_in_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 1024u;
  }
  static void set_has_mp_p_roi_corner_y_angr_in_op_m(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_mp_p_roi_corner_x_par_out_op_m(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static void set_has_mp_p_roi_corner_y_par_out_op_m(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_mp_p_roi_corner_x_prpb_out_op_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_mp_p_roi_corner_y_prpb_out_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 4096u;
  }
  static void set_has_mp_p_roi_corner_x_prpf_out_op_m(HasBits* has_bits) {
    (*has_bits)[5] |= 2048u;
  }
  static void set_has_mp_p_roi_corner_y_prpf_out_op_m(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_mp_p_roi_corner_x_angs_out_op_m(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_mp_p_roi_corner_y_angs_out_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 2097152u;
  }
  static void set_has_mp_p_roi_corner_x_angr_out_op_m(HasBits* has_bits) {
    (*has_bits)[4] |= 8u;
  }
  static void set_has_mp_p_roi_corner_y_angr_out_op_m(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_TRJPLA_Params::_Internal::ssigheader(const FC_TRJPLA_Params* msg) {
  return *msg->ssigheader_;
}
const ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params&
FC_TRJPLA_Params::_Internal::taposdparams(const FC_TRJPLA_Params* msg) {
  return *msg->taposdparams_;
}
const ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params&
FC_TRJPLA_Params::_Internal::vehicleparams(const FC_TRJPLA_Params* msg) {
  return *msg->vehicleparams_;
}
const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params&
FC_TRJPLA_Params::_Internal::sysfuncparams(const FC_TRJPLA_Params* msg) {
  return *msg->sysfuncparams_;
}
void FC_TRJPLA_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FC_TRJPLA_Params::clear_taposdparams() {
  if (taposdparams_ != nullptr) taposdparams_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FC_TRJPLA_Params::clear_vehicleparams() {
  if (vehicleparams_ != nullptr) vehicleparams_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void FC_TRJPLA_Params::clear_sysfuncparams() {
  if (sysfuncparams_ != nullptr) sysfuncparams_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FC_TRJPLA_Params::FC_TRJPLA_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
}
FC_TRJPLA_Params::FC_TRJPLA_Params(const FC_TRJPLA_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ap_p_adapt_vel_x_distance_m_(from.ap_p_adapt_vel_x_distance_m_),
      ap_p_key_corners_wheel_(from.ap_p_key_corners_wheel_),
      ap_p_key_corners_carbody_(from.ap_p_key_corners_carbody_),
      ap_p_adapt_vel_y_velocity_mps_(from.ap_p_adapt_vel_y_velocity_mps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_taposdparams()) {
    taposdparams_ = new ::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params(*from.taposdparams_);
  } else {
    taposdparams_ = nullptr;
  }
  if (from._internal_has_sysfuncparams()) {
    sysfuncparams_ = new ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params(*from.sysfuncparams_);
  } else {
    sysfuncparams_ = nullptr;
  }
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  if (from._internal_has_vehicleparams()) {
    vehicleparams_ = new ::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params(*from.vehicleparams_);
  } else {
    vehicleparams_ = nullptr;
  }
  ::memcpy(&ap_p_num_ta_pos_eval_, &from.ap_p_num_ta_pos_eval_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_p_perp_straight_min_bwd_dist_fwd_strk_m_) -
    reinterpret_cast<char*>(&ap_p_num_ta_pos_eval_)) + sizeof(ap_p_perp_straight_min_bwd_dist_fwd_strk_m_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
}

void FC_TRJPLA_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.base);
  ::memset(&taposdparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_p_perp_straight_min_bwd_dist_fwd_strk_m_) -
      reinterpret_cast<char*>(&taposdparams_)) + sizeof(ap_p_perp_straight_min_bwd_dist_fwd_strk_m_));
}

FC_TRJPLA_Params::~FC_TRJPLA_Params() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  SharedDtor();
}

void FC_TRJPLA_Params::SharedDtor() {
  if (this != internal_default_instance()) delete taposdparams_;
  if (this != internal_default_instance()) delete sysfuncparams_;
  if (this != internal_default_instance()) delete ssigheader_;
  if (this != internal_default_instance()) delete vehicleparams_;
}

void FC_TRJPLA_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TRJPLA_Params& FC_TRJPLA_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TRJPLA_Params_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TRJPLA_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ap_p_adapt_vel_x_distance_m_.Clear();
  ap_p_key_corners_wheel_.Clear();
  ap_p_key_corners_carbody_.Clear();
  ap_p_adapt_vel_y_velocity_mps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(taposdparams_ != nullptr);
      taposdparams_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sysfuncparams_ != nullptr);
      sysfuncparams_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ssigheader_ != nullptr);
      ssigheader_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vehicleparams_ != nullptr);
      vehicleparams_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&ap_p_num_ta_pos_eval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_ratio_pre_prep_align_axis_) -
        reinterpret_cast<char*>(&ap_p_num_ta_pos_eval_)) + sizeof(ap_p_ratio_pre_prep_align_axis_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_p_direct_fwd_step_dist_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_p_roi_corner_x_prpb_out_op_m_) -
        reinterpret_cast<char*>(&ap_p_direct_fwd_step_dist_m_)) + sizeof(mp_p_roi_corner_x_prpb_out_op_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_p_safe_pass_margin_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_p_roi_edge_length_m_) -
        reinterpret_cast<char*>(&ap_p_safe_pass_margin_m_)) + sizeof(mp_p_roi_edge_length_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_p_adapt_vel_size_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_roi_corner_x_prpb_out_m_) -
        reinterpret_cast<char*>(&ap_p_adapt_vel_size_nu_)) + sizeof(ap_p_roi_corner_x_prpb_out_m_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_p_roi_corner_x_angr_out_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_min_radius_add_clothoid_m_) -
        reinterpret_cast<char*>(&ap_p_roi_corner_x_angr_out_m_)) + sizeof(ap_p_min_radius_add_clothoid_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_p_asy_clo_st_min_length_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_length_long_clo_transit_m_) -
        reinterpret_cast<char*>(&ap_p_asy_clo_st_min_length_m_)) + sizeof(ap_p_length_long_clo_transit_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_p_factor_determination_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_roi_corner_x_prpf_in_op_m_) -
        reinterpret_cast<char*>(&ap_p_factor_determination_nu_)) + sizeof(ap_p_roi_corner_x_prpf_in_op_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_p_add_straight_fsf_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_p_roi_corner_x_prpb_out_m_) -
        reinterpret_cast<char*>(&ap_p_add_straight_fsf_m_)) + sizeof(mp_p_roi_corner_x_prpb_out_m_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_p_ratio_add_align_radius_angled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_parkout_ego_dist_to_fake_objects_perp_m_) -
        reinterpret_cast<char*>(&ap_p_ratio_add_align_radius_angled_)) + sizeof(ap_p_parkout_ego_dist_to_fake_objects_perp_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mp_p_roi_corner_x_angs_out_op_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_roi_corner_x_par_out_op_m_) -
        reinterpret_cast<char*>(&mp_p_roi_corner_x_angs_out_op_m_)) + sizeof(ap_p_roi_corner_x_par_out_op_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_p_length_short_clo_transit_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_p_roi_corner_y_prpf_out_m_) -
        reinterpret_cast<char*>(&ap_p_length_short_clo_transit_m_)) + sizeof(mp_p_roi_corner_y_prpf_out_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_p_max_orientation_dev_for_straight_repl_par_rad_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_parkout_enable_fake_objects_) -
        reinterpret_cast<char*>(&ap_p_max_orientation_dev_for_straight_repl_par_rad_)) + sizeof(ap_p_parkout_enable_fake_objects_));
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mp_p_roi_corner_y_par_out_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_p_roi_corner_y_angr_out_m_) -
        reinterpret_cast<char*>(&mp_p_roi_corner_y_par_out_m_)) + sizeof(mp_p_roi_corner_y_angr_out_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_p_roi_corner_y_prpb_out_op_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_perp_fwd_in_long_dev_fctr_) -
        reinterpret_cast<char*>(&ap_p_roi_corner_y_prpb_out_op_m_)) + sizeof(ap_p_perp_fwd_in_long_dev_fctr_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&uiversionnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_roi_corner_y_par_out_m_) -
        reinterpret_cast<char*>(&uiversionnumber_)) + sizeof(ap_p_roi_corner_y_par_out_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&mp_p_roi_corner_y_prpb_in_op_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_roi_corner_y_par_in_op_m_) -
        reinterpret_cast<char*>(&mp_p_roi_corner_y_prpb_in_op_m_)) + sizeof(ap_p_roi_corner_y_par_in_op_m_));
  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_p_roi_corner_x_prpb_out_op_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_ratio_confined_space_) -
        reinterpret_cast<char*>(&ap_p_roi_corner_x_prpb_out_op_m_)) + sizeof(ap_p_ratio_confined_space_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mp_p_roi_corner_y_angs_in_op_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_max_prep_stroke_len_straight_m_) -
        reinterpret_cast<char*>(&mp_p_roi_corner_y_angs_in_op_m_)) + sizeof(ap_p_max_prep_stroke_len_straight_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_p_max_attempt_wrap_up_triangle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_perp_bwd_in_yaw_dev_fctr_) -
        reinterpret_cast<char*>(&ap_p_max_attempt_wrap_up_triangle_)) + sizeof(ap_p_perp_bwd_in_yaw_dev_fctr_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_p_roi_corner_y_prpf_in_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_radius_ext_perp_fin_stro_m_) -
        reinterpret_cast<char*>(&ap_p_roi_corner_y_prpf_in_m_)) + sizeof(ap_p_radius_ext_perp_fin_stro_m_));
  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mp_p_roi_corner_x_prpf_in_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_p_roi_corner_y_par_in_op_m_) -
        reinterpret_cast<char*>(&mp_p_roi_corner_x_prpf_in_m_)) + sizeof(mp_p_roi_corner_y_par_in_op_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_p_max_poly_vel_mps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_pout_perp_straight_ext_m_) -
        reinterpret_cast<char*>(&ap_p_max_poly_vel_mps_)) + sizeof(ap_p_pout_perp_straight_ext_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_p_roi_corner_y_par_in_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_p_roi_corner_x_prpf_in_op_m_) -
        reinterpret_cast<char*>(&ap_p_roi_corner_y_par_in_m_)) + sizeof(mp_p_roi_corner_x_prpf_in_op_m_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&ap_p_add_straight_to_wheelstopper_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_p_perp_straight_min_bwd_dist_fwd_strk_m_) -
        reinterpret_cast<char*>(&ap_p_add_straight_to_wheelstopper_m_)) + sizeof(ap_p_perp_straight_min_bwd_dist_fwd_strk_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TRJPLA_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 AP_P_NUM_TA_POS_EVAL = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ap_p_num_ta_pos_eval(&_has_bits_);
          ap_p_num_ta_pos_eval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_p_max_dist_tp_to_intermp_one_stroke_m(&_has_bits_);
          ap_p_max_dist_tp_to_intermp_one_stroke_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_P_ADAPT_VEL_X_DISTANCE_M = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_p_adapt_vel_x_distance_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<525>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_p_adapt_vel_x_distance_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PLAN_DISTANCE_MARGIN_M = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_p_plan_distance_margin_m(&_has_bits_);
          ap_p_plan_distance_margin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_RATIO_PRE_PREP_ALIGN_AXIS = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_p_ratio_pre_prep_align_axis(&_has_bits_);
          ap_p_ratio_pre_prep_align_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_DIRECT_FWD_STEP_DIST_M = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_direct_fwd_step_dist_m(&_has_bits_);
          ap_p_direct_fwd_step_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_VEL_IN_PAR_SLOT_MPS = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_p_max_vel_in_par_slot_mps(&_has_bits_);
          ap_p_max_vel_in_par_slot_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PAR_OUT_M = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_p_roi_corner_x_par_out_m(&_has_bits_);
          ap_p_roi_corner_x_par_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_NUM_CLOTHOID_LOOP_NU = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ap_p_max_num_clothoid_loop_nu(&_has_bits_);
          ap_p_max_num_clothoid_loop_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGS_IN_M = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_p_roi_corner_x_angs_in_m(&_has_bits_);
          ap_p_roi_corner_x_angs_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_M = 223;
      case 223:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ap_p_roi_corner_y_prpf_out_m(&_has_bits_);
          ap_p_roi_corner_y_prpf_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ENV_FLICKERING_COMP_M = 226;
      case 226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_p_env_flickering_comp_m(&_has_bits_);
          ap_p_env_flickering_comp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params taposdParams = 236;
      case 236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_taposdparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 238;
      case 238:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_mp_p_roi_corner_x_prpb_out_op_m(&_has_bits_);
          mp_p_roi_corner_x_prpb_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_SAFE_PASS_MARGIN_M = 240;
      case 240:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_p_safe_pass_margin_m(&_has_bits_);
          ap_p_safe_pass_margin_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_ENABLE_FIRST_STRK_FWD_PAR = 257;
      case 257:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ap_p_enable_first_strk_fwd_par(&_has_bits_);
          ap_p_enable_first_strk_fwd_par_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PAR_IN_M = 276;
      case 276:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_p_roi_corner_x_par_in_m(&_has_bits_);
          ap_p_roi_corner_x_par_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_M = 281;
      case 281:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_p_roi_corner_y_prpb_out_m(&_has_bits_);
          ap_p_roi_corner_y_prpb_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_BWD_IN_LONG_DEV_FCTR = 292;
      case 292:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_p_perp_bwd_in_long_dev_fctr(&_has_bits_);
          ap_p_perp_bwd_in_long_dev_fctr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_p_direct_fwd_start_angle_tol_deg(&_has_bits_);
          ap_p_direct_fwd_start_angle_tol_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ENDPOSE_NEIGHBOUR_DIST_M = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ap_p_endpose_neighbour_dist_m(&_has_bits_);
          ap_p_endpose_neighbour_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_STEP_MOVING_RATIO_CLO_COLL = 343;
      case 343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_step_moving_ratio_clo_coll(&_has_bits_);
          ap_p_step_moving_ratio_clo_coll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_EDGE_LENGTH_M = 373;
      case 373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_mp_p_roi_edge_length_m(&_has_bits_);
          mp_p_roi_edge_length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_ADAPT_VEL_SIZE_NU = 395;
      case 395:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ap_p_adapt_vel_size_nu(&_has_bits_);
          ap_p_adapt_vel_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 419;
      case 419:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mp_p_roi_corner_y_angr_in_op_m(&_has_bits_);
          mp_p_roi_corner_y_angr_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params sysFuncParams = 458;
      case 458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sysfuncparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP = 476;
      case 476:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_p_distance_for_last_call_man_perp(&_has_bits_);
          ap_p_distance_for_last_call_man_perp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGS_IN_OP_M = 481;
      case 481:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_mp_p_roi_corner_x_angs_in_op_m(&_has_bits_);
          mp_p_roi_corner_x_angs_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_M = 499;
      case 499:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_p_roi_corner_y_angr_out_m(&_has_bits_);
          ap_p_roi_corner_y_angr_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 578;
      case 578:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_mp_p_roi_corner_y_par_out_op_m(&_has_bits_);
          mp_p_roi_corner_y_par_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_NUM_POSE_CHECK_DRVNPATH = 586;
      case 586:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ap_p_num_pose_check_drvnpath(&_has_bits_);
          ap_p_num_pose_check_drvnpath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPB_OUT_M = 620;
      case 620:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_p_roi_corner_x_prpb_out_m(&_has_bits_);
          ap_p_roi_corner_x_prpb_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGR_OUT_M = 646;
      case 646:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_p_roi_corner_x_angr_out_m(&_has_bits_);
          ap_p_roi_corner_x_angr_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 656;
      case 656:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_p_roi_corner_y_angs_out_op_m(&_has_bits_);
          ap_p_roi_corner_y_angs_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_SAFETY_TURN_RADIUS_AXIS_M = 662;
      case 662:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_p_safety_turn_radius_axis_m(&_has_bits_);
          ap_p_safety_turn_radius_axis_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M = 698;
      case 698:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_p_long_shift_intermed_ws_tapos_m(&_has_bits_);
          ap_p_long_shift_intermed_ws_tapos_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_DISABLE_SCAN_GREAT_DIST_NU = 727;
      case 727:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ap_p_disable_scan_great_dist_nu(&_has_bits_);
          ap_p_disable_scan_great_dist_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_CLOTHOID_VEL_TUNE_STEP_MPS = 751;
      case 751:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ap_p_clothoid_vel_tune_step_mps(&_has_bits_);
          ap_p_clothoid_vel_tune_step_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 AP_P_KEY_CORNERS_WHEEL = 754;
      case 754:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_p_key_corners_wheel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<6032>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ap_p_key_corners_wheel(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 807;
      case 807:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_mp_p_roi_corner_y_prpf_out_op_m(&_has_bits_);
          mp_p_roi_corner_y_prpf_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 809;
      case 809:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_roi_corner_x_angr_out_op_m(&_has_bits_);
          ap_p_roi_corner_x_angr_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_RADIUS_ADD_CLOTHOID_M = 841;
      case 841:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_min_radius_add_clothoid_m(&_has_bits_);
          ap_p_min_radius_add_clothoid_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ASY_CLO_ST_MIN_LENGTH_M = 862;
      case 862:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_p_asy_clo_st_min_length_m(&_has_bits_);
          ap_p_asy_clo_st_min_length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN = 881;
      case 881:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(&_has_bits_);
          ap_p_ratio_straight_prepare_fwd_stroke_prep_align_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS = 883;
      case 883:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_p_max_vel_close_obstacle_mps(&_has_bits_);
          ap_p_max_vel_close_obstacle_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_STRAIGHT_PERP_EXTRA_DIST_M = 895;
      case 895:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ap_p_straight_perp_extra_dist_m(&_has_bits_);
          ap_p_straight_perp_extra_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPB_IN_OP_M = 897;
      case 897:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_mp_p_roi_corner_x_prpb_in_op_m(&_has_bits_);
          mp_p_roi_corner_x_prpb_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_DESIRED_DIST_TO_OBST_M = 921;
      case 921:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_p_desired_dist_to_obst_m(&_has_bits_);
          ap_p_desired_dist_to_obst_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPF_OUT_M = 938;
      case 938:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_p_roi_corner_x_prpf_out_m(&_has_bits_);
          ap_p_roi_corner_x_prpf_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_LENGTH_LONG_CLO_TRANSIT_M = 951;
      case 951:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_length_long_clo_transit_m(&_has_bits_);
          ap_p_length_long_clo_transit_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_FACTOR_DETERMINATION_NU = 952;
      case 952:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_p_factor_determination_nu(&_has_bits_);
          ap_p_factor_determination_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPF_IN_M = 956;
      case 956:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_p_roi_corner_x_prpf_in_m(&_has_bits_);
          ap_p_roi_corner_x_prpf_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP = 965;
      case 965:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ap_p_parkout_par_angle_max_loop(&_has_bits_);
          ap_p_parkout_par_angle_max_loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_FWD_IN_YAW_DEV_FCTR = 968;
      case 968:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_p_perp_fwd_in_yaw_dev_fctr(&_has_bits_);
          ap_p_perp_fwd_in_yaw_dev_fctr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 AP_P_KEY_CORNERS_CARBODY = 978;
      case 978:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_p_key_corners_carbody(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<7824>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ap_p_key_corners_carbody(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_BEST_PATH_TIME_THR_S = 983;
      case 983:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_best_path_time_thr_s(&_has_bits_);
          ap_p_best_path_time_thr_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_DIST_START_END_KEEP_PATH_M = 994;
      case 994:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_p_dist_start_end_keep_path_m(&_has_bits_);
          ap_p_dist_start_end_keep_path_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_BWD_IN_LAT_DEV_FCTR = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_perp_bwd_in_lat_dev_fctr(&_has_bits_);
          ap_p_perp_bwd_in_lat_dev_fctr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPF_IN_OP_M = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_p_roi_corner_x_prpf_in_op_m(&_has_bits_);
          ap_p_roi_corner_x_prpf_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ADD_STRAIGHT_FSF_M = 1008;
      case 1008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_p_add_straight_fsf_m(&_has_bits_);
          ap_p_add_straight_fsf_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPB_IN_M = 1020;
      case 1020:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_mp_p_roi_corner_y_prpb_in_m(&_has_bits_);
          mp_p_roi_corner_y_prpb_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL = 1038;
      case 1038:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ap_p_enable_out_in_strokes_replan_parallel(&_has_bits_);
          ap_p_enable_out_in_strokes_replan_parallel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 1039;
      case 1039:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_mp_p_roi_corner_y_prpf_in_op_m(&_has_bits_);
          mp_p_roi_corner_y_prpf_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD = 1057;
      case 1057:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ap_p_enable_early_steer_first_strk_fwd(&_has_bits_);
          ap_p_enable_early_steer_first_strk_fwd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_PARKING_VEL_MPS = 1067;
      case 1067:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_p_min_parking_vel_mps(&_has_bits_);
          ap_p_min_parking_vel_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGR_OUT_M = 1111;
      case 1111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_mp_p_roi_corner_x_angr_out_m(&_has_bits_);
          mp_p_roi_corner_x_angr_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 1124;
      case 1124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_p_roi_corner_y_prpb_in_op_m(&_has_bits_);
          ap_p_roi_corner_y_prpb_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PLANNING_HORIZON_M = 1134;
      case 1134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_p_planning_horizon_m(&_has_bits_);
          ap_p_planning_horizon_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPB_OUT_M = 1213;
      case 1213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_mp_p_roi_corner_x_prpb_out_m(&_has_bits_);
          mp_p_roi_corner_x_prpb_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED = 1219;
      case 1219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ap_p_ratio_add_align_radius_angled(&_has_bits_);
          ap_p_ratio_add_align_radius_angled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M = 1230;
      case 1230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_p_pre_prep_align_radius_ext_m(&_has_bits_);
          ap_p_pre_prep_align_radius_ext_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 1265;
      case 1265:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_p_roi_corner_x_prpf_out_op_m(&_has_bits_);
          ap_p_roi_corner_x_prpf_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_SNAP_RATIO_TO_AVOID_COLL = 1267;
      case 1267:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_p_snap_ratio_to_avoid_coll(&_has_bits_);
          ap_p_snap_ratio_to_avoid_coll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 1279;
      case 1279:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_mp_p_roi_corner_y_angr_out_op_m(&_has_bits_);
          mp_p_roi_corner_y_angr_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M = 1306;
      case 1306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_p_min_long_dev_for_straight_repl_par_m(&_has_bits_);
          ap_p_min_long_dev_for_straight_repl_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPB_IN_M = 1309;
      case 1309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_p_roi_corner_x_prpb_in_m(&_has_bits_);
          ap_p_roi_corner_x_prpb_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M = 1316;
      case 1316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_p_parkout_ego_dist_to_fake_objects_perp_m(&_has_bits_);
          ap_p_parkout_ego_dist_to_fake_objects_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 1350;
      case 1350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_mp_p_roi_corner_x_angs_out_op_m(&_has_bits_);
          mp_p_roi_corner_x_angs_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPF_IN_M = 1373;
      case 1373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_mp_p_roi_corner_y_prpf_in_m(&_has_bits_);
          mp_p_roi_corner_y_prpf_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PARKOUT_BLIND_DISTANCE_PAR_M = 1379;
      case 1379:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ap_p_parkout_blind_distance_par_m(&_has_bits_);
          ap_p_parkout_blind_distance_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_SAVE_EM_REPLANNING_NU = 1380;
      case 1380:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ap_p_save_em_replanning_nu(&_has_bits_);
          ap_p_save_em_replanning_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGR_IN_M = 1400;
      case 1400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_p_roi_corner_x_angr_in_m(&_has_bits_);
          ap_p_roi_corner_x_angr_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPF_OUT_M = 1403;
      case 1403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_mp_p_roi_corner_x_prpf_out_m(&_has_bits_);
          mp_p_roi_corner_x_prpf_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_DIST_PARA_WO_BCKT_M = 1432;
      case 1432:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_p_max_dist_para_wo_bckt_m(&_has_bits_);
          ap_p_max_dist_para_wo_bckt_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PAR_OUT_OP_M = 1447;
      case 1447:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_p_roi_corner_x_par_out_op_m(&_has_bits_);
          ap_p_roi_corner_x_par_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_LENGTH_SHORT_CLO_TRANSIT_M = 1474;
      case 1474:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_p_length_short_clo_transit_m(&_has_bits_);
          ap_p_length_short_clo_transit_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_ANG_DIFF_INFLECTION_RAD = 1534;
      case 1534:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_p_min_ang_diff_inflection_rad(&_has_bits_);
          ap_p_min_ang_diff_inflection_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 1540;
      case 1540:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_p_roi_corner_y_angs_in_op_m(&_has_bits_);
          ap_p_roi_corner_y_angs_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_M = 1550;
      case 1550:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_mp_p_roi_corner_y_prpf_out_m(&_has_bits_);
          mp_p_roi_corner_y_prpf_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD = 1553;
      case 1553:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_p_max_orientation_dev_for_straight_repl_par_rad(&_has_bits_);
          ap_p_max_orientation_dev_for_straight_repl_par_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD = 1565;
      case 1565:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_p_ratio_distance_shorting_first_strk_fwd(&_has_bits_);
          ap_p_ratio_distance_shorting_first_strk_fwd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_ENABLE_DYNAMIC_REPLANNING = 1584;
      case 1584:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_ap_p_enable_dynamic_replanning(&_has_bits_);
          ap_p_enable_dynamic_replanning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_NUM_CLO_VEL_LOOP_NU = 1589;
      case 1589:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ap_p_max_num_clo_vel_loop_nu(&_has_bits_);
          ap_p_max_num_clo_vel_loop_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGS_IN_M = 1593;
      case 1593:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_mp_p_roi_corner_y_angs_in_m(&_has_bits_);
          mp_p_roi_corner_y_angs_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGR_IN_OP_M = 1606;
      case 1606:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_p_roi_corner_x_angr_in_op_m(&_has_bits_);
          ap_p_roi_corner_x_angr_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU = 1624;
      case 1624:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ap_p_bstpose_stepsz_drvnpath_nu(&_has_bits_);
          ap_p_bstpose_stepsz_drvnpath_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PAR_OUT_M = 1652;
      case 1652:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_mp_p_roi_corner_y_par_out_m(&_has_bits_);
          mp_p_roi_corner_y_par_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_DEVIATION_CLOTHOID_M = 1761;
      case 1761:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_p_max_deviation_clothoid_m(&_has_bits_);
          ap_p_max_deviation_clothoid_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PARKOUT_BLIND_DISTANCE_ANG_M = 1813;
      case 1813:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_p_parkout_blind_distance_ang_m(&_has_bits_);
          ap_p_parkout_blind_distance_ang_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_M = 1826;
      case 1826:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_mp_p_roi_corner_y_angr_out_m(&_has_bits_);
          mp_p_roi_corner_y_angr_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 1848;
      case 1848:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_p_roi_corner_y_prpb_out_op_m(&_has_bits_);
          ap_p_roi_corner_y_prpb_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD = 1893;
      case 1893:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ap_p_enable_first_stroke_fwd_perp_bwd(&_has_bits_);
          ap_p_enable_first_stroke_fwd_perp_bwd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MISALIGNED_START_POSE_ANGLE_RAD = 1897;
      case 1897:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_misaligned_start_pose_angle_rad(&_has_bits_);
          ap_p_misaligned_start_pose_angle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD = 1916;
      case 1916:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_p_straight_conv_allowed_ang_rad(&_has_bits_);
          ap_p_straight_conv_allowed_ang_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PARKOUT_PAR_SAFTEY_DIST_M = 1932;
      case 1932:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_p_parkout_par_saftey_dist_m(&_has_bits_);
          ap_p_parkout_par_saftey_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MIN_NUM_VALID_TO_OUTPUT_NU = 1944;
      case 1944:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ap_p_min_num_valid_to_output_nu(&_has_bits_);
          ap_p_min_num_valid_to_output_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M = 1975;
      case 1975:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_par_nodynreplan_dist_to_stop_m(&_has_bits_);
          ap_p_par_nodynreplan_dist_to_stop_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_DISABLE_PLANNER_NU = 1985;
      case 1985:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ap_p_disable_planner_nu(&_has_bits_);
          ap_p_disable_planner_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_M = 1992;
      case 1992:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_mp_p_roi_corner_y_prpb_out_m(&_has_bits_);
          mp_p_roi_corner_y_prpb_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_FWD_IN_LONG_DEV_FCTR = 2024;
      case 2024:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_p_perp_fwd_in_long_dev_fctr(&_has_bits_);
          ap_p_perp_fwd_in_long_dev_fctr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_ENABLE_LAST_CALL_MANEUVER_PERP = 2093;
      case 2093:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ap_p_enable_last_call_maneuver_perp(&_has_bits_);
          ap_p_enable_last_call_maneuver_perp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_PARKING_VEL_BWD_MPS = 2140;
      case 2140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_p_max_parking_vel_bwd_mps(&_has_bits_);
          ap_p_max_parking_vel_bwd_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 2187;
      case 2187:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_p_roi_corner_y_prpf_in_op_m(&_has_bits_);
          ap_p_roi_corner_y_prpf_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGS_IN_M = 2193;
      case 2193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_p_roi_corner_y_angs_in_m(&_has_bits_);
          ap_p_roi_corner_y_angs_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_EDGE_LENGTH_M = 2199;
      case 2199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_roi_edge_length_m(&_has_bits_);
          ap_p_roi_edge_length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_END_LIMIT_VEL_DIST_M = 2236;
      case 2236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_p_perp_end_limit_vel_dist_m(&_has_bits_);
          ap_p_perp_end_limit_vel_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_FACTOR_SAFETY_NU = 2249;
      case 2249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_factor_safety_nu(&_has_bits_);
          ap_p_factor_safety_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PAR_OUT_M = 2268;
      case 2268:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_p_roi_corner_y_par_out_m(&_has_bits_);
          ap_p_roi_corner_y_par_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 2272;
      case 2272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_mp_p_roi_corner_y_prpb_in_op_m(&_has_bits_);
          mp_p_roi_corner_y_prpb_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PAR_IN_OP_M = 2277;
      case 2277:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_mp_p_roi_corner_x_par_in_op_m(&_has_bits_);
          mp_p_roi_corner_x_par_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PAR_OUT_OP_M = 2339;
      case 2339:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mp_p_roi_corner_x_par_out_op_m(&_has_bits_);
          mp_p_roi_corner_x_par_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_ENABLE_ONE_STROKE_PARKING = 2387;
      case 2387:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ap_p_enable_one_stroke_parking(&_has_bits_);
          ap_p_enable_one_stroke_parking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M = 2395;
      case 2395:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_p_parkout_ego_dist_to_fake_objects_ang_m(&_has_bits_);
          ap_p_parkout_ego_dist_to_fake_objects_ang_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_common.fc_trjpla_vehicle_params.FC_TRJPLA_Vehicle_Params vehicleParams = 2431;
      case 2431:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicleparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_M = 2450;
      case 2450:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_p_roi_corner_y_angs_out_m(&_has_bits_);
          ap_p_roi_corner_y_angs_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_PARKING_VEL_FWD_MPS = 2458;
      case 2458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_p_max_parking_vel_fwd_mps(&_has_bits_);
          ap_p_max_parking_vel_fwd_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_DIST_START_TGTAXIS_M = 2463;
      case 2463:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ap_p_min_dist_start_tgtaxis_m(&_has_bits_);
          ap_p_min_dist_start_tgtaxis_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PAR_IN_OP_M = 2474;
      case 2474:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_p_roi_corner_y_par_in_op_m(&_has_bits_);
          ap_p_roi_corner_y_par_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 2500;
      case 2500:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_p_roi_corner_x_prpb_out_op_m(&_has_bits_);
          ap_p_roi_corner_x_prpb_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PRP_FWD_R_SCALE_1ST_STRK_M = 2511;
      case 2511:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_ap_p_prp_fwd_r_scale_1st_strk_m(&_has_bits_);
          ap_p_prp_fwd_r_scale_1st_strk_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M = 2525;
      case 2525:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_p_inc_cir_length_for_scur_out_m(&_has_bits_);
          ap_p_inc_cir_length_for_scur_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 2563;
      case 2563:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mp_p_roi_corner_x_angr_out_op_m(&_has_bits_);
          mp_p_roi_corner_x_angr_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 2573;
      case 2573:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_p_roi_corner_y_prpf_out_op_m(&_has_bits_);
          ap_p_roi_corner_y_prpf_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_OUT_VRTX_RADIUS_SCALING_NU = 2621;
      case 2621:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_p_out_vrtx_radius_scaling_nu(&_has_bits_);
          ap_p_out_vrtx_radius_scaling_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M = 2674;
      case 2674:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_p_max_lat_dev_for_straight_repl_par_m(&_has_bits_);
          ap_p_max_lat_dev_for_straight_repl_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_RATIO_CONFINED_SPACE = 2679;
      case 2679:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_ratio_confined_space(&_has_bits_);
          ap_p_ratio_confined_space_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 2688;
      case 2688:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_mp_p_roi_corner_y_angs_in_op_m(&_has_bits_);
          mp_p_roi_corner_y_angs_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_ALIGNMENT_RADIUS_M = 2697;
      case 2697:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_max_alignment_radius_m(&_has_bits_);
          ap_p_max_alignment_radius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGR_IN_OP_M = 2754;
      case 2754:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_mp_p_roi_corner_x_angr_in_op_m(&_has_bits_);
          mp_p_roi_corner_x_angr_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_RADIUS_ADD_CIRCLE_M = 2785;
      case 2785:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_p_min_radius_add_circle_m(&_has_bits_);
          ap_p_min_radius_add_circle_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGS_OUT_M = 2791;
      case 2791:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_p_roi_corner_x_angs_out_m(&_has_bits_);
          ap_p_roi_corner_x_angs_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PARKOUT_BLIND_DISTANCE_PERP_M = 2794;
      case 2794:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_p_parkout_blind_distance_perp_m(&_has_bits_);
          ap_p_parkout_blind_distance_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_ALIGNMENT_ANGLE_RAD = 2798;
      case 2798:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_p_min_alignment_angle_rad(&_has_bits_);
          ap_p_min_alignment_angle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M = 2817;
      case 2817:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_p_max_prep_stroke_len_straight_m(&_has_bits_);
          ap_p_max_prep_stroke_len_straight_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE = 2846;
      case 2846:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_ap_p_max_attempt_wrap_up_triangle(&_has_bits_);
          ap_p_max_attempt_wrap_up_triangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M = 2861;
      case 2861:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_p_parkout_ego_dist_to_fake_objects_par_m(&_has_bits_);
          ap_p_parkout_ego_dist_to_fake_objects_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M = 2917;
      case 2917:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_p_max_height_of_triangle_clo_collision_m(&_has_bits_);
          ap_p_max_height_of_triangle_clo_collision_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_VIRTUAL_OBJ_DIST_TO_TP_M = 2931;
      case 2931:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_ap_p_virtual_obj_dist_to_tp_m(&_has_bits_);
          ap_p_virtual_obj_dist_to_tp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_RATIO_ADD_MIN_RADIUS_ANGLED = 2952;
      case 2952:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_p_ratio_add_min_radius_angled(&_has_bits_);
          ap_p_ratio_add_min_radius_angled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_P_PARKOUT_ENABLE_FAKE_OBJECTS = 2997;
      case 2997:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ap_p_parkout_enable_fake_objects(&_has_bits_);
          ap_p_parkout_enable_fake_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 3002;
      case 3002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_mp_p_roi_corner_y_angs_out_op_m(&_has_bits_);
          mp_p_roi_corner_y_angs_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGR_IN_M = 3024;
      case 3024:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_mp_p_roi_corner_x_angr_in_m(&_has_bits_);
          mp_p_roi_corner_x_angr_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_BWD_IN_YAW_DEV_FCTR = 3031;
      case 3031:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_perp_bwd_in_yaw_dev_fctr(&_has_bits_);
          ap_p_perp_bwd_in_yaw_dev_fctr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPF_IN_M = 3061;
      case 3061:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_p_roi_corner_y_prpf_in_m(&_has_bits_);
          ap_p_roi_corner_y_prpf_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_FWD_IN_LAT_DEV_FCTR = 3062;
      case 3062:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_p_perp_fwd_in_lat_dev_fctr(&_has_bits_);
          ap_p_perp_fwd_in_lat_dev_fctr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M = 3124;
      case 3124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_p_max_scurve_dist_to_tgt_pose_m(&_has_bits_);
          ap_p_max_scurve_dist_to_tgt_pose_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGS_OUT_M = 3126;
      case 3126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_mp_p_roi_corner_x_angs_out_m(&_has_bits_);
          mp_p_roi_corner_x_angs_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PAR_IN_M = 3130;
      case 3130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_mp_p_roi_corner_y_par_in_m(&_has_bits_);
          mp_p_roi_corner_y_par_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 3180;
      case 3180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_p_roi_corner_x_angs_out_op_m(&_has_bits_);
          ap_p_roi_corner_x_angs_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PAR_IN_OP_M = 3273;
      case 3273:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_p_roi_corner_x_par_in_op_m(&_has_bits_);
          ap_p_roi_corner_x_par_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_RADIUS_EXT_PERP_FIN_STRO_M = 3318;
      case 3318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_p_radius_ext_perp_fin_stro_m(&_has_bits_);
          ap_p_radius_ext_perp_fin_stro_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPF_IN_M = 3348;
      case 3348:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_mp_p_roi_corner_x_prpf_in_m(&_has_bits_);
          mp_p_roi_corner_x_prpf_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M = 3351;
      case 3351:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_par_repl_max_extend_dist_after_scurve_m(&_has_bits_);
          ap_p_par_repl_max_extend_dist_after_scurve_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 3367;
      case 3367:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_p_roi_corner_y_angr_in_op_m(&_has_bits_);
          ap_p_roi_corner_y_angr_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGR_IN_M = 3377;
      case 3377:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_p_roi_corner_y_angr_in_m(&_has_bits_);
          ap_p_roi_corner_y_angr_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_DIST_PERP_WO_BCKT_M = 3393;
      case 3393:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_p_max_dist_perp_wo_bckt_m(&_has_bits_);
          ap_p_max_dist_perp_wo_bckt_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PRPB_IN_M = 3412;
      case 3412:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_p_roi_corner_y_prpb_in_m(&_has_bits_);
          ap_p_roi_corner_y_prpb_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_ANGS_IN_OP_M = 3429;
      case 3429:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_p_roi_corner_x_angs_in_op_m(&_has_bits_);
          ap_p_roi_corner_x_angs_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PAR_IN_OP_M = 3462;
      case 3462:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_mp_p_roi_corner_y_par_in_op_m(&_has_bits_);
          mp_p_roi_corner_y_par_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_POLY_VEL_MPS = 3463;
      case 3463:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_p_max_poly_vel_mps(&_has_bits_);
          ap_p_max_poly_vel_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M = 3518;
      case 3518:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_p_par_max_dist_for_sym_scurve_m(&_has_bits_);
          ap_p_par_max_dist_for_sym_scurve_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 3541;
      case 3541:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_p_roi_corner_y_angr_out_op_m(&_has_bits_);
          ap_p_roi_corner_y_angr_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 3547;
      case 3547:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_mp_p_roi_corner_x_prpf_out_op_m(&_has_bits_);
          mp_p_roi_corner_x_prpf_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 3602;
      case 3602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_mp_p_roi_corner_y_prpb_out_op_m(&_has_bits_);
          mp_p_roi_corner_y_prpb_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_BEST_PATH_GOAL_DEV_THR_NU = 3633;
      case 3633:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_p_best_path_goal_dev_thr_nu(&_has_bits_);
          ap_p_best_path_goal_dev_thr_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PAR_OUT_M = 3645;
      case 3645:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_mp_p_roi_corner_x_par_out_m(&_has_bits_);
          mp_p_roi_corner_x_par_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_POUT_PERP_STRAIGHT_EXT_M = 3650;
      case 3650:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_p_pout_perp_straight_ext_m(&_has_bits_);
          ap_p_pout_perp_straight_ext_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PAR_IN_M = 3665;
      case 3665:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_p_roi_corner_y_par_in_m(&_has_bits_);
          ap_p_roi_corner_y_par_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_ANGS_IN_M = 3696;
      case 3696:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_mp_p_roi_corner_x_angs_in_m(&_has_bits_);
          mp_p_roi_corner_x_angs_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_P_ADAPT_VEL_Y_VELOCITY_MPS = 3711;
      case 3711:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _internal_add_ap_p_adapt_vel_y_velocity_mps(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_p_adapt_vel_y_velocity_mps(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M = 3756;
      case 3756:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_p_min_prep_stroke_len_straight_m(&_has_bits_);
          ap_p_min_prep_stroke_len_straight_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 3782;
      case 3782:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_p_roi_corner_y_par_out_op_m(&_has_bits_);
          ap_p_roi_corner_y_par_out_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ROI_CORNER_X_PRPB_IN_OP_M = 3845;
      case 3845:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_p_roi_corner_x_prpb_in_op_m(&_has_bits_);
          ap_p_roi_corner_x_prpb_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M = 3895;
      case 3895:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_p_dist_to_pb_for_misal_start_pose_planning_m(&_has_bits_);
          ap_p_dist_to_pb_for_misal_start_pose_planning_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_M = 3907;
      case 3907:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mp_p_roi_corner_y_angs_out_m(&_has_bits_);
          mp_p_roi_corner_y_angs_out_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPF_IN_OP_M = 3950;
      case 3950:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_mp_p_roi_corner_x_prpf_in_op_m(&_has_bits_);
          mp_p_roi_corner_x_prpf_in_op_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M = 4001;
      case 4001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_p_add_straight_to_wheelstopper_m(&_has_bits_);
          ap_p_add_straight_to_wheelstopper_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD = 2716735;
      case 2716735:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ap_p_max_distance_shorten_first_strk_fwd(&_has_bits_);
          ap_p_max_distance_shorten_first_strk_fwd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_Y_ANGR_IN_M = 3222586;
      case 3222586:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_mp_p_roi_corner_y_angr_in_m(&_has_bits_);
          mp_p_roi_corner_y_angr_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PAR_IN_M = 8258625;
      case 8258625:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_mp_p_roi_corner_x_par_in_m(&_has_bits_);
          mp_p_roi_corner_x_par_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float MP_P_ROI_CORNER_X_PRPB_IN_M = 10939324;
      case 10939324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_mp_p_roi_corner_x_prpb_in_m(&_has_bits_);
          mp_p_roi_corner_x_prpb_in_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_BEST_PATH_LENGTH_THR_M = 11680804;
      case 11680804:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_p_best_path_length_thr_m(&_has_bits_);
          ap_p_best_path_length_thr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M = 14945121;
      case 14945121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(&_has_bits_);
          ap_p_perp_straight_min_bwd_dist_fwd_strk_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TRJPLA_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 AP_P_NUM_TA_POS_EVAL = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ap_p_num_ta_pos_eval(), target);
  }

  // optional float AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_ap_p_max_dist_tp_to_intermp_one_stroke_m(), target);
  }

  // repeated float AP_P_ADAPT_VEL_X_DISTANCE_M = 65;
  for (int i = 0, n = this->_internal_ap_p_adapt_vel_x_distance_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(65, this->_internal_ap_p_adapt_vel_x_distance_m(i), target);
  }

  // optional float AP_P_PLAN_DISTANCE_MARGIN_M = 88;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(88, this->_internal_ap_p_plan_distance_margin_m(), target);
  }

  // optional float AP_P_RATIO_PRE_PREP_ALIGN_AXIS = 94;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(94, this->_internal_ap_p_ratio_pre_prep_align_axis(), target);
  }

  // optional float AP_P_DIRECT_FWD_STEP_DIST_M = 105;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(105, this->_internal_ap_p_direct_fwd_step_dist_m(), target);
  }

  // optional float AP_P_MAX_VEL_IN_PAR_SLOT_MPS = 134;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(134, this->_internal_ap_p_max_vel_in_par_slot_mps(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PAR_OUT_M = 149;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(149, this->_internal_ap_p_roi_corner_x_par_out_m(), target);
  }

  // optional uint32 AP_P_MAX_NUM_CLOTHOID_LOOP_NU = 183;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(183, this->_internal_ap_p_max_num_clothoid_loop_nu(), target);
  }

  // optional float AP_P_ROI_CORNER_X_ANGS_IN_M = 216;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(216, this->_internal_ap_p_roi_corner_x_angs_in_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_M = 223;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(223, this->_internal_ap_p_roi_corner_y_prpf_out_m(), target);
  }

  // optional float AP_P_ENV_FLICKERING_COMP_M = 226;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(226, this->_internal_ap_p_env_flickering_comp_m(), target);
  }

  // optional .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params taposdParams = 236;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        236, _Internal::taposdparams(this), target, stream);
  }

  // optional float MP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 238;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(238, this->_internal_mp_p_roi_corner_x_prpb_out_op_m(), target);
  }

  // optional float AP_P_SAFE_PASS_MARGIN_M = 240;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(240, this->_internal_ap_p_safe_pass_margin_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool AP_P_ENABLE_FIRST_STRK_FWD_PAR = 257;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(257, this->_internal_ap_p_enable_first_strk_fwd_par(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float AP_P_ROI_CORNER_X_PAR_IN_M = 276;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(276, this->_internal_ap_p_roi_corner_x_par_in_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_M = 281;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(281, this->_internal_ap_p_roi_corner_y_prpb_out_m(), target);
  }

  // optional float AP_P_PERP_BWD_IN_LONG_DEV_FCTR = 292;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(292, this->_internal_ap_p_perp_bwd_in_long_dev_fctr(), target);
  }

  // optional float AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG = 310;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(310, this->_internal_ap_p_direct_fwd_start_angle_tol_deg(), target);
  }

  // optional float AP_P_ENDPOSE_NEIGHBOUR_DIST_M = 335;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(335, this->_internal_ap_p_endpose_neighbour_dist_m(), target);
  }

  // optional float AP_P_STEP_MOVING_RATIO_CLO_COLL = 343;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(343, this->_internal_ap_p_step_moving_ratio_clo_coll(), target);
  }

  // optional float MP_P_ROI_EDGE_LENGTH_M = 373;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(373, this->_internal_mp_p_roi_edge_length_m(), target);
  }

  // optional uint32 AP_P_ADAPT_VEL_SIZE_NU = 395;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(395, this->_internal_ap_p_adapt_vel_size_nu(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 419;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(419, this->_internal_mp_p_roi_corner_y_angr_in_op_m(), target);
  }

  // optional .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params sysFuncParams = 458;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        458, _Internal::sysfuncparams(this), target, stream);
  }

  // optional float AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP = 476;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(476, this->_internal_ap_p_distance_for_last_call_man_perp(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGS_IN_OP_M = 481;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(481, this->_internal_mp_p_roi_corner_x_angs_in_op_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_M = 499;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(499, this->_internal_ap_p_roi_corner_y_angr_out_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 578;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(578, this->_internal_mp_p_roi_corner_y_par_out_op_m(), target);
  }

  // optional uint32 AP_P_NUM_POSE_CHECK_DRVNPATH = 586;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(586, this->_internal_ap_p_num_pose_check_drvnpath(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PRPB_OUT_M = 620;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(620, this->_internal_ap_p_roi_corner_x_prpb_out_m(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float AP_P_ROI_CORNER_X_ANGR_OUT_M = 646;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(646, this->_internal_ap_p_roi_corner_x_angr_out_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 656;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(656, this->_internal_ap_p_roi_corner_y_angs_out_op_m(), target);
  }

  // optional float AP_P_SAFETY_TURN_RADIUS_AXIS_M = 662;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(662, this->_internal_ap_p_safety_turn_radius_axis_m(), target);
  }

  // optional float AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M = 698;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(698, this->_internal_ap_p_long_shift_intermed_ws_tapos_m(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool AP_P_DISABLE_SCAN_GREAT_DIST_NU = 727;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(727, this->_internal_ap_p_disable_scan_great_dist_nu(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float AP_P_CLOTHOID_VEL_TUNE_STEP_MPS = 751;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(751, this->_internal_ap_p_clothoid_vel_tune_step_mps(), target);
  }

  // repeated uint32 AP_P_KEY_CORNERS_WHEEL = 754;
  for (int i = 0, n = this->_internal_ap_p_key_corners_wheel_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(754, this->_internal_ap_p_key_corners_wheel(i), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 807;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(807, this->_internal_mp_p_roi_corner_y_prpf_out_op_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 809;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(809, this->_internal_ap_p_roi_corner_x_angr_out_op_m(), target);
  }

  // optional float AP_P_MIN_RADIUS_ADD_CLOTHOID_M = 841;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(841, this->_internal_ap_p_min_radius_add_clothoid_m(), target);
  }

  // optional float AP_P_ASY_CLO_ST_MIN_LENGTH_M = 862;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(862, this->_internal_ap_p_asy_clo_st_min_length_m(), target);
  }

  // optional float AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN = 881;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(881, this->_internal_ap_p_ratio_straight_prepare_fwd_stroke_prep_align(), target);
  }

  // optional float AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS = 883;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(883, this->_internal_ap_p_max_vel_close_obstacle_mps(), target);
  }

  // optional float AP_P_STRAIGHT_PERP_EXTRA_DIST_M = 895;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(895, this->_internal_ap_p_straight_perp_extra_dist_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PRPB_IN_OP_M = 897;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(897, this->_internal_mp_p_roi_corner_x_prpb_in_op_m(), target);
  }

  // optional float AP_P_DESIRED_DIST_TO_OBST_M = 921;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(921, this->_internal_ap_p_desired_dist_to_obst_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PRPF_OUT_M = 938;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(938, this->_internal_ap_p_roi_corner_x_prpf_out_m(), target);
  }

  // optional float AP_P_LENGTH_LONG_CLO_TRANSIT_M = 951;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(951, this->_internal_ap_p_length_long_clo_transit_m(), target);
  }

  // optional float AP_P_FACTOR_DETERMINATION_NU = 952;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(952, this->_internal_ap_p_factor_determination_nu(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PRPF_IN_M = 956;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(956, this->_internal_ap_p_roi_corner_x_prpf_in_m(), target);
  }

  // optional uint32 AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP = 965;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(965, this->_internal_ap_p_parkout_par_angle_max_loop(), target);
  }

  // optional float AP_P_PERP_FWD_IN_YAW_DEV_FCTR = 968;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(968, this->_internal_ap_p_perp_fwd_in_yaw_dev_fctr(), target);
  }

  // repeated uint32 AP_P_KEY_CORNERS_CARBODY = 978;
  for (int i = 0, n = this->_internal_ap_p_key_corners_carbody_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(978, this->_internal_ap_p_key_corners_carbody(i), target);
  }

  // optional float AP_P_BEST_PATH_TIME_THR_S = 983;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(983, this->_internal_ap_p_best_path_time_thr_s(), target);
  }

  // optional float AP_P_DIST_START_END_KEEP_PATH_M = 994;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(994, this->_internal_ap_p_dist_start_end_keep_path_m(), target);
  }

  // optional float AP_P_PERP_BWD_IN_LAT_DEV_FCTR = 1001;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1001, this->_internal_ap_p_perp_bwd_in_lat_dev_fctr(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PRPF_IN_OP_M = 1002;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1002, this->_internal_ap_p_roi_corner_x_prpf_in_op_m(), target);
  }

  // optional float AP_P_ADD_STRAIGHT_FSF_M = 1008;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1008, this->_internal_ap_p_add_straight_fsf_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PRPB_IN_M = 1020;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1020, this->_internal_mp_p_roi_corner_y_prpb_in_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL = 1038;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1038, this->_internal_ap_p_enable_out_in_strokes_replan_parallel(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float MP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 1039;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1039, this->_internal_mp_p_roi_corner_y_prpf_in_op_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD = 1057;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1057, this->_internal_ap_p_enable_early_steer_first_strk_fwd(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float AP_P_MIN_PARKING_VEL_MPS = 1067;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1067, this->_internal_ap_p_min_parking_vel_mps(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGR_OUT_M = 1111;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1111, this->_internal_mp_p_roi_corner_x_angr_out_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 1124;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1124, this->_internal_ap_p_roi_corner_y_prpb_in_op_m(), target);
  }

  // optional float AP_P_PLANNING_HORIZON_M = 1134;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1134, this->_internal_ap_p_planning_horizon_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PRPB_OUT_M = 1213;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1213, this->_internal_mp_p_roi_corner_x_prpb_out_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED = 1219;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1219, this->_internal_ap_p_ratio_add_align_radius_angled(), target);
  }

  // optional float AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M = 1230;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1230, this->_internal_ap_p_pre_prep_align_radius_ext_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 1265;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1265, this->_internal_ap_p_roi_corner_x_prpf_out_op_m(), target);
  }

  // optional float AP_P_SNAP_RATIO_TO_AVOID_COLL = 1267;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1267, this->_internal_ap_p_snap_ratio_to_avoid_coll(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 1279;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1279, this->_internal_mp_p_roi_corner_y_angr_out_op_m(), target);
  }

  // optional float AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M = 1306;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1306, this->_internal_ap_p_min_long_dev_for_straight_repl_par_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PRPB_IN_M = 1309;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1309, this->_internal_ap_p_roi_corner_x_prpb_in_m(), target);
  }

  // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M = 1316;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1316, this->_internal_ap_p_parkout_ego_dist_to_fake_objects_perp_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 1350;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1350, this->_internal_mp_p_roi_corner_x_angs_out_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PRPF_IN_M = 1373;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1373, this->_internal_mp_p_roi_corner_y_prpf_in_m(), target);
  }

  // optional float AP_P_PARKOUT_BLIND_DISTANCE_PAR_M = 1379;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1379, this->_internal_ap_p_parkout_blind_distance_par_m(), target);
  }

  // optional uint32 AP_P_SAVE_EM_REPLANNING_NU = 1380;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1380, this->_internal_ap_p_save_em_replanning_nu(), target);
  }

  // optional float AP_P_ROI_CORNER_X_ANGR_IN_M = 1400;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1400, this->_internal_ap_p_roi_corner_x_angr_in_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PRPF_OUT_M = 1403;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1403, this->_internal_mp_p_roi_corner_x_prpf_out_m(), target);
  }

  // optional float AP_P_MAX_DIST_PARA_WO_BCKT_M = 1432;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1432, this->_internal_ap_p_max_dist_para_wo_bckt_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PAR_OUT_OP_M = 1447;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1447, this->_internal_ap_p_roi_corner_x_par_out_op_m(), target);
  }

  // optional float AP_P_LENGTH_SHORT_CLO_TRANSIT_M = 1474;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1474, this->_internal_ap_p_length_short_clo_transit_m(), target);
  }

  // optional float AP_P_MIN_ANG_DIFF_INFLECTION_RAD = 1534;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1534, this->_internal_ap_p_min_ang_diff_inflection_rad(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 1540;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1540, this->_internal_ap_p_roi_corner_y_angs_in_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_M = 1550;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1550, this->_internal_mp_p_roi_corner_y_prpf_out_m(), target);
  }

  // optional float AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD = 1553;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1553, this->_internal_ap_p_max_orientation_dev_for_straight_repl_par_rad(), target);
  }

  // optional float AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD = 1565;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1565, this->_internal_ap_p_ratio_distance_shorting_first_strk_fwd(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool AP_P_ENABLE_DYNAMIC_REPLANNING = 1584;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1584, this->_internal_ap_p_enable_dynamic_replanning(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 AP_P_MAX_NUM_CLO_VEL_LOOP_NU = 1589;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1589, this->_internal_ap_p_max_num_clo_vel_loop_nu(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_ANGS_IN_M = 1593;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1593, this->_internal_mp_p_roi_corner_y_angs_in_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_ANGR_IN_OP_M = 1606;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1606, this->_internal_ap_p_roi_corner_x_angr_in_op_m(), target);
  }

  // optional uint32 AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU = 1624;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1624, this->_internal_ap_p_bstpose_stepsz_drvnpath_nu(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional float MP_P_ROI_CORNER_Y_PAR_OUT_M = 1652;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1652, this->_internal_mp_p_roi_corner_y_par_out_m(), target);
  }

  // optional float AP_P_MAX_DEVIATION_CLOTHOID_M = 1761;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1761, this->_internal_ap_p_max_deviation_clothoid_m(), target);
  }

  // optional float AP_P_PARKOUT_BLIND_DISTANCE_ANG_M = 1813;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1813, this->_internal_ap_p_parkout_blind_distance_ang_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_M = 1826;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1826, this->_internal_mp_p_roi_corner_y_angr_out_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 1848;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1848, this->_internal_ap_p_roi_corner_y_prpb_out_op_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD = 1893;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1893, this->_internal_ap_p_enable_first_stroke_fwd_perp_bwd(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional float AP_P_MISALIGNED_START_POSE_ANGLE_RAD = 1897;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1897, this->_internal_ap_p_misaligned_start_pose_angle_rad(), target);
  }

  // optional float AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD = 1916;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1916, this->_internal_ap_p_straight_conv_allowed_ang_rad(), target);
  }

  // optional float AP_P_PARKOUT_PAR_SAFTEY_DIST_M = 1932;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1932, this->_internal_ap_p_parkout_par_saftey_dist_m(), target);
  }

  // optional uint32 AP_P_MIN_NUM_VALID_TO_OUTPUT_NU = 1944;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1944, this->_internal_ap_p_min_num_valid_to_output_nu(), target);
  }

  // optional float AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M = 1975;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1975, this->_internal_ap_p_par_nodynreplan_dist_to_stop_m(), target);
  }

  // optional bool AP_P_DISABLE_PLANNER_NU = 1985;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1985, this->_internal_ap_p_disable_planner_nu(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_M = 1992;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1992, this->_internal_mp_p_roi_corner_y_prpb_out_m(), target);
  }

  // optional float AP_P_PERP_FWD_IN_LONG_DEV_FCTR = 2024;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2024, this->_internal_ap_p_perp_fwd_in_long_dev_fctr(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool AP_P_ENABLE_LAST_CALL_MANEUVER_PERP = 2093;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2093, this->_internal_ap_p_enable_last_call_maneuver_perp(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float AP_P_MAX_PARKING_VEL_BWD_MPS = 2140;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2140, this->_internal_ap_p_max_parking_vel_bwd_mps(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 2187;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2187, this->_internal_ap_p_roi_corner_y_prpf_in_op_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_ANGS_IN_M = 2193;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2193, this->_internal_ap_p_roi_corner_y_angs_in_m(), target);
  }

  // optional float AP_P_ROI_EDGE_LENGTH_M = 2199;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2199, this->_internal_ap_p_roi_edge_length_m(), target);
  }

  // optional float AP_P_PERP_END_LIMIT_VEL_DIST_M = 2236;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2236, this->_internal_ap_p_perp_end_limit_vel_dist_m(), target);
  }

  // optional float AP_P_FACTOR_SAFETY_NU = 2249;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2249, this->_internal_ap_p_factor_safety_nu(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PAR_OUT_M = 2268;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2268, this->_internal_ap_p_roi_corner_y_par_out_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 2272;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2272, this->_internal_mp_p_roi_corner_y_prpb_in_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PAR_IN_OP_M = 2277;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2277, this->_internal_mp_p_roi_corner_x_par_in_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PAR_OUT_OP_M = 2339;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2339, this->_internal_mp_p_roi_corner_x_par_out_op_m(), target);
  }

  // optional bool AP_P_ENABLE_ONE_STROKE_PARKING = 2387;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2387, this->_internal_ap_p_enable_one_stroke_parking(), target);
  }

  // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M = 2395;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2395, this->_internal_ap_p_parkout_ego_dist_to_fake_objects_ang_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .pb.ap_common.fc_trjpla_vehicle_params.FC_TRJPLA_Vehicle_Params vehicleParams = 2431;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2431, _Internal::vehicleparams(this), target, stream);
  }

  cached_has_bits = _has_bits_[3];
  // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_M = 2450;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2450, this->_internal_ap_p_roi_corner_y_angs_out_m(), target);
  }

  // optional float AP_P_MAX_PARKING_VEL_FWD_MPS = 2458;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2458, this->_internal_ap_p_max_parking_vel_fwd_mps(), target);
  }

  // optional float AP_P_MIN_DIST_START_TGTAXIS_M = 2463;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2463, this->_internal_ap_p_min_dist_start_tgtaxis_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PAR_IN_OP_M = 2474;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2474, this->_internal_ap_p_roi_corner_y_par_in_op_m(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional float AP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 2500;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2500, this->_internal_ap_p_roi_corner_x_prpb_out_op_m(), target);
  }

  // optional float AP_P_PRP_FWD_R_SCALE_1ST_STRK_M = 2511;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2511, this->_internal_ap_p_prp_fwd_r_scale_1st_strk_m(), target);
  }

  // optional float AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M = 2525;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2525, this->_internal_ap_p_inc_cir_length_for_scur_out_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 2563;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2563, this->_internal_mp_p_roi_corner_x_angr_out_op_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 2573;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2573, this->_internal_ap_p_roi_corner_y_prpf_out_op_m(), target);
  }

  // optional float AP_P_OUT_VRTX_RADIUS_SCALING_NU = 2621;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2621, this->_internal_ap_p_out_vrtx_radius_scaling_nu(), target);
  }

  // optional float AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M = 2674;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2674, this->_internal_ap_p_max_lat_dev_for_straight_repl_par_m(), target);
  }

  // optional float AP_P_RATIO_CONFINED_SPACE = 2679;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2679, this->_internal_ap_p_ratio_confined_space(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 2688;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2688, this->_internal_mp_p_roi_corner_y_angs_in_op_m(), target);
  }

  // optional float AP_P_MAX_ALIGNMENT_RADIUS_M = 2697;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2697, this->_internal_ap_p_max_alignment_radius_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGR_IN_OP_M = 2754;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2754, this->_internal_mp_p_roi_corner_x_angr_in_op_m(), target);
  }

  // optional float AP_P_MIN_RADIUS_ADD_CIRCLE_M = 2785;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2785, this->_internal_ap_p_min_radius_add_circle_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_ANGS_OUT_M = 2791;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2791, this->_internal_ap_p_roi_corner_x_angs_out_m(), target);
  }

  // optional float AP_P_PARKOUT_BLIND_DISTANCE_PERP_M = 2794;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2794, this->_internal_ap_p_parkout_blind_distance_perp_m(), target);
  }

  // optional float AP_P_MIN_ALIGNMENT_ANGLE_RAD = 2798;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2798, this->_internal_ap_p_min_alignment_angle_rad(), target);
  }

  // optional float AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M = 2817;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2817, this->_internal_ap_p_max_prep_stroke_len_straight_m(), target);
  }

  // optional uint32 AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE = 2846;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2846, this->_internal_ap_p_max_attempt_wrap_up_triangle(), target);
  }

  // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M = 2861;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2861, this->_internal_ap_p_parkout_ego_dist_to_fake_objects_par_m(), target);
  }

  // optional float AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M = 2917;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2917, this->_internal_ap_p_max_height_of_triangle_clo_collision_m(), target);
  }

  // optional float AP_P_VIRTUAL_OBJ_DIST_TO_TP_M = 2931;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2931, this->_internal_ap_p_virtual_obj_dist_to_tp_m(), target);
  }

  // optional float AP_P_RATIO_ADD_MIN_RADIUS_ANGLED = 2952;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2952, this->_internal_ap_p_ratio_add_min_radius_angled(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool AP_P_PARKOUT_ENABLE_FAKE_OBJECTS = 2997;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2997, this->_internal_ap_p_parkout_enable_fake_objects(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 3002;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3002, this->_internal_mp_p_roi_corner_y_angs_out_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGR_IN_M = 3024;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3024, this->_internal_mp_p_roi_corner_x_angr_in_m(), target);
  }

  // optional float AP_P_PERP_BWD_IN_YAW_DEV_FCTR = 3031;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3031, this->_internal_ap_p_perp_bwd_in_yaw_dev_fctr(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPF_IN_M = 3061;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3061, this->_internal_ap_p_roi_corner_y_prpf_in_m(), target);
  }

  // optional float AP_P_PERP_FWD_IN_LAT_DEV_FCTR = 3062;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3062, this->_internal_ap_p_perp_fwd_in_lat_dev_fctr(), target);
  }

  // optional float AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M = 3124;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3124, this->_internal_ap_p_max_scurve_dist_to_tgt_pose_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGS_OUT_M = 3126;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3126, this->_internal_mp_p_roi_corner_x_angs_out_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PAR_IN_M = 3130;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3130, this->_internal_mp_p_roi_corner_y_par_in_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 3180;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3180, this->_internal_ap_p_roi_corner_x_angs_out_op_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PAR_IN_OP_M = 3273;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3273, this->_internal_ap_p_roi_corner_x_par_in_op_m(), target);
  }

  // optional float AP_P_RADIUS_EXT_PERP_FIN_STRO_M = 3318;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3318, this->_internal_ap_p_radius_ext_perp_fin_stro_m(), target);
  }

  cached_has_bits = _has_bits_[5];
  // optional float MP_P_ROI_CORNER_X_PRPF_IN_M = 3348;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3348, this->_internal_mp_p_roi_corner_x_prpf_in_m(), target);
  }

  // optional float AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M = 3351;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3351, this->_internal_ap_p_par_repl_max_extend_dist_after_scurve_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 3367;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3367, this->_internal_ap_p_roi_corner_y_angr_in_op_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_ANGR_IN_M = 3377;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3377, this->_internal_ap_p_roi_corner_y_angr_in_m(), target);
  }

  // optional float AP_P_MAX_DIST_PERP_WO_BCKT_M = 3393;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3393, this->_internal_ap_p_max_dist_perp_wo_bckt_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PRPB_IN_M = 3412;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3412, this->_internal_ap_p_roi_corner_y_prpb_in_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_ANGS_IN_OP_M = 3429;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3429, this->_internal_ap_p_roi_corner_x_angs_in_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PAR_IN_OP_M = 3462;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3462, this->_internal_mp_p_roi_corner_y_par_in_op_m(), target);
  }

  // optional float AP_P_MAX_POLY_VEL_MPS = 3463;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3463, this->_internal_ap_p_max_poly_vel_mps(), target);
  }

  // optional float AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M = 3518;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3518, this->_internal_ap_p_par_max_dist_for_sym_scurve_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 3541;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3541, this->_internal_ap_p_roi_corner_y_angr_out_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 3547;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3547, this->_internal_mp_p_roi_corner_x_prpf_out_op_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 3602;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3602, this->_internal_mp_p_roi_corner_y_prpb_out_op_m(), target);
  }

  // optional float AP_P_BEST_PATH_GOAL_DEV_THR_NU = 3633;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3633, this->_internal_ap_p_best_path_goal_dev_thr_nu(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PAR_OUT_M = 3645;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3645, this->_internal_mp_p_roi_corner_x_par_out_m(), target);
  }

  // optional float AP_P_POUT_PERP_STRAIGHT_EXT_M = 3650;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3650, this->_internal_ap_p_pout_perp_straight_ext_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PAR_IN_M = 3665;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3665, this->_internal_ap_p_roi_corner_y_par_in_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_ANGS_IN_M = 3696;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3696, this->_internal_mp_p_roi_corner_x_angs_in_m(), target);
  }

  // repeated float AP_P_ADAPT_VEL_Y_VELOCITY_MPS = 3711;
  for (int i = 0, n = this->_internal_ap_p_adapt_vel_y_velocity_mps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3711, this->_internal_ap_p_adapt_vel_y_velocity_mps(i), target);
  }

  // optional float AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M = 3756;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3756, this->_internal_ap_p_min_prep_stroke_len_straight_m(), target);
  }

  // optional float AP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 3782;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3782, this->_internal_ap_p_roi_corner_y_par_out_op_m(), target);
  }

  // optional float AP_P_ROI_CORNER_X_PRPB_IN_OP_M = 3845;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3845, this->_internal_ap_p_roi_corner_x_prpb_in_op_m(), target);
  }

  // optional float AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M = 3895;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3895, this->_internal_ap_p_dist_to_pb_for_misal_start_pose_planning_m(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_M = 3907;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3907, this->_internal_mp_p_roi_corner_y_angs_out_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PRPF_IN_OP_M = 3950;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3950, this->_internal_mp_p_roi_corner_x_prpf_in_op_m(), target);
  }

  // optional float AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M = 4001;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4001, this->_internal_ap_p_add_straight_to_wheelstopper_m(), target);
  }

  // optional float AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD = 2716735;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2716735, this->_internal_ap_p_max_distance_shorten_first_strk_fwd(), target);
  }

  // optional float MP_P_ROI_CORNER_Y_ANGR_IN_M = 3222586;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3222586, this->_internal_mp_p_roi_corner_y_angr_in_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PAR_IN_M = 8258625;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8258625, this->_internal_mp_p_roi_corner_x_par_in_m(), target);
  }

  // optional float MP_P_ROI_CORNER_X_PRPB_IN_M = 10939324;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10939324, this->_internal_mp_p_roi_corner_x_prpb_in_m(), target);
  }

  // optional float AP_P_BEST_PATH_LENGTH_THR_M = 11680804;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11680804, this->_internal_ap_p_best_path_length_thr_m(), target);
  }

  // optional float AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M = 14945121;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14945121, this->_internal_ap_p_perp_straight_min_bwd_dist_fwd_strk_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  return target;
}

size_t FC_TRJPLA_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float AP_P_ADAPT_VEL_X_DISTANCE_M = 65;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_p_adapt_vel_x_distance_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_p_adapt_vel_x_distance_m_size());
    total_size += data_size;
  }

  // repeated uint32 AP_P_KEY_CORNERS_WHEEL = 754;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ap_p_key_corners_wheel_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_p_key_corners_wheel_size());
    total_size += data_size;
  }

  // repeated uint32 AP_P_KEY_CORNERS_CARBODY = 978;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ap_p_key_corners_carbody_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_p_key_corners_carbody_size());
    total_size += data_size;
  }

  // repeated float AP_P_ADAPT_VEL_Y_VELOCITY_MPS = 3711;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_p_adapt_vel_y_velocity_mps_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_p_adapt_vel_y_velocity_mps_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.ap_tp.fc_taposd_params.FC_TAPOSD_Params taposdParams = 236;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *taposdparams_);
    }

    // optional .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params sysFuncParams = 458;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sysfuncparams_);
    }

    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional .pb.ap_common.fc_trjpla_vehicle_params.FC_TRJPLA_Vehicle_Params vehicleParams = 2431;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicleparams_);
    }

    // optional uint32 AP_P_NUM_TA_POS_EVAL = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_num_ta_pos_eval());
    }

    // optional float AP_P_MAX_DIST_TP_TO_INTERMP_ONE_STROKE_M = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PLAN_DISTANCE_MARGIN_M = 88;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_RATIO_PRE_PREP_ALIGN_AXIS = 94;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_P_DIRECT_FWD_STEP_DIST_M = 105;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_MAX_VEL_IN_PAR_SLOT_MPS = 134;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PAR_OUT_M = 149;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_P_MAX_NUM_CLOTHOID_LOOP_NU = 183;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_num_clothoid_loop_nu());
    }

    // optional float AP_P_ROI_CORNER_X_ANGS_IN_M = 216;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_M = 223;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ENV_FLICKERING_COMP_M = 226;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 238;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_P_SAFE_PASS_MARGIN_M = 240;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PAR_IN_M = 276;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_M = 281;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PERP_BWD_IN_LONG_DEV_FCTR = 292;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_DIRECT_FWD_START_ANGLE_TOL_DEG = 310;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ENDPOSE_NEIGHBOUR_DIST_M = 335;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_STEP_MOVING_RATIO_CLO_COLL = 343;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_EDGE_LENGTH_M = 373;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 AP_P_ADAPT_VEL_SIZE_NU = 395;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_adapt_vel_size_nu());
    }

    // optional float MP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 419;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_DISTANCE_FOR_LAST_CALL_MAN_PERP = 476;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_ANGS_IN_OP_M = 481;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_M = 499;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 578;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_P_NUM_POSE_CHECK_DRVNPATH = 586;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_num_pose_check_drvnpath());
    }

    // optional float AP_P_ROI_CORNER_X_PRPB_OUT_M = 620;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_P_ROI_CORNER_X_ANGR_OUT_M = 646;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 656;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_SAFETY_TURN_RADIUS_AXIS_M = 662;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_LONG_SHIFT_INTERMED_WS_TAPOS_M = 698;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_CLOTHOID_VEL_TUNE_STEP_MPS = 751;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 807;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 809;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_MIN_RADIUS_ADD_CLOTHOID_M = 841;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_P_ASY_CLO_ST_MIN_LENGTH_M = 862;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_RATIO_STRAIGHT_PREPARE_FWD_STROKE_PREP_ALIGN = 881;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_MAX_VEL_CLOSE_OBSTACLE_MPS = 883;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_STRAIGHT_PERP_EXTRA_DIST_M = 895;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PRPB_IN_OP_M = 897;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_DESIRED_DIST_TO_OBST_M = 921;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PRPF_OUT_M = 938;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_LENGTH_LONG_CLO_TRANSIT_M = 951;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_P_FACTOR_DETERMINATION_NU = 952;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PRPF_IN_M = 956;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_P_PARKOUT_PAR_ANGLE_MAX_LOOP = 965;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_parkout_par_angle_max_loop());
    }

    // optional float AP_P_PERP_FWD_IN_YAW_DEV_FCTR = 968;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_BEST_PATH_TIME_THR_S = 983;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_DIST_START_END_KEEP_PATH_M = 994;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PERP_BWD_IN_LAT_DEV_FCTR = 1001;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PRPF_IN_OP_M = 1002;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_P_ADD_STRAIGHT_FSF_M = 1008;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PRPB_IN_M = 1020;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 1039;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_MIN_PARKING_VEL_MPS = 1067;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_ANGR_OUT_M = 1111;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 1124;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PLANNING_HORIZON_M = 1134;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PRPB_OUT_M = 1213;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_P_RATIO_ADD_ALIGN_RADIUS_ANGLED = 1219;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PRE_PREP_ALIGN_RADIUS_EXT_M = 1230;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 1265;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_SNAP_RATIO_TO_AVOID_COLL = 1267;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 1279;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_MIN_LONG_DEV_FOR_STRAIGHT_REPL_PAR_M = 1306;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PRPB_IN_M = 1309;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PERP_M = 1316;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float MP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 1350;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PRPF_IN_M = 1373;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PARKOUT_BLIND_DISTANCE_PAR_M = 1379;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_P_SAVE_EM_REPLANNING_NU = 1380;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_save_em_replanning_nu());
    }

    // optional float AP_P_ROI_CORNER_X_ANGR_IN_M = 1400;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PRPF_OUT_M = 1403;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_MAX_DIST_PARA_WO_BCKT_M = 1432;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PAR_OUT_OP_M = 1447;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_P_LENGTH_SHORT_CLO_TRANSIT_M = 1474;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool AP_P_ENABLE_OUT_IN_STROKES_REPLAN_PARALLEL = 1038;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool AP_P_ENABLE_LAST_CALL_MANEUVER_PERP = 2093;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 1;
    }

    // optional bool AP_P_ENABLE_FIRST_STROKE_FWD_PERP_BWD = 1893;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool AP_P_ENABLE_EARLY_STEER_FIRST_STRK_FWD = 1057;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional float AP_P_MIN_ANG_DIFF_INFLECTION_RAD = 1534;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 1540;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PRPF_OUT_M = 1550;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_P_MAX_ORIENTATION_DEV_FOR_STRAIGHT_REPL_PAR_RAD = 1553;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_RATIO_DISTANCE_SHORTING_FIRST_STRK_FWD = 1565;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_P_MAX_NUM_CLO_VEL_LOOP_NU = 1589;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_num_clo_vel_loop_nu());
    }

    // optional float MP_P_ROI_CORNER_Y_ANGS_IN_M = 1593;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_ANGR_IN_OP_M = 1606;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_P_BSTPOSE_STEPSZ_DRVNPATH_NU = 1624;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_bstpose_stepsz_drvnpath_nu());
    }

    // optional bool AP_P_ENABLE_FIRST_STRK_FWD_PAR = 257;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool AP_P_PARKOUT_ENABLE_FAKE_OBJECTS = 2997;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional float MP_P_ROI_CORNER_Y_PAR_OUT_M = 1652;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional bool AP_P_DISABLE_SCAN_GREAT_DIST_NU = 727;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool AP_P_DISABLE_PLANNER_NU = 1985;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool AP_P_ENABLE_ONE_STROKE_PARKING = 2387;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional bool AP_P_ENABLE_DYNAMIC_REPLANNING = 1584;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional float AP_P_MAX_DEVIATION_CLOTHOID_M = 1761;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PARKOUT_BLIND_DISTANCE_ANG_M = 1813;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_ANGR_OUT_M = 1826;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 1848;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_MISALIGNED_START_POSE_ANGLE_RAD = 1897;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_STRAIGHT_CONV_ALLOWED_ANG_RAD = 1916;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PARKOUT_PAR_SAFTEY_DIST_M = 1932;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_P_MIN_NUM_VALID_TO_OUTPUT_NU = 1944;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_min_num_valid_to_output_nu());
    }

    // optional float AP_P_PAR_NODYNREPLAN_DIST_TO_STOP_M = 1975;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_M = 1992;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float AP_P_PERP_FWD_IN_LONG_DEV_FCTR = 2024;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float AP_P_MAX_PARKING_VEL_BWD_MPS = 2140;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PRPF_IN_OP_M = 2187;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGS_IN_M = 2193;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_EDGE_LENGTH_M = 2199;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PERP_END_LIMIT_VEL_DIST_M = 2236;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_FACTOR_SAFETY_NU = 2249;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PAR_OUT_M = 2268;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float MP_P_ROI_CORNER_Y_PRPB_IN_OP_M = 2272;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PAR_IN_OP_M = 2277;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PAR_OUT_OP_M = 2339;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_ANG_M = 2395;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGS_OUT_M = 2450;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_PARKING_VEL_FWD_MPS = 2458;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MIN_DIST_START_TGTAXIS_M = 2463;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PAR_IN_OP_M = 2474;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_P_ROI_CORNER_X_PRPB_OUT_OP_M = 2500;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PRP_FWD_R_SCALE_1ST_STRK_M = 2511;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_INC_CIR_LENGTH_FOR_SCUR_OUT_M = 2525;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_ANGR_OUT_OP_M = 2563;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PRPF_OUT_OP_M = 2573;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_OUT_VRTX_RADIUS_SCALING_NU = 2621;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_LAT_DEV_FOR_STRAIGHT_REPL_PAR_M = 2674;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_RATIO_CONFINED_SPACE = 2679;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float MP_P_ROI_CORNER_Y_ANGS_IN_OP_M = 2688;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_ALIGNMENT_RADIUS_M = 2697;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_ANGR_IN_OP_M = 2754;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MIN_RADIUS_ADD_CIRCLE_M = 2785;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_ANGS_OUT_M = 2791;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PARKOUT_BLIND_DISTANCE_PERP_M = 2794;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MIN_ALIGNMENT_ANGLE_RAD = 2798;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_PREP_STROKE_LEN_STRAIGHT_M = 2817;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 AP_P_MAX_ATTEMPT_WRAP_UP_TRIANGLE = 2846;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_p_max_attempt_wrap_up_triangle());
    }

    // optional float AP_P_PARKOUT_EGO_DIST_TO_FAKE_OBJECTS_PAR_M = 2861;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_HEIGHT_OF_TRIANGLE_CLO_COLLISION_M = 2917;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_VIRTUAL_OBJ_DIST_TO_TP_M = 2931;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_RATIO_ADD_MIN_RADIUS_ANGLED = 2952;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_OP_M = 3002;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_ANGR_IN_M = 3024;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PERP_BWD_IN_YAW_DEV_FCTR = 3031;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_P_ROI_CORNER_Y_PRPF_IN_M = 3061;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PERP_FWD_IN_LAT_DEV_FCTR = 3062;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_SCURVE_DIST_TO_TGT_POSE_M = 3124;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_ANGS_OUT_M = 3126;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PAR_IN_M = 3130;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_ANGS_OUT_OP_M = 3180;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PAR_IN_OP_M = 3273;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_RADIUS_EXT_PERP_FIN_STRO_M = 3318;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    // optional float MP_P_ROI_CORNER_X_PRPF_IN_M = 3348;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PAR_REPL_MAX_EXTEND_DIST_AFTER_SCURVE_M = 3351;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGR_IN_OP_M = 3367;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGR_IN_M = 3377;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_DIST_PERP_WO_BCKT_M = 3393;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PRPB_IN_M = 3412;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_ANGS_IN_OP_M = 3429;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PAR_IN_OP_M = 3462;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_P_MAX_POLY_VEL_MPS = 3463;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_PAR_MAX_DIST_FOR_SYM_SCURVE_M = 3518;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_ANGR_OUT_OP_M = 3541;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PRPF_OUT_OP_M = 3547;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_PRPB_OUT_OP_M = 3602;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_BEST_PATH_GOAL_DEV_THR_NU = 3633;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PAR_OUT_M = 3645;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_POUT_PERP_STRAIGHT_EXT_M = 3650;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_P_ROI_CORNER_Y_PAR_IN_M = 3665;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_ANGS_IN_M = 3696;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MIN_PREP_STROKE_LEN_STRAIGHT_M = 3756;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_Y_PAR_OUT_OP_M = 3782;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_ROI_CORNER_X_PRPB_IN_OP_M = 3845;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_DIST_TO_PB_FOR_MISAL_START_POSE_PLANNING_M = 3895;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_ANGS_OUT_M = 3907;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PRPF_IN_OP_M = 3950;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional float AP_P_ADD_STRAIGHT_TO_WHEELSTOPPER_M = 4001;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_P_MAX_DISTANCE_SHORTEN_FIRST_STRK_FWD = 2716735;
    if (cached_has_bits & 0x02000000u) {
      total_size += 4 + 4;
    }

    // optional float MP_P_ROI_CORNER_Y_ANGR_IN_M = 3222586;
    if (cached_has_bits & 0x04000000u) {
      total_size += 4 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PAR_IN_M = 8258625;
    if (cached_has_bits & 0x08000000u) {
      total_size += 4 + 4;
    }

    // optional float MP_P_ROI_CORNER_X_PRPB_IN_M = 10939324;
    if (cached_has_bits & 0x10000000u) {
      total_size += 4 + 4;
    }

    // optional float AP_P_BEST_PATH_LENGTH_THR_M = 11680804;
    if (cached_has_bits & 0x20000000u) {
      total_size += 4 + 4;
    }

    // optional float AP_P_PERP_STRAIGHT_MIN_BWD_DIST_FWD_STRK_M = 14945121;
    if (cached_has_bits & 0x40000000u) {
      total_size += 4 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TRJPLA_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TRJPLA_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TRJPLA_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
    MergeFrom(*source);
  }
}

void FC_TRJPLA_Params::MergeFrom(const FC_TRJPLA_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ap_p_adapt_vel_x_distance_m_.MergeFrom(from.ap_p_adapt_vel_x_distance_m_);
  ap_p_key_corners_wheel_.MergeFrom(from.ap_p_key_corners_wheel_);
  ap_p_key_corners_carbody_.MergeFrom(from.ap_p_key_corners_carbody_);
  ap_p_adapt_vel_y_velocity_mps_.MergeFrom(from.ap_p_adapt_vel_y_velocity_mps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_taposdparams()->::pb::ap_tp::fc_taposd_params::FC_TAPOSD_Params::MergeFrom(from._internal_taposdparams());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sysfuncparams()->::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params::MergeFrom(from._internal_sysfuncparams());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vehicleparams()->::pb::ap_common::fc_trjpla_vehicle_params::FC_TRJPLA_Vehicle_Params::MergeFrom(from._internal_vehicleparams());
    }
    if (cached_has_bits & 0x00000010u) {
      ap_p_num_ta_pos_eval_ = from.ap_p_num_ta_pos_eval_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_p_max_dist_tp_to_intermp_one_stroke_m_ = from.ap_p_max_dist_tp_to_intermp_one_stroke_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_p_plan_distance_margin_m_ = from.ap_p_plan_distance_margin_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_p_ratio_pre_prep_align_axis_ = from.ap_p_ratio_pre_prep_align_axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_p_direct_fwd_step_dist_m_ = from.ap_p_direct_fwd_step_dist_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_p_max_vel_in_par_slot_mps_ = from.ap_p_max_vel_in_par_slot_mps_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_p_roi_corner_x_par_out_m_ = from.ap_p_roi_corner_x_par_out_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_p_max_num_clothoid_loop_nu_ = from.ap_p_max_num_clothoid_loop_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_p_roi_corner_x_angs_in_m_ = from.ap_p_roi_corner_x_angs_in_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_p_roi_corner_y_prpf_out_m_ = from.ap_p_roi_corner_y_prpf_out_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_p_env_flickering_comp_m_ = from.ap_p_env_flickering_comp_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      mp_p_roi_corner_x_prpb_out_op_m_ = from.mp_p_roi_corner_x_prpb_out_op_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_p_safe_pass_margin_m_ = from.ap_p_safe_pass_margin_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_p_roi_corner_x_par_in_m_ = from.ap_p_roi_corner_x_par_in_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_p_roi_corner_y_prpb_out_m_ = from.ap_p_roi_corner_y_prpb_out_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_p_perp_bwd_in_long_dev_fctr_ = from.ap_p_perp_bwd_in_long_dev_fctr_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_p_direct_fwd_start_angle_tol_deg_ = from.ap_p_direct_fwd_start_angle_tol_deg_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_p_endpose_neighbour_dist_m_ = from.ap_p_endpose_neighbour_dist_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_p_step_moving_ratio_clo_coll_ = from.ap_p_step_moving_ratio_clo_coll_;
    }
    if (cached_has_bits & 0x00800000u) {
      mp_p_roi_edge_length_m_ = from.mp_p_roi_edge_length_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_p_adapt_vel_size_nu_ = from.ap_p_adapt_vel_size_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      mp_p_roi_corner_y_angr_in_op_m_ = from.mp_p_roi_corner_y_angr_in_op_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_p_distance_for_last_call_man_perp_ = from.ap_p_distance_for_last_call_man_perp_;
    }
    if (cached_has_bits & 0x08000000u) {
      mp_p_roi_corner_x_angs_in_op_m_ = from.mp_p_roi_corner_x_angs_in_op_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_p_roi_corner_y_angr_out_m_ = from.ap_p_roi_corner_y_angr_out_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      mp_p_roi_corner_y_par_out_op_m_ = from.mp_p_roi_corner_y_par_out_op_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_p_num_pose_check_drvnpath_ = from.ap_p_num_pose_check_drvnpath_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_p_roi_corner_x_prpb_out_m_ = from.ap_p_roi_corner_x_prpb_out_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_p_roi_corner_x_angr_out_m_ = from.ap_p_roi_corner_x_angr_out_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_p_roi_corner_y_angs_out_op_m_ = from.ap_p_roi_corner_y_angs_out_op_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_p_safety_turn_radius_axis_m_ = from.ap_p_safety_turn_radius_axis_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_p_long_shift_intermed_ws_tapos_m_ = from.ap_p_long_shift_intermed_ws_tapos_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_p_clothoid_vel_tune_step_mps_ = from.ap_p_clothoid_vel_tune_step_mps_;
    }
    if (cached_has_bits & 0x00000020u) {
      mp_p_roi_corner_y_prpf_out_op_m_ = from.mp_p_roi_corner_y_prpf_out_op_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_p_roi_corner_x_angr_out_op_m_ = from.ap_p_roi_corner_x_angr_out_op_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_p_min_radius_add_clothoid_m_ = from.ap_p_min_radius_add_clothoid_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_p_asy_clo_st_min_length_m_ = from.ap_p_asy_clo_st_min_length_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_p_ratio_straight_prepare_fwd_stroke_prep_align_ = from.ap_p_ratio_straight_prepare_fwd_stroke_prep_align_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_p_max_vel_close_obstacle_mps_ = from.ap_p_max_vel_close_obstacle_mps_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_p_straight_perp_extra_dist_m_ = from.ap_p_straight_perp_extra_dist_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      mp_p_roi_corner_x_prpb_in_op_m_ = from.mp_p_roi_corner_x_prpb_in_op_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_p_desired_dist_to_obst_m_ = from.ap_p_desired_dist_to_obst_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_p_roi_corner_x_prpf_out_m_ = from.ap_p_roi_corner_x_prpf_out_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_p_length_long_clo_transit_m_ = from.ap_p_length_long_clo_transit_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_p_factor_determination_nu_ = from.ap_p_factor_determination_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_p_roi_corner_x_prpf_in_m_ = from.ap_p_roi_corner_x_prpf_in_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_p_parkout_par_angle_max_loop_ = from.ap_p_parkout_par_angle_max_loop_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_p_perp_fwd_in_yaw_dev_fctr_ = from.ap_p_perp_fwd_in_yaw_dev_fctr_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_p_best_path_time_thr_s_ = from.ap_p_best_path_time_thr_s_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_p_dist_start_end_keep_path_m_ = from.ap_p_dist_start_end_keep_path_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_p_perp_bwd_in_lat_dev_fctr_ = from.ap_p_perp_bwd_in_lat_dev_fctr_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_p_roi_corner_x_prpf_in_op_m_ = from.ap_p_roi_corner_x_prpf_in_op_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_p_add_straight_fsf_m_ = from.ap_p_add_straight_fsf_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      mp_p_roi_corner_y_prpb_in_m_ = from.mp_p_roi_corner_y_prpb_in_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      mp_p_roi_corner_y_prpf_in_op_m_ = from.mp_p_roi_corner_y_prpf_in_op_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_p_min_parking_vel_mps_ = from.ap_p_min_parking_vel_mps_;
    }
    if (cached_has_bits & 0x10000000u) {
      mp_p_roi_corner_x_angr_out_m_ = from.mp_p_roi_corner_x_angr_out_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_p_roi_corner_y_prpb_in_op_m_ = from.ap_p_roi_corner_y_prpb_in_op_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_p_planning_horizon_m_ = from.ap_p_planning_horizon_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      mp_p_roi_corner_x_prpb_out_m_ = from.mp_p_roi_corner_x_prpb_out_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_p_ratio_add_align_radius_angled_ = from.ap_p_ratio_add_align_radius_angled_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_p_pre_prep_align_radius_ext_m_ = from.ap_p_pre_prep_align_radius_ext_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_p_roi_corner_x_prpf_out_op_m_ = from.ap_p_roi_corner_x_prpf_out_op_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_p_snap_ratio_to_avoid_coll_ = from.ap_p_snap_ratio_to_avoid_coll_;
    }
    if (cached_has_bits & 0x00000010u) {
      mp_p_roi_corner_y_angr_out_op_m_ = from.mp_p_roi_corner_y_angr_out_op_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_p_min_long_dev_for_straight_repl_par_m_ = from.ap_p_min_long_dev_for_straight_repl_par_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_p_roi_corner_x_prpb_in_m_ = from.ap_p_roi_corner_x_prpb_in_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_p_parkout_ego_dist_to_fake_objects_perp_m_ = from.ap_p_parkout_ego_dist_to_fake_objects_perp_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mp_p_roi_corner_x_angs_out_op_m_ = from.mp_p_roi_corner_x_angs_out_op_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      mp_p_roi_corner_y_prpf_in_m_ = from.mp_p_roi_corner_y_prpf_in_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_p_parkout_blind_distance_par_m_ = from.ap_p_parkout_blind_distance_par_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_p_save_em_replanning_nu_ = from.ap_p_save_em_replanning_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_p_roi_corner_x_angr_in_m_ = from.ap_p_roi_corner_x_angr_in_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      mp_p_roi_corner_x_prpf_out_m_ = from.mp_p_roi_corner_x_prpf_out_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_p_max_dist_para_wo_bckt_m_ = from.ap_p_max_dist_para_wo_bckt_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_p_roi_corner_x_par_out_op_m_ = from.ap_p_roi_corner_x_par_out_op_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_p_length_short_clo_transit_m_ = from.ap_p_length_short_clo_transit_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_p_enable_out_in_strokes_replan_parallel_ = from.ap_p_enable_out_in_strokes_replan_parallel_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_p_enable_last_call_maneuver_perp_ = from.ap_p_enable_last_call_maneuver_perp_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_p_enable_first_stroke_fwd_perp_bwd_ = from.ap_p_enable_first_stroke_fwd_perp_bwd_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_p_enable_early_steer_first_strk_fwd_ = from.ap_p_enable_early_steer_first_strk_fwd_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_p_min_ang_diff_inflection_rad_ = from.ap_p_min_ang_diff_inflection_rad_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_p_roi_corner_y_angs_in_op_m_ = from.ap_p_roi_corner_y_angs_in_op_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      mp_p_roi_corner_y_prpf_out_m_ = from.mp_p_roi_corner_y_prpf_out_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_p_max_orientation_dev_for_straight_repl_par_rad_ = from.ap_p_max_orientation_dev_for_straight_repl_par_rad_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_p_ratio_distance_shorting_first_strk_fwd_ = from.ap_p_ratio_distance_shorting_first_strk_fwd_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_p_max_num_clo_vel_loop_nu_ = from.ap_p_max_num_clo_vel_loop_nu_;
    }
    if (cached_has_bits & 0x08000000u) {
      mp_p_roi_corner_y_angs_in_m_ = from.mp_p_roi_corner_y_angs_in_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_p_roi_corner_x_angr_in_op_m_ = from.ap_p_roi_corner_x_angr_in_op_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_p_bstpose_stepsz_drvnpath_nu_ = from.ap_p_bstpose_stepsz_drvnpath_nu_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_p_enable_first_strk_fwd_par_ = from.ap_p_enable_first_strk_fwd_par_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_p_parkout_enable_fake_objects_ = from.ap_p_parkout_enable_fake_objects_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mp_p_roi_corner_y_par_out_m_ = from.mp_p_roi_corner_y_par_out_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_p_disable_scan_great_dist_nu_ = from.ap_p_disable_scan_great_dist_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_p_disable_planner_nu_ = from.ap_p_disable_planner_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_p_enable_one_stroke_parking_ = from.ap_p_enable_one_stroke_parking_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_p_enable_dynamic_replanning_ = from.ap_p_enable_dynamic_replanning_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_p_max_deviation_clothoid_m_ = from.ap_p_max_deviation_clothoid_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_p_parkout_blind_distance_ang_m_ = from.ap_p_parkout_blind_distance_ang_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      mp_p_roi_corner_y_angr_out_m_ = from.mp_p_roi_corner_y_angr_out_m_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_p_roi_corner_y_prpb_out_op_m_ = from.ap_p_roi_corner_y_prpb_out_op_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_p_misaligned_start_pose_angle_rad_ = from.ap_p_misaligned_start_pose_angle_rad_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_p_straight_conv_allowed_ang_rad_ = from.ap_p_straight_conv_allowed_ang_rad_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_p_parkout_par_saftey_dist_m_ = from.ap_p_parkout_par_saftey_dist_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_p_min_num_valid_to_output_nu_ = from.ap_p_min_num_valid_to_output_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_p_par_nodynreplan_dist_to_stop_m_ = from.ap_p_par_nodynreplan_dist_to_stop_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      mp_p_roi_corner_y_prpb_out_m_ = from.mp_p_roi_corner_y_prpb_out_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_p_perp_fwd_in_long_dev_fctr_ = from.ap_p_perp_fwd_in_long_dev_fctr_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_p_max_parking_vel_bwd_mps_ = from.ap_p_max_parking_vel_bwd_mps_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_p_roi_corner_y_prpf_in_op_m_ = from.ap_p_roi_corner_y_prpf_in_op_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_p_roi_corner_y_angs_in_m_ = from.ap_p_roi_corner_y_angs_in_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_p_roi_edge_length_m_ = from.ap_p_roi_edge_length_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_p_perp_end_limit_vel_dist_m_ = from.ap_p_perp_end_limit_vel_dist_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_p_factor_safety_nu_ = from.ap_p_factor_safety_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_p_roi_corner_y_par_out_m_ = from.ap_p_roi_corner_y_par_out_m_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mp_p_roi_corner_y_prpb_in_op_m_ = from.mp_p_roi_corner_y_prpb_in_op_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      mp_p_roi_corner_x_par_in_op_m_ = from.mp_p_roi_corner_x_par_in_op_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      mp_p_roi_corner_x_par_out_op_m_ = from.mp_p_roi_corner_x_par_out_op_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_p_parkout_ego_dist_to_fake_objects_ang_m_ = from.ap_p_parkout_ego_dist_to_fake_objects_ang_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_p_roi_corner_y_angs_out_m_ = from.ap_p_roi_corner_y_angs_out_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_p_max_parking_vel_fwd_mps_ = from.ap_p_max_parking_vel_fwd_mps_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_p_min_dist_start_tgtaxis_m_ = from.ap_p_min_dist_start_tgtaxis_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_p_roi_corner_y_par_in_op_m_ = from.ap_p_roi_corner_y_par_in_op_m_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_p_roi_corner_x_prpb_out_op_m_ = from.ap_p_roi_corner_x_prpb_out_op_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_p_prp_fwd_r_scale_1st_strk_m_ = from.ap_p_prp_fwd_r_scale_1st_strk_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_p_inc_cir_length_for_scur_out_m_ = from.ap_p_inc_cir_length_for_scur_out_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      mp_p_roi_corner_x_angr_out_op_m_ = from.mp_p_roi_corner_x_angr_out_op_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_p_roi_corner_y_prpf_out_op_m_ = from.ap_p_roi_corner_y_prpf_out_op_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_p_out_vrtx_radius_scaling_nu_ = from.ap_p_out_vrtx_radius_scaling_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_p_max_lat_dev_for_straight_repl_par_m_ = from.ap_p_max_lat_dev_for_straight_repl_par_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_p_ratio_confined_space_ = from.ap_p_ratio_confined_space_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mp_p_roi_corner_y_angs_in_op_m_ = from.mp_p_roi_corner_y_angs_in_op_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_p_max_alignment_radius_m_ = from.ap_p_max_alignment_radius_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      mp_p_roi_corner_x_angr_in_op_m_ = from.mp_p_roi_corner_x_angr_in_op_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_p_min_radius_add_circle_m_ = from.ap_p_min_radius_add_circle_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_p_roi_corner_x_angs_out_m_ = from.ap_p_roi_corner_x_angs_out_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_p_parkout_blind_distance_perp_m_ = from.ap_p_parkout_blind_distance_perp_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_p_min_alignment_angle_rad_ = from.ap_p_min_alignment_angle_rad_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_p_max_prep_stroke_len_straight_m_ = from.ap_p_max_prep_stroke_len_straight_m_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_p_max_attempt_wrap_up_triangle_ = from.ap_p_max_attempt_wrap_up_triangle_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_p_parkout_ego_dist_to_fake_objects_par_m_ = from.ap_p_parkout_ego_dist_to_fake_objects_par_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_p_max_height_of_triangle_clo_collision_m_ = from.ap_p_max_height_of_triangle_clo_collision_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_p_virtual_obj_dist_to_tp_m_ = from.ap_p_virtual_obj_dist_to_tp_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_p_ratio_add_min_radius_angled_ = from.ap_p_ratio_add_min_radius_angled_;
    }
    if (cached_has_bits & 0x00200000u) {
      mp_p_roi_corner_y_angs_out_op_m_ = from.mp_p_roi_corner_y_angs_out_op_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      mp_p_roi_corner_x_angr_in_m_ = from.mp_p_roi_corner_x_angr_in_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_p_perp_bwd_in_yaw_dev_fctr_ = from.ap_p_perp_bwd_in_yaw_dev_fctr_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_p_roi_corner_y_prpf_in_m_ = from.ap_p_roi_corner_y_prpf_in_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_p_perp_fwd_in_lat_dev_fctr_ = from.ap_p_perp_fwd_in_lat_dev_fctr_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_p_max_scurve_dist_to_tgt_pose_m_ = from.ap_p_max_scurve_dist_to_tgt_pose_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      mp_p_roi_corner_x_angs_out_m_ = from.mp_p_roi_corner_x_angs_out_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      mp_p_roi_corner_y_par_in_m_ = from.mp_p_roi_corner_y_par_in_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_p_roi_corner_x_angs_out_op_m_ = from.ap_p_roi_corner_x_angs_out_op_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_p_roi_corner_x_par_in_op_m_ = from.ap_p_roi_corner_x_par_in_op_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_p_radius_ext_perp_fin_stro_m_ = from.ap_p_radius_ext_perp_fin_stro_m_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mp_p_roi_corner_x_prpf_in_m_ = from.mp_p_roi_corner_x_prpf_in_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_p_par_repl_max_extend_dist_after_scurve_m_ = from.ap_p_par_repl_max_extend_dist_after_scurve_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_p_roi_corner_y_angr_in_op_m_ = from.ap_p_roi_corner_y_angr_in_op_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_p_roi_corner_y_angr_in_m_ = from.ap_p_roi_corner_y_angr_in_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_p_max_dist_perp_wo_bckt_m_ = from.ap_p_max_dist_perp_wo_bckt_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_p_roi_corner_y_prpb_in_m_ = from.ap_p_roi_corner_y_prpb_in_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_p_roi_corner_x_angs_in_op_m_ = from.ap_p_roi_corner_x_angs_in_op_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      mp_p_roi_corner_y_par_in_op_m_ = from.mp_p_roi_corner_y_par_in_op_m_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_p_max_poly_vel_mps_ = from.ap_p_max_poly_vel_mps_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_p_par_max_dist_for_sym_scurve_m_ = from.ap_p_par_max_dist_for_sym_scurve_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_p_roi_corner_y_angr_out_op_m_ = from.ap_p_roi_corner_y_angr_out_op_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      mp_p_roi_corner_x_prpf_out_op_m_ = from.mp_p_roi_corner_x_prpf_out_op_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      mp_p_roi_corner_y_prpb_out_op_m_ = from.mp_p_roi_corner_y_prpb_out_op_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_p_best_path_goal_dev_thr_nu_ = from.ap_p_best_path_goal_dev_thr_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      mp_p_roi_corner_x_par_out_m_ = from.mp_p_roi_corner_x_par_out_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_p_pout_perp_straight_ext_m_ = from.ap_p_pout_perp_straight_ext_m_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_p_roi_corner_y_par_in_m_ = from.ap_p_roi_corner_y_par_in_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      mp_p_roi_corner_x_angs_in_m_ = from.mp_p_roi_corner_x_angs_in_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_p_min_prep_stroke_len_straight_m_ = from.ap_p_min_prep_stroke_len_straight_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_p_roi_corner_y_par_out_op_m_ = from.ap_p_roi_corner_y_par_out_op_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_p_roi_corner_x_prpb_in_op_m_ = from.ap_p_roi_corner_x_prpb_in_op_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_p_dist_to_pb_for_misal_start_pose_planning_m_ = from.ap_p_dist_to_pb_for_misal_start_pose_planning_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      mp_p_roi_corner_y_angs_out_m_ = from.mp_p_roi_corner_y_angs_out_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      mp_p_roi_corner_x_prpf_in_op_m_ = from.mp_p_roi_corner_x_prpf_in_op_m_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_p_add_straight_to_wheelstopper_m_ = from.ap_p_add_straight_to_wheelstopper_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_p_max_distance_shorten_first_strk_fwd_ = from.ap_p_max_distance_shorten_first_strk_fwd_;
    }
    if (cached_has_bits & 0x04000000u) {
      mp_p_roi_corner_y_angr_in_m_ = from.mp_p_roi_corner_y_angr_in_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      mp_p_roi_corner_x_par_in_m_ = from.mp_p_roi_corner_x_par_in_m_;
    }
    if (cached_has_bits & 0x10000000u) {
      mp_p_roi_corner_x_prpb_in_m_ = from.mp_p_roi_corner_x_prpb_in_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_p_best_path_length_thr_m_ = from.ap_p_best_path_length_thr_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_p_perp_straight_min_bwd_dist_fwd_strk_m_ = from.ap_p_perp_straight_min_bwd_dist_fwd_strk_m_;
    }
    _has_bits_[5] |= cached_has_bits;
  }
}

void FC_TRJPLA_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TRJPLA_Params::CopyFrom(const FC_TRJPLA_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TRJPLA_Params::IsInitialized() const {
  return true;
}

void FC_TRJPLA_Params::InternalSwap(FC_TRJPLA_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(_has_bits_[4], other->_has_bits_[4]);
  swap(_has_bits_[5], other->_has_bits_[5]);
  ap_p_adapt_vel_x_distance_m_.InternalSwap(&other->ap_p_adapt_vel_x_distance_m_);
  ap_p_key_corners_wheel_.InternalSwap(&other->ap_p_key_corners_wheel_);
  ap_p_key_corners_carbody_.InternalSwap(&other->ap_p_key_corners_carbody_);
  ap_p_adapt_vel_y_velocity_mps_.InternalSwap(&other->ap_p_adapt_vel_y_velocity_mps_);
  swap(taposdparams_, other->taposdparams_);
  swap(sysfuncparams_, other->sysfuncparams_);
  swap(ssigheader_, other->ssigheader_);
  swap(vehicleparams_, other->vehicleparams_);
  swap(ap_p_num_ta_pos_eval_, other->ap_p_num_ta_pos_eval_);
  swap(ap_p_max_dist_tp_to_intermp_one_stroke_m_, other->ap_p_max_dist_tp_to_intermp_one_stroke_m_);
  swap(ap_p_plan_distance_margin_m_, other->ap_p_plan_distance_margin_m_);
  swap(ap_p_ratio_pre_prep_align_axis_, other->ap_p_ratio_pre_prep_align_axis_);
  swap(ap_p_direct_fwd_step_dist_m_, other->ap_p_direct_fwd_step_dist_m_);
  swap(ap_p_max_vel_in_par_slot_mps_, other->ap_p_max_vel_in_par_slot_mps_);
  swap(ap_p_roi_corner_x_par_out_m_, other->ap_p_roi_corner_x_par_out_m_);
  swap(ap_p_max_num_clothoid_loop_nu_, other->ap_p_max_num_clothoid_loop_nu_);
  swap(ap_p_roi_corner_x_angs_in_m_, other->ap_p_roi_corner_x_angs_in_m_);
  swap(ap_p_roi_corner_y_prpf_out_m_, other->ap_p_roi_corner_y_prpf_out_m_);
  swap(ap_p_env_flickering_comp_m_, other->ap_p_env_flickering_comp_m_);
  swap(mp_p_roi_corner_x_prpb_out_op_m_, other->mp_p_roi_corner_x_prpb_out_op_m_);
  swap(ap_p_safe_pass_margin_m_, other->ap_p_safe_pass_margin_m_);
  swap(ap_p_roi_corner_x_par_in_m_, other->ap_p_roi_corner_x_par_in_m_);
  swap(ap_p_roi_corner_y_prpb_out_m_, other->ap_p_roi_corner_y_prpb_out_m_);
  swap(ap_p_perp_bwd_in_long_dev_fctr_, other->ap_p_perp_bwd_in_long_dev_fctr_);
  swap(ap_p_direct_fwd_start_angle_tol_deg_, other->ap_p_direct_fwd_start_angle_tol_deg_);
  swap(ap_p_endpose_neighbour_dist_m_, other->ap_p_endpose_neighbour_dist_m_);
  swap(ap_p_step_moving_ratio_clo_coll_, other->ap_p_step_moving_ratio_clo_coll_);
  swap(mp_p_roi_edge_length_m_, other->mp_p_roi_edge_length_m_);
  swap(ap_p_adapt_vel_size_nu_, other->ap_p_adapt_vel_size_nu_);
  swap(mp_p_roi_corner_y_angr_in_op_m_, other->mp_p_roi_corner_y_angr_in_op_m_);
  swap(ap_p_distance_for_last_call_man_perp_, other->ap_p_distance_for_last_call_man_perp_);
  swap(mp_p_roi_corner_x_angs_in_op_m_, other->mp_p_roi_corner_x_angs_in_op_m_);
  swap(ap_p_roi_corner_y_angr_out_m_, other->ap_p_roi_corner_y_angr_out_m_);
  swap(mp_p_roi_corner_y_par_out_op_m_, other->mp_p_roi_corner_y_par_out_op_m_);
  swap(ap_p_num_pose_check_drvnpath_, other->ap_p_num_pose_check_drvnpath_);
  swap(ap_p_roi_corner_x_prpb_out_m_, other->ap_p_roi_corner_x_prpb_out_m_);
  swap(ap_p_roi_corner_x_angr_out_m_, other->ap_p_roi_corner_x_angr_out_m_);
  swap(ap_p_roi_corner_y_angs_out_op_m_, other->ap_p_roi_corner_y_angs_out_op_m_);
  swap(ap_p_safety_turn_radius_axis_m_, other->ap_p_safety_turn_radius_axis_m_);
  swap(ap_p_long_shift_intermed_ws_tapos_m_, other->ap_p_long_shift_intermed_ws_tapos_m_);
  swap(ap_p_clothoid_vel_tune_step_mps_, other->ap_p_clothoid_vel_tune_step_mps_);
  swap(mp_p_roi_corner_y_prpf_out_op_m_, other->mp_p_roi_corner_y_prpf_out_op_m_);
  swap(ap_p_roi_corner_x_angr_out_op_m_, other->ap_p_roi_corner_x_angr_out_op_m_);
  swap(ap_p_min_radius_add_clothoid_m_, other->ap_p_min_radius_add_clothoid_m_);
  swap(ap_p_asy_clo_st_min_length_m_, other->ap_p_asy_clo_st_min_length_m_);
  swap(ap_p_ratio_straight_prepare_fwd_stroke_prep_align_, other->ap_p_ratio_straight_prepare_fwd_stroke_prep_align_);
  swap(ap_p_max_vel_close_obstacle_mps_, other->ap_p_max_vel_close_obstacle_mps_);
  swap(ap_p_straight_perp_extra_dist_m_, other->ap_p_straight_perp_extra_dist_m_);
  swap(mp_p_roi_corner_x_prpb_in_op_m_, other->mp_p_roi_corner_x_prpb_in_op_m_);
  swap(ap_p_desired_dist_to_obst_m_, other->ap_p_desired_dist_to_obst_m_);
  swap(ap_p_roi_corner_x_prpf_out_m_, other->ap_p_roi_corner_x_prpf_out_m_);
  swap(ap_p_length_long_clo_transit_m_, other->ap_p_length_long_clo_transit_m_);
  swap(ap_p_factor_determination_nu_, other->ap_p_factor_determination_nu_);
  swap(ap_p_roi_corner_x_prpf_in_m_, other->ap_p_roi_corner_x_prpf_in_m_);
  swap(ap_p_parkout_par_angle_max_loop_, other->ap_p_parkout_par_angle_max_loop_);
  swap(ap_p_perp_fwd_in_yaw_dev_fctr_, other->ap_p_perp_fwd_in_yaw_dev_fctr_);
  swap(ap_p_best_path_time_thr_s_, other->ap_p_best_path_time_thr_s_);
  swap(ap_p_dist_start_end_keep_path_m_, other->ap_p_dist_start_end_keep_path_m_);
  swap(ap_p_perp_bwd_in_lat_dev_fctr_, other->ap_p_perp_bwd_in_lat_dev_fctr_);
  swap(ap_p_roi_corner_x_prpf_in_op_m_, other->ap_p_roi_corner_x_prpf_in_op_m_);
  swap(ap_p_add_straight_fsf_m_, other->ap_p_add_straight_fsf_m_);
  swap(mp_p_roi_corner_y_prpb_in_m_, other->mp_p_roi_corner_y_prpb_in_m_);
  swap(mp_p_roi_corner_y_prpf_in_op_m_, other->mp_p_roi_corner_y_prpf_in_op_m_);
  swap(ap_p_min_parking_vel_mps_, other->ap_p_min_parking_vel_mps_);
  swap(mp_p_roi_corner_x_angr_out_m_, other->mp_p_roi_corner_x_angr_out_m_);
  swap(ap_p_roi_corner_y_prpb_in_op_m_, other->ap_p_roi_corner_y_prpb_in_op_m_);
  swap(ap_p_planning_horizon_m_, other->ap_p_planning_horizon_m_);
  swap(mp_p_roi_corner_x_prpb_out_m_, other->mp_p_roi_corner_x_prpb_out_m_);
  swap(ap_p_ratio_add_align_radius_angled_, other->ap_p_ratio_add_align_radius_angled_);
  swap(ap_p_pre_prep_align_radius_ext_m_, other->ap_p_pre_prep_align_radius_ext_m_);
  swap(ap_p_roi_corner_x_prpf_out_op_m_, other->ap_p_roi_corner_x_prpf_out_op_m_);
  swap(ap_p_snap_ratio_to_avoid_coll_, other->ap_p_snap_ratio_to_avoid_coll_);
  swap(mp_p_roi_corner_y_angr_out_op_m_, other->mp_p_roi_corner_y_angr_out_op_m_);
  swap(ap_p_min_long_dev_for_straight_repl_par_m_, other->ap_p_min_long_dev_for_straight_repl_par_m_);
  swap(ap_p_roi_corner_x_prpb_in_m_, other->ap_p_roi_corner_x_prpb_in_m_);
  swap(ap_p_parkout_ego_dist_to_fake_objects_perp_m_, other->ap_p_parkout_ego_dist_to_fake_objects_perp_m_);
  swap(mp_p_roi_corner_x_angs_out_op_m_, other->mp_p_roi_corner_x_angs_out_op_m_);
  swap(mp_p_roi_corner_y_prpf_in_m_, other->mp_p_roi_corner_y_prpf_in_m_);
  swap(ap_p_parkout_blind_distance_par_m_, other->ap_p_parkout_blind_distance_par_m_);
  swap(ap_p_save_em_replanning_nu_, other->ap_p_save_em_replanning_nu_);
  swap(ap_p_roi_corner_x_angr_in_m_, other->ap_p_roi_corner_x_angr_in_m_);
  swap(mp_p_roi_corner_x_prpf_out_m_, other->mp_p_roi_corner_x_prpf_out_m_);
  swap(ap_p_max_dist_para_wo_bckt_m_, other->ap_p_max_dist_para_wo_bckt_m_);
  swap(ap_p_roi_corner_x_par_out_op_m_, other->ap_p_roi_corner_x_par_out_op_m_);
  swap(ap_p_length_short_clo_transit_m_, other->ap_p_length_short_clo_transit_m_);
  swap(ap_p_enable_out_in_strokes_replan_parallel_, other->ap_p_enable_out_in_strokes_replan_parallel_);
  swap(ap_p_enable_last_call_maneuver_perp_, other->ap_p_enable_last_call_maneuver_perp_);
  swap(ap_p_enable_first_stroke_fwd_perp_bwd_, other->ap_p_enable_first_stroke_fwd_perp_bwd_);
  swap(ap_p_enable_early_steer_first_strk_fwd_, other->ap_p_enable_early_steer_first_strk_fwd_);
  swap(ap_p_min_ang_diff_inflection_rad_, other->ap_p_min_ang_diff_inflection_rad_);
  swap(ap_p_roi_corner_y_angs_in_op_m_, other->ap_p_roi_corner_y_angs_in_op_m_);
  swap(mp_p_roi_corner_y_prpf_out_m_, other->mp_p_roi_corner_y_prpf_out_m_);
  swap(ap_p_max_orientation_dev_for_straight_repl_par_rad_, other->ap_p_max_orientation_dev_for_straight_repl_par_rad_);
  swap(ap_p_ratio_distance_shorting_first_strk_fwd_, other->ap_p_ratio_distance_shorting_first_strk_fwd_);
  swap(ap_p_max_num_clo_vel_loop_nu_, other->ap_p_max_num_clo_vel_loop_nu_);
  swap(mp_p_roi_corner_y_angs_in_m_, other->mp_p_roi_corner_y_angs_in_m_);
  swap(ap_p_roi_corner_x_angr_in_op_m_, other->ap_p_roi_corner_x_angr_in_op_m_);
  swap(ap_p_bstpose_stepsz_drvnpath_nu_, other->ap_p_bstpose_stepsz_drvnpath_nu_);
  swap(ap_p_enable_first_strk_fwd_par_, other->ap_p_enable_first_strk_fwd_par_);
  swap(ap_p_parkout_enable_fake_objects_, other->ap_p_parkout_enable_fake_objects_);
  swap(mp_p_roi_corner_y_par_out_m_, other->mp_p_roi_corner_y_par_out_m_);
  swap(ap_p_disable_scan_great_dist_nu_, other->ap_p_disable_scan_great_dist_nu_);
  swap(ap_p_disable_planner_nu_, other->ap_p_disable_planner_nu_);
  swap(ap_p_enable_one_stroke_parking_, other->ap_p_enable_one_stroke_parking_);
  swap(ap_p_enable_dynamic_replanning_, other->ap_p_enable_dynamic_replanning_);
  swap(ap_p_max_deviation_clothoid_m_, other->ap_p_max_deviation_clothoid_m_);
  swap(ap_p_parkout_blind_distance_ang_m_, other->ap_p_parkout_blind_distance_ang_m_);
  swap(mp_p_roi_corner_y_angr_out_m_, other->mp_p_roi_corner_y_angr_out_m_);
  swap(ap_p_roi_corner_y_prpb_out_op_m_, other->ap_p_roi_corner_y_prpb_out_op_m_);
  swap(ap_p_misaligned_start_pose_angle_rad_, other->ap_p_misaligned_start_pose_angle_rad_);
  swap(ap_p_straight_conv_allowed_ang_rad_, other->ap_p_straight_conv_allowed_ang_rad_);
  swap(ap_p_parkout_par_saftey_dist_m_, other->ap_p_parkout_par_saftey_dist_m_);
  swap(ap_p_min_num_valid_to_output_nu_, other->ap_p_min_num_valid_to_output_nu_);
  swap(ap_p_par_nodynreplan_dist_to_stop_m_, other->ap_p_par_nodynreplan_dist_to_stop_m_);
  swap(mp_p_roi_corner_y_prpb_out_m_, other->mp_p_roi_corner_y_prpb_out_m_);
  swap(ap_p_perp_fwd_in_long_dev_fctr_, other->ap_p_perp_fwd_in_long_dev_fctr_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ap_p_max_parking_vel_bwd_mps_, other->ap_p_max_parking_vel_bwd_mps_);
  swap(ap_p_roi_corner_y_prpf_in_op_m_, other->ap_p_roi_corner_y_prpf_in_op_m_);
  swap(ap_p_roi_corner_y_angs_in_m_, other->ap_p_roi_corner_y_angs_in_m_);
  swap(ap_p_roi_edge_length_m_, other->ap_p_roi_edge_length_m_);
  swap(ap_p_perp_end_limit_vel_dist_m_, other->ap_p_perp_end_limit_vel_dist_m_);
  swap(ap_p_factor_safety_nu_, other->ap_p_factor_safety_nu_);
  swap(ap_p_roi_corner_y_par_out_m_, other->ap_p_roi_corner_y_par_out_m_);
  swap(mp_p_roi_corner_y_prpb_in_op_m_, other->mp_p_roi_corner_y_prpb_in_op_m_);
  swap(mp_p_roi_corner_x_par_in_op_m_, other->mp_p_roi_corner_x_par_in_op_m_);
  swap(mp_p_roi_corner_x_par_out_op_m_, other->mp_p_roi_corner_x_par_out_op_m_);
  swap(ap_p_parkout_ego_dist_to_fake_objects_ang_m_, other->ap_p_parkout_ego_dist_to_fake_objects_ang_m_);
  swap(ap_p_roi_corner_y_angs_out_m_, other->ap_p_roi_corner_y_angs_out_m_);
  swap(ap_p_max_parking_vel_fwd_mps_, other->ap_p_max_parking_vel_fwd_mps_);
  swap(ap_p_min_dist_start_tgtaxis_m_, other->ap_p_min_dist_start_tgtaxis_m_);
  swap(ap_p_roi_corner_y_par_in_op_m_, other->ap_p_roi_corner_y_par_in_op_m_);
  swap(ap_p_roi_corner_x_prpb_out_op_m_, other->ap_p_roi_corner_x_prpb_out_op_m_);
  swap(ap_p_prp_fwd_r_scale_1st_strk_m_, other->ap_p_prp_fwd_r_scale_1st_strk_m_);
  swap(ap_p_inc_cir_length_for_scur_out_m_, other->ap_p_inc_cir_length_for_scur_out_m_);
  swap(mp_p_roi_corner_x_angr_out_op_m_, other->mp_p_roi_corner_x_angr_out_op_m_);
  swap(ap_p_roi_corner_y_prpf_out_op_m_, other->ap_p_roi_corner_y_prpf_out_op_m_);
  swap(ap_p_out_vrtx_radius_scaling_nu_, other->ap_p_out_vrtx_radius_scaling_nu_);
  swap(ap_p_max_lat_dev_for_straight_repl_par_m_, other->ap_p_max_lat_dev_for_straight_repl_par_m_);
  swap(ap_p_ratio_confined_space_, other->ap_p_ratio_confined_space_);
  swap(mp_p_roi_corner_y_angs_in_op_m_, other->mp_p_roi_corner_y_angs_in_op_m_);
  swap(ap_p_max_alignment_radius_m_, other->ap_p_max_alignment_radius_m_);
  swap(mp_p_roi_corner_x_angr_in_op_m_, other->mp_p_roi_corner_x_angr_in_op_m_);
  swap(ap_p_min_radius_add_circle_m_, other->ap_p_min_radius_add_circle_m_);
  swap(ap_p_roi_corner_x_angs_out_m_, other->ap_p_roi_corner_x_angs_out_m_);
  swap(ap_p_parkout_blind_distance_perp_m_, other->ap_p_parkout_blind_distance_perp_m_);
  swap(ap_p_min_alignment_angle_rad_, other->ap_p_min_alignment_angle_rad_);
  swap(ap_p_max_prep_stroke_len_straight_m_, other->ap_p_max_prep_stroke_len_straight_m_);
  swap(ap_p_max_attempt_wrap_up_triangle_, other->ap_p_max_attempt_wrap_up_triangle_);
  swap(ap_p_parkout_ego_dist_to_fake_objects_par_m_, other->ap_p_parkout_ego_dist_to_fake_objects_par_m_);
  swap(ap_p_max_height_of_triangle_clo_collision_m_, other->ap_p_max_height_of_triangle_clo_collision_m_);
  swap(ap_p_virtual_obj_dist_to_tp_m_, other->ap_p_virtual_obj_dist_to_tp_m_);
  swap(ap_p_ratio_add_min_radius_angled_, other->ap_p_ratio_add_min_radius_angled_);
  swap(mp_p_roi_corner_y_angs_out_op_m_, other->mp_p_roi_corner_y_angs_out_op_m_);
  swap(mp_p_roi_corner_x_angr_in_m_, other->mp_p_roi_corner_x_angr_in_m_);
  swap(ap_p_perp_bwd_in_yaw_dev_fctr_, other->ap_p_perp_bwd_in_yaw_dev_fctr_);
  swap(ap_p_roi_corner_y_prpf_in_m_, other->ap_p_roi_corner_y_prpf_in_m_);
  swap(ap_p_perp_fwd_in_lat_dev_fctr_, other->ap_p_perp_fwd_in_lat_dev_fctr_);
  swap(ap_p_max_scurve_dist_to_tgt_pose_m_, other->ap_p_max_scurve_dist_to_tgt_pose_m_);
  swap(mp_p_roi_corner_x_angs_out_m_, other->mp_p_roi_corner_x_angs_out_m_);
  swap(mp_p_roi_corner_y_par_in_m_, other->mp_p_roi_corner_y_par_in_m_);
  swap(ap_p_roi_corner_x_angs_out_op_m_, other->ap_p_roi_corner_x_angs_out_op_m_);
  swap(ap_p_roi_corner_x_par_in_op_m_, other->ap_p_roi_corner_x_par_in_op_m_);
  swap(ap_p_radius_ext_perp_fin_stro_m_, other->ap_p_radius_ext_perp_fin_stro_m_);
  swap(mp_p_roi_corner_x_prpf_in_m_, other->mp_p_roi_corner_x_prpf_in_m_);
  swap(ap_p_par_repl_max_extend_dist_after_scurve_m_, other->ap_p_par_repl_max_extend_dist_after_scurve_m_);
  swap(ap_p_roi_corner_y_angr_in_op_m_, other->ap_p_roi_corner_y_angr_in_op_m_);
  swap(ap_p_roi_corner_y_angr_in_m_, other->ap_p_roi_corner_y_angr_in_m_);
  swap(ap_p_max_dist_perp_wo_bckt_m_, other->ap_p_max_dist_perp_wo_bckt_m_);
  swap(ap_p_roi_corner_y_prpb_in_m_, other->ap_p_roi_corner_y_prpb_in_m_);
  swap(ap_p_roi_corner_x_angs_in_op_m_, other->ap_p_roi_corner_x_angs_in_op_m_);
  swap(mp_p_roi_corner_y_par_in_op_m_, other->mp_p_roi_corner_y_par_in_op_m_);
  swap(ap_p_max_poly_vel_mps_, other->ap_p_max_poly_vel_mps_);
  swap(ap_p_par_max_dist_for_sym_scurve_m_, other->ap_p_par_max_dist_for_sym_scurve_m_);
  swap(ap_p_roi_corner_y_angr_out_op_m_, other->ap_p_roi_corner_y_angr_out_op_m_);
  swap(mp_p_roi_corner_x_prpf_out_op_m_, other->mp_p_roi_corner_x_prpf_out_op_m_);
  swap(mp_p_roi_corner_y_prpb_out_op_m_, other->mp_p_roi_corner_y_prpb_out_op_m_);
  swap(ap_p_best_path_goal_dev_thr_nu_, other->ap_p_best_path_goal_dev_thr_nu_);
  swap(mp_p_roi_corner_x_par_out_m_, other->mp_p_roi_corner_x_par_out_m_);
  swap(ap_p_pout_perp_straight_ext_m_, other->ap_p_pout_perp_straight_ext_m_);
  swap(ap_p_roi_corner_y_par_in_m_, other->ap_p_roi_corner_y_par_in_m_);
  swap(mp_p_roi_corner_x_angs_in_m_, other->mp_p_roi_corner_x_angs_in_m_);
  swap(ap_p_min_prep_stroke_len_straight_m_, other->ap_p_min_prep_stroke_len_straight_m_);
  swap(ap_p_roi_corner_y_par_out_op_m_, other->ap_p_roi_corner_y_par_out_op_m_);
  swap(ap_p_roi_corner_x_prpb_in_op_m_, other->ap_p_roi_corner_x_prpb_in_op_m_);
  swap(ap_p_dist_to_pb_for_misal_start_pose_planning_m_, other->ap_p_dist_to_pb_for_misal_start_pose_planning_m_);
  swap(mp_p_roi_corner_y_angs_out_m_, other->mp_p_roi_corner_y_angs_out_m_);
  swap(mp_p_roi_corner_x_prpf_in_op_m_, other->mp_p_roi_corner_x_prpf_in_op_m_);
  swap(ap_p_add_straight_to_wheelstopper_m_, other->ap_p_add_straight_to_wheelstopper_m_);
  swap(ap_p_max_distance_shorten_first_strk_fwd_, other->ap_p_max_distance_shorten_first_strk_fwd_);
  swap(mp_p_roi_corner_y_angr_in_m_, other->mp_p_roi_corner_y_angr_in_m_);
  swap(mp_p_roi_corner_x_par_in_m_, other->mp_p_roi_corner_x_par_in_m_);
  swap(mp_p_roi_corner_x_prpb_in_m_, other->mp_p_roi_corner_x_prpb_in_m_);
  swap(ap_p_best_path_length_thr_m_, other->ap_p_best_path_length_thr_m_);
  swap(ap_p_perp_straight_min_bwd_dist_fwd_strk_m_, other->ap_p_perp_straight_min_bwd_dist_fwd_strk_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TRJPLA_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_TRJPLA_Params_array_port::InitAsDefaultInstance() {
}
class FC_TRJPLA_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TRJPLA_Params_array_port>()._has_bits_);
};

FC_TRJPLA_Params_array_port::FC_TRJPLA_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
}
FC_TRJPLA_Params_array_port::FC_TRJPLA_Params_array_port(const FC_TRJPLA_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
}

void FC_TRJPLA_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TRJPLA_Params_array_port_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.base);
}

FC_TRJPLA_Params_array_port::~FC_TRJPLA_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  SharedDtor();
}

void FC_TRJPLA_Params_array_port::SharedDtor() {
}

void FC_TRJPLA_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TRJPLA_Params_array_port& FC_TRJPLA_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TRJPLA_Params_array_port_ap_5ftp_2ffc_5ftrjpla_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TRJPLA_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TRJPLA_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params data = 3531;
      case 3531:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TRJPLA_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params data = 3531;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3531, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  return target;
}

size_t FC_TRJPLA_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params data = 3531;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TRJPLA_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TRJPLA_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TRJPLA_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_TRJPLA_Params_array_port::MergeFrom(const FC_TRJPLA_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_TRJPLA_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TRJPLA_Params_array_port::CopyFrom(const FC_TRJPLA_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_tp.fc_trjpla_params.FC_TRJPLA_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TRJPLA_Params_array_port::IsInitialized() const {
  return true;
}

void FC_TRJPLA_Params_array_port::InternalSwap(FC_TRJPLA_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TRJPLA_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_trjpla_params
}  // namespace ap_tp
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params* Arena::CreateMaybeMessage< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port* Arena::CreateMaybeMessage< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_tp::fc_trjpla_params::FC_TRJPLA_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
