// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lvmd/lvmd_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5flvmd_2flvmd_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5flvmd_2flvmd_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5flvmd_2flvmd_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5flvmd_2flvmd_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto;
namespace pb {
namespace mf_lvmd {
namespace lvmd_params {
class LvmdParams;
class LvmdParamsDefaultTypeInternal;
extern LvmdParamsDefaultTypeInternal _LvmdParams_default_instance_;
class LvmdParams_array_port;
class LvmdParams_array_portDefaultTypeInternal;
extern LvmdParams_array_portDefaultTypeInternal _LvmdParams_array_port_default_instance_;
}  // namespace lvmd_params
}  // namespace mf_lvmd
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_lvmd::lvmd_params::LvmdParams* Arena::CreateMaybeMessage<::pb::mf_lvmd::lvmd_params::LvmdParams>(Arena*);
template<> ::pb::mf_lvmd::lvmd_params::LvmdParams_array_port* Arena::CreateMaybeMessage<::pb::mf_lvmd::lvmd_params::LvmdParams_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_lvmd {
namespace lvmd_params {

// ===================================================================

class LvmdParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lvmd.lvmd_params.LvmdParams) */ {
 public:
  LvmdParams();
  virtual ~LvmdParams();

  LvmdParams(const LvmdParams& from);
  LvmdParams(LvmdParams&& from) noexcept
    : LvmdParams() {
    *this = ::std::move(from);
  }

  inline LvmdParams& operator=(const LvmdParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LvmdParams& operator=(LvmdParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LvmdParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LvmdParams* internal_default_instance() {
    return reinterpret_cast<const LvmdParams*>(
               &_LvmdParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LvmdParams& a, LvmdParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LvmdParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LvmdParams* New() const final {
    return CreateMaybeMessage<LvmdParams>(nullptr);
  }

  LvmdParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LvmdParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LvmdParams& from);
  void MergeFrom(const LvmdParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LvmdParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lvmd.lvmd_params.LvmdParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto);
    return ::descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kLvmdMinEgoStandstillNuFieldNumber = 137,
    kLvmdMinLeadStandstillNuFieldNumber = 435,
    kLvmdAlertMinLeadVelocityNuFieldNumber = 490,
    kLvmdWarningInputNuFieldNumber = 1036,
    kLvmdAlertMaxLeadVelocityNuFieldNumber = 1355,
    kLvmdActNuFieldNumber = 1747,
    kLvmdMaxDetectionRangeNuFieldNumber = 2050,
    kUiVersionNumberFieldNumber = 2124,
    kLvmdMinForwardSelectionDistanceNuFieldNumber = 2208,
    kLvmdAudioWarningTimeNuFieldNumber = 2658,
    kLvmdVisualWarningTimeNuFieldNumber = 3141,
    kLvmdMaxForwardSelectionDistanceNuFieldNumber = 3341,
    kLvmdAlertMinDriveoffDistanceNuFieldNumber = 3343,
    kLvmdMinForwardAlertDistanceNuFieldNumber = 3946,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float lvmdMinEgoStandstill_nu = 137;
  bool has_lvmdminegostandstill_nu() const;
  private:
  bool _internal_has_lvmdminegostandstill_nu() const;
  public:
  void clear_lvmdminegostandstill_nu();
  float lvmdminegostandstill_nu() const;
  void set_lvmdminegostandstill_nu(float value);
  private:
  float _internal_lvmdminegostandstill_nu() const;
  void _internal_set_lvmdminegostandstill_nu(float value);
  public:

  // optional float lvmdMinLeadStandstill_nu = 435;
  bool has_lvmdminleadstandstill_nu() const;
  private:
  bool _internal_has_lvmdminleadstandstill_nu() const;
  public:
  void clear_lvmdminleadstandstill_nu();
  float lvmdminleadstandstill_nu() const;
  void set_lvmdminleadstandstill_nu(float value);
  private:
  float _internal_lvmdminleadstandstill_nu() const;
  void _internal_set_lvmdminleadstandstill_nu(float value);
  public:

  // optional float lvmdAlertMinLeadVelocity_nu = 490;
  bool has_lvmdalertminleadvelocity_nu() const;
  private:
  bool _internal_has_lvmdalertminleadvelocity_nu() const;
  public:
  void clear_lvmdalertminleadvelocity_nu();
  float lvmdalertminleadvelocity_nu() const;
  void set_lvmdalertminleadvelocity_nu(float value);
  private:
  float _internal_lvmdalertminleadvelocity_nu() const;
  void _internal_set_lvmdalertminleadvelocity_nu(float value);
  public:

  // optional uint32 lvmdWarningInput_nu = 1036;
  bool has_lvmdwarninginput_nu() const;
  private:
  bool _internal_has_lvmdwarninginput_nu() const;
  public:
  void clear_lvmdwarninginput_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 lvmdwarninginput_nu() const;
  void set_lvmdwarninginput_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lvmdwarninginput_nu() const;
  void _internal_set_lvmdwarninginput_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float lvmdAlertMaxLeadVelocity_nu = 1355;
  bool has_lvmdalertmaxleadvelocity_nu() const;
  private:
  bool _internal_has_lvmdalertmaxleadvelocity_nu() const;
  public:
  void clear_lvmdalertmaxleadvelocity_nu();
  float lvmdalertmaxleadvelocity_nu() const;
  void set_lvmdalertmaxleadvelocity_nu(float value);
  private:
  float _internal_lvmdalertmaxleadvelocity_nu() const;
  void _internal_set_lvmdalertmaxleadvelocity_nu(float value);
  public:

  // optional bool lvmdAct_nu = 1747;
  bool has_lvmdact_nu() const;
  private:
  bool _internal_has_lvmdact_nu() const;
  public:
  void clear_lvmdact_nu();
  bool lvmdact_nu() const;
  void set_lvmdact_nu(bool value);
  private:
  bool _internal_lvmdact_nu() const;
  void _internal_set_lvmdact_nu(bool value);
  public:

  // optional float lvmdMaxDetectionRange_nu = 2050;
  bool has_lvmdmaxdetectionrange_nu() const;
  private:
  bool _internal_has_lvmdmaxdetectionrange_nu() const;
  public:
  void clear_lvmdmaxdetectionrange_nu();
  float lvmdmaxdetectionrange_nu() const;
  void set_lvmdmaxdetectionrange_nu(float value);
  private:
  float _internal_lvmdmaxdetectionrange_nu() const;
  void _internal_set_lvmdmaxdetectionrange_nu(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float lvmdMinForwardSelectionDistance_nu = 2208;
  bool has_lvmdminforwardselectiondistance_nu() const;
  private:
  bool _internal_has_lvmdminforwardselectiondistance_nu() const;
  public:
  void clear_lvmdminforwardselectiondistance_nu();
  float lvmdminforwardselectiondistance_nu() const;
  void set_lvmdminforwardselectiondistance_nu(float value);
  private:
  float _internal_lvmdminforwardselectiondistance_nu() const;
  void _internal_set_lvmdminforwardselectiondistance_nu(float value);
  public:

  // optional float lvmdAudioWarningTime_nu = 2658;
  bool has_lvmdaudiowarningtime_nu() const;
  private:
  bool _internal_has_lvmdaudiowarningtime_nu() const;
  public:
  void clear_lvmdaudiowarningtime_nu();
  float lvmdaudiowarningtime_nu() const;
  void set_lvmdaudiowarningtime_nu(float value);
  private:
  float _internal_lvmdaudiowarningtime_nu() const;
  void _internal_set_lvmdaudiowarningtime_nu(float value);
  public:

  // optional float lvmdVisualWarningTime_nu = 3141;
  bool has_lvmdvisualwarningtime_nu() const;
  private:
  bool _internal_has_lvmdvisualwarningtime_nu() const;
  public:
  void clear_lvmdvisualwarningtime_nu();
  float lvmdvisualwarningtime_nu() const;
  void set_lvmdvisualwarningtime_nu(float value);
  private:
  float _internal_lvmdvisualwarningtime_nu() const;
  void _internal_set_lvmdvisualwarningtime_nu(float value);
  public:

  // optional float lvmdMaxForwardSelectionDistance_nu = 3341;
  bool has_lvmdmaxforwardselectiondistance_nu() const;
  private:
  bool _internal_has_lvmdmaxforwardselectiondistance_nu() const;
  public:
  void clear_lvmdmaxforwardselectiondistance_nu();
  float lvmdmaxforwardselectiondistance_nu() const;
  void set_lvmdmaxforwardselectiondistance_nu(float value);
  private:
  float _internal_lvmdmaxforwardselectiondistance_nu() const;
  void _internal_set_lvmdmaxforwardselectiondistance_nu(float value);
  public:

  // optional float lvmdAlertMinDriveoffDistance_nu = 3343;
  bool has_lvmdalertmindriveoffdistance_nu() const;
  private:
  bool _internal_has_lvmdalertmindriveoffdistance_nu() const;
  public:
  void clear_lvmdalertmindriveoffdistance_nu();
  float lvmdalertmindriveoffdistance_nu() const;
  void set_lvmdalertmindriveoffdistance_nu(float value);
  private:
  float _internal_lvmdalertmindriveoffdistance_nu() const;
  void _internal_set_lvmdalertmindriveoffdistance_nu(float value);
  public:

  // optional float lvmdMinForwardAlertDistance_nu = 3946;
  bool has_lvmdminforwardalertdistance_nu() const;
  private:
  bool _internal_has_lvmdminforwardalertdistance_nu() const;
  public:
  void clear_lvmdminforwardalertdistance_nu();
  float lvmdminforwardalertdistance_nu() const;
  void set_lvmdminforwardalertdistance_nu(float value);
  private:
  float _internal_lvmdminforwardalertdistance_nu() const;
  void _internal_set_lvmdminforwardalertdistance_nu(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_lvmd.lvmd_params.LvmdParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float lvmdminegostandstill_nu_;
  float lvmdminleadstandstill_nu_;
  float lvmdalertminleadvelocity_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lvmdwarninginput_nu_;
  float lvmdalertmaxleadvelocity_nu_;
  bool lvmdact_nu_;
  float lvmdmaxdetectionrange_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float lvmdminforwardselectiondistance_nu_;
  float lvmdaudiowarningtime_nu_;
  float lvmdvisualwarningtime_nu_;
  float lvmdmaxforwardselectiondistance_nu_;
  float lvmdalertmindriveoffdistance_nu_;
  float lvmdminforwardalertdistance_nu_;
  friend struct ::TableStruct_mf_5flvmd_2flvmd_5fparams_2eproto;
};
// -------------------------------------------------------------------

class LvmdParams_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_lvmd.lvmd_params.LvmdParams_array_port) */ {
 public:
  LvmdParams_array_port();
  virtual ~LvmdParams_array_port();

  LvmdParams_array_port(const LvmdParams_array_port& from);
  LvmdParams_array_port(LvmdParams_array_port&& from) noexcept
    : LvmdParams_array_port() {
    *this = ::std::move(from);
  }

  inline LvmdParams_array_port& operator=(const LvmdParams_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline LvmdParams_array_port& operator=(LvmdParams_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LvmdParams_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LvmdParams_array_port* internal_default_instance() {
    return reinterpret_cast<const LvmdParams_array_port*>(
               &_LvmdParams_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LvmdParams_array_port& a, LvmdParams_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(LvmdParams_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LvmdParams_array_port* New() const final {
    return CreateMaybeMessage<LvmdParams_array_port>(nullptr);
  }

  LvmdParams_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LvmdParams_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LvmdParams_array_port& from);
  void MergeFrom(const LvmdParams_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LvmdParams_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_lvmd.lvmd_params.LvmdParams_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto);
    return ::descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1977,
  };
  // repeated .pb.mf_lvmd.lvmd_params.LvmdParams data = 1977;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_lvmd::lvmd_params::LvmdParams* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lvmd::lvmd_params::LvmdParams >*
      mutable_data();
  private:
  const ::pb::mf_lvmd::lvmd_params::LvmdParams& _internal_data(int index) const;
  ::pb::mf_lvmd::lvmd_params::LvmdParams* _internal_add_data();
  public:
  const ::pb::mf_lvmd::lvmd_params::LvmdParams& data(int index) const;
  ::pb::mf_lvmd::lvmd_params::LvmdParams* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lvmd::lvmd_params::LvmdParams >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lvmd::lvmd_params::LvmdParams > data_;
  friend struct ::TableStruct_mf_5flvmd_2flvmd_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LvmdParams

// optional uint32 uiVersionNumber = 2124;
inline bool LvmdParams::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LvmdParams::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void LvmdParams::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LvmdParams::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LvmdParams::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void LvmdParams::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  uiversionnumber_ = value;
}
inline void LvmdParams::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool LvmdParams::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool LvmdParams::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& LvmdParams::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& LvmdParams::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* LvmdParams::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_lvmd.lvmd_params.LvmdParams.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* LvmdParams::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* LvmdParams::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_lvmd.lvmd_params.LvmdParams.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void LvmdParams::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_lvmd.lvmd_params.LvmdParams.sSigHeader)
}

// optional bool lvmdAct_nu = 1747;
inline bool LvmdParams::_internal_has_lvmdact_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdact_nu() const {
  return _internal_has_lvmdact_nu();
}
inline void LvmdParams::clear_lvmdact_nu() {
  lvmdact_nu_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LvmdParams::_internal_lvmdact_nu() const {
  return lvmdact_nu_;
}
inline bool LvmdParams::lvmdact_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAct_nu)
  return _internal_lvmdact_nu();
}
inline void LvmdParams::_internal_set_lvmdact_nu(bool value) {
  _has_bits_[0] |= 0x00000040u;
  lvmdact_nu_ = value;
}
inline void LvmdParams::set_lvmdact_nu(bool value) {
  _internal_set_lvmdact_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAct_nu)
}

// optional uint32 lvmdWarningInput_nu = 1036;
inline bool LvmdParams::_internal_has_lvmdwarninginput_nu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdwarninginput_nu() const {
  return _internal_has_lvmdwarninginput_nu();
}
inline void LvmdParams::clear_lvmdwarninginput_nu() {
  lvmdwarninginput_nu_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LvmdParams::_internal_lvmdwarninginput_nu() const {
  return lvmdwarninginput_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LvmdParams::lvmdwarninginput_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdWarningInput_nu)
  return _internal_lvmdwarninginput_nu();
}
inline void LvmdParams::_internal_set_lvmdwarninginput_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  lvmdwarninginput_nu_ = value;
}
inline void LvmdParams::set_lvmdwarninginput_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lvmdwarninginput_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdWarningInput_nu)
}

// optional float lvmdMinForwardSelectionDistance_nu = 2208;
inline bool LvmdParams::_internal_has_lvmdminforwardselectiondistance_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdminforwardselectiondistance_nu() const {
  return _internal_has_lvmdminforwardselectiondistance_nu();
}
inline void LvmdParams::clear_lvmdminforwardselectiondistance_nu() {
  lvmdminforwardselectiondistance_nu_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float LvmdParams::_internal_lvmdminforwardselectiondistance_nu() const {
  return lvmdminforwardselectiondistance_nu_;
}
inline float LvmdParams::lvmdminforwardselectiondistance_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinForwardSelectionDistance_nu)
  return _internal_lvmdminforwardselectiondistance_nu();
}
inline void LvmdParams::_internal_set_lvmdminforwardselectiondistance_nu(float value) {
  _has_bits_[0] |= 0x00000200u;
  lvmdminforwardselectiondistance_nu_ = value;
}
inline void LvmdParams::set_lvmdminforwardselectiondistance_nu(float value) {
  _internal_set_lvmdminforwardselectiondistance_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinForwardSelectionDistance_nu)
}

// optional float lvmdMaxForwardSelectionDistance_nu = 3341;
inline bool LvmdParams::_internal_has_lvmdmaxforwardselectiondistance_nu() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdmaxforwardselectiondistance_nu() const {
  return _internal_has_lvmdmaxforwardselectiondistance_nu();
}
inline void LvmdParams::clear_lvmdmaxforwardselectiondistance_nu() {
  lvmdmaxforwardselectiondistance_nu_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float LvmdParams::_internal_lvmdmaxforwardselectiondistance_nu() const {
  return lvmdmaxforwardselectiondistance_nu_;
}
inline float LvmdParams::lvmdmaxforwardselectiondistance_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMaxForwardSelectionDistance_nu)
  return _internal_lvmdmaxforwardselectiondistance_nu();
}
inline void LvmdParams::_internal_set_lvmdmaxforwardselectiondistance_nu(float value) {
  _has_bits_[0] |= 0x00001000u;
  lvmdmaxforwardselectiondistance_nu_ = value;
}
inline void LvmdParams::set_lvmdmaxforwardselectiondistance_nu(float value) {
  _internal_set_lvmdmaxforwardselectiondistance_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMaxForwardSelectionDistance_nu)
}

// optional float lvmdMinForwardAlertDistance_nu = 3946;
inline bool LvmdParams::_internal_has_lvmdminforwardalertdistance_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdminforwardalertdistance_nu() const {
  return _internal_has_lvmdminforwardalertdistance_nu();
}
inline void LvmdParams::clear_lvmdminforwardalertdistance_nu() {
  lvmdminforwardalertdistance_nu_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float LvmdParams::_internal_lvmdminforwardalertdistance_nu() const {
  return lvmdminforwardalertdistance_nu_;
}
inline float LvmdParams::lvmdminforwardalertdistance_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinForwardAlertDistance_nu)
  return _internal_lvmdminforwardalertdistance_nu();
}
inline void LvmdParams::_internal_set_lvmdminforwardalertdistance_nu(float value) {
  _has_bits_[0] |= 0x00004000u;
  lvmdminforwardalertdistance_nu_ = value;
}
inline void LvmdParams::set_lvmdminforwardalertdistance_nu(float value) {
  _internal_set_lvmdminforwardalertdistance_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinForwardAlertDistance_nu)
}

// optional float lvmdMaxDetectionRange_nu = 2050;
inline bool LvmdParams::_internal_has_lvmdmaxdetectionrange_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdmaxdetectionrange_nu() const {
  return _internal_has_lvmdmaxdetectionrange_nu();
}
inline void LvmdParams::clear_lvmdmaxdetectionrange_nu() {
  lvmdmaxdetectionrange_nu_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float LvmdParams::_internal_lvmdmaxdetectionrange_nu() const {
  return lvmdmaxdetectionrange_nu_;
}
inline float LvmdParams::lvmdmaxdetectionrange_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMaxDetectionRange_nu)
  return _internal_lvmdmaxdetectionrange_nu();
}
inline void LvmdParams::_internal_set_lvmdmaxdetectionrange_nu(float value) {
  _has_bits_[0] |= 0x00000080u;
  lvmdmaxdetectionrange_nu_ = value;
}
inline void LvmdParams::set_lvmdmaxdetectionrange_nu(float value) {
  _internal_set_lvmdmaxdetectionrange_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMaxDetectionRange_nu)
}

// optional float lvmdAlertMinDriveoffDistance_nu = 3343;
inline bool LvmdParams::_internal_has_lvmdalertmindriveoffdistance_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdalertmindriveoffdistance_nu() const {
  return _internal_has_lvmdalertmindriveoffdistance_nu();
}
inline void LvmdParams::clear_lvmdalertmindriveoffdistance_nu() {
  lvmdalertmindriveoffdistance_nu_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float LvmdParams::_internal_lvmdalertmindriveoffdistance_nu() const {
  return lvmdalertmindriveoffdistance_nu_;
}
inline float LvmdParams::lvmdalertmindriveoffdistance_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAlertMinDriveoffDistance_nu)
  return _internal_lvmdalertmindriveoffdistance_nu();
}
inline void LvmdParams::_internal_set_lvmdalertmindriveoffdistance_nu(float value) {
  _has_bits_[0] |= 0x00002000u;
  lvmdalertmindriveoffdistance_nu_ = value;
}
inline void LvmdParams::set_lvmdalertmindriveoffdistance_nu(float value) {
  _internal_set_lvmdalertmindriveoffdistance_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAlertMinDriveoffDistance_nu)
}

// optional float lvmdMinEgoStandstill_nu = 137;
inline bool LvmdParams::_internal_has_lvmdminegostandstill_nu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdminegostandstill_nu() const {
  return _internal_has_lvmdminegostandstill_nu();
}
inline void LvmdParams::clear_lvmdminegostandstill_nu() {
  lvmdminegostandstill_nu_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float LvmdParams::_internal_lvmdminegostandstill_nu() const {
  return lvmdminegostandstill_nu_;
}
inline float LvmdParams::lvmdminegostandstill_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinEgoStandstill_nu)
  return _internal_lvmdminegostandstill_nu();
}
inline void LvmdParams::_internal_set_lvmdminegostandstill_nu(float value) {
  _has_bits_[0] |= 0x00000002u;
  lvmdminegostandstill_nu_ = value;
}
inline void LvmdParams::set_lvmdminegostandstill_nu(float value) {
  _internal_set_lvmdminegostandstill_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinEgoStandstill_nu)
}

// optional float lvmdMinLeadStandstill_nu = 435;
inline bool LvmdParams::_internal_has_lvmdminleadstandstill_nu() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdminleadstandstill_nu() const {
  return _internal_has_lvmdminleadstandstill_nu();
}
inline void LvmdParams::clear_lvmdminleadstandstill_nu() {
  lvmdminleadstandstill_nu_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float LvmdParams::_internal_lvmdminleadstandstill_nu() const {
  return lvmdminleadstandstill_nu_;
}
inline float LvmdParams::lvmdminleadstandstill_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinLeadStandstill_nu)
  return _internal_lvmdminleadstandstill_nu();
}
inline void LvmdParams::_internal_set_lvmdminleadstandstill_nu(float value) {
  _has_bits_[0] |= 0x00000004u;
  lvmdminleadstandstill_nu_ = value;
}
inline void LvmdParams::set_lvmdminleadstandstill_nu(float value) {
  _internal_set_lvmdminleadstandstill_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdMinLeadStandstill_nu)
}

// optional float lvmdVisualWarningTime_nu = 3141;
inline bool LvmdParams::_internal_has_lvmdvisualwarningtime_nu() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdvisualwarningtime_nu() const {
  return _internal_has_lvmdvisualwarningtime_nu();
}
inline void LvmdParams::clear_lvmdvisualwarningtime_nu() {
  lvmdvisualwarningtime_nu_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float LvmdParams::_internal_lvmdvisualwarningtime_nu() const {
  return lvmdvisualwarningtime_nu_;
}
inline float LvmdParams::lvmdvisualwarningtime_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdVisualWarningTime_nu)
  return _internal_lvmdvisualwarningtime_nu();
}
inline void LvmdParams::_internal_set_lvmdvisualwarningtime_nu(float value) {
  _has_bits_[0] |= 0x00000800u;
  lvmdvisualwarningtime_nu_ = value;
}
inline void LvmdParams::set_lvmdvisualwarningtime_nu(float value) {
  _internal_set_lvmdvisualwarningtime_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdVisualWarningTime_nu)
}

// optional float lvmdAudioWarningTime_nu = 2658;
inline bool LvmdParams::_internal_has_lvmdaudiowarningtime_nu() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdaudiowarningtime_nu() const {
  return _internal_has_lvmdaudiowarningtime_nu();
}
inline void LvmdParams::clear_lvmdaudiowarningtime_nu() {
  lvmdaudiowarningtime_nu_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float LvmdParams::_internal_lvmdaudiowarningtime_nu() const {
  return lvmdaudiowarningtime_nu_;
}
inline float LvmdParams::lvmdaudiowarningtime_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAudioWarningTime_nu)
  return _internal_lvmdaudiowarningtime_nu();
}
inline void LvmdParams::_internal_set_lvmdaudiowarningtime_nu(float value) {
  _has_bits_[0] |= 0x00000400u;
  lvmdaudiowarningtime_nu_ = value;
}
inline void LvmdParams::set_lvmdaudiowarningtime_nu(float value) {
  _internal_set_lvmdaudiowarningtime_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAudioWarningTime_nu)
}

// optional float lvmdAlertMinLeadVelocity_nu = 490;
inline bool LvmdParams::_internal_has_lvmdalertminleadvelocity_nu() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdalertminleadvelocity_nu() const {
  return _internal_has_lvmdalertminleadvelocity_nu();
}
inline void LvmdParams::clear_lvmdalertminleadvelocity_nu() {
  lvmdalertminleadvelocity_nu_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float LvmdParams::_internal_lvmdalertminleadvelocity_nu() const {
  return lvmdalertminleadvelocity_nu_;
}
inline float LvmdParams::lvmdalertminleadvelocity_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAlertMinLeadVelocity_nu)
  return _internal_lvmdalertminleadvelocity_nu();
}
inline void LvmdParams::_internal_set_lvmdalertminleadvelocity_nu(float value) {
  _has_bits_[0] |= 0x00000008u;
  lvmdalertminleadvelocity_nu_ = value;
}
inline void LvmdParams::set_lvmdalertminleadvelocity_nu(float value) {
  _internal_set_lvmdalertminleadvelocity_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAlertMinLeadVelocity_nu)
}

// optional float lvmdAlertMaxLeadVelocity_nu = 1355;
inline bool LvmdParams::_internal_has_lvmdalertmaxleadvelocity_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LvmdParams::has_lvmdalertmaxleadvelocity_nu() const {
  return _internal_has_lvmdalertmaxleadvelocity_nu();
}
inline void LvmdParams::clear_lvmdalertmaxleadvelocity_nu() {
  lvmdalertmaxleadvelocity_nu_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float LvmdParams::_internal_lvmdalertmaxleadvelocity_nu() const {
  return lvmdalertmaxleadvelocity_nu_;
}
inline float LvmdParams::lvmdalertmaxleadvelocity_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAlertMaxLeadVelocity_nu)
  return _internal_lvmdalertmaxleadvelocity_nu();
}
inline void LvmdParams::_internal_set_lvmdalertmaxleadvelocity_nu(float value) {
  _has_bits_[0] |= 0x00000020u;
  lvmdalertmaxleadvelocity_nu_ = value;
}
inline void LvmdParams::set_lvmdalertmaxleadvelocity_nu(float value) {
  _internal_set_lvmdalertmaxleadvelocity_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_lvmd.lvmd_params.LvmdParams.lvmdAlertMaxLeadVelocity_nu)
}

// -------------------------------------------------------------------

// LvmdParams_array_port

// repeated .pb.mf_lvmd.lvmd_params.LvmdParams data = 1977;
inline int LvmdParams_array_port::_internal_data_size() const {
  return data_.size();
}
inline int LvmdParams_array_port::data_size() const {
  return _internal_data_size();
}
inline void LvmdParams_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_lvmd::lvmd_params::LvmdParams* LvmdParams_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_lvmd.lvmd_params.LvmdParams_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lvmd::lvmd_params::LvmdParams >*
LvmdParams_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_lvmd.lvmd_params.LvmdParams_array_port.data)
  return &data_;
}
inline const ::pb::mf_lvmd::lvmd_params::LvmdParams& LvmdParams_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_lvmd::lvmd_params::LvmdParams& LvmdParams_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_lvmd.lvmd_params.LvmdParams_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_lvmd::lvmd_params::LvmdParams* LvmdParams_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_lvmd::lvmd_params::LvmdParams* LvmdParams_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_lvmd.lvmd_params.LvmdParams_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_lvmd::lvmd_params::LvmdParams >&
LvmdParams_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_lvmd.lvmd_params.LvmdParams_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lvmd_params
}  // namespace mf_lvmd
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5flvmd_2flvmd_5fparams_2eproto
