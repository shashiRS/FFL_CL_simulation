// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_lvmd/lvmd_params.proto

#include "mf_lvmd/lvmd_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flvmd_2flvmd_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto;
namespace pb {
namespace mf_lvmd {
namespace lvmd_params {
class LvmdParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LvmdParams> _instance;
} _LvmdParams_default_instance_;
class LvmdParams_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LvmdParams_array_port> _instance;
} _LvmdParams_array_port_default_instance_;
}  // namespace lvmd_params
}  // namespace mf_lvmd
}  // namespace pb
static void InitDefaultsscc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lvmd::lvmd_params::_LvmdParams_default_instance_;
    new (ptr) ::pb::mf_lvmd::lvmd_params::LvmdParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lvmd::lvmd_params::LvmdParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_LvmdParams_array_port_mf_5flvmd_2flvmd_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_lvmd::lvmd_params::_LvmdParams_array_port_default_instance_;
    new (ptr) ::pb::mf_lvmd::lvmd_params::LvmdParams_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_lvmd::lvmd_params::LvmdParams_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LvmdParams_array_port_mf_5flvmd_2flvmd_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LvmdParams_array_port_mf_5flvmd_2flvmd_5fparams_2eproto}, {
      &scc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5flvmd_2flvmd_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5flvmd_2flvmd_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5flvmd_2flvmd_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5flvmd_2flvmd_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdact_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdwarninginput_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdminforwardselectiondistance_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdmaxforwardselectiondistance_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdminforwardalertdistance_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdmaxdetectionrange_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdalertmindriveoffdistance_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdminegostandstill_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdminleadstandstill_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdvisualwarningtime_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdaudiowarningtime_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdalertminleadvelocity_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams, lvmdalertmaxleadvelocity_nu_),
  8,
  0,
  6,
  4,
  9,
  12,
  14,
  7,
  13,
  1,
  2,
  11,
  10,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_lvmd::lvmd_params::LvmdParams_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::pb::mf_lvmd::lvmd_params::LvmdParams)},
  { 35, 41, sizeof(::pb::mf_lvmd::lvmd_params::LvmdParams_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lvmd::lvmd_params::_LvmdParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_lvmd::lvmd_params::_LvmdParams_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5flvmd_2flvmd_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031mf_lvmd/lvmd_params.proto\022\026pb.mf_lvmd."
  "lvmd_params\032\027eco/signal_header.proto\"\270\004\n"
  "\nLvmdParams\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n"
  "\nsSigHeader\030\211\010 \001(\0132\".pb.eco.signal_heade"
  "r.SignalHeader\022\023\n\nlvmdAct_nu\030\323\r \001(\010\022\034\n\023l"
  "vmdWarningInput_nu\030\214\010 \001(\r\022+\n\"lvmdMinForw"
  "ardSelectionDistance_nu\030\240\021 \001(\002\022+\n\"lvmdMa"
  "xForwardSelectionDistance_nu\030\215\032 \001(\002\022\'\n\036l"
  "vmdMinForwardAlertDistance_nu\030\352\036 \001(\002\022!\n\030"
  "lvmdMaxDetectionRange_nu\030\202\020 \001(\002\022(\n\037lvmdA"
  "lertMinDriveoffDistance_nu\030\217\032 \001(\002\022 \n\027lvm"
  "dMinEgoStandstill_nu\030\211\001 \001(\002\022!\n\030lvmdMinLe"
  "adStandstill_nu\030\263\003 \001(\002\022!\n\030lvmdVisualWarn"
  "ingTime_nu\030\305\030 \001(\002\022 \n\027lvmdAudioWarningTim"
  "e_nu\030\342\024 \001(\002\022$\n\033lvmdAlertMinLeadVelocity_"
  "nu\030\352\003 \001(\002\022$\n\033lvmdAlertMaxLeadVelocity_nu"
  "\030\313\n \001(\002\"J\n\025LvmdParams_array_port\0221\n\004data"
  "\030\271\017 \003(\0132\".pb.mf_lvmd.lvmd_params.LvmdPar"
  "ams"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_sccs[2] = {
  &scc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto.base,
  &scc_info_LvmdParams_array_port_mf_5flvmd_2flvmd_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_once;
static bool descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto = {
  &descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_initialized, descriptor_table_protodef_mf_5flvmd_2flvmd_5fparams_2eproto, "mf_lvmd/lvmd_params.proto", 723,
  &descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_once, descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_sccs, descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5flvmd_2flvmd_5fparams_2eproto::offsets,
  file_level_metadata_mf_5flvmd_2flvmd_5fparams_2eproto, 2, file_level_enum_descriptors_mf_5flvmd_2flvmd_5fparams_2eproto, file_level_service_descriptors_mf_5flvmd_2flvmd_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5flvmd_2flvmd_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5flvmd_2flvmd_5fparams_2eproto), true);
namespace pb {
namespace mf_lvmd {
namespace lvmd_params {

// ===================================================================

void LvmdParams::InitAsDefaultInstance() {
  ::pb::mf_lvmd::lvmd_params::_LvmdParams_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class LvmdParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LvmdParams>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const LvmdParams* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lvmdact_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lvmdwarninginput_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lvmdminforwardselectiondistance_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lvmdmaxforwardselectiondistance_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lvmdminforwardalertdistance_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lvmdmaxdetectionrange_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lvmdalertmindriveoffdistance_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lvmdminegostandstill_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lvmdminleadstandstill_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lvmdvisualwarningtime_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lvmdaudiowarningtime_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lvmdalertminleadvelocity_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lvmdalertmaxleadvelocity_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
LvmdParams::_Internal::ssigheader(const LvmdParams* msg) {
  return *msg->ssigheader_;
}
void LvmdParams::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LvmdParams::LvmdParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lvmd.lvmd_params.LvmdParams)
}
LvmdParams::LvmdParams(const LvmdParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&lvmdminegostandstill_nu_, &from.lvmdminegostandstill_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&lvmdminforwardalertdistance_nu_) -
    reinterpret_cast<char*>(&lvmdminegostandstill_nu_)) + sizeof(lvmdminforwardalertdistance_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_lvmd.lvmd_params.LvmdParams)
}

void LvmdParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lvmdminforwardalertdistance_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(lvmdminforwardalertdistance_nu_));
}

LvmdParams::~LvmdParams() {
  // @@protoc_insertion_point(destructor:pb.mf_lvmd.lvmd_params.LvmdParams)
  SharedDtor();
}

void LvmdParams::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void LvmdParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LvmdParams& LvmdParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LvmdParams_mf_5flvmd_2flvmd_5fparams_2eproto.base);
  return *internal_default_instance();
}


void LvmdParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lvmd.lvmd_params.LvmdParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lvmdminegostandstill_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lvmdmaxdetectionrange_nu_) -
        reinterpret_cast<char*>(&lvmdminegostandstill_nu_)) + sizeof(lvmdmaxdetectionrange_nu_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&uiversionnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lvmdminforwardalertdistance_nu_) -
        reinterpret_cast<char*>(&uiversionnumber_)) + sizeof(lvmdminforwardalertdistance_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LvmdParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float lvmdMinEgoStandstill_nu = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_lvmdminegostandstill_nu(&has_bits);
          lvmdminegostandstill_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lvmdMinLeadStandstill_nu = 435;
      case 435:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_lvmdminleadstandstill_nu(&has_bits);
          lvmdminleadstandstill_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lvmdAlertMinLeadVelocity_nu = 490;
      case 490:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_lvmdalertminleadvelocity_nu(&has_bits);
          lvmdalertminleadvelocity_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lvmdWarningInput_nu = 1036;
      case 1036:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_lvmdwarninginput_nu(&has_bits);
          lvmdwarninginput_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lvmdAlertMaxLeadVelocity_nu = 1355;
      case 1355:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_lvmdalertmaxleadvelocity_nu(&has_bits);
          lvmdalertmaxleadvelocity_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool lvmdAct_nu = 1747;
      case 1747:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_lvmdact_nu(&has_bits);
          lvmdact_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lvmdMaxDetectionRange_nu = 2050;
      case 2050:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lvmdmaxdetectionrange_nu(&has_bits);
          lvmdmaxdetectionrange_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lvmdMinForwardSelectionDistance_nu = 2208;
      case 2208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_lvmdminforwardselectiondistance_nu(&has_bits);
          lvmdminforwardselectiondistance_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lvmdAudioWarningTime_nu = 2658;
      case 2658:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lvmdaudiowarningtime_nu(&has_bits);
          lvmdaudiowarningtime_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lvmdVisualWarningTime_nu = 3141;
      case 3141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_lvmdvisualwarningtime_nu(&has_bits);
          lvmdvisualwarningtime_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lvmdMaxForwardSelectionDistance_nu = 3341;
      case 3341:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_lvmdmaxforwardselectiondistance_nu(&has_bits);
          lvmdmaxforwardselectiondistance_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lvmdAlertMinDriveoffDistance_nu = 3343;
      case 3343:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_lvmdalertmindriveoffdistance_nu(&has_bits);
          lvmdalertmindriveoffdistance_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lvmdMinForwardAlertDistance_nu = 3946;
      case 3946:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_lvmdminforwardalertdistance_nu(&has_bits);
          lvmdminforwardalertdistance_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LvmdParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lvmd.lvmd_params.LvmdParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float lvmdMinEgoStandstill_nu = 137;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(137, this->_internal_lvmdminegostandstill_nu(), target);
  }

  // optional float lvmdMinLeadStandstill_nu = 435;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(435, this->_internal_lvmdminleadstandstill_nu(), target);
  }

  // optional float lvmdAlertMinLeadVelocity_nu = 490;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(490, this->_internal_lvmdalertminleadvelocity_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional uint32 lvmdWarningInput_nu = 1036;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1036, this->_internal_lvmdwarninginput_nu(), target);
  }

  // optional float lvmdAlertMaxLeadVelocity_nu = 1355;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1355, this->_internal_lvmdalertmaxleadvelocity_nu(), target);
  }

  // optional bool lvmdAct_nu = 1747;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1747, this->_internal_lvmdact_nu(), target);
  }

  // optional float lvmdMaxDetectionRange_nu = 2050;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2050, this->_internal_lvmdmaxdetectionrange_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float lvmdMinForwardSelectionDistance_nu = 2208;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2208, this->_internal_lvmdminforwardselectiondistance_nu(), target);
  }

  // optional float lvmdAudioWarningTime_nu = 2658;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2658, this->_internal_lvmdaudiowarningtime_nu(), target);
  }

  // optional float lvmdVisualWarningTime_nu = 3141;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3141, this->_internal_lvmdvisualwarningtime_nu(), target);
  }

  // optional float lvmdMaxForwardSelectionDistance_nu = 3341;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3341, this->_internal_lvmdmaxforwardselectiondistance_nu(), target);
  }

  // optional float lvmdAlertMinDriveoffDistance_nu = 3343;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3343, this->_internal_lvmdalertmindriveoffdistance_nu(), target);
  }

  // optional float lvmdMinForwardAlertDistance_nu = 3946;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3946, this->_internal_lvmdminforwardalertdistance_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lvmd.lvmd_params.LvmdParams)
  return target;
}

size_t LvmdParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lvmd.lvmd_params.LvmdParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float lvmdMinEgoStandstill_nu = 137;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float lvmdMinLeadStandstill_nu = 435;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float lvmdAlertMinLeadVelocity_nu = 490;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional uint32 lvmdWarningInput_nu = 1036;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lvmdwarninginput_nu());
    }

    // optional float lvmdAlertMaxLeadVelocity_nu = 1355;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional bool lvmdAct_nu = 1747;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional float lvmdMaxDetectionRange_nu = 2050;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float lvmdMinForwardSelectionDistance_nu = 2208;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional float lvmdAudioWarningTime_nu = 2658;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float lvmdVisualWarningTime_nu = 3141;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float lvmdMaxForwardSelectionDistance_nu = 3341;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float lvmdAlertMinDriveoffDistance_nu = 3343;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float lvmdMinForwardAlertDistance_nu = 3946;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LvmdParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lvmd.lvmd_params.LvmdParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LvmdParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LvmdParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lvmd.lvmd_params.LvmdParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lvmd.lvmd_params.LvmdParams)
    MergeFrom(*source);
  }
}

void LvmdParams::MergeFrom(const LvmdParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lvmd.lvmd_params.LvmdParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      lvmdminegostandstill_nu_ = from.lvmdminegostandstill_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      lvmdminleadstandstill_nu_ = from.lvmdminleadstandstill_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      lvmdalertminleadvelocity_nu_ = from.lvmdalertminleadvelocity_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      lvmdwarninginput_nu_ = from.lvmdwarninginput_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      lvmdalertmaxleadvelocity_nu_ = from.lvmdalertmaxleadvelocity_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      lvmdact_nu_ = from.lvmdact_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      lvmdmaxdetectionrange_nu_ = from.lvmdmaxdetectionrange_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000200u) {
      lvmdminforwardselectiondistance_nu_ = from.lvmdminforwardselectiondistance_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      lvmdaudiowarningtime_nu_ = from.lvmdaudiowarningtime_nu_;
    }
    if (cached_has_bits & 0x00000800u) {
      lvmdvisualwarningtime_nu_ = from.lvmdvisualwarningtime_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      lvmdmaxforwardselectiondistance_nu_ = from.lvmdmaxforwardselectiondistance_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      lvmdalertmindriveoffdistance_nu_ = from.lvmdalertmindriveoffdistance_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      lvmdminforwardalertdistance_nu_ = from.lvmdminforwardalertdistance_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LvmdParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lvmd.lvmd_params.LvmdParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LvmdParams::CopyFrom(const LvmdParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lvmd.lvmd_params.LvmdParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvmdParams::IsInitialized() const {
  return true;
}

void LvmdParams::InternalSwap(LvmdParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(lvmdminegostandstill_nu_, other->lvmdminegostandstill_nu_);
  swap(lvmdminleadstandstill_nu_, other->lvmdminleadstandstill_nu_);
  swap(lvmdalertminleadvelocity_nu_, other->lvmdalertminleadvelocity_nu_);
  swap(lvmdwarninginput_nu_, other->lvmdwarninginput_nu_);
  swap(lvmdalertmaxleadvelocity_nu_, other->lvmdalertmaxleadvelocity_nu_);
  swap(lvmdact_nu_, other->lvmdact_nu_);
  swap(lvmdmaxdetectionrange_nu_, other->lvmdmaxdetectionrange_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(lvmdminforwardselectiondistance_nu_, other->lvmdminforwardselectiondistance_nu_);
  swap(lvmdaudiowarningtime_nu_, other->lvmdaudiowarningtime_nu_);
  swap(lvmdvisualwarningtime_nu_, other->lvmdvisualwarningtime_nu_);
  swap(lvmdmaxforwardselectiondistance_nu_, other->lvmdmaxforwardselectiondistance_nu_);
  swap(lvmdalertmindriveoffdistance_nu_, other->lvmdalertmindriveoffdistance_nu_);
  swap(lvmdminforwardalertdistance_nu_, other->lvmdminforwardalertdistance_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LvmdParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LvmdParams_array_port::InitAsDefaultInstance() {
}
class LvmdParams_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<LvmdParams_array_port>()._has_bits_);
};

LvmdParams_array_port::LvmdParams_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
}
LvmdParams_array_port::LvmdParams_array_port(const LvmdParams_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
}

void LvmdParams_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LvmdParams_array_port_mf_5flvmd_2flvmd_5fparams_2eproto.base);
}

LvmdParams_array_port::~LvmdParams_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  SharedDtor();
}

void LvmdParams_array_port::SharedDtor() {
}

void LvmdParams_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LvmdParams_array_port& LvmdParams_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LvmdParams_array_port_mf_5flvmd_2flvmd_5fparams_2eproto.base);
  return *internal_default_instance();
}


void LvmdParams_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LvmdParams_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_lvmd.lvmd_params.LvmdParams data = 1977;
      case 1977:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15818>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LvmdParams_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_lvmd.lvmd_params.LvmdParams data = 1977;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1977, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  return target;
}

size_t LvmdParams_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_lvmd.lvmd_params.LvmdParams data = 1977;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LvmdParams_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const LvmdParams_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LvmdParams_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
    MergeFrom(*source);
  }
}

void LvmdParams_array_port::MergeFrom(const LvmdParams_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void LvmdParams_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LvmdParams_array_port::CopyFrom(const LvmdParams_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_lvmd.lvmd_params.LvmdParams_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvmdParams_array_port::IsInitialized() const {
  return true;
}

void LvmdParams_array_port::InternalSwap(LvmdParams_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LvmdParams_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lvmd_params
}  // namespace mf_lvmd
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_lvmd::lvmd_params::LvmdParams* Arena::CreateMaybeMessage< ::pb::mf_lvmd::lvmd_params::LvmdParams >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lvmd::lvmd_params::LvmdParams >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_lvmd::lvmd_params::LvmdParams_array_port* Arena::CreateMaybeMessage< ::pb::mf_lvmd::lvmd_params::LvmdParams_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_lvmd::lvmd_params::LvmdParams_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
