// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_common/fc_trjpla_sys_func_params.proto

#include "ap_common/fc_trjpla_sys_func_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_common {
namespace fc_trjpla_sys_func_params {
class FC_TRJPLA_Sys_Func_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TRJPLA_Sys_Func_Params> _instance;
} _FC_TRJPLA_Sys_Func_Params_default_instance_;
class FC_TRJPLA_Sys_Func_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_TRJPLA_Sys_Func_Params_array_port> _instance;
} _FC_TRJPLA_Sys_Func_Params_array_port_default_instance_;
}  // namespace fc_trjpla_sys_func_params
}  // namespace ap_common
}  // namespace pb
static void InitDefaultsscc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::fc_trjpla_sys_func_params::_FC_TRJPLA_Sys_Func_Params_default_instance_;
    new (ptr) ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_TRJPLA_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::fc_trjpla_sys_func_params::_FC_TRJPLA_Sys_Func_Params_array_port_default_instance_;
    new (ptr) ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_TRJPLA_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_TRJPLA_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto}, {
      &scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_max_decel_comfortable_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_max_curv_step_vel_red_1pm_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_default_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_no_delimiter_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_high_obst_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_high_obst_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_sside_high_obst_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_front_high_obst_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_rear_high_obst_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_door_open_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_door_open_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_trav_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_trav_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_sside_trav_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_front_trav_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_rear_trav_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_curb_down_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_front_curb_down_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_rear_curb_down_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_curb_down_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_sside_curb_down_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lane_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lane_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_parkslot_marker_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_parkslot_marker_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_max_deviation_long_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_max_deviation_lat_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_max_deviation_angl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_per_max_deviation_long_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_per_max_deviation_lat_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_per_max_deviation_angl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_traffic_side_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_max_ori_angle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_perp_max_ori_angle_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_freeze_ap_em_input_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_no_delimiter_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_wheel_dist_road_lvl_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_wheel_dist_curb_lvl_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_wheel_dist_road_lvl_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_wheel_dist_curb_lvl_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_park_out_par_min_ang_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_long_slot_rel_length_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_max_deviation_long_slot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_wide_slot_rel_width_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_max_deviation_wide_slot_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_gp_entrance_clr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_gp_entrance_clr_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_gp_driver_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_gp_passenger_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_max_lat_misalignment_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_lon_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_lat_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_par_yaw_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_per_lon_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_per_lat_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_per_yaw_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_pout_perp_lat_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_pout_perp_yaw_plan_dev_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_perp_max_long_misalignment_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_angled_max_long_misalignment_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_high_obst_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_high_obst_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_door_open_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_door_open_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_trav_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_trav_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_curb_down_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_cmf_lside_curb_down_par_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_lside_high_obst_fb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_min_sside_high_obst_fb_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_static_obj_road_shift_perp_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params, ap_g_dist_static_obj_road_shift_par_m_),
  42,
  0,
  71,
  27,
  62,
  10,
  49,
  67,
  58,
  29,
  53,
  72,
  51,
  25,
  8,
  2,
  33,
  47,
  19,
  3,
  32,
  39,
  41,
  24,
  68,
  28,
  5,
  38,
  46,
  9,
  20,
  64,
  40,
  16,
  43,
  12,
  63,
  17,
  54,
  31,
  73,
  36,
  44,
  13,
  61,
  57,
  14,
  6,
  26,
  69,
  48,
  60,
  23,
  70,
  7,
  1,
  22,
  56,
  4,
  59,
  52,
  65,
  21,
  37,
  45,
  55,
  66,
  34,
  15,
  35,
  30,
  50,
  18,
  11,
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 79, sizeof(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params)},
  { 153, 159, sizeof(::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::fc_trjpla_sys_func_params::_FC_TRJPLA_Sys_Func_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::fc_trjpla_sys_func_params::_FC_TRJPLA_Sys_Func_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)ap_common/fc_trjpla_sys_func_params.pr"
  "oto\022&pb.ap_common.fc_trjpla_sys_func_par"
  "ams\032\027eco/signal_header.proto\032\034ap_common/"
  "traffic_side.proto\"\304\030\n\031FC_TRJPLA_Sys_Fun"
  "c_Params\022\030\n\017uiVersionNumber\030\314\020 \001(\r\0227\n\nsS"
  "igHeader\030\211\010 \001(\0132\".pb.eco.signal_header.S"
  "ignalHeader\022(\n\037AP_G_MAX_DECEL_COMFORTABL"
  "E_MPS2\030\260\037 \001(\002\022\'\n\036AP_G_MAX_CURV_STEP_VEL_"
  "RED_1PM\030\220\n \001(\002\022 \n\027AP_G_DIST_MIN_DEFAULT_"
  "M\030\300\035 \001(\002\022%\n\034AP_G_DIST_MIN_NO_DELIMITER_M"
  "\030\356\002 \001(\002\022-\n$AP_G_DIST_MIN_LSIDE_HIGH_OBST"
  "_PERP_M\030\340\026 \001(\002\022-\n$AP_G_DIST_CMF_LSIDE_HI"
  "GH_OBST_PERP_M\030\240\036 \001(\002\022(\n\037AP_G_DIST_MIN_S"
  "SIDE_HIGH_OBST_M\030\277\033 \001(\002\022(\n\037AP_G_DIST_CMF"
  "_FRONT_HIGH_OBST_M\030\227\n \001(\002\022\'\n\036AP_G_DIST_C"
  "MF_REAR_HIGH_OBST_M\030\355\031 \001(\002\022-\n$AP_G_DIST_"
  "MIN_LSIDE_DOOR_OPEN_PERP_M\030\275\037 \001(\002\022-\n$AP_"
  "G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M\030\375\027 \001(\002"
  "\022(\n\037AP_G_DIST_MIN_LSIDE_TRAV_PERP_M\030\354\t \001"
  "(\002\022(\n\037AP_G_DIST_CMF_LSIDE_TRAV_PERP_M\030\236\002"
  " \001(\002\022\"\n\032AP_G_DIST_MIN_SSIDE_TRAV_M\030y \001(\002"
  "\022#\n\032AP_G_DIST_CMF_FRONT_TRAV_M\030\346\014 \001(\002\022\"\n"
  "\031AP_G_DIST_CMF_REAR_TRAV_M\030\273\023 \001(\002\022-\n$AP_"
  "G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M\030\222\006 \001(\002"
  "\022(\n\037AP_G_DIST_MIN_FRONT_CURB_DOWN_M\030\274\001 \001"
  "(\002\022\'\n\036AP_G_DIST_MIN_REAR_CURB_DOWN_M\030\327\013 "
  "\001(\002\022-\n$AP_G_DIST_CMF_LSIDE_CURB_DOWN_PER"
  "P_M\030\322\016 \001(\002\022(\n\037AP_G_DIST_CMF_SSIDE_CURB_D"
  "OWN_M\030\224\020 \001(\002\022\035\n\024AP_G_DIST_MIN_LANE_M\030\212\t "
  "\001(\002\022\035\n\024AP_G_DIST_CMF_LANE_M\030\313\036 \001(\002\022(\n\037AP"
  "_G_DIST_MIN_PARKSLOT_MARKER_M\030\224\n \001(\002\022(\n\037"
  "AP_G_DIST_CMF_PARKSLOT_MARKER_M\030\346\001 \001(\002\022&"
  "\n\035AP_G_PAR_MAX_DEVIATION_LONG_M\030\231\016 \001(\002\022%"
  "\n\034AP_G_PAR_MAX_DEVIATION_LAT_M\030\261\023 \001(\002\022(\n"
  "\037AP_G_PAR_MAX_DEVIATION_ANGL_RAD\030\241\002 \001(\002\022"
  "&\n\035AP_G_PER_MAX_DEVIATION_LONG_M\030\224\006 \001(\002\022"
  "%\n\034AP_G_PER_MAX_DEVIATION_LAT_M\030\360\035 \001(\002\022("
  "\n\037AP_G_PER_MAX_DEVIATION_ANGL_RAD\030\320\017 \001(\002"
  "\022E\n\024AP_G_TRAFFIC_SIDE_NU\030\345\005 \001(\0162&.pb.ap_"
  "common.traffic_side.TrafficSide\022#\n\032AP_G_"
  "PAR_MAX_ORI_ANGLE_RAD\030\273\021 \001(\002\022$\n\033AP_G_PER"
  "P_MAX_ORI_ANGLE_RAD\030\333\003 \001(\002\022#\n\032AP_G_FREEZ"
  "E_AP_EM_INPUT_NU\030\327\035 \001(\010\022%\n\034AP_G_DIST_CMF"
  "_NO_DELIMITER_M\030\350\005 \001(\002\022\'\n\036AP_G_WHEEL_DIS"
  "T_ROAD_LVL_PAR_M\030\374\031 \001(\002\022\'\n\036AP_G_WHEEL_DI"
  "ST_CURB_LVL_PAR_M\030\371\n \001(\002\022(\n\037AP_G_WHEEL_D"
  "IST_ROAD_LVL_PERP_M\030\276\037 \001(\002\022(\n\037AP_G_WHEEL"
  "_DIST_CURB_LVL_PERP_M\030\271\r \001(\002\022&\n\035AP_G_PAR"
  "K_OUT_PAR_MIN_ANG_RAD\030\244\022 \001(\002\022$\n\033AP_G_LON"
  "G_SLOT_REL_LENGTH_M\030\230\005 \001(\002\022\'\n\036AP_G_MAX_D"
  "EVIATION_LONG_SLOT_M\030\376\034 \001(\002\022#\n\032AP_G_WIDE"
  "_SLOT_REL_WIDTH_M\030\256\033 \001(\002\022\'\n\036AP_G_MAX_DEV"
  "IATION_WIDE_SLOT_M\030\266\005 \001(\002\022(\n\037AP_G_DIST_M"
  "IN_GP_ENTRANCE_CLR_M\030\202\002 \001(\002\022(\n\037AP_G_DIST"
  "_CMF_GP_ENTRANCE_CLR_M\030\360\t \001(\002\022\"\n\031AP_G_DI"
  "ST_CMF_GP_DRIVER_M\030\342\036 \001(\002\022%\n\034AP_G_DIST_C"
  "MF_GP_PASSENGER_M\030\315\024 \001(\002\022(\n\037AP_G_PAR_MAX"
  "_LAT_MISALIGNMENT_M\030\347\034 \001(\002\022\'\n\036AP_G_PAR_L"
  "ON_PLAN_DEV_RATIO_NU\030\376\007 \001(\002\022\'\n\036AP_G_PAR_"
  "LAT_PLAN_DEV_RATIO_NU\030\221\037 \001(\002\022\'\n\036AP_G_PAR"
  "_YAW_PLAN_DEV_RATIO_NU\030\221\002 \001(\002\022\'\n\036AP_G_PE"
  "R_LON_PLAN_DEV_RATIO_NU\030\362\037 \001(\002\022\'\n\036AP_G_P"
  "ER_LAT_PLAN_DEV_RATIO_NU\030\235\007 \001(\002\022\'\n\036AP_G_"
  "PER_YAW_PLAN_DEV_RATIO_NU\030\235\032 \001(\002\022-\n$AP_G"
  "_POUT_PERP_LAT_PLAN_DEV_RATIO_NU\030\311\001 \001(\002\022"
  "-\n$AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU\030"
  "\311\034 \001(\002\022*\n!AP_G_PERP_MAX_LONG_MISALIGNMEN"
  "T_M\030\275\031 \001(\002\022,\n#AP_G_ANGLED_MAX_LONG_MISAL"
  "IGNMENT_M\030\370\035 \001(\002\022,\n#AP_G_DIST_MIN_LSIDE_"
  "HIGH_OBST_PAR_M\030\313\006 \001(\002\022,\n#AP_G_DIST_CMF_"
  "LSIDE_HIGH_OBST_PAR_M\030\207\016 \001(\002\022,\n#AP_G_DIS"
  "T_MIN_LSIDE_DOOR_OPEN_PAR_M\030\300\022 \001(\002\022,\n#AP"
  "_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M\030\214\032 \001(\002"
  "\022\'\n\036AP_G_DIST_MIN_LSIDE_TRAV_PAR_M\030\225\036 \001("
  "\002\022\'\n\036AP_G_DIST_CMF_LSIDE_TRAV_PAR_M\030\366\014 \001"
  "(\002\022,\n#AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_"
  "M\030\305\005 \001(\002\022,\n#AP_G_DIST_CMF_LSIDE_CURB_DOW"
  "N_PAR_M\030\211\r \001(\002\022+\n\"AP_G_DIST_MIN_LSIDE_HI"
  "GH_OBST_FB_M\030\267\n \001(\002\022+\n\"AP_G_DIST_MIN_SSI"
  "DE_HIGH_OBST_FB_M\030\304\027 \001(\002\022/\n&AP_G_DIST_ST"
  "ATIC_OBJ_ROAD_SHIFT_PERP_M\030\371\005 \001(\002\022.\n%AP_"
  "G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M\030\305\003 \001("
  "\002\"x\n$FC_TRJPLA_Sys_Func_Params_array_por"
  "t\022P\n\004data\030\343\021 \003(\0132A.pb.ap_common.fc_trjpl"
  "a_sys_func_params.FC_TRJPLA_Sys_Func_Par"
  "ams"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_deps[2] = {
  &::descriptor_table_ap_5fcommon_2ftraffic_5fside_2eproto,
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base,
  &scc_info_FC_TRJPLA_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_once;
static bool descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto = {
  &descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_initialized, descriptor_table_protodef_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto, "ap_common/fc_trjpla_sys_func_params.proto", 3403,
  &descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_once, descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_sccs, descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto::offsets,
  file_level_metadata_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto, 2, file_level_enum_descriptors_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto, file_level_service_descriptors_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto), true);
namespace pb {
namespace ap_common {
namespace fc_trjpla_sys_func_params {

// ===================================================================

void FC_TRJPLA_Sys_Func_Params::InitAsDefaultInstance() {
  ::pb::ap_common::fc_trjpla_sys_func_params::_FC_TRJPLA_Sys_Func_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_TRJPLA_Sys_Func_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TRJPLA_Sys_Func_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_TRJPLA_Sys_Func_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_g_max_decel_comfortable_mps2(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_ap_g_max_curv_step_vel_red_1pm(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ap_g_dist_min_default_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_ap_g_dist_min_no_delimiter_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ap_g_dist_min_lside_high_obst_perp_m(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_ap_g_dist_cmf_lside_high_obst_perp_m(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_ap_g_dist_min_sside_high_obst_m(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_ap_g_dist_cmf_front_high_obst_m(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ap_g_dist_cmf_rear_high_obst_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_ap_g_dist_min_lside_door_open_perp_m(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_ap_g_dist_cmf_lside_door_open_perp_m(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_ap_g_dist_min_lside_trav_perp_m(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ap_g_dist_cmf_lside_trav_perp_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_g_dist_min_sside_trav_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_g_dist_cmf_front_trav_m(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ap_g_dist_cmf_rear_trav_m(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_ap_g_dist_min_lside_curb_down_perp_m(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ap_g_dist_min_front_curb_down_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_g_dist_min_rear_curb_down_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ap_g_dist_cmf_lside_curb_down_perp_m(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_ap_g_dist_cmf_sside_curb_down_m(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_ap_g_dist_min_lane_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ap_g_dist_cmf_lane_m(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_ap_g_dist_min_parkslot_marker_m(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ap_g_dist_cmf_parkslot_marker_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_g_par_max_deviation_long_m(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ap_g_par_max_deviation_lat_m(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_ap_g_par_max_deviation_angl_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ap_g_per_max_deviation_long_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ap_g_per_max_deviation_lat_m(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_ap_g_per_max_deviation_angl_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_ap_g_traffic_side_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ap_g_par_max_ori_angle_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_ap_g_perp_max_ori_angle_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ap_g_freeze_ap_em_input_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_ap_g_dist_cmf_no_delimiter_m(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ap_g_wheel_dist_road_lvl_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_ap_g_wheel_dist_curb_lvl_par_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ap_g_wheel_dist_road_lvl_perp_m(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_ap_g_wheel_dist_curb_lvl_perp_m(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ap_g_park_out_par_min_ang_rad(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_ap_g_long_slot_rel_length_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ap_g_max_deviation_long_slot_m(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_ap_g_wide_slot_rel_width_m(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_ap_g_max_deviation_wide_slot_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_g_dist_min_gp_entrance_clr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_g_dist_cmf_gp_entrance_clr_m(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ap_g_dist_cmf_gp_driver_m(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_ap_g_dist_cmf_gp_passenger_m(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_ap_g_par_max_lat_misalignment_m(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_ap_g_par_lon_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ap_g_par_lat_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_ap_g_par_yaw_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_g_per_lon_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ap_g_per_lat_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ap_g_per_yaw_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_ap_g_pout_perp_lat_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_g_pout_perp_yaw_plan_dev_ratio_nu(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_ap_g_perp_max_long_misalignment_m(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_ap_g_angled_max_long_misalignment_m(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_ap_g_dist_min_lside_high_obst_par_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ap_g_dist_cmf_lside_high_obst_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ap_g_dist_min_lside_door_open_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_ap_g_dist_cmf_lside_door_open_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_ap_g_dist_min_lside_trav_par_m(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_ap_g_dist_cmf_lside_trav_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ap_g_dist_min_lside_curb_down_par_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ap_g_dist_cmf_lside_curb_down_par_m(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ap_g_dist_min_lside_high_obst_fb_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ap_g_dist_min_sside_high_obst_fb_m(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_ap_g_dist_static_obj_road_shift_perp_m(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ap_g_dist_static_obj_road_shift_par_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_TRJPLA_Sys_Func_Params::_Internal::ssigheader(const FC_TRJPLA_Sys_Func_Params* msg) {
  return *msg->ssigheader_;
}
void FC_TRJPLA_Sys_Func_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_TRJPLA_Sys_Func_Params::FC_TRJPLA_Sys_Func_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
}
FC_TRJPLA_Sys_Func_Params::FC_TRJPLA_Sys_Func_Params(const FC_TRJPLA_Sys_Func_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&ap_g_per_lon_plan_dev_ratio_nu_, &from.ap_g_per_lon_plan_dev_ratio_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_g_wheel_dist_road_lvl_perp_m_) -
    reinterpret_cast<char*>(&ap_g_per_lon_plan_dev_ratio_nu_)) + sizeof(ap_g_wheel_dist_road_lvl_perp_m_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
}

void FC_TRJPLA_Sys_Func_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_g_wheel_dist_road_lvl_perp_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(ap_g_wheel_dist_road_lvl_perp_m_));
}

FC_TRJPLA_Sys_Func_Params::~FC_TRJPLA_Sys_Func_Params() {
  // @@protoc_insertion_point(destructor:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  SharedDtor();
}

void FC_TRJPLA_Sys_Func_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_TRJPLA_Sys_Func_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TRJPLA_Sys_Func_Params& FC_TRJPLA_Sys_Func_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TRJPLA_Sys_Func_Params_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TRJPLA_Sys_Func_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ap_g_per_lon_plan_dev_ratio_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_par_yaw_plan_dev_ratio_nu_) -
        reinterpret_cast<char*>(&ap_g_per_lon_plan_dev_ratio_nu_)) + sizeof(ap_g_par_yaw_plan_dev_ratio_nu_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_g_dist_cmf_lside_trav_perp_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_dist_min_lside_curb_down_par_m_) -
        reinterpret_cast<char*>(&ap_g_dist_cmf_lside_trav_perp_m_)) + sizeof(ap_g_dist_min_lside_curb_down_par_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_g_traffic_side_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_par_lon_plan_dev_ratio_nu_) -
        reinterpret_cast<char*>(&ap_g_traffic_side_nu_)) + sizeof(ap_g_par_lon_plan_dev_ratio_nu_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_g_dist_min_lane_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_wheel_dist_curb_lvl_par_m_) -
        reinterpret_cast<char*>(&ap_g_dist_min_lane_m_)) + sizeof(ap_g_wheel_dist_curb_lvl_par_m_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_g_dist_min_rear_curb_down_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_dist_cmf_lside_curb_down_perp_m_) -
        reinterpret_cast<char*>(&ap_g_dist_min_rear_curb_down_m_)) + sizeof(ap_g_dist_cmf_lside_curb_down_perp_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_g_per_max_deviation_angl_rad_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_dist_cmf_rear_trav_m_) -
        reinterpret_cast<char*>(&ap_g_per_max_deviation_angl_rad_)) + sizeof(ap_g_dist_cmf_rear_trav_m_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ap_g_dist_cmf_gp_passenger_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_dist_cmf_lside_door_open_par_m_) -
        reinterpret_cast<char*>(&ap_g_dist_cmf_gp_passenger_m_)) + sizeof(ap_g_dist_cmf_lside_door_open_par_m_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ap_g_per_yaw_plan_dev_ratio_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_freeze_ap_em_input_nu_) -
        reinterpret_cast<char*>(&ap_g_per_yaw_plan_dev_ratio_nu_)) + sizeof(ap_g_freeze_ap_em_input_nu_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ap_g_per_max_deviation_lat_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_max_decel_comfortable_mps2_) -
        reinterpret_cast<char*>(&ap_g_per_max_deviation_lat_m_)) + sizeof(ap_g_max_decel_comfortable_mps2_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&ap_g_dist_min_lside_door_open_perp_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_g_wheel_dist_road_lvl_perp_m_) -
        reinterpret_cast<char*>(&ap_g_dist_min_lside_door_open_perp_m_)) + sizeof(ap_g_wheel_dist_road_lvl_perp_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TRJPLA_Sys_Func_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float AP_G_DIST_MIN_SSIDE_TRAV_M = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_g_dist_min_sside_trav_m(&_has_bits_);
          ap_g_dist_min_sside_trav_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_FRONT_CURB_DOWN_M = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_g_dist_min_front_curb_down_m(&_has_bits_);
          ap_g_dist_min_front_curb_down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_g_pout_perp_lat_plan_dev_ratio_nu(&_has_bits_);
          ap_g_pout_perp_lat_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_PARKSLOT_MARKER_M = 230;
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_g_dist_cmf_parkslot_marker_m(&_has_bits_);
          ap_g_dist_cmf_parkslot_marker_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_GP_ENTRANCE_CLR_M = 258;
      case 258:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_g_dist_min_gp_entrance_clr_m(&_has_bits_);
          ap_g_dist_min_gp_entrance_clr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_YAW_PLAN_DEV_RATIO_NU = 273;
      case 273:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_g_par_yaw_plan_dev_ratio_nu(&_has_bits_);
          ap_g_par_yaw_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_TRAV_PERP_M = 286;
      case 286:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_g_dist_cmf_lside_trav_perp_m(&_has_bits_);
          ap_g_dist_cmf_lside_trav_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_MAX_DEVIATION_ANGL_RAD = 289;
      case 289:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_g_par_max_deviation_angl_rad(&_has_bits_);
          ap_g_par_max_deviation_angl_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_NO_DELIMITER_M = 366;
      case 366:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_g_dist_min_no_delimiter_m(&_has_bits_);
          ap_g_dist_min_no_delimiter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M = 453;
      case 453:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_g_dist_static_obj_road_shift_par_m(&_has_bits_);
          ap_g_dist_static_obj_road_shift_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PERP_MAX_ORI_ANGLE_RAD = 475;
      case 475:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_g_perp_max_ori_angle_rad(&_has_bits_);
          ap_g_perp_max_ori_angle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_LONG_SLOT_REL_LENGTH_M = 664;
      case 664:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_g_long_slot_rel_length_m(&_has_bits_);
          ap_g_long_slot_rel_length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_DEVIATION_WIDE_SLOT_M = 694;
      case 694:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_g_max_deviation_wide_slot_m(&_has_bits_);
          ap_g_max_deviation_wide_slot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M = 709;
      case 709:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_g_dist_min_lside_curb_down_par_m(&_has_bits_);
          ap_g_dist_min_lside_curb_down_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.ap_common.traffic_side.TrafficSide AP_G_TRAFFIC_SIDE_NU = 741;
      case 741:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::ap_common::traffic_side::TrafficSide_IsValid(val))) {
            _internal_set_ap_g_traffic_side_nu(static_cast<::pb::ap_common::traffic_side::TrafficSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(741, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_NO_DELIMITER_M = 744;
      case 744:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ap_g_dist_cmf_no_delimiter_m(&_has_bits_);
          ap_g_dist_cmf_no_delimiter_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M = 761;
      case 761:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_g_dist_static_obj_road_shift_perp_m(&_has_bits_);
          ap_g_dist_static_obj_road_shift_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M = 786;
      case 786:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_g_dist_min_lside_curb_down_perp_m(&_has_bits_);
          ap_g_dist_min_lside_curb_down_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PER_MAX_DEVIATION_LONG_M = 788;
      case 788:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_g_per_max_deviation_long_m(&_has_bits_);
          ap_g_per_max_deviation_long_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M = 843;
      case 843:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_g_dist_min_lside_high_obst_par_m(&_has_bits_);
          ap_g_dist_min_lside_high_obst_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PER_LAT_PLAN_DEV_RATIO_NU = 925;
      case 925:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_per_lat_plan_dev_ratio_nu(&_has_bits_);
          ap_g_per_lat_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_LON_PLAN_DEV_RATIO_NU = 1022;
      case 1022:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_g_par_lon_plan_dev_ratio_nu(&_has_bits_);
          ap_g_par_lon_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LANE_M = 1162;
      case 1162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_g_dist_min_lane_m(&_has_bits_);
          ap_g_dist_min_lane_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_TRAV_PERP_M = 1260;
      case 1260:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_g_dist_min_lside_trav_perp_m(&_has_bits_);
          ap_g_dist_min_lside_trav_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_GP_ENTRANCE_CLR_M = 1264;
      case 1264:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_g_dist_cmf_gp_entrance_clr_m(&_has_bits_);
          ap_g_dist_cmf_gp_entrance_clr_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_CURV_STEP_VEL_RED_1PM = 1296;
      case 1296:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_g_max_curv_step_vel_red_1pm(&_has_bits_);
          ap_g_max_curv_step_vel_red_1pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_PARKSLOT_MARKER_M = 1300;
      case 1300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_g_dist_min_parkslot_marker_m(&_has_bits_);
          ap_g_dist_min_parkslot_marker_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_FRONT_HIGH_OBST_M = 1303;
      case 1303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_g_dist_cmf_front_high_obst_m(&_has_bits_);
          ap_g_dist_cmf_front_high_obst_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M = 1335;
      case 1335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_g_dist_min_lside_high_obst_fb_m(&_has_bits_);
          ap_g_dist_min_lside_high_obst_fb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_WHEEL_DIST_CURB_LVL_PAR_M = 1401;
      case 1401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_g_wheel_dist_curb_lvl_par_m(&_has_bits_);
          ap_g_wheel_dist_curb_lvl_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_REAR_CURB_DOWN_M = 1495;
      case 1495:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_g_dist_min_rear_curb_down_m(&_has_bits_);
          ap_g_dist_min_rear_curb_down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_FRONT_TRAV_M = 1638;
      case 1638:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_g_dist_cmf_front_trav_m(&_has_bits_);
          ap_g_dist_cmf_front_trav_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_TRAV_PAR_M = 1654;
      case 1654:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_g_dist_cmf_lside_trav_par_m(&_has_bits_);
          ap_g_dist_cmf_lside_trav_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M = 1673;
      case 1673:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_g_dist_cmf_lside_curb_down_par_m(&_has_bits_);
          ap_g_dist_cmf_lside_curb_down_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_WHEEL_DIST_CURB_LVL_PERP_M = 1721;
      case 1721:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_g_wheel_dist_curb_lvl_perp_m(&_has_bits_);
          ap_g_wheel_dist_curb_lvl_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M = 1799;
      case 1799:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_g_dist_cmf_lside_high_obst_par_m(&_has_bits_);
          ap_g_dist_cmf_lside_high_obst_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_MAX_DEVIATION_LONG_M = 1817;
      case 1817:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_g_par_max_deviation_long_m(&_has_bits_);
          ap_g_par_max_deviation_long_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M = 1874;
      case 1874:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_g_dist_cmf_lside_curb_down_perp_m(&_has_bits_);
          ap_g_dist_cmf_lside_curb_down_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PER_MAX_DEVIATION_ANGL_RAD = 2000;
      case 2000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_g_per_max_deviation_angl_rad(&_has_bits_);
          ap_g_per_max_deviation_angl_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_SSIDE_CURB_DOWN_M = 2068;
      case 2068:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_g_dist_cmf_sside_curb_down_m(&_has_bits_);
          ap_g_dist_cmf_sside_curb_down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&_has_bits_);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_MAX_ORI_ANGLE_RAD = 2235;
      case 2235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_g_par_max_ori_angle_rad(&_has_bits_);
          ap_g_par_max_ori_angle_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PARK_OUT_PAR_MIN_ANG_RAD = 2340;
      case 2340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_g_park_out_par_min_ang_rad(&_has_bits_);
          ap_g_park_out_par_min_ang_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M = 2368;
      case 2368:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_g_dist_min_lside_door_open_par_m(&_has_bits_);
          ap_g_dist_min_lside_door_open_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_MAX_DEVIATION_LAT_M = 2481;
      case 2481:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_g_par_max_deviation_lat_m(&_has_bits_);
          ap_g_par_max_deviation_lat_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_REAR_TRAV_M = 2491;
      case 2491:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_g_dist_cmf_rear_trav_m(&_has_bits_);
          ap_g_dist_cmf_rear_trav_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_GP_PASSENGER_M = 2637;
      case 2637:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_g_dist_cmf_gp_passenger_m(&_has_bits_);
          ap_g_dist_cmf_gp_passenger_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M = 2912;
      case 2912:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_g_dist_min_lside_high_obst_perp_m(&_has_bits_);
          ap_g_dist_min_lside_high_obst_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M = 3012;
      case 3012:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_g_dist_min_sside_high_obst_fb_m(&_has_bits_);
          ap_g_dist_min_sside_high_obst_fb_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M = 3069;
      case 3069:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_dist_cmf_lside_door_open_perp_m(&_has_bits_);
          ap_g_dist_cmf_lside_door_open_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PERP_MAX_LONG_MISALIGNMENT_M = 3261;
      case 3261:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_perp_max_long_misalignment_m(&_has_bits_);
          ap_g_perp_max_long_misalignment_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_REAR_HIGH_OBST_M = 3309;
      case 3309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_g_dist_cmf_rear_high_obst_m(&_has_bits_);
          ap_g_dist_cmf_rear_high_obst_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_WHEEL_DIST_ROAD_LVL_PAR_M = 3324;
      case 3324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_ap_g_wheel_dist_road_lvl_par_m(&_has_bits_);
          ap_g_wheel_dist_road_lvl_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M = 3340;
      case 3340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_g_dist_cmf_lside_door_open_par_m(&_has_bits_);
          ap_g_dist_cmf_lside_door_open_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PER_YAW_PLAN_DEV_RATIO_NU = 3357;
      case 3357:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_per_yaw_plan_dev_ratio_nu(&_has_bits_);
          ap_g_per_yaw_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_WIDE_SLOT_REL_WIDTH_M = 3502;
      case 3502:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_ap_g_wide_slot_rel_width_m(&_has_bits_);
          ap_g_wide_slot_rel_width_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_M = 3519;
      case 3519:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_ap_g_dist_min_sside_high_obst_m(&_has_bits_);
          ap_g_dist_min_sside_high_obst_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU = 3657;
      case 3657:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_g_pout_perp_yaw_plan_dev_ratio_nu(&_has_bits_);
          ap_g_pout_perp_yaw_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_MAX_LAT_MISALIGNMENT_M = 3687;
      case 3687:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_ap_g_par_max_lat_misalignment_m(&_has_bits_);
          ap_g_par_max_lat_misalignment_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_DEVIATION_LONG_SLOT_M = 3710;
      case 3710:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_g_max_deviation_long_slot_m(&_has_bits_);
          ap_g_max_deviation_long_slot_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_DEFAULT_M = 3776;
      case 3776:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_g_dist_min_default_m(&_has_bits_);
          ap_g_dist_min_default_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_G_FREEZE_AP_EM_INPUT_NU = 3799;
      case 3799:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ap_g_freeze_ap_em_input_nu(&_has_bits_);
          ap_g_freeze_ap_em_input_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PER_MAX_DEVIATION_LAT_M = 3824;
      case 3824:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_g_per_max_deviation_lat_m(&_has_bits_);
          ap_g_per_max_deviation_lat_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M = 3832;
      case 3832:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_g_angled_max_long_misalignment_m(&_has_bits_);
          ap_g_angled_max_long_misalignment_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_TRAV_PAR_M = 3861;
      case 3861:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_ap_g_dist_min_lside_trav_par_m(&_has_bits_);
          ap_g_dist_min_lside_trav_par_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M = 3872;
      case 3872:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_ap_g_dist_cmf_lside_high_obst_perp_m(&_has_bits_);
          ap_g_dist_cmf_lside_high_obst_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_LANE_M = 3915;
      case 3915:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_g_dist_cmf_lane_m(&_has_bits_);
          ap_g_dist_cmf_lane_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_CMF_GP_DRIVER_M = 3938;
      case 3938:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_g_dist_cmf_gp_driver_m(&_has_bits_);
          ap_g_dist_cmf_gp_driver_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PAR_LAT_PLAN_DEV_RATIO_NU = 3985;
      case 3985:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ap_g_par_lat_plan_dev_ratio_nu(&_has_bits_);
          ap_g_par_lat_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_MAX_DECEL_COMFORTABLE_MPS2 = 4016;
      case 4016:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_ap_g_max_decel_comfortable_mps2(&_has_bits_);
          ap_g_max_decel_comfortable_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M = 4029;
      case 4029:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_ap_g_dist_min_lside_door_open_perp_m(&_has_bits_);
          ap_g_dist_min_lside_door_open_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_WHEEL_DIST_ROAD_LVL_PERP_M = 4030;
      case 4030:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_ap_g_wheel_dist_road_lvl_perp_m(&_has_bits_);
          ap_g_wheel_dist_road_lvl_perp_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_G_PER_LON_PLAN_DEV_RATIO_NU = 4082;
      case 4082:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_g_per_lon_plan_dev_ratio_nu(&_has_bits_);
          ap_g_per_lon_plan_dev_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TRJPLA_Sys_Func_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float AP_G_DIST_MIN_SSIDE_TRAV_M = 121;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(121, this->_internal_ap_g_dist_min_sside_trav_m(), target);
  }

  // optional float AP_G_DIST_MIN_FRONT_CURB_DOWN_M = 188;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(188, this->_internal_ap_g_dist_min_front_curb_down_m(), target);
  }

  // optional float AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU = 201;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(201, this->_internal_ap_g_pout_perp_lat_plan_dev_ratio_nu(), target);
  }

  // optional float AP_G_DIST_CMF_PARKSLOT_MARKER_M = 230;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(230, this->_internal_ap_g_dist_cmf_parkslot_marker_m(), target);
  }

  // optional float AP_G_DIST_MIN_GP_ENTRANCE_CLR_M = 258;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(258, this->_internal_ap_g_dist_min_gp_entrance_clr_m(), target);
  }

  // optional float AP_G_PAR_YAW_PLAN_DEV_RATIO_NU = 273;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(273, this->_internal_ap_g_par_yaw_plan_dev_ratio_nu(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_TRAV_PERP_M = 286;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(286, this->_internal_ap_g_dist_cmf_lside_trav_perp_m(), target);
  }

  // optional float AP_G_PAR_MAX_DEVIATION_ANGL_RAD = 289;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(289, this->_internal_ap_g_par_max_deviation_angl_rad(), target);
  }

  // optional float AP_G_DIST_MIN_NO_DELIMITER_M = 366;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(366, this->_internal_ap_g_dist_min_no_delimiter_m(), target);
  }

  // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M = 453;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(453, this->_internal_ap_g_dist_static_obj_road_shift_par_m(), target);
  }

  // optional float AP_G_PERP_MAX_ORI_ANGLE_RAD = 475;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(475, this->_internal_ap_g_perp_max_ori_angle_rad(), target);
  }

  // optional float AP_G_LONG_SLOT_REL_LENGTH_M = 664;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(664, this->_internal_ap_g_long_slot_rel_length_m(), target);
  }

  // optional float AP_G_MAX_DEVIATION_WIDE_SLOT_M = 694;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(694, this->_internal_ap_g_max_deviation_wide_slot_m(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M = 709;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(709, this->_internal_ap_g_dist_min_lside_curb_down_par_m(), target);
  }

  // optional .pb.ap_common.traffic_side.TrafficSide AP_G_TRAFFIC_SIDE_NU = 741;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      741, this->_internal_ap_g_traffic_side_nu(), target);
  }

  // optional float AP_G_DIST_CMF_NO_DELIMITER_M = 744;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(744, this->_internal_ap_g_dist_cmf_no_delimiter_m(), target);
  }

  // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M = 761;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(761, this->_internal_ap_g_dist_static_obj_road_shift_perp_m(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M = 786;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(786, this->_internal_ap_g_dist_min_lside_curb_down_perp_m(), target);
  }

  // optional float AP_G_PER_MAX_DEVIATION_LONG_M = 788;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(788, this->_internal_ap_g_per_max_deviation_long_m(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M = 843;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(843, this->_internal_ap_g_dist_min_lside_high_obst_par_m(), target);
  }

  // optional float AP_G_PER_LAT_PLAN_DEV_RATIO_NU = 925;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(925, this->_internal_ap_g_per_lat_plan_dev_ratio_nu(), target);
  }

  // optional float AP_G_PAR_LON_PLAN_DEV_RATIO_NU = 1022;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1022, this->_internal_ap_g_par_lon_plan_dev_ratio_nu(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float AP_G_DIST_MIN_LANE_M = 1162;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1162, this->_internal_ap_g_dist_min_lane_m(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_TRAV_PERP_M = 1260;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1260, this->_internal_ap_g_dist_min_lside_trav_perp_m(), target);
  }

  // optional float AP_G_DIST_CMF_GP_ENTRANCE_CLR_M = 1264;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1264, this->_internal_ap_g_dist_cmf_gp_entrance_clr_m(), target);
  }

  // optional float AP_G_MAX_CURV_STEP_VEL_RED_1PM = 1296;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1296, this->_internal_ap_g_max_curv_step_vel_red_1pm(), target);
  }

  // optional float AP_G_DIST_MIN_PARKSLOT_MARKER_M = 1300;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1300, this->_internal_ap_g_dist_min_parkslot_marker_m(), target);
  }

  // optional float AP_G_DIST_CMF_FRONT_HIGH_OBST_M = 1303;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1303, this->_internal_ap_g_dist_cmf_front_high_obst_m(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M = 1335;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1335, this->_internal_ap_g_dist_min_lside_high_obst_fb_m(), target);
  }

  // optional float AP_G_WHEEL_DIST_CURB_LVL_PAR_M = 1401;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1401, this->_internal_ap_g_wheel_dist_curb_lvl_par_m(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float AP_G_DIST_MIN_REAR_CURB_DOWN_M = 1495;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1495, this->_internal_ap_g_dist_min_rear_curb_down_m(), target);
  }

  // optional float AP_G_DIST_CMF_FRONT_TRAV_M = 1638;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1638, this->_internal_ap_g_dist_cmf_front_trav_m(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_TRAV_PAR_M = 1654;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1654, this->_internal_ap_g_dist_cmf_lside_trav_par_m(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M = 1673;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1673, this->_internal_ap_g_dist_cmf_lside_curb_down_par_m(), target);
  }

  // optional float AP_G_WHEEL_DIST_CURB_LVL_PERP_M = 1721;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1721, this->_internal_ap_g_wheel_dist_curb_lvl_perp_m(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M = 1799;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1799, this->_internal_ap_g_dist_cmf_lside_high_obst_par_m(), target);
  }

  // optional float AP_G_PAR_MAX_DEVIATION_LONG_M = 1817;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1817, this->_internal_ap_g_par_max_deviation_long_m(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M = 1874;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1874, this->_internal_ap_g_dist_cmf_lside_curb_down_perp_m(), target);
  }

  // optional float AP_G_PER_MAX_DEVIATION_ANGL_RAD = 2000;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2000, this->_internal_ap_g_per_max_deviation_angl_rad(), target);
  }

  // optional float AP_G_DIST_CMF_SSIDE_CURB_DOWN_M = 2068;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2068, this->_internal_ap_g_dist_cmf_sside_curb_down_m(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float AP_G_PAR_MAX_ORI_ANGLE_RAD = 2235;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2235, this->_internal_ap_g_par_max_ori_angle_rad(), target);
  }

  // optional float AP_G_PARK_OUT_PAR_MIN_ANG_RAD = 2340;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2340, this->_internal_ap_g_park_out_par_min_ang_rad(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M = 2368;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2368, this->_internal_ap_g_dist_min_lside_door_open_par_m(), target);
  }

  // optional float AP_G_PAR_MAX_DEVIATION_LAT_M = 2481;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2481, this->_internal_ap_g_par_max_deviation_lat_m(), target);
  }

  // optional float AP_G_DIST_CMF_REAR_TRAV_M = 2491;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2491, this->_internal_ap_g_dist_cmf_rear_trav_m(), target);
  }

  // optional float AP_G_DIST_CMF_GP_PASSENGER_M = 2637;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2637, this->_internal_ap_g_dist_cmf_gp_passenger_m(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M = 2912;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2912, this->_internal_ap_g_dist_min_lside_high_obst_perp_m(), target);
  }

  // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M = 3012;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3012, this->_internal_ap_g_dist_min_sside_high_obst_fb_m(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M = 3069;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3069, this->_internal_ap_g_dist_cmf_lside_door_open_perp_m(), target);
  }

  // optional float AP_G_PERP_MAX_LONG_MISALIGNMENT_M = 3261;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3261, this->_internal_ap_g_perp_max_long_misalignment_m(), target);
  }

  // optional float AP_G_DIST_CMF_REAR_HIGH_OBST_M = 3309;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3309, this->_internal_ap_g_dist_cmf_rear_high_obst_m(), target);
  }

  // optional float AP_G_WHEEL_DIST_ROAD_LVL_PAR_M = 3324;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3324, this->_internal_ap_g_wheel_dist_road_lvl_par_m(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M = 3340;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3340, this->_internal_ap_g_dist_cmf_lside_door_open_par_m(), target);
  }

  // optional float AP_G_PER_YAW_PLAN_DEV_RATIO_NU = 3357;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3357, this->_internal_ap_g_per_yaw_plan_dev_ratio_nu(), target);
  }

  // optional float AP_G_WIDE_SLOT_REL_WIDTH_M = 3502;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3502, this->_internal_ap_g_wide_slot_rel_width_m(), target);
  }

  // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_M = 3519;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3519, this->_internal_ap_g_dist_min_sside_high_obst_m(), target);
  }

  // optional float AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU = 3657;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3657, this->_internal_ap_g_pout_perp_yaw_plan_dev_ratio_nu(), target);
  }

  // optional float AP_G_PAR_MAX_LAT_MISALIGNMENT_M = 3687;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3687, this->_internal_ap_g_par_max_lat_misalignment_m(), target);
  }

  // optional float AP_G_MAX_DEVIATION_LONG_SLOT_M = 3710;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3710, this->_internal_ap_g_max_deviation_long_slot_m(), target);
  }

  // optional float AP_G_DIST_MIN_DEFAULT_M = 3776;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3776, this->_internal_ap_g_dist_min_default_m(), target);
  }

  // optional bool AP_G_FREEZE_AP_EM_INPUT_NU = 3799;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3799, this->_internal_ap_g_freeze_ap_em_input_nu(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float AP_G_PER_MAX_DEVIATION_LAT_M = 3824;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3824, this->_internal_ap_g_per_max_deviation_lat_m(), target);
  }

  // optional float AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M = 3832;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3832, this->_internal_ap_g_angled_max_long_misalignment_m(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_TRAV_PAR_M = 3861;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3861, this->_internal_ap_g_dist_min_lside_trav_par_m(), target);
  }

  // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M = 3872;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3872, this->_internal_ap_g_dist_cmf_lside_high_obst_perp_m(), target);
  }

  // optional float AP_G_DIST_CMF_LANE_M = 3915;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3915, this->_internal_ap_g_dist_cmf_lane_m(), target);
  }

  // optional float AP_G_DIST_CMF_GP_DRIVER_M = 3938;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3938, this->_internal_ap_g_dist_cmf_gp_driver_m(), target);
  }

  // optional float AP_G_PAR_LAT_PLAN_DEV_RATIO_NU = 3985;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3985, this->_internal_ap_g_par_lat_plan_dev_ratio_nu(), target);
  }

  // optional float AP_G_MAX_DECEL_COMFORTABLE_MPS2 = 4016;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4016, this->_internal_ap_g_max_decel_comfortable_mps2(), target);
  }

  // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M = 4029;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4029, this->_internal_ap_g_dist_min_lside_door_open_perp_m(), target);
  }

  // optional float AP_G_WHEEL_DIST_ROAD_LVL_PERP_M = 4030;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4030, this->_internal_ap_g_wheel_dist_road_lvl_perp_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float AP_G_PER_LON_PLAN_DEV_RATIO_NU = 4082;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4082, this->_internal_ap_g_per_lon_plan_dev_ratio_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  return target;
}

size_t FC_TRJPLA_Sys_Func_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float AP_G_PER_LON_PLAN_DEV_RATIO_NU = 4082;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_MIN_SSIDE_TRAV_M = 121;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_FRONT_CURB_DOWN_M = 188;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU = 201;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_PARKSLOT_MARKER_M = 230;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_GP_ENTRANCE_CLR_M = 258;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PAR_YAW_PLAN_DEV_RATIO_NU = 273;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_G_DIST_CMF_LSIDE_TRAV_PERP_M = 286;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PAR_MAX_DEVIATION_ANGL_RAD = 289;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_NO_DELIMITER_M = 366;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M = 453;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PERP_MAX_ORI_ANGLE_RAD = 475;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_LONG_SLOT_REL_LENGTH_M = 664;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_MAX_DEVIATION_WIDE_SLOT_M = 694;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M = 709;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .pb.ap_common.traffic_side.TrafficSide AP_G_TRAFFIC_SIDE_NU = 741;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ap_g_traffic_side_nu());
    }

    // optional float AP_G_DIST_CMF_NO_DELIMITER_M = 744;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M = 761;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M = 786;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PER_MAX_DEVIATION_LONG_M = 788;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M = 843;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PER_LAT_PLAN_DEV_RATIO_NU = 925;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PAR_LON_PLAN_DEV_RATIO_NU = 1022;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_G_DIST_MIN_LANE_M = 1162;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_TRAV_PERP_M = 1260;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_GP_ENTRANCE_CLR_M = 1264;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_MAX_CURV_STEP_VEL_RED_1PM = 1296;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_PARKSLOT_MARKER_M = 1300;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_FRONT_HIGH_OBST_M = 1303;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M = 1335;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_WHEEL_DIST_CURB_LVL_PAR_M = 1401;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_G_DIST_MIN_REAR_CURB_DOWN_M = 1495;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_FRONT_TRAV_M = 1638;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_LSIDE_TRAV_PAR_M = 1654;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M = 1673;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_WHEEL_DIST_CURB_LVL_PERP_M = 1721;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M = 1799;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_PAR_MAX_DEVIATION_LONG_M = 1817;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M = 1874;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_G_PER_MAX_DEVIATION_ANGL_RAD = 2000;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float AP_G_DIST_CMF_SSIDE_CURB_DOWN_M = 2068;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float AP_G_PAR_MAX_ORI_ANGLE_RAD = 2235;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_PARK_OUT_PAR_MIN_ANG_RAD = 2340;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M = 2368;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_PAR_MAX_DEVIATION_LAT_M = 2481;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_CMF_REAR_TRAV_M = 2491;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float AP_G_DIST_CMF_GP_PASSENGER_M = 2637;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M = 2912;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M = 3012;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M = 3069;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_PERP_MAX_LONG_MISALIGNMENT_M = 3261;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_CMF_REAR_HIGH_OBST_M = 3309;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_WHEEL_DIST_ROAD_LVL_PAR_M = 3324;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M = 3340;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float AP_G_PER_YAW_PLAN_DEV_RATIO_NU = 3357;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_WIDE_SLOT_REL_WIDTH_M = 3502;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_M = 3519;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU = 3657;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_PAR_MAX_LAT_MISALIGNMENT_M = 3687;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_MAX_DEVIATION_LONG_SLOT_M = 3710;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_MIN_DEFAULT_M = 3776;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional bool AP_G_FREEZE_AP_EM_INPUT_NU = 3799;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 1;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float AP_G_PER_MAX_DEVIATION_LAT_M = 3824;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M = 3832;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_MIN_LSIDE_TRAV_PAR_M = 3861;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M = 3872;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_CMF_LANE_M = 3915;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_DIST_CMF_GP_DRIVER_M = 3938;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_PAR_LAT_PLAN_DEV_RATIO_NU = 3985;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_MAX_DECEL_COMFORTABLE_MPS2 = 4016;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M = 4029;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 + 4;
    }

    // optional float AP_G_WHEEL_DIST_ROAD_LVL_PERP_M = 4030;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TRJPLA_Sys_Func_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TRJPLA_Sys_Func_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TRJPLA_Sys_Func_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
    MergeFrom(*source);
  }
}

void FC_TRJPLA_Sys_Func_Params::MergeFrom(const FC_TRJPLA_Sys_Func_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      ap_g_per_lon_plan_dev_ratio_nu_ = from.ap_g_per_lon_plan_dev_ratio_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_g_dist_min_sside_trav_m_ = from.ap_g_dist_min_sside_trav_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_g_dist_min_front_curb_down_m_ = from.ap_g_dist_min_front_curb_down_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_g_pout_perp_lat_plan_dev_ratio_nu_ = from.ap_g_pout_perp_lat_plan_dev_ratio_nu_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_g_dist_cmf_parkslot_marker_m_ = from.ap_g_dist_cmf_parkslot_marker_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_g_dist_min_gp_entrance_clr_m_ = from.ap_g_dist_min_gp_entrance_clr_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_g_par_yaw_plan_dev_ratio_nu_ = from.ap_g_par_yaw_plan_dev_ratio_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_g_dist_cmf_lside_trav_perp_m_ = from.ap_g_dist_cmf_lside_trav_perp_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_g_par_max_deviation_angl_rad_ = from.ap_g_par_max_deviation_angl_rad_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_g_dist_min_no_delimiter_m_ = from.ap_g_dist_min_no_delimiter_m_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_g_dist_static_obj_road_shift_par_m_ = from.ap_g_dist_static_obj_road_shift_par_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_g_perp_max_ori_angle_rad_ = from.ap_g_perp_max_ori_angle_rad_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_g_long_slot_rel_length_m_ = from.ap_g_long_slot_rel_length_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_g_max_deviation_wide_slot_m_ = from.ap_g_max_deviation_wide_slot_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_g_dist_min_lside_curb_down_par_m_ = from.ap_g_dist_min_lside_curb_down_par_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_g_traffic_side_nu_ = from.ap_g_traffic_side_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_g_dist_cmf_no_delimiter_m_ = from.ap_g_dist_cmf_no_delimiter_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_g_dist_static_obj_road_shift_perp_m_ = from.ap_g_dist_static_obj_road_shift_perp_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_g_dist_min_lside_curb_down_perp_m_ = from.ap_g_dist_min_lside_curb_down_perp_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_g_per_max_deviation_long_m_ = from.ap_g_per_max_deviation_long_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_g_dist_min_lside_high_obst_par_m_ = from.ap_g_dist_min_lside_high_obst_par_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_g_per_lat_plan_dev_ratio_nu_ = from.ap_g_per_lat_plan_dev_ratio_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_g_par_lon_plan_dev_ratio_nu_ = from.ap_g_par_lon_plan_dev_ratio_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_g_dist_min_lane_m_ = from.ap_g_dist_min_lane_m_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_g_dist_min_lside_trav_perp_m_ = from.ap_g_dist_min_lside_trav_perp_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_g_dist_cmf_gp_entrance_clr_m_ = from.ap_g_dist_cmf_gp_entrance_clr_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_g_max_curv_step_vel_red_1pm_ = from.ap_g_max_curv_step_vel_red_1pm_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_g_dist_min_parkslot_marker_m_ = from.ap_g_dist_min_parkslot_marker_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_g_dist_cmf_front_high_obst_m_ = from.ap_g_dist_cmf_front_high_obst_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_g_dist_min_lside_high_obst_fb_m_ = from.ap_g_dist_min_lside_high_obst_fb_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_g_wheel_dist_curb_lvl_par_m_ = from.ap_g_wheel_dist_curb_lvl_par_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_g_dist_min_rear_curb_down_m_ = from.ap_g_dist_min_rear_curb_down_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_g_dist_cmf_front_trav_m_ = from.ap_g_dist_cmf_front_trav_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_g_dist_cmf_lside_trav_par_m_ = from.ap_g_dist_cmf_lside_trav_par_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_g_dist_cmf_lside_curb_down_par_m_ = from.ap_g_dist_cmf_lside_curb_down_par_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_g_wheel_dist_curb_lvl_perp_m_ = from.ap_g_wheel_dist_curb_lvl_perp_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_g_dist_cmf_lside_high_obst_par_m_ = from.ap_g_dist_cmf_lside_high_obst_par_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_g_par_max_deviation_long_m_ = from.ap_g_par_max_deviation_long_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_g_dist_cmf_lside_curb_down_perp_m_ = from.ap_g_dist_cmf_lside_curb_down_perp_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_g_per_max_deviation_angl_rad_ = from.ap_g_per_max_deviation_angl_rad_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_g_dist_cmf_sside_curb_down_m_ = from.ap_g_dist_cmf_sside_curb_down_m_;
    }
    if (cached_has_bits & 0x00000400u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_g_par_max_ori_angle_rad_ = from.ap_g_par_max_ori_angle_rad_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_g_park_out_par_min_ang_rad_ = from.ap_g_park_out_par_min_ang_rad_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_g_dist_min_lside_door_open_par_m_ = from.ap_g_dist_min_lside_door_open_par_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_g_par_max_deviation_lat_m_ = from.ap_g_par_max_deviation_lat_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_g_dist_cmf_rear_trav_m_ = from.ap_g_dist_cmf_rear_trav_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_g_dist_cmf_gp_passenger_m_ = from.ap_g_dist_cmf_gp_passenger_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_g_dist_min_lside_high_obst_perp_m_ = from.ap_g_dist_min_lside_high_obst_perp_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_g_dist_min_sside_high_obst_fb_m_ = from.ap_g_dist_min_sside_high_obst_fb_m_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_g_dist_cmf_lside_door_open_perp_m_ = from.ap_g_dist_cmf_lside_door_open_perp_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_g_perp_max_long_misalignment_m_ = from.ap_g_perp_max_long_misalignment_m_;
    }
    if (cached_has_bits & 0x00200000u) {
      ap_g_dist_cmf_rear_high_obst_m_ = from.ap_g_dist_cmf_rear_high_obst_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      ap_g_wheel_dist_road_lvl_par_m_ = from.ap_g_wheel_dist_road_lvl_par_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      ap_g_dist_cmf_lside_door_open_par_m_ = from.ap_g_dist_cmf_lside_door_open_par_m_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ap_g_per_yaw_plan_dev_ratio_nu_ = from.ap_g_per_yaw_plan_dev_ratio_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      ap_g_wide_slot_rel_width_m_ = from.ap_g_wide_slot_rel_width_m_;
    }
    if (cached_has_bits & 0x04000000u) {
      ap_g_dist_min_sside_high_obst_m_ = from.ap_g_dist_min_sside_high_obst_m_;
    }
    if (cached_has_bits & 0x08000000u) {
      ap_g_pout_perp_yaw_plan_dev_ratio_nu_ = from.ap_g_pout_perp_yaw_plan_dev_ratio_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      ap_g_par_max_lat_misalignment_m_ = from.ap_g_par_max_lat_misalignment_m_;
    }
    if (cached_has_bits & 0x20000000u) {
      ap_g_max_deviation_long_slot_m_ = from.ap_g_max_deviation_long_slot_m_;
    }
    if (cached_has_bits & 0x40000000u) {
      ap_g_dist_min_default_m_ = from.ap_g_dist_min_default_m_;
    }
    if (cached_has_bits & 0x80000000u) {
      ap_g_freeze_ap_em_input_nu_ = from.ap_g_freeze_ap_em_input_nu_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ap_g_per_max_deviation_lat_m_ = from.ap_g_per_max_deviation_lat_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      ap_g_angled_max_long_misalignment_m_ = from.ap_g_angled_max_long_misalignment_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_g_dist_min_lside_trav_par_m_ = from.ap_g_dist_min_lside_trav_par_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_g_dist_cmf_lside_high_obst_perp_m_ = from.ap_g_dist_cmf_lside_high_obst_perp_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_g_dist_cmf_lane_m_ = from.ap_g_dist_cmf_lane_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_g_dist_cmf_gp_driver_m_ = from.ap_g_dist_cmf_gp_driver_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_g_par_lat_plan_dev_ratio_nu_ = from.ap_g_par_lat_plan_dev_ratio_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_g_max_decel_comfortable_mps2_ = from.ap_g_max_decel_comfortable_mps2_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      ap_g_dist_min_lside_door_open_perp_m_ = from.ap_g_dist_min_lside_door_open_perp_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      ap_g_wheel_dist_road_lvl_perp_m_ = from.ap_g_wheel_dist_road_lvl_perp_m_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void FC_TRJPLA_Sys_Func_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TRJPLA_Sys_Func_Params::CopyFrom(const FC_TRJPLA_Sys_Func_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TRJPLA_Sys_Func_Params::IsInitialized() const {
  return true;
}

void FC_TRJPLA_Sys_Func_Params::InternalSwap(FC_TRJPLA_Sys_Func_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(ssigheader_, other->ssigheader_);
  swap(ap_g_per_lon_plan_dev_ratio_nu_, other->ap_g_per_lon_plan_dev_ratio_nu_);
  swap(ap_g_dist_min_sside_trav_m_, other->ap_g_dist_min_sside_trav_m_);
  swap(ap_g_dist_min_front_curb_down_m_, other->ap_g_dist_min_front_curb_down_m_);
  swap(ap_g_pout_perp_lat_plan_dev_ratio_nu_, other->ap_g_pout_perp_lat_plan_dev_ratio_nu_);
  swap(ap_g_dist_cmf_parkslot_marker_m_, other->ap_g_dist_cmf_parkslot_marker_m_);
  swap(ap_g_dist_min_gp_entrance_clr_m_, other->ap_g_dist_min_gp_entrance_clr_m_);
  swap(ap_g_par_yaw_plan_dev_ratio_nu_, other->ap_g_par_yaw_plan_dev_ratio_nu_);
  swap(ap_g_dist_cmf_lside_trav_perp_m_, other->ap_g_dist_cmf_lside_trav_perp_m_);
  swap(ap_g_par_max_deviation_angl_rad_, other->ap_g_par_max_deviation_angl_rad_);
  swap(ap_g_dist_min_no_delimiter_m_, other->ap_g_dist_min_no_delimiter_m_);
  swap(ap_g_dist_static_obj_road_shift_par_m_, other->ap_g_dist_static_obj_road_shift_par_m_);
  swap(ap_g_perp_max_ori_angle_rad_, other->ap_g_perp_max_ori_angle_rad_);
  swap(ap_g_long_slot_rel_length_m_, other->ap_g_long_slot_rel_length_m_);
  swap(ap_g_max_deviation_wide_slot_m_, other->ap_g_max_deviation_wide_slot_m_);
  swap(ap_g_dist_min_lside_curb_down_par_m_, other->ap_g_dist_min_lside_curb_down_par_m_);
  swap(ap_g_traffic_side_nu_, other->ap_g_traffic_side_nu_);
  swap(ap_g_dist_cmf_no_delimiter_m_, other->ap_g_dist_cmf_no_delimiter_m_);
  swap(ap_g_dist_static_obj_road_shift_perp_m_, other->ap_g_dist_static_obj_road_shift_perp_m_);
  swap(ap_g_dist_min_lside_curb_down_perp_m_, other->ap_g_dist_min_lside_curb_down_perp_m_);
  swap(ap_g_per_max_deviation_long_m_, other->ap_g_per_max_deviation_long_m_);
  swap(ap_g_dist_min_lside_high_obst_par_m_, other->ap_g_dist_min_lside_high_obst_par_m_);
  swap(ap_g_per_lat_plan_dev_ratio_nu_, other->ap_g_per_lat_plan_dev_ratio_nu_);
  swap(ap_g_par_lon_plan_dev_ratio_nu_, other->ap_g_par_lon_plan_dev_ratio_nu_);
  swap(ap_g_dist_min_lane_m_, other->ap_g_dist_min_lane_m_);
  swap(ap_g_dist_min_lside_trav_perp_m_, other->ap_g_dist_min_lside_trav_perp_m_);
  swap(ap_g_dist_cmf_gp_entrance_clr_m_, other->ap_g_dist_cmf_gp_entrance_clr_m_);
  swap(ap_g_max_curv_step_vel_red_1pm_, other->ap_g_max_curv_step_vel_red_1pm_);
  swap(ap_g_dist_min_parkslot_marker_m_, other->ap_g_dist_min_parkslot_marker_m_);
  swap(ap_g_dist_cmf_front_high_obst_m_, other->ap_g_dist_cmf_front_high_obst_m_);
  swap(ap_g_dist_min_lside_high_obst_fb_m_, other->ap_g_dist_min_lside_high_obst_fb_m_);
  swap(ap_g_wheel_dist_curb_lvl_par_m_, other->ap_g_wheel_dist_curb_lvl_par_m_);
  swap(ap_g_dist_min_rear_curb_down_m_, other->ap_g_dist_min_rear_curb_down_m_);
  swap(ap_g_dist_cmf_front_trav_m_, other->ap_g_dist_cmf_front_trav_m_);
  swap(ap_g_dist_cmf_lside_trav_par_m_, other->ap_g_dist_cmf_lside_trav_par_m_);
  swap(ap_g_dist_cmf_lside_curb_down_par_m_, other->ap_g_dist_cmf_lside_curb_down_par_m_);
  swap(ap_g_wheel_dist_curb_lvl_perp_m_, other->ap_g_wheel_dist_curb_lvl_perp_m_);
  swap(ap_g_dist_cmf_lside_high_obst_par_m_, other->ap_g_dist_cmf_lside_high_obst_par_m_);
  swap(ap_g_par_max_deviation_long_m_, other->ap_g_par_max_deviation_long_m_);
  swap(ap_g_dist_cmf_lside_curb_down_perp_m_, other->ap_g_dist_cmf_lside_curb_down_perp_m_);
  swap(ap_g_per_max_deviation_angl_rad_, other->ap_g_per_max_deviation_angl_rad_);
  swap(ap_g_dist_cmf_sside_curb_down_m_, other->ap_g_dist_cmf_sside_curb_down_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ap_g_par_max_ori_angle_rad_, other->ap_g_par_max_ori_angle_rad_);
  swap(ap_g_park_out_par_min_ang_rad_, other->ap_g_park_out_par_min_ang_rad_);
  swap(ap_g_dist_min_lside_door_open_par_m_, other->ap_g_dist_min_lside_door_open_par_m_);
  swap(ap_g_par_max_deviation_lat_m_, other->ap_g_par_max_deviation_lat_m_);
  swap(ap_g_dist_cmf_rear_trav_m_, other->ap_g_dist_cmf_rear_trav_m_);
  swap(ap_g_dist_cmf_gp_passenger_m_, other->ap_g_dist_cmf_gp_passenger_m_);
  swap(ap_g_dist_min_lside_high_obst_perp_m_, other->ap_g_dist_min_lside_high_obst_perp_m_);
  swap(ap_g_dist_min_sside_high_obst_fb_m_, other->ap_g_dist_min_sside_high_obst_fb_m_);
  swap(ap_g_dist_cmf_lside_door_open_perp_m_, other->ap_g_dist_cmf_lside_door_open_perp_m_);
  swap(ap_g_perp_max_long_misalignment_m_, other->ap_g_perp_max_long_misalignment_m_);
  swap(ap_g_dist_cmf_rear_high_obst_m_, other->ap_g_dist_cmf_rear_high_obst_m_);
  swap(ap_g_wheel_dist_road_lvl_par_m_, other->ap_g_wheel_dist_road_lvl_par_m_);
  swap(ap_g_dist_cmf_lside_door_open_par_m_, other->ap_g_dist_cmf_lside_door_open_par_m_);
  swap(ap_g_per_yaw_plan_dev_ratio_nu_, other->ap_g_per_yaw_plan_dev_ratio_nu_);
  swap(ap_g_wide_slot_rel_width_m_, other->ap_g_wide_slot_rel_width_m_);
  swap(ap_g_dist_min_sside_high_obst_m_, other->ap_g_dist_min_sside_high_obst_m_);
  swap(ap_g_pout_perp_yaw_plan_dev_ratio_nu_, other->ap_g_pout_perp_yaw_plan_dev_ratio_nu_);
  swap(ap_g_par_max_lat_misalignment_m_, other->ap_g_par_max_lat_misalignment_m_);
  swap(ap_g_max_deviation_long_slot_m_, other->ap_g_max_deviation_long_slot_m_);
  swap(ap_g_dist_min_default_m_, other->ap_g_dist_min_default_m_);
  swap(ap_g_freeze_ap_em_input_nu_, other->ap_g_freeze_ap_em_input_nu_);
  swap(ap_g_per_max_deviation_lat_m_, other->ap_g_per_max_deviation_lat_m_);
  swap(ap_g_angled_max_long_misalignment_m_, other->ap_g_angled_max_long_misalignment_m_);
  swap(ap_g_dist_min_lside_trav_par_m_, other->ap_g_dist_min_lside_trav_par_m_);
  swap(ap_g_dist_cmf_lside_high_obst_perp_m_, other->ap_g_dist_cmf_lside_high_obst_perp_m_);
  swap(ap_g_dist_cmf_lane_m_, other->ap_g_dist_cmf_lane_m_);
  swap(ap_g_dist_cmf_gp_driver_m_, other->ap_g_dist_cmf_gp_driver_m_);
  swap(ap_g_par_lat_plan_dev_ratio_nu_, other->ap_g_par_lat_plan_dev_ratio_nu_);
  swap(ap_g_max_decel_comfortable_mps2_, other->ap_g_max_decel_comfortable_mps2_);
  swap(ap_g_dist_min_lside_door_open_perp_m_, other->ap_g_dist_min_lside_door_open_perp_m_);
  swap(ap_g_wheel_dist_road_lvl_perp_m_, other->ap_g_wheel_dist_road_lvl_perp_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TRJPLA_Sys_Func_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_TRJPLA_Sys_Func_Params_array_port::InitAsDefaultInstance() {
}
class FC_TRJPLA_Sys_Func_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_TRJPLA_Sys_Func_Params_array_port>()._has_bits_);
};

FC_TRJPLA_Sys_Func_Params_array_port::FC_TRJPLA_Sys_Func_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
}
FC_TRJPLA_Sys_Func_Params_array_port::FC_TRJPLA_Sys_Func_Params_array_port(const FC_TRJPLA_Sys_Func_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
}

void FC_TRJPLA_Sys_Func_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_TRJPLA_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base);
}

FC_TRJPLA_Sys_Func_Params_array_port::~FC_TRJPLA_Sys_Func_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  SharedDtor();
}

void FC_TRJPLA_Sys_Func_Params_array_port::SharedDtor() {
}

void FC_TRJPLA_Sys_Func_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_TRJPLA_Sys_Func_Params_array_port& FC_TRJPLA_Sys_Func_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_TRJPLA_Sys_Func_Params_array_port_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_TRJPLA_Sys_Func_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_TRJPLA_Sys_Func_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params data = 2275;
      case 2275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_TRJPLA_Sys_Func_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params data = 2275;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2275, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  return target;
}

size_t FC_TRJPLA_Sys_Func_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params data = 2275;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_TRJPLA_Sys_Func_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_TRJPLA_Sys_Func_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_TRJPLA_Sys_Func_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_TRJPLA_Sys_Func_Params_array_port::MergeFrom(const FC_TRJPLA_Sys_Func_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_TRJPLA_Sys_Func_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_TRJPLA_Sys_Func_Params_array_port::CopyFrom(const FC_TRJPLA_Sys_Func_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_TRJPLA_Sys_Func_Params_array_port::IsInitialized() const {
  return true;
}

void FC_TRJPLA_Sys_Func_Params_array_port::InternalSwap(FC_TRJPLA_Sys_Func_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_TRJPLA_Sys_Func_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_trjpla_sys_func_params
}  // namespace ap_common
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* Arena::CreateMaybeMessage< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port* Arena::CreateMaybeMessage< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
