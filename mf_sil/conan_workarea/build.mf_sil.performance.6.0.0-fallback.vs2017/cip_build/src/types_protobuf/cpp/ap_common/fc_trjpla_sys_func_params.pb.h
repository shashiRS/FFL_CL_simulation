// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_common/fc_trjpla_sys_func_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "ap_common/traffic_side.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto;
namespace pb {
namespace ap_common {
namespace fc_trjpla_sys_func_params {
class FC_TRJPLA_Sys_Func_Params;
class FC_TRJPLA_Sys_Func_ParamsDefaultTypeInternal;
extern FC_TRJPLA_Sys_Func_ParamsDefaultTypeInternal _FC_TRJPLA_Sys_Func_Params_default_instance_;
class FC_TRJPLA_Sys_Func_Params_array_port;
class FC_TRJPLA_Sys_Func_Params_array_portDefaultTypeInternal;
extern FC_TRJPLA_Sys_Func_Params_array_portDefaultTypeInternal _FC_TRJPLA_Sys_Func_Params_array_port_default_instance_;
}  // namespace fc_trjpla_sys_func_params
}  // namespace ap_common
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* Arena::CreateMaybeMessage<::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params>(Arena*);
template<> ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port* Arena::CreateMaybeMessage<::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace ap_common {
namespace fc_trjpla_sys_func_params {

// ===================================================================

class FC_TRJPLA_Sys_Func_Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params) */ {
 public:
  FC_TRJPLA_Sys_Func_Params();
  virtual ~FC_TRJPLA_Sys_Func_Params();

  FC_TRJPLA_Sys_Func_Params(const FC_TRJPLA_Sys_Func_Params& from);
  FC_TRJPLA_Sys_Func_Params(FC_TRJPLA_Sys_Func_Params&& from) noexcept
    : FC_TRJPLA_Sys_Func_Params() {
    *this = ::std::move(from);
  }

  inline FC_TRJPLA_Sys_Func_Params& operator=(const FC_TRJPLA_Sys_Func_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TRJPLA_Sys_Func_Params& operator=(FC_TRJPLA_Sys_Func_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TRJPLA_Sys_Func_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TRJPLA_Sys_Func_Params* internal_default_instance() {
    return reinterpret_cast<const FC_TRJPLA_Sys_Func_Params*>(
               &_FC_TRJPLA_Sys_Func_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FC_TRJPLA_Sys_Func_Params& a, FC_TRJPLA_Sys_Func_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TRJPLA_Sys_Func_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TRJPLA_Sys_Func_Params* New() const final {
    return CreateMaybeMessage<FC_TRJPLA_Sys_Func_Params>(nullptr);
  }

  FC_TRJPLA_Sys_Func_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TRJPLA_Sys_Func_Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TRJPLA_Sys_Func_Params& from);
  void MergeFrom(const FC_TRJPLA_Sys_Func_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TRJPLA_Sys_Func_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto);
    return ::descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kAPGPERLONPLANDEVRATIONUFieldNumber = 4082,
    kAPGDISTMINSSIDETRAVMFieldNumber = 121,
    kAPGDISTMINFRONTCURBDOWNMFieldNumber = 188,
    kAPGPOUTPERPLATPLANDEVRATIONUFieldNumber = 201,
    kAPGDISTCMFPARKSLOTMARKERMFieldNumber = 230,
    kAPGDISTMINGPENTRANCECLRMFieldNumber = 258,
    kAPGPARYAWPLANDEVRATIONUFieldNumber = 273,
    kAPGDISTCMFLSIDETRAVPERPMFieldNumber = 286,
    kAPGPARMAXDEVIATIONANGLRADFieldNumber = 289,
    kAPGDISTMINNODELIMITERMFieldNumber = 366,
    kAPGDISTSTATICOBJROADSHIFTPARMFieldNumber = 453,
    kAPGPERPMAXORIANGLERADFieldNumber = 475,
    kAPGLONGSLOTRELLENGTHMFieldNumber = 664,
    kAPGMAXDEVIATIONWIDESLOTMFieldNumber = 694,
    kAPGDISTMINLSIDECURBDOWNPARMFieldNumber = 709,
    kAPGTRAFFICSIDENUFieldNumber = 741,
    kAPGDISTCMFNODELIMITERMFieldNumber = 744,
    kAPGDISTSTATICOBJROADSHIFTPERPMFieldNumber = 761,
    kAPGDISTMINLSIDECURBDOWNPERPMFieldNumber = 786,
    kAPGPERMAXDEVIATIONLONGMFieldNumber = 788,
    kAPGDISTMINLSIDEHIGHOBSTPARMFieldNumber = 843,
    kAPGPERLATPLANDEVRATIONUFieldNumber = 925,
    kAPGPARLONPLANDEVRATIONUFieldNumber = 1022,
    kAPGDISTMINLANEMFieldNumber = 1162,
    kAPGDISTMINLSIDETRAVPERPMFieldNumber = 1260,
    kAPGDISTCMFGPENTRANCECLRMFieldNumber = 1264,
    kAPGMAXCURVSTEPVELRED1PMFieldNumber = 1296,
    kAPGDISTMINPARKSLOTMARKERMFieldNumber = 1300,
    kAPGDISTCMFFRONTHIGHOBSTMFieldNumber = 1303,
    kAPGDISTMINLSIDEHIGHOBSTFBMFieldNumber = 1335,
    kAPGWHEELDISTCURBLVLPARMFieldNumber = 1401,
    kAPGDISTMINREARCURBDOWNMFieldNumber = 1495,
    kAPGDISTCMFFRONTTRAVMFieldNumber = 1638,
    kAPGDISTCMFLSIDETRAVPARMFieldNumber = 1654,
    kAPGDISTCMFLSIDECURBDOWNPARMFieldNumber = 1673,
    kAPGWHEELDISTCURBLVLPERPMFieldNumber = 1721,
    kAPGDISTCMFLSIDEHIGHOBSTPARMFieldNumber = 1799,
    kAPGPARMAXDEVIATIONLONGMFieldNumber = 1817,
    kAPGDISTCMFLSIDECURBDOWNPERPMFieldNumber = 1874,
    kAPGPERMAXDEVIATIONANGLRADFieldNumber = 2000,
    kAPGDISTCMFSSIDECURBDOWNMFieldNumber = 2068,
    kUiVersionNumberFieldNumber = 2124,
    kAPGPARMAXORIANGLERADFieldNumber = 2235,
    kAPGPARKOUTPARMINANGRADFieldNumber = 2340,
    kAPGDISTMINLSIDEDOOROPENPARMFieldNumber = 2368,
    kAPGPARMAXDEVIATIONLATMFieldNumber = 2481,
    kAPGDISTCMFREARTRAVMFieldNumber = 2491,
    kAPGDISTCMFGPPASSENGERMFieldNumber = 2637,
    kAPGDISTMINLSIDEHIGHOBSTPERPMFieldNumber = 2912,
    kAPGDISTMINSSIDEHIGHOBSTFBMFieldNumber = 3012,
    kAPGDISTCMFLSIDEDOOROPENPERPMFieldNumber = 3069,
    kAPGPERPMAXLONGMISALIGNMENTMFieldNumber = 3261,
    kAPGDISTCMFREARHIGHOBSTMFieldNumber = 3309,
    kAPGWHEELDISTROADLVLPARMFieldNumber = 3324,
    kAPGDISTCMFLSIDEDOOROPENPARMFieldNumber = 3340,
    kAPGPERYAWPLANDEVRATIONUFieldNumber = 3357,
    kAPGWIDESLOTRELWIDTHMFieldNumber = 3502,
    kAPGDISTMINSSIDEHIGHOBSTMFieldNumber = 3519,
    kAPGPOUTPERPYAWPLANDEVRATIONUFieldNumber = 3657,
    kAPGPARMAXLATMISALIGNMENTMFieldNumber = 3687,
    kAPGMAXDEVIATIONLONGSLOTMFieldNumber = 3710,
    kAPGDISTMINDEFAULTMFieldNumber = 3776,
    kAPGFREEZEAPEMINPUTNUFieldNumber = 3799,
    kAPGPERMAXDEVIATIONLATMFieldNumber = 3824,
    kAPGANGLEDMAXLONGMISALIGNMENTMFieldNumber = 3832,
    kAPGDISTMINLSIDETRAVPARMFieldNumber = 3861,
    kAPGDISTCMFLSIDEHIGHOBSTPERPMFieldNumber = 3872,
    kAPGDISTCMFLANEMFieldNumber = 3915,
    kAPGDISTCMFGPDRIVERMFieldNumber = 3938,
    kAPGPARLATPLANDEVRATIONUFieldNumber = 3985,
    kAPGMAXDECELCOMFORTABLEMPS2FieldNumber = 4016,
    kAPGDISTMINLSIDEDOOROPENPERPMFieldNumber = 4029,
    kAPGWHEELDISTROADLVLPERPMFieldNumber = 4030,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float AP_G_PER_LON_PLAN_DEV_RATIO_NU = 4082;
  bool has_ap_g_per_lon_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_per_lon_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_per_lon_plan_dev_ratio_nu();
  float ap_g_per_lon_plan_dev_ratio_nu() const;
  void set_ap_g_per_lon_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_per_lon_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_per_lon_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_DIST_MIN_SSIDE_TRAV_M = 121;
  bool has_ap_g_dist_min_sside_trav_m() const;
  private:
  bool _internal_has_ap_g_dist_min_sside_trav_m() const;
  public:
  void clear_ap_g_dist_min_sside_trav_m();
  float ap_g_dist_min_sside_trav_m() const;
  void set_ap_g_dist_min_sside_trav_m(float value);
  private:
  float _internal_ap_g_dist_min_sside_trav_m() const;
  void _internal_set_ap_g_dist_min_sside_trav_m(float value);
  public:

  // optional float AP_G_DIST_MIN_FRONT_CURB_DOWN_M = 188;
  bool has_ap_g_dist_min_front_curb_down_m() const;
  private:
  bool _internal_has_ap_g_dist_min_front_curb_down_m() const;
  public:
  void clear_ap_g_dist_min_front_curb_down_m();
  float ap_g_dist_min_front_curb_down_m() const;
  void set_ap_g_dist_min_front_curb_down_m(float value);
  private:
  float _internal_ap_g_dist_min_front_curb_down_m() const;
  void _internal_set_ap_g_dist_min_front_curb_down_m(float value);
  public:

  // optional float AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU = 201;
  bool has_ap_g_pout_perp_lat_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_pout_perp_lat_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_pout_perp_lat_plan_dev_ratio_nu();
  float ap_g_pout_perp_lat_plan_dev_ratio_nu() const;
  void set_ap_g_pout_perp_lat_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_pout_perp_lat_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_pout_perp_lat_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_DIST_CMF_PARKSLOT_MARKER_M = 230;
  bool has_ap_g_dist_cmf_parkslot_marker_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_parkslot_marker_m() const;
  public:
  void clear_ap_g_dist_cmf_parkslot_marker_m();
  float ap_g_dist_cmf_parkslot_marker_m() const;
  void set_ap_g_dist_cmf_parkslot_marker_m(float value);
  private:
  float _internal_ap_g_dist_cmf_parkslot_marker_m() const;
  void _internal_set_ap_g_dist_cmf_parkslot_marker_m(float value);
  public:

  // optional float AP_G_DIST_MIN_GP_ENTRANCE_CLR_M = 258;
  bool has_ap_g_dist_min_gp_entrance_clr_m() const;
  private:
  bool _internal_has_ap_g_dist_min_gp_entrance_clr_m() const;
  public:
  void clear_ap_g_dist_min_gp_entrance_clr_m();
  float ap_g_dist_min_gp_entrance_clr_m() const;
  void set_ap_g_dist_min_gp_entrance_clr_m(float value);
  private:
  float _internal_ap_g_dist_min_gp_entrance_clr_m() const;
  void _internal_set_ap_g_dist_min_gp_entrance_clr_m(float value);
  public:

  // optional float AP_G_PAR_YAW_PLAN_DEV_RATIO_NU = 273;
  bool has_ap_g_par_yaw_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_par_yaw_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_par_yaw_plan_dev_ratio_nu();
  float ap_g_par_yaw_plan_dev_ratio_nu() const;
  void set_ap_g_par_yaw_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_par_yaw_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_par_yaw_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_TRAV_PERP_M = 286;
  bool has_ap_g_dist_cmf_lside_trav_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_trav_perp_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_trav_perp_m();
  float ap_g_dist_cmf_lside_trav_perp_m() const;
  void set_ap_g_dist_cmf_lside_trav_perp_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_trav_perp_m() const;
  void _internal_set_ap_g_dist_cmf_lside_trav_perp_m(float value);
  public:

  // optional float AP_G_PAR_MAX_DEVIATION_ANGL_RAD = 289;
  bool has_ap_g_par_max_deviation_angl_rad() const;
  private:
  bool _internal_has_ap_g_par_max_deviation_angl_rad() const;
  public:
  void clear_ap_g_par_max_deviation_angl_rad();
  float ap_g_par_max_deviation_angl_rad() const;
  void set_ap_g_par_max_deviation_angl_rad(float value);
  private:
  float _internal_ap_g_par_max_deviation_angl_rad() const;
  void _internal_set_ap_g_par_max_deviation_angl_rad(float value);
  public:

  // optional float AP_G_DIST_MIN_NO_DELIMITER_M = 366;
  bool has_ap_g_dist_min_no_delimiter_m() const;
  private:
  bool _internal_has_ap_g_dist_min_no_delimiter_m() const;
  public:
  void clear_ap_g_dist_min_no_delimiter_m();
  float ap_g_dist_min_no_delimiter_m() const;
  void set_ap_g_dist_min_no_delimiter_m(float value);
  private:
  float _internal_ap_g_dist_min_no_delimiter_m() const;
  void _internal_set_ap_g_dist_min_no_delimiter_m(float value);
  public:

  // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M = 453;
  bool has_ap_g_dist_static_obj_road_shift_par_m() const;
  private:
  bool _internal_has_ap_g_dist_static_obj_road_shift_par_m() const;
  public:
  void clear_ap_g_dist_static_obj_road_shift_par_m();
  float ap_g_dist_static_obj_road_shift_par_m() const;
  void set_ap_g_dist_static_obj_road_shift_par_m(float value);
  private:
  float _internal_ap_g_dist_static_obj_road_shift_par_m() const;
  void _internal_set_ap_g_dist_static_obj_road_shift_par_m(float value);
  public:

  // optional float AP_G_PERP_MAX_ORI_ANGLE_RAD = 475;
  bool has_ap_g_perp_max_ori_angle_rad() const;
  private:
  bool _internal_has_ap_g_perp_max_ori_angle_rad() const;
  public:
  void clear_ap_g_perp_max_ori_angle_rad();
  float ap_g_perp_max_ori_angle_rad() const;
  void set_ap_g_perp_max_ori_angle_rad(float value);
  private:
  float _internal_ap_g_perp_max_ori_angle_rad() const;
  void _internal_set_ap_g_perp_max_ori_angle_rad(float value);
  public:

  // optional float AP_G_LONG_SLOT_REL_LENGTH_M = 664;
  bool has_ap_g_long_slot_rel_length_m() const;
  private:
  bool _internal_has_ap_g_long_slot_rel_length_m() const;
  public:
  void clear_ap_g_long_slot_rel_length_m();
  float ap_g_long_slot_rel_length_m() const;
  void set_ap_g_long_slot_rel_length_m(float value);
  private:
  float _internal_ap_g_long_slot_rel_length_m() const;
  void _internal_set_ap_g_long_slot_rel_length_m(float value);
  public:

  // optional float AP_G_MAX_DEVIATION_WIDE_SLOT_M = 694;
  bool has_ap_g_max_deviation_wide_slot_m() const;
  private:
  bool _internal_has_ap_g_max_deviation_wide_slot_m() const;
  public:
  void clear_ap_g_max_deviation_wide_slot_m();
  float ap_g_max_deviation_wide_slot_m() const;
  void set_ap_g_max_deviation_wide_slot_m(float value);
  private:
  float _internal_ap_g_max_deviation_wide_slot_m() const;
  void _internal_set_ap_g_max_deviation_wide_slot_m(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M = 709;
  bool has_ap_g_dist_min_lside_curb_down_par_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_curb_down_par_m() const;
  public:
  void clear_ap_g_dist_min_lside_curb_down_par_m();
  float ap_g_dist_min_lside_curb_down_par_m() const;
  void set_ap_g_dist_min_lside_curb_down_par_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_curb_down_par_m() const;
  void _internal_set_ap_g_dist_min_lside_curb_down_par_m(float value);
  public:

  // optional .pb.ap_common.traffic_side.TrafficSide AP_G_TRAFFIC_SIDE_NU = 741;
  bool has_ap_g_traffic_side_nu() const;
  private:
  bool _internal_has_ap_g_traffic_side_nu() const;
  public:
  void clear_ap_g_traffic_side_nu();
  ::pb::ap_common::traffic_side::TrafficSide ap_g_traffic_side_nu() const;
  void set_ap_g_traffic_side_nu(::pb::ap_common::traffic_side::TrafficSide value);
  private:
  ::pb::ap_common::traffic_side::TrafficSide _internal_ap_g_traffic_side_nu() const;
  void _internal_set_ap_g_traffic_side_nu(::pb::ap_common::traffic_side::TrafficSide value);
  public:

  // optional float AP_G_DIST_CMF_NO_DELIMITER_M = 744;
  bool has_ap_g_dist_cmf_no_delimiter_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_no_delimiter_m() const;
  public:
  void clear_ap_g_dist_cmf_no_delimiter_m();
  float ap_g_dist_cmf_no_delimiter_m() const;
  void set_ap_g_dist_cmf_no_delimiter_m(float value);
  private:
  float _internal_ap_g_dist_cmf_no_delimiter_m() const;
  void _internal_set_ap_g_dist_cmf_no_delimiter_m(float value);
  public:

  // optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M = 761;
  bool has_ap_g_dist_static_obj_road_shift_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_static_obj_road_shift_perp_m() const;
  public:
  void clear_ap_g_dist_static_obj_road_shift_perp_m();
  float ap_g_dist_static_obj_road_shift_perp_m() const;
  void set_ap_g_dist_static_obj_road_shift_perp_m(float value);
  private:
  float _internal_ap_g_dist_static_obj_road_shift_perp_m() const;
  void _internal_set_ap_g_dist_static_obj_road_shift_perp_m(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M = 786;
  bool has_ap_g_dist_min_lside_curb_down_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_curb_down_perp_m() const;
  public:
  void clear_ap_g_dist_min_lside_curb_down_perp_m();
  float ap_g_dist_min_lside_curb_down_perp_m() const;
  void set_ap_g_dist_min_lside_curb_down_perp_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_curb_down_perp_m() const;
  void _internal_set_ap_g_dist_min_lside_curb_down_perp_m(float value);
  public:

  // optional float AP_G_PER_MAX_DEVIATION_LONG_M = 788;
  bool has_ap_g_per_max_deviation_long_m() const;
  private:
  bool _internal_has_ap_g_per_max_deviation_long_m() const;
  public:
  void clear_ap_g_per_max_deviation_long_m();
  float ap_g_per_max_deviation_long_m() const;
  void set_ap_g_per_max_deviation_long_m(float value);
  private:
  float _internal_ap_g_per_max_deviation_long_m() const;
  void _internal_set_ap_g_per_max_deviation_long_m(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M = 843;
  bool has_ap_g_dist_min_lside_high_obst_par_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_high_obst_par_m() const;
  public:
  void clear_ap_g_dist_min_lside_high_obst_par_m();
  float ap_g_dist_min_lside_high_obst_par_m() const;
  void set_ap_g_dist_min_lside_high_obst_par_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_high_obst_par_m() const;
  void _internal_set_ap_g_dist_min_lside_high_obst_par_m(float value);
  public:

  // optional float AP_G_PER_LAT_PLAN_DEV_RATIO_NU = 925;
  bool has_ap_g_per_lat_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_per_lat_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_per_lat_plan_dev_ratio_nu();
  float ap_g_per_lat_plan_dev_ratio_nu() const;
  void set_ap_g_per_lat_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_per_lat_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_per_lat_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_PAR_LON_PLAN_DEV_RATIO_NU = 1022;
  bool has_ap_g_par_lon_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_par_lon_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_par_lon_plan_dev_ratio_nu();
  float ap_g_par_lon_plan_dev_ratio_nu() const;
  void set_ap_g_par_lon_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_par_lon_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_par_lon_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_DIST_MIN_LANE_M = 1162;
  bool has_ap_g_dist_min_lane_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lane_m() const;
  public:
  void clear_ap_g_dist_min_lane_m();
  float ap_g_dist_min_lane_m() const;
  void set_ap_g_dist_min_lane_m(float value);
  private:
  float _internal_ap_g_dist_min_lane_m() const;
  void _internal_set_ap_g_dist_min_lane_m(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_TRAV_PERP_M = 1260;
  bool has_ap_g_dist_min_lside_trav_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_trav_perp_m() const;
  public:
  void clear_ap_g_dist_min_lside_trav_perp_m();
  float ap_g_dist_min_lside_trav_perp_m() const;
  void set_ap_g_dist_min_lside_trav_perp_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_trav_perp_m() const;
  void _internal_set_ap_g_dist_min_lside_trav_perp_m(float value);
  public:

  // optional float AP_G_DIST_CMF_GP_ENTRANCE_CLR_M = 1264;
  bool has_ap_g_dist_cmf_gp_entrance_clr_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_gp_entrance_clr_m() const;
  public:
  void clear_ap_g_dist_cmf_gp_entrance_clr_m();
  float ap_g_dist_cmf_gp_entrance_clr_m() const;
  void set_ap_g_dist_cmf_gp_entrance_clr_m(float value);
  private:
  float _internal_ap_g_dist_cmf_gp_entrance_clr_m() const;
  void _internal_set_ap_g_dist_cmf_gp_entrance_clr_m(float value);
  public:

  // optional float AP_G_MAX_CURV_STEP_VEL_RED_1PM = 1296;
  bool has_ap_g_max_curv_step_vel_red_1pm() const;
  private:
  bool _internal_has_ap_g_max_curv_step_vel_red_1pm() const;
  public:
  void clear_ap_g_max_curv_step_vel_red_1pm();
  float ap_g_max_curv_step_vel_red_1pm() const;
  void set_ap_g_max_curv_step_vel_red_1pm(float value);
  private:
  float _internal_ap_g_max_curv_step_vel_red_1pm() const;
  void _internal_set_ap_g_max_curv_step_vel_red_1pm(float value);
  public:

  // optional float AP_G_DIST_MIN_PARKSLOT_MARKER_M = 1300;
  bool has_ap_g_dist_min_parkslot_marker_m() const;
  private:
  bool _internal_has_ap_g_dist_min_parkslot_marker_m() const;
  public:
  void clear_ap_g_dist_min_parkslot_marker_m();
  float ap_g_dist_min_parkslot_marker_m() const;
  void set_ap_g_dist_min_parkslot_marker_m(float value);
  private:
  float _internal_ap_g_dist_min_parkslot_marker_m() const;
  void _internal_set_ap_g_dist_min_parkslot_marker_m(float value);
  public:

  // optional float AP_G_DIST_CMF_FRONT_HIGH_OBST_M = 1303;
  bool has_ap_g_dist_cmf_front_high_obst_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_front_high_obst_m() const;
  public:
  void clear_ap_g_dist_cmf_front_high_obst_m();
  float ap_g_dist_cmf_front_high_obst_m() const;
  void set_ap_g_dist_cmf_front_high_obst_m(float value);
  private:
  float _internal_ap_g_dist_cmf_front_high_obst_m() const;
  void _internal_set_ap_g_dist_cmf_front_high_obst_m(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M = 1335;
  bool has_ap_g_dist_min_lside_high_obst_fb_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_high_obst_fb_m() const;
  public:
  void clear_ap_g_dist_min_lside_high_obst_fb_m();
  float ap_g_dist_min_lside_high_obst_fb_m() const;
  void set_ap_g_dist_min_lside_high_obst_fb_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_high_obst_fb_m() const;
  void _internal_set_ap_g_dist_min_lside_high_obst_fb_m(float value);
  public:

  // optional float AP_G_WHEEL_DIST_CURB_LVL_PAR_M = 1401;
  bool has_ap_g_wheel_dist_curb_lvl_par_m() const;
  private:
  bool _internal_has_ap_g_wheel_dist_curb_lvl_par_m() const;
  public:
  void clear_ap_g_wheel_dist_curb_lvl_par_m();
  float ap_g_wheel_dist_curb_lvl_par_m() const;
  void set_ap_g_wheel_dist_curb_lvl_par_m(float value);
  private:
  float _internal_ap_g_wheel_dist_curb_lvl_par_m() const;
  void _internal_set_ap_g_wheel_dist_curb_lvl_par_m(float value);
  public:

  // optional float AP_G_DIST_MIN_REAR_CURB_DOWN_M = 1495;
  bool has_ap_g_dist_min_rear_curb_down_m() const;
  private:
  bool _internal_has_ap_g_dist_min_rear_curb_down_m() const;
  public:
  void clear_ap_g_dist_min_rear_curb_down_m();
  float ap_g_dist_min_rear_curb_down_m() const;
  void set_ap_g_dist_min_rear_curb_down_m(float value);
  private:
  float _internal_ap_g_dist_min_rear_curb_down_m() const;
  void _internal_set_ap_g_dist_min_rear_curb_down_m(float value);
  public:

  // optional float AP_G_DIST_CMF_FRONT_TRAV_M = 1638;
  bool has_ap_g_dist_cmf_front_trav_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_front_trav_m() const;
  public:
  void clear_ap_g_dist_cmf_front_trav_m();
  float ap_g_dist_cmf_front_trav_m() const;
  void set_ap_g_dist_cmf_front_trav_m(float value);
  private:
  float _internal_ap_g_dist_cmf_front_trav_m() const;
  void _internal_set_ap_g_dist_cmf_front_trav_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_TRAV_PAR_M = 1654;
  bool has_ap_g_dist_cmf_lside_trav_par_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_trav_par_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_trav_par_m();
  float ap_g_dist_cmf_lside_trav_par_m() const;
  void set_ap_g_dist_cmf_lside_trav_par_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_trav_par_m() const;
  void _internal_set_ap_g_dist_cmf_lside_trav_par_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M = 1673;
  bool has_ap_g_dist_cmf_lside_curb_down_par_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_curb_down_par_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_curb_down_par_m();
  float ap_g_dist_cmf_lside_curb_down_par_m() const;
  void set_ap_g_dist_cmf_lside_curb_down_par_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_curb_down_par_m() const;
  void _internal_set_ap_g_dist_cmf_lside_curb_down_par_m(float value);
  public:

  // optional float AP_G_WHEEL_DIST_CURB_LVL_PERP_M = 1721;
  bool has_ap_g_wheel_dist_curb_lvl_perp_m() const;
  private:
  bool _internal_has_ap_g_wheel_dist_curb_lvl_perp_m() const;
  public:
  void clear_ap_g_wheel_dist_curb_lvl_perp_m();
  float ap_g_wheel_dist_curb_lvl_perp_m() const;
  void set_ap_g_wheel_dist_curb_lvl_perp_m(float value);
  private:
  float _internal_ap_g_wheel_dist_curb_lvl_perp_m() const;
  void _internal_set_ap_g_wheel_dist_curb_lvl_perp_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M = 1799;
  bool has_ap_g_dist_cmf_lside_high_obst_par_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_high_obst_par_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_high_obst_par_m();
  float ap_g_dist_cmf_lside_high_obst_par_m() const;
  void set_ap_g_dist_cmf_lside_high_obst_par_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_high_obst_par_m() const;
  void _internal_set_ap_g_dist_cmf_lside_high_obst_par_m(float value);
  public:

  // optional float AP_G_PAR_MAX_DEVIATION_LONG_M = 1817;
  bool has_ap_g_par_max_deviation_long_m() const;
  private:
  bool _internal_has_ap_g_par_max_deviation_long_m() const;
  public:
  void clear_ap_g_par_max_deviation_long_m();
  float ap_g_par_max_deviation_long_m() const;
  void set_ap_g_par_max_deviation_long_m(float value);
  private:
  float _internal_ap_g_par_max_deviation_long_m() const;
  void _internal_set_ap_g_par_max_deviation_long_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M = 1874;
  bool has_ap_g_dist_cmf_lside_curb_down_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_curb_down_perp_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_curb_down_perp_m();
  float ap_g_dist_cmf_lside_curb_down_perp_m() const;
  void set_ap_g_dist_cmf_lside_curb_down_perp_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_curb_down_perp_m() const;
  void _internal_set_ap_g_dist_cmf_lside_curb_down_perp_m(float value);
  public:

  // optional float AP_G_PER_MAX_DEVIATION_ANGL_RAD = 2000;
  bool has_ap_g_per_max_deviation_angl_rad() const;
  private:
  bool _internal_has_ap_g_per_max_deviation_angl_rad() const;
  public:
  void clear_ap_g_per_max_deviation_angl_rad();
  float ap_g_per_max_deviation_angl_rad() const;
  void set_ap_g_per_max_deviation_angl_rad(float value);
  private:
  float _internal_ap_g_per_max_deviation_angl_rad() const;
  void _internal_set_ap_g_per_max_deviation_angl_rad(float value);
  public:

  // optional float AP_G_DIST_CMF_SSIDE_CURB_DOWN_M = 2068;
  bool has_ap_g_dist_cmf_sside_curb_down_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_sside_curb_down_m() const;
  public:
  void clear_ap_g_dist_cmf_sside_curb_down_m();
  float ap_g_dist_cmf_sside_curb_down_m() const;
  void set_ap_g_dist_cmf_sside_curb_down_m(float value);
  private:
  float _internal_ap_g_dist_cmf_sside_curb_down_m() const;
  void _internal_set_ap_g_dist_cmf_sside_curb_down_m(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float AP_G_PAR_MAX_ORI_ANGLE_RAD = 2235;
  bool has_ap_g_par_max_ori_angle_rad() const;
  private:
  bool _internal_has_ap_g_par_max_ori_angle_rad() const;
  public:
  void clear_ap_g_par_max_ori_angle_rad();
  float ap_g_par_max_ori_angle_rad() const;
  void set_ap_g_par_max_ori_angle_rad(float value);
  private:
  float _internal_ap_g_par_max_ori_angle_rad() const;
  void _internal_set_ap_g_par_max_ori_angle_rad(float value);
  public:

  // optional float AP_G_PARK_OUT_PAR_MIN_ANG_RAD = 2340;
  bool has_ap_g_park_out_par_min_ang_rad() const;
  private:
  bool _internal_has_ap_g_park_out_par_min_ang_rad() const;
  public:
  void clear_ap_g_park_out_par_min_ang_rad();
  float ap_g_park_out_par_min_ang_rad() const;
  void set_ap_g_park_out_par_min_ang_rad(float value);
  private:
  float _internal_ap_g_park_out_par_min_ang_rad() const;
  void _internal_set_ap_g_park_out_par_min_ang_rad(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M = 2368;
  bool has_ap_g_dist_min_lside_door_open_par_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_door_open_par_m() const;
  public:
  void clear_ap_g_dist_min_lside_door_open_par_m();
  float ap_g_dist_min_lside_door_open_par_m() const;
  void set_ap_g_dist_min_lside_door_open_par_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_door_open_par_m() const;
  void _internal_set_ap_g_dist_min_lside_door_open_par_m(float value);
  public:

  // optional float AP_G_PAR_MAX_DEVIATION_LAT_M = 2481;
  bool has_ap_g_par_max_deviation_lat_m() const;
  private:
  bool _internal_has_ap_g_par_max_deviation_lat_m() const;
  public:
  void clear_ap_g_par_max_deviation_lat_m();
  float ap_g_par_max_deviation_lat_m() const;
  void set_ap_g_par_max_deviation_lat_m(float value);
  private:
  float _internal_ap_g_par_max_deviation_lat_m() const;
  void _internal_set_ap_g_par_max_deviation_lat_m(float value);
  public:

  // optional float AP_G_DIST_CMF_REAR_TRAV_M = 2491;
  bool has_ap_g_dist_cmf_rear_trav_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_rear_trav_m() const;
  public:
  void clear_ap_g_dist_cmf_rear_trav_m();
  float ap_g_dist_cmf_rear_trav_m() const;
  void set_ap_g_dist_cmf_rear_trav_m(float value);
  private:
  float _internal_ap_g_dist_cmf_rear_trav_m() const;
  void _internal_set_ap_g_dist_cmf_rear_trav_m(float value);
  public:

  // optional float AP_G_DIST_CMF_GP_PASSENGER_M = 2637;
  bool has_ap_g_dist_cmf_gp_passenger_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_gp_passenger_m() const;
  public:
  void clear_ap_g_dist_cmf_gp_passenger_m();
  float ap_g_dist_cmf_gp_passenger_m() const;
  void set_ap_g_dist_cmf_gp_passenger_m(float value);
  private:
  float _internal_ap_g_dist_cmf_gp_passenger_m() const;
  void _internal_set_ap_g_dist_cmf_gp_passenger_m(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M = 2912;
  bool has_ap_g_dist_min_lside_high_obst_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_high_obst_perp_m() const;
  public:
  void clear_ap_g_dist_min_lside_high_obst_perp_m();
  float ap_g_dist_min_lside_high_obst_perp_m() const;
  void set_ap_g_dist_min_lside_high_obst_perp_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_high_obst_perp_m() const;
  void _internal_set_ap_g_dist_min_lside_high_obst_perp_m(float value);
  public:

  // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M = 3012;
  bool has_ap_g_dist_min_sside_high_obst_fb_m() const;
  private:
  bool _internal_has_ap_g_dist_min_sside_high_obst_fb_m() const;
  public:
  void clear_ap_g_dist_min_sside_high_obst_fb_m();
  float ap_g_dist_min_sside_high_obst_fb_m() const;
  void set_ap_g_dist_min_sside_high_obst_fb_m(float value);
  private:
  float _internal_ap_g_dist_min_sside_high_obst_fb_m() const;
  void _internal_set_ap_g_dist_min_sside_high_obst_fb_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M = 3069;
  bool has_ap_g_dist_cmf_lside_door_open_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_door_open_perp_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_door_open_perp_m();
  float ap_g_dist_cmf_lside_door_open_perp_m() const;
  void set_ap_g_dist_cmf_lside_door_open_perp_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_door_open_perp_m() const;
  void _internal_set_ap_g_dist_cmf_lside_door_open_perp_m(float value);
  public:

  // optional float AP_G_PERP_MAX_LONG_MISALIGNMENT_M = 3261;
  bool has_ap_g_perp_max_long_misalignment_m() const;
  private:
  bool _internal_has_ap_g_perp_max_long_misalignment_m() const;
  public:
  void clear_ap_g_perp_max_long_misalignment_m();
  float ap_g_perp_max_long_misalignment_m() const;
  void set_ap_g_perp_max_long_misalignment_m(float value);
  private:
  float _internal_ap_g_perp_max_long_misalignment_m() const;
  void _internal_set_ap_g_perp_max_long_misalignment_m(float value);
  public:

  // optional float AP_G_DIST_CMF_REAR_HIGH_OBST_M = 3309;
  bool has_ap_g_dist_cmf_rear_high_obst_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_rear_high_obst_m() const;
  public:
  void clear_ap_g_dist_cmf_rear_high_obst_m();
  float ap_g_dist_cmf_rear_high_obst_m() const;
  void set_ap_g_dist_cmf_rear_high_obst_m(float value);
  private:
  float _internal_ap_g_dist_cmf_rear_high_obst_m() const;
  void _internal_set_ap_g_dist_cmf_rear_high_obst_m(float value);
  public:

  // optional float AP_G_WHEEL_DIST_ROAD_LVL_PAR_M = 3324;
  bool has_ap_g_wheel_dist_road_lvl_par_m() const;
  private:
  bool _internal_has_ap_g_wheel_dist_road_lvl_par_m() const;
  public:
  void clear_ap_g_wheel_dist_road_lvl_par_m();
  float ap_g_wheel_dist_road_lvl_par_m() const;
  void set_ap_g_wheel_dist_road_lvl_par_m(float value);
  private:
  float _internal_ap_g_wheel_dist_road_lvl_par_m() const;
  void _internal_set_ap_g_wheel_dist_road_lvl_par_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M = 3340;
  bool has_ap_g_dist_cmf_lside_door_open_par_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_door_open_par_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_door_open_par_m();
  float ap_g_dist_cmf_lside_door_open_par_m() const;
  void set_ap_g_dist_cmf_lside_door_open_par_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_door_open_par_m() const;
  void _internal_set_ap_g_dist_cmf_lside_door_open_par_m(float value);
  public:

  // optional float AP_G_PER_YAW_PLAN_DEV_RATIO_NU = 3357;
  bool has_ap_g_per_yaw_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_per_yaw_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_per_yaw_plan_dev_ratio_nu();
  float ap_g_per_yaw_plan_dev_ratio_nu() const;
  void set_ap_g_per_yaw_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_per_yaw_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_per_yaw_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_WIDE_SLOT_REL_WIDTH_M = 3502;
  bool has_ap_g_wide_slot_rel_width_m() const;
  private:
  bool _internal_has_ap_g_wide_slot_rel_width_m() const;
  public:
  void clear_ap_g_wide_slot_rel_width_m();
  float ap_g_wide_slot_rel_width_m() const;
  void set_ap_g_wide_slot_rel_width_m(float value);
  private:
  float _internal_ap_g_wide_slot_rel_width_m() const;
  void _internal_set_ap_g_wide_slot_rel_width_m(float value);
  public:

  // optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_M = 3519;
  bool has_ap_g_dist_min_sside_high_obst_m() const;
  private:
  bool _internal_has_ap_g_dist_min_sside_high_obst_m() const;
  public:
  void clear_ap_g_dist_min_sside_high_obst_m();
  float ap_g_dist_min_sside_high_obst_m() const;
  void set_ap_g_dist_min_sside_high_obst_m(float value);
  private:
  float _internal_ap_g_dist_min_sside_high_obst_m() const;
  void _internal_set_ap_g_dist_min_sside_high_obst_m(float value);
  public:

  // optional float AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU = 3657;
  bool has_ap_g_pout_perp_yaw_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_pout_perp_yaw_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_pout_perp_yaw_plan_dev_ratio_nu();
  float ap_g_pout_perp_yaw_plan_dev_ratio_nu() const;
  void set_ap_g_pout_perp_yaw_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_pout_perp_yaw_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_pout_perp_yaw_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_PAR_MAX_LAT_MISALIGNMENT_M = 3687;
  bool has_ap_g_par_max_lat_misalignment_m() const;
  private:
  bool _internal_has_ap_g_par_max_lat_misalignment_m() const;
  public:
  void clear_ap_g_par_max_lat_misalignment_m();
  float ap_g_par_max_lat_misalignment_m() const;
  void set_ap_g_par_max_lat_misalignment_m(float value);
  private:
  float _internal_ap_g_par_max_lat_misalignment_m() const;
  void _internal_set_ap_g_par_max_lat_misalignment_m(float value);
  public:

  // optional float AP_G_MAX_DEVIATION_LONG_SLOT_M = 3710;
  bool has_ap_g_max_deviation_long_slot_m() const;
  private:
  bool _internal_has_ap_g_max_deviation_long_slot_m() const;
  public:
  void clear_ap_g_max_deviation_long_slot_m();
  float ap_g_max_deviation_long_slot_m() const;
  void set_ap_g_max_deviation_long_slot_m(float value);
  private:
  float _internal_ap_g_max_deviation_long_slot_m() const;
  void _internal_set_ap_g_max_deviation_long_slot_m(float value);
  public:

  // optional float AP_G_DIST_MIN_DEFAULT_M = 3776;
  bool has_ap_g_dist_min_default_m() const;
  private:
  bool _internal_has_ap_g_dist_min_default_m() const;
  public:
  void clear_ap_g_dist_min_default_m();
  float ap_g_dist_min_default_m() const;
  void set_ap_g_dist_min_default_m(float value);
  private:
  float _internal_ap_g_dist_min_default_m() const;
  void _internal_set_ap_g_dist_min_default_m(float value);
  public:

  // optional bool AP_G_FREEZE_AP_EM_INPUT_NU = 3799;
  bool has_ap_g_freeze_ap_em_input_nu() const;
  private:
  bool _internal_has_ap_g_freeze_ap_em_input_nu() const;
  public:
  void clear_ap_g_freeze_ap_em_input_nu();
  bool ap_g_freeze_ap_em_input_nu() const;
  void set_ap_g_freeze_ap_em_input_nu(bool value);
  private:
  bool _internal_ap_g_freeze_ap_em_input_nu() const;
  void _internal_set_ap_g_freeze_ap_em_input_nu(bool value);
  public:

  // optional float AP_G_PER_MAX_DEVIATION_LAT_M = 3824;
  bool has_ap_g_per_max_deviation_lat_m() const;
  private:
  bool _internal_has_ap_g_per_max_deviation_lat_m() const;
  public:
  void clear_ap_g_per_max_deviation_lat_m();
  float ap_g_per_max_deviation_lat_m() const;
  void set_ap_g_per_max_deviation_lat_m(float value);
  private:
  float _internal_ap_g_per_max_deviation_lat_m() const;
  void _internal_set_ap_g_per_max_deviation_lat_m(float value);
  public:

  // optional float AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M = 3832;
  bool has_ap_g_angled_max_long_misalignment_m() const;
  private:
  bool _internal_has_ap_g_angled_max_long_misalignment_m() const;
  public:
  void clear_ap_g_angled_max_long_misalignment_m();
  float ap_g_angled_max_long_misalignment_m() const;
  void set_ap_g_angled_max_long_misalignment_m(float value);
  private:
  float _internal_ap_g_angled_max_long_misalignment_m() const;
  void _internal_set_ap_g_angled_max_long_misalignment_m(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_TRAV_PAR_M = 3861;
  bool has_ap_g_dist_min_lside_trav_par_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_trav_par_m() const;
  public:
  void clear_ap_g_dist_min_lside_trav_par_m();
  float ap_g_dist_min_lside_trav_par_m() const;
  void set_ap_g_dist_min_lside_trav_par_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_trav_par_m() const;
  void _internal_set_ap_g_dist_min_lside_trav_par_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M = 3872;
  bool has_ap_g_dist_cmf_lside_high_obst_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lside_high_obst_perp_m() const;
  public:
  void clear_ap_g_dist_cmf_lside_high_obst_perp_m();
  float ap_g_dist_cmf_lside_high_obst_perp_m() const;
  void set_ap_g_dist_cmf_lside_high_obst_perp_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lside_high_obst_perp_m() const;
  void _internal_set_ap_g_dist_cmf_lside_high_obst_perp_m(float value);
  public:

  // optional float AP_G_DIST_CMF_LANE_M = 3915;
  bool has_ap_g_dist_cmf_lane_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_lane_m() const;
  public:
  void clear_ap_g_dist_cmf_lane_m();
  float ap_g_dist_cmf_lane_m() const;
  void set_ap_g_dist_cmf_lane_m(float value);
  private:
  float _internal_ap_g_dist_cmf_lane_m() const;
  void _internal_set_ap_g_dist_cmf_lane_m(float value);
  public:

  // optional float AP_G_DIST_CMF_GP_DRIVER_M = 3938;
  bool has_ap_g_dist_cmf_gp_driver_m() const;
  private:
  bool _internal_has_ap_g_dist_cmf_gp_driver_m() const;
  public:
  void clear_ap_g_dist_cmf_gp_driver_m();
  float ap_g_dist_cmf_gp_driver_m() const;
  void set_ap_g_dist_cmf_gp_driver_m(float value);
  private:
  float _internal_ap_g_dist_cmf_gp_driver_m() const;
  void _internal_set_ap_g_dist_cmf_gp_driver_m(float value);
  public:

  // optional float AP_G_PAR_LAT_PLAN_DEV_RATIO_NU = 3985;
  bool has_ap_g_par_lat_plan_dev_ratio_nu() const;
  private:
  bool _internal_has_ap_g_par_lat_plan_dev_ratio_nu() const;
  public:
  void clear_ap_g_par_lat_plan_dev_ratio_nu();
  float ap_g_par_lat_plan_dev_ratio_nu() const;
  void set_ap_g_par_lat_plan_dev_ratio_nu(float value);
  private:
  float _internal_ap_g_par_lat_plan_dev_ratio_nu() const;
  void _internal_set_ap_g_par_lat_plan_dev_ratio_nu(float value);
  public:

  // optional float AP_G_MAX_DECEL_COMFORTABLE_MPS2 = 4016;
  bool has_ap_g_max_decel_comfortable_mps2() const;
  private:
  bool _internal_has_ap_g_max_decel_comfortable_mps2() const;
  public:
  void clear_ap_g_max_decel_comfortable_mps2();
  float ap_g_max_decel_comfortable_mps2() const;
  void set_ap_g_max_decel_comfortable_mps2(float value);
  private:
  float _internal_ap_g_max_decel_comfortable_mps2() const;
  void _internal_set_ap_g_max_decel_comfortable_mps2(float value);
  public:

  // optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M = 4029;
  bool has_ap_g_dist_min_lside_door_open_perp_m() const;
  private:
  bool _internal_has_ap_g_dist_min_lside_door_open_perp_m() const;
  public:
  void clear_ap_g_dist_min_lside_door_open_perp_m();
  float ap_g_dist_min_lside_door_open_perp_m() const;
  void set_ap_g_dist_min_lside_door_open_perp_m(float value);
  private:
  float _internal_ap_g_dist_min_lside_door_open_perp_m() const;
  void _internal_set_ap_g_dist_min_lside_door_open_perp_m(float value);
  public:

  // optional float AP_G_WHEEL_DIST_ROAD_LVL_PERP_M = 4030;
  bool has_ap_g_wheel_dist_road_lvl_perp_m() const;
  private:
  bool _internal_has_ap_g_wheel_dist_road_lvl_perp_m() const;
  public:
  void clear_ap_g_wheel_dist_road_lvl_perp_m();
  float ap_g_wheel_dist_road_lvl_perp_m() const;
  void set_ap_g_wheel_dist_road_lvl_perp_m(float value);
  private:
  float _internal_ap_g_wheel_dist_road_lvl_perp_m() const;
  void _internal_set_ap_g_wheel_dist_road_lvl_perp_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float ap_g_per_lon_plan_dev_ratio_nu_;
  float ap_g_dist_min_sside_trav_m_;
  float ap_g_dist_min_front_curb_down_m_;
  float ap_g_pout_perp_lat_plan_dev_ratio_nu_;
  float ap_g_dist_cmf_parkslot_marker_m_;
  float ap_g_dist_min_gp_entrance_clr_m_;
  float ap_g_par_yaw_plan_dev_ratio_nu_;
  float ap_g_dist_cmf_lside_trav_perp_m_;
  float ap_g_par_max_deviation_angl_rad_;
  float ap_g_dist_min_no_delimiter_m_;
  float ap_g_dist_static_obj_road_shift_par_m_;
  float ap_g_perp_max_ori_angle_rad_;
  float ap_g_long_slot_rel_length_m_;
  float ap_g_max_deviation_wide_slot_m_;
  float ap_g_dist_min_lside_curb_down_par_m_;
  int ap_g_traffic_side_nu_;
  float ap_g_dist_cmf_no_delimiter_m_;
  float ap_g_dist_static_obj_road_shift_perp_m_;
  float ap_g_dist_min_lside_curb_down_perp_m_;
  float ap_g_per_max_deviation_long_m_;
  float ap_g_dist_min_lside_high_obst_par_m_;
  float ap_g_per_lat_plan_dev_ratio_nu_;
  float ap_g_par_lon_plan_dev_ratio_nu_;
  float ap_g_dist_min_lane_m_;
  float ap_g_dist_min_lside_trav_perp_m_;
  float ap_g_dist_cmf_gp_entrance_clr_m_;
  float ap_g_max_curv_step_vel_red_1pm_;
  float ap_g_dist_min_parkslot_marker_m_;
  float ap_g_dist_cmf_front_high_obst_m_;
  float ap_g_dist_min_lside_high_obst_fb_m_;
  float ap_g_wheel_dist_curb_lvl_par_m_;
  float ap_g_dist_min_rear_curb_down_m_;
  float ap_g_dist_cmf_front_trav_m_;
  float ap_g_dist_cmf_lside_trav_par_m_;
  float ap_g_dist_cmf_lside_curb_down_par_m_;
  float ap_g_wheel_dist_curb_lvl_perp_m_;
  float ap_g_dist_cmf_lside_high_obst_par_m_;
  float ap_g_par_max_deviation_long_m_;
  float ap_g_dist_cmf_lside_curb_down_perp_m_;
  float ap_g_per_max_deviation_angl_rad_;
  float ap_g_dist_cmf_sside_curb_down_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float ap_g_par_max_ori_angle_rad_;
  float ap_g_park_out_par_min_ang_rad_;
  float ap_g_dist_min_lside_door_open_par_m_;
  float ap_g_par_max_deviation_lat_m_;
  float ap_g_dist_cmf_rear_trav_m_;
  float ap_g_dist_cmf_gp_passenger_m_;
  float ap_g_dist_min_lside_high_obst_perp_m_;
  float ap_g_dist_min_sside_high_obst_fb_m_;
  float ap_g_dist_cmf_lside_door_open_perp_m_;
  float ap_g_perp_max_long_misalignment_m_;
  float ap_g_dist_cmf_rear_high_obst_m_;
  float ap_g_wheel_dist_road_lvl_par_m_;
  float ap_g_dist_cmf_lside_door_open_par_m_;
  float ap_g_per_yaw_plan_dev_ratio_nu_;
  float ap_g_wide_slot_rel_width_m_;
  float ap_g_dist_min_sside_high_obst_m_;
  float ap_g_pout_perp_yaw_plan_dev_ratio_nu_;
  float ap_g_par_max_lat_misalignment_m_;
  float ap_g_max_deviation_long_slot_m_;
  float ap_g_dist_min_default_m_;
  bool ap_g_freeze_ap_em_input_nu_;
  float ap_g_per_max_deviation_lat_m_;
  float ap_g_angled_max_long_misalignment_m_;
  float ap_g_dist_min_lside_trav_par_m_;
  float ap_g_dist_cmf_lside_high_obst_perp_m_;
  float ap_g_dist_cmf_lane_m_;
  float ap_g_dist_cmf_gp_driver_m_;
  float ap_g_par_lat_plan_dev_ratio_nu_;
  float ap_g_max_decel_comfortable_mps2_;
  float ap_g_dist_min_lside_door_open_perp_m_;
  float ap_g_wheel_dist_road_lvl_perp_m_;
  friend struct ::TableStruct_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FC_TRJPLA_Sys_Func_Params_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port) */ {
 public:
  FC_TRJPLA_Sys_Func_Params_array_port();
  virtual ~FC_TRJPLA_Sys_Func_Params_array_port();

  FC_TRJPLA_Sys_Func_Params_array_port(const FC_TRJPLA_Sys_Func_Params_array_port& from);
  FC_TRJPLA_Sys_Func_Params_array_port(FC_TRJPLA_Sys_Func_Params_array_port&& from) noexcept
    : FC_TRJPLA_Sys_Func_Params_array_port() {
    *this = ::std::move(from);
  }

  inline FC_TRJPLA_Sys_Func_Params_array_port& operator=(const FC_TRJPLA_Sys_Func_Params_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_TRJPLA_Sys_Func_Params_array_port& operator=(FC_TRJPLA_Sys_Func_Params_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_TRJPLA_Sys_Func_Params_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_TRJPLA_Sys_Func_Params_array_port* internal_default_instance() {
    return reinterpret_cast<const FC_TRJPLA_Sys_Func_Params_array_port*>(
               &_FC_TRJPLA_Sys_Func_Params_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FC_TRJPLA_Sys_Func_Params_array_port& a, FC_TRJPLA_Sys_Func_Params_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_TRJPLA_Sys_Func_Params_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_TRJPLA_Sys_Func_Params_array_port* New() const final {
    return CreateMaybeMessage<FC_TRJPLA_Sys_Func_Params_array_port>(nullptr);
  }

  FC_TRJPLA_Sys_Func_Params_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_TRJPLA_Sys_Func_Params_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_TRJPLA_Sys_Func_Params_array_port& from);
  void MergeFrom(const FC_TRJPLA_Sys_Func_Params_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_TRJPLA_Sys_Func_Params_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto);
    return ::descriptor_table_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2275,
  };
  // repeated .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params data = 2275;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params >*
      mutable_data();
  private:
  const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& _internal_data(int index) const;
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* _internal_add_data();
  public:
  const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& data(int index) const;
  ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params > data_;
  friend struct ::TableStruct_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FC_TRJPLA_Sys_Func_Params

// optional uint32 uiVersionNumber = 2124;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Sys_Func_Params::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_TRJPLA_Sys_Func_Params::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  uiversionnumber_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TRJPLA_Sys_Func_Params::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FC_TRJPLA_Sys_Func_Params::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJPLA_Sys_Func_Params::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJPLA_Sys_Func_Params::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FC_TRJPLA_Sys_Func_Params::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FC_TRJPLA_Sys_Func_Params::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.sSigHeader)
}

// optional float AP_G_MAX_DECEL_COMFORTABLE_MPS2 = 4016;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_max_decel_comfortable_mps2() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_max_decel_comfortable_mps2() const {
  return _internal_has_ap_g_max_decel_comfortable_mps2();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_max_decel_comfortable_mps2() {
  ap_g_max_decel_comfortable_mps2_ = 0;
  _has_bits_[2] &= ~0x00000080u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_max_decel_comfortable_mps2() const {
  return ap_g_max_decel_comfortable_mps2_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_max_decel_comfortable_mps2() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_DECEL_COMFORTABLE_MPS2)
  return _internal_ap_g_max_decel_comfortable_mps2();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_max_decel_comfortable_mps2(float value) {
  _has_bits_[2] |= 0x00000080u;
  ap_g_max_decel_comfortable_mps2_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_max_decel_comfortable_mps2(float value) {
  _internal_set_ap_g_max_decel_comfortable_mps2(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_DECEL_COMFORTABLE_MPS2)
}

// optional float AP_G_MAX_CURV_STEP_VEL_RED_1PM = 1296;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_max_curv_step_vel_red_1pm() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_max_curv_step_vel_red_1pm() const {
  return _internal_has_ap_g_max_curv_step_vel_red_1pm();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_max_curv_step_vel_red_1pm() {
  ap_g_max_curv_step_vel_red_1pm_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_max_curv_step_vel_red_1pm() const {
  return ap_g_max_curv_step_vel_red_1pm_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_max_curv_step_vel_red_1pm() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_CURV_STEP_VEL_RED_1PM)
  return _internal_ap_g_max_curv_step_vel_red_1pm();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_max_curv_step_vel_red_1pm(float value) {
  _has_bits_[0] |= 0x08000000u;
  ap_g_max_curv_step_vel_red_1pm_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_max_curv_step_vel_red_1pm(float value) {
  _internal_set_ap_g_max_curv_step_vel_red_1pm(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_CURV_STEP_VEL_RED_1PM)
}

// optional float AP_G_DIST_MIN_DEFAULT_M = 3776;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_default_m() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_default_m() const {
  return _internal_has_ap_g_dist_min_default_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_default_m() {
  ap_g_dist_min_default_m_ = 0;
  _has_bits_[1] &= ~0x40000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_default_m() const {
  return ap_g_dist_min_default_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_default_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_DEFAULT_M)
  return _internal_ap_g_dist_min_default_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_default_m(float value) {
  _has_bits_[1] |= 0x40000000u;
  ap_g_dist_min_default_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_default_m(float value) {
  _internal_set_ap_g_dist_min_default_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_DEFAULT_M)
}

// optional float AP_G_DIST_MIN_NO_DELIMITER_M = 366;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_no_delimiter_m() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_no_delimiter_m() const {
  return _internal_has_ap_g_dist_min_no_delimiter_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_no_delimiter_m() {
  ap_g_dist_min_no_delimiter_m_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_no_delimiter_m() const {
  return ap_g_dist_min_no_delimiter_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_no_delimiter_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_NO_DELIMITER_M)
  return _internal_ap_g_dist_min_no_delimiter_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_no_delimiter_m(float value) {
  _has_bits_[0] |= 0x00000400u;
  ap_g_dist_min_no_delimiter_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_no_delimiter_m(float value) {
  _internal_set_ap_g_dist_min_no_delimiter_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_NO_DELIMITER_M)
}

// optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M = 2912;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_high_obst_perp_m() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_high_obst_perp_m() const {
  return _internal_has_ap_g_dist_min_lside_high_obst_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_high_obst_perp_m() {
  ap_g_dist_min_lside_high_obst_perp_m_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_high_obst_perp_m() const {
  return ap_g_dist_min_lside_high_obst_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_high_obst_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M)
  return _internal_ap_g_dist_min_lside_high_obst_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_high_obst_perp_m(float value) {
  _has_bits_[1] |= 0x00020000u;
  ap_g_dist_min_lside_high_obst_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_high_obst_perp_m(float value) {
  _internal_set_ap_g_dist_min_lside_high_obst_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_HIGH_OBST_PERP_M)
}

// optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M = 3872;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_high_obst_perp_m() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_high_obst_perp_m() const {
  return _internal_has_ap_g_dist_cmf_lside_high_obst_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_high_obst_perp_m() {
  ap_g_dist_cmf_lside_high_obst_perp_m_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_high_obst_perp_m() const {
  return ap_g_dist_cmf_lside_high_obst_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_high_obst_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M)
  return _internal_ap_g_dist_cmf_lside_high_obst_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_high_obst_perp_m(float value) {
  _has_bits_[2] |= 0x00000008u;
  ap_g_dist_cmf_lside_high_obst_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_high_obst_perp_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_high_obst_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_HIGH_OBST_PERP_M)
}

// optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_M = 3519;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_sside_high_obst_m() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_sside_high_obst_m() const {
  return _internal_has_ap_g_dist_min_sside_high_obst_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_sside_high_obst_m() {
  ap_g_dist_min_sside_high_obst_m_ = 0;
  _has_bits_[1] &= ~0x04000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_sside_high_obst_m() const {
  return ap_g_dist_min_sside_high_obst_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_sside_high_obst_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_SSIDE_HIGH_OBST_M)
  return _internal_ap_g_dist_min_sside_high_obst_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_sside_high_obst_m(float value) {
  _has_bits_[1] |= 0x04000000u;
  ap_g_dist_min_sside_high_obst_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_sside_high_obst_m(float value) {
  _internal_set_ap_g_dist_min_sside_high_obst_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_SSIDE_HIGH_OBST_M)
}

// optional float AP_G_DIST_CMF_FRONT_HIGH_OBST_M = 1303;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_front_high_obst_m() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_front_high_obst_m() const {
  return _internal_has_ap_g_dist_cmf_front_high_obst_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_front_high_obst_m() {
  ap_g_dist_cmf_front_high_obst_m_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_front_high_obst_m() const {
  return ap_g_dist_cmf_front_high_obst_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_front_high_obst_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_FRONT_HIGH_OBST_M)
  return _internal_ap_g_dist_cmf_front_high_obst_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_front_high_obst_m(float value) {
  _has_bits_[0] |= 0x20000000u;
  ap_g_dist_cmf_front_high_obst_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_front_high_obst_m(float value) {
  _internal_set_ap_g_dist_cmf_front_high_obst_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_FRONT_HIGH_OBST_M)
}

// optional float AP_G_DIST_CMF_REAR_HIGH_OBST_M = 3309;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_rear_high_obst_m() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_rear_high_obst_m() const {
  return _internal_has_ap_g_dist_cmf_rear_high_obst_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_rear_high_obst_m() {
  ap_g_dist_cmf_rear_high_obst_m_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_rear_high_obst_m() const {
  return ap_g_dist_cmf_rear_high_obst_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_rear_high_obst_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_REAR_HIGH_OBST_M)
  return _internal_ap_g_dist_cmf_rear_high_obst_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_rear_high_obst_m(float value) {
  _has_bits_[1] |= 0x00200000u;
  ap_g_dist_cmf_rear_high_obst_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_rear_high_obst_m(float value) {
  _internal_set_ap_g_dist_cmf_rear_high_obst_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_REAR_HIGH_OBST_M)
}

// optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M = 4029;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_door_open_perp_m() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_door_open_perp_m() const {
  return _internal_has_ap_g_dist_min_lside_door_open_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_door_open_perp_m() {
  ap_g_dist_min_lside_door_open_perp_m_ = 0;
  _has_bits_[2] &= ~0x00000100u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_door_open_perp_m() const {
  return ap_g_dist_min_lside_door_open_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_door_open_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M)
  return _internal_ap_g_dist_min_lside_door_open_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_door_open_perp_m(float value) {
  _has_bits_[2] |= 0x00000100u;
  ap_g_dist_min_lside_door_open_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_door_open_perp_m(float value) {
  _internal_set_ap_g_dist_min_lside_door_open_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PERP_M)
}

// optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M = 3069;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_door_open_perp_m() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_door_open_perp_m() const {
  return _internal_has_ap_g_dist_cmf_lside_door_open_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_door_open_perp_m() {
  ap_g_dist_cmf_lside_door_open_perp_m_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_door_open_perp_m() const {
  return ap_g_dist_cmf_lside_door_open_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_door_open_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M)
  return _internal_ap_g_dist_cmf_lside_door_open_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_door_open_perp_m(float value) {
  _has_bits_[1] |= 0x00080000u;
  ap_g_dist_cmf_lside_door_open_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_door_open_perp_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_door_open_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PERP_M)
}

// optional float AP_G_DIST_MIN_LSIDE_TRAV_PERP_M = 1260;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_trav_perp_m() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_trav_perp_m() const {
  return _internal_has_ap_g_dist_min_lside_trav_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_trav_perp_m() {
  ap_g_dist_min_lside_trav_perp_m_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_trav_perp_m() const {
  return ap_g_dist_min_lside_trav_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_trav_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_TRAV_PERP_M)
  return _internal_ap_g_dist_min_lside_trav_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_trav_perp_m(float value) {
  _has_bits_[0] |= 0x02000000u;
  ap_g_dist_min_lside_trav_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_trav_perp_m(float value) {
  _internal_set_ap_g_dist_min_lside_trav_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_TRAV_PERP_M)
}

// optional float AP_G_DIST_CMF_LSIDE_TRAV_PERP_M = 286;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_trav_perp_m() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_trav_perp_m() const {
  return _internal_has_ap_g_dist_cmf_lside_trav_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_trav_perp_m() {
  ap_g_dist_cmf_lside_trav_perp_m_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_trav_perp_m() const {
  return ap_g_dist_cmf_lside_trav_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_trav_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_TRAV_PERP_M)
  return _internal_ap_g_dist_cmf_lside_trav_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_trav_perp_m(float value) {
  _has_bits_[0] |= 0x00000100u;
  ap_g_dist_cmf_lside_trav_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_trav_perp_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_trav_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_TRAV_PERP_M)
}

// optional float AP_G_DIST_MIN_SSIDE_TRAV_M = 121;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_sside_trav_m() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_sside_trav_m() const {
  return _internal_has_ap_g_dist_min_sside_trav_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_sside_trav_m() {
  ap_g_dist_min_sside_trav_m_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_sside_trav_m() const {
  return ap_g_dist_min_sside_trav_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_sside_trav_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_SSIDE_TRAV_M)
  return _internal_ap_g_dist_min_sside_trav_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_sside_trav_m(float value) {
  _has_bits_[0] |= 0x00000004u;
  ap_g_dist_min_sside_trav_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_sside_trav_m(float value) {
  _internal_set_ap_g_dist_min_sside_trav_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_SSIDE_TRAV_M)
}

// optional float AP_G_DIST_CMF_FRONT_TRAV_M = 1638;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_front_trav_m() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_front_trav_m() const {
  return _internal_has_ap_g_dist_cmf_front_trav_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_front_trav_m() {
  ap_g_dist_cmf_front_trav_m_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_front_trav_m() const {
  return ap_g_dist_cmf_front_trav_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_front_trav_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_FRONT_TRAV_M)
  return _internal_ap_g_dist_cmf_front_trav_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_front_trav_m(float value) {
  _has_bits_[1] |= 0x00000002u;
  ap_g_dist_cmf_front_trav_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_front_trav_m(float value) {
  _internal_set_ap_g_dist_cmf_front_trav_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_FRONT_TRAV_M)
}

// optional float AP_G_DIST_CMF_REAR_TRAV_M = 2491;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_rear_trav_m() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_rear_trav_m() const {
  return _internal_has_ap_g_dist_cmf_rear_trav_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_rear_trav_m() {
  ap_g_dist_cmf_rear_trav_m_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_rear_trav_m() const {
  return ap_g_dist_cmf_rear_trav_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_rear_trav_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_REAR_TRAV_M)
  return _internal_ap_g_dist_cmf_rear_trav_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_rear_trav_m(float value) {
  _has_bits_[1] |= 0x00008000u;
  ap_g_dist_cmf_rear_trav_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_rear_trav_m(float value) {
  _internal_set_ap_g_dist_cmf_rear_trav_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_REAR_TRAV_M)
}

// optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M = 786;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_curb_down_perp_m() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_curb_down_perp_m() const {
  return _internal_has_ap_g_dist_min_lside_curb_down_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_curb_down_perp_m() {
  ap_g_dist_min_lside_curb_down_perp_m_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_curb_down_perp_m() const {
  return ap_g_dist_min_lside_curb_down_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_curb_down_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M)
  return _internal_ap_g_dist_min_lside_curb_down_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_curb_down_perp_m(float value) {
  _has_bits_[0] |= 0x00080000u;
  ap_g_dist_min_lside_curb_down_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_curb_down_perp_m(float value) {
  _internal_set_ap_g_dist_min_lside_curb_down_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_CURB_DOWN_PERP_M)
}

// optional float AP_G_DIST_MIN_FRONT_CURB_DOWN_M = 188;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_front_curb_down_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_front_curb_down_m() const {
  return _internal_has_ap_g_dist_min_front_curb_down_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_front_curb_down_m() {
  ap_g_dist_min_front_curb_down_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_front_curb_down_m() const {
  return ap_g_dist_min_front_curb_down_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_front_curb_down_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_FRONT_CURB_DOWN_M)
  return _internal_ap_g_dist_min_front_curb_down_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_front_curb_down_m(float value) {
  _has_bits_[0] |= 0x00000008u;
  ap_g_dist_min_front_curb_down_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_front_curb_down_m(float value) {
  _internal_set_ap_g_dist_min_front_curb_down_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_FRONT_CURB_DOWN_M)
}

// optional float AP_G_DIST_MIN_REAR_CURB_DOWN_M = 1495;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_rear_curb_down_m() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_rear_curb_down_m() const {
  return _internal_has_ap_g_dist_min_rear_curb_down_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_rear_curb_down_m() {
  ap_g_dist_min_rear_curb_down_m_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_rear_curb_down_m() const {
  return ap_g_dist_min_rear_curb_down_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_rear_curb_down_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_REAR_CURB_DOWN_M)
  return _internal_ap_g_dist_min_rear_curb_down_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_rear_curb_down_m(float value) {
  _has_bits_[1] |= 0x00000001u;
  ap_g_dist_min_rear_curb_down_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_rear_curb_down_m(float value) {
  _internal_set_ap_g_dist_min_rear_curb_down_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_REAR_CURB_DOWN_M)
}

// optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M = 1874;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_curb_down_perp_m() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_curb_down_perp_m() const {
  return _internal_has_ap_g_dist_cmf_lside_curb_down_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_curb_down_perp_m() {
  ap_g_dist_cmf_lside_curb_down_perp_m_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_curb_down_perp_m() const {
  return ap_g_dist_cmf_lside_curb_down_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_curb_down_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M)
  return _internal_ap_g_dist_cmf_lside_curb_down_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_curb_down_perp_m(float value) {
  _has_bits_[1] |= 0x00000080u;
  ap_g_dist_cmf_lside_curb_down_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_curb_down_perp_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_curb_down_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_CURB_DOWN_PERP_M)
}

// optional float AP_G_DIST_CMF_SSIDE_CURB_DOWN_M = 2068;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_sside_curb_down_m() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_sside_curb_down_m() const {
  return _internal_has_ap_g_dist_cmf_sside_curb_down_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_sside_curb_down_m() {
  ap_g_dist_cmf_sside_curb_down_m_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_sside_curb_down_m() const {
  return ap_g_dist_cmf_sside_curb_down_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_sside_curb_down_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_SSIDE_CURB_DOWN_M)
  return _internal_ap_g_dist_cmf_sside_curb_down_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_sside_curb_down_m(float value) {
  _has_bits_[1] |= 0x00000200u;
  ap_g_dist_cmf_sside_curb_down_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_sside_curb_down_m(float value) {
  _internal_set_ap_g_dist_cmf_sside_curb_down_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_SSIDE_CURB_DOWN_M)
}

// optional float AP_G_DIST_MIN_LANE_M = 1162;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lane_m() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lane_m() const {
  return _internal_has_ap_g_dist_min_lane_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lane_m() {
  ap_g_dist_min_lane_m_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lane_m() const {
  return ap_g_dist_min_lane_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lane_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LANE_M)
  return _internal_ap_g_dist_min_lane_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lane_m(float value) {
  _has_bits_[0] |= 0x01000000u;
  ap_g_dist_min_lane_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lane_m(float value) {
  _internal_set_ap_g_dist_min_lane_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LANE_M)
}

// optional float AP_G_DIST_CMF_LANE_M = 3915;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lane_m() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lane_m() const {
  return _internal_has_ap_g_dist_cmf_lane_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lane_m() {
  ap_g_dist_cmf_lane_m_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lane_m() const {
  return ap_g_dist_cmf_lane_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lane_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LANE_M)
  return _internal_ap_g_dist_cmf_lane_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lane_m(float value) {
  _has_bits_[2] |= 0x00000010u;
  ap_g_dist_cmf_lane_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lane_m(float value) {
  _internal_set_ap_g_dist_cmf_lane_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LANE_M)
}

// optional float AP_G_DIST_MIN_PARKSLOT_MARKER_M = 1300;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_parkslot_marker_m() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_parkslot_marker_m() const {
  return _internal_has_ap_g_dist_min_parkslot_marker_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_parkslot_marker_m() {
  ap_g_dist_min_parkslot_marker_m_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_parkslot_marker_m() const {
  return ap_g_dist_min_parkslot_marker_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_parkslot_marker_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_PARKSLOT_MARKER_M)
  return _internal_ap_g_dist_min_parkslot_marker_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_parkslot_marker_m(float value) {
  _has_bits_[0] |= 0x10000000u;
  ap_g_dist_min_parkslot_marker_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_parkslot_marker_m(float value) {
  _internal_set_ap_g_dist_min_parkslot_marker_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_PARKSLOT_MARKER_M)
}

// optional float AP_G_DIST_CMF_PARKSLOT_MARKER_M = 230;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_parkslot_marker_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_parkslot_marker_m() const {
  return _internal_has_ap_g_dist_cmf_parkslot_marker_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_parkslot_marker_m() {
  ap_g_dist_cmf_parkslot_marker_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_parkslot_marker_m() const {
  return ap_g_dist_cmf_parkslot_marker_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_parkslot_marker_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_PARKSLOT_MARKER_M)
  return _internal_ap_g_dist_cmf_parkslot_marker_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_parkslot_marker_m(float value) {
  _has_bits_[0] |= 0x00000020u;
  ap_g_dist_cmf_parkslot_marker_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_parkslot_marker_m(float value) {
  _internal_set_ap_g_dist_cmf_parkslot_marker_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_PARKSLOT_MARKER_M)
}

// optional float AP_G_PAR_MAX_DEVIATION_LONG_M = 1817;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_max_deviation_long_m() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_max_deviation_long_m() const {
  return _internal_has_ap_g_par_max_deviation_long_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_max_deviation_long_m() {
  ap_g_par_max_deviation_long_m_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_max_deviation_long_m() const {
  return ap_g_par_max_deviation_long_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_max_deviation_long_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_DEVIATION_LONG_M)
  return _internal_ap_g_par_max_deviation_long_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_max_deviation_long_m(float value) {
  _has_bits_[1] |= 0x00000040u;
  ap_g_par_max_deviation_long_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_max_deviation_long_m(float value) {
  _internal_set_ap_g_par_max_deviation_long_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_DEVIATION_LONG_M)
}

// optional float AP_G_PAR_MAX_DEVIATION_LAT_M = 2481;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_max_deviation_lat_m() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_max_deviation_lat_m() const {
  return _internal_has_ap_g_par_max_deviation_lat_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_max_deviation_lat_m() {
  ap_g_par_max_deviation_lat_m_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_max_deviation_lat_m() const {
  return ap_g_par_max_deviation_lat_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_max_deviation_lat_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_DEVIATION_LAT_M)
  return _internal_ap_g_par_max_deviation_lat_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_max_deviation_lat_m(float value) {
  _has_bits_[1] |= 0x00004000u;
  ap_g_par_max_deviation_lat_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_max_deviation_lat_m(float value) {
  _internal_set_ap_g_par_max_deviation_lat_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_DEVIATION_LAT_M)
}

// optional float AP_G_PAR_MAX_DEVIATION_ANGL_RAD = 289;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_max_deviation_angl_rad() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_max_deviation_angl_rad() const {
  return _internal_has_ap_g_par_max_deviation_angl_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_max_deviation_angl_rad() {
  ap_g_par_max_deviation_angl_rad_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_max_deviation_angl_rad() const {
  return ap_g_par_max_deviation_angl_rad_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_max_deviation_angl_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_DEVIATION_ANGL_RAD)
  return _internal_ap_g_par_max_deviation_angl_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_max_deviation_angl_rad(float value) {
  _has_bits_[0] |= 0x00000200u;
  ap_g_par_max_deviation_angl_rad_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_max_deviation_angl_rad(float value) {
  _internal_set_ap_g_par_max_deviation_angl_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_DEVIATION_ANGL_RAD)
}

// optional float AP_G_PER_MAX_DEVIATION_LONG_M = 788;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_per_max_deviation_long_m() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_per_max_deviation_long_m() const {
  return _internal_has_ap_g_per_max_deviation_long_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_per_max_deviation_long_m() {
  ap_g_per_max_deviation_long_m_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_per_max_deviation_long_m() const {
  return ap_g_per_max_deviation_long_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_per_max_deviation_long_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_MAX_DEVIATION_LONG_M)
  return _internal_ap_g_per_max_deviation_long_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_per_max_deviation_long_m(float value) {
  _has_bits_[0] |= 0x00100000u;
  ap_g_per_max_deviation_long_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_per_max_deviation_long_m(float value) {
  _internal_set_ap_g_per_max_deviation_long_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_MAX_DEVIATION_LONG_M)
}

// optional float AP_G_PER_MAX_DEVIATION_LAT_M = 3824;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_per_max_deviation_lat_m() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_per_max_deviation_lat_m() const {
  return _internal_has_ap_g_per_max_deviation_lat_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_per_max_deviation_lat_m() {
  ap_g_per_max_deviation_lat_m_ = 0;
  _has_bits_[2] &= ~0x00000001u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_per_max_deviation_lat_m() const {
  return ap_g_per_max_deviation_lat_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_per_max_deviation_lat_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_MAX_DEVIATION_LAT_M)
  return _internal_ap_g_per_max_deviation_lat_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_per_max_deviation_lat_m(float value) {
  _has_bits_[2] |= 0x00000001u;
  ap_g_per_max_deviation_lat_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_per_max_deviation_lat_m(float value) {
  _internal_set_ap_g_per_max_deviation_lat_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_MAX_DEVIATION_LAT_M)
}

// optional float AP_G_PER_MAX_DEVIATION_ANGL_RAD = 2000;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_per_max_deviation_angl_rad() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_per_max_deviation_angl_rad() const {
  return _internal_has_ap_g_per_max_deviation_angl_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_per_max_deviation_angl_rad() {
  ap_g_per_max_deviation_angl_rad_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_per_max_deviation_angl_rad() const {
  return ap_g_per_max_deviation_angl_rad_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_per_max_deviation_angl_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_MAX_DEVIATION_ANGL_RAD)
  return _internal_ap_g_per_max_deviation_angl_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_per_max_deviation_angl_rad(float value) {
  _has_bits_[1] |= 0x00000100u;
  ap_g_per_max_deviation_angl_rad_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_per_max_deviation_angl_rad(float value) {
  _internal_set_ap_g_per_max_deviation_angl_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_MAX_DEVIATION_ANGL_RAD)
}

// optional .pb.ap_common.traffic_side.TrafficSide AP_G_TRAFFIC_SIDE_NU = 741;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_traffic_side_nu() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_traffic_side_nu() const {
  return _internal_has_ap_g_traffic_side_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_traffic_side_nu() {
  ap_g_traffic_side_nu_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::pb::ap_common::traffic_side::TrafficSide FC_TRJPLA_Sys_Func_Params::_internal_ap_g_traffic_side_nu() const {
  return static_cast< ::pb::ap_common::traffic_side::TrafficSide >(ap_g_traffic_side_nu_);
}
inline ::pb::ap_common::traffic_side::TrafficSide FC_TRJPLA_Sys_Func_Params::ap_g_traffic_side_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_TRAFFIC_SIDE_NU)
  return _internal_ap_g_traffic_side_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_traffic_side_nu(::pb::ap_common::traffic_side::TrafficSide value) {
  assert(::pb::ap_common::traffic_side::TrafficSide_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  ap_g_traffic_side_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_traffic_side_nu(::pb::ap_common::traffic_side::TrafficSide value) {
  _internal_set_ap_g_traffic_side_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_TRAFFIC_SIDE_NU)
}

// optional float AP_G_PAR_MAX_ORI_ANGLE_RAD = 2235;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_max_ori_angle_rad() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_max_ori_angle_rad() const {
  return _internal_has_ap_g_par_max_ori_angle_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_max_ori_angle_rad() {
  ap_g_par_max_ori_angle_rad_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_max_ori_angle_rad() const {
  return ap_g_par_max_ori_angle_rad_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_max_ori_angle_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_ORI_ANGLE_RAD)
  return _internal_ap_g_par_max_ori_angle_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_max_ori_angle_rad(float value) {
  _has_bits_[1] |= 0x00000800u;
  ap_g_par_max_ori_angle_rad_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_max_ori_angle_rad(float value) {
  _internal_set_ap_g_par_max_ori_angle_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_ORI_ANGLE_RAD)
}

// optional float AP_G_PERP_MAX_ORI_ANGLE_RAD = 475;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_perp_max_ori_angle_rad() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_perp_max_ori_angle_rad() const {
  return _internal_has_ap_g_perp_max_ori_angle_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_perp_max_ori_angle_rad() {
  ap_g_perp_max_ori_angle_rad_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_perp_max_ori_angle_rad() const {
  return ap_g_perp_max_ori_angle_rad_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_perp_max_ori_angle_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PERP_MAX_ORI_ANGLE_RAD)
  return _internal_ap_g_perp_max_ori_angle_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_perp_max_ori_angle_rad(float value) {
  _has_bits_[0] |= 0x00001000u;
  ap_g_perp_max_ori_angle_rad_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_perp_max_ori_angle_rad(float value) {
  _internal_set_ap_g_perp_max_ori_angle_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PERP_MAX_ORI_ANGLE_RAD)
}

// optional bool AP_G_FREEZE_AP_EM_INPUT_NU = 3799;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_freeze_ap_em_input_nu() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_freeze_ap_em_input_nu() const {
  return _internal_has_ap_g_freeze_ap_em_input_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_freeze_ap_em_input_nu() {
  ap_g_freeze_ap_em_input_nu_ = false;
  _has_bits_[1] &= ~0x80000000u;
}
inline bool FC_TRJPLA_Sys_Func_Params::_internal_ap_g_freeze_ap_em_input_nu() const {
  return ap_g_freeze_ap_em_input_nu_;
}
inline bool FC_TRJPLA_Sys_Func_Params::ap_g_freeze_ap_em_input_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_FREEZE_AP_EM_INPUT_NU)
  return _internal_ap_g_freeze_ap_em_input_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_freeze_ap_em_input_nu(bool value) {
  _has_bits_[1] |= 0x80000000u;
  ap_g_freeze_ap_em_input_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_freeze_ap_em_input_nu(bool value) {
  _internal_set_ap_g_freeze_ap_em_input_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_FREEZE_AP_EM_INPUT_NU)
}

// optional float AP_G_DIST_CMF_NO_DELIMITER_M = 744;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_no_delimiter_m() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_no_delimiter_m() const {
  return _internal_has_ap_g_dist_cmf_no_delimiter_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_no_delimiter_m() {
  ap_g_dist_cmf_no_delimiter_m_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_no_delimiter_m() const {
  return ap_g_dist_cmf_no_delimiter_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_no_delimiter_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_NO_DELIMITER_M)
  return _internal_ap_g_dist_cmf_no_delimiter_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_no_delimiter_m(float value) {
  _has_bits_[0] |= 0x00020000u;
  ap_g_dist_cmf_no_delimiter_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_no_delimiter_m(float value) {
  _internal_set_ap_g_dist_cmf_no_delimiter_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_NO_DELIMITER_M)
}

// optional float AP_G_WHEEL_DIST_ROAD_LVL_PAR_M = 3324;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_wheel_dist_road_lvl_par_m() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_wheel_dist_road_lvl_par_m() const {
  return _internal_has_ap_g_wheel_dist_road_lvl_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_wheel_dist_road_lvl_par_m() {
  ap_g_wheel_dist_road_lvl_par_m_ = 0;
  _has_bits_[1] &= ~0x00400000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_wheel_dist_road_lvl_par_m() const {
  return ap_g_wheel_dist_road_lvl_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_wheel_dist_road_lvl_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_ROAD_LVL_PAR_M)
  return _internal_ap_g_wheel_dist_road_lvl_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_wheel_dist_road_lvl_par_m(float value) {
  _has_bits_[1] |= 0x00400000u;
  ap_g_wheel_dist_road_lvl_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_wheel_dist_road_lvl_par_m(float value) {
  _internal_set_ap_g_wheel_dist_road_lvl_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_ROAD_LVL_PAR_M)
}

// optional float AP_G_WHEEL_DIST_CURB_LVL_PAR_M = 1401;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_wheel_dist_curb_lvl_par_m() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_wheel_dist_curb_lvl_par_m() const {
  return _internal_has_ap_g_wheel_dist_curb_lvl_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_wheel_dist_curb_lvl_par_m() {
  ap_g_wheel_dist_curb_lvl_par_m_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_wheel_dist_curb_lvl_par_m() const {
  return ap_g_wheel_dist_curb_lvl_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_wheel_dist_curb_lvl_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_CURB_LVL_PAR_M)
  return _internal_ap_g_wheel_dist_curb_lvl_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_wheel_dist_curb_lvl_par_m(float value) {
  _has_bits_[0] |= 0x80000000u;
  ap_g_wheel_dist_curb_lvl_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_wheel_dist_curb_lvl_par_m(float value) {
  _internal_set_ap_g_wheel_dist_curb_lvl_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_CURB_LVL_PAR_M)
}

// optional float AP_G_WHEEL_DIST_ROAD_LVL_PERP_M = 4030;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_wheel_dist_road_lvl_perp_m() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_wheel_dist_road_lvl_perp_m() const {
  return _internal_has_ap_g_wheel_dist_road_lvl_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_wheel_dist_road_lvl_perp_m() {
  ap_g_wheel_dist_road_lvl_perp_m_ = 0;
  _has_bits_[2] &= ~0x00000200u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_wheel_dist_road_lvl_perp_m() const {
  return ap_g_wheel_dist_road_lvl_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_wheel_dist_road_lvl_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_ROAD_LVL_PERP_M)
  return _internal_ap_g_wheel_dist_road_lvl_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_wheel_dist_road_lvl_perp_m(float value) {
  _has_bits_[2] |= 0x00000200u;
  ap_g_wheel_dist_road_lvl_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_wheel_dist_road_lvl_perp_m(float value) {
  _internal_set_ap_g_wheel_dist_road_lvl_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_ROAD_LVL_PERP_M)
}

// optional float AP_G_WHEEL_DIST_CURB_LVL_PERP_M = 1721;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_wheel_dist_curb_lvl_perp_m() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_wheel_dist_curb_lvl_perp_m() const {
  return _internal_has_ap_g_wheel_dist_curb_lvl_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_wheel_dist_curb_lvl_perp_m() {
  ap_g_wheel_dist_curb_lvl_perp_m_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_wheel_dist_curb_lvl_perp_m() const {
  return ap_g_wheel_dist_curb_lvl_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_wheel_dist_curb_lvl_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_CURB_LVL_PERP_M)
  return _internal_ap_g_wheel_dist_curb_lvl_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_wheel_dist_curb_lvl_perp_m(float value) {
  _has_bits_[1] |= 0x00000010u;
  ap_g_wheel_dist_curb_lvl_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_wheel_dist_curb_lvl_perp_m(float value) {
  _internal_set_ap_g_wheel_dist_curb_lvl_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WHEEL_DIST_CURB_LVL_PERP_M)
}

// optional float AP_G_PARK_OUT_PAR_MIN_ANG_RAD = 2340;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_park_out_par_min_ang_rad() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_park_out_par_min_ang_rad() const {
  return _internal_has_ap_g_park_out_par_min_ang_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_park_out_par_min_ang_rad() {
  ap_g_park_out_par_min_ang_rad_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_park_out_par_min_ang_rad() const {
  return ap_g_park_out_par_min_ang_rad_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_park_out_par_min_ang_rad() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PARK_OUT_PAR_MIN_ANG_RAD)
  return _internal_ap_g_park_out_par_min_ang_rad();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_park_out_par_min_ang_rad(float value) {
  _has_bits_[1] |= 0x00001000u;
  ap_g_park_out_par_min_ang_rad_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_park_out_par_min_ang_rad(float value) {
  _internal_set_ap_g_park_out_par_min_ang_rad(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PARK_OUT_PAR_MIN_ANG_RAD)
}

// optional float AP_G_LONG_SLOT_REL_LENGTH_M = 664;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_long_slot_rel_length_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_long_slot_rel_length_m() const {
  return _internal_has_ap_g_long_slot_rel_length_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_long_slot_rel_length_m() {
  ap_g_long_slot_rel_length_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_long_slot_rel_length_m() const {
  return ap_g_long_slot_rel_length_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_long_slot_rel_length_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_LONG_SLOT_REL_LENGTH_M)
  return _internal_ap_g_long_slot_rel_length_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_long_slot_rel_length_m(float value) {
  _has_bits_[0] |= 0x00002000u;
  ap_g_long_slot_rel_length_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_long_slot_rel_length_m(float value) {
  _internal_set_ap_g_long_slot_rel_length_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_LONG_SLOT_REL_LENGTH_M)
}

// optional float AP_G_MAX_DEVIATION_LONG_SLOT_M = 3710;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_max_deviation_long_slot_m() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_max_deviation_long_slot_m() const {
  return _internal_has_ap_g_max_deviation_long_slot_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_max_deviation_long_slot_m() {
  ap_g_max_deviation_long_slot_m_ = 0;
  _has_bits_[1] &= ~0x20000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_max_deviation_long_slot_m() const {
  return ap_g_max_deviation_long_slot_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_max_deviation_long_slot_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_DEVIATION_LONG_SLOT_M)
  return _internal_ap_g_max_deviation_long_slot_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_max_deviation_long_slot_m(float value) {
  _has_bits_[1] |= 0x20000000u;
  ap_g_max_deviation_long_slot_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_max_deviation_long_slot_m(float value) {
  _internal_set_ap_g_max_deviation_long_slot_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_DEVIATION_LONG_SLOT_M)
}

// optional float AP_G_WIDE_SLOT_REL_WIDTH_M = 3502;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_wide_slot_rel_width_m() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_wide_slot_rel_width_m() const {
  return _internal_has_ap_g_wide_slot_rel_width_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_wide_slot_rel_width_m() {
  ap_g_wide_slot_rel_width_m_ = 0;
  _has_bits_[1] &= ~0x02000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_wide_slot_rel_width_m() const {
  return ap_g_wide_slot_rel_width_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_wide_slot_rel_width_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WIDE_SLOT_REL_WIDTH_M)
  return _internal_ap_g_wide_slot_rel_width_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_wide_slot_rel_width_m(float value) {
  _has_bits_[1] |= 0x02000000u;
  ap_g_wide_slot_rel_width_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_wide_slot_rel_width_m(float value) {
  _internal_set_ap_g_wide_slot_rel_width_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_WIDE_SLOT_REL_WIDTH_M)
}

// optional float AP_G_MAX_DEVIATION_WIDE_SLOT_M = 694;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_max_deviation_wide_slot_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_max_deviation_wide_slot_m() const {
  return _internal_has_ap_g_max_deviation_wide_slot_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_max_deviation_wide_slot_m() {
  ap_g_max_deviation_wide_slot_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_max_deviation_wide_slot_m() const {
  return ap_g_max_deviation_wide_slot_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_max_deviation_wide_slot_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_DEVIATION_WIDE_SLOT_M)
  return _internal_ap_g_max_deviation_wide_slot_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_max_deviation_wide_slot_m(float value) {
  _has_bits_[0] |= 0x00004000u;
  ap_g_max_deviation_wide_slot_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_max_deviation_wide_slot_m(float value) {
  _internal_set_ap_g_max_deviation_wide_slot_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_MAX_DEVIATION_WIDE_SLOT_M)
}

// optional float AP_G_DIST_MIN_GP_ENTRANCE_CLR_M = 258;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_gp_entrance_clr_m() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_gp_entrance_clr_m() const {
  return _internal_has_ap_g_dist_min_gp_entrance_clr_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_gp_entrance_clr_m() {
  ap_g_dist_min_gp_entrance_clr_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_gp_entrance_clr_m() const {
  return ap_g_dist_min_gp_entrance_clr_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_gp_entrance_clr_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_GP_ENTRANCE_CLR_M)
  return _internal_ap_g_dist_min_gp_entrance_clr_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_gp_entrance_clr_m(float value) {
  _has_bits_[0] |= 0x00000040u;
  ap_g_dist_min_gp_entrance_clr_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_gp_entrance_clr_m(float value) {
  _internal_set_ap_g_dist_min_gp_entrance_clr_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_GP_ENTRANCE_CLR_M)
}

// optional float AP_G_DIST_CMF_GP_ENTRANCE_CLR_M = 1264;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_gp_entrance_clr_m() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_gp_entrance_clr_m() const {
  return _internal_has_ap_g_dist_cmf_gp_entrance_clr_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_gp_entrance_clr_m() {
  ap_g_dist_cmf_gp_entrance_clr_m_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_gp_entrance_clr_m() const {
  return ap_g_dist_cmf_gp_entrance_clr_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_gp_entrance_clr_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_GP_ENTRANCE_CLR_M)
  return _internal_ap_g_dist_cmf_gp_entrance_clr_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_gp_entrance_clr_m(float value) {
  _has_bits_[0] |= 0x04000000u;
  ap_g_dist_cmf_gp_entrance_clr_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_gp_entrance_clr_m(float value) {
  _internal_set_ap_g_dist_cmf_gp_entrance_clr_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_GP_ENTRANCE_CLR_M)
}

// optional float AP_G_DIST_CMF_GP_DRIVER_M = 3938;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_gp_driver_m() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_gp_driver_m() const {
  return _internal_has_ap_g_dist_cmf_gp_driver_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_gp_driver_m() {
  ap_g_dist_cmf_gp_driver_m_ = 0;
  _has_bits_[2] &= ~0x00000020u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_gp_driver_m() const {
  return ap_g_dist_cmf_gp_driver_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_gp_driver_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_GP_DRIVER_M)
  return _internal_ap_g_dist_cmf_gp_driver_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_gp_driver_m(float value) {
  _has_bits_[2] |= 0x00000020u;
  ap_g_dist_cmf_gp_driver_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_gp_driver_m(float value) {
  _internal_set_ap_g_dist_cmf_gp_driver_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_GP_DRIVER_M)
}

// optional float AP_G_DIST_CMF_GP_PASSENGER_M = 2637;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_gp_passenger_m() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_gp_passenger_m() const {
  return _internal_has_ap_g_dist_cmf_gp_passenger_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_gp_passenger_m() {
  ap_g_dist_cmf_gp_passenger_m_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_gp_passenger_m() const {
  return ap_g_dist_cmf_gp_passenger_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_gp_passenger_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_GP_PASSENGER_M)
  return _internal_ap_g_dist_cmf_gp_passenger_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_gp_passenger_m(float value) {
  _has_bits_[1] |= 0x00010000u;
  ap_g_dist_cmf_gp_passenger_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_gp_passenger_m(float value) {
  _internal_set_ap_g_dist_cmf_gp_passenger_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_GP_PASSENGER_M)
}

// optional float AP_G_PAR_MAX_LAT_MISALIGNMENT_M = 3687;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_max_lat_misalignment_m() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_max_lat_misalignment_m() const {
  return _internal_has_ap_g_par_max_lat_misalignment_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_max_lat_misalignment_m() {
  ap_g_par_max_lat_misalignment_m_ = 0;
  _has_bits_[1] &= ~0x10000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_max_lat_misalignment_m() const {
  return ap_g_par_max_lat_misalignment_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_max_lat_misalignment_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_LAT_MISALIGNMENT_M)
  return _internal_ap_g_par_max_lat_misalignment_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_max_lat_misalignment_m(float value) {
  _has_bits_[1] |= 0x10000000u;
  ap_g_par_max_lat_misalignment_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_max_lat_misalignment_m(float value) {
  _internal_set_ap_g_par_max_lat_misalignment_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_MAX_LAT_MISALIGNMENT_M)
}

// optional float AP_G_PAR_LON_PLAN_DEV_RATIO_NU = 1022;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_lon_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_lon_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_par_lon_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_lon_plan_dev_ratio_nu() {
  ap_g_par_lon_plan_dev_ratio_nu_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_lon_plan_dev_ratio_nu() const {
  return ap_g_par_lon_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_lon_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_LON_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_par_lon_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_lon_plan_dev_ratio_nu(float value) {
  _has_bits_[0] |= 0x00800000u;
  ap_g_par_lon_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_lon_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_par_lon_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_LON_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_PAR_LAT_PLAN_DEV_RATIO_NU = 3985;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_lat_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_lat_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_par_lat_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_lat_plan_dev_ratio_nu() {
  ap_g_par_lat_plan_dev_ratio_nu_ = 0;
  _has_bits_[2] &= ~0x00000040u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_lat_plan_dev_ratio_nu() const {
  return ap_g_par_lat_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_lat_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_LAT_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_par_lat_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_lat_plan_dev_ratio_nu(float value) {
  _has_bits_[2] |= 0x00000040u;
  ap_g_par_lat_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_lat_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_par_lat_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_LAT_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_PAR_YAW_PLAN_DEV_RATIO_NU = 273;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_par_yaw_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_par_yaw_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_par_yaw_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_par_yaw_plan_dev_ratio_nu() {
  ap_g_par_yaw_plan_dev_ratio_nu_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_par_yaw_plan_dev_ratio_nu() const {
  return ap_g_par_yaw_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_par_yaw_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_YAW_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_par_yaw_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_par_yaw_plan_dev_ratio_nu(float value) {
  _has_bits_[0] |= 0x00000080u;
  ap_g_par_yaw_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_par_yaw_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_par_yaw_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PAR_YAW_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_PER_LON_PLAN_DEV_RATIO_NU = 4082;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_per_lon_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_per_lon_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_per_lon_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_per_lon_plan_dev_ratio_nu() {
  ap_g_per_lon_plan_dev_ratio_nu_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_per_lon_plan_dev_ratio_nu() const {
  return ap_g_per_lon_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_per_lon_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_LON_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_per_lon_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_per_lon_plan_dev_ratio_nu(float value) {
  _has_bits_[0] |= 0x00000002u;
  ap_g_per_lon_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_per_lon_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_per_lon_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_LON_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_PER_LAT_PLAN_DEV_RATIO_NU = 925;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_per_lat_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_per_lat_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_per_lat_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_per_lat_plan_dev_ratio_nu() {
  ap_g_per_lat_plan_dev_ratio_nu_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_per_lat_plan_dev_ratio_nu() const {
  return ap_g_per_lat_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_per_lat_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_LAT_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_per_lat_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_per_lat_plan_dev_ratio_nu(float value) {
  _has_bits_[0] |= 0x00400000u;
  ap_g_per_lat_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_per_lat_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_per_lat_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_LAT_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_PER_YAW_PLAN_DEV_RATIO_NU = 3357;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_per_yaw_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_per_yaw_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_per_yaw_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_per_yaw_plan_dev_ratio_nu() {
  ap_g_per_yaw_plan_dev_ratio_nu_ = 0;
  _has_bits_[1] &= ~0x01000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_per_yaw_plan_dev_ratio_nu() const {
  return ap_g_per_yaw_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_per_yaw_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_YAW_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_per_yaw_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_per_yaw_plan_dev_ratio_nu(float value) {
  _has_bits_[1] |= 0x01000000u;
  ap_g_per_yaw_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_per_yaw_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_per_yaw_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PER_YAW_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU = 201;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_pout_perp_lat_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_pout_perp_lat_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_pout_perp_lat_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_pout_perp_lat_plan_dev_ratio_nu() {
  ap_g_pout_perp_lat_plan_dev_ratio_nu_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_pout_perp_lat_plan_dev_ratio_nu() const {
  return ap_g_pout_perp_lat_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_pout_perp_lat_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_pout_perp_lat_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_pout_perp_lat_plan_dev_ratio_nu(float value) {
  _has_bits_[0] |= 0x00000010u;
  ap_g_pout_perp_lat_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_pout_perp_lat_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_pout_perp_lat_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_POUT_PERP_LAT_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU = 3657;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_pout_perp_yaw_plan_dev_ratio_nu() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_pout_perp_yaw_plan_dev_ratio_nu() const {
  return _internal_has_ap_g_pout_perp_yaw_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_pout_perp_yaw_plan_dev_ratio_nu() {
  ap_g_pout_perp_yaw_plan_dev_ratio_nu_ = 0;
  _has_bits_[1] &= ~0x08000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_pout_perp_yaw_plan_dev_ratio_nu() const {
  return ap_g_pout_perp_yaw_plan_dev_ratio_nu_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_pout_perp_yaw_plan_dev_ratio_nu() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU)
  return _internal_ap_g_pout_perp_yaw_plan_dev_ratio_nu();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_pout_perp_yaw_plan_dev_ratio_nu(float value) {
  _has_bits_[1] |= 0x08000000u;
  ap_g_pout_perp_yaw_plan_dev_ratio_nu_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_pout_perp_yaw_plan_dev_ratio_nu(float value) {
  _internal_set_ap_g_pout_perp_yaw_plan_dev_ratio_nu(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_POUT_PERP_YAW_PLAN_DEV_RATIO_NU)
}

// optional float AP_G_PERP_MAX_LONG_MISALIGNMENT_M = 3261;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_perp_max_long_misalignment_m() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_perp_max_long_misalignment_m() const {
  return _internal_has_ap_g_perp_max_long_misalignment_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_perp_max_long_misalignment_m() {
  ap_g_perp_max_long_misalignment_m_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_perp_max_long_misalignment_m() const {
  return ap_g_perp_max_long_misalignment_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_perp_max_long_misalignment_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PERP_MAX_LONG_MISALIGNMENT_M)
  return _internal_ap_g_perp_max_long_misalignment_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_perp_max_long_misalignment_m(float value) {
  _has_bits_[1] |= 0x00100000u;
  ap_g_perp_max_long_misalignment_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_perp_max_long_misalignment_m(float value) {
  _internal_set_ap_g_perp_max_long_misalignment_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_PERP_MAX_LONG_MISALIGNMENT_M)
}

// optional float AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M = 3832;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_angled_max_long_misalignment_m() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_angled_max_long_misalignment_m() const {
  return _internal_has_ap_g_angled_max_long_misalignment_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_angled_max_long_misalignment_m() {
  ap_g_angled_max_long_misalignment_m_ = 0;
  _has_bits_[2] &= ~0x00000002u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_angled_max_long_misalignment_m() const {
  return ap_g_angled_max_long_misalignment_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_angled_max_long_misalignment_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M)
  return _internal_ap_g_angled_max_long_misalignment_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_angled_max_long_misalignment_m(float value) {
  _has_bits_[2] |= 0x00000002u;
  ap_g_angled_max_long_misalignment_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_angled_max_long_misalignment_m(float value) {
  _internal_set_ap_g_angled_max_long_misalignment_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_ANGLED_MAX_LONG_MISALIGNMENT_M)
}

// optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M = 843;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_high_obst_par_m() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_high_obst_par_m() const {
  return _internal_has_ap_g_dist_min_lside_high_obst_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_high_obst_par_m() {
  ap_g_dist_min_lside_high_obst_par_m_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_high_obst_par_m() const {
  return ap_g_dist_min_lside_high_obst_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_high_obst_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M)
  return _internal_ap_g_dist_min_lside_high_obst_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_high_obst_par_m(float value) {
  _has_bits_[0] |= 0x00200000u;
  ap_g_dist_min_lside_high_obst_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_high_obst_par_m(float value) {
  _internal_set_ap_g_dist_min_lside_high_obst_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_HIGH_OBST_PAR_M)
}

// optional float AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M = 1799;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_high_obst_par_m() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_high_obst_par_m() const {
  return _internal_has_ap_g_dist_cmf_lside_high_obst_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_high_obst_par_m() {
  ap_g_dist_cmf_lside_high_obst_par_m_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_high_obst_par_m() const {
  return ap_g_dist_cmf_lside_high_obst_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_high_obst_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M)
  return _internal_ap_g_dist_cmf_lside_high_obst_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_high_obst_par_m(float value) {
  _has_bits_[1] |= 0x00000020u;
  ap_g_dist_cmf_lside_high_obst_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_high_obst_par_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_high_obst_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_HIGH_OBST_PAR_M)
}

// optional float AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M = 2368;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_door_open_par_m() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_door_open_par_m() const {
  return _internal_has_ap_g_dist_min_lside_door_open_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_door_open_par_m() {
  ap_g_dist_min_lside_door_open_par_m_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_door_open_par_m() const {
  return ap_g_dist_min_lside_door_open_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_door_open_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M)
  return _internal_ap_g_dist_min_lside_door_open_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_door_open_par_m(float value) {
  _has_bits_[1] |= 0x00002000u;
  ap_g_dist_min_lside_door_open_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_door_open_par_m(float value) {
  _internal_set_ap_g_dist_min_lside_door_open_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_DOOR_OPEN_PAR_M)
}

// optional float AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M = 3340;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_door_open_par_m() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_door_open_par_m() const {
  return _internal_has_ap_g_dist_cmf_lside_door_open_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_door_open_par_m() {
  ap_g_dist_cmf_lside_door_open_par_m_ = 0;
  _has_bits_[1] &= ~0x00800000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_door_open_par_m() const {
  return ap_g_dist_cmf_lside_door_open_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_door_open_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M)
  return _internal_ap_g_dist_cmf_lside_door_open_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_door_open_par_m(float value) {
  _has_bits_[1] |= 0x00800000u;
  ap_g_dist_cmf_lside_door_open_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_door_open_par_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_door_open_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_DOOR_OPEN_PAR_M)
}

// optional float AP_G_DIST_MIN_LSIDE_TRAV_PAR_M = 3861;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_trav_par_m() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_trav_par_m() const {
  return _internal_has_ap_g_dist_min_lside_trav_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_trav_par_m() {
  ap_g_dist_min_lside_trav_par_m_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_trav_par_m() const {
  return ap_g_dist_min_lside_trav_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_trav_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_TRAV_PAR_M)
  return _internal_ap_g_dist_min_lside_trav_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_trav_par_m(float value) {
  _has_bits_[2] |= 0x00000004u;
  ap_g_dist_min_lside_trav_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_trav_par_m(float value) {
  _internal_set_ap_g_dist_min_lside_trav_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_TRAV_PAR_M)
}

// optional float AP_G_DIST_CMF_LSIDE_TRAV_PAR_M = 1654;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_trav_par_m() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_trav_par_m() const {
  return _internal_has_ap_g_dist_cmf_lside_trav_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_trav_par_m() {
  ap_g_dist_cmf_lside_trav_par_m_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_trav_par_m() const {
  return ap_g_dist_cmf_lside_trav_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_trav_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_TRAV_PAR_M)
  return _internal_ap_g_dist_cmf_lside_trav_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_trav_par_m(float value) {
  _has_bits_[1] |= 0x00000004u;
  ap_g_dist_cmf_lside_trav_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_trav_par_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_trav_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_TRAV_PAR_M)
}

// optional float AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M = 709;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_curb_down_par_m() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_curb_down_par_m() const {
  return _internal_has_ap_g_dist_min_lside_curb_down_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_curb_down_par_m() {
  ap_g_dist_min_lside_curb_down_par_m_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_curb_down_par_m() const {
  return ap_g_dist_min_lside_curb_down_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_curb_down_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M)
  return _internal_ap_g_dist_min_lside_curb_down_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_curb_down_par_m(float value) {
  _has_bits_[0] |= 0x00008000u;
  ap_g_dist_min_lside_curb_down_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_curb_down_par_m(float value) {
  _internal_set_ap_g_dist_min_lside_curb_down_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_CURB_DOWN_PAR_M)
}

// optional float AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M = 1673;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_cmf_lside_curb_down_par_m() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_cmf_lside_curb_down_par_m() const {
  return _internal_has_ap_g_dist_cmf_lside_curb_down_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_cmf_lside_curb_down_par_m() {
  ap_g_dist_cmf_lside_curb_down_par_m_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_cmf_lside_curb_down_par_m() const {
  return ap_g_dist_cmf_lside_curb_down_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_cmf_lside_curb_down_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M)
  return _internal_ap_g_dist_cmf_lside_curb_down_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_cmf_lside_curb_down_par_m(float value) {
  _has_bits_[1] |= 0x00000008u;
  ap_g_dist_cmf_lside_curb_down_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_cmf_lside_curb_down_par_m(float value) {
  _internal_set_ap_g_dist_cmf_lside_curb_down_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_CMF_LSIDE_CURB_DOWN_PAR_M)
}

// optional float AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M = 1335;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_lside_high_obst_fb_m() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_lside_high_obst_fb_m() const {
  return _internal_has_ap_g_dist_min_lside_high_obst_fb_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_lside_high_obst_fb_m() {
  ap_g_dist_min_lside_high_obst_fb_m_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_lside_high_obst_fb_m() const {
  return ap_g_dist_min_lside_high_obst_fb_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_lside_high_obst_fb_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M)
  return _internal_ap_g_dist_min_lside_high_obst_fb_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_lside_high_obst_fb_m(float value) {
  _has_bits_[0] |= 0x40000000u;
  ap_g_dist_min_lside_high_obst_fb_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_lside_high_obst_fb_m(float value) {
  _internal_set_ap_g_dist_min_lside_high_obst_fb_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_LSIDE_HIGH_OBST_FB_M)
}

// optional float AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M = 3012;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_min_sside_high_obst_fb_m() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_min_sside_high_obst_fb_m() const {
  return _internal_has_ap_g_dist_min_sside_high_obst_fb_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_min_sside_high_obst_fb_m() {
  ap_g_dist_min_sside_high_obst_fb_m_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_min_sside_high_obst_fb_m() const {
  return ap_g_dist_min_sside_high_obst_fb_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_min_sside_high_obst_fb_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M)
  return _internal_ap_g_dist_min_sside_high_obst_fb_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_min_sside_high_obst_fb_m(float value) {
  _has_bits_[1] |= 0x00040000u;
  ap_g_dist_min_sside_high_obst_fb_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_min_sside_high_obst_fb_m(float value) {
  _internal_set_ap_g_dist_min_sside_high_obst_fb_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_MIN_SSIDE_HIGH_OBST_FB_M)
}

// optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M = 761;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_static_obj_road_shift_perp_m() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_static_obj_road_shift_perp_m() const {
  return _internal_has_ap_g_dist_static_obj_road_shift_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_static_obj_road_shift_perp_m() {
  ap_g_dist_static_obj_road_shift_perp_m_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_static_obj_road_shift_perp_m() const {
  return ap_g_dist_static_obj_road_shift_perp_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_static_obj_road_shift_perp_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M)
  return _internal_ap_g_dist_static_obj_road_shift_perp_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_static_obj_road_shift_perp_m(float value) {
  _has_bits_[0] |= 0x00040000u;
  ap_g_dist_static_obj_road_shift_perp_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_static_obj_road_shift_perp_m(float value) {
  _internal_set_ap_g_dist_static_obj_road_shift_perp_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PERP_M)
}

// optional float AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M = 453;
inline bool FC_TRJPLA_Sys_Func_Params::_internal_has_ap_g_dist_static_obj_road_shift_par_m() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FC_TRJPLA_Sys_Func_Params::has_ap_g_dist_static_obj_road_shift_par_m() const {
  return _internal_has_ap_g_dist_static_obj_road_shift_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::clear_ap_g_dist_static_obj_road_shift_par_m() {
  ap_g_dist_static_obj_road_shift_par_m_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float FC_TRJPLA_Sys_Func_Params::_internal_ap_g_dist_static_obj_road_shift_par_m() const {
  return ap_g_dist_static_obj_road_shift_par_m_;
}
inline float FC_TRJPLA_Sys_Func_Params::ap_g_dist_static_obj_road_shift_par_m() const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M)
  return _internal_ap_g_dist_static_obj_road_shift_par_m();
}
inline void FC_TRJPLA_Sys_Func_Params::_internal_set_ap_g_dist_static_obj_road_shift_par_m(float value) {
  _has_bits_[0] |= 0x00000800u;
  ap_g_dist_static_obj_road_shift_par_m_ = value;
}
inline void FC_TRJPLA_Sys_Func_Params::set_ap_g_dist_static_obj_road_shift_par_m(float value) {
  _internal_set_ap_g_dist_static_obj_road_shift_par_m(value);
  // @@protoc_insertion_point(field_set:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params.AP_G_DIST_STATIC_OBJ_ROAD_SHIFT_PAR_M)
}

// -------------------------------------------------------------------

// FC_TRJPLA_Sys_Func_Params_array_port

// repeated .pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params data = 2275;
inline int FC_TRJPLA_Sys_Func_Params_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FC_TRJPLA_Sys_Func_Params_array_port::data_size() const {
  return _internal_data_size();
}
inline void FC_TRJPLA_Sys_Func_Params_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* FC_TRJPLA_Sys_Func_Params_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params >*
FC_TRJPLA_Sys_Func_Params_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port.data)
  return &data_;
}
inline const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& FC_TRJPLA_Sys_Func_Params_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params& FC_TRJPLA_Sys_Func_Params_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port.data)
  return _internal_data(index);
}
inline ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* FC_TRJPLA_Sys_Func_Params_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params* FC_TRJPLA_Sys_Func_Params_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::ap_common::fc_trjpla_sys_func_params::FC_TRJPLA_Sys_Func_Params >&
FC_TRJPLA_Sys_Func_Params_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.ap_common.fc_trjpla_sys_func_params.FC_TRJPLA_Sys_Func_Params_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fc_trjpla_sys_func_params
}  // namespace ap_common
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ap_5fcommon_2ffc_5ftrjpla_5fsys_5ffunc_5fparams_2eproto
