// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ap_common/vehicle_params.proto

#include "ap_common/vehicle_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ap_5fcommon_2fvehicle_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
namespace pb {
namespace ap_common {
namespace vehicle_params {
class Vehicle_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_Params> _instance;
} _Vehicle_Params_default_instance_;
class Vehicle_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_Params_array_port> _instance;
} _Vehicle_Params_array_port_default_instance_;
}  // namespace vehicle_params
}  // namespace ap_common
}  // namespace pb
static void InitDefaultsscc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::vehicle_params::_Vehicle_Params_default_instance_;
    new (ptr) ::pb::ap_common::vehicle_params::Vehicle_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::vehicle_params::Vehicle_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_Vehicle_Params_array_port_ap_5fcommon_2fvehicle_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::ap_common::vehicle_params::_Vehicle_Params_array_port_default_instance_;
    new (ptr) ::pb::ap_common::vehicle_params::Vehicle_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ap_common::vehicle_params::Vehicle_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vehicle_Params_array_port_ap_5fcommon_2fvehicle_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vehicle_Params_array_port_ap_5fcommon_2fvehicle_5fparams_2eproto}, {
      &scc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ap_5fcommon_2fvehicle_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ap_5fcommon_2fvehicle_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ap_5fcommon_2fvehicle_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ap_5fcommon_2fvehicle_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_ratio_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_lookup_st_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_lookup_in_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_lookup_out_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_lookup_ctr_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_wheelbase_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_overhang_rear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_length_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_width_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_wheel_number_of_teeth_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_tyre_circumference_front_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_tyre_circumference_rear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_num_standard_shape_pts_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_standard_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_standard_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_num_bounding_pts_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_boundingbox_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_boundingbox_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_track_front_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_track_rear_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_mirror_shape_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_hitch_shape_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_wheel_shape_size_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_left_mirror_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_left_mirror_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_right_mirror_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_right_mirror_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_hitch_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_hitch_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_fl_wheel_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_fl_wheel_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_rl_wheel_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_rl_wheel_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_rr_wheel_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_rr_wheel_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_fr_wheel_shape_x_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_fr_wheel_shape_y_m_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_max_steer_ang_vel_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_comf_steer_ang_vel_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_ang_to_yaw_ang_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_poly_out_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_poly_ctr_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_steer_poly_in_whl_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params, ap_v_max_infl_dist_m_),
  9,
  0,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  4,
  17,
  6,
  3,
  7,
  19,
  15,
  ~0u,
  ~0u,
  13,
  ~0u,
  ~0u,
  11,
  1,
  18,
  20,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  10,
  14,
  8,
  ~0u,
  ~0u,
  ~0u,
  12,
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ap_common::vehicle_params::Vehicle_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 51, sizeof(::pb::ap_common::vehicle_params::Vehicle_Params)},
  { 97, 103, sizeof(::pb::ap_common::vehicle_params::Vehicle_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::vehicle_params::_Vehicle_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::ap_common::vehicle_params::_Vehicle_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_ap_5fcommon_2fvehicle_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036ap_common/vehicle_params.proto\022\033pb.ap_"
  "common.vehicle_params\032\027eco/signal_header"
  ".proto\"\326\014\n\016Vehicle_Params\022\030\n\017uiVersionNu"
  "mber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.ec"
  "o.signal_header.SignalHeader\022\034\n\023AP_V_STE"
  "ER_RATIO_NU\030\244\033 \001(\002\022%\n\034AP_V_STEER_LOOKUP_"
  "ST_WHL_RAD\030\356\n \003(\002\022%\n\034AP_V_STEER_LOOKUP_I"
  "N_WHL_RAD\030\337\022 \003(\002\022&\n\035AP_V_STEER_LOOKUP_OU"
  "T_WHL_RAD\030\235\035 \003(\002\022&\n\035AP_V_STEER_LOOKUP_CT"
  "R_WHL_RAD\030\231\021 \003(\002\022\031\n\020AP_V_WHEELBASE_M\030\353\n "
  "\001(\002\022\035\n\024AP_V_OVERHANG_REAR_M\030\222\006 \001(\002\022\026\n\rAP"
  "_V_LENGTH_M\030\311\033 \001(\002\022\025\n\014AP_V_WIDTH_M\030\267\013 \001("
  "\002\022&\n\035AP_V_WHEEL_NUMBER_OF_TEETH_NU\030\270\003 \001("
  "\r\022(\n\037AP_V_TYRE_CIRCUMFERENCE_FRONT_M\030\262\014 "
  "\001(\002\022\'\n\036AP_V_TYRE_CIRCUMFERENCE_REAR_M\030\362\033"
  " \001(\002\022$\n\033AP_V_NUM_STANDARD_SHAPE_PTS\030\225\033 \001"
  "(\r\022 \n\027AP_V_STANDARD_SHAPE_X_M\030\342\017 \003(\002\022 \n\027"
  "AP_V_STANDARD_SHAPE_Y_M\030\322\001 \003(\002\022\036\n\025AP_V_N"
  "UM_BOUNDING_PTS\030\324\024 \001(\r\022\035\n\024AP_V_BOUNDINGB"
  "OX_X_M\030\257\010 \003(\002\022\035\n\024AP_V_BOUNDINGBOX_Y_M\030\237\006"
  " \003(\002\022\033\n\022AP_V_TRACK_FRONT_M\030\345\022 \001(\002\022\032\n\021AP_"
  "V_TRACK_REAR_M\030\253\002 \001(\002\022\"\n\031AP_V_MIRROR_SHA"
  "PE_SIZE_NU\030\332\033 \001(\r\022!\n\030AP_V_HITCH_SHAPE_SI"
  "ZE_NU\030\214\034 \001(\r\022!\n\030AP_V_WHEEL_SHAPE_SIZE_NU"
  "\030\253\003 \001(\r\022#\n\032AP_V_LEFT_MIRROR_SHAPE_X_M\030\340\035"
  " \003(\002\022#\n\032AP_V_LEFT_MIRROR_SHAPE_Y_M\030\320\023 \003("
  "\002\022$\n\033AP_V_RIGHT_MIRROR_SHAPE_X_M\030\231\r \003(\002\022"
  "$\n\033AP_V_RIGHT_MIRROR_SHAPE_Y_M\030\251\003 \003(\002\022\035\n"
  "\024AP_V_HITCH_SHAPE_X_M\030\364\016 \003(\002\022\034\n\024AP_V_HIT"
  "CH_SHAPE_Y_M\030D \003(\002\022 \n\027AP_V_FL_WHEEL_SHAP"
  "E_X_M\030\353\016 \003(\002\022\037\n\027AP_V_FL_WHEEL_SHAPE_Y_M\030"
  "[ \003(\002\022 \n\027AP_V_RL_WHEEL_SHAPE_X_M\030\263\n \003(\002\022"
  " \n\027AP_V_RL_WHEEL_SHAPE_Y_M\030\203\004 \003(\002\022 \n\027AP_"
  "V_RR_WHEEL_SHAPE_X_M\030\356\034 \003(\002\022 \n\027AP_V_RR_W"
  "HEEL_SHAPE_Y_M\030\336\022 \003(\002\022 \n\027AP_V_FR_WHEEL_S"
  "HAPE_X_M\030\266\030 \003(\002\022 \n\027AP_V_FR_WHEEL_SHAPE_Y"
  "_M\030\206\026 \003(\002\022%\n\034AP_V_MAX_STEER_ANG_VEL_RADP"
  "S\030\373\021 \001(\002\022&\n\035AP_V_COMF_STEER_ANG_VEL_RADP"
  "S\030\224\027 \001(\002\022%\n\034AP_V_STEER_ANG_TO_YAW_ANG_NU"
  "\030\324\r \001(\002\022$\n\033AP_V_STEER_POLY_OUT_WHL_RAD\030\306"
  "\004 \003(\002\022$\n\033AP_V_STEER_POLY_CTR_WHL_RAD\030\302\010 "
  "\003(\002\022#\n\032AP_V_STEER_POLY_IN_WHL_RAD\030\324\023 \003(\002"
  "\022\035\n\024AP_V_MAX_INFL_DIST_M\030\232\023 \001(\002\"W\n\031Vehic"
  "le_Params_array_port\022:\n\004data\030\313\002 \003(\0132+.pb"
  ".ap_common.vehicle_params.Vehicle_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_sccs[2] = {
  &scc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto.base,
  &scc_info_Vehicle_Params_array_port_ap_5fcommon_2fvehicle_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_once;
static bool descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto = {
  &descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_initialized, descriptor_table_protodef_ap_5fcommon_2fvehicle_5fparams_2eproto, "ap_common/vehicle_params.proto", 1800,
  &descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_once, descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_sccs, descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ap_5fcommon_2fvehicle_5fparams_2eproto::offsets,
  file_level_metadata_ap_5fcommon_2fvehicle_5fparams_2eproto, 2, file_level_enum_descriptors_ap_5fcommon_2fvehicle_5fparams_2eproto, file_level_service_descriptors_ap_5fcommon_2fvehicle_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ap_5fcommon_2fvehicle_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ap_5fcommon_2fvehicle_5fparams_2eproto), true);
namespace pb {
namespace ap_common {
namespace vehicle_params {

// ===================================================================

void Vehicle_Params::InitAsDefaultInstance() {
  ::pb::ap_common::vehicle_params::_Vehicle_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class Vehicle_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const Vehicle_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_v_steer_ratio_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ap_v_wheelbase_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_v_overhang_rear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_v_length_m(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ap_v_width_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_v_wheel_number_of_teeth_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_v_tyre_circumference_front_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_v_tyre_circumference_rear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ap_v_num_standard_shape_pts(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ap_v_num_bounding_pts(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ap_v_track_front_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ap_v_track_rear_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ap_v_mirror_shape_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ap_v_hitch_shape_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ap_v_wheel_shape_size_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_v_max_steer_ang_vel_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ap_v_comf_steer_ang_vel_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_v_steer_ang_to_yaw_ang_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_v_max_infl_dist_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
Vehicle_Params::_Internal::ssigheader(const Vehicle_Params* msg) {
  return *msg->ssigheader_;
}
void Vehicle_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Vehicle_Params::Vehicle_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.vehicle_params.Vehicle_Params)
}
Vehicle_Params::Vehicle_Params(const Vehicle_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ap_v_hitch_shape_y_m_(from.ap_v_hitch_shape_y_m_),
      ap_v_fl_wheel_shape_y_m_(from.ap_v_fl_wheel_shape_y_m_),
      ap_v_standard_shape_y_m_(from.ap_v_standard_shape_y_m_),
      ap_v_right_mirror_shape_y_m_(from.ap_v_right_mirror_shape_y_m_),
      ap_v_rl_wheel_shape_y_m_(from.ap_v_rl_wheel_shape_y_m_),
      ap_v_steer_poly_out_whl_rad_(from.ap_v_steer_poly_out_whl_rad_),
      ap_v_boundingbox_y_m_(from.ap_v_boundingbox_y_m_),
      ap_v_boundingbox_x_m_(from.ap_v_boundingbox_x_m_),
      ap_v_steer_poly_ctr_whl_rad_(from.ap_v_steer_poly_ctr_whl_rad_),
      ap_v_rl_wheel_shape_x_m_(from.ap_v_rl_wheel_shape_x_m_),
      ap_v_steer_lookup_st_whl_rad_(from.ap_v_steer_lookup_st_whl_rad_),
      ap_v_right_mirror_shape_x_m_(from.ap_v_right_mirror_shape_x_m_),
      ap_v_fl_wheel_shape_x_m_(from.ap_v_fl_wheel_shape_x_m_),
      ap_v_hitch_shape_x_m_(from.ap_v_hitch_shape_x_m_),
      ap_v_standard_shape_x_m_(from.ap_v_standard_shape_x_m_),
      ap_v_steer_lookup_ctr_whl_rad_(from.ap_v_steer_lookup_ctr_whl_rad_),
      ap_v_rr_wheel_shape_y_m_(from.ap_v_rr_wheel_shape_y_m_),
      ap_v_steer_lookup_in_whl_rad_(from.ap_v_steer_lookup_in_whl_rad_),
      ap_v_left_mirror_shape_y_m_(from.ap_v_left_mirror_shape_y_m_),
      ap_v_steer_poly_in_whl_rad_(from.ap_v_steer_poly_in_whl_rad_),
      ap_v_fr_wheel_shape_y_m_(from.ap_v_fr_wheel_shape_y_m_),
      ap_v_fr_wheel_shape_x_m_(from.ap_v_fr_wheel_shape_x_m_),
      ap_v_rr_wheel_shape_x_m_(from.ap_v_rr_wheel_shape_x_m_),
      ap_v_steer_lookup_out_whl_rad_(from.ap_v_steer_lookup_out_whl_rad_),
      ap_v_left_mirror_shape_x_m_(from.ap_v_left_mirror_shape_x_m_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&ap_v_track_rear_m_, &from.ap_v_track_rear_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_v_hitch_shape_size_nu_) -
    reinterpret_cast<char*>(&ap_v_track_rear_m_)) + sizeof(ap_v_hitch_shape_size_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.vehicle_params.Vehicle_Params)
}

void Vehicle_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_v_hitch_shape_size_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(ap_v_hitch_shape_size_nu_));
}

Vehicle_Params::~Vehicle_Params() {
  // @@protoc_insertion_point(destructor:pb.ap_common.vehicle_params.Vehicle_Params)
  SharedDtor();
}

void Vehicle_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void Vehicle_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_Params& Vehicle_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_Params_ap_5fcommon_2fvehicle_5fparams_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.vehicle_params.Vehicle_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ap_v_hitch_shape_y_m_.Clear();
  ap_v_fl_wheel_shape_y_m_.Clear();
  ap_v_standard_shape_y_m_.Clear();
  ap_v_right_mirror_shape_y_m_.Clear();
  ap_v_rl_wheel_shape_y_m_.Clear();
  ap_v_steer_poly_out_whl_rad_.Clear();
  ap_v_boundingbox_y_m_.Clear();
  ap_v_boundingbox_x_m_.Clear();
  ap_v_steer_poly_ctr_whl_rad_.Clear();
  ap_v_rl_wheel_shape_x_m_.Clear();
  ap_v_steer_lookup_st_whl_rad_.Clear();
  ap_v_right_mirror_shape_x_m_.Clear();
  ap_v_fl_wheel_shape_x_m_.Clear();
  ap_v_hitch_shape_x_m_.Clear();
  ap_v_standard_shape_x_m_.Clear();
  ap_v_steer_lookup_ctr_whl_rad_.Clear();
  ap_v_rr_wheel_shape_y_m_.Clear();
  ap_v_steer_lookup_in_whl_rad_.Clear();
  ap_v_left_mirror_shape_y_m_.Clear();
  ap_v_steer_poly_in_whl_rad_.Clear();
  ap_v_fr_wheel_shape_y_m_.Clear();
  ap_v_fr_wheel_shape_x_m_.Clear();
  ap_v_rr_wheel_shape_x_m_.Clear();
  ap_v_steer_lookup_out_whl_rad_.Clear();
  ap_v_left_mirror_shape_x_m_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ap_v_track_rear_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_v_tyre_circumference_front_m_) -
        reinterpret_cast<char*>(&ap_v_track_rear_m_)) + sizeof(ap_v_tyre_circumference_front_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_v_steer_ang_to_yaw_ang_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_v_num_standard_shape_pts_) -
        reinterpret_cast<char*>(&ap_v_steer_ang_to_yaw_ang_nu_)) + sizeof(ap_v_num_standard_shape_pts_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&ap_v_steer_ratio_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_v_hitch_shape_size_nu_) -
        reinterpret_cast<char*>(&ap_v_steer_ratio_nu_)) + sizeof(ap_v_hitch_shape_size_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float AP_V_HITCH_SHAPE_Y_M = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_hitch_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<549>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_hitch_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_FL_WHEEL_SHAPE_Y_M = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_fl_wheel_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<733>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_fl_wheel_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STANDARD_SHAPE_Y_M = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_standard_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1685>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_standard_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_TRACK_REAR_M = 299;
      case 299:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_v_track_rear_m(&has_bits);
          ap_v_track_rear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_RIGHT_MIRROR_SHAPE_Y_M = 425;
      case 425:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_right_mirror_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3405>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_right_mirror_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_WHEEL_SHAPE_SIZE_NU = 427;
      case 427:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ap_v_wheel_shape_size_nu(&has_bits);
          ap_v_wheel_shape_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_WHEEL_NUMBER_OF_TEETH_NU = 440;
      case 440:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ap_v_wheel_number_of_teeth_nu(&has_bits);
          ap_v_wheel_number_of_teeth_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_RL_WHEEL_SHAPE_Y_M = 515;
      case 515:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_rl_wheel_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<4125>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_rl_wheel_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STEER_POLY_OUT_WHL_RAD = 582;
      case 582:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_steer_poly_out_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<4661>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_steer_poly_out_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_OVERHANG_REAR_M = 786;
      case 786:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_v_overhang_rear_m(&has_bits);
          ap_v_overhang_rear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_BOUNDINGBOX_Y_M = 799;
      case 799:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_boundingbox_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<6397>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_boundingbox_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_BOUNDINGBOX_X_M = 1071;
      case 1071:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_boundingbox_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8573>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_boundingbox_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STEER_POLY_CTR_WHL_RAD = 1090;
      case 1090:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_steer_poly_ctr_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8725>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_steer_poly_ctr_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_RL_WHEEL_SHAPE_X_M = 1331;
      case 1331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_rl_wheel_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10653>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_rl_wheel_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_WHEELBASE_M = 1387;
      case 1387:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ap_v_wheelbase_m(&has_bits);
          ap_v_wheelbase_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STEER_LOOKUP_ST_WHL_RAD = 1390;
      case 1390:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_steer_lookup_st_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<11125>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_steer_lookup_st_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_WIDTH_M = 1463;
      case 1463:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_v_width_m(&has_bits);
          ap_v_width_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_TYRE_CIRCUMFERENCE_FRONT_M = 1586;
      case 1586:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_v_tyre_circumference_front_m(&has_bits);
          ap_v_tyre_circumference_front_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_RIGHT_MIRROR_SHAPE_X_M = 1689;
      case 1689:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_right_mirror_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13517>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_right_mirror_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_STEER_ANG_TO_YAW_ANG_NU = 1748;
      case 1748:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_v_steer_ang_to_yaw_ang_nu(&has_bits);
          ap_v_steer_ang_to_yaw_ang_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_FL_WHEEL_SHAPE_X_M = 1899;
      case 1899:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_fl_wheel_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15197>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_fl_wheel_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_HITCH_SHAPE_X_M = 1908;
      case 1908:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_hitch_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<15269>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_hitch_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STANDARD_SHAPE_X_M = 2018;
      case 2018:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ap_v_standard_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16149>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_standard_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STEER_LOOKUP_CTR_WHL_RAD = 2201;
      case 2201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _internal_add_ap_v_steer_lookup_ctr_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_steer_lookup_ctr_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_MAX_STEER_ANG_VEL_RADPS = 2299;
      case 2299:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_ap_v_max_steer_ang_vel_radps(&has_bits);
          ap_v_max_steer_ang_vel_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_RR_WHEEL_SHAPE_Y_M = 2398;
      case 2398:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _internal_add_ap_v_rr_wheel_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_rr_wheel_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STEER_LOOKUP_IN_WHL_RAD = 2399;
      case 2399:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _internal_add_ap_v_steer_lookup_in_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_steer_lookup_in_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_TRACK_FRONT_M = 2405;
      case 2405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ap_v_track_front_m(&has_bits);
          ap_v_track_front_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_MAX_INFL_DIST_M = 2458;
      case 2458:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_ap_v_max_infl_dist_m(&has_bits);
          ap_v_max_infl_dist_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_LEFT_MIRROR_SHAPE_Y_M = 2512;
      case 2512:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _internal_add_ap_v_left_mirror_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_left_mirror_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STEER_POLY_IN_WHL_RAD = 2516;
      case 2516:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _internal_add_ap_v_steer_poly_in_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_steer_poly_in_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_NUM_BOUNDING_PTS = 2644;
      case 2644:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_ap_v_num_bounding_pts(&has_bits);
          ap_v_num_bounding_pts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_FR_WHEEL_SHAPE_Y_M = 2822;
      case 2822:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _internal_add_ap_v_fr_wheel_shape_y_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_fr_wheel_shape_y_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_COMF_STEER_ANG_VEL_RADPS = 2964;
      case 2964:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_ap_v_comf_steer_ang_vel_radps(&has_bits);
          ap_v_comf_steer_ang_vel_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_FR_WHEEL_SHAPE_X_M = 3126;
      case 3126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _internal_add_ap_v_fr_wheel_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_fr_wheel_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_NUM_STANDARD_SHAPE_PTS = 3477;
      case 3477:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ap_v_num_standard_shape_pts(&has_bits);
          ap_v_num_standard_shape_pts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_STEER_RATIO_NU = 3492;
      case 3492:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ap_v_steer_ratio_nu(&has_bits);
          ap_v_steer_ratio_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_LENGTH_M = 3529;
      case 3529:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_ap_v_length_m(&has_bits);
          ap_v_length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_MIRROR_SHAPE_SIZE_NU = 3546;
      case 3546:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_ap_v_mirror_shape_size_nu(&has_bits);
          ap_v_mirror_shape_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_V_TYRE_CIRCUMFERENCE_REAR_M = 3570;
      case 3570:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_ap_v_tyre_circumference_rear_m(&has_bits);
          ap_v_tyre_circumference_rear_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 AP_V_HITCH_SHAPE_SIZE_NU = 3596;
      case 3596:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ap_v_hitch_shape_size_nu(&has_bits);
          ap_v_hitch_shape_size_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_RR_WHEEL_SHAPE_X_M = 3694;
      case 3694:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _internal_add_ap_v_rr_wheel_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_rr_wheel_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_STEER_LOOKUP_OUT_WHL_RAD = 3741;
      case 3741:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _internal_add_ap_v_steer_lookup_out_whl_rad(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_steer_lookup_out_whl_rad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float AP_V_LEFT_MIRROR_SHAPE_X_M = 3808;
      case 3808:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _internal_add_ap_v_left_mirror_shape_x_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ap_v_left_mirror_shape_x_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.vehicle_params.Vehicle_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float AP_V_HITCH_SHAPE_Y_M = 68;
  for (int i = 0, n = this->_internal_ap_v_hitch_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(68, this->_internal_ap_v_hitch_shape_y_m(i), target);
  }

  // repeated float AP_V_FL_WHEEL_SHAPE_Y_M = 91;
  for (int i = 0, n = this->_internal_ap_v_fl_wheel_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(91, this->_internal_ap_v_fl_wheel_shape_y_m(i), target);
  }

  // repeated float AP_V_STANDARD_SHAPE_Y_M = 210;
  for (int i = 0, n = this->_internal_ap_v_standard_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(210, this->_internal_ap_v_standard_shape_y_m(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float AP_V_TRACK_REAR_M = 299;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(299, this->_internal_ap_v_track_rear_m(), target);
  }

  // repeated float AP_V_RIGHT_MIRROR_SHAPE_Y_M = 425;
  for (int i = 0, n = this->_internal_ap_v_right_mirror_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(425, this->_internal_ap_v_right_mirror_shape_y_m(i), target);
  }

  // optional uint32 AP_V_WHEEL_SHAPE_SIZE_NU = 427;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(427, this->_internal_ap_v_wheel_shape_size_nu(), target);
  }

  // optional uint32 AP_V_WHEEL_NUMBER_OF_TEETH_NU = 440;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(440, this->_internal_ap_v_wheel_number_of_teeth_nu(), target);
  }

  // repeated float AP_V_RL_WHEEL_SHAPE_Y_M = 515;
  for (int i = 0, n = this->_internal_ap_v_rl_wheel_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(515, this->_internal_ap_v_rl_wheel_shape_y_m(i), target);
  }

  // repeated float AP_V_STEER_POLY_OUT_WHL_RAD = 582;
  for (int i = 0, n = this->_internal_ap_v_steer_poly_out_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(582, this->_internal_ap_v_steer_poly_out_whl_rad(i), target);
  }

  // optional float AP_V_OVERHANG_REAR_M = 786;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(786, this->_internal_ap_v_overhang_rear_m(), target);
  }

  // repeated float AP_V_BOUNDINGBOX_Y_M = 799;
  for (int i = 0, n = this->_internal_ap_v_boundingbox_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(799, this->_internal_ap_v_boundingbox_y_m(i), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated float AP_V_BOUNDINGBOX_X_M = 1071;
  for (int i = 0, n = this->_internal_ap_v_boundingbox_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1071, this->_internal_ap_v_boundingbox_x_m(i), target);
  }

  // repeated float AP_V_STEER_POLY_CTR_WHL_RAD = 1090;
  for (int i = 0, n = this->_internal_ap_v_steer_poly_ctr_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1090, this->_internal_ap_v_steer_poly_ctr_whl_rad(i), target);
  }

  // repeated float AP_V_RL_WHEEL_SHAPE_X_M = 1331;
  for (int i = 0, n = this->_internal_ap_v_rl_wheel_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1331, this->_internal_ap_v_rl_wheel_shape_x_m(i), target);
  }

  // optional float AP_V_WHEELBASE_M = 1387;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1387, this->_internal_ap_v_wheelbase_m(), target);
  }

  // repeated float AP_V_STEER_LOOKUP_ST_WHL_RAD = 1390;
  for (int i = 0, n = this->_internal_ap_v_steer_lookup_st_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1390, this->_internal_ap_v_steer_lookup_st_whl_rad(i), target);
  }

  // optional float AP_V_WIDTH_M = 1463;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1463, this->_internal_ap_v_width_m(), target);
  }

  // optional float AP_V_TYRE_CIRCUMFERENCE_FRONT_M = 1586;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1586, this->_internal_ap_v_tyre_circumference_front_m(), target);
  }

  // repeated float AP_V_RIGHT_MIRROR_SHAPE_X_M = 1689;
  for (int i = 0, n = this->_internal_ap_v_right_mirror_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1689, this->_internal_ap_v_right_mirror_shape_x_m(i), target);
  }

  // optional float AP_V_STEER_ANG_TO_YAW_ANG_NU = 1748;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1748, this->_internal_ap_v_steer_ang_to_yaw_ang_nu(), target);
  }

  // repeated float AP_V_FL_WHEEL_SHAPE_X_M = 1899;
  for (int i = 0, n = this->_internal_ap_v_fl_wheel_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1899, this->_internal_ap_v_fl_wheel_shape_x_m(i), target);
  }

  // repeated float AP_V_HITCH_SHAPE_X_M = 1908;
  for (int i = 0, n = this->_internal_ap_v_hitch_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1908, this->_internal_ap_v_hitch_shape_x_m(i), target);
  }

  // repeated float AP_V_STANDARD_SHAPE_X_M = 2018;
  for (int i = 0, n = this->_internal_ap_v_standard_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2018, this->_internal_ap_v_standard_shape_x_m(i), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // repeated float AP_V_STEER_LOOKUP_CTR_WHL_RAD = 2201;
  for (int i = 0, n = this->_internal_ap_v_steer_lookup_ctr_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2201, this->_internal_ap_v_steer_lookup_ctr_whl_rad(i), target);
  }

  // optional float AP_V_MAX_STEER_ANG_VEL_RADPS = 2299;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2299, this->_internal_ap_v_max_steer_ang_vel_radps(), target);
  }

  // repeated float AP_V_RR_WHEEL_SHAPE_Y_M = 2398;
  for (int i = 0, n = this->_internal_ap_v_rr_wheel_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2398, this->_internal_ap_v_rr_wheel_shape_y_m(i), target);
  }

  // repeated float AP_V_STEER_LOOKUP_IN_WHL_RAD = 2399;
  for (int i = 0, n = this->_internal_ap_v_steer_lookup_in_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2399, this->_internal_ap_v_steer_lookup_in_whl_rad(i), target);
  }

  // optional float AP_V_TRACK_FRONT_M = 2405;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2405, this->_internal_ap_v_track_front_m(), target);
  }

  // optional float AP_V_MAX_INFL_DIST_M = 2458;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2458, this->_internal_ap_v_max_infl_dist_m(), target);
  }

  // repeated float AP_V_LEFT_MIRROR_SHAPE_Y_M = 2512;
  for (int i = 0, n = this->_internal_ap_v_left_mirror_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2512, this->_internal_ap_v_left_mirror_shape_y_m(i), target);
  }

  // repeated float AP_V_STEER_POLY_IN_WHL_RAD = 2516;
  for (int i = 0, n = this->_internal_ap_v_steer_poly_in_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2516, this->_internal_ap_v_steer_poly_in_whl_rad(i), target);
  }

  // optional uint32 AP_V_NUM_BOUNDING_PTS = 2644;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2644, this->_internal_ap_v_num_bounding_pts(), target);
  }

  // repeated float AP_V_FR_WHEEL_SHAPE_Y_M = 2822;
  for (int i = 0, n = this->_internal_ap_v_fr_wheel_shape_y_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2822, this->_internal_ap_v_fr_wheel_shape_y_m(i), target);
  }

  // optional float AP_V_COMF_STEER_ANG_VEL_RADPS = 2964;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2964, this->_internal_ap_v_comf_steer_ang_vel_radps(), target);
  }

  // repeated float AP_V_FR_WHEEL_SHAPE_X_M = 3126;
  for (int i = 0, n = this->_internal_ap_v_fr_wheel_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3126, this->_internal_ap_v_fr_wheel_shape_x_m(i), target);
  }

  // optional uint32 AP_V_NUM_STANDARD_SHAPE_PTS = 3477;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3477, this->_internal_ap_v_num_standard_shape_pts(), target);
  }

  // optional float AP_V_STEER_RATIO_NU = 3492;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3492, this->_internal_ap_v_steer_ratio_nu(), target);
  }

  // optional float AP_V_LENGTH_M = 3529;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3529, this->_internal_ap_v_length_m(), target);
  }

  // optional uint32 AP_V_MIRROR_SHAPE_SIZE_NU = 3546;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3546, this->_internal_ap_v_mirror_shape_size_nu(), target);
  }

  // optional float AP_V_TYRE_CIRCUMFERENCE_REAR_M = 3570;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3570, this->_internal_ap_v_tyre_circumference_rear_m(), target);
  }

  // optional uint32 AP_V_HITCH_SHAPE_SIZE_NU = 3596;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3596, this->_internal_ap_v_hitch_shape_size_nu(), target);
  }

  // repeated float AP_V_RR_WHEEL_SHAPE_X_M = 3694;
  for (int i = 0, n = this->_internal_ap_v_rr_wheel_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3694, this->_internal_ap_v_rr_wheel_shape_x_m(i), target);
  }

  // repeated float AP_V_STEER_LOOKUP_OUT_WHL_RAD = 3741;
  for (int i = 0, n = this->_internal_ap_v_steer_lookup_out_whl_rad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3741, this->_internal_ap_v_steer_lookup_out_whl_rad(i), target);
  }

  // repeated float AP_V_LEFT_MIRROR_SHAPE_X_M = 3808;
  for (int i = 0, n = this->_internal_ap_v_left_mirror_shape_x_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3808, this->_internal_ap_v_left_mirror_shape_x_m(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.vehicle_params.Vehicle_Params)
  return target;
}

size_t Vehicle_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.vehicle_params.Vehicle_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float AP_V_HITCH_SHAPE_Y_M = 68;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_hitch_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_hitch_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_FL_WHEEL_SHAPE_Y_M = 91;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_fl_wheel_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_fl_wheel_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STANDARD_SHAPE_Y_M = 210;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_standard_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_standard_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_RIGHT_MIRROR_SHAPE_Y_M = 425;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_right_mirror_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_right_mirror_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_RL_WHEEL_SHAPE_Y_M = 515;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_rl_wheel_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_rl_wheel_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STEER_POLY_OUT_WHL_RAD = 582;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_steer_poly_out_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_steer_poly_out_whl_rad_size());
    total_size += data_size;
  }

  // repeated float AP_V_BOUNDINGBOX_Y_M = 799;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_boundingbox_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_boundingbox_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_BOUNDINGBOX_X_M = 1071;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_boundingbox_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_boundingbox_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STEER_POLY_CTR_WHL_RAD = 1090;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_steer_poly_ctr_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_steer_poly_ctr_whl_rad_size());
    total_size += data_size;
  }

  // repeated float AP_V_RL_WHEEL_SHAPE_X_M = 1331;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_rl_wheel_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_rl_wheel_shape_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STEER_LOOKUP_ST_WHL_RAD = 1390;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_steer_lookup_st_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_steer_lookup_st_whl_rad_size());
    total_size += data_size;
  }

  // repeated float AP_V_RIGHT_MIRROR_SHAPE_X_M = 1689;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_right_mirror_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_right_mirror_shape_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_FL_WHEEL_SHAPE_X_M = 1899;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_fl_wheel_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_fl_wheel_shape_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_HITCH_SHAPE_X_M = 1908;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_hitch_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_hitch_shape_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STANDARD_SHAPE_X_M = 2018;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_standard_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_standard_shape_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STEER_LOOKUP_CTR_WHL_RAD = 2201;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_steer_lookup_ctr_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_steer_lookup_ctr_whl_rad_size());
    total_size += data_size;
  }

  // repeated float AP_V_RR_WHEEL_SHAPE_Y_M = 2398;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_rr_wheel_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_rr_wheel_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STEER_LOOKUP_IN_WHL_RAD = 2399;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_steer_lookup_in_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_steer_lookup_in_whl_rad_size());
    total_size += data_size;
  }

  // repeated float AP_V_LEFT_MIRROR_SHAPE_Y_M = 2512;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_left_mirror_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_left_mirror_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STEER_POLY_IN_WHL_RAD = 2516;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_steer_poly_in_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_steer_poly_in_whl_rad_size());
    total_size += data_size;
  }

  // repeated float AP_V_FR_WHEEL_SHAPE_Y_M = 2822;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_fr_wheel_shape_y_m_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_fr_wheel_shape_y_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_FR_WHEEL_SHAPE_X_M = 3126;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_fr_wheel_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_fr_wheel_shape_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_RR_WHEEL_SHAPE_X_M = 3694;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_rr_wheel_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_rr_wheel_shape_x_m_size());
    total_size += data_size;
  }

  // repeated float AP_V_STEER_LOOKUP_OUT_WHL_RAD = 3741;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_steer_lookup_out_whl_rad_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_steer_lookup_out_whl_rad_size());
    total_size += data_size;
  }

  // repeated float AP_V_LEFT_MIRROR_SHAPE_X_M = 3808;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ap_v_left_mirror_shape_x_m_size());
    size_t data_size = 4UL * count;
    total_size += 3 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ap_v_left_mirror_shape_x_m_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float AP_V_TRACK_REAR_M = 299;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional uint32 AP_V_WHEEL_SHAPE_SIZE_NU = 427;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_wheel_shape_size_nu());
    }

    // optional uint32 AP_V_WHEEL_NUMBER_OF_TEETH_NU = 440;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_wheel_number_of_teeth_nu());
    }

    // optional float AP_V_OVERHANG_REAR_M = 786;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_V_WHEELBASE_M = 1387;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_V_WIDTH_M = 1463;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_V_TYRE_CIRCUMFERENCE_FRONT_M = 1586;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_V_STEER_ANG_TO_YAW_ANG_NU = 1748;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float AP_V_MAX_STEER_ANG_VEL_RADPS = 2299;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional float AP_V_TRACK_FRONT_M = 2405;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 4;
    }

    // optional float AP_V_MAX_INFL_DIST_M = 2458;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3 + 4;
    }

    // optional uint32 AP_V_NUM_BOUNDING_PTS = 2644;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_num_bounding_pts());
    }

    // optional float AP_V_COMF_STEER_ANG_VEL_RADPS = 2964;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional uint32 AP_V_NUM_STANDARD_SHAPE_PTS = 3477;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_num_standard_shape_pts());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional float AP_V_STEER_RATIO_NU = 3492;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float AP_V_LENGTH_M = 3529;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional uint32 AP_V_MIRROR_SHAPE_SIZE_NU = 3546;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_mirror_shape_size_nu());
    }

    // optional float AP_V_TYRE_CIRCUMFERENCE_REAR_M = 3570;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional uint32 AP_V_HITCH_SHAPE_SIZE_NU = 3596;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ap_v_hitch_shape_size_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.vehicle_params.Vehicle_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.vehicle_params.Vehicle_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.vehicle_params.Vehicle_Params)
    MergeFrom(*source);
  }
}

void Vehicle_Params::MergeFrom(const Vehicle_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.vehicle_params.Vehicle_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ap_v_hitch_shape_y_m_.MergeFrom(from.ap_v_hitch_shape_y_m_);
  ap_v_fl_wheel_shape_y_m_.MergeFrom(from.ap_v_fl_wheel_shape_y_m_);
  ap_v_standard_shape_y_m_.MergeFrom(from.ap_v_standard_shape_y_m_);
  ap_v_right_mirror_shape_y_m_.MergeFrom(from.ap_v_right_mirror_shape_y_m_);
  ap_v_rl_wheel_shape_y_m_.MergeFrom(from.ap_v_rl_wheel_shape_y_m_);
  ap_v_steer_poly_out_whl_rad_.MergeFrom(from.ap_v_steer_poly_out_whl_rad_);
  ap_v_boundingbox_y_m_.MergeFrom(from.ap_v_boundingbox_y_m_);
  ap_v_boundingbox_x_m_.MergeFrom(from.ap_v_boundingbox_x_m_);
  ap_v_steer_poly_ctr_whl_rad_.MergeFrom(from.ap_v_steer_poly_ctr_whl_rad_);
  ap_v_rl_wheel_shape_x_m_.MergeFrom(from.ap_v_rl_wheel_shape_x_m_);
  ap_v_steer_lookup_st_whl_rad_.MergeFrom(from.ap_v_steer_lookup_st_whl_rad_);
  ap_v_right_mirror_shape_x_m_.MergeFrom(from.ap_v_right_mirror_shape_x_m_);
  ap_v_fl_wheel_shape_x_m_.MergeFrom(from.ap_v_fl_wheel_shape_x_m_);
  ap_v_hitch_shape_x_m_.MergeFrom(from.ap_v_hitch_shape_x_m_);
  ap_v_standard_shape_x_m_.MergeFrom(from.ap_v_standard_shape_x_m_);
  ap_v_steer_lookup_ctr_whl_rad_.MergeFrom(from.ap_v_steer_lookup_ctr_whl_rad_);
  ap_v_rr_wheel_shape_y_m_.MergeFrom(from.ap_v_rr_wheel_shape_y_m_);
  ap_v_steer_lookup_in_whl_rad_.MergeFrom(from.ap_v_steer_lookup_in_whl_rad_);
  ap_v_left_mirror_shape_y_m_.MergeFrom(from.ap_v_left_mirror_shape_y_m_);
  ap_v_steer_poly_in_whl_rad_.MergeFrom(from.ap_v_steer_poly_in_whl_rad_);
  ap_v_fr_wheel_shape_y_m_.MergeFrom(from.ap_v_fr_wheel_shape_y_m_);
  ap_v_fr_wheel_shape_x_m_.MergeFrom(from.ap_v_fr_wheel_shape_x_m_);
  ap_v_rr_wheel_shape_x_m_.MergeFrom(from.ap_v_rr_wheel_shape_x_m_);
  ap_v_steer_lookup_out_whl_rad_.MergeFrom(from.ap_v_steer_lookup_out_whl_rad_);
  ap_v_left_mirror_shape_x_m_.MergeFrom(from.ap_v_left_mirror_shape_x_m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      ap_v_track_rear_m_ = from.ap_v_track_rear_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_v_wheel_shape_size_nu_ = from.ap_v_wheel_shape_size_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_v_wheel_number_of_teeth_nu_ = from.ap_v_wheel_number_of_teeth_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_v_overhang_rear_m_ = from.ap_v_overhang_rear_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_v_wheelbase_m_ = from.ap_v_wheelbase_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_v_width_m_ = from.ap_v_width_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_v_tyre_circumference_front_m_ = from.ap_v_tyre_circumference_front_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_v_steer_ang_to_yaw_ang_nu_ = from.ap_v_steer_ang_to_yaw_ang_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_v_max_steer_ang_vel_radps_ = from.ap_v_max_steer_ang_vel_radps_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_v_track_front_m_ = from.ap_v_track_front_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_v_max_infl_dist_m_ = from.ap_v_max_infl_dist_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_v_num_bounding_pts_ = from.ap_v_num_bounding_pts_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_v_comf_steer_ang_vel_radps_ = from.ap_v_comf_steer_ang_vel_radps_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_v_num_standard_shape_pts_ = from.ap_v_num_standard_shape_pts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ap_v_steer_ratio_nu_ = from.ap_v_steer_ratio_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      ap_v_length_m_ = from.ap_v_length_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      ap_v_mirror_shape_size_nu_ = from.ap_v_mirror_shape_size_nu_;
    }
    if (cached_has_bits & 0x00080000u) {
      ap_v_tyre_circumference_rear_m_ = from.ap_v_tyre_circumference_rear_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      ap_v_hitch_shape_size_nu_ = from.ap_v_hitch_shape_size_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.vehicle_params.Vehicle_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_Params::CopyFrom(const Vehicle_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.vehicle_params.Vehicle_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_Params::IsInitialized() const {
  return true;
}

void Vehicle_Params::InternalSwap(Vehicle_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ap_v_hitch_shape_y_m_.InternalSwap(&other->ap_v_hitch_shape_y_m_);
  ap_v_fl_wheel_shape_y_m_.InternalSwap(&other->ap_v_fl_wheel_shape_y_m_);
  ap_v_standard_shape_y_m_.InternalSwap(&other->ap_v_standard_shape_y_m_);
  ap_v_right_mirror_shape_y_m_.InternalSwap(&other->ap_v_right_mirror_shape_y_m_);
  ap_v_rl_wheel_shape_y_m_.InternalSwap(&other->ap_v_rl_wheel_shape_y_m_);
  ap_v_steer_poly_out_whl_rad_.InternalSwap(&other->ap_v_steer_poly_out_whl_rad_);
  ap_v_boundingbox_y_m_.InternalSwap(&other->ap_v_boundingbox_y_m_);
  ap_v_boundingbox_x_m_.InternalSwap(&other->ap_v_boundingbox_x_m_);
  ap_v_steer_poly_ctr_whl_rad_.InternalSwap(&other->ap_v_steer_poly_ctr_whl_rad_);
  ap_v_rl_wheel_shape_x_m_.InternalSwap(&other->ap_v_rl_wheel_shape_x_m_);
  ap_v_steer_lookup_st_whl_rad_.InternalSwap(&other->ap_v_steer_lookup_st_whl_rad_);
  ap_v_right_mirror_shape_x_m_.InternalSwap(&other->ap_v_right_mirror_shape_x_m_);
  ap_v_fl_wheel_shape_x_m_.InternalSwap(&other->ap_v_fl_wheel_shape_x_m_);
  ap_v_hitch_shape_x_m_.InternalSwap(&other->ap_v_hitch_shape_x_m_);
  ap_v_standard_shape_x_m_.InternalSwap(&other->ap_v_standard_shape_x_m_);
  ap_v_steer_lookup_ctr_whl_rad_.InternalSwap(&other->ap_v_steer_lookup_ctr_whl_rad_);
  ap_v_rr_wheel_shape_y_m_.InternalSwap(&other->ap_v_rr_wheel_shape_y_m_);
  ap_v_steer_lookup_in_whl_rad_.InternalSwap(&other->ap_v_steer_lookup_in_whl_rad_);
  ap_v_left_mirror_shape_y_m_.InternalSwap(&other->ap_v_left_mirror_shape_y_m_);
  ap_v_steer_poly_in_whl_rad_.InternalSwap(&other->ap_v_steer_poly_in_whl_rad_);
  ap_v_fr_wheel_shape_y_m_.InternalSwap(&other->ap_v_fr_wheel_shape_y_m_);
  ap_v_fr_wheel_shape_x_m_.InternalSwap(&other->ap_v_fr_wheel_shape_x_m_);
  ap_v_rr_wheel_shape_x_m_.InternalSwap(&other->ap_v_rr_wheel_shape_x_m_);
  ap_v_steer_lookup_out_whl_rad_.InternalSwap(&other->ap_v_steer_lookup_out_whl_rad_);
  ap_v_left_mirror_shape_x_m_.InternalSwap(&other->ap_v_left_mirror_shape_x_m_);
  swap(ssigheader_, other->ssigheader_);
  swap(ap_v_track_rear_m_, other->ap_v_track_rear_m_);
  swap(ap_v_wheel_shape_size_nu_, other->ap_v_wheel_shape_size_nu_);
  swap(ap_v_wheel_number_of_teeth_nu_, other->ap_v_wheel_number_of_teeth_nu_);
  swap(ap_v_overhang_rear_m_, other->ap_v_overhang_rear_m_);
  swap(ap_v_wheelbase_m_, other->ap_v_wheelbase_m_);
  swap(ap_v_width_m_, other->ap_v_width_m_);
  swap(ap_v_tyre_circumference_front_m_, other->ap_v_tyre_circumference_front_m_);
  swap(ap_v_steer_ang_to_yaw_ang_nu_, other->ap_v_steer_ang_to_yaw_ang_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ap_v_max_steer_ang_vel_radps_, other->ap_v_max_steer_ang_vel_radps_);
  swap(ap_v_track_front_m_, other->ap_v_track_front_m_);
  swap(ap_v_max_infl_dist_m_, other->ap_v_max_infl_dist_m_);
  swap(ap_v_num_bounding_pts_, other->ap_v_num_bounding_pts_);
  swap(ap_v_comf_steer_ang_vel_radps_, other->ap_v_comf_steer_ang_vel_radps_);
  swap(ap_v_num_standard_shape_pts_, other->ap_v_num_standard_shape_pts_);
  swap(ap_v_steer_ratio_nu_, other->ap_v_steer_ratio_nu_);
  swap(ap_v_length_m_, other->ap_v_length_m_);
  swap(ap_v_mirror_shape_size_nu_, other->ap_v_mirror_shape_size_nu_);
  swap(ap_v_tyre_circumference_rear_m_, other->ap_v_tyre_circumference_rear_m_);
  swap(ap_v_hitch_shape_size_nu_, other->ap_v_hitch_shape_size_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle_Params_array_port::InitAsDefaultInstance() {
}
class Vehicle_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_Params_array_port>()._has_bits_);
};

Vehicle_Params_array_port::Vehicle_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
}
Vehicle_Params_array_port::Vehicle_Params_array_port(const Vehicle_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
}

void Vehicle_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vehicle_Params_array_port_ap_5fcommon_2fvehicle_5fparams_2eproto.base);
}

Vehicle_Params_array_port::~Vehicle_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  SharedDtor();
}

void Vehicle_Params_array_port::SharedDtor() {
}

void Vehicle_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_Params_array_port& Vehicle_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_Params_array_port_ap_5fcommon_2fvehicle_5fparams_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.ap_common.vehicle_params.Vehicle_Params data = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<2650>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.ap_common.vehicle_params.Vehicle_Params data = 331;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(331, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  return target;
}

size_t Vehicle_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.ap_common.vehicle_params.Vehicle_Params data = 331;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
    MergeFrom(*source);
  }
}

void Vehicle_Params_array_port::MergeFrom(const Vehicle_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void Vehicle_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_Params_array_port::CopyFrom(const Vehicle_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ap_common.vehicle_params.Vehicle_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_Params_array_port::IsInitialized() const {
  return true;
}

void Vehicle_Params_array_port::InternalSwap(Vehicle_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vehicle_params
}  // namespace ap_common
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::ap_common::vehicle_params::Vehicle_Params* Arena::CreateMaybeMessage< ::pb::ap_common::vehicle_params::Vehicle_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::vehicle_params::Vehicle_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ap_common::vehicle_params::Vehicle_Params_array_port* Arena::CreateMaybeMessage< ::pb::ap_common::vehicle_params::Vehicle_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ap_common::vehicle_params::Vehicle_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
