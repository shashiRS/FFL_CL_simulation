// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lsm_vedodo/odo_debug_port.proto

#include "lsm_vedodo/odo_debug_port.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto;
namespace pb {
namespace lsm_vedodo {
namespace odo_debug_port {
class OdoDebugPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdoDebugPort> _instance;
} _OdoDebugPort_default_instance_;
class OdoDebugPort_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdoDebugPort_array_port> _instance;
} _OdoDebugPort_array_port_default_instance_;
}  // namespace odo_debug_port
}  // namespace lsm_vedodo
}  // namespace pb
static void InitDefaultsscc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lsm_vedodo::odo_debug_port::_OdoDebugPort_default_instance_;
    new (ptr) ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_OdoDebugPort_array_port_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::lsm_vedodo::odo_debug_port::_OdoDebugPort_array_port_default_instance_;
    new (ptr) ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdoDebugPort_array_port_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OdoDebugPort_array_port_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto}, {
      &scc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, steeringwheelangleoffset_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, steeringwheelangleoffsetcalibrated_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, yawrateoffset_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, yawrateoffsetcalibrated_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, distanceperstepra_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, distanceperstepfa_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, distancefa_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, distancera_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, yawangleperstepackermann_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, yawangleperstepyawrate_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, yawangleperstepstandstillsteer_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, yawangleperstepwhldistfront_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, yawangleperstepwhldistrear_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, odoaccelbywheel_mps2_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, distanceperstepwheel_m_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, debugint_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, debugfloat_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, steeranglefl_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, steeranglefr_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, steeranglectr_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimyawrateflrr_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimvelrearaxleflrr_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimyawratefrrl_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimvelrearaxlefrrl_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimyawratefrrr_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimvelrearaxlefrrr_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimyawrateflfr_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimvelrearaxleflfr_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimyawraterlrr_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimvelrearaxlerlrr_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimyawrateflrl_radps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, estimvelrearaxleflrl_mps_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, ticsincrement_4_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort, drivingdirectiongear_nu_),
  15,
  0,
  2,
  14,
  27,
  29,
  16,
  19,
  17,
  21,
  20,
  4,
  28,
  9,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  11,
  12,
  18,
  30,
  31,
  22,
  3,
  1,
  23,
  25,
  8,
  13,
  26,
  24,
  10,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 41, sizeof(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort)},
  { 77, 83, sizeof(::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::lsm_vedodo::odo_debug_port::_OdoDebugPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::lsm_vedodo::odo_debug_port::_OdoDebugPort_array_port_default_instance_),
};

const char descriptor_table_protodef_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037lsm_vedodo/odo_debug_port.proto\022\034pb.ls"
  "m_vedodo.odo_debug_port\032\027eco/signal_head"
  "er.proto\"\271\t\n\014OdoDebugPort\022\030\n\017uiVersionNu"
  "mber\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb.ec"
  "o.signal_header.SignalHeader\022$\n\034steering"
  "WheelAngleOffset_rad\030# \001(\002\022/\n&steeringWh"
  "eelAngleOffsetCalibrated_rad\030\250\020 \001(\002\022\034\n\023y"
  "awRateOffset_radps\030\311\033 \001(\002\022&\n\035yawRateOffs"
  "etCalibrated_radps\030\342\035 \001(\002\022\034\n\023distancePer"
  "StepRA_m\030\324\020 \001(\002\022\034\n\023distancePerStepFA_m\030\202"
  "\022 \001(\002\022\025\n\014distanceFA_m\030\201\021 \001(\002\022\025\n\014distance"
  "RA_m\030\327\023 \001(\002\022%\n\034yawAnglePerStepAckermann_"
  "rad\030\370\022 \001(\002\022#\n\032yawAnglePerStepYawRate_rad"
  "\030\313\003 \001(\002\022+\n\"yawAnglePerStepStandstillStee"
  "r_rad\030\335\033 \001(\002\022(\n\037yawAnglePerStepWhlDistFr"
  "ont_rad\030\273\010 \001(\002\022\'\n\036yawAnglePerStepWhlDist"
  "Rear_rad\030\310\005 \001(\002\022\035\n\024odoAccelByWheel_mps2\030"
  "\314\006 \001(\002\022\037\n\026distancePerStepWheel_m\030\304\005 \003(\002\022"
  "\021\n\010debugInt\030\316\t \003(\021\022\023\n\ndebugFloat\030\371\017 \003(\002\022"
  "\025\n\014steerAngleFL\030\206\013 \001(\002\022\025\n\014steerAngleFR\030\371"
  "\014 \001(\002\022\026\n\rsteerAngleCTR\030\322\021 \001(\002\022\037\n\026estimYa"
  "wRateFLRR_radps\030\327\036 \001(\002\022!\n\030estimVelRearAx"
  "leFLRR_mps\030\350\036 \001(\002\022\037\n\026estimYawRateFRRL_ra"
  "dps\030\255\024 \001(\002\022!\n\030estimVelRearAxleFRRL_mps\030\351"
  "\002 \001(\002\022\037\n\026estimYawRateFRRR_radps\030\336\037 \001(\002\022!"
  "\n\030estimVelRearAxleFRRR_mps\030\233\025 \001(\002\022\037\n\026est"
  "imYawRateFLFR_radps\030\216\033 \001(\002\022!\n\030estimVelRe"
  "arAxleFLFR_mps\030\315\006 \001(\002\022\037\n\026estimYawRateRLR"
  "R_radps\030\364\r \001(\002\022!\n\030estimVelRearAxleRLRR_m"
  "ps\030\261\033 \001(\002\022\037\n\026estimYawRateFLRL_radps\030\244\025 \001"
  "(\002\022!\n\030estimVelRearAxleFLRL_mps\030\232\t \001(\002\022\033\n"
  "\022ticsIncrement_4_nu\030\260\010 \003(\021\022 \n\027drivingDir"
  "ectionGear_nu\030\325\004 \001(\021\"T\n\027OdoDebugPort_arr"
  "ay_port\0229\n\004data\030\233\005 \003(\0132*.pb.lsm_vedodo.o"
  "do_debug_port.OdoDebugPort"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_sccs[2] = {
  &scc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.base,
  &scc_info_OdoDebugPort_array_port_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_once;
static bool descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto = {
  &descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_initialized, descriptor_table_protodef_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto, "lsm_vedodo/odo_debug_port.proto", 1386,
  &descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_once, descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_sccs, descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto::offsets,
  file_level_metadata_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto, 2, file_level_enum_descriptors_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto, file_level_service_descriptors_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto), true);
namespace pb {
namespace lsm_vedodo {
namespace odo_debug_port {

// ===================================================================

void OdoDebugPort::InitAsDefaultInstance() {
  ::pb::lsm_vedodo::odo_debug_port::_OdoDebugPort_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class OdoDebugPort::_Internal {
 public:
  using HasBits = decltype(std::declval<OdoDebugPort>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const OdoDebugPort* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steeringwheelangleoffset_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steeringwheelangleoffsetcalibrated_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_yawrateoffset_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_yawrateoffsetcalibrated_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_distanceperstepra_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_distanceperstepfa_m(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_distancefa_m(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_distancera_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_yawangleperstepackermann_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_yawangleperstepyawrate_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_yawangleperstepstandstillsteer_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_yawangleperstepwhldistfront_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_yawangleperstepwhldistrear_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_odoaccelbywheel_mps2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steeranglefl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steeranglefr(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steeranglectr(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_estimyawrateflrr_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_estimvelrearaxleflrr_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_estimyawratefrrl_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_estimvelrearaxlefrrl_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_estimyawratefrrr_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_estimvelrearaxlefrrr_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_estimyawrateflfr_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_estimvelrearaxleflfr_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_estimyawraterlrr_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_estimvelrearaxlerlrr_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_estimyawrateflrl_radps(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_estimvelrearaxleflrl_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_drivingdirectiongear_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
OdoDebugPort::_Internal::ssigheader(const OdoDebugPort* msg) {
  return *msg->ssigheader_;
}
void OdoDebugPort::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OdoDebugPort::OdoDebugPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
}
OdoDebugPort::OdoDebugPort(const OdoDebugPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      distanceperstepwheel_m_(from.distanceperstepwheel_m_),
      ticsincrement_4_nu_(from.ticsincrement_4_nu_),
      debugint_(from.debugint_),
      debugfloat_(from.debugfloat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&estimyawratefrrr_radps_, &from.estimyawratefrrr_radps_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimvelrearaxleflrr_mps_) -
    reinterpret_cast<char*>(&estimyawratefrrr_radps_)) + sizeof(estimvelrearaxleflrr_mps_));
  // @@protoc_insertion_point(copy_constructor:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
}

void OdoDebugPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estimvelrearaxleflrr_mps_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(estimvelrearaxleflrr_mps_));
}

OdoDebugPort::~OdoDebugPort() {
  // @@protoc_insertion_point(destructor:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  SharedDtor();
}

void OdoDebugPort::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void OdoDebugPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdoDebugPort& OdoDebugPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdoDebugPort_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void OdoDebugPort::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distanceperstepwheel_m_.Clear();
  ticsincrement_4_nu_.Clear();
  debugint_.Clear();
  debugfloat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&estimyawratefrrr_radps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&odoaccelbywheel_mps2_) -
        reinterpret_cast<char*>(&estimyawratefrrr_radps_)) + sizeof(odoaccelbywheel_mps2_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&estimvelrearaxleflfr_mps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uiversionnumber_) -
        reinterpret_cast<char*>(&estimvelrearaxleflfr_mps_)) + sizeof(uiversionnumber_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&distanceperstepra_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimvelrearaxlefrrr_mps_) -
        reinterpret_cast<char*>(&distanceperstepra_m_)) + sizeof(estimvelrearaxlefrrr_mps_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&estimyawrateflrl_radps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimvelrearaxleflrr_mps_) -
        reinterpret_cast<char*>(&estimyawrateflrl_radps_)) + sizeof(estimvelrearaxleflrr_mps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OdoDebugPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float steeringWheelAngleOffset_rad = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_steeringwheelangleoffset_rad(&has_bits);
          steeringwheelangleoffset_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimVelRearAxleFRRL_mps = 361;
      case 361:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_estimvelrearaxlefrrl_mps(&has_bits);
          estimvelrearaxlefrrl_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawAnglePerStepYawRate_rad = 459;
      case 459:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_yawangleperstepyawrate_rad(&has_bits);
          yawangleperstepyawrate_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional sint32 drivingDirectionGear_nu = 597;
      case 597:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_drivingdirectiongear_nu(&has_bits);
          drivingdirectiongear_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float distancePerStepWheel_m = 708;
      case 708:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_distanceperstepwheel_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<5669>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_distanceperstepwheel_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float yawAnglePerStepWhlDistRear_rad = 712;
      case 712:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_yawangleperstepwhldistrear_rad(&has_bits);
          yawangleperstepwhldistrear_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float odoAccelByWheel_mps2 = 844;
      case 844:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_odoaccelbywheel_mps2(&has_bits);
          odoaccelbywheel_mps2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimVelRearAxleFLFR_mps = 845;
      case 845:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_estimvelrearaxleflfr_mps(&has_bits);
          estimvelrearaxleflfr_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 ticsIncrement_4_nu = 1072;
      case 1072:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ticsincrement_4_nu(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8576>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_ticsincrement_4_nu(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float yawAnglePerStepWhlDistFront_rad = 1083;
      case 1083:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_yawangleperstepwhldistfront_rad(&has_bits);
          yawangleperstepwhldistfront_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimVelRearAxleFLRL_mps = 1178;
      case 1178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_estimvelrearaxleflrl_mps(&has_bits);
          estimvelrearaxleflrl_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated sint32 debugInt = 1230;
      case 1230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9840>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_debugint(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steerAngleFL = 1414;
      case 1414:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_steeranglefl(&has_bits);
          steeranglefl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steerAngleFR = 1657;
      case 1657:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_steeranglefr(&has_bits);
          steeranglefr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimYawRateRLRR_radps = 1780;
      case 1780:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_estimyawraterlrr_radps(&has_bits);
          estimyawraterlrr_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float debugFloat = 2041;
      case 2041:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_debugfloat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16333>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_debugfloat(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float steeringWheelAngleOffsetCalibrated_rad = 2088;
      case 2088:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_steeringwheelangleoffsetcalibrated_rad(&has_bits);
          steeringwheelangleoffsetcalibrated_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distancePerStepRA_m = 2132;
      case 2132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_distanceperstepra_m(&has_bits);
          distanceperstepra_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distanceFA_m = 2177;
      case 2177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_distancefa_m(&has_bits);
          distancefa_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steerAngleCTR = 2258;
      case 2258:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_steeranglectr(&has_bits);
          steeranglectr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distancePerStepFA_m = 2306;
      case 2306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_distanceperstepfa_m(&has_bits);
          distanceperstepfa_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawAnglePerStepAckermann_rad = 2424;
      case 2424:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_yawangleperstepackermann_rad(&has_bits);
          yawangleperstepackermann_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distanceRA_m = 2519;
      case 2519:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_distancera_m(&has_bits);
          distancera_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimYawRateFRRL_radps = 2605;
      case 2605:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_estimyawratefrrl_radps(&has_bits);
          estimyawratefrrl_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimVelRearAxleFRRR_mps = 2715;
      case 2715:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_estimvelrearaxlefrrr_mps(&has_bits);
          estimvelrearaxlefrrr_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimYawRateFLRL_radps = 2724;
      case 2724:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_estimyawrateflrl_radps(&has_bits);
          estimyawrateflrl_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimYawRateFLFR_radps = 3470;
      case 3470:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_estimyawrateflfr_radps(&has_bits);
          estimyawrateflfr_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimVelRearAxleRLRR_mps = 3505;
      case 3505:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_estimvelrearaxlerlrr_mps(&has_bits);
          estimvelrearaxlerlrr_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawRateOffset_radps = 3529;
      case 3529:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_yawrateoffset_radps(&has_bits);
          yawrateoffset_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawAnglePerStepStandstillSteer_rad = 3549;
      case 3549:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_yawangleperstepstandstillsteer_rad(&has_bits);
          yawangleperstepstandstillsteer_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yawRateOffsetCalibrated_radps = 3810;
      case 3810:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_yawrateoffsetcalibrated_radps(&has_bits);
          yawrateoffsetcalibrated_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimYawRateFLRR_radps = 3927;
      case 3927:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_estimyawrateflrr_radps(&has_bits);
          estimyawrateflrr_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimVelRearAxleFLRR_mps = 3944;
      case 3944:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_estimvelrearaxleflrr_mps(&has_bits);
          estimvelrearaxleflrr_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float estimYawRateFRRR_radps = 4062;
      case 4062:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_estimyawratefrrr_radps(&has_bits);
          estimyawratefrrr_radps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdoDebugPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float steeringWheelAngleOffset_rad = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_steeringwheelangleoffset_rad(), target);
  }

  // optional float estimVelRearAxleFRRL_mps = 361;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(361, this->_internal_estimvelrearaxlefrrl_mps(), target);
  }

  // optional float yawAnglePerStepYawRate_rad = 459;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(459, this->_internal_yawangleperstepyawrate_rad(), target);
  }

  // optional sint32 drivingDirectionGear_nu = 597;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(597, this->_internal_drivingdirectiongear_nu(), target);
  }

  // repeated float distancePerStepWheel_m = 708;
  for (int i = 0, n = this->_internal_distanceperstepwheel_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(708, this->_internal_distanceperstepwheel_m(i), target);
  }

  // optional float yawAnglePerStepWhlDistRear_rad = 712;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(712, this->_internal_yawangleperstepwhldistrear_rad(), target);
  }

  // optional float odoAccelByWheel_mps2 = 844;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(844, this->_internal_odoaccelbywheel_mps2(), target);
  }

  // optional float estimVelRearAxleFLFR_mps = 845;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(845, this->_internal_estimvelrearaxleflfr_mps(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // repeated sint32 ticsIncrement_4_nu = 1072;
  for (int i = 0, n = this->_internal_ticsincrement_4_nu_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1072, this->_internal_ticsincrement_4_nu(i), target);
  }

  // optional float yawAnglePerStepWhlDistFront_rad = 1083;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1083, this->_internal_yawangleperstepwhldistfront_rad(), target);
  }

  // optional float estimVelRearAxleFLRL_mps = 1178;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1178, this->_internal_estimvelrearaxleflrl_mps(), target);
  }

  // repeated sint32 debugInt = 1230;
  for (int i = 0, n = this->_internal_debugint_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1230, this->_internal_debugint(i), target);
  }

  // optional float steerAngleFL = 1414;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1414, this->_internal_steeranglefl(), target);
  }

  // optional float steerAngleFR = 1657;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1657, this->_internal_steeranglefr(), target);
  }

  // optional float estimYawRateRLRR_radps = 1780;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1780, this->_internal_estimyawraterlrr_radps(), target);
  }

  // repeated float debugFloat = 2041;
  for (int i = 0, n = this->_internal_debugfloat_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2041, this->_internal_debugfloat(i), target);
  }

  // optional float steeringWheelAngleOffsetCalibrated_rad = 2088;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2088, this->_internal_steeringwheelangleoffsetcalibrated_rad(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float distancePerStepRA_m = 2132;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2132, this->_internal_distanceperstepra_m(), target);
  }

  // optional float distanceFA_m = 2177;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2177, this->_internal_distancefa_m(), target);
  }

  // optional float steerAngleCTR = 2258;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2258, this->_internal_steeranglectr(), target);
  }

  // optional float distancePerStepFA_m = 2306;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2306, this->_internal_distanceperstepfa_m(), target);
  }

  // optional float yawAnglePerStepAckermann_rad = 2424;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2424, this->_internal_yawangleperstepackermann_rad(), target);
  }

  // optional float distanceRA_m = 2519;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2519, this->_internal_distancera_m(), target);
  }

  // optional float estimYawRateFRRL_radps = 2605;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2605, this->_internal_estimyawratefrrl_radps(), target);
  }

  // optional float estimVelRearAxleFRRR_mps = 2715;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2715, this->_internal_estimvelrearaxlefrrr_mps(), target);
  }

  // optional float estimYawRateFLRL_radps = 2724;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2724, this->_internal_estimyawrateflrl_radps(), target);
  }

  // optional float estimYawRateFLFR_radps = 3470;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3470, this->_internal_estimyawrateflfr_radps(), target);
  }

  // optional float estimVelRearAxleRLRR_mps = 3505;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3505, this->_internal_estimvelrearaxlerlrr_mps(), target);
  }

  // optional float yawRateOffset_radps = 3529;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3529, this->_internal_yawrateoffset_radps(), target);
  }

  // optional float yawAnglePerStepStandstillSteer_rad = 3549;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3549, this->_internal_yawangleperstepstandstillsteer_rad(), target);
  }

  // optional float yawRateOffsetCalibrated_radps = 3810;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3810, this->_internal_yawrateoffsetcalibrated_radps(), target);
  }

  // optional float estimYawRateFLRR_radps = 3927;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3927, this->_internal_estimyawrateflrr_radps(), target);
  }

  // optional float estimVelRearAxleFLRR_mps = 3944;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3944, this->_internal_estimvelrearaxleflrr_mps(), target);
  }

  // optional float estimYawRateFRRR_radps = 4062;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4062, this->_internal_estimyawratefrrr_radps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  return target;
}

size_t OdoDebugPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float distancePerStepWheel_m = 708;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distanceperstepwheel_m_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_distanceperstepwheel_m_size());
    total_size += data_size;
  }

  // repeated sint32 ticsIncrement_4_nu = 1072;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->ticsincrement_4_nu_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ticsincrement_4_nu_size());
    total_size += data_size;
  }

  // repeated sint32 debugInt = 1230;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->debugint_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugint_size());
    total_size += data_size;
  }

  // repeated float debugFloat = 2041;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_debugfloat_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_debugfloat_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float estimYawRateFRRR_radps = 4062;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 + 4;
    }

    // optional float steeringWheelAngleOffset_rad = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float estimVelRearAxleFRRL_mps = 361;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float yawAnglePerStepYawRate_rad = 459;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional sint32 drivingDirectionGear_nu = 597;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_drivingdirectiongear_nu());
    }

    // optional float yawAnglePerStepWhlDistRear_rad = 712;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float odoAccelByWheel_mps2 = 844;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float estimVelRearAxleFLFR_mps = 845;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float yawAnglePerStepWhlDistFront_rad = 1083;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float estimVelRearAxleFLRL_mps = 1178;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float steerAngleFL = 1414;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float steerAngleFR = 1657;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float estimYawRateRLRR_radps = 1780;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float steeringWheelAngleOffsetCalibrated_rad = 2088;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float distancePerStepRA_m = 2132;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3 + 4;
    }

    // optional float distanceFA_m = 2177;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 + 4;
    }

    // optional float steerAngleCTR = 2258;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float distancePerStepFA_m = 2306;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float yawAnglePerStepAckermann_rad = 2424;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float distanceRA_m = 2519;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional float estimYawRateFRRL_radps = 2605;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 + 4;
    }

    // optional float estimVelRearAxleFRRR_mps = 2715;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float estimYawRateFLRL_radps = 2724;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 + 4;
    }

    // optional float estimYawRateFLFR_radps = 3470;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 + 4;
    }

    // optional float estimVelRearAxleRLRR_mps = 3505;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional float yawRateOffset_radps = 3529;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 + 4;
    }

    // optional float yawAnglePerStepStandstillSteer_rad = 3549;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 + 4;
    }

    // optional float yawRateOffsetCalibrated_radps = 3810;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional float estimYawRateFLRR_radps = 3927;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 + 4;
    }

    // optional float estimVelRearAxleFLRR_mps = 3944;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdoDebugPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  const OdoDebugPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdoDebugPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
    MergeFrom(*source);
  }
}

void OdoDebugPort::MergeFrom(const OdoDebugPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distanceperstepwheel_m_.MergeFrom(from.distanceperstepwheel_m_);
  ticsincrement_4_nu_.MergeFrom(from.ticsincrement_4_nu_);
  debugint_.MergeFrom(from.debugint_);
  debugfloat_.MergeFrom(from.debugfloat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      estimyawratefrrr_radps_ = from.estimyawratefrrr_radps_;
    }
    if (cached_has_bits & 0x00000004u) {
      steeringwheelangleoffset_rad_ = from.steeringwheelangleoffset_rad_;
    }
    if (cached_has_bits & 0x00000008u) {
      estimvelrearaxlefrrl_mps_ = from.estimvelrearaxlefrrl_mps_;
    }
    if (cached_has_bits & 0x00000010u) {
      yawangleperstepyawrate_rad_ = from.yawangleperstepyawrate_rad_;
    }
    if (cached_has_bits & 0x00000020u) {
      drivingdirectiongear_nu_ = from.drivingdirectiongear_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      yawangleperstepwhldistrear_rad_ = from.yawangleperstepwhldistrear_rad_;
    }
    if (cached_has_bits & 0x00000080u) {
      odoaccelbywheel_mps2_ = from.odoaccelbywheel_mps2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      estimvelrearaxleflfr_mps_ = from.estimvelrearaxleflfr_mps_;
    }
    if (cached_has_bits & 0x00000200u) {
      yawangleperstepwhldistfront_rad_ = from.yawangleperstepwhldistfront_rad_;
    }
    if (cached_has_bits & 0x00000400u) {
      estimvelrearaxleflrl_mps_ = from.estimvelrearaxleflrl_mps_;
    }
    if (cached_has_bits & 0x00000800u) {
      steeranglefl_ = from.steeranglefl_;
    }
    if (cached_has_bits & 0x00001000u) {
      steeranglefr_ = from.steeranglefr_;
    }
    if (cached_has_bits & 0x00002000u) {
      estimyawraterlrr_radps_ = from.estimyawraterlrr_radps_;
    }
    if (cached_has_bits & 0x00004000u) {
      steeringwheelangleoffsetcalibrated_rad_ = from.steeringwheelangleoffsetcalibrated_rad_;
    }
    if (cached_has_bits & 0x00008000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      distanceperstepra_m_ = from.distanceperstepra_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      distancefa_m_ = from.distancefa_m_;
    }
    if (cached_has_bits & 0x00040000u) {
      steeranglectr_ = from.steeranglectr_;
    }
    if (cached_has_bits & 0x00080000u) {
      distanceperstepfa_m_ = from.distanceperstepfa_m_;
    }
    if (cached_has_bits & 0x00100000u) {
      yawangleperstepackermann_rad_ = from.yawangleperstepackermann_rad_;
    }
    if (cached_has_bits & 0x00200000u) {
      distancera_m_ = from.distancera_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      estimyawratefrrl_radps_ = from.estimyawratefrrl_radps_;
    }
    if (cached_has_bits & 0x00800000u) {
      estimvelrearaxlefrrr_mps_ = from.estimvelrearaxlefrrr_mps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      estimyawrateflrl_radps_ = from.estimyawrateflrl_radps_;
    }
    if (cached_has_bits & 0x02000000u) {
      estimyawrateflfr_radps_ = from.estimyawrateflfr_radps_;
    }
    if (cached_has_bits & 0x04000000u) {
      estimvelrearaxlerlrr_mps_ = from.estimvelrearaxlerlrr_mps_;
    }
    if (cached_has_bits & 0x08000000u) {
      yawrateoffset_radps_ = from.yawrateoffset_radps_;
    }
    if (cached_has_bits & 0x10000000u) {
      yawangleperstepstandstillsteer_rad_ = from.yawangleperstepstandstillsteer_rad_;
    }
    if (cached_has_bits & 0x20000000u) {
      yawrateoffsetcalibrated_radps_ = from.yawrateoffsetcalibrated_radps_;
    }
    if (cached_has_bits & 0x40000000u) {
      estimyawrateflrr_radps_ = from.estimyawrateflrr_radps_;
    }
    if (cached_has_bits & 0x80000000u) {
      estimvelrearaxleflrr_mps_ = from.estimvelrearaxleflrr_mps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OdoDebugPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdoDebugPort::CopyFrom(const OdoDebugPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdoDebugPort::IsInitialized() const {
  return true;
}

void OdoDebugPort::InternalSwap(OdoDebugPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  distanceperstepwheel_m_.InternalSwap(&other->distanceperstepwheel_m_);
  ticsincrement_4_nu_.InternalSwap(&other->ticsincrement_4_nu_);
  debugint_.InternalSwap(&other->debugint_);
  debugfloat_.InternalSwap(&other->debugfloat_);
  swap(ssigheader_, other->ssigheader_);
  swap(estimyawratefrrr_radps_, other->estimyawratefrrr_radps_);
  swap(steeringwheelangleoffset_rad_, other->steeringwheelangleoffset_rad_);
  swap(estimvelrearaxlefrrl_mps_, other->estimvelrearaxlefrrl_mps_);
  swap(yawangleperstepyawrate_rad_, other->yawangleperstepyawrate_rad_);
  swap(drivingdirectiongear_nu_, other->drivingdirectiongear_nu_);
  swap(yawangleperstepwhldistrear_rad_, other->yawangleperstepwhldistrear_rad_);
  swap(odoaccelbywheel_mps2_, other->odoaccelbywheel_mps2_);
  swap(estimvelrearaxleflfr_mps_, other->estimvelrearaxleflfr_mps_);
  swap(yawangleperstepwhldistfront_rad_, other->yawangleperstepwhldistfront_rad_);
  swap(estimvelrearaxleflrl_mps_, other->estimvelrearaxleflrl_mps_);
  swap(steeranglefl_, other->steeranglefl_);
  swap(steeranglefr_, other->steeranglefr_);
  swap(estimyawraterlrr_radps_, other->estimyawraterlrr_radps_);
  swap(steeringwheelangleoffsetcalibrated_rad_, other->steeringwheelangleoffsetcalibrated_rad_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(distanceperstepra_m_, other->distanceperstepra_m_);
  swap(distancefa_m_, other->distancefa_m_);
  swap(steeranglectr_, other->steeranglectr_);
  swap(distanceperstepfa_m_, other->distanceperstepfa_m_);
  swap(yawangleperstepackermann_rad_, other->yawangleperstepackermann_rad_);
  swap(distancera_m_, other->distancera_m_);
  swap(estimyawratefrrl_radps_, other->estimyawratefrrl_radps_);
  swap(estimvelrearaxlefrrr_mps_, other->estimvelrearaxlefrrr_mps_);
  swap(estimyawrateflrl_radps_, other->estimyawrateflrl_radps_);
  swap(estimyawrateflfr_radps_, other->estimyawrateflfr_radps_);
  swap(estimvelrearaxlerlrr_mps_, other->estimvelrearaxlerlrr_mps_);
  swap(yawrateoffset_radps_, other->yawrateoffset_radps_);
  swap(yawangleperstepstandstillsteer_rad_, other->yawangleperstepstandstillsteer_rad_);
  swap(yawrateoffsetcalibrated_radps_, other->yawrateoffsetcalibrated_radps_);
  swap(estimyawrateflrr_radps_, other->estimyawrateflrr_radps_);
  swap(estimvelrearaxleflrr_mps_, other->estimvelrearaxleflrr_mps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdoDebugPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OdoDebugPort_array_port::InitAsDefaultInstance() {
}
class OdoDebugPort_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<OdoDebugPort_array_port>()._has_bits_);
};

OdoDebugPort_array_port::OdoDebugPort_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
}
OdoDebugPort_array_port::OdoDebugPort_array_port(const OdoDebugPort_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
}

void OdoDebugPort_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdoDebugPort_array_port_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.base);
}

OdoDebugPort_array_port::~OdoDebugPort_array_port() {
  // @@protoc_insertion_point(destructor:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  SharedDtor();
}

void OdoDebugPort_array_port::SharedDtor() {
}

void OdoDebugPort_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdoDebugPort_array_port& OdoDebugPort_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdoDebugPort_array_port_lsm_5fvedodo_2fodo_5fdebug_5fport_2eproto.base);
  return *internal_default_instance();
}


void OdoDebugPort_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OdoDebugPort_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.lsm_vedodo.odo_debug_port.OdoDebugPort data = 667;
      case 667:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<5338>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdoDebugPort_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.lsm_vedodo.odo_debug_port.OdoDebugPort data = 667;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(667, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  return target;
}

size_t OdoDebugPort_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.lsm_vedodo.odo_debug_port.OdoDebugPort data = 667;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdoDebugPort_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const OdoDebugPort_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdoDebugPort_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
    MergeFrom(*source);
  }
}

void OdoDebugPort_array_port::MergeFrom(const OdoDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void OdoDebugPort_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdoDebugPort_array_port::CopyFrom(const OdoDebugPort_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.lsm_vedodo.odo_debug_port.OdoDebugPort_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdoDebugPort_array_port::IsInitialized() const {
  return true;
}

void OdoDebugPort_array_port::InternalSwap(OdoDebugPort_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdoDebugPort_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace odo_debug_port
}  // namespace lsm_vedodo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort* Arena::CreateMaybeMessage< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port* Arena::CreateMaybeMessage< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::lsm_vedodo::odo_debug_port::OdoDebugPort_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
