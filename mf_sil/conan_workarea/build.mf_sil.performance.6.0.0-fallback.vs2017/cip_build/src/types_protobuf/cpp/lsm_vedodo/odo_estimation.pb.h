// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lsm_vedodo/odo_estimation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2fodo_5festimation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2fodo_5festimation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
#include "lsm_vedodo/motion_state.pb.h"
#include "lsm_vedodo/direction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lsm_5fvedodo_2fodo_5festimation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lsm_5fvedodo_2fodo_5festimation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto;
namespace pb {
namespace lsm_vedodo {
namespace odo_estimation {
class OdoEstimation;
class OdoEstimationDefaultTypeInternal;
extern OdoEstimationDefaultTypeInternal _OdoEstimation_default_instance_;
class OdoEstimation_array_port;
class OdoEstimation_array_portDefaultTypeInternal;
extern OdoEstimation_array_portDefaultTypeInternal _OdoEstimation_array_port_default_instance_;
}  // namespace odo_estimation
}  // namespace lsm_vedodo
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::lsm_vedodo::odo_estimation::OdoEstimation* Arena::CreateMaybeMessage<::pb::lsm_vedodo::odo_estimation::OdoEstimation>(Arena*);
template<> ::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port* Arena::CreateMaybeMessage<::pb::lsm_vedodo::odo_estimation::OdoEstimation_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace lsm_vedodo {
namespace odo_estimation {

// ===================================================================

class OdoEstimation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.lsm_vedodo.odo_estimation.OdoEstimation) */ {
 public:
  OdoEstimation();
  virtual ~OdoEstimation();

  OdoEstimation(const OdoEstimation& from);
  OdoEstimation(OdoEstimation&& from) noexcept
    : OdoEstimation() {
    *this = ::std::move(from);
  }

  inline OdoEstimation& operator=(const OdoEstimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdoEstimation& operator=(OdoEstimation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdoEstimation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdoEstimation* internal_default_instance() {
    return reinterpret_cast<const OdoEstimation*>(
               &_OdoEstimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OdoEstimation& a, OdoEstimation& b) {
    a.Swap(&b);
  }
  inline void Swap(OdoEstimation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdoEstimation* New() const final {
    return CreateMaybeMessage<OdoEstimation>(nullptr);
  }

  OdoEstimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdoEstimation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdoEstimation& from);
  void MergeFrom(const OdoEstimation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdoEstimation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.lsm_vedodo.odo_estimation.OdoEstimation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto);
    return ::descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kVerticalAccelerationMps2FieldNumber = 3944,
    kPitchRateRadpsFieldNumber = 110,
    kYxPositionVarM2FieldNumber = 134,
    kSideSlipAngleRadFieldNumber = 148,
    kYVelocityMpsFieldNumber = 192,
    kYawRateRadpsFieldNumber = 349,
    kMotionStatusNuFieldNumber = 395,
    kXPositionMFieldNumber = 415,
    kYawAngleRadFieldNumber = 566,
    kLongiAccelerationMps2FieldNumber = 589,
    kWheelAngleFRRadFieldNumber = 726,
    kSteerAngRearAxleRadFieldNumber = 1108,
    kPitchAngleVarRad2FieldNumber = 1160,
    kPitchAngleRadFieldNumber = 1165,
    kSuspRollRadFieldNumber = 1440,
    kXVelocityMpsFieldNumber = 1443,
    kLateralVelocityMpsFieldNumber = 1539,
    kDrivenDistanceMFieldNumber = 1548,
    kYPositionVarM2FieldNumber = 1601,
    kXyPositionVarM2FieldNumber = 1630,
    kLateralAccelerationMps2FieldNumber = 1730,
    kRollRateRadpsFieldNumber = 1892,
    kYawAngleVarRad2FieldNumber = 2084,
    kUiVersionNumberFieldNumber = 2124,
    kXPositionVarM2FieldNumber = 2237,
    kWheelAngleFLRadFieldNumber = 2340,
    kYPositionMFieldNumber = 2518,
    kSteerAngFrontAxleRadFieldNumber = 2578,
    kRollAngleRadFieldNumber = 2755,
    kLongiVelocityMpsFieldNumber = 3083,
    kSuspPitchRadFieldNumber = 3089,
    kSuspHeightMFieldNumber = 3343,
    kRollAngleVarRad2FieldNumber = 3810,
    kDrivingDirectionNuFieldNumber = 1444,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional float verticalAcceleration_mps2 = 3944;
  bool has_verticalacceleration_mps2() const;
  private:
  bool _internal_has_verticalacceleration_mps2() const;
  public:
  void clear_verticalacceleration_mps2();
  float verticalacceleration_mps2() const;
  void set_verticalacceleration_mps2(float value);
  private:
  float _internal_verticalacceleration_mps2() const;
  void _internal_set_verticalacceleration_mps2(float value);
  public:

  // optional float pitchRate_radps = 110;
  bool has_pitchrate_radps() const;
  private:
  bool _internal_has_pitchrate_radps() const;
  public:
  void clear_pitchrate_radps();
  float pitchrate_radps() const;
  void set_pitchrate_radps(float value);
  private:
  float _internal_pitchrate_radps() const;
  void _internal_set_pitchrate_radps(float value);
  public:

  // optional float yxPositionVar_m2 = 134;
  bool has_yxpositionvar_m2() const;
  private:
  bool _internal_has_yxpositionvar_m2() const;
  public:
  void clear_yxpositionvar_m2();
  float yxpositionvar_m2() const;
  void set_yxpositionvar_m2(float value);
  private:
  float _internal_yxpositionvar_m2() const;
  void _internal_set_yxpositionvar_m2(float value);
  public:

  // optional float sideSlipAngle_rad = 148;
  bool has_sideslipangle_rad() const;
  private:
  bool _internal_has_sideslipangle_rad() const;
  public:
  void clear_sideslipangle_rad();
  float sideslipangle_rad() const;
  void set_sideslipangle_rad(float value);
  private:
  float _internal_sideslipangle_rad() const;
  void _internal_set_sideslipangle_rad(float value);
  public:

  // optional float yVelocity_mps = 192;
  bool has_yvelocity_mps() const;
  private:
  bool _internal_has_yvelocity_mps() const;
  public:
  void clear_yvelocity_mps();
  float yvelocity_mps() const;
  void set_yvelocity_mps(float value);
  private:
  float _internal_yvelocity_mps() const;
  void _internal_set_yvelocity_mps(float value);
  public:

  // optional float yawRate_radps = 349;
  bool has_yawrate_radps() const;
  private:
  bool _internal_has_yawrate_radps() const;
  public:
  void clear_yawrate_radps();
  float yawrate_radps() const;
  void set_yawrate_radps(float value);
  private:
  float _internal_yawrate_radps() const;
  void _internal_set_yawrate_radps(float value);
  public:

  // optional .pb.lsm_vedodo.motion_state.MotionState motionStatus_nu = 395;
  bool has_motionstatus_nu() const;
  private:
  bool _internal_has_motionstatus_nu() const;
  public:
  void clear_motionstatus_nu();
  ::pb::lsm_vedodo::motion_state::MotionState motionstatus_nu() const;
  void set_motionstatus_nu(::pb::lsm_vedodo::motion_state::MotionState value);
  private:
  ::pb::lsm_vedodo::motion_state::MotionState _internal_motionstatus_nu() const;
  void _internal_set_motionstatus_nu(::pb::lsm_vedodo::motion_state::MotionState value);
  public:

  // optional float xPosition_m = 415;
  bool has_xposition_m() const;
  private:
  bool _internal_has_xposition_m() const;
  public:
  void clear_xposition_m();
  float xposition_m() const;
  void set_xposition_m(float value);
  private:
  float _internal_xposition_m() const;
  void _internal_set_xposition_m(float value);
  public:

  // optional float yawAngle_rad = 566;
  bool has_yawangle_rad() const;
  private:
  bool _internal_has_yawangle_rad() const;
  public:
  void clear_yawangle_rad();
  float yawangle_rad() const;
  void set_yawangle_rad(float value);
  private:
  float _internal_yawangle_rad() const;
  void _internal_set_yawangle_rad(float value);
  public:

  // optional float longiAcceleration_mps2 = 589;
  bool has_longiacceleration_mps2() const;
  private:
  bool _internal_has_longiacceleration_mps2() const;
  public:
  void clear_longiacceleration_mps2();
  float longiacceleration_mps2() const;
  void set_longiacceleration_mps2(float value);
  private:
  float _internal_longiacceleration_mps2() const;
  void _internal_set_longiacceleration_mps2(float value);
  public:

  // optional float wheelAngleFR_rad = 726;
  bool has_wheelanglefr_rad() const;
  private:
  bool _internal_has_wheelanglefr_rad() const;
  public:
  void clear_wheelanglefr_rad();
  float wheelanglefr_rad() const;
  void set_wheelanglefr_rad(float value);
  private:
  float _internal_wheelanglefr_rad() const;
  void _internal_set_wheelanglefr_rad(float value);
  public:

  // optional float steerAngRearAxle_rad = 1108;
  bool has_steerangrearaxle_rad() const;
  private:
  bool _internal_has_steerangrearaxle_rad() const;
  public:
  void clear_steerangrearaxle_rad();
  float steerangrearaxle_rad() const;
  void set_steerangrearaxle_rad(float value);
  private:
  float _internal_steerangrearaxle_rad() const;
  void _internal_set_steerangrearaxle_rad(float value);
  public:

  // optional float pitchAngleVar_rad2 = 1160;
  bool has_pitchanglevar_rad2() const;
  private:
  bool _internal_has_pitchanglevar_rad2() const;
  public:
  void clear_pitchanglevar_rad2();
  float pitchanglevar_rad2() const;
  void set_pitchanglevar_rad2(float value);
  private:
  float _internal_pitchanglevar_rad2() const;
  void _internal_set_pitchanglevar_rad2(float value);
  public:

  // optional float pitchAngle_rad = 1165;
  bool has_pitchangle_rad() const;
  private:
  bool _internal_has_pitchangle_rad() const;
  public:
  void clear_pitchangle_rad();
  float pitchangle_rad() const;
  void set_pitchangle_rad(float value);
  private:
  float _internal_pitchangle_rad() const;
  void _internal_set_pitchangle_rad(float value);
  public:

  // optional float suspRoll_rad = 1440;
  bool has_susproll_rad() const;
  private:
  bool _internal_has_susproll_rad() const;
  public:
  void clear_susproll_rad();
  float susproll_rad() const;
  void set_susproll_rad(float value);
  private:
  float _internal_susproll_rad() const;
  void _internal_set_susproll_rad(float value);
  public:

  // optional float xVelocity_mps = 1443;
  bool has_xvelocity_mps() const;
  private:
  bool _internal_has_xvelocity_mps() const;
  public:
  void clear_xvelocity_mps();
  float xvelocity_mps() const;
  void set_xvelocity_mps(float value);
  private:
  float _internal_xvelocity_mps() const;
  void _internal_set_xvelocity_mps(float value);
  public:

  // optional float lateralVelocity_mps = 1539;
  bool has_lateralvelocity_mps() const;
  private:
  bool _internal_has_lateralvelocity_mps() const;
  public:
  void clear_lateralvelocity_mps();
  float lateralvelocity_mps() const;
  void set_lateralvelocity_mps(float value);
  private:
  float _internal_lateralvelocity_mps() const;
  void _internal_set_lateralvelocity_mps(float value);
  public:

  // optional float drivenDistance_m = 1548;
  bool has_drivendistance_m() const;
  private:
  bool _internal_has_drivendistance_m() const;
  public:
  void clear_drivendistance_m();
  float drivendistance_m() const;
  void set_drivendistance_m(float value);
  private:
  float _internal_drivendistance_m() const;
  void _internal_set_drivendistance_m(float value);
  public:

  // optional float yPositionVar_m2 = 1601;
  bool has_ypositionvar_m2() const;
  private:
  bool _internal_has_ypositionvar_m2() const;
  public:
  void clear_ypositionvar_m2();
  float ypositionvar_m2() const;
  void set_ypositionvar_m2(float value);
  private:
  float _internal_ypositionvar_m2() const;
  void _internal_set_ypositionvar_m2(float value);
  public:

  // optional float xyPositionVar_m2 = 1630;
  bool has_xypositionvar_m2() const;
  private:
  bool _internal_has_xypositionvar_m2() const;
  public:
  void clear_xypositionvar_m2();
  float xypositionvar_m2() const;
  void set_xypositionvar_m2(float value);
  private:
  float _internal_xypositionvar_m2() const;
  void _internal_set_xypositionvar_m2(float value);
  public:

  // optional float lateralAcceleration_mps2 = 1730;
  bool has_lateralacceleration_mps2() const;
  private:
  bool _internal_has_lateralacceleration_mps2() const;
  public:
  void clear_lateralacceleration_mps2();
  float lateralacceleration_mps2() const;
  void set_lateralacceleration_mps2(float value);
  private:
  float _internal_lateralacceleration_mps2() const;
  void _internal_set_lateralacceleration_mps2(float value);
  public:

  // optional float rollRate_radps = 1892;
  bool has_rollrate_radps() const;
  private:
  bool _internal_has_rollrate_radps() const;
  public:
  void clear_rollrate_radps();
  float rollrate_radps() const;
  void set_rollrate_radps(float value);
  private:
  float _internal_rollrate_radps() const;
  void _internal_set_rollrate_radps(float value);
  public:

  // optional float yawAngleVar_rad2 = 2084;
  bool has_yawanglevar_rad2() const;
  private:
  bool _internal_has_yawanglevar_rad2() const;
  public:
  void clear_yawanglevar_rad2();
  float yawanglevar_rad2() const;
  void set_yawanglevar_rad2(float value);
  private:
  float _internal_yawanglevar_rad2() const;
  void _internal_set_yawanglevar_rad2(float value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float xPositionVar_m2 = 2237;
  bool has_xpositionvar_m2() const;
  private:
  bool _internal_has_xpositionvar_m2() const;
  public:
  void clear_xpositionvar_m2();
  float xpositionvar_m2() const;
  void set_xpositionvar_m2(float value);
  private:
  float _internal_xpositionvar_m2() const;
  void _internal_set_xpositionvar_m2(float value);
  public:

  // optional float wheelAngleFL_rad = 2340;
  bool has_wheelanglefl_rad() const;
  private:
  bool _internal_has_wheelanglefl_rad() const;
  public:
  void clear_wheelanglefl_rad();
  float wheelanglefl_rad() const;
  void set_wheelanglefl_rad(float value);
  private:
  float _internal_wheelanglefl_rad() const;
  void _internal_set_wheelanglefl_rad(float value);
  public:

  // optional float yPosition_m = 2518;
  bool has_yposition_m() const;
  private:
  bool _internal_has_yposition_m() const;
  public:
  void clear_yposition_m();
  float yposition_m() const;
  void set_yposition_m(float value);
  private:
  float _internal_yposition_m() const;
  void _internal_set_yposition_m(float value);
  public:

  // optional float steerAngFrontAxle_rad = 2578;
  bool has_steerangfrontaxle_rad() const;
  private:
  bool _internal_has_steerangfrontaxle_rad() const;
  public:
  void clear_steerangfrontaxle_rad();
  float steerangfrontaxle_rad() const;
  void set_steerangfrontaxle_rad(float value);
  private:
  float _internal_steerangfrontaxle_rad() const;
  void _internal_set_steerangfrontaxle_rad(float value);
  public:

  // optional float rollAngle_rad = 2755;
  bool has_rollangle_rad() const;
  private:
  bool _internal_has_rollangle_rad() const;
  public:
  void clear_rollangle_rad();
  float rollangle_rad() const;
  void set_rollangle_rad(float value);
  private:
  float _internal_rollangle_rad() const;
  void _internal_set_rollangle_rad(float value);
  public:

  // optional float longiVelocity_mps = 3083;
  bool has_longivelocity_mps() const;
  private:
  bool _internal_has_longivelocity_mps() const;
  public:
  void clear_longivelocity_mps();
  float longivelocity_mps() const;
  void set_longivelocity_mps(float value);
  private:
  float _internal_longivelocity_mps() const;
  void _internal_set_longivelocity_mps(float value);
  public:

  // optional float suspPitch_rad = 3089;
  bool has_susppitch_rad() const;
  private:
  bool _internal_has_susppitch_rad() const;
  public:
  void clear_susppitch_rad();
  float susppitch_rad() const;
  void set_susppitch_rad(float value);
  private:
  float _internal_susppitch_rad() const;
  void _internal_set_susppitch_rad(float value);
  public:

  // optional float suspHeight_m = 3343;
  bool has_suspheight_m() const;
  private:
  bool _internal_has_suspheight_m() const;
  public:
  void clear_suspheight_m();
  float suspheight_m() const;
  void set_suspheight_m(float value);
  private:
  float _internal_suspheight_m() const;
  void _internal_set_suspheight_m(float value);
  public:

  // optional float rollAngleVar_rad2 = 3810;
  bool has_rollanglevar_rad2() const;
  private:
  bool _internal_has_rollanglevar_rad2() const;
  public:
  void clear_rollanglevar_rad2();
  float rollanglevar_rad2() const;
  void set_rollanglevar_rad2(float value);
  private:
  float _internal_rollanglevar_rad2() const;
  void _internal_set_rollanglevar_rad2(float value);
  public:

  // optional .pb.lsm_vedodo.direction.Direction drivingDirection_nu = 1444;
  bool has_drivingdirection_nu() const;
  private:
  bool _internal_has_drivingdirection_nu() const;
  public:
  void clear_drivingdirection_nu();
  ::pb::lsm_vedodo::direction::Direction drivingdirection_nu() const;
  void set_drivingdirection_nu(::pb::lsm_vedodo::direction::Direction value);
  private:
  ::pb::lsm_vedodo::direction::Direction _internal_drivingdirection_nu() const;
  void _internal_set_drivingdirection_nu(::pb::lsm_vedodo::direction::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:pb.lsm_vedodo.odo_estimation.OdoEstimation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  float verticalacceleration_mps2_;
  float pitchrate_radps_;
  float yxpositionvar_m2_;
  float sideslipangle_rad_;
  float yvelocity_mps_;
  float yawrate_radps_;
  int motionstatus_nu_;
  float xposition_m_;
  float yawangle_rad_;
  float longiacceleration_mps2_;
  float wheelanglefr_rad_;
  float steerangrearaxle_rad_;
  float pitchanglevar_rad2_;
  float pitchangle_rad_;
  float susproll_rad_;
  float xvelocity_mps_;
  float lateralvelocity_mps_;
  float drivendistance_m_;
  float ypositionvar_m2_;
  float xypositionvar_m2_;
  float lateralacceleration_mps2_;
  float rollrate_radps_;
  float yawanglevar_rad2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float xpositionvar_m2_;
  float wheelanglefl_rad_;
  float yposition_m_;
  float steerangfrontaxle_rad_;
  float rollangle_rad_;
  float longivelocity_mps_;
  float susppitch_rad_;
  float suspheight_m_;
  float rollanglevar_rad2_;
  int drivingdirection_nu_;
  friend struct ::TableStruct_lsm_5fvedodo_2fodo_5festimation_2eproto;
};
// -------------------------------------------------------------------

class OdoEstimation_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port) */ {
 public:
  OdoEstimation_array_port();
  virtual ~OdoEstimation_array_port();

  OdoEstimation_array_port(const OdoEstimation_array_port& from);
  OdoEstimation_array_port(OdoEstimation_array_port&& from) noexcept
    : OdoEstimation_array_port() {
    *this = ::std::move(from);
  }

  inline OdoEstimation_array_port& operator=(const OdoEstimation_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdoEstimation_array_port& operator=(OdoEstimation_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdoEstimation_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdoEstimation_array_port* internal_default_instance() {
    return reinterpret_cast<const OdoEstimation_array_port*>(
               &_OdoEstimation_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OdoEstimation_array_port& a, OdoEstimation_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(OdoEstimation_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdoEstimation_array_port* New() const final {
    return CreateMaybeMessage<OdoEstimation_array_port>(nullptr);
  }

  OdoEstimation_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdoEstimation_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdoEstimation_array_port& from);
  void MergeFrom(const OdoEstimation_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdoEstimation_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto);
    return ::descriptor_table_lsm_5fvedodo_2fodo_5festimation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1958,
  };
  // repeated .pb.lsm_vedodo.odo_estimation.OdoEstimation data = 1958;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::lsm_vedodo::odo_estimation::OdoEstimation* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_estimation::OdoEstimation >*
      mutable_data();
  private:
  const ::pb::lsm_vedodo::odo_estimation::OdoEstimation& _internal_data(int index) const;
  ::pb::lsm_vedodo::odo_estimation::OdoEstimation* _internal_add_data();
  public:
  const ::pb::lsm_vedodo::odo_estimation::OdoEstimation& data(int index) const;
  ::pb::lsm_vedodo::odo_estimation::OdoEstimation* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_estimation::OdoEstimation >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_estimation::OdoEstimation > data_;
  friend struct ::TableStruct_lsm_5fvedodo_2fodo_5festimation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OdoEstimation

// optional uint32 uiVersionNumber = 2124;
inline bool OdoEstimation::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void OdoEstimation::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OdoEstimation::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OdoEstimation::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void OdoEstimation::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  uiversionnumber_ = value;
}
inline void OdoEstimation::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool OdoEstimation::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool OdoEstimation::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& OdoEstimation::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& OdoEstimation::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* OdoEstimation::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.lsm_vedodo.odo_estimation.OdoEstimation.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* OdoEstimation::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* OdoEstimation::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.lsm_vedodo.odo_estimation.OdoEstimation.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void OdoEstimation::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.lsm_vedodo.odo_estimation.OdoEstimation.sSigHeader)
}

// optional float longiVelocity_mps = 3083;
inline bool OdoEstimation::_internal_has_longivelocity_mps() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_longivelocity_mps() const {
  return _internal_has_longivelocity_mps();
}
inline void OdoEstimation::clear_longivelocity_mps() {
  longivelocity_mps_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float OdoEstimation::_internal_longivelocity_mps() const {
  return longivelocity_mps_;
}
inline float OdoEstimation::longivelocity_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.longiVelocity_mps)
  return _internal_longivelocity_mps();
}
inline void OdoEstimation::_internal_set_longivelocity_mps(float value) {
  _has_bits_[0] |= 0x40000000u;
  longivelocity_mps_ = value;
}
inline void OdoEstimation::set_longivelocity_mps(float value) {
  _internal_set_longivelocity_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.longiVelocity_mps)
}

// optional float lateralVelocity_mps = 1539;
inline bool OdoEstimation::_internal_has_lateralvelocity_mps() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool OdoEstimation::has_lateralvelocity_mps() const {
  return _internal_has_lateralvelocity_mps();
}
inline void OdoEstimation::clear_lateralvelocity_mps() {
  lateralvelocity_mps_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float OdoEstimation::_internal_lateralvelocity_mps() const {
  return lateralvelocity_mps_;
}
inline float OdoEstimation::lateralvelocity_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.lateralVelocity_mps)
  return _internal_lateralvelocity_mps();
}
inline void OdoEstimation::_internal_set_lateralvelocity_mps(float value) {
  _has_bits_[0] |= 0x00020000u;
  lateralvelocity_mps_ = value;
}
inline void OdoEstimation::set_lateralvelocity_mps(float value) {
  _internal_set_lateralvelocity_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.lateralVelocity_mps)
}

// optional float longiAcceleration_mps2 = 589;
inline bool OdoEstimation::_internal_has_longiacceleration_mps2() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OdoEstimation::has_longiacceleration_mps2() const {
  return _internal_has_longiacceleration_mps2();
}
inline void OdoEstimation::clear_longiacceleration_mps2() {
  longiacceleration_mps2_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float OdoEstimation::_internal_longiacceleration_mps2() const {
  return longiacceleration_mps2_;
}
inline float OdoEstimation::longiacceleration_mps2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.longiAcceleration_mps2)
  return _internal_longiacceleration_mps2();
}
inline void OdoEstimation::_internal_set_longiacceleration_mps2(float value) {
  _has_bits_[0] |= 0x00000400u;
  longiacceleration_mps2_ = value;
}
inline void OdoEstimation::set_longiacceleration_mps2(float value) {
  _internal_set_longiacceleration_mps2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.longiAcceleration_mps2)
}

// optional float lateralAcceleration_mps2 = 1730;
inline bool OdoEstimation::_internal_has_lateralacceleration_mps2() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool OdoEstimation::has_lateralacceleration_mps2() const {
  return _internal_has_lateralacceleration_mps2();
}
inline void OdoEstimation::clear_lateralacceleration_mps2() {
  lateralacceleration_mps2_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float OdoEstimation::_internal_lateralacceleration_mps2() const {
  return lateralacceleration_mps2_;
}
inline float OdoEstimation::lateralacceleration_mps2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.lateralAcceleration_mps2)
  return _internal_lateralacceleration_mps2();
}
inline void OdoEstimation::_internal_set_lateralacceleration_mps2(float value) {
  _has_bits_[0] |= 0x00200000u;
  lateralacceleration_mps2_ = value;
}
inline void OdoEstimation::set_lateralacceleration_mps2(float value) {
  _internal_set_lateralacceleration_mps2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.lateralAcceleration_mps2)
}

// optional float verticalAcceleration_mps2 = 3944;
inline bool OdoEstimation::_internal_has_verticalacceleration_mps2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OdoEstimation::has_verticalacceleration_mps2() const {
  return _internal_has_verticalacceleration_mps2();
}
inline void OdoEstimation::clear_verticalacceleration_mps2() {
  verticalacceleration_mps2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float OdoEstimation::_internal_verticalacceleration_mps2() const {
  return verticalacceleration_mps2_;
}
inline float OdoEstimation::verticalacceleration_mps2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.verticalAcceleration_mps2)
  return _internal_verticalacceleration_mps2();
}
inline void OdoEstimation::_internal_set_verticalacceleration_mps2(float value) {
  _has_bits_[0] |= 0x00000002u;
  verticalacceleration_mps2_ = value;
}
inline void OdoEstimation::set_verticalacceleration_mps2(float value) {
  _internal_set_verticalacceleration_mps2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.verticalAcceleration_mps2)
}

// optional float xPosition_m = 415;
inline bool OdoEstimation::_internal_has_xposition_m() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OdoEstimation::has_xposition_m() const {
  return _internal_has_xposition_m();
}
inline void OdoEstimation::clear_xposition_m() {
  xposition_m_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float OdoEstimation::_internal_xposition_m() const {
  return xposition_m_;
}
inline float OdoEstimation::xposition_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.xPosition_m)
  return _internal_xposition_m();
}
inline void OdoEstimation::_internal_set_xposition_m(float value) {
  _has_bits_[0] |= 0x00000100u;
  xposition_m_ = value;
}
inline void OdoEstimation::set_xposition_m(float value) {
  _internal_set_xposition_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.xPosition_m)
}

// optional float yPosition_m = 2518;
inline bool OdoEstimation::_internal_has_yposition_m() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_yposition_m() const {
  return _internal_has_yposition_m();
}
inline void OdoEstimation::clear_yposition_m() {
  yposition_m_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float OdoEstimation::_internal_yposition_m() const {
  return yposition_m_;
}
inline float OdoEstimation::yposition_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.yPosition_m)
  return _internal_yposition_m();
}
inline void OdoEstimation::_internal_set_yposition_m(float value) {
  _has_bits_[0] |= 0x08000000u;
  yposition_m_ = value;
}
inline void OdoEstimation::set_yposition_m(float value) {
  _internal_set_yposition_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.yPosition_m)
}

// optional float xVelocity_mps = 1443;
inline bool OdoEstimation::_internal_has_xvelocity_mps() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool OdoEstimation::has_xvelocity_mps() const {
  return _internal_has_xvelocity_mps();
}
inline void OdoEstimation::clear_xvelocity_mps() {
  xvelocity_mps_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float OdoEstimation::_internal_xvelocity_mps() const {
  return xvelocity_mps_;
}
inline float OdoEstimation::xvelocity_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.xVelocity_mps)
  return _internal_xvelocity_mps();
}
inline void OdoEstimation::_internal_set_xvelocity_mps(float value) {
  _has_bits_[0] |= 0x00010000u;
  xvelocity_mps_ = value;
}
inline void OdoEstimation::set_xvelocity_mps(float value) {
  _internal_set_xvelocity_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.xVelocity_mps)
}

// optional float yVelocity_mps = 192;
inline bool OdoEstimation::_internal_has_yvelocity_mps() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OdoEstimation::has_yvelocity_mps() const {
  return _internal_has_yvelocity_mps();
}
inline void OdoEstimation::clear_yvelocity_mps() {
  yvelocity_mps_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float OdoEstimation::_internal_yvelocity_mps() const {
  return yvelocity_mps_;
}
inline float OdoEstimation::yvelocity_mps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.yVelocity_mps)
  return _internal_yvelocity_mps();
}
inline void OdoEstimation::_internal_set_yvelocity_mps(float value) {
  _has_bits_[0] |= 0x00000020u;
  yvelocity_mps_ = value;
}
inline void OdoEstimation::set_yvelocity_mps(float value) {
  _internal_set_yvelocity_mps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.yVelocity_mps)
}

// optional float xPositionVar_m2 = 2237;
inline bool OdoEstimation::_internal_has_xpositionvar_m2() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_xpositionvar_m2() const {
  return _internal_has_xpositionvar_m2();
}
inline void OdoEstimation::clear_xpositionvar_m2() {
  xpositionvar_m2_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float OdoEstimation::_internal_xpositionvar_m2() const {
  return xpositionvar_m2_;
}
inline float OdoEstimation::xpositionvar_m2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.xPositionVar_m2)
  return _internal_xpositionvar_m2();
}
inline void OdoEstimation::_internal_set_xpositionvar_m2(float value) {
  _has_bits_[0] |= 0x02000000u;
  xpositionvar_m2_ = value;
}
inline void OdoEstimation::set_xpositionvar_m2(float value) {
  _internal_set_xpositionvar_m2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.xPositionVar_m2)
}

// optional float yPositionVar_m2 = 1601;
inline bool OdoEstimation::_internal_has_ypositionvar_m2() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool OdoEstimation::has_ypositionvar_m2() const {
  return _internal_has_ypositionvar_m2();
}
inline void OdoEstimation::clear_ypositionvar_m2() {
  ypositionvar_m2_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float OdoEstimation::_internal_ypositionvar_m2() const {
  return ypositionvar_m2_;
}
inline float OdoEstimation::ypositionvar_m2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.yPositionVar_m2)
  return _internal_ypositionvar_m2();
}
inline void OdoEstimation::_internal_set_ypositionvar_m2(float value) {
  _has_bits_[0] |= 0x00080000u;
  ypositionvar_m2_ = value;
}
inline void OdoEstimation::set_ypositionvar_m2(float value) {
  _internal_set_ypositionvar_m2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.yPositionVar_m2)
}

// optional float xyPositionVar_m2 = 1630;
inline bool OdoEstimation::_internal_has_xypositionvar_m2() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool OdoEstimation::has_xypositionvar_m2() const {
  return _internal_has_xypositionvar_m2();
}
inline void OdoEstimation::clear_xypositionvar_m2() {
  xypositionvar_m2_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float OdoEstimation::_internal_xypositionvar_m2() const {
  return xypositionvar_m2_;
}
inline float OdoEstimation::xypositionvar_m2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.xyPositionVar_m2)
  return _internal_xypositionvar_m2();
}
inline void OdoEstimation::_internal_set_xypositionvar_m2(float value) {
  _has_bits_[0] |= 0x00100000u;
  xypositionvar_m2_ = value;
}
inline void OdoEstimation::set_xypositionvar_m2(float value) {
  _internal_set_xypositionvar_m2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.xyPositionVar_m2)
}

// optional float yxPositionVar_m2 = 134;
inline bool OdoEstimation::_internal_has_yxpositionvar_m2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OdoEstimation::has_yxpositionvar_m2() const {
  return _internal_has_yxpositionvar_m2();
}
inline void OdoEstimation::clear_yxpositionvar_m2() {
  yxpositionvar_m2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float OdoEstimation::_internal_yxpositionvar_m2() const {
  return yxpositionvar_m2_;
}
inline float OdoEstimation::yxpositionvar_m2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.yxPositionVar_m2)
  return _internal_yxpositionvar_m2();
}
inline void OdoEstimation::_internal_set_yxpositionvar_m2(float value) {
  _has_bits_[0] |= 0x00000008u;
  yxpositionvar_m2_ = value;
}
inline void OdoEstimation::set_yxpositionvar_m2(float value) {
  _internal_set_yxpositionvar_m2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.yxPositionVar_m2)
}

// optional float rollAngle_rad = 2755;
inline bool OdoEstimation::_internal_has_rollangle_rad() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_rollangle_rad() const {
  return _internal_has_rollangle_rad();
}
inline void OdoEstimation::clear_rollangle_rad() {
  rollangle_rad_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float OdoEstimation::_internal_rollangle_rad() const {
  return rollangle_rad_;
}
inline float OdoEstimation::rollangle_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.rollAngle_rad)
  return _internal_rollangle_rad();
}
inline void OdoEstimation::_internal_set_rollangle_rad(float value) {
  _has_bits_[0] |= 0x20000000u;
  rollangle_rad_ = value;
}
inline void OdoEstimation::set_rollangle_rad(float value) {
  _internal_set_rollangle_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.rollAngle_rad)
}

// optional float pitchAngle_rad = 1165;
inline bool OdoEstimation::_internal_has_pitchangle_rad() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool OdoEstimation::has_pitchangle_rad() const {
  return _internal_has_pitchangle_rad();
}
inline void OdoEstimation::clear_pitchangle_rad() {
  pitchangle_rad_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float OdoEstimation::_internal_pitchangle_rad() const {
  return pitchangle_rad_;
}
inline float OdoEstimation::pitchangle_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.pitchAngle_rad)
  return _internal_pitchangle_rad();
}
inline void OdoEstimation::_internal_set_pitchangle_rad(float value) {
  _has_bits_[0] |= 0x00004000u;
  pitchangle_rad_ = value;
}
inline void OdoEstimation::set_pitchangle_rad(float value) {
  _internal_set_pitchangle_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.pitchAngle_rad)
}

// optional float yawAngle_rad = 566;
inline bool OdoEstimation::_internal_has_yawangle_rad() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OdoEstimation::has_yawangle_rad() const {
  return _internal_has_yawangle_rad();
}
inline void OdoEstimation::clear_yawangle_rad() {
  yawangle_rad_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float OdoEstimation::_internal_yawangle_rad() const {
  return yawangle_rad_;
}
inline float OdoEstimation::yawangle_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.yawAngle_rad)
  return _internal_yawangle_rad();
}
inline void OdoEstimation::_internal_set_yawangle_rad(float value) {
  _has_bits_[0] |= 0x00000200u;
  yawangle_rad_ = value;
}
inline void OdoEstimation::set_yawangle_rad(float value) {
  _internal_set_yawangle_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.yawAngle_rad)
}

// optional float rollAngleVar_rad2 = 3810;
inline bool OdoEstimation::_internal_has_rollanglevar_rad2() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool OdoEstimation::has_rollanglevar_rad2() const {
  return _internal_has_rollanglevar_rad2();
}
inline void OdoEstimation::clear_rollanglevar_rad2() {
  rollanglevar_rad2_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float OdoEstimation::_internal_rollanglevar_rad2() const {
  return rollanglevar_rad2_;
}
inline float OdoEstimation::rollanglevar_rad2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.rollAngleVar_rad2)
  return _internal_rollanglevar_rad2();
}
inline void OdoEstimation::_internal_set_rollanglevar_rad2(float value) {
  _has_bits_[1] |= 0x00000002u;
  rollanglevar_rad2_ = value;
}
inline void OdoEstimation::set_rollanglevar_rad2(float value) {
  _internal_set_rollanglevar_rad2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.rollAngleVar_rad2)
}

// optional float pitchAngleVar_rad2 = 1160;
inline bool OdoEstimation::_internal_has_pitchanglevar_rad2() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool OdoEstimation::has_pitchanglevar_rad2() const {
  return _internal_has_pitchanglevar_rad2();
}
inline void OdoEstimation::clear_pitchanglevar_rad2() {
  pitchanglevar_rad2_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float OdoEstimation::_internal_pitchanglevar_rad2() const {
  return pitchanglevar_rad2_;
}
inline float OdoEstimation::pitchanglevar_rad2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.pitchAngleVar_rad2)
  return _internal_pitchanglevar_rad2();
}
inline void OdoEstimation::_internal_set_pitchanglevar_rad2(float value) {
  _has_bits_[0] |= 0x00002000u;
  pitchanglevar_rad2_ = value;
}
inline void OdoEstimation::set_pitchanglevar_rad2(float value) {
  _internal_set_pitchanglevar_rad2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.pitchAngleVar_rad2)
}

// optional float yawAngleVar_rad2 = 2084;
inline bool OdoEstimation::_internal_has_yawanglevar_rad2() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool OdoEstimation::has_yawanglevar_rad2() const {
  return _internal_has_yawanglevar_rad2();
}
inline void OdoEstimation::clear_yawanglevar_rad2() {
  yawanglevar_rad2_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float OdoEstimation::_internal_yawanglevar_rad2() const {
  return yawanglevar_rad2_;
}
inline float OdoEstimation::yawanglevar_rad2() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.yawAngleVar_rad2)
  return _internal_yawanglevar_rad2();
}
inline void OdoEstimation::_internal_set_yawanglevar_rad2(float value) {
  _has_bits_[0] |= 0x00800000u;
  yawanglevar_rad2_ = value;
}
inline void OdoEstimation::set_yawanglevar_rad2(float value) {
  _internal_set_yawanglevar_rad2(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.yawAngleVar_rad2)
}

// optional float rollRate_radps = 1892;
inline bool OdoEstimation::_internal_has_rollrate_radps() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool OdoEstimation::has_rollrate_radps() const {
  return _internal_has_rollrate_radps();
}
inline void OdoEstimation::clear_rollrate_radps() {
  rollrate_radps_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float OdoEstimation::_internal_rollrate_radps() const {
  return rollrate_radps_;
}
inline float OdoEstimation::rollrate_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.rollRate_radps)
  return _internal_rollrate_radps();
}
inline void OdoEstimation::_internal_set_rollrate_radps(float value) {
  _has_bits_[0] |= 0x00400000u;
  rollrate_radps_ = value;
}
inline void OdoEstimation::set_rollrate_radps(float value) {
  _internal_set_rollrate_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.rollRate_radps)
}

// optional float pitchRate_radps = 110;
inline bool OdoEstimation::_internal_has_pitchrate_radps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OdoEstimation::has_pitchrate_radps() const {
  return _internal_has_pitchrate_radps();
}
inline void OdoEstimation::clear_pitchrate_radps() {
  pitchrate_radps_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float OdoEstimation::_internal_pitchrate_radps() const {
  return pitchrate_radps_;
}
inline float OdoEstimation::pitchrate_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.pitchRate_radps)
  return _internal_pitchrate_radps();
}
inline void OdoEstimation::_internal_set_pitchrate_radps(float value) {
  _has_bits_[0] |= 0x00000004u;
  pitchrate_radps_ = value;
}
inline void OdoEstimation::set_pitchrate_radps(float value) {
  _internal_set_pitchrate_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.pitchRate_radps)
}

// optional float yawRate_radps = 349;
inline bool OdoEstimation::_internal_has_yawrate_radps() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OdoEstimation::has_yawrate_radps() const {
  return _internal_has_yawrate_radps();
}
inline void OdoEstimation::clear_yawrate_radps() {
  yawrate_radps_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float OdoEstimation::_internal_yawrate_radps() const {
  return yawrate_radps_;
}
inline float OdoEstimation::yawrate_radps() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.yawRate_radps)
  return _internal_yawrate_radps();
}
inline void OdoEstimation::_internal_set_yawrate_radps(float value) {
  _has_bits_[0] |= 0x00000040u;
  yawrate_radps_ = value;
}
inline void OdoEstimation::set_yawrate_radps(float value) {
  _internal_set_yawrate_radps(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.yawRate_radps)
}

// optional float steerAngFrontAxle_rad = 2578;
inline bool OdoEstimation::_internal_has_steerangfrontaxle_rad() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_steerangfrontaxle_rad() const {
  return _internal_has_steerangfrontaxle_rad();
}
inline void OdoEstimation::clear_steerangfrontaxle_rad() {
  steerangfrontaxle_rad_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float OdoEstimation::_internal_steerangfrontaxle_rad() const {
  return steerangfrontaxle_rad_;
}
inline float OdoEstimation::steerangfrontaxle_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.steerAngFrontAxle_rad)
  return _internal_steerangfrontaxle_rad();
}
inline void OdoEstimation::_internal_set_steerangfrontaxle_rad(float value) {
  _has_bits_[0] |= 0x10000000u;
  steerangfrontaxle_rad_ = value;
}
inline void OdoEstimation::set_steerangfrontaxle_rad(float value) {
  _internal_set_steerangfrontaxle_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.steerAngFrontAxle_rad)
}

// optional float steerAngRearAxle_rad = 1108;
inline bool OdoEstimation::_internal_has_steerangrearaxle_rad() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool OdoEstimation::has_steerangrearaxle_rad() const {
  return _internal_has_steerangrearaxle_rad();
}
inline void OdoEstimation::clear_steerangrearaxle_rad() {
  steerangrearaxle_rad_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float OdoEstimation::_internal_steerangrearaxle_rad() const {
  return steerangrearaxle_rad_;
}
inline float OdoEstimation::steerangrearaxle_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.steerAngRearAxle_rad)
  return _internal_steerangrearaxle_rad();
}
inline void OdoEstimation::_internal_set_steerangrearaxle_rad(float value) {
  _has_bits_[0] |= 0x00001000u;
  steerangrearaxle_rad_ = value;
}
inline void OdoEstimation::set_steerangrearaxle_rad(float value) {
  _internal_set_steerangrearaxle_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.steerAngRearAxle_rad)
}

// optional float wheelAngleFR_rad = 726;
inline bool OdoEstimation::_internal_has_wheelanglefr_rad() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool OdoEstimation::has_wheelanglefr_rad() const {
  return _internal_has_wheelanglefr_rad();
}
inline void OdoEstimation::clear_wheelanglefr_rad() {
  wheelanglefr_rad_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float OdoEstimation::_internal_wheelanglefr_rad() const {
  return wheelanglefr_rad_;
}
inline float OdoEstimation::wheelanglefr_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.wheelAngleFR_rad)
  return _internal_wheelanglefr_rad();
}
inline void OdoEstimation::_internal_set_wheelanglefr_rad(float value) {
  _has_bits_[0] |= 0x00000800u;
  wheelanglefr_rad_ = value;
}
inline void OdoEstimation::set_wheelanglefr_rad(float value) {
  _internal_set_wheelanglefr_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.wheelAngleFR_rad)
}

// optional float wheelAngleFL_rad = 2340;
inline bool OdoEstimation::_internal_has_wheelanglefl_rad() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_wheelanglefl_rad() const {
  return _internal_has_wheelanglefl_rad();
}
inline void OdoEstimation::clear_wheelanglefl_rad() {
  wheelanglefl_rad_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float OdoEstimation::_internal_wheelanglefl_rad() const {
  return wheelanglefl_rad_;
}
inline float OdoEstimation::wheelanglefl_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.wheelAngleFL_rad)
  return _internal_wheelanglefl_rad();
}
inline void OdoEstimation::_internal_set_wheelanglefl_rad(float value) {
  _has_bits_[0] |= 0x04000000u;
  wheelanglefl_rad_ = value;
}
inline void OdoEstimation::set_wheelanglefl_rad(float value) {
  _internal_set_wheelanglefl_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.wheelAngleFL_rad)
}

// optional float sideSlipAngle_rad = 148;
inline bool OdoEstimation::_internal_has_sideslipangle_rad() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OdoEstimation::has_sideslipangle_rad() const {
  return _internal_has_sideslipangle_rad();
}
inline void OdoEstimation::clear_sideslipangle_rad() {
  sideslipangle_rad_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float OdoEstimation::_internal_sideslipangle_rad() const {
  return sideslipangle_rad_;
}
inline float OdoEstimation::sideslipangle_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.sideSlipAngle_rad)
  return _internal_sideslipangle_rad();
}
inline void OdoEstimation::_internal_set_sideslipangle_rad(float value) {
  _has_bits_[0] |= 0x00000010u;
  sideslipangle_rad_ = value;
}
inline void OdoEstimation::set_sideslipangle_rad(float value) {
  _internal_set_sideslipangle_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.sideSlipAngle_rad)
}

// optional float suspPitch_rad = 3089;
inline bool OdoEstimation::_internal_has_susppitch_rad() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool OdoEstimation::has_susppitch_rad() const {
  return _internal_has_susppitch_rad();
}
inline void OdoEstimation::clear_susppitch_rad() {
  susppitch_rad_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float OdoEstimation::_internal_susppitch_rad() const {
  return susppitch_rad_;
}
inline float OdoEstimation::susppitch_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.suspPitch_rad)
  return _internal_susppitch_rad();
}
inline void OdoEstimation::_internal_set_susppitch_rad(float value) {
  _has_bits_[0] |= 0x80000000u;
  susppitch_rad_ = value;
}
inline void OdoEstimation::set_susppitch_rad(float value) {
  _internal_set_susppitch_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.suspPitch_rad)
}

// optional float suspRoll_rad = 1440;
inline bool OdoEstimation::_internal_has_susproll_rad() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool OdoEstimation::has_susproll_rad() const {
  return _internal_has_susproll_rad();
}
inline void OdoEstimation::clear_susproll_rad() {
  susproll_rad_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float OdoEstimation::_internal_susproll_rad() const {
  return susproll_rad_;
}
inline float OdoEstimation::susproll_rad() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.suspRoll_rad)
  return _internal_susproll_rad();
}
inline void OdoEstimation::_internal_set_susproll_rad(float value) {
  _has_bits_[0] |= 0x00008000u;
  susproll_rad_ = value;
}
inline void OdoEstimation::set_susproll_rad(float value) {
  _internal_set_susproll_rad(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.suspRoll_rad)
}

// optional float suspHeight_m = 3343;
inline bool OdoEstimation::_internal_has_suspheight_m() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool OdoEstimation::has_suspheight_m() const {
  return _internal_has_suspheight_m();
}
inline void OdoEstimation::clear_suspheight_m() {
  suspheight_m_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float OdoEstimation::_internal_suspheight_m() const {
  return suspheight_m_;
}
inline float OdoEstimation::suspheight_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.suspHeight_m)
  return _internal_suspheight_m();
}
inline void OdoEstimation::_internal_set_suspheight_m(float value) {
  _has_bits_[1] |= 0x00000001u;
  suspheight_m_ = value;
}
inline void OdoEstimation::set_suspheight_m(float value) {
  _internal_set_suspheight_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.suspHeight_m)
}

// optional float drivenDistance_m = 1548;
inline bool OdoEstimation::_internal_has_drivendistance_m() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool OdoEstimation::has_drivendistance_m() const {
  return _internal_has_drivendistance_m();
}
inline void OdoEstimation::clear_drivendistance_m() {
  drivendistance_m_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float OdoEstimation::_internal_drivendistance_m() const {
  return drivendistance_m_;
}
inline float OdoEstimation::drivendistance_m() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.drivenDistance_m)
  return _internal_drivendistance_m();
}
inline void OdoEstimation::_internal_set_drivendistance_m(float value) {
  _has_bits_[0] |= 0x00040000u;
  drivendistance_m_ = value;
}
inline void OdoEstimation::set_drivendistance_m(float value) {
  _internal_set_drivendistance_m(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.drivenDistance_m)
}

// optional .pb.lsm_vedodo.motion_state.MotionState motionStatus_nu = 395;
inline bool OdoEstimation::_internal_has_motionstatus_nu() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OdoEstimation::has_motionstatus_nu() const {
  return _internal_has_motionstatus_nu();
}
inline void OdoEstimation::clear_motionstatus_nu() {
  motionstatus_nu_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::pb::lsm_vedodo::motion_state::MotionState OdoEstimation::_internal_motionstatus_nu() const {
  return static_cast< ::pb::lsm_vedodo::motion_state::MotionState >(motionstatus_nu_);
}
inline ::pb::lsm_vedodo::motion_state::MotionState OdoEstimation::motionstatus_nu() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.motionStatus_nu)
  return _internal_motionstatus_nu();
}
inline void OdoEstimation::_internal_set_motionstatus_nu(::pb::lsm_vedodo::motion_state::MotionState value) {
  assert(::pb::lsm_vedodo::motion_state::MotionState_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  motionstatus_nu_ = value;
}
inline void OdoEstimation::set_motionstatus_nu(::pb::lsm_vedodo::motion_state::MotionState value) {
  _internal_set_motionstatus_nu(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.motionStatus_nu)
}

// optional .pb.lsm_vedodo.direction.Direction drivingDirection_nu = 1444;
inline bool OdoEstimation::_internal_has_drivingdirection_nu() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool OdoEstimation::has_drivingdirection_nu() const {
  return _internal_has_drivingdirection_nu();
}
inline void OdoEstimation::clear_drivingdirection_nu() {
  drivingdirection_nu_ = -1;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::pb::lsm_vedodo::direction::Direction OdoEstimation::_internal_drivingdirection_nu() const {
  return static_cast< ::pb::lsm_vedodo::direction::Direction >(drivingdirection_nu_);
}
inline ::pb::lsm_vedodo::direction::Direction OdoEstimation::drivingdirection_nu() const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation.drivingDirection_nu)
  return _internal_drivingdirection_nu();
}
inline void OdoEstimation::_internal_set_drivingdirection_nu(::pb::lsm_vedodo::direction::Direction value) {
  assert(::pb::lsm_vedodo::direction::Direction_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  drivingdirection_nu_ = value;
}
inline void OdoEstimation::set_drivingdirection_nu(::pb::lsm_vedodo::direction::Direction value) {
  _internal_set_drivingdirection_nu(value);
  // @@protoc_insertion_point(field_set:pb.lsm_vedodo.odo_estimation.OdoEstimation.drivingDirection_nu)
}

// -------------------------------------------------------------------

// OdoEstimation_array_port

// repeated .pb.lsm_vedodo.odo_estimation.OdoEstimation data = 1958;
inline int OdoEstimation_array_port::_internal_data_size() const {
  return data_.size();
}
inline int OdoEstimation_array_port::data_size() const {
  return _internal_data_size();
}
inline void OdoEstimation_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::lsm_vedodo::odo_estimation::OdoEstimation* OdoEstimation_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_estimation::OdoEstimation >*
OdoEstimation_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port.data)
  return &data_;
}
inline const ::pb::lsm_vedodo::odo_estimation::OdoEstimation& OdoEstimation_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::lsm_vedodo::odo_estimation::OdoEstimation& OdoEstimation_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port.data)
  return _internal_data(index);
}
inline ::pb::lsm_vedodo::odo_estimation::OdoEstimation* OdoEstimation_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::lsm_vedodo::odo_estimation::OdoEstimation* OdoEstimation_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::lsm_vedodo::odo_estimation::OdoEstimation >&
OdoEstimation_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.lsm_vedodo.odo_estimation.OdoEstimation_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace odo_estimation
}  // namespace lsm_vedodo
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lsm_5fvedodo_2fodo_5festimation_2eproto
