// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/fc_mfhmih_params.proto

#include "mf_hmih/fc_mfhmih_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto;
namespace pb {
namespace mf_hmih {
namespace fc_mfhmih_params {
class FC_MFHMIH_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_MFHMIH_Params> _instance;
} _FC_MFHMIH_Params_default_instance_;
class FC_MFHMIH_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_MFHMIH_Params_array_port> _instance;
} _FC_MFHMIH_Params_array_port_default_instance_;
}  // namespace fc_mfhmih_params
}  // namespace mf_hmih
}  // namespace pb
static void InitDefaultsscc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::fc_mfhmih_params::_FC_MFHMIH_Params_default_instance_;
    new (ptr) ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_MFHMIH_Params_array_port_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::fc_mfhmih_params::_FC_MFHMIH_Params_array_port_default_instance_;
    new (ptr) ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MFHMIH_Params_array_port_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_MFHMIH_Params_array_port_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto}, {
      &scc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_obstacle_min_par_hmi_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_obstacle_max_par_hmi_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_obstacle_min_perp_hmi_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_obstacle_max_perp_hmi_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_fwdbwd_slot_dist_max_hmi_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_first_slot_hmi_offset_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_perpar_slot_dist_max_hmi_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_user_def_init_lat_offset_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_user_def_slide_offset_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_user_def_ang_offset_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_user_def_max_ang_par_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_user_def_max_ang_perp_rad_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_user_def_enabled_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_customer_demo_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params, ap_h_explicit_scan_enabled_nu_),
  9,
  0,
  14,
  5,
  4,
  8,
  1,
  16,
  7,
  2,
  15,
  3,
  6,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params)},
  { 39, 45, sizeof(::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::fc_mfhmih_params::_FC_MFHMIH_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::fc_mfhmih_params::_FC_MFHMIH_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036mf_hmih/fc_mfhmih_params.proto\022\033pb.mf_"
  "hmih.fc_mfhmih_params\032\027eco/signal_header"
  ".proto\"\255\005\n\020FC_MFHMIH_Params\022\030\n\017uiVersion"
  "Number\030\314\020 \001(\r\0227\n\nsSigHeader\030\211\010 \001(\0132\".pb."
  "eco.signal_header.SignalHeader\022$\n\033AP_H_O"
  "BSTACLE_MIN_PAR_HMI_M\030\230\032 \001(\002\022$\n\033AP_H_OBS"
  "TACLE_MAX_PAR_HMI_M\030\371\004 \001(\002\022%\n\034AP_H_OBSTA"
  "CLE_MIN_PERP_HMI_M\030\267\003 \001(\002\022%\n\034AP_H_OBSTAC"
  "LE_MAX_PERP_HMI_M\030\203\r \001(\002\022\'\n\037AP_H_FWDBWD_"
  "SLOT_DIST_MAX_HMI_M\030\014 \001(\002\022%\n\034AP_H_FIRST_"
  "SLOT_HMI_OFFSET_M\030\215\037 \001(\002\022(\n\037AP_H_PERPAR_"
  "SLOT_DIST_MAX_HMI_M\030\352\013 \001(\002\022(\n\037AP_H_USER_"
  "DEF_INIT_LAT_OFFSET_M\030\201\003 \001(\002\022%\n\034AP_H_USE"
  "R_DEF_SLIDE_OFFSET_M\030\341\036 \001(\002\022%\n\034AP_H_USER"
  "_DEF_ANG_OFFSET_RAD\030\266\003 \001(\002\022&\n\035AP_H_USER_"
  "DEF_MAX_ANG_PAR_RAD\030\342\010 \001(\002\022\'\n\036AP_H_USER_"
  "DEF_MAX_ANG_PERP_RAD\030\306\023 \001(\002\022!\n\030AP_H_USER"
  "_DEF_ENABLED_NU\030\241\036 \001(\010\022\036\n\025AP_H_CUSTOMER_"
  "DEMO_NU\030\274\016 \001(\010\022&\n\035AP_H_EXPLICIT_SCAN_ENA"
  "BLED_NU\030\256\032 \001(\010\"[\n\033FC_MFHMIH_Params_array"
  "_port\022<\n\004data\030\245\003 \003(\0132-.pb.mf_hmih.fc_mfh"
  "mih_params.FC_MFHMIH_Params"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto.base,
  &scc_info_FC_MFHMIH_Params_array_port_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_once;
static bool descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto = {
  &descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_initialized, descriptor_table_protodef_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto, "mf_hmih/fc_mfhmih_params.proto", 867,
  &descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_once, descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_sccs, descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto::offsets,
  file_level_metadata_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto, 2, file_level_enum_descriptors_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto, file_level_service_descriptors_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto), true);
namespace pb {
namespace mf_hmih {
namespace fc_mfhmih_params {

// ===================================================================

void FC_MFHMIH_Params::InitAsDefaultInstance() {
  ::pb::mf_hmih::fc_mfhmih_params::_FC_MFHMIH_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_MFHMIH_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_MFHMIH_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_MFHMIH_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ap_h_obstacle_min_par_hmi_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ap_h_obstacle_max_par_hmi_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ap_h_obstacle_min_perp_hmi_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ap_h_obstacle_max_perp_hmi_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ap_h_fwdbwd_slot_dist_max_hmi_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ap_h_first_slot_hmi_offset_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ap_h_perpar_slot_dist_max_hmi_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ap_h_user_def_init_lat_offset_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ap_h_user_def_slide_offset_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ap_h_user_def_ang_offset_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ap_h_user_def_max_ang_par_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_h_user_def_max_ang_perp_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ap_h_user_def_enabled_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ap_h_customer_demo_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ap_h_explicit_scan_enabled_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_MFHMIH_Params::_Internal::ssigheader(const FC_MFHMIH_Params* msg) {
  return *msg->ssigheader_;
}
void FC_MFHMIH_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_MFHMIH_Params::FC_MFHMIH_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
}
FC_MFHMIH_Params::FC_MFHMIH_Params(const FC_MFHMIH_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&ap_h_fwdbwd_slot_dist_max_hmi_m_, &from.ap_h_fwdbwd_slot_dist_max_hmi_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_h_first_slot_hmi_offset_m_) -
    reinterpret_cast<char*>(&ap_h_fwdbwd_slot_dist_max_hmi_m_)) + sizeof(ap_h_first_slot_hmi_offset_m_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
}

void FC_MFHMIH_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_h_first_slot_hmi_offset_m_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(ap_h_first_slot_hmi_offset_m_));
}

FC_MFHMIH_Params::~FC_MFHMIH_Params() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  SharedDtor();
}

void FC_MFHMIH_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_MFHMIH_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_MFHMIH_Params& FC_MFHMIH_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_MFHMIH_Params_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_MFHMIH_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ap_h_fwdbwd_slot_dist_max_hmi_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_h_perpar_slot_dist_max_hmi_m_) -
        reinterpret_cast<char*>(&ap_h_fwdbwd_slot_dist_max_hmi_m_)) + sizeof(ap_h_perpar_slot_dist_max_hmi_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ap_h_obstacle_max_perp_hmi_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ap_h_user_def_slide_offset_m_) -
        reinterpret_cast<char*>(&ap_h_obstacle_max_perp_hmi_m_)) + sizeof(ap_h_user_def_slide_offset_m_));
  }
  ap_h_first_slot_hmi_offset_m_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_MFHMIH_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float AP_H_FWDBWD_SLOT_DIST_MAX_HMI_M = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ap_h_fwdbwd_slot_dist_max_hmi_m(&has_bits);
          ap_h_fwdbwd_slot_dist_max_hmi_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_USER_DEF_INIT_LAT_OFFSET_M = 385;
      case 385:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_h_user_def_init_lat_offset_m(&has_bits);
          ap_h_user_def_init_lat_offset_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_USER_DEF_ANG_OFFSET_RAD = 438;
      case 438:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_ap_h_user_def_ang_offset_rad(&has_bits);
          ap_h_user_def_ang_offset_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_OBSTACLE_MIN_PERP_HMI_M = 439;
      case 439:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_ap_h_obstacle_min_perp_hmi_m(&has_bits);
          ap_h_obstacle_min_perp_hmi_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_OBSTACLE_MAX_PAR_HMI_M = 633;
      case 633:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_ap_h_obstacle_max_par_hmi_m(&has_bits);
          ap_h_obstacle_max_par_hmi_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_USER_DEF_MAX_ANG_PAR_RAD = 1122;
      case 1122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ap_h_user_def_max_ang_par_rad(&has_bits);
          ap_h_user_def_max_ang_par_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_PERPAR_SLOT_DIST_MAX_HMI_M = 1514;
      case 1514:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ap_h_perpar_slot_dist_max_hmi_m(&has_bits);
          ap_h_perpar_slot_dist_max_hmi_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_OBSTACLE_MAX_PERP_HMI_M = 1667;
      case 1667:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_ap_h_obstacle_max_perp_hmi_m(&has_bits);
          ap_h_obstacle_max_perp_hmi_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_H_CUSTOMER_DEMO_NU = 1852;
      case 1852:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_ap_h_customer_demo_nu(&has_bits);
          ap_h_customer_demo_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_USER_DEF_MAX_ANG_PERP_RAD = 2502;
      case 2502:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ap_h_user_def_max_ang_perp_rad(&has_bits);
          ap_h_user_def_max_ang_perp_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_OBSTACLE_MIN_PAR_HMI_M = 3352;
      case 3352:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_ap_h_obstacle_min_par_hmi_m(&has_bits);
          ap_h_obstacle_min_par_hmi_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool AP_H_EXPLICIT_SCAN_ENABLED_NU = 3374;
      case 3374:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ap_h_explicit_scan_enabled_nu(&has_bits);
          ap_h_explicit_scan_enabled_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AP_H_USER_DEF_ENABLED_NU = 3873;
      case 3873:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ap_h_user_def_enabled_nu(&has_bits);
          ap_h_user_def_enabled_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_USER_DEF_SLIDE_OFFSET_M = 3937;
      case 3937:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ap_h_user_def_slide_offset_m(&has_bits);
          ap_h_user_def_slide_offset_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float AP_H_FIRST_SLOT_HMI_OFFSET_M = 3981;
      case 3981:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_ap_h_first_slot_hmi_offset_m(&has_bits);
          ap_h_first_slot_hmi_offset_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_MFHMIH_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float AP_H_FWDBWD_SLOT_DIST_MAX_HMI_M = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_ap_h_fwdbwd_slot_dist_max_hmi_m(), target);
  }

  // optional float AP_H_USER_DEF_INIT_LAT_OFFSET_M = 385;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(385, this->_internal_ap_h_user_def_init_lat_offset_m(), target);
  }

  // optional float AP_H_USER_DEF_ANG_OFFSET_RAD = 438;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(438, this->_internal_ap_h_user_def_ang_offset_rad(), target);
  }

  // optional float AP_H_OBSTACLE_MIN_PERP_HMI_M = 439;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(439, this->_internal_ap_h_obstacle_min_perp_hmi_m(), target);
  }

  // optional float AP_H_OBSTACLE_MAX_PAR_HMI_M = 633;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(633, this->_internal_ap_h_obstacle_max_par_hmi_m(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional float AP_H_USER_DEF_MAX_ANG_PAR_RAD = 1122;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1122, this->_internal_ap_h_user_def_max_ang_par_rad(), target);
  }

  // optional float AP_H_PERPAR_SLOT_DIST_MAX_HMI_M = 1514;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1514, this->_internal_ap_h_perpar_slot_dist_max_hmi_m(), target);
  }

  // optional float AP_H_OBSTACLE_MAX_PERP_HMI_M = 1667;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1667, this->_internal_ap_h_obstacle_max_perp_hmi_m(), target);
  }

  // optional bool AP_H_CUSTOMER_DEMO_NU = 1852;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1852, this->_internal_ap_h_customer_demo_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float AP_H_USER_DEF_MAX_ANG_PERP_RAD = 2502;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2502, this->_internal_ap_h_user_def_max_ang_perp_rad(), target);
  }

  // optional float AP_H_OBSTACLE_MIN_PAR_HMI_M = 3352;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3352, this->_internal_ap_h_obstacle_min_par_hmi_m(), target);
  }

  // optional bool AP_H_EXPLICIT_SCAN_ENABLED_NU = 3374;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3374, this->_internal_ap_h_explicit_scan_enabled_nu(), target);
  }

  // optional bool AP_H_USER_DEF_ENABLED_NU = 3873;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3873, this->_internal_ap_h_user_def_enabled_nu(), target);
  }

  // optional float AP_H_USER_DEF_SLIDE_OFFSET_M = 3937;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3937, this->_internal_ap_h_user_def_slide_offset_m(), target);
  }

  // optional float AP_H_FIRST_SLOT_HMI_OFFSET_M = 3981;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3981, this->_internal_ap_h_first_slot_hmi_offset_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  return target;
}

size_t FC_MFHMIH_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional float AP_H_FWDBWD_SLOT_DIST_MAX_HMI_M = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float AP_H_USER_DEF_INIT_LAT_OFFSET_M = 385;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float AP_H_USER_DEF_ANG_OFFSET_RAD = 438;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float AP_H_OBSTACLE_MIN_PERP_HMI_M = 439;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float AP_H_OBSTACLE_MAX_PAR_HMI_M = 633;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float AP_H_USER_DEF_MAX_ANG_PAR_RAD = 1122;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float AP_H_PERPAR_SLOT_DIST_MAX_HMI_M = 1514;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float AP_H_OBSTACLE_MAX_PERP_HMI_M = 1667;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float AP_H_USER_DEF_MAX_ANG_PERP_RAD = 2502;
    if (cached_has_bits & 0x00000400u) {
      total_size += 3 + 4;
    }

    // optional bool AP_H_USER_DEF_ENABLED_NU = 3873;
    if (cached_has_bits & 0x00000800u) {
      total_size += 3 + 1;
    }

    // optional bool AP_H_CUSTOMER_DEMO_NU = 1852;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool AP_H_EXPLICIT_SCAN_ENABLED_NU = 3374;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3 + 1;
    }

    // optional float AP_H_OBSTACLE_MIN_PAR_HMI_M = 3352;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3 + 4;
    }

    // optional float AP_H_USER_DEF_SLIDE_OFFSET_M = 3937;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 4;
    }

  }
  // optional float AP_H_FIRST_SLOT_HMI_OFFSET_M = 3981;
  if (cached_has_bits & 0x00010000u) {
    total_size += 3 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_MFHMIH_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_MFHMIH_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_MFHMIH_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
    MergeFrom(*source);
  }
}

void FC_MFHMIH_Params::MergeFrom(const FC_MFHMIH_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      ap_h_fwdbwd_slot_dist_max_hmi_m_ = from.ap_h_fwdbwd_slot_dist_max_hmi_m_;
    }
    if (cached_has_bits & 0x00000004u) {
      ap_h_user_def_init_lat_offset_m_ = from.ap_h_user_def_init_lat_offset_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      ap_h_user_def_ang_offset_rad_ = from.ap_h_user_def_ang_offset_rad_;
    }
    if (cached_has_bits & 0x00000010u) {
      ap_h_obstacle_min_perp_hmi_m_ = from.ap_h_obstacle_min_perp_hmi_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      ap_h_obstacle_max_par_hmi_m_ = from.ap_h_obstacle_max_par_hmi_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      ap_h_user_def_max_ang_par_rad_ = from.ap_h_user_def_max_ang_par_rad_;
    }
    if (cached_has_bits & 0x00000080u) {
      ap_h_perpar_slot_dist_max_hmi_m_ = from.ap_h_perpar_slot_dist_max_hmi_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ap_h_obstacle_max_perp_hmi_m_ = from.ap_h_obstacle_max_perp_hmi_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_h_user_def_max_ang_perp_rad_ = from.ap_h_user_def_max_ang_perp_rad_;
    }
    if (cached_has_bits & 0x00000800u) {
      ap_h_user_def_enabled_nu_ = from.ap_h_user_def_enabled_nu_;
    }
    if (cached_has_bits & 0x00001000u) {
      ap_h_customer_demo_nu_ = from.ap_h_customer_demo_nu_;
    }
    if (cached_has_bits & 0x00002000u) {
      ap_h_explicit_scan_enabled_nu_ = from.ap_h_explicit_scan_enabled_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      ap_h_obstacle_min_par_hmi_m_ = from.ap_h_obstacle_min_par_hmi_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      ap_h_user_def_slide_offset_m_ = from.ap_h_user_def_slide_offset_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_ap_h_first_slot_hmi_offset_m(from._internal_ap_h_first_slot_hmi_offset_m());
  }
}

void FC_MFHMIH_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_MFHMIH_Params::CopyFrom(const FC_MFHMIH_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_MFHMIH_Params::IsInitialized() const {
  return true;
}

void FC_MFHMIH_Params::InternalSwap(FC_MFHMIH_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(ap_h_fwdbwd_slot_dist_max_hmi_m_, other->ap_h_fwdbwd_slot_dist_max_hmi_m_);
  swap(ap_h_user_def_init_lat_offset_m_, other->ap_h_user_def_init_lat_offset_m_);
  swap(ap_h_user_def_ang_offset_rad_, other->ap_h_user_def_ang_offset_rad_);
  swap(ap_h_obstacle_min_perp_hmi_m_, other->ap_h_obstacle_min_perp_hmi_m_);
  swap(ap_h_obstacle_max_par_hmi_m_, other->ap_h_obstacle_max_par_hmi_m_);
  swap(ap_h_user_def_max_ang_par_rad_, other->ap_h_user_def_max_ang_par_rad_);
  swap(ap_h_perpar_slot_dist_max_hmi_m_, other->ap_h_perpar_slot_dist_max_hmi_m_);
  swap(ap_h_obstacle_max_perp_hmi_m_, other->ap_h_obstacle_max_perp_hmi_m_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(ap_h_user_def_max_ang_perp_rad_, other->ap_h_user_def_max_ang_perp_rad_);
  swap(ap_h_user_def_enabled_nu_, other->ap_h_user_def_enabled_nu_);
  swap(ap_h_customer_demo_nu_, other->ap_h_customer_demo_nu_);
  swap(ap_h_explicit_scan_enabled_nu_, other->ap_h_explicit_scan_enabled_nu_);
  swap(ap_h_obstacle_min_par_hmi_m_, other->ap_h_obstacle_min_par_hmi_m_);
  swap(ap_h_user_def_slide_offset_m_, other->ap_h_user_def_slide_offset_m_);
  swap(ap_h_first_slot_hmi_offset_m_, other->ap_h_first_slot_hmi_offset_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_MFHMIH_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_MFHMIH_Params_array_port::InitAsDefaultInstance() {
}
class FC_MFHMIH_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_MFHMIH_Params_array_port>()._has_bits_);
};

FC_MFHMIH_Params_array_port::FC_MFHMIH_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
}
FC_MFHMIH_Params_array_port::FC_MFHMIH_Params_array_port(const FC_MFHMIH_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
}

void FC_MFHMIH_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_MFHMIH_Params_array_port_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto.base);
}

FC_MFHMIH_Params_array_port::~FC_MFHMIH_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  SharedDtor();
}

void FC_MFHMIH_Params_array_port::SharedDtor() {
}

void FC_MFHMIH_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_MFHMIH_Params_array_port& FC_MFHMIH_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_MFHMIH_Params_array_port_mf_5fhmih_2ffc_5fmfhmih_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_MFHMIH_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_MFHMIH_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params data = 421;
      case 421:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<3370>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_MFHMIH_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params data = 421;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(421, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  return target;
}

size_t FC_MFHMIH_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params data = 421;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_MFHMIH_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_MFHMIH_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_MFHMIH_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_MFHMIH_Params_array_port::MergeFrom(const FC_MFHMIH_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_MFHMIH_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_MFHMIH_Params_array_port::CopyFrom(const FC_MFHMIH_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.fc_mfhmih_params.FC_MFHMIH_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_MFHMIH_Params_array_port::IsInitialized() const {
  return true;
}

void FC_MFHMIH_Params_array_port::InternalSwap(FC_MFHMIH_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_MFHMIH_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_mfhmih_params
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params* Arena::CreateMaybeMessage< ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port* Arena::CreateMaybeMessage< ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::fc_mfhmih_params::FC_MFHMIH_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
