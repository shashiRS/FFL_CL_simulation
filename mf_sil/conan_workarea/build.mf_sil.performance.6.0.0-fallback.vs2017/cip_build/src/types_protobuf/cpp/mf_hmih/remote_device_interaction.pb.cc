// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_hmih/remote_device_interaction.proto

#include "mf_hmih/remote_device_interaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteDeviceInteraction_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto;
namespace pb {
namespace mf_hmih {
namespace remote_device_interaction {
class RemoteDeviceInteractionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDeviceInteraction> _instance;
} _RemoteDeviceInteraction_default_instance_;
class RemoteDeviceInteraction_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDeviceInteraction_array_port> _instance;
} _RemoteDeviceInteraction_array_port_default_instance_;
}  // namespace remote_device_interaction
}  // namespace mf_hmih
}  // namespace pb
static void InitDefaultsscc_info_RemoteDeviceInteraction_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::remote_device_interaction::_RemoteDeviceInteraction_default_instance_;
    new (ptr) ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteDeviceInteraction_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteDeviceInteraction_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_RemoteDeviceInteraction_array_port_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_hmih::remote_device_interaction::_RemoteDeviceInteraction_array_port_default_instance_;
    new (ptr) ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteDeviceInteraction_array_port_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteDeviceInteraction_array_port_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto}, {
      &scc_info_RemoteDeviceInteraction_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, batterylevel_perc_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, fingerpositionx_px_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, fingerpositiony_px_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, apuseractionremotedevice_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, alivecounter_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, deadmansswitchbtn_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, paired_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, connected_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, screenresolutionx_px_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction, screenresolutiony_px_),
  0,
  6,
  5,
  7,
  8,
  1,
  2,
  3,
  9,
  4,
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction)},
  { 25, 31, sizeof(::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::remote_device_interaction::_RemoteDeviceInteraction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_hmih::remote_device_interaction::_RemoteDeviceInteraction_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'mf_hmih/remote_device_interaction.prot"
  "o\022$pb.mf_hmih.remote_device_interaction\032"
  ")mf_hmih/apuser_action_remote_device.pro"
  "to\"\371\002\n\027RemoteDeviceInteraction\022\032\n\021batter"
  "yLevel_perc\030\215\002 \001(\002\022\033\n\022fingerPositionX_px"
  "\030\377\031 \001(\r\022\033\n\022fingerPositionY_px\030\313\024 \001(\r\022f\n\033"
  "apUserActionRemoteDevice_nu\030\337\032 \001(\0162@.pb."
  "mf_hmih.apuser_action_remote_device.APUs"
  "erActionRemoteDevice\022\030\n\017aliveCounter_nu\030"
  "\336\033 \001(\r\022\035\n\024deadMansSwitchBtn_nu\030\267\r \001(\010\022\022\n"
  "\tpaired_nu\030\367\t \001(\010\022\025\n\014connected_nu\030\242\022 \001(\010"
  "\022\035\n\024screenResolutionX_px\030\235\037 \001(\r\022\035\n\024scree"
  "nResolutionY_px\030\251\022 \001(\r\"r\n\"RemoteDeviceIn"
  "teraction_array_port\022L\n\004data\030\306\t \003(\0132=.pb"
  ".mf_hmih.remote_device_interaction.Remot"
  "eDeviceInteraction"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_deps[1] = {
  &::descriptor_table_mf_5fhmih_2fapuser_5faction_5fremote_5fdevice_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_sccs[2] = {
  &scc_info_RemoteDeviceInteraction_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto.base,
  &scc_info_RemoteDeviceInteraction_array_port_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_once;
static bool descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto = {
  &descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_initialized, descriptor_table_protodef_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto, "mf_hmih/remote_device_interaction.proto", 618,
  &descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_once, descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_sccs, descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto::offsets,
  file_level_metadata_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto, 2, file_level_enum_descriptors_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto, file_level_service_descriptors_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto), true);
namespace pb {
namespace mf_hmih {
namespace remote_device_interaction {

// ===================================================================

void RemoteDeviceInteraction::InitAsDefaultInstance() {
}
class RemoteDeviceInteraction::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDeviceInteraction>()._has_bits_);
  static void set_has_batterylevel_perc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fingerpositionx_px(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fingerpositiony_px(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_apuseractionremotedevice_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_alivecounter_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deadmansswitchbtn_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_paired_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_connected_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_screenresolutionx_px(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_screenresolutiony_px(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RemoteDeviceInteraction::RemoteDeviceInteraction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
}
RemoteDeviceInteraction::RemoteDeviceInteraction(const RemoteDeviceInteraction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batterylevel_perc_, &from.batterylevel_perc_,
    static_cast<size_t>(reinterpret_cast<char*>(&screenresolutionx_px_) -
    reinterpret_cast<char*>(&batterylevel_perc_)) + sizeof(screenresolutionx_px_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
}

void RemoteDeviceInteraction::SharedCtor() {
  ::memset(&batterylevel_perc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&screenresolutionx_px_) -
      reinterpret_cast<char*>(&batterylevel_perc_)) + sizeof(screenresolutionx_px_));
}

RemoteDeviceInteraction::~RemoteDeviceInteraction() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  SharedDtor();
}

void RemoteDeviceInteraction::SharedDtor() {
}

void RemoteDeviceInteraction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDeviceInteraction& RemoteDeviceInteraction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDeviceInteraction_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void RemoteDeviceInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&batterylevel_perc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&apuseractionremotedevice_nu_) -
        reinterpret_cast<char*>(&batterylevel_perc_)) + sizeof(apuseractionremotedevice_nu_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&alivecounter_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screenresolutionx_px_) -
        reinterpret_cast<char*>(&alivecounter_nu_)) + sizeof(screenresolutionx_px_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoteDeviceInteraction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float batteryLevel_perc = 269;
      case 269:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_batterylevel_perc(&has_bits);
          batterylevel_perc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool paired_nu = 1271;
      case 1271:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_paired_nu(&has_bits);
          paired_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deadMansSwitchBtn_nu = 1719;
      case 1719:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_deadmansswitchbtn_nu(&has_bits);
          deadmansswitchbtn_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connected_nu = 2338;
      case 2338:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connected_nu(&has_bits);
          connected_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screenResolutionY_px = 2345;
      case 2345:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_screenresolutiony_px(&has_bits);
          screenresolutiony_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fingerPositionY_px = 2635;
      case 2635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fingerpositiony_px(&has_bits);
          fingerpositiony_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fingerPositionX_px = 3327;
      case 3327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_fingerpositionx_px(&has_bits);
          fingerpositionx_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pb.mf_hmih.apuser_action_remote_device.APUserActionRemoteDevice apUserActionRemoteDevice_nu = 3423;
      case 3423:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pb::mf_hmih::apuser_action_remote_device::APUserActionRemoteDevice_IsValid(val))) {
            _internal_set_apuseractionremotedevice_nu(static_cast<::pb::mf_hmih::apuser_action_remote_device::APUserActionRemoteDevice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3423, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 aliveCounter_nu = 3550;
      case 3550:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_alivecounter_nu(&has_bits);
          alivecounter_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screenResolutionX_px = 3997;
      case 3997:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_screenresolutionx_px(&has_bits);
          screenresolutionx_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDeviceInteraction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float batteryLevel_perc = 269;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(269, this->_internal_batterylevel_perc(), target);
  }

  // optional bool paired_nu = 1271;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1271, this->_internal_paired_nu(), target);
  }

  // optional bool deadMansSwitchBtn_nu = 1719;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1719, this->_internal_deadmansswitchbtn_nu(), target);
  }

  // optional bool connected_nu = 2338;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2338, this->_internal_connected_nu(), target);
  }

  // optional uint32 screenResolutionY_px = 2345;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2345, this->_internal_screenresolutiony_px(), target);
  }

  // optional uint32 fingerPositionY_px = 2635;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2635, this->_internal_fingerpositiony_px(), target);
  }

  // optional uint32 fingerPositionX_px = 3327;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3327, this->_internal_fingerpositionx_px(), target);
  }

  // optional .pb.mf_hmih.apuser_action_remote_device.APUserActionRemoteDevice apUserActionRemoteDevice_nu = 3423;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3423, this->_internal_apuseractionremotedevice_nu(), target);
  }

  // optional uint32 aliveCounter_nu = 3550;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3550, this->_internal_alivecounter_nu(), target);
  }

  // optional uint32 screenResolutionX_px = 3997;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3997, this->_internal_screenresolutionx_px(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  return target;
}

size_t RemoteDeviceInteraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float batteryLevel_perc = 269;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional bool deadMansSwitchBtn_nu = 1719;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool paired_nu = 1271;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool connected_nu = 2338;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3 + 1;
    }

    // optional uint32 screenResolutionY_px = 2345;
    if (cached_has_bits & 0x00000010u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screenresolutiony_px());
    }

    // optional uint32 fingerPositionY_px = 2635;
    if (cached_has_bits & 0x00000020u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fingerpositiony_px());
    }

    // optional uint32 fingerPositionX_px = 3327;
    if (cached_has_bits & 0x00000040u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fingerpositionx_px());
    }

    // optional .pb.mf_hmih.apuser_action_remote_device.APUserActionRemoteDevice apUserActionRemoteDevice_nu = 3423;
    if (cached_has_bits & 0x00000080u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apuseractionremotedevice_nu());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 aliveCounter_nu = 3550;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_alivecounter_nu());
    }

    // optional uint32 screenResolutionX_px = 3997;
    if (cached_has_bits & 0x00000200u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screenresolutionx_px());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDeviceInteraction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDeviceInteraction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDeviceInteraction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
    MergeFrom(*source);
  }
}

void RemoteDeviceInteraction::MergeFrom(const RemoteDeviceInteraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      batterylevel_perc_ = from.batterylevel_perc_;
    }
    if (cached_has_bits & 0x00000002u) {
      deadmansswitchbtn_nu_ = from.deadmansswitchbtn_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      paired_nu_ = from.paired_nu_;
    }
    if (cached_has_bits & 0x00000008u) {
      connected_nu_ = from.connected_nu_;
    }
    if (cached_has_bits & 0x00000010u) {
      screenresolutiony_px_ = from.screenresolutiony_px_;
    }
    if (cached_has_bits & 0x00000020u) {
      fingerpositiony_px_ = from.fingerpositiony_px_;
    }
    if (cached_has_bits & 0x00000040u) {
      fingerpositionx_px_ = from.fingerpositionx_px_;
    }
    if (cached_has_bits & 0x00000080u) {
      apuseractionremotedevice_nu_ = from.apuseractionremotedevice_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      alivecounter_nu_ = from.alivecounter_nu_;
    }
    if (cached_has_bits & 0x00000200u) {
      screenresolutionx_px_ = from.screenresolutionx_px_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteDeviceInteraction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDeviceInteraction::CopyFrom(const RemoteDeviceInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDeviceInteraction::IsInitialized() const {
  return true;
}

void RemoteDeviceInteraction::InternalSwap(RemoteDeviceInteraction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(batterylevel_perc_, other->batterylevel_perc_);
  swap(deadmansswitchbtn_nu_, other->deadmansswitchbtn_nu_);
  swap(paired_nu_, other->paired_nu_);
  swap(connected_nu_, other->connected_nu_);
  swap(screenresolutiony_px_, other->screenresolutiony_px_);
  swap(fingerpositiony_px_, other->fingerpositiony_px_);
  swap(fingerpositionx_px_, other->fingerpositionx_px_);
  swap(apuseractionremotedevice_nu_, other->apuseractionremotedevice_nu_);
  swap(alivecounter_nu_, other->alivecounter_nu_);
  swap(screenresolutionx_px_, other->screenresolutionx_px_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDeviceInteraction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteDeviceInteraction_array_port::InitAsDefaultInstance() {
}
class RemoteDeviceInteraction_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDeviceInteraction_array_port>()._has_bits_);
};

RemoteDeviceInteraction_array_port::RemoteDeviceInteraction_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
}
RemoteDeviceInteraction_array_port::RemoteDeviceInteraction_array_port(const RemoteDeviceInteraction_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
}

void RemoteDeviceInteraction_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteDeviceInteraction_array_port_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto.base);
}

RemoteDeviceInteraction_array_port::~RemoteDeviceInteraction_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  SharedDtor();
}

void RemoteDeviceInteraction_array_port::SharedDtor() {
}

void RemoteDeviceInteraction_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDeviceInteraction_array_port& RemoteDeviceInteraction_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDeviceInteraction_array_port_mf_5fhmih_2fremote_5fdevice_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void RemoteDeviceInteraction_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RemoteDeviceInteraction_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction data = 1222;
      case 1222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9778>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDeviceInteraction_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction data = 1222;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1222, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  return target;
}

size_t RemoteDeviceInteraction_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction data = 1222;
  total_size += 2UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDeviceInteraction_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDeviceInteraction_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDeviceInteraction_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
    MergeFrom(*source);
  }
}

void RemoteDeviceInteraction_array_port::MergeFrom(const RemoteDeviceInteraction_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void RemoteDeviceInteraction_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDeviceInteraction_array_port::CopyFrom(const RemoteDeviceInteraction_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_hmih.remote_device_interaction.RemoteDeviceInteraction_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDeviceInteraction_array_port::IsInitialized() const {
  return true;
}

void RemoteDeviceInteraction_array_port::InternalSwap(RemoteDeviceInteraction_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDeviceInteraction_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace remote_device_interaction
}  // namespace mf_hmih
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction* Arena::CreateMaybeMessage< ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port* Arena::CreateMaybeMessage< ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_hmih::remote_device_interaction::RemoteDeviceInteraction_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
