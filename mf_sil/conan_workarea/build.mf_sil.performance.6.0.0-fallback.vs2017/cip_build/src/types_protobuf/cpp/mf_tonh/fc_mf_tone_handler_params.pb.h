// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_tonh/fc_mf_tone_handler_params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "eco/signal_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto;
namespace pb {
namespace mf_tonh {
namespace fc_mf_tone_handler_params {
class FC_MF_ToneHandler_Params;
class FC_MF_ToneHandler_ParamsDefaultTypeInternal;
extern FC_MF_ToneHandler_ParamsDefaultTypeInternal _FC_MF_ToneHandler_Params_default_instance_;
class FC_MF_ToneHandler_Params_array_port;
class FC_MF_ToneHandler_Params_array_portDefaultTypeInternal;
extern FC_MF_ToneHandler_Params_array_portDefaultTypeInternal _FC_MF_ToneHandler_Params_array_port_default_instance_;
}  // namespace fc_mf_tone_handler_params
}  // namespace mf_tonh
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* Arena::CreateMaybeMessage<::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params>(Arena*);
template<> ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port* Arena::CreateMaybeMessage<::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {
namespace mf_tonh {
namespace fc_mf_tone_handler_params {

// ===================================================================

class FC_MF_ToneHandler_Params :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params) */ {
 public:
  FC_MF_ToneHandler_Params();
  virtual ~FC_MF_ToneHandler_Params();

  FC_MF_ToneHandler_Params(const FC_MF_ToneHandler_Params& from);
  FC_MF_ToneHandler_Params(FC_MF_ToneHandler_Params&& from) noexcept
    : FC_MF_ToneHandler_Params() {
    *this = ::std::move(from);
  }

  inline FC_MF_ToneHandler_Params& operator=(const FC_MF_ToneHandler_Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_MF_ToneHandler_Params& operator=(FC_MF_ToneHandler_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_MF_ToneHandler_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_MF_ToneHandler_Params* internal_default_instance() {
    return reinterpret_cast<const FC_MF_ToneHandler_Params*>(
               &_FC_MF_ToneHandler_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FC_MF_ToneHandler_Params& a, FC_MF_ToneHandler_Params& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_MF_ToneHandler_Params* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_MF_ToneHandler_Params* New() const final {
    return CreateMaybeMessage<FC_MF_ToneHandler_Params>(nullptr);
  }

  FC_MF_ToneHandler_Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_MF_ToneHandler_Params>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_MF_ToneHandler_Params& from);
  void MergeFrom(const FC_MF_ToneHandler_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_MF_ToneHandler_Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto);
    return ::descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSigHeaderFieldNumber = 1033,
    kTHVOLUMEREARNUFieldNumber = 319,
    kTHACTIVEDISTANCEMFieldNumber = 376,
    kTHWHPLOWPAUSEDURATIONSFieldNumber = 420,
    kTHACKTONEDELAYSFieldNumber = 698,
    kTHERRTONEPITCHNUFieldNumber = 1091,
    kTHLVMDTONEPITCHNUFieldNumber = 1145,
    kTHWHPHIGHPAUSEDURATIONSFieldNumber = 1335,
    kTHLSCAPAUSEDURATIONSFieldNumber = 1350,
    kTHERRTONEVOLOFFSETNUFieldNumber = 1367,
    kTHERRTONEDURATIONSFieldNumber = 1381,
    kTHSOUNDPULSELENSFieldNumber = 1397,
    kTHACKTONEDURATIONSFieldNumber = 1607,
    kTHVOLUMEFRONTNUFieldNumber = 1642,
    kTHENABLEDNUFieldNumber = 463,
    kTHDIFFERENTTONESNUFieldNumber = 4019,
    kTHACKACTIVENUFieldNumber = 1227,
    kUiVersionNumberFieldNumber = 2124,
    kTHMAXPAUSEDURATIONSFieldNumber = 2156,
    kTHLVMDSOUNDPULSELENSFieldNumber = 2219,
    kTHMINPAUSEDURATIONSFieldNumber = 2633,
    kTHCONTTONELIMITMFieldNumber = 2652,
    kTHACKTONEVOLOFFSETNUFieldNumber = 2676,
    kTHWARNTONEPITCHNUFieldNumber = 3000,
    kTHACKTONEPITCHNUFieldNumber = 3030,
    kTHLSCALOWTONEPITCHNUFieldNumber = 3342,
    kTHACKPAUSEDURATIONSFieldNumber = 3467,
    kTHLSCAHIGHTONEPITCHNUFieldNumber = 3641,
    kTHWHPWARNTONEPITCHNUFieldNumber = 3769,
    kTHPINGPONGDURATIONSFieldNumber = 3893,
    kTHWEAKVOLUMENUFieldNumber = 3912,
  };
  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  bool has_ssigheader() const;
  private:
  bool _internal_has_ssigheader() const;
  public:
  void clear_ssigheader();
  const ::pb::eco::signal_header::SignalHeader& ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* release_ssigheader();
  ::pb::eco::signal_header::SignalHeader* mutable_ssigheader();
  void set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader);
  private:
  const ::pb::eco::signal_header::SignalHeader& _internal_ssigheader() const;
  ::pb::eco::signal_header::SignalHeader* _internal_mutable_ssigheader();
  public:

  // optional uint32 TH_VOLUME_REAR_NU = 319;
  bool has_th_volume_rear_nu() const;
  private:
  bool _internal_has_th_volume_rear_nu() const;
  public:
  void clear_th_volume_rear_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_volume_rear_nu() const;
  void set_th_volume_rear_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_volume_rear_nu() const;
  void _internal_set_th_volume_rear_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float TH_ACTIVE_DISTANCE_M = 376;
  bool has_th_active_distance_m() const;
  private:
  bool _internal_has_th_active_distance_m() const;
  public:
  void clear_th_active_distance_m();
  float th_active_distance_m() const;
  void set_th_active_distance_m(float value);
  private:
  float _internal_th_active_distance_m() const;
  void _internal_set_th_active_distance_m(float value);
  public:

  // optional float TH_WHP_LOW_PAUSE_DURATION_S = 420;
  bool has_th_whp_low_pause_duration_s() const;
  private:
  bool _internal_has_th_whp_low_pause_duration_s() const;
  public:
  void clear_th_whp_low_pause_duration_s();
  float th_whp_low_pause_duration_s() const;
  void set_th_whp_low_pause_duration_s(float value);
  private:
  float _internal_th_whp_low_pause_duration_s() const;
  void _internal_set_th_whp_low_pause_duration_s(float value);
  public:

  // optional float TH_ACK_TONE_DELAY_S = 698;
  bool has_th_ack_tone_delay_s() const;
  private:
  bool _internal_has_th_ack_tone_delay_s() const;
  public:
  void clear_th_ack_tone_delay_s();
  float th_ack_tone_delay_s() const;
  void set_th_ack_tone_delay_s(float value);
  private:
  float _internal_th_ack_tone_delay_s() const;
  void _internal_set_th_ack_tone_delay_s(float value);
  public:

  // optional uint32 TH_ERR_TONE_PITCH_NU = 1091;
  bool has_th_err_tone_pitch_nu() const;
  private:
  bool _internal_has_th_err_tone_pitch_nu() const;
  public:
  void clear_th_err_tone_pitch_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_err_tone_pitch_nu() const;
  void set_th_err_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_err_tone_pitch_nu() const;
  void _internal_set_th_err_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 TH_LVMD_TONE_PITCH_NU = 1145;
  bool has_th_lvmd_tone_pitch_nu() const;
  private:
  bool _internal_has_th_lvmd_tone_pitch_nu() const;
  public:
  void clear_th_lvmd_tone_pitch_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_lvmd_tone_pitch_nu() const;
  void set_th_lvmd_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_lvmd_tone_pitch_nu() const;
  void _internal_set_th_lvmd_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float TH_WHP_HIGH_PAUSE_DURATION_S = 1335;
  bool has_th_whp_high_pause_duration_s() const;
  private:
  bool _internal_has_th_whp_high_pause_duration_s() const;
  public:
  void clear_th_whp_high_pause_duration_s();
  float th_whp_high_pause_duration_s() const;
  void set_th_whp_high_pause_duration_s(float value);
  private:
  float _internal_th_whp_high_pause_duration_s() const;
  void _internal_set_th_whp_high_pause_duration_s(float value);
  public:

  // optional float TH_LSCA_PAUSE_DURATION_S = 1350;
  bool has_th_lsca_pause_duration_s() const;
  private:
  bool _internal_has_th_lsca_pause_duration_s() const;
  public:
  void clear_th_lsca_pause_duration_s();
  float th_lsca_pause_duration_s() const;
  void set_th_lsca_pause_duration_s(float value);
  private:
  float _internal_th_lsca_pause_duration_s() const;
  void _internal_set_th_lsca_pause_duration_s(float value);
  public:

  // optional uint32 TH_ERR_TONE_VOL_OFFSET_NU = 1367;
  bool has_th_err_tone_vol_offset_nu() const;
  private:
  bool _internal_has_th_err_tone_vol_offset_nu() const;
  public:
  void clear_th_err_tone_vol_offset_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_err_tone_vol_offset_nu() const;
  void set_th_err_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_err_tone_vol_offset_nu() const;
  void _internal_set_th_err_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float TH_ERR_TONE_DURATION_S = 1381;
  bool has_th_err_tone_duration_s() const;
  private:
  bool _internal_has_th_err_tone_duration_s() const;
  public:
  void clear_th_err_tone_duration_s();
  float th_err_tone_duration_s() const;
  void set_th_err_tone_duration_s(float value);
  private:
  float _internal_th_err_tone_duration_s() const;
  void _internal_set_th_err_tone_duration_s(float value);
  public:

  // optional float TH_SOUND_PULSE_LEN_S = 1397;
  bool has_th_sound_pulse_len_s() const;
  private:
  bool _internal_has_th_sound_pulse_len_s() const;
  public:
  void clear_th_sound_pulse_len_s();
  float th_sound_pulse_len_s() const;
  void set_th_sound_pulse_len_s(float value);
  private:
  float _internal_th_sound_pulse_len_s() const;
  void _internal_set_th_sound_pulse_len_s(float value);
  public:

  // optional float TH_ACK_TONE_DURATION_S = 1607;
  bool has_th_ack_tone_duration_s() const;
  private:
  bool _internal_has_th_ack_tone_duration_s() const;
  public:
  void clear_th_ack_tone_duration_s();
  float th_ack_tone_duration_s() const;
  void set_th_ack_tone_duration_s(float value);
  private:
  float _internal_th_ack_tone_duration_s() const;
  void _internal_set_th_ack_tone_duration_s(float value);
  public:

  // optional uint32 TH_VOLUME_FRONT_NU = 1642;
  bool has_th_volume_front_nu() const;
  private:
  bool _internal_has_th_volume_front_nu() const;
  public:
  void clear_th_volume_front_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_volume_front_nu() const;
  void set_th_volume_front_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_volume_front_nu() const;
  void _internal_set_th_volume_front_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool TH_ENABLED_NU = 463;
  bool has_th_enabled_nu() const;
  private:
  bool _internal_has_th_enabled_nu() const;
  public:
  void clear_th_enabled_nu();
  bool th_enabled_nu() const;
  void set_th_enabled_nu(bool value);
  private:
  bool _internal_th_enabled_nu() const;
  void _internal_set_th_enabled_nu(bool value);
  public:

  // optional bool TH_DIFFERENT_TONES_NU = 4019;
  bool has_th_different_tones_nu() const;
  private:
  bool _internal_has_th_different_tones_nu() const;
  public:
  void clear_th_different_tones_nu();
  bool th_different_tones_nu() const;
  void set_th_different_tones_nu(bool value);
  private:
  bool _internal_th_different_tones_nu() const;
  void _internal_set_th_different_tones_nu(bool value);
  public:

  // optional bool TH_ACK_ACTIVE_NU = 1227;
  bool has_th_ack_active_nu() const;
  private:
  bool _internal_has_th_ack_active_nu() const;
  public:
  void clear_th_ack_active_nu();
  bool th_ack_active_nu() const;
  void set_th_ack_active_nu(bool value);
  private:
  bool _internal_th_ack_active_nu() const;
  void _internal_set_th_ack_active_nu(bool value);
  public:

  // optional uint32 uiVersionNumber = 2124;
  bool has_uiversionnumber() const;
  private:
  bool _internal_has_uiversionnumber() const;
  public:
  void clear_uiversionnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber() const;
  void set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uiversionnumber() const;
  void _internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float TH_MAX_PAUSE_DURATION_S = 2156;
  bool has_th_max_pause_duration_s() const;
  private:
  bool _internal_has_th_max_pause_duration_s() const;
  public:
  void clear_th_max_pause_duration_s();
  float th_max_pause_duration_s() const;
  void set_th_max_pause_duration_s(float value);
  private:
  float _internal_th_max_pause_duration_s() const;
  void _internal_set_th_max_pause_duration_s(float value);
  public:

  // optional float TH_LVMD_SOUND_PULSE_LEN_S = 2219;
  bool has_th_lvmd_sound_pulse_len_s() const;
  private:
  bool _internal_has_th_lvmd_sound_pulse_len_s() const;
  public:
  void clear_th_lvmd_sound_pulse_len_s();
  float th_lvmd_sound_pulse_len_s() const;
  void set_th_lvmd_sound_pulse_len_s(float value);
  private:
  float _internal_th_lvmd_sound_pulse_len_s() const;
  void _internal_set_th_lvmd_sound_pulse_len_s(float value);
  public:

  // optional float TH_MIN_PAUSE_DURATION_S = 2633;
  bool has_th_min_pause_duration_s() const;
  private:
  bool _internal_has_th_min_pause_duration_s() const;
  public:
  void clear_th_min_pause_duration_s();
  float th_min_pause_duration_s() const;
  void set_th_min_pause_duration_s(float value);
  private:
  float _internal_th_min_pause_duration_s() const;
  void _internal_set_th_min_pause_duration_s(float value);
  public:

  // optional float TH_CONT_TONE_LIMIT_M = 2652;
  bool has_th_cont_tone_limit_m() const;
  private:
  bool _internal_has_th_cont_tone_limit_m() const;
  public:
  void clear_th_cont_tone_limit_m();
  float th_cont_tone_limit_m() const;
  void set_th_cont_tone_limit_m(float value);
  private:
  float _internal_th_cont_tone_limit_m() const;
  void _internal_set_th_cont_tone_limit_m(float value);
  public:

  // optional uint32 TH_ACK_TONE_VOL_OFFSET_NU = 2676;
  bool has_th_ack_tone_vol_offset_nu() const;
  private:
  bool _internal_has_th_ack_tone_vol_offset_nu() const;
  public:
  void clear_th_ack_tone_vol_offset_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_ack_tone_vol_offset_nu() const;
  void set_th_ack_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_ack_tone_vol_offset_nu() const;
  void _internal_set_th_ack_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 TH_WARN_TONE_PITCH_NU = 3000;
  bool has_th_warn_tone_pitch_nu() const;
  private:
  bool _internal_has_th_warn_tone_pitch_nu() const;
  public:
  void clear_th_warn_tone_pitch_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_warn_tone_pitch_nu() const;
  void set_th_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_warn_tone_pitch_nu() const;
  void _internal_set_th_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 TH_ACK_TONE_PITCH_NU = 3030;
  bool has_th_ack_tone_pitch_nu() const;
  private:
  bool _internal_has_th_ack_tone_pitch_nu() const;
  public:
  void clear_th_ack_tone_pitch_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_ack_tone_pitch_nu() const;
  void set_th_ack_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_ack_tone_pitch_nu() const;
  void _internal_set_th_ack_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 TH_LSCA_LOW_TONE_PITCH_NU = 3342;
  bool has_th_lsca_low_tone_pitch_nu() const;
  private:
  bool _internal_has_th_lsca_low_tone_pitch_nu() const;
  public:
  void clear_th_lsca_low_tone_pitch_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_lsca_low_tone_pitch_nu() const;
  void set_th_lsca_low_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_lsca_low_tone_pitch_nu() const;
  void _internal_set_th_lsca_low_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float TH_ACK_PAUSE_DURATION_S = 3467;
  bool has_th_ack_pause_duration_s() const;
  private:
  bool _internal_has_th_ack_pause_duration_s() const;
  public:
  void clear_th_ack_pause_duration_s();
  float th_ack_pause_duration_s() const;
  void set_th_ack_pause_duration_s(float value);
  private:
  float _internal_th_ack_pause_duration_s() const;
  void _internal_set_th_ack_pause_duration_s(float value);
  public:

  // optional uint32 TH_LSCA_HIGH_TONE_PITCH_NU = 3641;
  bool has_th_lsca_high_tone_pitch_nu() const;
  private:
  bool _internal_has_th_lsca_high_tone_pitch_nu() const;
  public:
  void clear_th_lsca_high_tone_pitch_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_lsca_high_tone_pitch_nu() const;
  void set_th_lsca_high_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_lsca_high_tone_pitch_nu() const;
  void _internal_set_th_lsca_high_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 TH_WHP_WARN_TONE_PITCH_NU = 3769;
  bool has_th_whp_warn_tone_pitch_nu() const;
  private:
  bool _internal_has_th_whp_warn_tone_pitch_nu() const;
  public:
  void clear_th_whp_warn_tone_pitch_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_whp_warn_tone_pitch_nu() const;
  void set_th_whp_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_whp_warn_tone_pitch_nu() const;
  void _internal_set_th_whp_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float TH_PING_PONG_DURATION_S = 3893;
  bool has_th_ping_pong_duration_s() const;
  private:
  bool _internal_has_th_ping_pong_duration_s() const;
  public:
  void clear_th_ping_pong_duration_s();
  float th_ping_pong_duration_s() const;
  void set_th_ping_pong_duration_s(float value);
  private:
  float _internal_th_ping_pong_duration_s() const;
  void _internal_set_th_ping_pong_duration_s(float value);
  public:

  // optional uint32 TH_WEAK_VOLUME_NU = 3912;
  bool has_th_weak_volume_nu() const;
  private:
  bool _internal_has_th_weak_volume_nu() const;
  public:
  void clear_th_weak_volume_nu();
  ::PROTOBUF_NAMESPACE_ID::uint32 th_weak_volume_nu() const;
  void set_th_weak_volume_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_th_weak_volume_nu() const;
  void _internal_set_th_weak_volume_nu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pb::eco::signal_header::SignalHeader* ssigheader_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_volume_rear_nu_;
  float th_active_distance_m_;
  float th_whp_low_pause_duration_s_;
  float th_ack_tone_delay_s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_err_tone_pitch_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_lvmd_tone_pitch_nu_;
  float th_whp_high_pause_duration_s_;
  float th_lsca_pause_duration_s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_err_tone_vol_offset_nu_;
  float th_err_tone_duration_s_;
  float th_sound_pulse_len_s_;
  float th_ack_tone_duration_s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_volume_front_nu_;
  bool th_enabled_nu_;
  bool th_different_tones_nu_;
  bool th_ack_active_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uiversionnumber_;
  float th_max_pause_duration_s_;
  float th_lvmd_sound_pulse_len_s_;
  float th_min_pause_duration_s_;
  float th_cont_tone_limit_m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_ack_tone_vol_offset_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_warn_tone_pitch_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_ack_tone_pitch_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_lsca_low_tone_pitch_nu_;
  float th_ack_pause_duration_s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_lsca_high_tone_pitch_nu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_whp_warn_tone_pitch_nu_;
  float th_ping_pong_duration_s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 th_weak_volume_nu_;
  friend struct ::TableStruct_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto;
};
// -------------------------------------------------------------------

class FC_MF_ToneHandler_Params_array_port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port) */ {
 public:
  FC_MF_ToneHandler_Params_array_port();
  virtual ~FC_MF_ToneHandler_Params_array_port();

  FC_MF_ToneHandler_Params_array_port(const FC_MF_ToneHandler_Params_array_port& from);
  FC_MF_ToneHandler_Params_array_port(FC_MF_ToneHandler_Params_array_port&& from) noexcept
    : FC_MF_ToneHandler_Params_array_port() {
    *this = ::std::move(from);
  }

  inline FC_MF_ToneHandler_Params_array_port& operator=(const FC_MF_ToneHandler_Params_array_port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FC_MF_ToneHandler_Params_array_port& operator=(FC_MF_ToneHandler_Params_array_port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FC_MF_ToneHandler_Params_array_port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FC_MF_ToneHandler_Params_array_port* internal_default_instance() {
    return reinterpret_cast<const FC_MF_ToneHandler_Params_array_port*>(
               &_FC_MF_ToneHandler_Params_array_port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FC_MF_ToneHandler_Params_array_port& a, FC_MF_ToneHandler_Params_array_port& b) {
    a.Swap(&b);
  }
  inline void Swap(FC_MF_ToneHandler_Params_array_port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FC_MF_ToneHandler_Params_array_port* New() const final {
    return CreateMaybeMessage<FC_MF_ToneHandler_Params_array_port>(nullptr);
  }

  FC_MF_ToneHandler_Params_array_port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FC_MF_ToneHandler_Params_array_port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FC_MF_ToneHandler_Params_array_port& from);
  void MergeFrom(const FC_MF_ToneHandler_Params_array_port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FC_MF_ToneHandler_Params_array_port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto);
    return ::descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3897,
  };
  // repeated .pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params data = 3897;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params >*
      mutable_data();
  private:
  const ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params& _internal_data(int index) const;
  ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* _internal_add_data();
  public:
  const ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params& data(int index) const;
  ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params >&
      data() const;

  // @@protoc_insertion_point(class_scope:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params > data_;
  friend struct ::TableStruct_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FC_MF_ToneHandler_Params

// optional uint32 uiVersionNumber = 2124;
inline bool FC_MF_ToneHandler_Params::_internal_has_uiversionnumber() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_uiversionnumber() const {
  return _internal_has_uiversionnumber();
}
inline void FC_MF_ToneHandler_Params::clear_uiversionnumber() {
  uiversionnumber_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_uiversionnumber() const {
  return uiversionnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::uiversionnumber() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.uiVersionNumber)
  return _internal_uiversionnumber();
}
inline void FC_MF_ToneHandler_Params::_internal_set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  uiversionnumber_ = value;
}
inline void FC_MF_ToneHandler_Params::set_uiversionnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uiversionnumber(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.uiVersionNumber)
}

// optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
inline bool FC_MF_ToneHandler_Params::_internal_has_ssigheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ssigheader_ != nullptr);
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_ssigheader() const {
  return _internal_has_ssigheader();
}
inline const ::pb::eco::signal_header::SignalHeader& FC_MF_ToneHandler_Params::_internal_ssigheader() const {
  const ::pb::eco::signal_header::SignalHeader* p = ssigheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::eco::signal_header::SignalHeader*>(
      &::pb::eco::signal_header::_SignalHeader_default_instance_);
}
inline const ::pb::eco::signal_header::SignalHeader& FC_MF_ToneHandler_Params::ssigheader() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.sSigHeader)
  return _internal_ssigheader();
}
inline ::pb::eco::signal_header::SignalHeader* FC_MF_ToneHandler_Params::release_ssigheader() {
  // @@protoc_insertion_point(field_release:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.sSigHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::eco::signal_header::SignalHeader* temp = ssigheader_;
  ssigheader_ = nullptr;
  return temp;
}
inline ::pb::eco::signal_header::SignalHeader* FC_MF_ToneHandler_Params::_internal_mutable_ssigheader() {
  _has_bits_[0] |= 0x00000001u;
  if (ssigheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::eco::signal_header::SignalHeader>(GetArenaNoVirtual());
    ssigheader_ = p;
  }
  return ssigheader_;
}
inline ::pb::eco::signal_header::SignalHeader* FC_MF_ToneHandler_Params::mutable_ssigheader() {
  // @@protoc_insertion_point(field_mutable:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.sSigHeader)
  return _internal_mutable_ssigheader();
}
inline void FC_MF_ToneHandler_Params::set_allocated_ssigheader(::pb::eco::signal_header::SignalHeader* ssigheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ssigheader_);
  }
  if (ssigheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ssigheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ssigheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssigheader_ = ssigheader;
  // @@protoc_insertion_point(field_set_allocated:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.sSigHeader)
}

// optional float TH_ACK_TONE_DELAY_S = 698;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_ack_tone_delay_s() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_ack_tone_delay_s() const {
  return _internal_has_th_ack_tone_delay_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_ack_tone_delay_s() {
  th_ack_tone_delay_s_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_ack_tone_delay_s() const {
  return th_ack_tone_delay_s_;
}
inline float FC_MF_ToneHandler_Params::th_ack_tone_delay_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_DELAY_S)
  return _internal_th_ack_tone_delay_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_ack_tone_delay_s(float value) {
  _has_bits_[0] |= 0x00000010u;
  th_ack_tone_delay_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_ack_tone_delay_s(float value) {
  _internal_set_th_ack_tone_delay_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_DELAY_S)
}

// optional float TH_ACK_TONE_DURATION_S = 1607;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_ack_tone_duration_s() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_ack_tone_duration_s() const {
  return _internal_has_th_ack_tone_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_ack_tone_duration_s() {
  th_ack_tone_duration_s_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_ack_tone_duration_s() const {
  return th_ack_tone_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_ack_tone_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_DURATION_S)
  return _internal_th_ack_tone_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_ack_tone_duration_s(float value) {
  _has_bits_[0] |= 0x00001000u;
  th_ack_tone_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_ack_tone_duration_s(float value) {
  _internal_set_th_ack_tone_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_DURATION_S)
}

// optional float TH_ERR_TONE_DURATION_S = 1381;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_err_tone_duration_s() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_err_tone_duration_s() const {
  return _internal_has_th_err_tone_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_err_tone_duration_s() {
  th_err_tone_duration_s_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_err_tone_duration_s() const {
  return th_err_tone_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_err_tone_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ERR_TONE_DURATION_S)
  return _internal_th_err_tone_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_err_tone_duration_s(float value) {
  _has_bits_[0] |= 0x00000400u;
  th_err_tone_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_err_tone_duration_s(float value) {
  _internal_set_th_err_tone_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ERR_TONE_DURATION_S)
}

// optional float TH_SOUND_PULSE_LEN_S = 1397;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_sound_pulse_len_s() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_sound_pulse_len_s() const {
  return _internal_has_th_sound_pulse_len_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_sound_pulse_len_s() {
  th_sound_pulse_len_s_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_sound_pulse_len_s() const {
  return th_sound_pulse_len_s_;
}
inline float FC_MF_ToneHandler_Params::th_sound_pulse_len_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_SOUND_PULSE_LEN_S)
  return _internal_th_sound_pulse_len_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_sound_pulse_len_s(float value) {
  _has_bits_[0] |= 0x00000800u;
  th_sound_pulse_len_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_sound_pulse_len_s(float value) {
  _internal_set_th_sound_pulse_len_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_SOUND_PULSE_LEN_S)
}

// optional float TH_LVMD_SOUND_PULSE_LEN_S = 2219;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_lvmd_sound_pulse_len_s() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_lvmd_sound_pulse_len_s() const {
  return _internal_has_th_lvmd_sound_pulse_len_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_lvmd_sound_pulse_len_s() {
  th_lvmd_sound_pulse_len_s_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_lvmd_sound_pulse_len_s() const {
  return th_lvmd_sound_pulse_len_s_;
}
inline float FC_MF_ToneHandler_Params::th_lvmd_sound_pulse_len_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LVMD_SOUND_PULSE_LEN_S)
  return _internal_th_lvmd_sound_pulse_len_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_lvmd_sound_pulse_len_s(float value) {
  _has_bits_[0] |= 0x00080000u;
  th_lvmd_sound_pulse_len_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_lvmd_sound_pulse_len_s(float value) {
  _internal_set_th_lvmd_sound_pulse_len_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LVMD_SOUND_PULSE_LEN_S)
}

// optional float TH_CONT_TONE_LIMIT_M = 2652;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_cont_tone_limit_m() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_cont_tone_limit_m() const {
  return _internal_has_th_cont_tone_limit_m();
}
inline void FC_MF_ToneHandler_Params::clear_th_cont_tone_limit_m() {
  th_cont_tone_limit_m_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_cont_tone_limit_m() const {
  return th_cont_tone_limit_m_;
}
inline float FC_MF_ToneHandler_Params::th_cont_tone_limit_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_CONT_TONE_LIMIT_M)
  return _internal_th_cont_tone_limit_m();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_cont_tone_limit_m(float value) {
  _has_bits_[0] |= 0x00200000u;
  th_cont_tone_limit_m_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_cont_tone_limit_m(float value) {
  _internal_set_th_cont_tone_limit_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_CONT_TONE_LIMIT_M)
}

// optional float TH_PING_PONG_DURATION_S = 3893;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_ping_pong_duration_s() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_ping_pong_duration_s() const {
  return _internal_has_th_ping_pong_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_ping_pong_duration_s() {
  th_ping_pong_duration_s_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_ping_pong_duration_s() const {
  return th_ping_pong_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_ping_pong_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_PING_PONG_DURATION_S)
  return _internal_th_ping_pong_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_ping_pong_duration_s(float value) {
  _has_bits_[0] |= 0x20000000u;
  th_ping_pong_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_ping_pong_duration_s(float value) {
  _internal_set_th_ping_pong_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_PING_PONG_DURATION_S)
}

// optional float TH_MIN_PAUSE_DURATION_S = 2633;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_min_pause_duration_s() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_min_pause_duration_s() const {
  return _internal_has_th_min_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_min_pause_duration_s() {
  th_min_pause_duration_s_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_min_pause_duration_s() const {
  return th_min_pause_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_min_pause_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_MIN_PAUSE_DURATION_S)
  return _internal_th_min_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_min_pause_duration_s(float value) {
  _has_bits_[0] |= 0x00100000u;
  th_min_pause_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_min_pause_duration_s(float value) {
  _internal_set_th_min_pause_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_MIN_PAUSE_DURATION_S)
}

// optional float TH_MAX_PAUSE_DURATION_S = 2156;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_max_pause_duration_s() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_max_pause_duration_s() const {
  return _internal_has_th_max_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_max_pause_duration_s() {
  th_max_pause_duration_s_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_max_pause_duration_s() const {
  return th_max_pause_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_max_pause_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_MAX_PAUSE_DURATION_S)
  return _internal_th_max_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_max_pause_duration_s(float value) {
  _has_bits_[0] |= 0x00040000u;
  th_max_pause_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_max_pause_duration_s(float value) {
  _internal_set_th_max_pause_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_MAX_PAUSE_DURATION_S)
}

// optional float TH_ACK_PAUSE_DURATION_S = 3467;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_ack_pause_duration_s() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_ack_pause_duration_s() const {
  return _internal_has_th_ack_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_ack_pause_duration_s() {
  th_ack_pause_duration_s_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_ack_pause_duration_s() const {
  return th_ack_pause_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_ack_pause_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_PAUSE_DURATION_S)
  return _internal_th_ack_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_ack_pause_duration_s(float value) {
  _has_bits_[0] |= 0x04000000u;
  th_ack_pause_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_ack_pause_duration_s(float value) {
  _internal_set_th_ack_pause_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_PAUSE_DURATION_S)
}

// optional float TH_WHP_LOW_PAUSE_DURATION_S = 420;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_whp_low_pause_duration_s() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_whp_low_pause_duration_s() const {
  return _internal_has_th_whp_low_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_whp_low_pause_duration_s() {
  th_whp_low_pause_duration_s_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_whp_low_pause_duration_s() const {
  return th_whp_low_pause_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_whp_low_pause_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WHP_LOW_PAUSE_DURATION_S)
  return _internal_th_whp_low_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_whp_low_pause_duration_s(float value) {
  _has_bits_[0] |= 0x00000008u;
  th_whp_low_pause_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_whp_low_pause_duration_s(float value) {
  _internal_set_th_whp_low_pause_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WHP_LOW_PAUSE_DURATION_S)
}

// optional float TH_WHP_HIGH_PAUSE_DURATION_S = 1335;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_whp_high_pause_duration_s() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_whp_high_pause_duration_s() const {
  return _internal_has_th_whp_high_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_whp_high_pause_duration_s() {
  th_whp_high_pause_duration_s_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_whp_high_pause_duration_s() const {
  return th_whp_high_pause_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_whp_high_pause_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WHP_HIGH_PAUSE_DURATION_S)
  return _internal_th_whp_high_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_whp_high_pause_duration_s(float value) {
  _has_bits_[0] |= 0x00000080u;
  th_whp_high_pause_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_whp_high_pause_duration_s(float value) {
  _internal_set_th_whp_high_pause_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WHP_HIGH_PAUSE_DURATION_S)
}

// optional float TH_LSCA_PAUSE_DURATION_S = 1350;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_lsca_pause_duration_s() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_lsca_pause_duration_s() const {
  return _internal_has_th_lsca_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::clear_th_lsca_pause_duration_s() {
  th_lsca_pause_duration_s_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_lsca_pause_duration_s() const {
  return th_lsca_pause_duration_s_;
}
inline float FC_MF_ToneHandler_Params::th_lsca_pause_duration_s() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LSCA_PAUSE_DURATION_S)
  return _internal_th_lsca_pause_duration_s();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_lsca_pause_duration_s(float value) {
  _has_bits_[0] |= 0x00000100u;
  th_lsca_pause_duration_s_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_lsca_pause_duration_s(float value) {
  _internal_set_th_lsca_pause_duration_s(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LSCA_PAUSE_DURATION_S)
}

// optional float TH_ACTIVE_DISTANCE_M = 376;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_active_distance_m() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_active_distance_m() const {
  return _internal_has_th_active_distance_m();
}
inline void FC_MF_ToneHandler_Params::clear_th_active_distance_m() {
  th_active_distance_m_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float FC_MF_ToneHandler_Params::_internal_th_active_distance_m() const {
  return th_active_distance_m_;
}
inline float FC_MF_ToneHandler_Params::th_active_distance_m() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACTIVE_DISTANCE_M)
  return _internal_th_active_distance_m();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_active_distance_m(float value) {
  _has_bits_[0] |= 0x00000004u;
  th_active_distance_m_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_active_distance_m(float value) {
  _internal_set_th_active_distance_m(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACTIVE_DISTANCE_M)
}

// optional uint32 TH_VOLUME_FRONT_NU = 1642;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_volume_front_nu() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_volume_front_nu() const {
  return _internal_has_th_volume_front_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_volume_front_nu() {
  th_volume_front_nu_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_volume_front_nu() const {
  return th_volume_front_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_volume_front_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_VOLUME_FRONT_NU)
  return _internal_th_volume_front_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_volume_front_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  th_volume_front_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_volume_front_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_volume_front_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_VOLUME_FRONT_NU)
}

// optional uint32 TH_VOLUME_REAR_NU = 319;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_volume_rear_nu() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_volume_rear_nu() const {
  return _internal_has_th_volume_rear_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_volume_rear_nu() {
  th_volume_rear_nu_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_volume_rear_nu() const {
  return th_volume_rear_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_volume_rear_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_VOLUME_REAR_NU)
  return _internal_th_volume_rear_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_volume_rear_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  th_volume_rear_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_volume_rear_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_volume_rear_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_VOLUME_REAR_NU)
}

// optional uint32 TH_ACK_TONE_PITCH_NU = 3030;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_ack_tone_pitch_nu() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_ack_tone_pitch_nu() const {
  return _internal_has_th_ack_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_ack_tone_pitch_nu() {
  th_ack_tone_pitch_nu_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_ack_tone_pitch_nu() const {
  return th_ack_tone_pitch_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_ack_tone_pitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_PITCH_NU)
  return _internal_th_ack_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_ack_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  th_ack_tone_pitch_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_ack_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_ack_tone_pitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_PITCH_NU)
}

// optional uint32 TH_ACK_TONE_VOL_OFFSET_NU = 2676;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_ack_tone_vol_offset_nu() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_ack_tone_vol_offset_nu() const {
  return _internal_has_th_ack_tone_vol_offset_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_ack_tone_vol_offset_nu() {
  th_ack_tone_vol_offset_nu_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_ack_tone_vol_offset_nu() const {
  return th_ack_tone_vol_offset_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_ack_tone_vol_offset_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_VOL_OFFSET_NU)
  return _internal_th_ack_tone_vol_offset_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_ack_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  th_ack_tone_vol_offset_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_ack_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_ack_tone_vol_offset_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_TONE_VOL_OFFSET_NU)
}

// optional uint32 TH_ERR_TONE_VOL_OFFSET_NU = 1367;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_err_tone_vol_offset_nu() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_err_tone_vol_offset_nu() const {
  return _internal_has_th_err_tone_vol_offset_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_err_tone_vol_offset_nu() {
  th_err_tone_vol_offset_nu_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_err_tone_vol_offset_nu() const {
  return th_err_tone_vol_offset_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_err_tone_vol_offset_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ERR_TONE_VOL_OFFSET_NU)
  return _internal_th_err_tone_vol_offset_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_err_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  th_err_tone_vol_offset_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_err_tone_vol_offset_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_err_tone_vol_offset_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ERR_TONE_VOL_OFFSET_NU)
}

// optional uint32 TH_ERR_TONE_PITCH_NU = 1091;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_err_tone_pitch_nu() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_err_tone_pitch_nu() const {
  return _internal_has_th_err_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_err_tone_pitch_nu() {
  th_err_tone_pitch_nu_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_err_tone_pitch_nu() const {
  return th_err_tone_pitch_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_err_tone_pitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ERR_TONE_PITCH_NU)
  return _internal_th_err_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_err_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  th_err_tone_pitch_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_err_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_err_tone_pitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ERR_TONE_PITCH_NU)
}

// optional uint32 TH_WARN_TONE_PITCH_NU = 3000;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_warn_tone_pitch_nu() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_warn_tone_pitch_nu() const {
  return _internal_has_th_warn_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_warn_tone_pitch_nu() {
  th_warn_tone_pitch_nu_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_warn_tone_pitch_nu() const {
  return th_warn_tone_pitch_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_warn_tone_pitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WARN_TONE_PITCH_NU)
  return _internal_th_warn_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  th_warn_tone_pitch_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_warn_tone_pitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WARN_TONE_PITCH_NU)
}

// optional uint32 TH_WHP_WARN_TONE_PITCH_NU = 3769;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_whp_warn_tone_pitch_nu() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_whp_warn_tone_pitch_nu() const {
  return _internal_has_th_whp_warn_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_whp_warn_tone_pitch_nu() {
  th_whp_warn_tone_pitch_nu_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_whp_warn_tone_pitch_nu() const {
  return th_whp_warn_tone_pitch_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_whp_warn_tone_pitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WHP_WARN_TONE_PITCH_NU)
  return _internal_th_whp_warn_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_whp_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  th_whp_warn_tone_pitch_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_whp_warn_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_whp_warn_tone_pitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WHP_WARN_TONE_PITCH_NU)
}

// optional uint32 TH_LSCA_LOW_TONE_PITCH_NU = 3342;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_lsca_low_tone_pitch_nu() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_lsca_low_tone_pitch_nu() const {
  return _internal_has_th_lsca_low_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_lsca_low_tone_pitch_nu() {
  th_lsca_low_tone_pitch_nu_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_lsca_low_tone_pitch_nu() const {
  return th_lsca_low_tone_pitch_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_lsca_low_tone_pitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LSCA_LOW_TONE_PITCH_NU)
  return _internal_th_lsca_low_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_lsca_low_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  th_lsca_low_tone_pitch_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_lsca_low_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_lsca_low_tone_pitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LSCA_LOW_TONE_PITCH_NU)
}

// optional uint32 TH_LSCA_HIGH_TONE_PITCH_NU = 3641;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_lsca_high_tone_pitch_nu() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_lsca_high_tone_pitch_nu() const {
  return _internal_has_th_lsca_high_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_lsca_high_tone_pitch_nu() {
  th_lsca_high_tone_pitch_nu_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_lsca_high_tone_pitch_nu() const {
  return th_lsca_high_tone_pitch_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_lsca_high_tone_pitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LSCA_HIGH_TONE_PITCH_NU)
  return _internal_th_lsca_high_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_lsca_high_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  th_lsca_high_tone_pitch_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_lsca_high_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_lsca_high_tone_pitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LSCA_HIGH_TONE_PITCH_NU)
}

// optional uint32 TH_LVMD_TONE_PITCH_NU = 1145;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_lvmd_tone_pitch_nu() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_lvmd_tone_pitch_nu() const {
  return _internal_has_th_lvmd_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_lvmd_tone_pitch_nu() {
  th_lvmd_tone_pitch_nu_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_lvmd_tone_pitch_nu() const {
  return th_lvmd_tone_pitch_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_lvmd_tone_pitch_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LVMD_TONE_PITCH_NU)
  return _internal_th_lvmd_tone_pitch_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_lvmd_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  th_lvmd_tone_pitch_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_lvmd_tone_pitch_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_lvmd_tone_pitch_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_LVMD_TONE_PITCH_NU)
}

// optional uint32 TH_WEAK_VOLUME_NU = 3912;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_weak_volume_nu() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_weak_volume_nu() const {
  return _internal_has_th_weak_volume_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_weak_volume_nu() {
  th_weak_volume_nu_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::_internal_th_weak_volume_nu() const {
  return th_weak_volume_nu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FC_MF_ToneHandler_Params::th_weak_volume_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WEAK_VOLUME_NU)
  return _internal_th_weak_volume_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_weak_volume_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  th_weak_volume_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_weak_volume_nu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_th_weak_volume_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_WEAK_VOLUME_NU)
}

// optional bool TH_ENABLED_NU = 463;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_enabled_nu() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_enabled_nu() const {
  return _internal_has_th_enabled_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_enabled_nu() {
  th_enabled_nu_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool FC_MF_ToneHandler_Params::_internal_th_enabled_nu() const {
  return th_enabled_nu_;
}
inline bool FC_MF_ToneHandler_Params::th_enabled_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ENABLED_NU)
  return _internal_th_enabled_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_enabled_nu(bool value) {
  _has_bits_[0] |= 0x00004000u;
  th_enabled_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_enabled_nu(bool value) {
  _internal_set_th_enabled_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ENABLED_NU)
}

// optional bool TH_DIFFERENT_TONES_NU = 4019;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_different_tones_nu() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_different_tones_nu() const {
  return _internal_has_th_different_tones_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_different_tones_nu() {
  th_different_tones_nu_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool FC_MF_ToneHandler_Params::_internal_th_different_tones_nu() const {
  return th_different_tones_nu_;
}
inline bool FC_MF_ToneHandler_Params::th_different_tones_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_DIFFERENT_TONES_NU)
  return _internal_th_different_tones_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_different_tones_nu(bool value) {
  _has_bits_[0] |= 0x00008000u;
  th_different_tones_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_different_tones_nu(bool value) {
  _internal_set_th_different_tones_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_DIFFERENT_TONES_NU)
}

// optional bool TH_ACK_ACTIVE_NU = 1227;
inline bool FC_MF_ToneHandler_Params::_internal_has_th_ack_active_nu() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FC_MF_ToneHandler_Params::has_th_ack_active_nu() const {
  return _internal_has_th_ack_active_nu();
}
inline void FC_MF_ToneHandler_Params::clear_th_ack_active_nu() {
  th_ack_active_nu_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool FC_MF_ToneHandler_Params::_internal_th_ack_active_nu() const {
  return th_ack_active_nu_;
}
inline bool FC_MF_ToneHandler_Params::th_ack_active_nu() const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_ACTIVE_NU)
  return _internal_th_ack_active_nu();
}
inline void FC_MF_ToneHandler_Params::_internal_set_th_ack_active_nu(bool value) {
  _has_bits_[0] |= 0x00010000u;
  th_ack_active_nu_ = value;
}
inline void FC_MF_ToneHandler_Params::set_th_ack_active_nu(bool value) {
  _internal_set_th_ack_active_nu(value);
  // @@protoc_insertion_point(field_set:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params.TH_ACK_ACTIVE_NU)
}

// -------------------------------------------------------------------

// FC_MF_ToneHandler_Params_array_port

// repeated .pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params data = 3897;
inline int FC_MF_ToneHandler_Params_array_port::_internal_data_size() const {
  return data_.size();
}
inline int FC_MF_ToneHandler_Params_array_port::data_size() const {
  return _internal_data_size();
}
inline void FC_MF_ToneHandler_Params_array_port::clear_data() {
  data_.Clear();
}
inline ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* FC_MF_ToneHandler_Params_array_port::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params >*
FC_MF_ToneHandler_Params_array_port::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port.data)
  return &data_;
}
inline const ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params& FC_MF_ToneHandler_Params_array_port::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params& FC_MF_ToneHandler_Params_array_port::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port.data)
  return _internal_data(index);
}
inline ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* FC_MF_ToneHandler_Params_array_port::_internal_add_data() {
  return data_.Add();
}
inline ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* FC_MF_ToneHandler_Params_array_port::add_data() {
  // @@protoc_insertion_point(field_add:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params >&
FC_MF_ToneHandler_Params_array_port::data() const {
  // @@protoc_insertion_point(field_list:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fc_mf_tone_handler_params
}  // namespace mf_tonh
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto
