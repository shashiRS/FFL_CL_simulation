// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_tonh/fc_mf_tone_handler_params.proto

#include "mf_tonh/fc_mf_tone_handler_params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_eco_2fsignal_5fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto;
namespace pb {
namespace mf_tonh {
namespace fc_mf_tone_handler_params {
class FC_MF_ToneHandler_ParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_MF_ToneHandler_Params> _instance;
} _FC_MF_ToneHandler_Params_default_instance_;
class FC_MF_ToneHandler_Params_array_portDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FC_MF_ToneHandler_Params_array_port> _instance;
} _FC_MF_ToneHandler_Params_array_port_default_instance_;
}  // namespace fc_mf_tone_handler_params
}  // namespace mf_tonh
}  // namespace pb
static void InitDefaultsscc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_tonh::fc_mf_tone_handler_params::_FC_MF_ToneHandler_Params_default_instance_;
    new (ptr) ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto}, {
      &scc_info_SignalHeader_eco_2fsignal_5fheader_2eproto.base,}};

static void InitDefaultsscc_info_FC_MF_ToneHandler_Params_array_port_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::mf_tonh::fc_mf_tone_handler_params::_FC_MF_ToneHandler_Params_array_port_default_instance_;
    new (ptr) ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FC_MF_ToneHandler_Params_array_port_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FC_MF_ToneHandler_Params_array_port_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto}, {
      &scc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, uiversionnumber_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, ssigheader_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_ack_tone_delay_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_ack_tone_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_err_tone_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_sound_pulse_len_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_lvmd_sound_pulse_len_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_cont_tone_limit_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_ping_pong_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_min_pause_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_max_pause_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_ack_pause_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_whp_low_pause_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_whp_high_pause_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_lsca_pause_duration_s_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_active_distance_m_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_volume_front_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_volume_rear_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_ack_tone_pitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_ack_tone_vol_offset_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_err_tone_vol_offset_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_err_tone_pitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_warn_tone_pitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_whp_warn_tone_pitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_lsca_low_tone_pitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_lsca_high_tone_pitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_lvmd_tone_pitch_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_weak_volume_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_enabled_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_different_tones_nu_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params, th_ack_active_nu_),
  17,
  0,
  4,
  12,
  10,
  11,
  19,
  21,
  29,
  20,
  18,
  26,
  3,
  7,
  8,
  2,
  13,
  1,
  24,
  22,
  9,
  5,
  23,
  28,
  25,
  27,
  6,
  30,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port, data_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, sizeof(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params)},
  { 67, 73, sizeof(::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_tonh::fc_mf_tone_handler_params::_FC_MF_ToneHandler_Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::mf_tonh::fc_mf_tone_handler_params::_FC_MF_ToneHandler_Params_array_port_default_instance_),
};

const char descriptor_table_protodef_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'mf_tonh/fc_mf_tone_handler_params.prot"
  "o\022$pb.mf_tonh.fc_mf_tone_handler_params\032"
  "\027eco/signal_header.proto\"\241\010\n\030FC_MF_ToneH"
  "andler_Params\022\030\n\017uiVersionNumber\030\314\020 \001(\r\022"
  "7\n\nsSigHeader\030\211\010 \001(\0132\".pb.eco.signal_hea"
  "der.SignalHeader\022\034\n\023TH_ACK_TONE_DELAY_S\030"
  "\272\005 \001(\002\022\037\n\026TH_ACK_TONE_DURATION_S\030\307\014 \001(\002\022"
  "\037\n\026TH_ERR_TONE_DURATION_S\030\345\n \001(\002\022\035\n\024TH_S"
  "OUND_PULSE_LEN_S\030\365\n \001(\002\022\"\n\031TH_LVMD_SOUND"
  "_PULSE_LEN_S\030\253\021 \001(\002\022\035\n\024TH_CONT_TONE_LIMI"
  "T_M\030\334\024 \001(\002\022 \n\027TH_PING_PONG_DURATION_S\030\265\036"
  " \001(\002\022 \n\027TH_MIN_PAUSE_DURATION_S\030\311\024 \001(\002\022 "
  "\n\027TH_MAX_PAUSE_DURATION_S\030\354\020 \001(\002\022 \n\027TH_A"
  "CK_PAUSE_DURATION_S\030\213\033 \001(\002\022$\n\033TH_WHP_LOW"
  "_PAUSE_DURATION_S\030\244\003 \001(\002\022%\n\034TH_WHP_HIGH_"
  "PAUSE_DURATION_S\030\267\n \001(\002\022!\n\030TH_LSCA_PAUSE"
  "_DURATION_S\030\306\n \001(\002\022\035\n\024TH_ACTIVE_DISTANCE"
  "_M\030\370\002 \001(\002\022\033\n\022TH_VOLUME_FRONT_NU\030\352\014 \001(\r\022\032"
  "\n\021TH_VOLUME_REAR_NU\030\277\002 \001(\r\022\035\n\024TH_ACK_TON"
  "E_PITCH_NU\030\326\027 \001(\r\022\"\n\031TH_ACK_TONE_VOL_OFF"
  "SET_NU\030\364\024 \001(\r\022\"\n\031TH_ERR_TONE_VOL_OFFSET_"
  "NU\030\327\n \001(\r\022\035\n\024TH_ERR_TONE_PITCH_NU\030\303\010 \001(\r"
  "\022\036\n\025TH_WARN_TONE_PITCH_NU\030\270\027 \001(\r\022\"\n\031TH_W"
  "HP_WARN_TONE_PITCH_NU\030\271\035 \001(\r\022\"\n\031TH_LSCA_"
  "LOW_TONE_PITCH_NU\030\216\032 \001(\r\022#\n\032TH_LSCA_HIGH"
  "_TONE_PITCH_NU\030\271\034 \001(\r\022\036\n\025TH_LVMD_TONE_PI"
  "TCH_NU\030\371\010 \001(\r\022\032\n\021TH_WEAK_VOLUME_NU\030\310\036 \001("
  "\r\022\026\n\rTH_ENABLED_NU\030\317\003 \001(\010\022\036\n\025TH_DIFFEREN"
  "T_TONES_NU\030\263\037 \001(\010\022\031\n\020TH_ACK_ACTIVE_NU\030\313\t"
  " \001(\010\"t\n#FC_MF_ToneHandler_Params_array_p"
  "ort\022M\n\004data\030\271\036 \003(\0132>.pb.mf_tonh.fc_mf_to"
  "ne_handler_params.FC_MF_ToneHandler_Para"
  "ms"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_deps[1] = {
  &::descriptor_table_eco_2fsignal_5fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_sccs[2] = {
  &scc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.base,
  &scc_info_FC_MF_ToneHandler_Params_array_port_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_once;
static bool descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto = {
  &descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_initialized, descriptor_table_protodef_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto, "mf_tonh/fc_mf_tone_handler_params.proto", 1282,
  &descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_once, descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_sccs, descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto::offsets,
  file_level_metadata_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto, 2, file_level_enum_descriptors_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto, file_level_service_descriptors_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto), true);
namespace pb {
namespace mf_tonh {
namespace fc_mf_tone_handler_params {

// ===================================================================

void FC_MF_ToneHandler_Params::InitAsDefaultInstance() {
  ::pb::mf_tonh::fc_mf_tone_handler_params::_FC_MF_ToneHandler_Params_default_instance_._instance.get_mutable()->ssigheader_ = const_cast< ::pb::eco::signal_header::SignalHeader*>(
      ::pb::eco::signal_header::SignalHeader::internal_default_instance());
}
class FC_MF_ToneHandler_Params::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_MF_ToneHandler_Params>()._has_bits_);
  static void set_has_uiversionnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::pb::eco::signal_header::SignalHeader& ssigheader(const FC_MF_ToneHandler_Params* msg);
  static void set_has_ssigheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_th_ack_tone_delay_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_th_ack_tone_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_th_err_tone_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_th_sound_pulse_len_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_th_lvmd_sound_pulse_len_s(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_th_cont_tone_limit_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_th_ping_pong_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_th_min_pause_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_th_max_pause_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_th_ack_pause_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_th_whp_low_pause_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_th_whp_high_pause_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_th_lsca_pause_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_th_active_distance_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_th_volume_front_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_th_volume_rear_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_th_ack_tone_pitch_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_th_ack_tone_vol_offset_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_th_err_tone_vol_offset_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_th_err_tone_pitch_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_th_warn_tone_pitch_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_th_whp_warn_tone_pitch_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_th_lsca_low_tone_pitch_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_th_lsca_high_tone_pitch_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_th_lvmd_tone_pitch_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_th_weak_volume_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_th_enabled_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_th_different_tones_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_th_ack_active_nu(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::pb::eco::signal_header::SignalHeader&
FC_MF_ToneHandler_Params::_Internal::ssigheader(const FC_MF_ToneHandler_Params* msg) {
  return *msg->ssigheader_;
}
void FC_MF_ToneHandler_Params::clear_ssigheader() {
  if (ssigheader_ != nullptr) ssigheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FC_MF_ToneHandler_Params::FC_MF_ToneHandler_Params()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
}
FC_MF_ToneHandler_Params::FC_MF_ToneHandler_Params(const FC_MF_ToneHandler_Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ssigheader()) {
    ssigheader_ = new ::pb::eco::signal_header::SignalHeader(*from.ssigheader_);
  } else {
    ssigheader_ = nullptr;
  }
  ::memcpy(&th_volume_rear_nu_, &from.th_volume_rear_nu_,
    static_cast<size_t>(reinterpret_cast<char*>(&th_weak_volume_nu_) -
    reinterpret_cast<char*>(&th_volume_rear_nu_)) + sizeof(th_weak_volume_nu_));
  // @@protoc_insertion_point(copy_constructor:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
}

void FC_MF_ToneHandler_Params::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.base);
  ::memset(&ssigheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&th_weak_volume_nu_) -
      reinterpret_cast<char*>(&ssigheader_)) + sizeof(th_weak_volume_nu_));
}

FC_MF_ToneHandler_Params::~FC_MF_ToneHandler_Params() {
  // @@protoc_insertion_point(destructor:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  SharedDtor();
}

void FC_MF_ToneHandler_Params::SharedDtor() {
  if (this != internal_default_instance()) delete ssigheader_;
}

void FC_MF_ToneHandler_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_MF_ToneHandler_Params& FC_MF_ToneHandler_Params::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_MF_ToneHandler_Params_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_MF_ToneHandler_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ssigheader_ != nullptr);
    ssigheader_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&th_volume_rear_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&th_whp_high_pause_duration_s_) -
        reinterpret_cast<char*>(&th_volume_rear_nu_)) + sizeof(th_whp_high_pause_duration_s_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&th_lsca_pause_duration_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&th_different_tones_nu_) -
        reinterpret_cast<char*>(&th_lsca_pause_duration_s_)) + sizeof(th_different_tones_nu_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&th_ack_active_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&th_warn_tone_pitch_nu_) -
        reinterpret_cast<char*>(&th_ack_active_nu_)) + sizeof(th_warn_tone_pitch_nu_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&th_ack_tone_pitch_nu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&th_weak_volume_nu_) -
        reinterpret_cast<char*>(&th_ack_tone_pitch_nu_)) + sizeof(th_weak_volume_nu_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_MF_ToneHandler_Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 TH_VOLUME_REAR_NU = 319;
      case 319:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_th_volume_rear_nu(&has_bits);
          th_volume_rear_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TH_ACTIVE_DISTANCE_M = 376;
      case 376:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_th_active_distance_m(&has_bits);
          th_active_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TH_WHP_LOW_PAUSE_DURATION_S = 420;
      case 420:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_th_whp_low_pause_duration_s(&has_bits);
          th_whp_low_pause_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool TH_ENABLED_NU = 463;
      case 463:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_th_enabled_nu(&has_bits);
          th_enabled_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TH_ACK_TONE_DELAY_S = 698;
      case 698:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_th_ack_tone_delay_s(&has_bits);
          th_ack_tone_delay_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
      case 1033:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ssigheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_ERR_TONE_PITCH_NU = 1091;
      case 1091:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_th_err_tone_pitch_nu(&has_bits);
          th_err_tone_pitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_LVMD_TONE_PITCH_NU = 1145;
      case 1145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_th_lvmd_tone_pitch_nu(&has_bits);
          th_lvmd_tone_pitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool TH_ACK_ACTIVE_NU = 1227;
      case 1227:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_th_ack_active_nu(&has_bits);
          th_ack_active_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TH_WHP_HIGH_PAUSE_DURATION_S = 1335;
      case 1335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_th_whp_high_pause_duration_s(&has_bits);
          th_whp_high_pause_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TH_LSCA_PAUSE_DURATION_S = 1350;
      case 1350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_th_lsca_pause_duration_s(&has_bits);
          th_lsca_pause_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_ERR_TONE_VOL_OFFSET_NU = 1367;
      case 1367:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_th_err_tone_vol_offset_nu(&has_bits);
          th_err_tone_vol_offset_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TH_ERR_TONE_DURATION_S = 1381;
      case 1381:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_th_err_tone_duration_s(&has_bits);
          th_err_tone_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TH_SOUND_PULSE_LEN_S = 1397;
      case 1397:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_th_sound_pulse_len_s(&has_bits);
          th_sound_pulse_len_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TH_ACK_TONE_DURATION_S = 1607;
      case 1607:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_th_ack_tone_duration_s(&has_bits);
          th_ack_tone_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_VOLUME_FRONT_NU = 1642;
      case 1642:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_th_volume_front_nu(&has_bits);
          th_volume_front_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uiVersionNumber = 2124;
      case 2124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uiversionnumber(&has_bits);
          uiversionnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TH_MAX_PAUSE_DURATION_S = 2156;
      case 2156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_th_max_pause_duration_s(&has_bits);
          th_max_pause_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TH_LVMD_SOUND_PULSE_LEN_S = 2219;
      case 2219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_th_lvmd_sound_pulse_len_s(&has_bits);
          th_lvmd_sound_pulse_len_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TH_MIN_PAUSE_DURATION_S = 2633;
      case 2633:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_th_min_pause_duration_s(&has_bits);
          th_min_pause_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float TH_CONT_TONE_LIMIT_M = 2652;
      case 2652:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_th_cont_tone_limit_m(&has_bits);
          th_cont_tone_limit_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_ACK_TONE_VOL_OFFSET_NU = 2676;
      case 2676:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_th_ack_tone_vol_offset_nu(&has_bits);
          th_ack_tone_vol_offset_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_WARN_TONE_PITCH_NU = 3000;
      case 3000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_th_warn_tone_pitch_nu(&has_bits);
          th_warn_tone_pitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_ACK_TONE_PITCH_NU = 3030;
      case 3030:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_th_ack_tone_pitch_nu(&has_bits);
          th_ack_tone_pitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_LSCA_LOW_TONE_PITCH_NU = 3342;
      case 3342:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_th_lsca_low_tone_pitch_nu(&has_bits);
          th_lsca_low_tone_pitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TH_ACK_PAUSE_DURATION_S = 3467;
      case 3467:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_th_ack_pause_duration_s(&has_bits);
          th_ack_pause_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_LSCA_HIGH_TONE_PITCH_NU = 3641;
      case 3641:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_th_lsca_high_tone_pitch_nu(&has_bits);
          th_lsca_high_tone_pitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_WHP_WARN_TONE_PITCH_NU = 3769;
      case 3769:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_th_whp_warn_tone_pitch_nu(&has_bits);
          th_whp_warn_tone_pitch_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float TH_PING_PONG_DURATION_S = 3893;
      case 3893:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_th_ping_pong_duration_s(&has_bits);
          th_ping_pong_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 TH_WEAK_VOLUME_NU = 3912;
      case 3912:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_th_weak_volume_nu(&has_bits);
          th_weak_volume_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool TH_DIFFERENT_TONES_NU = 4019;
      case 4019:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_th_different_tones_nu(&has_bits);
          th_different_tones_nu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_MF_ToneHandler_Params::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 TH_VOLUME_REAR_NU = 319;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(319, this->_internal_th_volume_rear_nu(), target);
  }

  // optional float TH_ACTIVE_DISTANCE_M = 376;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(376, this->_internal_th_active_distance_m(), target);
  }

  // optional float TH_WHP_LOW_PAUSE_DURATION_S = 420;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(420, this->_internal_th_whp_low_pause_duration_s(), target);
  }

  // optional bool TH_ENABLED_NU = 463;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(463, this->_internal_th_enabled_nu(), target);
  }

  // optional float TH_ACK_TONE_DELAY_S = 698;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(698, this->_internal_th_ack_tone_delay_s(), target);
  }

  // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1033, _Internal::ssigheader(this), target, stream);
  }

  // optional uint32 TH_ERR_TONE_PITCH_NU = 1091;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1091, this->_internal_th_err_tone_pitch_nu(), target);
  }

  // optional uint32 TH_LVMD_TONE_PITCH_NU = 1145;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1145, this->_internal_th_lvmd_tone_pitch_nu(), target);
  }

  // optional bool TH_ACK_ACTIVE_NU = 1227;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1227, this->_internal_th_ack_active_nu(), target);
  }

  // optional float TH_WHP_HIGH_PAUSE_DURATION_S = 1335;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1335, this->_internal_th_whp_high_pause_duration_s(), target);
  }

  // optional float TH_LSCA_PAUSE_DURATION_S = 1350;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1350, this->_internal_th_lsca_pause_duration_s(), target);
  }

  // optional uint32 TH_ERR_TONE_VOL_OFFSET_NU = 1367;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1367, this->_internal_th_err_tone_vol_offset_nu(), target);
  }

  // optional float TH_ERR_TONE_DURATION_S = 1381;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1381, this->_internal_th_err_tone_duration_s(), target);
  }

  // optional float TH_SOUND_PULSE_LEN_S = 1397;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1397, this->_internal_th_sound_pulse_len_s(), target);
  }

  // optional float TH_ACK_TONE_DURATION_S = 1607;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1607, this->_internal_th_ack_tone_duration_s(), target);
  }

  // optional uint32 TH_VOLUME_FRONT_NU = 1642;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1642, this->_internal_th_volume_front_nu(), target);
  }

  // optional uint32 uiVersionNumber = 2124;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2124, this->_internal_uiversionnumber(), target);
  }

  // optional float TH_MAX_PAUSE_DURATION_S = 2156;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2156, this->_internal_th_max_pause_duration_s(), target);
  }

  // optional float TH_LVMD_SOUND_PULSE_LEN_S = 2219;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2219, this->_internal_th_lvmd_sound_pulse_len_s(), target);
  }

  // optional float TH_MIN_PAUSE_DURATION_S = 2633;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2633, this->_internal_th_min_pause_duration_s(), target);
  }

  // optional float TH_CONT_TONE_LIMIT_M = 2652;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2652, this->_internal_th_cont_tone_limit_m(), target);
  }

  // optional uint32 TH_ACK_TONE_VOL_OFFSET_NU = 2676;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2676, this->_internal_th_ack_tone_vol_offset_nu(), target);
  }

  // optional uint32 TH_WARN_TONE_PITCH_NU = 3000;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3000, this->_internal_th_warn_tone_pitch_nu(), target);
  }

  // optional uint32 TH_ACK_TONE_PITCH_NU = 3030;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3030, this->_internal_th_ack_tone_pitch_nu(), target);
  }

  // optional uint32 TH_LSCA_LOW_TONE_PITCH_NU = 3342;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3342, this->_internal_th_lsca_low_tone_pitch_nu(), target);
  }

  // optional float TH_ACK_PAUSE_DURATION_S = 3467;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3467, this->_internal_th_ack_pause_duration_s(), target);
  }

  // optional uint32 TH_LSCA_HIGH_TONE_PITCH_NU = 3641;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3641, this->_internal_th_lsca_high_tone_pitch_nu(), target);
  }

  // optional uint32 TH_WHP_WARN_TONE_PITCH_NU = 3769;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3769, this->_internal_th_whp_warn_tone_pitch_nu(), target);
  }

  // optional float TH_PING_PONG_DURATION_S = 3893;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3893, this->_internal_th_ping_pong_duration_s(), target);
  }

  // optional uint32 TH_WEAK_VOLUME_NU = 3912;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3912, this->_internal_th_weak_volume_nu(), target);
  }

  // optional bool TH_DIFFERENT_TONES_NU = 4019;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4019, this->_internal_th_different_tones_nu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  return target;
}

size_t FC_MF_ToneHandler_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .pb.eco.signal_header.SignalHeader sSigHeader = 1033;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ssigheader_);
    }

    // optional uint32 TH_VOLUME_REAR_NU = 319;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_volume_rear_nu());
    }

    // optional float TH_ACTIVE_DISTANCE_M = 376;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float TH_WHP_LOW_PAUSE_DURATION_S = 420;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float TH_ACK_TONE_DELAY_S = 698;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional uint32 TH_ERR_TONE_PITCH_NU = 1091;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_err_tone_pitch_nu());
    }

    // optional uint32 TH_LVMD_TONE_PITCH_NU = 1145;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_lvmd_tone_pitch_nu());
    }

    // optional float TH_WHP_HIGH_PAUSE_DURATION_S = 1335;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float TH_LSCA_PAUSE_DURATION_S = 1350;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 TH_ERR_TONE_VOL_OFFSET_NU = 1367;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_err_tone_vol_offset_nu());
    }

    // optional float TH_ERR_TONE_DURATION_S = 1381;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float TH_SOUND_PULSE_LEN_S = 1397;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional float TH_ACK_TONE_DURATION_S = 1607;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional uint32 TH_VOLUME_FRONT_NU = 1642;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_volume_front_nu());
    }

    // optional bool TH_ENABLED_NU = 463;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool TH_DIFFERENT_TONES_NU = 4019;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool TH_ACK_ACTIVE_NU = 1227;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 uiVersionNumber = 2124;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uiversionnumber());
    }

    // optional float TH_MAX_PAUSE_DURATION_S = 2156;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3 + 4;
    }

    // optional float TH_LVMD_SOUND_PULSE_LEN_S = 2219;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3 + 4;
    }

    // optional float TH_MIN_PAUSE_DURATION_S = 2633;
    if (cached_has_bits & 0x00100000u) {
      total_size += 3 + 4;
    }

    // optional float TH_CONT_TONE_LIMIT_M = 2652;
    if (cached_has_bits & 0x00200000u) {
      total_size += 3 + 4;
    }

    // optional uint32 TH_ACK_TONE_VOL_OFFSET_NU = 2676;
    if (cached_has_bits & 0x00400000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_ack_tone_vol_offset_nu());
    }

    // optional uint32 TH_WARN_TONE_PITCH_NU = 3000;
    if (cached_has_bits & 0x00800000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_warn_tone_pitch_nu());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional uint32 TH_ACK_TONE_PITCH_NU = 3030;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_ack_tone_pitch_nu());
    }

    // optional uint32 TH_LSCA_LOW_TONE_PITCH_NU = 3342;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_lsca_low_tone_pitch_nu());
    }

    // optional float TH_ACK_PAUSE_DURATION_S = 3467;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3 + 4;
    }

    // optional uint32 TH_LSCA_HIGH_TONE_PITCH_NU = 3641;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_lsca_high_tone_pitch_nu());
    }

    // optional uint32 TH_WHP_WARN_TONE_PITCH_NU = 3769;
    if (cached_has_bits & 0x10000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_whp_warn_tone_pitch_nu());
    }

    // optional float TH_PING_PONG_DURATION_S = 3893;
    if (cached_has_bits & 0x20000000u) {
      total_size += 3 + 4;
    }

    // optional uint32 TH_WEAK_VOLUME_NU = 3912;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_th_weak_volume_nu());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_MF_ToneHandler_Params::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_MF_ToneHandler_Params* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_MF_ToneHandler_Params>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
    MergeFrom(*source);
  }
}

void FC_MF_ToneHandler_Params::MergeFrom(const FC_MF_ToneHandler_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ssigheader()->::pb::eco::signal_header::SignalHeader::MergeFrom(from._internal_ssigheader());
    }
    if (cached_has_bits & 0x00000002u) {
      th_volume_rear_nu_ = from.th_volume_rear_nu_;
    }
    if (cached_has_bits & 0x00000004u) {
      th_active_distance_m_ = from.th_active_distance_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      th_whp_low_pause_duration_s_ = from.th_whp_low_pause_duration_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      th_ack_tone_delay_s_ = from.th_ack_tone_delay_s_;
    }
    if (cached_has_bits & 0x00000020u) {
      th_err_tone_pitch_nu_ = from.th_err_tone_pitch_nu_;
    }
    if (cached_has_bits & 0x00000040u) {
      th_lvmd_tone_pitch_nu_ = from.th_lvmd_tone_pitch_nu_;
    }
    if (cached_has_bits & 0x00000080u) {
      th_whp_high_pause_duration_s_ = from.th_whp_high_pause_duration_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      th_lsca_pause_duration_s_ = from.th_lsca_pause_duration_s_;
    }
    if (cached_has_bits & 0x00000200u) {
      th_err_tone_vol_offset_nu_ = from.th_err_tone_vol_offset_nu_;
    }
    if (cached_has_bits & 0x00000400u) {
      th_err_tone_duration_s_ = from.th_err_tone_duration_s_;
    }
    if (cached_has_bits & 0x00000800u) {
      th_sound_pulse_len_s_ = from.th_sound_pulse_len_s_;
    }
    if (cached_has_bits & 0x00001000u) {
      th_ack_tone_duration_s_ = from.th_ack_tone_duration_s_;
    }
    if (cached_has_bits & 0x00002000u) {
      th_volume_front_nu_ = from.th_volume_front_nu_;
    }
    if (cached_has_bits & 0x00004000u) {
      th_enabled_nu_ = from.th_enabled_nu_;
    }
    if (cached_has_bits & 0x00008000u) {
      th_different_tones_nu_ = from.th_different_tones_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      th_ack_active_nu_ = from.th_ack_active_nu_;
    }
    if (cached_has_bits & 0x00020000u) {
      uiversionnumber_ = from.uiversionnumber_;
    }
    if (cached_has_bits & 0x00040000u) {
      th_max_pause_duration_s_ = from.th_max_pause_duration_s_;
    }
    if (cached_has_bits & 0x00080000u) {
      th_lvmd_sound_pulse_len_s_ = from.th_lvmd_sound_pulse_len_s_;
    }
    if (cached_has_bits & 0x00100000u) {
      th_min_pause_duration_s_ = from.th_min_pause_duration_s_;
    }
    if (cached_has_bits & 0x00200000u) {
      th_cont_tone_limit_m_ = from.th_cont_tone_limit_m_;
    }
    if (cached_has_bits & 0x00400000u) {
      th_ack_tone_vol_offset_nu_ = from.th_ack_tone_vol_offset_nu_;
    }
    if (cached_has_bits & 0x00800000u) {
      th_warn_tone_pitch_nu_ = from.th_warn_tone_pitch_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      th_ack_tone_pitch_nu_ = from.th_ack_tone_pitch_nu_;
    }
    if (cached_has_bits & 0x02000000u) {
      th_lsca_low_tone_pitch_nu_ = from.th_lsca_low_tone_pitch_nu_;
    }
    if (cached_has_bits & 0x04000000u) {
      th_ack_pause_duration_s_ = from.th_ack_pause_duration_s_;
    }
    if (cached_has_bits & 0x08000000u) {
      th_lsca_high_tone_pitch_nu_ = from.th_lsca_high_tone_pitch_nu_;
    }
    if (cached_has_bits & 0x10000000u) {
      th_whp_warn_tone_pitch_nu_ = from.th_whp_warn_tone_pitch_nu_;
    }
    if (cached_has_bits & 0x20000000u) {
      th_ping_pong_duration_s_ = from.th_ping_pong_duration_s_;
    }
    if (cached_has_bits & 0x40000000u) {
      th_weak_volume_nu_ = from.th_weak_volume_nu_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FC_MF_ToneHandler_Params::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_MF_ToneHandler_Params::CopyFrom(const FC_MF_ToneHandler_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_MF_ToneHandler_Params::IsInitialized() const {
  return true;
}

void FC_MF_ToneHandler_Params::InternalSwap(FC_MF_ToneHandler_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ssigheader_, other->ssigheader_);
  swap(th_volume_rear_nu_, other->th_volume_rear_nu_);
  swap(th_active_distance_m_, other->th_active_distance_m_);
  swap(th_whp_low_pause_duration_s_, other->th_whp_low_pause_duration_s_);
  swap(th_ack_tone_delay_s_, other->th_ack_tone_delay_s_);
  swap(th_err_tone_pitch_nu_, other->th_err_tone_pitch_nu_);
  swap(th_lvmd_tone_pitch_nu_, other->th_lvmd_tone_pitch_nu_);
  swap(th_whp_high_pause_duration_s_, other->th_whp_high_pause_duration_s_);
  swap(th_lsca_pause_duration_s_, other->th_lsca_pause_duration_s_);
  swap(th_err_tone_vol_offset_nu_, other->th_err_tone_vol_offset_nu_);
  swap(th_err_tone_duration_s_, other->th_err_tone_duration_s_);
  swap(th_sound_pulse_len_s_, other->th_sound_pulse_len_s_);
  swap(th_ack_tone_duration_s_, other->th_ack_tone_duration_s_);
  swap(th_volume_front_nu_, other->th_volume_front_nu_);
  swap(th_enabled_nu_, other->th_enabled_nu_);
  swap(th_different_tones_nu_, other->th_different_tones_nu_);
  swap(th_ack_active_nu_, other->th_ack_active_nu_);
  swap(uiversionnumber_, other->uiversionnumber_);
  swap(th_max_pause_duration_s_, other->th_max_pause_duration_s_);
  swap(th_lvmd_sound_pulse_len_s_, other->th_lvmd_sound_pulse_len_s_);
  swap(th_min_pause_duration_s_, other->th_min_pause_duration_s_);
  swap(th_cont_tone_limit_m_, other->th_cont_tone_limit_m_);
  swap(th_ack_tone_vol_offset_nu_, other->th_ack_tone_vol_offset_nu_);
  swap(th_warn_tone_pitch_nu_, other->th_warn_tone_pitch_nu_);
  swap(th_ack_tone_pitch_nu_, other->th_ack_tone_pitch_nu_);
  swap(th_lsca_low_tone_pitch_nu_, other->th_lsca_low_tone_pitch_nu_);
  swap(th_ack_pause_duration_s_, other->th_ack_pause_duration_s_);
  swap(th_lsca_high_tone_pitch_nu_, other->th_lsca_high_tone_pitch_nu_);
  swap(th_whp_warn_tone_pitch_nu_, other->th_whp_warn_tone_pitch_nu_);
  swap(th_ping_pong_duration_s_, other->th_ping_pong_duration_s_);
  swap(th_weak_volume_nu_, other->th_weak_volume_nu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_MF_ToneHandler_Params::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FC_MF_ToneHandler_Params_array_port::InitAsDefaultInstance() {
}
class FC_MF_ToneHandler_Params_array_port::_Internal {
 public:
  using HasBits = decltype(std::declval<FC_MF_ToneHandler_Params_array_port>()._has_bits_);
};

FC_MF_ToneHandler_Params_array_port::FC_MF_ToneHandler_Params_array_port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
}
FC_MF_ToneHandler_Params_array_port::FC_MF_ToneHandler_Params_array_port(const FC_MF_ToneHandler_Params_array_port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
}

void FC_MF_ToneHandler_Params_array_port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FC_MF_ToneHandler_Params_array_port_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.base);
}

FC_MF_ToneHandler_Params_array_port::~FC_MF_ToneHandler_Params_array_port() {
  // @@protoc_insertion_point(destructor:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  SharedDtor();
}

void FC_MF_ToneHandler_Params_array_port::SharedDtor() {
}

void FC_MF_ToneHandler_Params_array_port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FC_MF_ToneHandler_Params_array_port& FC_MF_ToneHandler_Params_array_port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FC_MF_ToneHandler_Params_array_port_mf_5ftonh_2ffc_5fmf_5ftone_5fhandler_5fparams_2eproto.base);
  return *internal_default_instance();
}


void FC_MF_ToneHandler_Params_array_port::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FC_MF_ToneHandler_Params_array_port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params data = 3897;
      case 3897:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_add_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FC_MF_ToneHandler_Params_array_port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params data = 3897;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3897, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  return target;
}

size_t FC_MF_ToneHandler_Params_array_port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params data = 3897;
  total_size += 3UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FC_MF_ToneHandler_Params_array_port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  const FC_MF_ToneHandler_Params_array_port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FC_MF_ToneHandler_Params_array_port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
    MergeFrom(*source);
  }
}

void FC_MF_ToneHandler_Params_array_port::MergeFrom(const FC_MF_ToneHandler_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FC_MF_ToneHandler_Params_array_port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FC_MF_ToneHandler_Params_array_port::CopyFrom(const FC_MF_ToneHandler_Params_array_port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.mf_tonh.fc_mf_tone_handler_params.FC_MF_ToneHandler_Params_array_port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FC_MF_ToneHandler_Params_array_port::IsInitialized() const {
  return true;
}

void FC_MF_ToneHandler_Params_array_port::InternalSwap(FC_MF_ToneHandler_Params_array_port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FC_MF_ToneHandler_Params_array_port::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fc_mf_tone_handler_params
}  // namespace mf_tonh
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params* Arena::CreateMaybeMessage< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port* Arena::CreateMaybeMessage< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port >(Arena* arena) {
  return Arena::CreateInternal< ::pb::mf_tonh::fc_mf_tone_handler_params::FC_MF_ToneHandler_Params_array_port >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
