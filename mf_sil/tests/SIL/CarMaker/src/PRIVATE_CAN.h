/* $Id$ */
/*
******************************************************************************
**
**  PLEASE DO NOT EDIT THIS FILE!
**
******************************************************************************
**  PRIVATE_CAN.h
**  This file was automatically generated by CANiogen 2.4.3 for:
**
**  CarMaker - Version 6.0
**  Vehicle Dynamic Simulation Toolkit
**
**  IPG Automotive GmbH
**  Bannwaldallee 60             Phone  +49.721.98520.0
**  76185 Karlsruhe              Fax    +49.721.98520.99
**  Germany                      WWW    http://www.ipg.de
**
**  Created: 2022/04/26 08:44:58 (uib41902@IALN981W)
******************************************************************************
*/

#if !defined(__PRIVATE_CAN_H__)
#define __PRIVATE_CAN_H__

#if defined(DSPACE)
# include <ipgrt.h>
# include <dsio.h>
#endif

#if defined(XENO) || defined(LVRT)
# define _ISOC99_SOURCE 1
# include <math.h>
# include <string.h>
# include <mio.h>
#endif
#if defined(LVRT)
# include <nio.h>
#endif

#include <MathUtils.h>


#ifdef __cplusplus
extern "C" {
#endif

#pragma warning( push )
#pragma warning ( disable: 4065)
#pragma warning ( disable: 4244)


struct CAN_Msg;
struct CANFD_Msg;

#if defined(_DS1005)
/* DataDictionary / APO do not support long long on DS1005 */
#   define DDefLLong(d, n, u, v, p)
#   define DDefULLong(d, n, u, v, p)
#endif
#define LONG_LONG			long long
#define UNSIGNED_LONG_LONG		unsigned long long


/* Signal states */
enum {
    PRIVATE_CAN_SState_None = 0,
    PRIVATE_CAN_SState_Valid,
    PRIVATE_CAN_SState_Invalid,
    PRIVATE_CAN_SState_Unavailable,
    PRIVATE_CAN_SState_Undefined,
    PRIVATE_CAN_SState_Error,
    PRIVATE_CAN_SState_nStates
};

extern int PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_nStates];


/* Input Vector for CAN communication */
typedef struct {
    int DeclareQuants;
    int DeclareQuantsRaw;
    int DeclareQuantsState;

    /* ECU AP_HMI */
    struct tPRIVATE_CAN_AP_HMI {
	/* CAN Msg 0x4a5 (APHMIOut1) */
	int APHMIOut1_DLC;
	struct tPRIVATE_CAN_AP_HMI_APHMIOut1 {
	    unsigned char       Alive_APHMIOut1;
	    unsigned char       Alive_APHMIOut1_Raw;
	    char                Alive_APHMIOut1_State;
	    float               APHMIOutBatteryLevelRem;
	    unsigned char       APHMIOutBatteryLevelRem_Raw;
	    char                APHMIOutBatteryLevelRem_State;
	    unsigned char       APHMIOutBlindSpotActivated;
	    unsigned char       APHMIOutBlindSpotActivated_Raw;
	    char                APHMIOutBlindSpotActivated_State;
	    unsigned char       APHMIOutScreenHU;
	    unsigned char       APHMIOutScreenHU_Raw;
	    char                APHMIOutScreenHU_State;
	    unsigned char       APHMIOutScreenRem;
	    unsigned char       APHMIOutScreenRem_Raw;
	    char                APHMIOutScreenRem_State;
	    unsigned char       APHMIOutUserActionHU;
	    unsigned char       APHMIOutUserActionHU_Raw;
	    char                APHMIOutUserActionHU_State;
	    unsigned char       APHMIOutUserActionHUCounter;
	    unsigned char       APHMIOutUserActionHUCounter_Raw;
	    char                APHMIOutUserActionHUCounter_State;
	    unsigned char       APHMIOutUserActionRem;
	    unsigned char       APHMIOutUserActionRem_Raw;
	    char                APHMIOutUserActionRem_State;
	    unsigned char       APHMIOutUserActionRemCounter;
	    unsigned char       APHMIOutUserActionRemCounter_Raw;
	    char                APHMIOutUserActionRemCounter_State;
	    unsigned char       APHMIOutUserSVScreenRequest;
	    unsigned char       APHMIOutUserSVScreenRequest_Raw;
	    char                APHMIOutUserSVScreenRequest_State;
	    unsigned char       CRC_APHMIOut1;
	    unsigned char       CRC_APHMIOut1_Raw;
	    char                CRC_APHMIOut1_State;
	} APHMIOut1;

	/* CAN Msg 0x4ac (APHMIOut2) */
	int APHMIOut2_DLC;
	struct tPRIVATE_CAN_AP_HMI_APHMIOut2 {
	    unsigned char       Alive_APHMIOut2;
	    unsigned char       Alive_APHMIOut2_Raw;
	    char                Alive_APHMIOut2_State;
	    unsigned char       APHMIOutBTDevConnected;
	    unsigned char       APHMIOutBTDevConnected_Raw;
	    char                APHMIOutBTDevConnected_State;
	    unsigned char       APHMIOutBTDevPaired;
	    unsigned char       APHMIOutBTDevPaired_Raw;
	    char                APHMIOutBTDevPaired_State;
	    unsigned char       APHMIOutRemAlive;
	    unsigned char       APHMIOutRemAlive_Raw;
	    char                APHMIOutRemAlive_State;
	    unsigned char       APHMIOutRemDeadMansSwitchBtn;
	    unsigned char       APHMIOutRemDeadMansSwitchBtn_Raw;
	    char                APHMIOutRemDeadMansSwitchBtn_State;
	    unsigned short      APHMIOutRemFingerPosX;
	    unsigned short      APHMIOutRemFingerPosX_Raw;
	    char                APHMIOutRemFingerPosX_State;
	    unsigned short      APHMIOutRemFingerPosY;
	    unsigned short      APHMIOutRemFingerPosY_Raw;
	    char                APHMIOutRemFingerPosY_State;
	    unsigned char       CRC_APHMIOut2;
	    unsigned char       CRC_APHMIOut2_Raw;
	    char                CRC_APHMIOut2_State;
	} APHMIOut2;

	/* CAN Msg 0x4ad (APHMIOut3) */
	int APHMIOut3_DLC;
	struct tPRIVATE_CAN_AP_HMI_APHMIOut3 {
	    unsigned char       APHMIOutGesture_Code;
	    unsigned char       APHMIOutGesture_Code_Raw;
	    char                APHMIOutGesture_Code_State;
	    unsigned char       APHMIOutGesture_Counter;
	    unsigned char       APHMIOutGesture_Counter_Raw;
	    char                APHMIOutGesture_Counter_State;
	    unsigned char       APHMIOutGesture_FingerCount;
	    unsigned char       APHMIOutGesture_FingerCount_Raw;
	    char                APHMIOutGesture_FingerCount_State;
	    unsigned short      APHMIOutGesture_XPos;
	    unsigned short      APHMIOutGesture_XPos_Raw;
	    char                APHMIOutGesture_XPos_State;
	    unsigned short      APHMIOutGesture_YPos;
	    unsigned short      APHMIOutGesture_YPos_Raw;
	    char                APHMIOutGesture_YPos_State;
	    unsigned char       CRC_APHMIOut3;
	    unsigned char       CRC_APHMIOut3_Raw;
	    char                CRC_APHMIOut3_State;
	} APHMIOut3;

	/* CAN Msg 0x4ae (APHMIOut4) */
	int APHMIOut4_DLC;
	struct tPRIVATE_CAN_AP_HMI_APHMIOut4 {
	    unsigned short      APHMIOutRemScreenResX;
	    unsigned short      APHMIOutRemScreenResX_Raw;
	    char                APHMIOutRemScreenResX_State;
	    unsigned short      APHMIOutRemScreenResY;
	    unsigned short      APHMIOutRemScreenResY_Raw;
	    char                APHMIOutRemScreenResY_State;
	} APHMIOut4;
    } AP_HMI;

    /* ECU SalvatorX */
    struct tPRIVATE_CAN_SalvatorX {
	/* CAN Msg 0x2f0 (CANandGWVersion) */
	int CANandGWVersion_DLC;
	struct tPRIVATE_CAN_SalvatorX_CANandGWVersion {
	    unsigned char       APprivateCANVersionMayor;
	    unsigned char       APprivateCANVersionMayor_Raw;
	    char                APprivateCANVersionMayor_State;
	    unsigned char       APprivateCANVersionMinor;
	    unsigned char       APprivateCANVersionMinor_Raw;
	    char                APprivateCANVersionMinor_State;
	    unsigned char       CONTI_CANVersionMayor;
	    unsigned char       CONTI_CANVersionMayor_Raw;
	    char                CONTI_CANVersionMayor_State;
	    unsigned char       CONTI_CANVersionMinor;
	    unsigned char       CONTI_CANVersionMinor_Raw;
	    char                CONTI_CANVersionMinor_State;
	} CANandGWVersion;

	/* CAN Msg 0x4a0 (APHMIInGeneral1) */
	int APHMIInGeneral1_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInGeneral1 {
	    unsigned char       Alive_APHMIInGeneral1;
	    unsigned char       Alive_APHMIInGeneral1_Raw;
	    char                Alive_APHMIInGeneral1_State;
	    unsigned char       APHMIGeneralAVGType;
	    unsigned char       APHMIGeneralAVGType_Raw;
	    char                APHMIGeneralAVGType_State;
	    unsigned char       APHMIGeneralBtnBackwardPoss;
	    unsigned char       APHMIGeneralBtnBackwardPoss_Raw;
	    char                APHMIGeneralBtnBackwardPoss_State;
	    unsigned char       APHMIGeneralBtnForwardPoss;
	    unsigned char       APHMIGeneralBtnForwardPoss_Raw;
	    char                APHMIGeneralBtnForwardPoss_State;
	    unsigned char       APHMIGeneralContinuePoss;
	    unsigned char       APHMIGeneralContinuePoss_Raw;
	    char                APHMIGeneralContinuePoss_State;
	    unsigned char       APHMIGeneralCurrentGear;
	    unsigned char       APHMIGeneralCurrentGear_Raw;
	    char                APHMIGeneralCurrentGear_State;
	    float               APHMIGeneralDistToStop;
	    unsigned char       APHMIGeneralDistToStop_Raw;
	    char                APHMIGeneralDistToStop_State;
	    unsigned char       APHMIGeneralDrivingDir;
	    unsigned char       APHMIGeneralDrivingDir_Raw;
	    char                APHMIGeneralDrivingDir_State;
	    unsigned char       APHMIGeneralFullyAutomParkPoss;
	    unsigned char       APHMIGeneralFullyAutomParkPoss_Raw;
	    char                APHMIGeneralFullyAutomParkPoss_State;
	    unsigned char       APHMIGeneralMaxSpeed10Warning;
	    unsigned char       APHMIGeneralMaxSpeed10Warning_Raw;
	    char                APHMIGeneralMaxSpeed10Warning_State;
	    unsigned char       APHMIGeneralMessage;
	    unsigned char       APHMIGeneralMessage_Raw;
	    char                APHMIGeneralMessage_State;
	    unsigned char       APHMIGeneralParkInOutFinished;
	    unsigned char       APHMIGeneralParkInOutFinished_Raw;
	    char                APHMIGeneralParkInOutFinished_State;
	    unsigned char       APHMIGeneralParkInPoss;
	    unsigned char       APHMIGeneralParkInPoss_Raw;
	    char                APHMIGeneralParkInPoss_State;
	    unsigned char       APHMIGeneralParkOutPoss;
	    unsigned char       APHMIGeneralParkOutPoss_Raw;
	    char                APHMIGeneralParkOutPoss_State;
	    unsigned char       APHMIGeneralRemAppActive;
	    unsigned char       APHMIGeneralRemAppActive_Raw;
	    char                APHMIGeneralRemAppActive_State;
	    unsigned char       APHMIGeneralRemCtrlPoss;
	    unsigned char       APHMIGeneralRemCtrlPoss_Raw;
	    char                APHMIGeneralRemCtrlPoss_State;
	    unsigned char       APHMIGeneralRemCtrlSelected;
	    unsigned char       APHMIGeneralRemCtrlSelected_Raw;
	    char                APHMIGeneralRemCtrlSelected_State;
	    unsigned char       APHMIGeneralRemKeyPoss;
	    unsigned char       APHMIGeneralRemKeyPoss_Raw;
	    char                APHMIGeneralRemKeyPoss_State;
	    unsigned char       APHMIGeneralRemManPoss;
	    unsigned char       APHMIGeneralRemManPoss_Raw;
	    char                APHMIGeneralRemManPoss_State;
	    unsigned char       APHMIGeneralRevAssistPoss;
	    unsigned char       APHMIGeneralRevAssistPoss_Raw;
	    char                APHMIGeneralRevAssistPoss_State;
	    unsigned char       APHMIGeneralScreen;
	    unsigned char       APHMIGeneralScreen_Raw;
	    char                APHMIGeneralScreen_State;
	    unsigned char       APHMIGeneralSemiAutomParkPoss;
	    unsigned char       APHMIGeneralSemiAutomParkPoss_Raw;
	    char                APHMIGeneralSemiAutomParkPoss_State;
	    unsigned char       APHMIGeneralSVPoss;
	    unsigned char       APHMIGeneralSVPoss_Raw;
	    char                APHMIGeneralSVPoss_State;
	    unsigned char       APHMIGeneralUndoPoss;
	    unsigned char       APHMIGeneralUndoPoss_Raw;
	    char                APHMIGeneralUndoPoss_State;
	    unsigned char       APHMIParkingProcedureCtrlState;
	    unsigned char       APHMIParkingProcedureCtrlState_Raw;
	    char                APHMIParkingProcedureCtrlState_State;
	    unsigned char       CRC_APHMIInGeneral1;
	    unsigned char       CRC_APHMIInGeneral1_Raw;
	    char                CRC_APHMIInGeneral1_State;
	} APHMIInGeneral1;

	/* CAN Msg 0x4a1 (APHMIInSituationLeft) */
	int APHMIInSituationLeft_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInSituationLeft {
	    unsigned char       Alive_APHMIInSituationLeft;
	    unsigned char       Alive_APHMIInSituationLeft_Raw;
	    char                Alive_APHMIInSituationLeft_State;
	    unsigned char       CRC_APHMIInSituationLeft;
	    unsigned char       CRC_APHMIInSituationLeft_Raw;
	    char                CRC_APHMIInSituationLeft_State;
	    unsigned char       ParkEgoRelativePosLeft;
	    unsigned char       ParkEgoRelativePosLeft_Raw;
	    char                ParkEgoRelativePosLeft_State;
	    unsigned char       ParkingSlotFreeLeft;
	    unsigned char       ParkingSlotFreeLeft_Raw;
	    char                ParkingSlotFreeLeft_State;
	    unsigned char       ParkingSlotPossDirectionLeft;
	    unsigned char       ParkingSlotPossDirectionLeft_Raw;
	    char                ParkingSlotPossDirectionLeft_State;
	    unsigned char       ParkingSlotPossOrientationLeft;
	    unsigned char       ParkingSlotPossOrientationLeft_Raw;
	    char                ParkingSlotPossOrientationLeft_State;
	    unsigned char       ParkingSlotScannedLeft;
	    unsigned char       ParkingSlotScannedLeft_Raw;
	    char                ParkingSlotScannedLeft_State;
	    unsigned char       ParkingSlotSelDirectionLeft;
	    unsigned char       ParkingSlotSelDirectionLeft_Raw;
	    char                ParkingSlotSelDirectionLeft_State;
	    unsigned char       ParkingSlotSelectedLeft;
	    unsigned char       ParkingSlotSelectedLeft_Raw;
	    char                ParkingSlotSelectedLeft_State;
	    unsigned char       ParkingSlotSelOrientationLeft;
	    unsigned char       ParkingSlotSelOrientationLeft_Raw;
	    char                ParkingSlotSelOrientationLeft_State;
	    unsigned char       ParkSituationLeft;
	    unsigned char       ParkSituationLeft_Raw;
	    char                ParkSituationLeft_State;
	} APHMIInSituationLeft;

	/* CAN Msg 0x4a2 (APHMIInSituationRight) */
	int APHMIInSituationRight_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInSituationRight {
	    unsigned char       Alive_APHMIInSituationRight;
	    unsigned char       Alive_APHMIInSituationRight_Raw;
	    char                Alive_APHMIInSituationRight_State;
	    unsigned char       CRC_APHMIInSituationRight;
	    unsigned char       CRC_APHMIInSituationRight_Raw;
	    char                CRC_APHMIInSituationRight_State;
	    unsigned char       ParkEgoRelativePosRight;
	    unsigned char       ParkEgoRelativePosRight_Raw;
	    char                ParkEgoRelativePosRight_State;
	    unsigned char       ParkingSlotFreeRight;
	    unsigned char       ParkingSlotFreeRight_Raw;
	    char                ParkingSlotFreeRight_State;
	    unsigned char       ParkingSlotPossDirectionRight;
	    unsigned char       ParkingSlotPossDirectionRight_Raw;
	    char                ParkingSlotPossDirectionRight_State;
	    unsigned char       ParkingSlotPossOrientationRight;
	    unsigned char       ParkingSlotPossOrientationRight_Raw;
	    char                ParkingSlotPossOrientationRight_State;
	    unsigned char       ParkingSlotScannedRight;
	    unsigned char       ParkingSlotScannedRight_Raw;
	    char                ParkingSlotScannedRight_State;
	    unsigned char       ParkingSlotSelDirectionRight;
	    unsigned char       ParkingSlotSelDirectionRight_Raw;
	    char                ParkingSlotSelDirectionRight_State;
	    unsigned char       ParkingSlotSelectedRight;
	    unsigned char       ParkingSlotSelectedRight_Raw;
	    char                ParkingSlotSelectedRight_State;
	    unsigned char       ParkingSlotSelOrientationRight;
	    unsigned char       ParkingSlotSelOrientationRight_Raw;
	    char                ParkingSlotSelOrientationRight_State;
	    unsigned char       ParkSituationRight;
	    unsigned char       ParkSituationRight_Raw;
	    char                ParkSituationRight_State;
	} APHMIInSituationRight;

	/* CAN Msg 0x4a3 (APHMIInSituationFront) */
	int APHMIInSituationFront_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInSituationFront {
	    unsigned char       Alive_APHMIInSituationFront;
	    unsigned char       Alive_APHMIInSituationFront_Raw;
	    char                Alive_APHMIInSituationFront_State;
	    unsigned char       CRC_APHMIInSituationFront;
	    unsigned char       CRC_APHMIInSituationFront_Raw;
	    char                CRC_APHMIInSituationFront_State;
	    unsigned char       ParkingSlotFreeFront;
	    unsigned char       ParkingSlotFreeFront_Raw;
	    char                ParkingSlotFreeFront_State;
	    unsigned char       ParkingSlotPossDirectionFront;
	    unsigned char       ParkingSlotPossDirectionFront_Raw;
	    char                ParkingSlotPossDirectionFront_State;
	    unsigned char       ParkingSlotPossOrientationFront;
	    unsigned char       ParkingSlotPossOrientationFront_Raw;
	    char                ParkingSlotPossOrientationFront_State;
	    unsigned char       ParkingSlotScannedFront;
	    unsigned char       ParkingSlotScannedFront_Raw;
	    char                ParkingSlotScannedFront_State;
	    unsigned char       ParkingSlotSelDirectionFront;
	    unsigned char       ParkingSlotSelDirectionFront_Raw;
	    char                ParkingSlotSelDirectionFront_State;
	    unsigned char       ParkingSlotSelectedFront;
	    unsigned char       ParkingSlotSelectedFront_Raw;
	    char                ParkingSlotSelectedFront_State;
	    unsigned char       ParkingSlotSelOrientationFront;
	    unsigned char       ParkingSlotSelOrientationFront_Raw;
	    char                ParkingSlotSelOrientationFront_State;
	    unsigned char       ParkSituationFront;
	    unsigned char       ParkSituationFront_Raw;
	    char                ParkSituationFront_State;
	} APHMIInSituationFront;

	/* CAN Msg 0x4a4 (APHMIInSituationRear) */
	int APHMIInSituationRear_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInSituationRear {
	    unsigned char       Alive_APHMIInSituationRear;
	    unsigned char       Alive_APHMIInSituationRear_Raw;
	    char                Alive_APHMIInSituationRear_State;
	    unsigned char       CRC_APHMIInSituationRear;
	    unsigned char       CRC_APHMIInSituationRear_Raw;
	    char                CRC_APHMIInSituationRear_State;
	    unsigned char       ParkingSlotFreeRear;
	    unsigned char       ParkingSlotFreeRear_Raw;
	    char                ParkingSlotFreeRear_State;
	    unsigned char       ParkingSlotPossDirectionRear;
	    unsigned char       ParkingSlotPossDirectionRear_Raw;
	    char                ParkingSlotPossDirectionRear_State;
	    unsigned char       ParkingSlotPossOrientationRear;
	    unsigned char       ParkingSlotPossOrientationRear_Raw;
	    char                ParkingSlotPossOrientationRear_State;
	    unsigned char       ParkingSlotScannedRear;
	    unsigned char       ParkingSlotScannedRear_Raw;
	    char                ParkingSlotScannedRear_State;
	    unsigned char       ParkingSlotSelDirectionRear;
	    unsigned char       ParkingSlotSelDirectionRear_Raw;
	    char                ParkingSlotSelDirectionRear_State;
	    unsigned char       ParkingSlotSelectedRear;
	    unsigned char       ParkingSlotSelectedRear_Raw;
	    char                ParkingSlotSelectedRear_State;
	    unsigned char       ParkingSlotSelOrientationRear;
	    unsigned char       ParkingSlotSelOrientationRear_Raw;
	    char                ParkingSlotSelOrientationRear_State;
	    unsigned char       ParkSituationRear;
	    unsigned char       ParkSituationRear_Raw;
	    char                ParkSituationRear_State;
	} APHMIInSituationRear;

	/* CAN Msg 0x4a6 (APHMIInParkDistViewLow) */
	int APHMIInParkDistViewLow_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInParkDistViewLow {
	    unsigned char       Alive_APHMIInParkDistViewLow;
	    unsigned char       Alive_APHMIInParkDistViewLow_Raw;
	    char                Alive_APHMIInParkDistViewLow_State;
	    unsigned char       CRC_APHMIInParkDistViewLow;
	    unsigned char       CRC_APHMIInParkDistViewLow_Raw;
	    char                CRC_APHMIInParkDistViewLow_State;
	    unsigned char       USSDistanceFrontCenterLeft;
	    unsigned char       USSDistanceFrontCenterLeft_Raw;
	    char                USSDistanceFrontCenterLeft_State;
	    unsigned char       USSDistanceFrontCenterRight;
	    unsigned char       USSDistanceFrontCenterRight_Raw;
	    char                USSDistanceFrontCenterRight_State;
	    unsigned char       USSDistanceFrontLeft;
	    unsigned char       USSDistanceFrontLeft_Raw;
	    char                USSDistanceFrontLeft_State;
	    unsigned char       USSDistanceFrontRight;
	    unsigned char       USSDistanceFrontRight_Raw;
	    char                USSDistanceFrontRight_State;
	    unsigned char       USSDistanceRearCenterLeft;
	    unsigned char       USSDistanceRearCenterLeft_Raw;
	    char                USSDistanceRearCenterLeft_State;
	    unsigned char       USSDistanceRearCenterRight;
	    unsigned char       USSDistanceRearCenterRight_Raw;
	    char                USSDistanceRearCenterRight_State;
	    unsigned char       USSDistanceRearLeft;
	    unsigned char       USSDistanceRearLeft_Raw;
	    char                USSDistanceRearLeft_State;
	    unsigned char       USSDistanceRearRight;
	    unsigned char       USSDistanceRearRight_Raw;
	    char                USSDistanceRearRight_State;
	    unsigned char       USSDistanceSideFrontLeft;
	    unsigned char       USSDistanceSideFrontLeft_Raw;
	    char                USSDistanceSideFrontLeft_State;
	    unsigned char       USSDistanceSideFrontRight;
	    unsigned char       USSDistanceSideFrontRight_Raw;
	    char                USSDistanceSideFrontRight_State;
	    unsigned char       USSDistanceSideRearLeft;
	    unsigned char       USSDistanceSideRearLeft_Raw;
	    char                USSDistanceSideRearLeft_State;
	    unsigned char       USSDistanceSideRearRight;
	    unsigned char       USSDistanceSideRearRight_Raw;
	    char                USSDistanceSideRearRight_State;
	} APHMIInParkDistViewLow;

	/* CAN Msg 0x4a7 (PDCInfo) */
	int PDCInfo_DLC;
	struct tPRIVATE_CAN_SalvatorX_PDCInfo {
	    unsigned char       DrivingTubeDirection;
	    unsigned char       DrivingTubeDirection_Raw;
	    char                DrivingTubeDirection_State;
	    unsigned char       DrivingTubeDisplay;
	    unsigned char       DrivingTubeDisplay_Raw;
	    char                DrivingTubeDisplay_State;
	    unsigned short      DrivingTubeFrontRadius;
	    unsigned short      DrivingTubeFrontRadius_Raw;
	    char                DrivingTubeFrontRadius_State;
	    unsigned short      DrivingTubeRearRadius;
	    unsigned short      DrivingTubeRearRadius_Raw;
	    char                DrivingTubeRearRadius_State;
	    unsigned char       PDCShutdownCause;
	    unsigned char       PDCShutdownCause_Raw;
	    char                PDCShutdownCause_State;
	    unsigned char       PDCSystemState;
	    unsigned char       PDCSystemState_Raw;
	    char                PDCSystemState_State;
	} PDCInfo;

	/* CAN Msg 0x4a8 (PDCFrontAndLeft) */
	int PDCFrontAndLeft_DLC;
	struct tPRIVATE_CAN_SalvatorX_PDCFrontAndLeft {
	    unsigned char       PDCFront1CriticalLevel;
	    unsigned char       PDCFront1CriticalLevel_Raw;
	    char                PDCFront1CriticalLevel_State;
	    unsigned char       PDCFront1IntersectDrvTube;
	    unsigned char       PDCFront1IntersectDrvTube_Raw;
	    char                PDCFront1IntersectDrvTube_State;
	    unsigned char       PDCFront1Slice;
	    unsigned char       PDCFront1Slice_Raw;
	    char                PDCFront1Slice_State;
	    unsigned char       PDCFront2CriticalLevel;
	    unsigned char       PDCFront2CriticalLevel_Raw;
	    char                PDCFront2CriticalLevel_State;
	    unsigned char       PDCFront2IntersectDrvTube;
	    unsigned char       PDCFront2IntersectDrvTube_Raw;
	    char                PDCFront2IntersectDrvTube_State;
	    unsigned char       PDCFront2Slice;
	    unsigned char       PDCFront2Slice_Raw;
	    char                PDCFront2Slice_State;
	    unsigned char       PDCFront3CriticalLevel;
	    unsigned char       PDCFront3CriticalLevel_Raw;
	    char                PDCFront3CriticalLevel_State;
	    unsigned char       PDCFront3IntersectDrvTube;
	    unsigned char       PDCFront3IntersectDrvTube_Raw;
	    char                PDCFront3IntersectDrvTube_State;
	    unsigned char       PDCFront3Slice;
	    unsigned char       PDCFront3Slice_Raw;
	    char                PDCFront3Slice_State;
	    unsigned char       PDCFront4CriticalLevel;
	    unsigned char       PDCFront4CriticalLevel_Raw;
	    char                PDCFront4CriticalLevel_State;
	    unsigned char       PDCFront4IntersectDrvTube;
	    unsigned char       PDCFront4IntersectDrvTube_Raw;
	    char                PDCFront4IntersectDrvTube_State;
	    unsigned char       PDCFront4Slice;
	    unsigned char       PDCFront4Slice_Raw;
	    char                PDCFront4Slice_State;
	    unsigned char       PDCLeft1CriticalLevel;
	    unsigned char       PDCLeft1CriticalLevel_Raw;
	    char                PDCLeft1CriticalLevel_State;
	    unsigned char       PDCLeft1IntersectDrvTube;
	    unsigned char       PDCLeft1IntersectDrvTube_Raw;
	    char                PDCLeft1IntersectDrvTube_State;
	    unsigned char       PDCLeft1Slice;
	    unsigned char       PDCLeft1Slice_Raw;
	    char                PDCLeft1Slice_State;
	    unsigned char       PDCLeft2CriticalLevel;
	    unsigned char       PDCLeft2CriticalLevel_Raw;
	    char                PDCLeft2CriticalLevel_State;
	    unsigned char       PDCLeft2IntersectDrvTube;
	    unsigned char       PDCLeft2IntersectDrvTube_Raw;
	    char                PDCLeft2IntersectDrvTube_State;
	    unsigned char       PDCLeft2Slice;
	    unsigned char       PDCLeft2Slice_Raw;
	    char                PDCLeft2Slice_State;
	    unsigned char       PDCLeft3CriticalLevel;
	    unsigned char       PDCLeft3CriticalLevel_Raw;
	    char                PDCLeft3CriticalLevel_State;
	    unsigned char       PDCLeft3IntersectDrvTube;
	    unsigned char       PDCLeft3IntersectDrvTube_Raw;
	    char                PDCLeft3IntersectDrvTube_State;
	    unsigned char       PDCLeft3Slice;
	    unsigned char       PDCLeft3Slice_Raw;
	    char                PDCLeft3Slice_State;
	    unsigned char       PDCLeft4CriticalLevel;
	    unsigned char       PDCLeft4CriticalLevel_Raw;
	    char                PDCLeft4CriticalLevel_State;
	    unsigned char       PDCLeft4IntersectDrvTube;
	    unsigned char       PDCLeft4IntersectDrvTube_Raw;
	    char                PDCLeft4IntersectDrvTube_State;
	    unsigned char       PDCLeft4Slice;
	    unsigned char       PDCLeft4Slice_Raw;
	    char                PDCLeft4Slice_State;
	} PDCFrontAndLeft;

	/* CAN Msg 0x4a9 (PDCRearAndRight) */
	int PDCRearAndRight_DLC;
	struct tPRIVATE_CAN_SalvatorX_PDCRearAndRight {
	    unsigned char       PDCRear1CriticalLevel;
	    unsigned char       PDCRear1CriticalLevel_Raw;
	    char                PDCRear1CriticalLevel_State;
	    unsigned char       PDCRear1IntersectDrvTube;
	    unsigned char       PDCRear1IntersectDrvTube_Raw;
	    char                PDCRear1IntersectDrvTube_State;
	    unsigned char       PDCRear1Slice;
	    unsigned char       PDCRear1Slice_Raw;
	    char                PDCRear1Slice_State;
	    unsigned char       PDCRear2CriticalLevel;
	    unsigned char       PDCRear2CriticalLevel_Raw;
	    char                PDCRear2CriticalLevel_State;
	    unsigned char       PDCRear2IntersectDrvTube;
	    unsigned char       PDCRear2IntersectDrvTube_Raw;
	    char                PDCRear2IntersectDrvTube_State;
	    unsigned char       PDCRear2Slice;
	    unsigned char       PDCRear2Slice_Raw;
	    char                PDCRear2Slice_State;
	    unsigned char       PDCRear3CriticalLevel;
	    unsigned char       PDCRear3CriticalLevel_Raw;
	    char                PDCRear3CriticalLevel_State;
	    unsigned char       PDCRear3IntersectDrvTube;
	    unsigned char       PDCRear3IntersectDrvTube_Raw;
	    char                PDCRear3IntersectDrvTube_State;
	    unsigned char       PDCRear3Slice;
	    unsigned char       PDCRear3Slice_Raw;
	    char                PDCRear3Slice_State;
	    unsigned char       PDCRear4CriticalLevel;
	    unsigned char       PDCRear4CriticalLevel_Raw;
	    char                PDCRear4CriticalLevel_State;
	    unsigned char       PDCRear4IntersectDrvTube;
	    unsigned char       PDCRear4IntersectDrvTube_Raw;
	    char                PDCRear4IntersectDrvTube_State;
	    unsigned char       PDCRear4Slice;
	    unsigned char       PDCRear4Slice_Raw;
	    char                PDCRear4Slice_State;
	    unsigned char       PDCRight1CriticalLevel;
	    unsigned char       PDCRight1CriticalLevel_Raw;
	    char                PDCRight1CriticalLevel_State;
	    unsigned char       PDCRight1IntersectDrvTube;
	    unsigned char       PDCRight1IntersectDrvTube_Raw;
	    char                PDCRight1IntersectDrvTube_State;
	    unsigned char       PDCRight1Slice;
	    unsigned char       PDCRight1Slice_Raw;
	    char                PDCRight1Slice_State;
	    unsigned char       PDCRight2CriticalLevel;
	    unsigned char       PDCRight2CriticalLevel_Raw;
	    char                PDCRight2CriticalLevel_State;
	    unsigned char       PDCRight2IntersectDrvTube;
	    unsigned char       PDCRight2IntersectDrvTube_Raw;
	    char                PDCRight2IntersectDrvTube_State;
	    unsigned char       PDCRight2Slice;
	    unsigned char       PDCRight2Slice_Raw;
	    char                PDCRight2Slice_State;
	    unsigned char       PDCRight3CriticalLevel;
	    unsigned char       PDCRight3CriticalLevel_Raw;
	    char                PDCRight3CriticalLevel_State;
	    unsigned char       PDCRight3IntersectDrvTube;
	    unsigned char       PDCRight3IntersectDrvTube_Raw;
	    char                PDCRight3IntersectDrvTube_State;
	    unsigned char       PDCRight3Slice;
	    unsigned char       PDCRight3Slice_Raw;
	    char                PDCRight3Slice_State;
	    unsigned char       PDCRight4CriticalLevel;
	    unsigned char       PDCRight4CriticalLevel_Raw;
	    char                PDCRight4CriticalLevel_State;
	    unsigned char       PDCRight4IntersectDrvTube;
	    unsigned char       PDCRight4IntersectDrvTube_Raw;
	    char                PDCRight4IntersectDrvTube_State;
	    unsigned char       PDCRight4Slice;
	    unsigned char       PDCRight4Slice_Raw;
	    char                PDCRight4Slice_State;
	} PDCRearAndRight;

	/* CAN Msg 0x4aa (APHMIInParkDistViewHigh4) */
	int APHMIInParkDistViewHigh4_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInParkDistViewHigh4 {
	    unsigned char       Alive_APHMIInParkDistViewHigh4;
	    unsigned char       Alive_APHMIInParkDistViewHigh4_Raw;
	    char                Alive_APHMIInParkDistViewHigh4_State;
	    unsigned char       CRC_APHMIInParkDistViewHigh4;
	    unsigned char       CRC_APHMIInParkDistViewHigh4_Raw;
	    char                CRC_APHMIInParkDistViewHigh4_State;
	    unsigned char       ParkDistViewHigh31;
	    unsigned char       ParkDistViewHigh31_Raw;
	    char                ParkDistViewHigh31_State;
	    unsigned char       ParkDistViewHigh32;
	    unsigned char       ParkDistViewHigh32_Raw;
	    char                ParkDistViewHigh32_State;
	    unsigned char       ParkDistViewHigh33;
	    unsigned char       ParkDistViewHigh33_Raw;
	    char                ParkDistViewHigh33_State;
	    unsigned char       ParkDistViewHigh34;
	    unsigned char       ParkDistViewHigh34_Raw;
	    char                ParkDistViewHigh34_State;
	    unsigned char       ParkDistViewHigh35;
	    unsigned char       ParkDistViewHigh35_Raw;
	    char                ParkDistViewHigh35_State;
	    unsigned char       ParkDistViewHigh36;
	    unsigned char       ParkDistViewHigh36_Raw;
	    char                ParkDistViewHigh36_State;
	    unsigned char       ParkDistViewHigh37;
	    unsigned char       ParkDistViewHigh37_Raw;
	    char                ParkDistViewHigh37_State;
	    unsigned char       ParkDistViewHigh38;
	    unsigned char       ParkDistViewHigh38_Raw;
	    char                ParkDistViewHigh38_State;
	    unsigned char       ParkDistViewHigh39;
	    unsigned char       ParkDistViewHigh39_Raw;
	    char                ParkDistViewHigh39_State;
	    unsigned char       ParkDistViewHigh40;
	    unsigned char       ParkDistViewHigh40_Raw;
	    char                ParkDistViewHigh40_State;
	} APHMIInParkDistViewHigh4;

	/* CAN Msg 0x4ab (APHMIInGeneral2) */
	int APHMIInGeneral2_DLC;
	struct tPRIVATE_CAN_SalvatorX_APHMIInGeneral2 {
	    unsigned char       Alive_APHMIInGeneral2;
	    unsigned char       Alive_APHMIInGeneral2_Raw;
	    char                Alive_APHMIInGeneral2_State;
	    unsigned char       APHMIGeneralMemParkPoss;
	    unsigned char       APHMIGeneralMemParkPoss_Raw;
	    char                APHMIGeneralMemParkPoss_State;
	    unsigned char       APHMIGeneralMessageRemote;
	    unsigned char       APHMIGeneralMessageRemote_Raw;
	    char                APHMIGeneralMessageRemote_State;
	    unsigned char       APHMIGeneralRemModeActive;
	    unsigned char       APHMIGeneralRemModeActive_Raw;
	    char                APHMIGeneralRemModeActive_State;
	    unsigned char       APHMIGeneralScreenRemote;
	    unsigned char       APHMIGeneralScreenRemote_Raw;
	    char                APHMIGeneralScreenRemote_State;
	    unsigned char       APHMIInAdjustmentButtons;
	    unsigned char       APHMIInAdjustmentButtons_Raw;
	    char                APHMIInAdjustmentButtons_State;
	    unsigned char       APHMIInDisplayBackButton;
	    unsigned char       APHMIInDisplayBackButton_Raw;
	    char                APHMIInDisplayBackButton_State;
	    unsigned char       APHMIInGarageParkingState;
	    unsigned char       APHMIInGarageParkingState_Raw;
	    char                APHMIInGarageParkingState_State;
	    unsigned char       APHMIInMemorizedPoseSlotId;
	    unsigned char       APHMIInMemorizedPoseSlotId_Raw;
	    char                APHMIInMemorizedPoseSlotId_State;
	    unsigned char       APHMIInMemorySlotsStatus;
	    unsigned char       APHMIInMemorySlotsStatus_Raw;
	    char                APHMIInMemorySlotsStatus_State;
	    unsigned char       APHMIInSlotUnreachReason;
	    unsigned char       APHMIInSlotUnreachReason_Raw;
	    char                APHMIInSlotUnreachReason_State;
	    unsigned char       APHMIInStreamAvailable;
	    unsigned char       APHMIInStreamAvailable_Raw;
	    char                APHMIInStreamAvailable_State;
	    unsigned char       APHMIInSVScrenResponse;
	    unsigned char       APHMIInSVScrenResponse_Raw;
	    char                APHMIInSVScrenResponse_State;
	    unsigned char       APHMIMemorizedPoseYaw;
	    unsigned char       APHMIMemorizedPoseYaw_Raw;
	    char                APHMIMemorizedPoseYaw_State;
	    unsigned char       APHMIMemorizedPoseYawSign;
	    unsigned char       APHMIMemorizedPoseYawSign_Raw;
	    char                APHMIMemorizedPoseYawSign_State;
	    unsigned char       CRC_APHMIInGeneral2;
	    unsigned char       CRC_APHMIInGeneral2_Raw;
	    char                CRC_APHMIInGeneral2_State;
	} APHMIInGeneral2;

	/* CAN Msg 0x4af (TONHInfo) */
	int TONHInfo_DLC;
	struct tPRIVATE_CAN_SalvatorX_TONHInfo {
	    unsigned char       FrontSpeakerOn;
	    unsigned char       FrontSpeakerOn_Raw;
	    char                FrontSpeakerOn_State;
	    unsigned char       FrontSpeakerPitch;
	    unsigned char       FrontSpeakerPitch_Raw;
	    char                FrontSpeakerPitch_State;
	    unsigned char       FrontSpeakerVolume;
	    unsigned char       FrontSpeakerVolume_Raw;
	    char                FrontSpeakerVolume_State;
	    unsigned char       RearSpeakerOn;
	    unsigned char       RearSpeakerOn_Raw;
	    char                RearSpeakerOn_State;
	    unsigned char       RearSpeakerPitch;
	    unsigned char       RearSpeakerPitch_Raw;
	    char                RearSpeakerPitch_State;
	    unsigned char       RearSpeakerVolume;
	    unsigned char       RearSpeakerVolume_Raw;
	    char                RearSpeakerVolume_State;
	} TONHInfo;

	/* CAN Msg 0x4ff (WHPInfo) */
	int WHPInfo_DLC;
	struct tPRIVATE_CAN_SalvatorX_WHPInfo {
	    unsigned char       WhlAbsAngleFL;
	    unsigned char       WhlAbsAngleFL_Raw;
	    char                WhlAbsAngleFL_State;
	    unsigned char       WhlAbsAngleFR;
	    unsigned char       WhlAbsAngleFR_Raw;
	    char                WhlAbsAngleFR_State;
	    unsigned char       WhlAbsAngleRL;
	    unsigned char       WhlAbsAngleRL_Raw;
	    char                WhlAbsAngleRL_State;
	    unsigned char       WhlAbsAngleRR;
	    unsigned char       WhlAbsAngleRR_Raw;
	    char                WhlAbsAngleRR_State;
	    unsigned char       WhlDirectionFL;
	    unsigned char       WhlDirectionFL_Raw;
	    char                WhlDirectionFL_State;
	    unsigned char       WhlDirectionFR;
	    unsigned char       WhlDirectionFR_Raw;
	    char                WhlDirectionFR_State;
	    unsigned char       WhlDirectionRL;
	    unsigned char       WhlDirectionRL_Raw;
	    char                WhlDirectionRL_State;
	    unsigned char       WhlDirectionRR;
	    unsigned char       WhlDirectionRR_Raw;
	    char                WhlDirectionRR_State;
	    unsigned char       WhlWarningLevelFL;
	    unsigned char       WhlWarningLevelFL_Raw;
	    char                WhlWarningLevelFL_State;
	    unsigned char       WhlWarningLevelFR;
	    unsigned char       WhlWarningLevelFR_Raw;
	    char                WhlWarningLevelFR_State;
	    unsigned char       WhlWarningLevelRL;
	    unsigned char       WhlWarningLevelRL_Raw;
	    char                WhlWarningLevelRL_State;
	    unsigned char       WhlWarningLevelRR;
	    unsigned char       WhlWarningLevelRR_Raw;
	    char                WhlWarningLevelRR_State;
	    unsigned char       WHPDisplayReq;
	    unsigned char       WHPDisplayReq_Raw;
	    char                WHPDisplayReq_State;
	    unsigned char       WHPState;
	    unsigned char       WHPState_Raw;
	    char                WHPState_State;
	} WHPInfo;
    } SalvatorX;
} tPRIVATE_CANVec;


/* Timing parameters for Tx CAN messages */
typedef struct {
    int SendPeriod;
    int SendDistrib;
} tPRIVATE_CANMsgTiming;

typedef struct {
    int DeclareQuants;

    /* ECU SalvatorX */
    struct PRIVATE_CANTimings_SalvatorX {
	tPRIVATE_CANMsgTiming CANandGWVersion;
	tPRIVATE_CANMsgTiming APHMIInGeneral1;
	tPRIVATE_CANMsgTiming APHMIInSituationLeft;
	tPRIVATE_CANMsgTiming APHMIInSituationRight;
	tPRIVATE_CANMsgTiming APHMIInSituationFront;
	tPRIVATE_CANMsgTiming APHMIInSituationRear;
	tPRIVATE_CANMsgTiming APHMIInParkDistViewLow;
	tPRIVATE_CANMsgTiming PDCInfo;
	tPRIVATE_CANMsgTiming PDCFrontAndLeft;
	tPRIVATE_CANMsgTiming PDCRearAndRight;
	tPRIVATE_CANMsgTiming APHMIInParkDistViewHigh4;
	tPRIVATE_CANMsgTiming APHMIInGeneral2;
	tPRIVATE_CANMsgTiming TONHInfo;
	tPRIVATE_CANMsgTiming WHPInfo;
    } SalvatorX;
} tPRIVATE_CANTimings;


/* Timing Defaults */
/* ECU SalvatorX */
#define PRIVATE_CAN_CANandGWVersion_SENDPERIOD  10000
#define PRIVATE_CAN_CANandGWVersion_SENDDISTRIB 9973
#define PRIVATE_CAN_APHMIInGeneral1_SENDPERIOD  10 //ClPr: HMI "ECU offline" screen flickering if this cycle time > 10ms (to be checked with HMI why. HMI step cycle is supposedly 33ms.)
#define PRIVATE_CAN_APHMIInGeneral1_SENDDISTRIB 7
#define PRIVATE_CAN_APHMIInSituationLeft_SENDPERIOD  100
#define PRIVATE_CAN_APHMIInSituationLeft_SENDDISTRIB 89
#define PRIVATE_CAN_APHMIInSituationRight_SENDPERIOD  100
#define PRIVATE_CAN_APHMIInSituationRight_SENDDISTRIB 83
#define PRIVATE_CAN_APHMIInSituationFront_SENDPERIOD  100
#define PRIVATE_CAN_APHMIInSituationFront_SENDDISTRIB 79
#define PRIVATE_CAN_APHMIInSituationRear_SENDPERIOD  100
#define PRIVATE_CAN_APHMIInSituationRear_SENDDISTRIB 73
#define PRIVATE_CAN_APHMIInParkDistViewLow_SENDPERIOD  100
#define PRIVATE_CAN_APHMIInParkDistViewLow_SENDDISTRIB 71
#define PRIVATE_CAN_PDCInfo_SENDPERIOD  100
#define PRIVATE_CAN_PDCInfo_SENDDISTRIB 67
#define PRIVATE_CAN_PDCFrontAndLeft_SENDPERIOD  100
#define PRIVATE_CAN_PDCFrontAndLeft_SENDDISTRIB 61
#define PRIVATE_CAN_PDCRearAndRight_SENDPERIOD  100
#define PRIVATE_CAN_PDCRearAndRight_SENDDISTRIB 59
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_SENDPERIOD  100
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_SENDDISTRIB 53
#define PRIVATE_CAN_APHMIInGeneral2_SENDPERIOD  100
#define PRIVATE_CAN_APHMIInGeneral2_SENDDISTRIB 47
#define PRIVATE_CAN_TONHInfo_SENDPERIOD  100
#define PRIVATE_CAN_TONHInfo_SENDDISTRIB 43
#define PRIVATE_CAN_WHPInfo_SENDPERIOD  100
#define PRIVATE_CAN_WHPInfo_SENDDISTRIB 41

/* I/O vector for CAN communication */
extern tPRIVATE_CANVec     PRIVATE_CAN;
extern tPRIVATE_CANTimings PRIVATE_CAN_Timings;


/* Function definitions */
int  PRIVATE_CAN_Init_First (void);
int  PRIVATE_CAN_Init       (void);
int  PRIVATE_CAN_RecvData   (unsigned int MsgId, unsigned int DLC, unsigned char* Data);
int  PRIVATE_CAN_Recv       (struct CAN_Msg   *Msg, const unsigned int CycleNo);
int  PRIVATE_CAN_RecvFD     (struct CANFD_Msg *Msg, const unsigned int CycleNo);
void PRIVATE_CAN_RecvLoop   (int Slot, int Channel, const unsigned int CycleNo);
int  PRIVATE_CAN_Send       (int Slot, int Channel, const unsigned int CycleNo);
int  PRIVATE_CAN_ReadyToSend(int MsgId, const unsigned int CycleNo);
int  PRIVATE_CAN_SendMsg    (int Slot, int Channel, const unsigned int CycleNo, int MsgId);


extern int (*PRIVATE_CAN_CAN_Recv)   (int Slot, int Channel, struct CAN_Msg   *Msg);
extern int (*PRIVATE_CAN_CAN_RecvFD) (int Slot, int Channel, struct CANFD_Msg *Msg);
extern int (*PRIVATE_CAN_CAN_Send)   (int Slot, int Channel, struct CAN_Msg   *Msg);
extern int (*PRIVATE_CAN_CAN_SendFD) (int Slot, int Channel, struct CANFD_Msg *Msg);


/*
** Hook functions for Rx- and Tx messages:
** - PRIVATE_CAN_RxHook()
**   + will be called for received CAN messages:
**     a) before decoding any signals (PRIVATE_CAN_PRE_DECODE)
**        -> allows to manipulate the raw data bytes of the received message
**        -> if return value is <0, the whole message will be discarded
**     b) after decoding signals      (PRIVATE_CAN_POST_DECODE)
**        -> allows to react on received CAN message
**        -> return value does not have any effect
** - PRIVATE_CAN_TxHook()
**   + will be called when sending a CAN message:
**     a) before encoding any signals (PRIVATE_CAN_PRE_ENCODE)
**        -> allows to do some preparations before specific CAN message is sent
**        -> return value does not have any effect
**     b) after encoding all signals  (PRIVATE_CAN_POST_ENCODE)
**        -> allows to manipulate the raw data bytes of the Tx message
**        -> if return value is <0, the message will not be sent
*/
#define PRIVATE_CAN_PRE_DECODE  0
#define PRIVATE_CAN_PRE_ENCODE  0
#define PRIVATE_CAN_POST_DECODE 1
#define PRIVATE_CAN_POST_ENCODE 1

extern int (*PRIVATE_CAN_RxHook)   (struct CAN_Msg   *Msg, const unsigned int CycleNo, int Part);
extern int (*PRIVATE_CAN_RxHookFD) (struct CANFD_Msg *Msg, const unsigned int CycleNo, int Part);
extern int (*PRIVATE_CAN_TxHook)   (struct CAN_Msg   *Msg, const unsigned int CycleNo, int Part);
extern int (*PRIVATE_CAN_TxHookFD) (struct CANFD_Msg *Msg, const unsigned int CycleNo, int Part);


/* Some macros for bit operations */

#   define PRIVATE_CAN_BitOpUC_RShift(d, n)  ((d)>>(n))
#   define PRIVATE_CAN_BitOpUI_RShift(d, n)  ((d)>>(n))
#   define PRIVATE_CAN_BitOpUS_RShift(d, n)  ((d)>>(n))

#   define PRIVATE_CAN_BitOpUC_And(d, x)     ((d) & (x))
#   define PRIVATE_CAN_BitOpUI_And(d, x)     ((d) & (x))
#   define PRIVATE_CAN_BitOpUS_And(d, x)     ((d) & (x))


/* missing function prototype(s) for C-library function(s) */
//double round(double x);


/* Macros to encode/decode values of signals */
/* converting to signed value */
#define PRIVATE_CAN_Cvt2Signed(v, dw) ( \
    ((dw) > 32) ? PRIVATE_CAN_Cvt2SignedLL((v), (dw)) \
		: PRIVATE_CAN_Cvt2SignedI((v), (dw)) \
)

static inline int
PRIVATE_CAN_Cvt2SignedI(
    int          v,
    unsigned int dw)
{
    return (v & (1<<(dw-1))) ? v | (-1<<(dw-1)) : v;
}

static inline long long
PRIVATE_CAN_Cvt2SignedLL(
    long long    v,
    unsigned int dw)
{
    return (v & (1LL<<(dw-1))) ? v | (-1LL<<(dw-1)) : v;
}

/* converting to float/double value */
static inline float
PRIVATE_CAN_Raw2Float(
    unsigned int x)
{
    union { unsigned int ui; float f; } tmp;

    tmp.ui = x;
    return tmp.f;
}

static inline unsigned int
PRIVATE_CAN_Float2Raw(
    float x)
{
    union { unsigned int ui; float f; } tmp;

    tmp.f = x;
    return tmp.ui;
}

static inline double
PRIVATE_CAN_Raw2Double(
    unsigned long long x)
{
    union { unsigned long long ull; double d; } tmp;

    tmp.ull = x;
    return tmp.d;
}

static inline unsigned long long
PRIVATE_CAN_Double2Raw(
    double x)
{
    union { unsigned long long ull; double d; } tmp;

    tmp.d = x;
    return tmp.ull;
}

/* to fix range of value */
//ClPr: changed generated macros, because code was not compiling
#define PRIVATE_CAN_Range(v, min, max) (((v)>=(min)) ? (((v)<=(max)) ? (v) : (max)) : (min))
#define PRIVATE_CAN_FixMin(v, min) (((v)>=(min)) ? (v) : (min))
#define PRIVATE_CAN_FixMax(v, max) (((v)<=(max)) ? (v) : (max))


#define PRIVATE_CAN_APHMIOut1_ID   1189U	/* MsgId=0x4a5 */
#define PRIVATE_CAN_APHMIOut1_NAME "APHMIOut1"
#define PRIVATE_CAN_APHMIOut1_DLC  8

#define PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_Decode(data)      \
    (((data)[1] & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_Raw = PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_Alive_APHMIOut1_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.Alive_APHMIOut1_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_STARTVALUE        102
#define PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMin((PRIVATE_CAN_FixMax((0.4 * ((raw))), 102)), 0))
#define PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_Decode(data)      \
    ((data)[5])
static inline float
PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_GetV(
    unsigned char       *data,
    float               *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutBatteryLevelRem_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBatteryLevelRem_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 1))
#define PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_Decode(data)      \
    ((((data)[4]>>4) & 1))
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutBlindSpotActivated_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutBlindSpotActivated_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_Decode(data)      \
    ((((data)[1]>>4) & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutScreenHU_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenHU_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_Decode(data)      \
    (((data)[4] & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutScreenRem_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutScreenRem_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_Decode(data)      \
    ((data)[2])
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHU_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHU_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_Decode(data)      \
    (((data)[7] & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionHUCounter_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionHUCounter_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_Decode(data)      \
    ((data)[3])
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRem_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRem_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_Decode(data)      \
    ((((data)[7]>>4) & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutUserActionRemCounter_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserActionRemCounter_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_Decode(data)      \
    ((data)[6])
static inline unsigned char
PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_Raw = PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_APHMIOutUserSVScreenRequest_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.APHMIOutUserSVScreenRequest_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_Decode(data)      \
    ((data)[0])
static inline unsigned char
PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_Raw = PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_Raw) {
#if defined(PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut1_CRC_APHMIOut1_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut1.CRC_APHMIOut1_Raw);
    return *val;
}



#define PRIVATE_CAN_APHMIOut2_ID   1196U	/* MsgId=0x4ac */
#define PRIVATE_CAN_APHMIOut2_NAME "APHMIOut2"
#define PRIVATE_CAN_APHMIOut2_DLC  6

#define PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_Decode(data)      \
    (((data)[1] & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_Raw = PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_Alive_APHMIOut2_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.Alive_APHMIOut2_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 1))
#define PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_Decode(data)      \
    ((((data)[3]>>5) & 1))
static inline unsigned char
PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_Raw = PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_APHMIOutBTDevConnected_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevConnected_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 1))
#define PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_Decode(data)      \
    ((((data)[3]>>4) & 1))
static inline unsigned char
PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_Raw = PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_APHMIOutBTDevPaired_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutBTDevPaired_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_Decode(data)      \
    ((((data)[1]>>4) & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_Raw = PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_APHMIOutRemAlive_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemAlive_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 1))
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_Decode(data)      \
    ((((data)[5]>>4) & 1))
static inline unsigned char
PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_Raw = PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_APHMIOutRemDeadMansSwitchBtn_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemDeadMansSwitchBtn_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_STARTVALUE        4095
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 4095))
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_Decode(data)      \
    (((data)[2] | (((data)[3] & 15)<<8)))
static inline unsigned short
PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_GetV(
    unsigned char       *data,
    unsigned short      *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_Raw = PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosX_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosX_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_STARTVALUE        4095
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 4095))
#define PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_Decode(data)      \
    (((data)[4] | (((data)[5] & 15)<<8)))
static inline unsigned short
PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_GetV(
    unsigned char       *data,
    unsigned short      *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_Raw = PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_APHMIOutRemFingerPosY_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.APHMIOutRemFingerPosY_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_Decode(data)      \
    ((data)[0])
static inline unsigned char
PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_Raw = PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_Raw) {
#if defined(PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut2_CRC_APHMIOut2_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut2.CRC_APHMIOut2_Raw);
    return *val;
}



#define PRIVATE_CAN_APHMIOut3_ID   1197U	/* MsgId=0x4ad */
#define PRIVATE_CAN_APHMIOut3_NAME "APHMIOut3"
#define PRIVATE_CAN_APHMIOut3_DLC  6

#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_Decode(data)      \
    (((((data)[4]>>5) & 7) | (((data)[5] & 3)<<3)))
static inline unsigned char
PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_Raw = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_Raw) {
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Code_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Code_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 15))
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_Decode(data)      \
    ((((data)[5]>>2) & 15))
static inline unsigned char
PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_Raw = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_Raw) {
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_Counter_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_Counter_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_Decode(data)      \
    ((((data)[2]>>5) & 7))
static inline unsigned char
PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_Raw = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_Raw) {
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_FingerCount_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_FingerCount_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_Decode(data)      \
    (((data)[1] | (((data)[2] & 31)<<8)))
static inline unsigned short
PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_GetV(
    unsigned char       *data,
    unsigned short      *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_Raw = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_Raw) {
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_XPos_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_XPos_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_Decode(data)      \
    (((data)[3] | (((data)[4] & 31)<<8)))
static inline unsigned short
PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_GetV(
    unsigned char       *data,
    unsigned short      *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_Raw = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_Raw) {
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut3_APHMIOutGesture_YPos_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut3.APHMIOutGesture_YPos_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_Raw2Phys(raw)     \
    ((raw))
#define PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_Decode(data)      \
    ((data)[0])
static inline unsigned char
PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_GetV(
    unsigned char       *data,
    unsigned char       *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_Raw = PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_Raw) {
#if defined(PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut3_CRC_APHMIOut3_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut3.CRC_APHMIOut3_Raw);
    return *val;
}



#define PRIVATE_CAN_APHMIOut4_ID   1198U	/* MsgId=0x4ae */
#define PRIVATE_CAN_APHMIOut4_NAME "APHMIOut4"
#define PRIVATE_CAN_APHMIOut4_DLC  8

#define PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 16384))
#define PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_Decode(data)      \
    (((data)[0] | (((data)[1] & 63)<<8)))
static inline unsigned short
PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_GetV(
    unsigned char       *data,
    unsigned short      *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_Raw = PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_Raw) {
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResX_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResX_Raw);
    return *val;
}

#define PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_STARTVALUE        0
#define PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_Raw2Phys(raw)     \
    (PRIVATE_CAN_FixMax(((raw)), 16384))
#define PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_Decode(data)      \
    (((((data)[1]>>6) & 3) | ((data)[2]<<2) | (((data)[3] & 15)<<10)))
static inline unsigned short
PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_GetV(
    unsigned char       *data,
    unsigned short      *val)
{
    PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_Raw = PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_Decode(data);
    switch (PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_Raw) {
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_INVALIDVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_INVALIDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_ERRORVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_ERRORVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_UNDEFINEDVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_UNDEFINEDVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined];
	break;
#endif
#if defined(PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_UNAVAILABLEVALUE)
    case PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_UNAVAILABLEVALUE:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable];
	break;
#endif
    default:
	PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_State = PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid];
    }
    if (PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	*val = PRIVATE_CAN_APHMIOut4_APHMIOutRemScreenResY_Raw2Phys(PRIVATE_CAN.AP_HMI.APHMIOut4.APHMIOutRemScreenResY_Raw);
    return *val;
}



#define PRIVATE_CAN_CANandGWVersion_ID   752U	/* MsgId=0x2f0 */
#define PRIVATE_CAN_CANandGWVersion_NAME "CANandGWVersion"
#define PRIVATE_CAN_CANandGWVersion_DLC  4

#define PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_STARTVALUE        1
#define PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_Encode(data, raw) { \
    (data)[1] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_Phys2Raw(val);
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_Phys2Raw(val);
#endif
    PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMayor_Encode(data, PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMayor_Raw);
}
#define PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_STARTVALUE        30
#define PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_Phys2Raw(val);
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_Phys2Raw(val);
#endif
    PRIVATE_CAN_CANandGWVersion_APprivateCANVersionMinor_Encode(data, PRIVATE_CAN.SalvatorX.CANandGWVersion.APprivateCANVersionMinor_Raw);
}
#define PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_STARTVALUE        0
#define PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_Encode(data, raw) { \
    (data)[3] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_Phys2Raw(val);
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_Phys2Raw(val);
#endif
    PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMayor_Encode(data, PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMayor_Raw);
}
#define PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_STARTVALUE        0
#define PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_Encode(data, raw) { \
    (data)[2] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_Phys2Raw(val);
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_Raw = PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_Phys2Raw(val);
#endif
    PRIVATE_CAN_CANandGWVersion_CONTI_CANVersionMinor_Encode(data, PRIVATE_CAN.SalvatorX.CANandGWVersion.CONTI_CANVersionMinor_Raw);
}


#define PRIVATE_CAN_APHMIInGeneral1_ID   1184U	/* MsgId=0x4a0 */
#define PRIVATE_CAN_APHMIInGeneral1_NAME "APHMIInGeneral1"
#define PRIVATE_CAN_APHMIInGeneral1_DLC  8

#define PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_Alive_APHMIInGeneral1_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.Alive_APHMIInGeneral1_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralAVGType_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralAVGType_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<5)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<5); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnBackwardPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnBackwardPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralBtnForwardPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralBtnForwardPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<3); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralContinuePoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralContinuePoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralCurrentGear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralCurrentGear_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_Phys2Raw(val)     \
    (((val)<0.4f) ? 0u : (unsigned char)round((val) / 0.4))  //ClPr: M_ROUND causes problems for 0.0 phys value (outputs raw value 254). Strange effect of ego vehicle jumping at the road start (CarMaker error: Vehicle leaves road)
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_Encode(data, raw) { \
    (data)[3] = (PRIVATE_CAN_BitOpUI_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_SetV(
    unsigned char       *data,
    float               val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDistToStop_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDistToStop_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(3<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralDrivingDir_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralDrivingDir_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(1<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralFullyAutomParkPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralFullyAutomParkPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 2))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(3<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMaxSpeed10Warning_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMaxSpeed10Warning_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~63) | (PRIVATE_CAN_BitOpUC_And((raw), 63)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralMessage_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralMessage_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(1<<5)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<5); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInOutFinished_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInOutFinished_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<1)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<1); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkInPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkInPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~1) | (PRIVATE_CAN_BitOpUC_And((raw), 1)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralParkOutPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralParkOutPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemAppActive_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemAppActive_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(1<<5)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<5); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(1<<7)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<7); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemCtrlSelected_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemCtrlSelected_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~(1<<7)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<7); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemKeyPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemKeyPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRemManPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRemManPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralRevAssistPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralRevAssistPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~31) | (PRIVATE_CAN_BitOpUC_And((raw), 31)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralScreen_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralScreen_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(1<<5)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<5); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSemiAutomParkPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSemiAutomParkPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(1<<7)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<7); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralSVPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralSVPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<2)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<2); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIGeneralUndoPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIGeneralUndoPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~31) | (PRIVATE_CAN_BitOpUC_And((raw), 31)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_Raw = PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_APHMIParkingProcedureCtrlState_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.APHMIParkingProcedureCtrlState_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_Raw = PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral1_CRC_APHMIInGeneral1_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral1.CRC_APHMIInGeneral1_Raw);
}


#define PRIVATE_CAN_APHMIInSituationLeft_ID   1185U	/* MsgId=0x4a1 */
#define PRIVATE_CAN_APHMIInSituationLeft_NAME "APHMIInSituationLeft"
#define PRIVATE_CAN_APHMIInSituationLeft_DLC  7

#define PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_Alive_APHMIInSituationLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.Alive_APHMIInSituationLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_CRC_APHMIInSituationLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.CRC_APHMIInSituationLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkEgoRelativePosLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkEgoRelativePosLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotFreeLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotFreeLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossDirectionLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossDirectionLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotPossOrientationLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotPossOrientationLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotScannedLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotScannedLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelDirectionLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelDirectionLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelectedLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelectedLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_Encode(data, raw) { \
    (data)[5] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkingSlotSelOrientationLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkingSlotSelOrientationLeft_Raw);
}
#define PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_Raw = PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationLeft_ParkSituationLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationLeft.ParkSituationLeft_Raw);
}


#define PRIVATE_CAN_APHMIInSituationRight_ID   1186U	/* MsgId=0x4a2 */
#define PRIVATE_CAN_APHMIInSituationRight_NAME "APHMIInSituationRight"
#define PRIVATE_CAN_APHMIInSituationRight_DLC  7

#define PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_Alive_APHMIInSituationRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.Alive_APHMIInSituationRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_CRC_APHMIInSituationRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.CRC_APHMIInSituationRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkEgoRelativePosRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkEgoRelativePosRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkingSlotFreeRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotFreeRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossDirectionRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossDirectionRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkingSlotPossOrientationRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotPossOrientationRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkingSlotScannedRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotScannedRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelDirectionRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelDirectionRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelectedRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelectedRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_Encode(data, raw) { \
    (data)[5] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkingSlotSelOrientationRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkingSlotSelOrientationRight_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_Raw = PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRight_ParkSituationRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRight.ParkSituationRight_Raw);
}


#define PRIVATE_CAN_APHMIInSituationFront_ID   1187U	/* MsgId=0x4a3 */
#define PRIVATE_CAN_APHMIInSituationFront_NAME "APHMIInSituationFront"
#define PRIVATE_CAN_APHMIInSituationFront_DLC  6

#define PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_Alive_APHMIInSituationFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.Alive_APHMIInSituationFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_CRC_APHMIInSituationFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.CRC_APHMIInSituationFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkingSlotFreeFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotFreeFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossDirectionFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossDirectionFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkingSlotPossOrientationFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotPossOrientationFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkingSlotScannedFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotScannedFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelDirectionFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelDirectionFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelectedFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelectedFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_Encode(data, raw) { \
    (data)[5] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkingSlotSelOrientationFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkingSlotSelOrientationFront_Raw);
}
#define PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_Raw = PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationFront_ParkSituationFront_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationFront.ParkSituationFront_Raw);
}


#define PRIVATE_CAN_APHMIInSituationRear_ID   1188U	/* MsgId=0x4a4 */
#define PRIVATE_CAN_APHMIInSituationRear_NAME "APHMIInSituationRear"
#define PRIVATE_CAN_APHMIInSituationRear_DLC  6

#define PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_Alive_APHMIInSituationRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.Alive_APHMIInSituationRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_CRC_APHMIInSituationRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.CRC_APHMIInSituationRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkingSlotFreeRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotFreeRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossDirectionRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossDirectionRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkingSlotPossOrientationRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotPossOrientationRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkingSlotScannedRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotScannedRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelDirectionRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelDirectionRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelectedRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelectedRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_Encode(data, raw) { \
    (data)[5] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkingSlotSelOrientationRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkingSlotSelOrientationRear_Raw);
}
#define PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_STARTVALUE        0
#define PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(15<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 15))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_Raw = PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInSituationRear_ParkSituationRear_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInSituationRear.ParkSituationRear_Raw);
}


#define PRIVATE_CAN_APHMIInParkDistViewLow_ID   1190U	/* MsgId=0x4a6 */
#define PRIVATE_CAN_APHMIInParkDistViewLow_NAME "APHMIInParkDistViewLow"
#define PRIVATE_CAN_APHMIInParkDistViewLow_DLC  5

#define PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_Alive_APHMIInParkDistViewLow_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.Alive_APHMIInParkDistViewLow_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_CRC_APHMIInParkDistViewLow_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.CRC_APHMIInParkDistViewLow_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(3<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterLeft_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~3) | (PRIVATE_CAN_BitOpUC_And((raw), 3)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontCenterRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontCenterRight_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(3<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontLeft_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(3<<2)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<2); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceFrontRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceFrontRight_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(3<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterLeft_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(3<<2)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<2); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearCenterRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearCenterRight_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(3<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearLeft_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~3) | (PRIVATE_CAN_BitOpUC_And((raw), 3)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceRearRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceRearRight_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(3<<2)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<2); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontLeft_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(3<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideFrontRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideFrontRight_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~3) | (PRIVATE_CAN_BitOpUC_And((raw), 3)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearLeft_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearLeft_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(3<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_Raw = PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewLow_USSDistanceSideRearRight_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewLow.USSDistanceSideRearRight_Raw);
}


#define PRIVATE_CAN_PDCInfo_ID   1191U	/* MsgId=0x4a7 */
#define PRIVATE_CAN_PDCInfo_NAME "PDCInfo"
#define PRIVATE_CAN_PDCInfo_DLC  6

#define PRIVATE_CAN_PDCInfo_DrivingTubeDirection_STARTVALUE        0
#define PRIVATE_CAN_PDCInfo_DrivingTubeDirection_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_PDCInfo_DrivingTubeDirection_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~1) | (PRIVATE_CAN_BitOpUC_And((raw), 1)); \
}
static inline void
PRIVATE_CAN_PDCInfo_DrivingTubeDirection_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDirection_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDirection_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDirection_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDirection_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDirection_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDirection_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDirection_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDirection_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDirection_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDirection_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCInfo_DrivingTubeDirection_Encode(data, PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDirection_Raw);
}
#define PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_STARTVALUE        0
#define PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 2))
#define PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(3<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<6); \
}
static inline void
PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCInfo_DrivingTubeDisplay_Encode(data, PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeDisplay_Raw);
}
#define PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_STARTVALUE        0
#define PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_Encode(data, raw) { \
    (data)[1] = (PRIVATE_CAN_BitOpUS_And((raw), 255)); \
    (data)[2] = (PRIVATE_CAN_BitOpUS_RShift((raw), 8) & 255); \
}
static inline void
PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_SetV(
    unsigned char       *data,
    unsigned short      val)
{
    if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCInfo_DrivingTubeFrontRadius_Encode(data, PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeFrontRadius_Raw);
}
#define PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_STARTVALUE        0
#define PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_Encode(data, raw) { \
    (data)[3] = (PRIVATE_CAN_BitOpUS_And((raw), 255)); \
    (data)[4] = (PRIVATE_CAN_BitOpUS_RShift((raw), 8) & 255); \
}
static inline void
PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_SetV(
    unsigned char       *data,
    unsigned short      val)
{
    if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_Raw = PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCInfo_DrivingTubeRearRadius_Encode(data, PRIVATE_CAN.SalvatorX.PDCInfo.DrivingTubeRearRadius_Raw);
}
#define PRIVATE_CAN_PDCInfo_PDCShutdownCause_STARTVALUE        0
#define PRIVATE_CAN_PDCInfo_PDCShutdownCause_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCInfo_PDCShutdownCause_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCInfo_PDCShutdownCause_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_Raw = PRIVATE_CAN_PDCInfo_PDCShutdownCause_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCInfo_PDCShutdownCause_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_Raw = PRIVATE_CAN_PDCInfo_PDCShutdownCause_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_PDCShutdownCause_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_Raw = PRIVATE_CAN_PDCInfo_PDCShutdownCause_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_PDCShutdownCause_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_Raw = PRIVATE_CAN_PDCInfo_PDCShutdownCause_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_PDCShutdownCause_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_Raw = PRIVATE_CAN_PDCInfo_PDCShutdownCause_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_Raw = PRIVATE_CAN_PDCInfo_PDCShutdownCause_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCInfo_PDCShutdownCause_Encode(data, PRIVATE_CAN.SalvatorX.PDCInfo.PDCShutdownCause_Raw);
}
#define PRIVATE_CAN_PDCInfo_PDCSystemState_STARTVALUE        0
#define PRIVATE_CAN_PDCInfo_PDCSystemState_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_PDCInfo_PDCSystemState_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCInfo_PDCSystemState_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_Raw = PRIVATE_CAN_PDCInfo_PDCSystemState_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCInfo_PDCSystemState_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_Raw = PRIVATE_CAN_PDCInfo_PDCSystemState_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_PDCSystemState_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_Raw = PRIVATE_CAN_PDCInfo_PDCSystemState_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_PDCSystemState_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_Raw = PRIVATE_CAN_PDCInfo_PDCSystemState_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCInfo_PDCSystemState_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_Raw = PRIVATE_CAN_PDCInfo_PDCSystemState_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_Raw = PRIVATE_CAN_PDCInfo_PDCSystemState_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCInfo_PDCSystemState_Encode(data, PRIVATE_CAN.SalvatorX.PDCInfo.PDCSystemState_Raw);
}


#define PRIVATE_CAN_PDCFrontAndLeft_ID   1192U	/* MsgId=0x4a8 */
#define PRIVATE_CAN_PDCFrontAndLeft_NAME "PDCFrontAndLeft"
#define PRIVATE_CAN_PDCFrontAndLeft_DLC  8

#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront1CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront1IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront1Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront1Slice_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront2CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront2IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront2Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront2Slice_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront3CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront3IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront3Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront3Slice_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront4CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront4IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCFront4Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCFront4Slice_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft1Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft1Slice_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft2Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft2Slice_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft3Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft3Slice_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_Raw = PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCFrontAndLeft_PDCLeft4Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCFrontAndLeft.PDCLeft4Slice_Raw);
}


#define PRIVATE_CAN_PDCRearAndRight_ID   1193U	/* MsgId=0x4a9 */
#define PRIVATE_CAN_PDCRearAndRight_NAME "PDCRearAndRight"
#define PRIVATE_CAN_PDCRearAndRight_DLC  8

#define PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear1CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear1IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear1Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear1Slice_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear2CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear2IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear2Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear2Slice_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear3CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear3IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear3Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear3Slice_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear4CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear4IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRear4Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRear4Slice_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight1CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight1IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight1Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight1Slice_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight2CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight2IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight2Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight2Slice_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight3CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight3IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight3Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight3Slice_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight4CriticalLevel_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4CriticalLevel_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight4IntersectDrvTube_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4IntersectDrvTube_Raw);
}
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_STARTVALUE        0
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_Phys2Raw(val);
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_Raw = PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_Phys2Raw(val);
#endif
    PRIVATE_CAN_PDCRearAndRight_PDCRight4Slice_Encode(data, PRIVATE_CAN.SalvatorX.PDCRearAndRight.PDCRight4Slice_Raw);
}


#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ID   1194U	/* MsgId=0x4aa */
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_NAME "APHMIInParkDistViewHigh4"
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_DLC  7

#define PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_Alive_APHMIInParkDistViewHigh4_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.Alive_APHMIInParkDistViewHigh4_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_CRC_APHMIInParkDistViewHigh4_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.CRC_APHMIInParkDistViewHigh4_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh31_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh31_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh32_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh32_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh33_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh33_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh34_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh34_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh35_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh35_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh36_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh36_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh37_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh37_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh38_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh38_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh39_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh39_Raw);
}
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_STARTVALUE        0
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_Raw = PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInParkDistViewHigh4_ParkDistViewHigh40_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInParkDistViewHigh4.ParkDistViewHigh40_Raw);
}


#define PRIVATE_CAN_APHMIInGeneral2_ID   1195U	/* MsgId=0x4ab */
#define PRIVATE_CAN_APHMIInGeneral2_NAME "APHMIInGeneral2"
#define PRIVATE_CAN_APHMIInGeneral2_DLC  8

#define PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 15))
#define PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~15) | (PRIVATE_CAN_BitOpUC_And((raw), 15)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_Alive_APHMIInGeneral2_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.Alive_APHMIInGeneral2_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<7)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<7); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMemParkPoss_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMemParkPoss_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~63) | (PRIVATE_CAN_BitOpUC_And((raw), 63)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralMessageRemote_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralMessageRemote_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(3<<5)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<5); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralRemModeActive_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralRemModeActive_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~31) | (PRIVATE_CAN_BitOpUC_And((raw), 31)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIGeneralScreenRemote_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIGeneralScreenRemote_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_Encode(data, raw) { \
    (data)[7] = ((data)[7] & ~63) | (PRIVATE_CAN_BitOpUC_And((raw), 63)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInAdjustmentButtons_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInAdjustmentButtons_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(1<<7)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<7); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInDisplayBackButton_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInDisplayBackButton_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(7<<5)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<5); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInGarageParkingState_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInGarageParkingState_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(3<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<3); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorizedPoseSlotId_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorizedPoseSlotId_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInMemorySlotsStatus_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInMemorySlotsStatus_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_Encode(data, raw) { \
    (data)[6] = ((data)[6] & ~(7<<5)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<5); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInSlotUnreachReason_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSlotUnreachReason_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(1<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<4); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInStreamAvailable_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInStreamAvailable_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_Encode(data, raw) { \
    (data)[4] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIInSVScrenResponse_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIInSVScrenResponse_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 180))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_Encode(data, raw) { \
    (data)[5] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYaw_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYaw_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_Raw = PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_APHMIMemorizedPoseYawSign_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.APHMIMemorizedPoseYawSign_Raw);
}
#define PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_STARTVALUE        0
#define PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_Phys2Raw(val);
#if defined(PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_Raw = PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_Phys2Raw(val);
#endif
    PRIVATE_CAN_APHMIInGeneral2_CRC_APHMIInGeneral2_Encode(data, PRIVATE_CAN.SalvatorX.APHMIInGeneral2.CRC_APHMIInGeneral2_Raw);
}


#define PRIVATE_CAN_TONHInfo_ID   1199U	/* MsgId=0x4af */
#define PRIVATE_CAN_TONHInfo_NAME "TONHInfo"
#define PRIVATE_CAN_TONHInfo_DLC  3

#define PRIVATE_CAN_TONHInfo_FrontSpeakerOn_STARTVALUE        0
#define PRIVATE_CAN_TONHInfo_FrontSpeakerOn_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_TONHInfo_FrontSpeakerOn_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_TONHInfo_FrontSpeakerOn_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerOn_Phys2Raw(val);
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerOn_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerOn_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerOn_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerOn_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerOn_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerOn_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerOn_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerOn_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerOn_Phys2Raw(val);
#endif
    PRIVATE_CAN_TONHInfo_FrontSpeakerOn_Encode(data, PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerOn_Raw);
}
#define PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_STARTVALUE        0
#define PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_Encode(data, raw) { \
    (data)[0] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_Phys2Raw(val);
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_Phys2Raw(val);
#endif
    PRIVATE_CAN_TONHInfo_FrontSpeakerPitch_Encode(data, PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerPitch_Raw);
}
#define PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_STARTVALUE        0
#define PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~7) | (PRIVATE_CAN_BitOpUC_And((raw), 7)); \
}
static inline void
PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_Phys2Raw(val);
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_Phys2Raw(val);
#endif
    PRIVATE_CAN_TONHInfo_FrontSpeakerVolume_Encode(data, PRIVATE_CAN.SalvatorX.TONHInfo.FrontSpeakerVolume_Raw);
}
#define PRIVATE_CAN_TONHInfo_RearSpeakerOn_STARTVALUE        0
#define PRIVATE_CAN_TONHInfo_RearSpeakerOn_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_TONHInfo_RearSpeakerOn_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<7)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<7); \
}
static inline void
PRIVATE_CAN_TONHInfo_RearSpeakerOn_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerOn_Phys2Raw(val);
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerOn_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerOn_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerOn_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerOn_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerOn_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerOn_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerOn_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerOn_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerOn_Phys2Raw(val);
#endif
    PRIVATE_CAN_TONHInfo_RearSpeakerOn_Encode(data, PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerOn_Raw);
}
#define PRIVATE_CAN_TONHInfo_RearSpeakerPitch_STARTVALUE        0
#define PRIVATE_CAN_TONHInfo_RearSpeakerPitch_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_TONHInfo_RearSpeakerPitch_Encode(data, raw) { \
    (data)[1] = (PRIVATE_CAN_BitOpUC_And((raw), 255)); \
}
static inline void
PRIVATE_CAN_TONHInfo_RearSpeakerPitch_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerPitch_Phys2Raw(val);
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerPitch_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerPitch_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerPitch_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerPitch_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerPitch_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerPitch_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerPitch_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerPitch_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerPitch_Phys2Raw(val);
#endif
    PRIVATE_CAN_TONHInfo_RearSpeakerPitch_Encode(data, PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerPitch_Raw);
}
#define PRIVATE_CAN_TONHInfo_RearSpeakerVolume_STARTVALUE        0
#define PRIVATE_CAN_TONHInfo_RearSpeakerVolume_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 7))
#define PRIVATE_CAN_TONHInfo_RearSpeakerVolume_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(7<<3)) | ((PRIVATE_CAN_BitOpUC_And((raw), 7))<<3); \
}
static inline void
PRIVATE_CAN_TONHInfo_RearSpeakerVolume_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerVolume_Phys2Raw(val);
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerVolume_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerVolume_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerVolume_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerVolume_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerVolume_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerVolume_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_TONHInfo_RearSpeakerVolume_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerVolume_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_Raw = PRIVATE_CAN_TONHInfo_RearSpeakerVolume_Phys2Raw(val);
#endif
    PRIVATE_CAN_TONHInfo_RearSpeakerVolume_Encode(data, PRIVATE_CAN.SalvatorX.TONHInfo.RearSpeakerVolume_Raw);
}


#define PRIVATE_CAN_WHPInfo_ID   1279U	/* MsgId=0x4ff */
#define PRIVATE_CAN_WHPInfo_NAME "WHPInfo"
#define PRIVATE_CAN_WHPInfo_DLC  6

#define PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~63) | (PRIVATE_CAN_BitOpUC_And((raw), 63)); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlAbsAngleFL_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFL_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~63) | (PRIVATE_CAN_BitOpUC_And((raw), 63)); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlAbsAngleFR_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleFR_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~63) | (PRIVATE_CAN_BitOpUC_And((raw), 63)); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlAbsAngleRL_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRL_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~63) | (PRIVATE_CAN_BitOpUC_And((raw), 63)); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_Raw = PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlAbsAngleRR_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlAbsAngleRR_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlDirectionFL_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlDirectionFL_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlDirectionFL_Encode(data, raw) { \
    (data)[2] = ((data)[2] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlDirectionFL_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFL_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFL_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFL_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFL_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFL_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFL_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFL_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFL_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFL_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFL_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlDirectionFL_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFL_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlDirectionFR_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlDirectionFR_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlDirectionFR_Encode(data, raw) { \
    (data)[3] = ((data)[3] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlDirectionFR_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFR_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFR_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFR_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFR_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFR_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFR_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFR_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionFR_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFR_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionFR_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlDirectionFR_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionFR_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlDirectionRL_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlDirectionRL_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlDirectionRL_Encode(data, raw) { \
    (data)[4] = ((data)[4] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlDirectionRL_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRL_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRL_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRL_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRL_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRL_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRL_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRL_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRL_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRL_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRL_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlDirectionRL_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRL_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlDirectionRR_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlDirectionRR_Phys2Raw(val)     \
    ((val))
#define PRIVATE_CAN_WHPInfo_WhlDirectionRR_Encode(data, raw) { \
    (data)[5] = ((data)[5] & ~(1<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<6); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlDirectionRR_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRR_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRR_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRR_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRR_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRR_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRR_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRR_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlDirectionRR_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRR_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_Raw = PRIVATE_CAN_WHPInfo_WhlDirectionRR_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlDirectionRR_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlDirectionRR_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~3) | (PRIVATE_CAN_BitOpUC_And((raw), 3)); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlWarningLevelFL_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFL_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(3<<2)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<2); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlWarningLevelFR_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelFR_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(3<<4)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<4); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlWarningLevelRL_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRL_Raw);
}
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_Encode(data, raw) { \
    (data)[0] = ((data)[0] & ~(3<<6)) | ((PRIVATE_CAN_BitOpUC_And((raw), 3))<<6); \
}
static inline void
PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_Raw = PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WhlWarningLevelRR_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WhlWarningLevelRR_Raw);
}
#define PRIVATE_CAN_WHPInfo_WHPDisplayReq_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WHPDisplayReq_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 1))
#define PRIVATE_CAN_WHPInfo_WHPDisplayReq_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~(1<<2)) | ((PRIVATE_CAN_BitOpUC_And((raw), 1))<<2); \
}
static inline void
PRIVATE_CAN_WHPInfo_WHPDisplayReq_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_Raw = PRIVATE_CAN_WHPInfo_WHPDisplayReq_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WHPDisplayReq_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_Raw = PRIVATE_CAN_WHPInfo_WHPDisplayReq_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WHPDisplayReq_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_Raw = PRIVATE_CAN_WHPInfo_WHPDisplayReq_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WHPDisplayReq_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_Raw = PRIVATE_CAN_WHPInfo_WHPDisplayReq_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WHPDisplayReq_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_Raw = PRIVATE_CAN_WHPInfo_WHPDisplayReq_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_Raw = PRIVATE_CAN_WHPInfo_WHPDisplayReq_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WHPDisplayReq_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WHPDisplayReq_Raw);
}
#define PRIVATE_CAN_WHPInfo_WHPState_STARTVALUE        0
#define PRIVATE_CAN_WHPInfo_WHPState_Phys2Raw(val)     \
    (PRIVATE_CAN_FixMax((val), 3))
#define PRIVATE_CAN_WHPInfo_WHPState_Encode(data, raw) { \
    (data)[1] = ((data)[1] & ~3) | (PRIVATE_CAN_BitOpUC_And((raw), 3)); \
}
static inline void
PRIVATE_CAN_WHPInfo_WHPState_SetV(
    unsigned char       *data,
    unsigned char       val)
{
    if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Valid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_Raw = PRIVATE_CAN_WHPInfo_WHPState_Phys2Raw(val);
#if defined(PRIVATE_CAN_WHPInfo_WHPState_INVALIDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Invalid])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_Raw = PRIVATE_CAN_WHPInfo_WHPState_INVALIDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WHPState_ERRORVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Error])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_Raw = PRIVATE_CAN_WHPInfo_WHPState_ERRORVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WHPState_UNDEFINEDVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Undefined])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_Raw = PRIVATE_CAN_WHPInfo_WHPState_UNDEFINEDVALUE;
#endif
#if defined(PRIVATE_CAN_WHPInfo_WHPState_UNAVAILABLEVALUE)
    else if (PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_State == PRIVATE_CAN_SigStates[PRIVATE_CAN_SState_Unavailable])
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_Raw = PRIVATE_CAN_WHPInfo_WHPState_UNAVAILABLEVALUE;
#endif
#if defined(PRIVATE_CAN_SIGSTATE_UNKNOWN_CONVERT)
    else
	PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_Raw = PRIVATE_CAN_WHPInfo_WHPState_Phys2Raw(val);
#endif
    PRIVATE_CAN_WHPInfo_WHPState_Encode(data, PRIVATE_CAN.SalvatorX.WHPInfo.WHPState_Raw);
}

#pragma warning( pop )


#ifdef __cplusplus
}
#endif

#endif	/* #if !defined(__PRIVATE_CAN_H__) */
