#********************************************************************# System Imports#*******************************************************************import sysimport osimport warningsfrom collections import namedtuplefrom itertools import productimport copy#********************************************************************# Own Imports#*******************************************************************from pyBase_path_cfg import *import openpyxl, jdcalfrom cmTestRunSimple import cmTestRunSimpleimport Factoriesfrom Constants import *TESTRUN_PREFIX = "UDPSim_"baseTestRuns = ["Straight_Static", "Straight_StopAndGo", "PerpRight"]#********************************************************************# Main Program#********************************************************************def GenerateCMTestRun():    print("Generating CM testRuns...")        if not os.path.exists(UDPGENERATED_PATH):        os.makedirs(UDPGENERATED_PATH)        #---------------------------------------------------------------------------    # Static Pole    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    poleLatOffList      = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25] # m    stopDistList        = [0.0, 0.3] # m        for currSetup in product(egoVelocityList, poleLatOffList, stopDistList):        currEgoVelocity = currSetup[0]        currLatOff = currSetup[1]        currStopDist = currSetup[2]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Pole__vEgo{}_offY{}_stop{}".format(currEgoVelocity, currLatOff, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="pole", lateralOffset=currLatOff)        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Wall    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    wallAngList         = [45, 90] # deg    stopDistList        = [0.0, 0.3] # m    wallLength          = 0.3 # m (along X axis)    wallWidth           = 4.0 # m (along Y axis)    wallHeight          = 2.5 # m        for currSetup in product(egoVelocityList, wallAngList, stopDistList):        currEgoVelocity = currSetup[0]        currAng = currSetup[1] # subtract 90° for Factory call (obstacles are considered perpendicular by default)        currStopDist = currSetup[2]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Wall__vEgo{}_psi{}_stop{}".format(currEgoVelocity, currAng, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="wall", length=wallLength, width=wallWidth, height=wallHeight, psi=(currAng - 90))        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Box    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    boxLatOffList       = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25] # m    boxAngList          = [45, 90] # deg    stopDistList        = [0.0, 0.3] # m        for currSetup in product(egoVelocityList, boxLatOffList, boxAngList, stopDistList):        currEgoVelocity = currSetup[0]        currLatOff = currSetup[1]        currAng = currSetup[2] # subtract 90° for Factory call (obstacles are considered perpendicular by default)        currStopDist = currSetup[3]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Box__vEgo{}_offY{}_psi{}_stop{}".format(currEgoVelocity, currLatOff, currAng, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="box", lateralOffset=currLatOff, psi=(currAng - 90))        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Curb    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    curbAngList         = [45, 90] # deg    stopDistList        = [0.0, 0.3] # m    curbLength          = 0.15 # m (along X axis)    curbWidth           = 4.0 # m (along Y axis)    curbHeight          = 0.12 # m        for currSetup in product(egoVelocityList, curbAngList, stopDistList):        currEgoVelocity = currSetup[0]        currAng = currSetup[1] # subtract 90° for Factory call (obstacles are considered perpendicular by default)        currStopDist = currSetup[2]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Curb__vEgo{}_psi{}_stop{}".format(currEgoVelocity, currAng, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="curb", length=curbLength, width=curbWidth, height=curbHeight, psi=(currAng - 90))        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static NCAP Pedestrian    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    pedLatOffList       = [0.0, 0.5, 1.0] # m    stopDistList        = [0.0, 0.3] # m        for currSetup in product(egoVelocityList, pedLatOffList, stopDistList):        currEgoVelocity = currSetup[0]        currLatOff = currSetup[1]        currStopDist = currSetup[2]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Pedestrian__vEgo{}_offY{}_stop{}".format(currEgoVelocity, currLatOff, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="pedestrian", lateralOffset=currLatOff)        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Vehicle (rear)    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    carLatOffList       = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25] # m    carAngList          = [45, 90] # deg    stopDistList        = [0.0, 0.3] # m        for currSetup in product(egoVelocityList, carLatOffList, carAngList, stopDistList):        currEgoVelocity = currSetup[0]        currLatOff = currSetup[1]        currAng = currSetup[2] # replace 90° with 0° for Factory call (default positioning is perpendicular to rear of the car)        currStopDist = currSetup[3]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Vehicle__vEgo{}_offY{}_psi{}_stop{}".format(currEgoVelocity, currLatOff, currAng, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="car", lateralOffset=currLatOff, psi=(0 if currAng==90 else currAng))        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Cone    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    coneLatOffList      = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25] # m    stopDistList        = [0.0, 0.3] # m        for currSetup in product(egoVelocityList, coneLatOffList, stopDistList):        currEgoVelocity = currSetup[0]        currLatOff = currSetup[1]        currStopDist = currSetup[2]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Cone__vEgo{}_offY{}_stop{}".format(currEgoVelocity, currLatOff, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="cone", lateralOffset=currLatOff)        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Motorcycle    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    motoLatOffList      = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25] # m    motoAngList         = [45, 90] # deg    stopDistList        = [0.0, 0.3] # m        for currSetup in product(egoVelocityList, motoLatOffList, motoAngList, stopDistList):        currEgoVelocity = currSetup[0]        currLatOff = currSetup[1]        currAng = currSetup[2] # replace 90° with 0° for Factory call (default positioning is perpendicular to rear of the motorcycle)        currStopDist = currSetup[3]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Motorcycle__vEgo{}_offY{}_psi{}_stop{}".format(currEgoVelocity, currLatOff, currAng, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="motorcyle", lateralOffset=currLatOff, psi=(0 if currAng==90 else currAng))        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Bobby Car    #---------------------------------------------------------------------------        egoVelocityList     = [5, 9, 13] # km/h    bobbyLatOffList     = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25] # m    bobbyAngList        = [0, 45, 90] # deg    stopDistList        = [0.0, 0.3] # m    # Replace Bobby car model with a box    bobbyLength         = 0.57 # m    bobbyWidth          = 0.30 # m    bobbyHeight         = 0.39 # m        for currSetup in product(egoVelocityList, bobbyLatOffList, bobbyAngList, stopDistList):        currEgoVelocity = currSetup[0]        currLatOff = currSetup[1]        currAng = currSetup[2] # check if angle should be separated in 2 different for calls (Bobby car read and perpendicular)        currStopDist = currSetup[3]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_BobbyCar__vEgo{}_offY{}_psi{}_stop{}".format(currEgoVelocity, currLatOff, currAng, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryObstacle(testRun, type="box", length=bobbyLength, width=bobbyWidth, height=bobbyHeight, lateralOffset=currLatOff, psi=currAng)        Factories.FactorySimpleCollision(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Stop and Go    #---------------------------------------------------------------------------        egoVelocityList     = [6, 8, 10] # km/h    stopDistList        = [1.0, 1.5] # m        for currSetup in product(egoVelocityList, stopDistList):        currEgoVelocity = currSetup[0]        currStopDist = currSetup[1]                      currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[1] + "__vEgo{}_stop{}".format(currEgoVelocity, currStopDist) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStopAndGo(testRun, vEgo=currEgoVelocity, stopOff=currStopDist)        testRun.save(UDPGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Parking - perpendicular right    #---------------------------------------------------------------------------        egoVelocityList     = [5, 8, 10, 12, 15] # km/h    latDistList         = [0.75, 1.0, 1.25, 1.5] # m    parkSlotLenList     = [4.5, 4.5, 5.5, 5.5] # m    limPEndList         = ["none", "curb_t", "curb_t", "wall"] # type        for i in range(len(parkSlotLenList)):        currParkSlotLen = parkSlotLenList[i]        currLimPEnd = limPEndList[i]        for currSetup in product(egoVelocityList, latDistList):            currEgoVelocity = currSetup[0]            currLatDist = currSetup[1]                              currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[2] + "__{}_vEgo{}_offY{}_lenP{}".format(currLimPEnd, currEgoVelocity, currLatDist, currParkSlotLen) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryPerpendicularParking(testRun, vEgo=currEgoVelocity, lenP=currParkSlotLen, limPEnd=currLimPEnd, latDist=currLatDist)            testRun.save(UDPGENERATED_TEMP_PATH)if __name__ == "__main__":    try:        args = sys.argv        if len(args) == 1:            print("Starting TestRunGenerator.py")            GenerateCMTestRun()            print("Finished TestRunGenerator.py")        else:            print("Unknown argument for TestRunGenerator.py")            except Exception as e:        print (e)        input("Exception in executing TestRunGenerator.py.\nHit enter To Close...")