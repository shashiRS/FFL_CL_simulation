#********************************************************************# System Imports#*******************************************************************import sysimport osimport warningsfrom collections import namedtuplefrom itertools import productimport copy#********************************************************************# Own Imports#*******************************************************************from pyBase_path_cfg import *import openpyxl, jdcalfrom cmTestRunSimple import cmTestRunSimpleimport Factoriesfrom constants import *TESTRUN_PREFIX = "PDWSim_"baseTestRuns = ["Sector_Static_Pole"]baseTestRunsRTFwdDynamic = ["Sector_Dyn_Ped_Toward_RightSector_2KPH", "Sector_Dyn_Ped_Toward_RightSector_5KPH", "Sector_Dyn_Ped_Toward_RightSector_10KPH"]baseTestRunsLTFwdDynamic = ["Sector_Dyn_Ped_Toward_LeftSector_2KPH", "Sector_Dyn_Ped_Toward_LeftSector_5KPH", "Sector_Dyn_Ped_Toward_LeftSector_10KPH"]baseTestRunsRFFwdDynamic = ["Sector_Dyn_Ped_Forward_RightSector_5KPH", "Sector_Dyn_Ped_Forward_RightSector_10KPH"]baseTestRunsLFFwdDynamic = ["Sector_Dyn_Ped_Forward_LeftSector_5KPH", "Sector_Dyn_Ped_Forward_LeftSector_10KPH"]baseTestRunsRightStatic= ["Sector_Right_Static_Pole", "Sector_Right_Static_PoleFive", "Sector_Right_Static_PoleTen"]baseTestRunsLeftStatic= ["Sector_Left_Static_Pole", "Sector_Left_Static_PoleFive", "Sector_Left_Static_PoleTen"]baseTestRunsDynStaticEgo= ["Sector_EgoV_Static_Fwd_Dyn_Pedestrian_2KPH", "Sector_EgoV_Static_Fwd_Dyn_Pedestrian_5KPH", "Sector_EgoV_Static_Bwd_Dyn_Pedestrian_2KPH", "Sector_EgoV_Static_Bwd_Dyn_Pedestrian_5KPH"]baseTestRunsStatFront = ["Stat_Obs_Fwd_Straight_Front_2KPH", "Stat_Obs_Fwd_Straight_Front_5KPH", "Stat_Obs_Fwd_Straight_Front_10KPH", "Stat_Obs_Fwd_AutoAct_Straight_Front_2KPH", "Stat_Obs_Fwd_AutoAct_Straight_Front_5KPH", "Stat_Obs_Fwd_AutoAct_Straight_Front_10KPH"]baseTestRunsStatRear = ["Stat_Obs_Bwd_Straight_Rear_2KPH", "Stat_Obs_Bwd_Straight_Rear_5KPH", "Stat_Obs_Bwd_Straight_Rear_10KPH"]baseTestRunStatFrontCurvedLeft = ["Stat_Obs_Fwd_Curved_Left_Front_2KPH", "Stat_Obs_Fwd_Curved_Left_Front_5KPH", "Stat_Obs_Fwd_Curved_Left_Front_10KPH"]baseTestRunStatFrontCurvedRight = ["Stat_Obs_Fwd_Curved_Right_Front_2KPH", "Stat_Obs_Fwd_Curved_Right_Front_5KPH", "Stat_Obs_Fwd_Curved_Right_Front_10KPH"]baseTestRunStatRearCurvedRight = ["Stat_Obs_Bwd_Curved_Right_Rear_2KPH", "Stat_Obs_Bwd_Curved_Right_Rear_5KPH", "Stat_Obs_Bwd_Curved_Right_Rear_10KPH"]baseTestRunStatRearCurvedLeft = ["Stat_Obs_Bwd_Curved_Left_Rear_2KPH", "Stat_Obs_Bwd_Curved_Left_Rear_5KPH", "Stat_Obs_Bwd_Curved_Left_Rear_10KPH"]baseTestRunsDynamicStraightFront = ["Sector_Dyn_Ped_Toward_Front_2KPH", "Sector_Dyn_Ped_Toward_Front_5KPH", "Sector_Dyn_Ped_Toward_Front_10KPH", "Sector_Dyn_Ped_Forward_Front_5KPH", "Sector_Dyn_Ped_Forward_Front_10KPH"]baseTestRunsDynamicStraightRear = ["Sector_Dyn_Ped_Toward_Rear_2KPH", "Sector_Dyn_Ped_Toward_Rear_5KPH", "Sector_Dyn_Ped_Toward_Rear_10KPH", "Sector_Dyn_Ped_Backward_Rear_5KPH", "Sector_Dyn_Ped_Backward_Rear_10KPH"]#********************************************************************# Main Program#********************************************************************def GenerateCMTestRun():    print("Generating CM testRuns...")        if not os.path.exists(PDWFACTORYGENERATED_PATH):        os.makedirs(PDWFACTORYGENERATED_PATH)        #===========================================================================    # Activation Use Cases    #===========================================================================        ## Activation use cases    egoSectorList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12, 13, 14, 15, 16] # number of PDW sectorID    egoSliceList  = [1, 2, 3, 4, 5, 6, 7, 8, 9] # number of PDW sliceID    egoSectorListCar = [1, 2, 3, 4] #number of PDW sectorID for cars    egoSectorListMotorcycle = [1, 2, 3, 4, 5, 6, 7,8] # number of PDW for motorcicles    egoVelocityList = [1] #ego vehicle speed in km/h    objDistanceList = [1, 2, 3] # distance    objPedDistanceList = [1, 2, 3] # distance for pedestrian    dynObjDistanceList = [1, 2, 3] # distances of the dynamic object ~ 50, ~100, ~200 cm    egoSubsectorList = [1, 2, 3, 4] # number of subsectors for each sector        ## Sector and slice check - all poles shifted simultaniously    for slice in egoSliceList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "_Slice{}".format(slice) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        for sector in egoSectorList:            Factories.FactoryStaticPole(testRun, sectorID=sector, sliceID=slice)        testRun.save(PDWGENERATED_TEMP_PATH)          ## Dynamic obstacle pedestrian    ##Right Pedestrian moving Toward Ego Vehicle    for testScenario in range(len(baseTestRunsRTFwdDynamic)):        for distance in dynObjDistanceList:            currName = TESTRUN_PREFIX + "UC_" + baseTestRunsRTFwdDynamic[testScenario] + "_Distance{}".format(distance) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsRTFwdDynamic[testScenario] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.FactoryDescription(testRun, useCase=1)            Factories.init(testRun)            Factories.FactoryDynamicRPedestrian(testRun, vSpeed = distance, sectorID = distance)            testRun.save(PDWGENERATED_TEMP_PATH)        ##Left Pedestrian moving Toward Ego Vehicle    for testScenario in range(len(baseTestRunsLTFwdDynamic)):        for distance in dynObjDistanceList:            currName = TESTRUN_PREFIX + "UC_" + baseTestRunsLTFwdDynamic[testScenario] + "_Distance{}".format(distance) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsLTFwdDynamic[testScenario] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.FactoryDescription(testRun, useCase=1)            Factories.init(testRun)            Factories.FactoryDynamicLPedestrian(testRun, vSpeed = distance, sectorID = distance)            testRun.save(PDWGENERATED_TEMP_PATH)                ##Right Pedestrian moving Forward Ego Vehicle    for testScenario in range(len(baseTestRunsRFFwdDynamic)):        for distance in dynObjDistanceList:            currName = TESTRUN_PREFIX + "UC_" + baseTestRunsRFFwdDynamic[testScenario] + "_Distance{}".format(distance) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsRFFwdDynamic[testScenario] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.FactoryDescription(testRun, useCase=1)            Factories.init(testRun)            Factories.FactoryDynamicRPedestrian(testRun, vSpeed = distance, sectorID = distance)            testRun.save(PDWGENERATED_TEMP_PATH)        ##Left Pedestrian moving Forward Ego Vehicle    for testScenario in range(len(baseTestRunsLFFwdDynamic)):        for distance in dynObjDistanceList:            currName = TESTRUN_PREFIX + "UC_" + baseTestRunsLFFwdDynamic[testScenario] + "_Distance{}".format(distance) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsLFFwdDynamic[testScenario] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.FactoryDescription(testRun, useCase=1)            Factories.init(testRun)            Factories.FactoryDynamicLPedestrian(testRun, vSpeed = distance, sectorID = distance)            testRun.save(PDWGENERATED_TEMP_PATH)        ## Static ISO pole Right    for distance in objDistanceList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsRightStatic[0] + "_Distance{}".format(distance)+ "_2KPH" + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsRightStatic[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticRight(testRun, vSpeed = distance, sectorID = distance)        testRun.save(PDWGENERATED_TEMP_PATH)    #######    for distance in objDistanceList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsRightStatic[0] + "_Distance{}".format(distance) + "_5KPH" + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsRightStatic[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticRight(testRun, vSpeed = distance, sectorID = distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###########    for distance in objDistanceList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsRightStatic[0] + "_Distance{}".format(distance) + "_10KPH" + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsRightStatic[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticRight(testRun, vSpeed = distance, sectorID = distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ## Static ISO pole Left    for distance in objDistanceList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsLeftStatic[0] + "_Distance{}".format(distance)+ "_2KPH" + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsLeftStatic[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticLeft(testRun, vSpeed = distance, sectorID = distance)        testRun.save(PDWGENERATED_TEMP_PATH)    #######    for distance in objDistanceList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsLeftStatic[0] + "_Distance{}".format(distance) + "_5KPH" + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsLeftStatic[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticLeft(testRun, vSpeed = distance, sectorID = distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###########    for distance in objDistanceList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsLeftStatic[0] + "_Distance{}".format(distance) + "_10KPH" + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsLeftStatic[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticLeft(testRun, vSpeed = distance, sectorID = distance)        testRun.save(PDWGENERATED_TEMP_PATH)        #####Dynamic Obstacle Static EGO Vehicle    for testCase in range(len(baseTestRunsDynStaticEgo)):        for distance in dynObjDistanceList:            currName = TESTRUN_PREFIX + "UC_" + baseTestRunsDynStaticEgo[testCase] + "_Distance{}".format(distance) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsDynStaticEgo[testCase] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.FactoryDescription(testRun, useCase=1)            Factories.init(testRun)            Factories.FactoryDynamicObstacleEgoStatic(testRun, vSpeed = distance, sectorID = distance)            testRun.save(PDWGENERATED_TEMP_PATH)            ### Static ISO Pole vehicle moving forward Left Curved    ###### 2km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatFrontCurvedLeft[0] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatFrontCurvedLeft[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedLeftFrontTwo(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 5km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatFrontCurvedLeft[1] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatFrontCurvedLeft[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedLeftFrontFive(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 10km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatFrontCurvedLeft[2] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatFrontCurvedLeft[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedLeftFrontTen(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ### Static ISO Pole vehicle moving forward Right Curved    ###### 2km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatFrontCurvedRight[0] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatFrontCurvedRight[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedRightFrontTwo(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 5km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatFrontCurvedRight[1] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatFrontCurvedRight[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedRightFrontFive(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 10km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatFrontCurvedRight[2] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatFrontCurvedRight[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedRightFrontTen(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)        ### Static ISO Pole vehicle moving backward Right Curved    ###### 2km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatRearCurvedRight[0] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatRearCurvedRight[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedRightRearTwo(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 5km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatRearCurvedRight[1] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatRearCurvedRight[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedRightRearFive(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 10km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatRearCurvedRight[2] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatRearCurvedRight[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedRightRearTen(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)        ### Static ISO Pole vehicle moving backward Left Curved    ###### 2km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatRearCurvedLeft[0] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatRearCurvedLeft[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedLeftRearTwo(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 5km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatRearCurvedLeft[1] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatRearCurvedLeft[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedLeftRearFive(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ###### 10km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunStatRearCurvedLeft[2] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunStatRearCurvedLeft[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticCurvedLeftRearTen(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)        ##Static ISO Pole Vehicle moving forward straight    ####    for testCase in range(len(baseTestRunsStatFront)):            for distance in egoSubsectorList:            currName = TESTRUN_PREFIX + "UC_" + baseTestRunsStatFront[testCase] + "_Sector{}".format(distance) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsStatFront[testCase] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.FactoryDescription(testRun, useCase=1)            Factories.init(testRun)            Factories.FactoryStaticFront(testRun, sectorID=distance, sliceID=distance)            testRun.save(PDWGENERATED_TEMP_PATH)        ## Static ISO Pole Vehicle moving backward straight        ##### 2km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsStatRear[0] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsStatRear[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticRearTwo(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ##### 5km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsStatRear[1] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsStatRear[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticRearFive(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)    ##### 10km/h    for distance in egoSubsectorList:        currName = TESTRUN_PREFIX + "UC_" + baseTestRunsStatRear[2] + "_Sector{}".format(distance) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsStatRear[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.FactoryDescription(testRun, useCase=1)        Factories.init(testRun)        Factories.FactoryStaticRearTen(testRun, sectorID=distance, sliceID=distance)        testRun.save(PDWGENERATED_TEMP_PATH)       ### Dynamic obs Straight path, forward and backward moving    #Forward direction    for testCase in range(len(baseTestRunsDynamicStraightFront)):        for distance in objPedDistanceList:                        if distance == objPedDistanceList[2]:                currName = TESTRUN_PREFIX + "UC_" + baseTestRunsDynamicStraightFront[testCase] + "_Sector{}".format(distance+1) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsDynamicStraightFront[testCase] + ".testrun")                testRun = cmTestRunSimple(currName, basePath)                Factories.FactoryDescription(testRun, useCase=1)                Factories.init(testRun)                Factories.FactoryDynamicStraightInsideDrvTubeFront(testRun, sectorID=distance, sliceID=distance)                testRun.save(PDWGENERATED_TEMP_PATH)            else:                currName = TESTRUN_PREFIX + "UC_" + baseTestRunsDynamicStraightFront[testCase] + "_Sector{}".format(distance) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsDynamicStraightFront[testCase] + ".testrun")                testRun = cmTestRunSimple(currName, basePath)                Factories.FactoryDescription(testRun, useCase=1)                Factories.init(testRun)                Factories.FactoryDynamicStraightInsideDrvTubeFront(testRun, sectorID=distance, sliceID=distance)                testRun.save(PDWGENERATED_TEMP_PATH)        #Backward direction    for testCase in range(len(baseTestRunsDynamicStraightRear)):        for distance in objPedDistanceList:                        if distance == objPedDistanceList[2]:                currName = TESTRUN_PREFIX + "UC_" + baseTestRunsDynamicStraightRear[testCase] + "_Sector{}".format(distance+1) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsDynamicStraightRear[testCase] + ".testrun")                testRun = cmTestRunSimple(currName, basePath)                Factories.FactoryDescription(testRun, useCase=1)                Factories.init(testRun)                Factories.FactoryDynamicStraightInsideDrvTubeRear(testRun, sectorID=distance, sliceID=distance)                testRun.save(PDWGENERATED_TEMP_PATH)            else:                currName = TESTRUN_PREFIX + "UC_" + baseTestRunsDynamicStraightRear[testCase] + "_Sector{}".format(distance) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRunsDynamicStraightRear[testCase] + ".testrun")                testRun = cmTestRunSimple(currName, basePath)                Factories.FactoryDescription(testRun, useCase=1)                Factories.init(testRun)                Factories.FactoryDynamicStraightInsideDrvTubeRear(testRun, sectorID=distance, sliceID=distance)                testRun.save(PDWGENERATED_TEMP_PATH)        if __name__ == "__main__":    try:        args = sys.argv        if len(args) == 1:            print("Starting TestRunGenerator.py")            GenerateCMTestRun()            print("Finished TestRunGenerator.py")        else:            print("Unknown argument for TestRunGenerator.py")            except Exception as e:        print (e)        input("Exception in executing TestRunGenerator.py.\nHit enter To Close...")        