#********************************************************************# System Imports#********************************************************************import sysimport impimp.reload(sys)# sys.setdefaultencoding('utf8')import cmTestRunSimpleimport mathimport numpy as npimport scipy.interpolatefrom collections import namedtuplefrom constants import *# Interpolation tables for determining mean front angle (inner & outer wheels) based on steering wheel angle# steering wheel angle in rad# mean front angle in radSTEER_WHEEL_ANGLE = [  0.5,   1.0,   1.5,   2.0,   2.5,   3.0,   3.5,   4.0,   4.5,   5.0,   5.5,   6.0,   6.5,   7.0,   7.5,   8.0, 8.527]MEAN_FRONT_ANGLE  = [0.031, 0.064, 0.099, 0.133, 0.166, 0.198, 0.232, 0.266, 0.300, 0.335, 0.371, 0.408, 0.446, 0.486, 0.526, 0.568, 0.612]yInterp_meanAngle = scipy.interpolate.interp1d(STEER_WHEEL_ANGLE, MEAN_FRONT_ANGLE)laneWidth     = 0egoStartX     = 0egoStartY     = 0#====================================================================# Test Factories#====================================================================def init(testRun):    global laneWidth, egoStartX, egoStartY        tempList = testRun.getValues("Road.Link.0.LaneSection.0.LaneR.0 = ")    laneWidth = float(tempList[1])    tempList = testRun.getValues("Road.VhclStartPos = ")    egoStartX = float(tempList[0])    egoStartY = float(tempList[1])        def FactoryStaticPole(testRun, sectorID, sliceID): # dictionary with # key is named tuple containing (sectorID, sliceID) # value is named tuple containing (trafficObjectName, longOffset, latOffset) # ensure trafficObjectName has the same number as sectorID for easier edit # Odo - traffic number 0 # T1 - static pole traffic number 1    dictDefType = namedtuple("dictDefType", "trafficNumber longOff latOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType( 1, 0, 0),        dictKeyType(2, 1)   :   dictDefType( 2, 0, 0),        dictKeyType(3, 1)   :   dictDefType( 3, 0, 0),        dictKeyType(4, 1)   :   dictDefType( 4, 0, 0),        dictKeyType(5, 1)   :   dictDefType( 5, 0, 0),        dictKeyType(6, 1)   :   dictDefType( 6, 0, 0),        dictKeyType(7, 1)   :   dictDefType( 7, 0, 0),        dictKeyType(8, 1)   :   dictDefType( 8, 0, 0),        dictKeyType(9, 1)   :   dictDefType( 9, 0, 0),        dictKeyType(10, 1)   :   dictDefType(10, 0, 0),        dictKeyType(11, 1)   :   dictDefType(11, 0, 0),        dictKeyType(12, 1)   :   dictDefType(12, 0, 0),        dictKeyType(13, 1)   :   dictDefType(13, 0, 0),        dictKeyType(14, 1)   :   dictDefType(14, 0, 0),        dictKeyType(15, 1)   :   dictDefType(15, 0, 0),        dictKeyType(16, 1)   :   dictDefType(16, 0, 0),               	dictKeyType( 1, 2)   :   dictDefType( 1, 0.22, 0.16),        dictKeyType( 2, 2)   :   dictDefType( 2, 0.283, 0),        dictKeyType( 3, 2)   :   dictDefType( 3, 0.283, 0),        dictKeyType( 4, 2)   :   dictDefType( 4, 0.23, -0.15),        dictKeyType( 5, 2)   :   dictDefType( 5, 0, -0.283),        dictKeyType( 6, 2)   :   dictDefType( 6, 0, -0.283),        dictKeyType( 7, 2)   :   dictDefType( 7, 0, -0.283),        dictKeyType( 8, 2)   :   dictDefType( 8, 0, -0.283),        dictKeyType( 9, 2)   :   dictDefType( 9, -0.19, -0.2),        dictKeyType(10, 2)   :   dictDefType(10, -0.283, 0),        dictKeyType(11, 2)   :   dictDefType(11, -0.283, 0),        dictKeyType(12, 2)   :   dictDefType(12, -0.14, 0.24),        dictKeyType(13, 2)   :   dictDefType(13, 0, 0.283),        dictKeyType(14, 2)   :   dictDefType(14, 0, 0.283),        dictKeyType(15, 2)   :   dictDefType(15, 0, 0.283),        dictKeyType(16, 2)   :   dictDefType(16, 0, 0.283),                dictKeyType( 1, 3)   :   dictDefType( 1, 0.44, 0.32),        dictKeyType( 2, 3)   :   dictDefType( 2, 0.566, 0),        dictKeyType( 3, 3)   :   dictDefType( 3, 0.566, 0),        dictKeyType( 4, 3)   :   dictDefType( 4, 0.46, -0.3),        dictKeyType( 5, 3)   :   dictDefType( 5, 0, -0.566),        dictKeyType( 6, 3)   :   dictDefType( 6, 0, -0.566),        dictKeyType( 7, 3)   :   dictDefType( 7, 0, -0.566),        dictKeyType( 8, 3)   :   dictDefType( 8, 0, -0.566),        dictKeyType( 9, 3)   :   dictDefType( 9, -0.38, -0.4),        dictKeyType(10, 3)   :   dictDefType(10, -0.52, -0.2),        dictKeyType(11, 3)   :   dictDefType(11, -0.54, 0.1),        dictKeyType(12, 3)   :   dictDefType(12, -0.28, 0.48),        dictKeyType(13, 3)   :   dictDefType(13, 0, 0.566),        dictKeyType(14, 3)   :   dictDefType(14, 0, 0.566),        dictKeyType(15, 3)   :   dictDefType(15, 0, 0.566),        dictKeyType(16, 3)   :   dictDefType(16, 0, 0.566),                dictKeyType( 1, 4)   :   dictDefType( 1, 0.66, 0.48),        dictKeyType( 2, 4)   :   dictDefType( 2, 0.849, 0),        dictKeyType( 3, 4)   :   dictDefType( 3, 0.849, 0),        dictKeyType( 4, 4)   :   dictDefType( 4, 0.69, -0.45),        dictKeyType( 5, 4)   :   dictDefType( 5, 0, -0.849),        dictKeyType( 6, 4)   :   dictDefType( 6, 0, -0.849),        dictKeyType( 7, 4)   :   dictDefType( 7, 0, -0.849),        dictKeyType( 8, 4)   :   dictDefType( 8, 0, -0.849),        dictKeyType( 9, 4)   :   dictDefType( 9, -0.57, -0.6),        dictKeyType(10, 4)   :   dictDefType(10, -0.78, -0.3),        dictKeyType(11, 4)   :   dictDefType(11, -0.81, 0.15),        dictKeyType(12, 4)   :   dictDefType(12, -0.42, 0.72),        dictKeyType(13, 4)   :   dictDefType(13, 0, 0.849),        dictKeyType(14, 4)   :   dictDefType(14, 0, 0.849),        dictKeyType(15, 4)   :   dictDefType(15, 0, 0.849),        dictKeyType(16, 4)   :   dictDefType(16, 0, 0.849),                dictKeyType( 1, 5)   :   dictDefType( 1, 0.88, 0.64),        dictKeyType( 2, 5)   :   dictDefType( 2, 1.132, 0),        dictKeyType( 3, 5)   :   dictDefType( 3, 1.132, 0),        dictKeyType( 4, 5)   :   dictDefType( 4, 0.92, -0.6),        dictKeyType( 5, 5)   :   dictDefType( 5, 0, -1.132),        dictKeyType( 6, 5)   :   dictDefType( 6, 0, -1.132),        dictKeyType( 7, 5)   :   dictDefType( 7, 0, -1.132),        dictKeyType( 8, 5)   :   dictDefType( 8, 0, -1.132),        dictKeyType( 9, 5)   :   dictDefType( 9, -0.76, -0.8),        dictKeyType(10, 5)   :   dictDefType(10, -1.132, 0),        dictKeyType(11, 5)   :   dictDefType(11, -1.132, 0),        dictKeyType(12, 5)   :   dictDefType(12, -0.56, 0.96),        dictKeyType(13, 5)   :   dictDefType(13, 0, 1.132),        dictKeyType(14, 5)   :   dictDefType(14, 0, 1.132),        dictKeyType(15, 5)   :   dictDefType(15, 0, 1.132),        dictKeyType(16, 5)   :   dictDefType(16, 0, 1.132),                dictKeyType( 1, 6)   :   dictDefType( 1, 1.1, 0.8),        dictKeyType( 2, 6)   :   dictDefType( 2, 1.415, 0),        dictKeyType( 3, 6)   :   dictDefType( 3, 1.415, 0),        dictKeyType( 4, 6)   :   dictDefType( 4,  1.15, -0.75),        dictKeyType( 5, 6)   :   dictDefType( 5, 0, -1.415),        dictKeyType( 6, 6)   :   dictDefType( 6, 0, -1.415),        dictKeyType( 7, 6)   :   dictDefType( 7, 0, -1.415),        dictKeyType( 8, 6)   :   dictDefType( 8, 0, -1.415),        dictKeyType( 9, 6)   :   dictDefType( 9, -0.95, -1),        dictKeyType(10, 6)   :   dictDefType(10, -1.415, 0),        dictKeyType(11, 6)   :   dictDefType(11, -1.415, 0),        dictKeyType(12, 6)   :   dictDefType(12, -0.7, 1.2),        dictKeyType(13, 6)   :   dictDefType(13, 0, 1.415),        dictKeyType(14, 6)   :   dictDefType(14, 0, 1.415),        dictKeyType(15, 6)   :   dictDefType(15, 0, 1.415),        dictKeyType(16, 6)   :   dictDefType(16, 0, 1.415),                dictKeyType( 1, 7)   :   dictDefType( 1, 1.32, 0.96),        dictKeyType( 2, 7)   :   dictDefType( 2, 1.698, 0),        dictKeyType( 3, 7)   :   dictDefType( 3, 1.698, 0),        dictKeyType( 4, 7)   :   dictDefType( 4, 1.38, -0.9),        dictKeyType( 5, 7)   :   dictDefType( 5, 0, -1.698),        dictKeyType( 6, 7)   :   dictDefType( 6, 0, -1.698),        dictKeyType( 7, 7)   :   dictDefType( 7, 0, -1.698),        dictKeyType( 8, 7)   :   dictDefType( 8, 0, -1.698),        dictKeyType( 9, 7)   :   dictDefType( 9, -1.14, -1.2),        dictKeyType(10, 7)   :   dictDefType(10, -1.698, 0),        dictKeyType(11, 7)   :   dictDefType(11, -1.698, 0),        dictKeyType(12, 7)   :   dictDefType(12, -0.84, 1.44),        dictKeyType(13, 7)   :   dictDefType(13, 0, 1.698),        dictKeyType(14, 7)   :   dictDefType(14, 0, 1.698),        dictKeyType(15, 7)   :   dictDefType(15, 0, 1.698),        dictKeyType(16, 7)   :   dictDefType(16, 0, 1.698),                dictKeyType( 1, 8)   :   dictDefType( 1, 1.54, 1.12),        dictKeyType( 2, 8)   :   dictDefType( 2, 1.981, 0),        dictKeyType( 3, 8)   :   dictDefType( 3, 1.981, 0),        dictKeyType( 4, 8)   :   dictDefType( 4, 1.61, -1.05),        dictKeyType( 5, 8)   :   dictDefType( 5, 0, -1.981),        dictKeyType( 6, 8)   :   dictDefType( 6, 0, -1.981),        dictKeyType( 7, 8)   :   dictDefType( 7, 0, -1.981),        dictKeyType( 8, 8)   :   dictDefType( 8, 0, -1.981),        dictKeyType( 9, 8)   :   dictDefType( 9, -1.33, -1.4),        dictKeyType(10, 8)   :   dictDefType(10, -1.981, 0),        dictKeyType(11, 8)   :   dictDefType(11, -1.981, 0),        dictKeyType(12, 8)   :   dictDefType(12, -0.98, 1.68),        dictKeyType(13, 8)   :   dictDefType(13, 0, 1.981),        dictKeyType(14, 8)   :   dictDefType(14, 0, 1.981),        dictKeyType(15, 8)   :   dictDefType(15, 0, 1.981),        dictKeyType(16, 8)   :   dictDefType(16, 0, 1.981),                dictKeyType( 1, 9)   :   dictDefType( 1, 1.76, 1.28),        dictKeyType( 2, 9)   :   dictDefType( 2, 2.264, 0),        dictKeyType( 3, 9)   :   dictDefType( 3, 2.264, 0),        dictKeyType( 4, 9)   :   dictDefType( 4, 1.84, -1.2),        dictKeyType( 5, 9)   :   dictDefType( 5, 0, -2.264),        dictKeyType( 6, 9)   :   dictDefType( 6, 0, -2.264),        dictKeyType( 7, 9)   :   dictDefType( 7, 0, -2.264),        dictKeyType( 8, 9)   :   dictDefType( 8, 0, -2.264),        dictKeyType( 9, 9)   :   dictDefType( 9, -1.52, -1.6),        dictKeyType(10, 9)   :   dictDefType(10, -2.264, 0),        dictKeyType(11, 9)   :   dictDefType(11, -2.264, 0),        dictKeyType(12, 9)   :   dictDefType(12, -1.12, 1.92),        dictKeyType(13, 9)   :   dictDefType(13, 0, 2.264),        dictKeyType(14, 9)   :   dictDefType(14, 0, 2.264),        dictKeyType(15, 9)   :   dictDefType(15, 0, 2.264),        dictKeyType(16, 9)   :   dictDefType(16, 0, 2.264)         }     trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryDynamicRPedestrian(testRun, vSpeed, sectorID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "vSpeed sectorID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.5, 0),        dictKeyType(3, 3)   :   dictDefType(1, -1.5,  0)    }        trafficNo = sectorPositionDict[(vSpeed, sectorID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartY += sectorPositionDict[(vSpeed, sectorID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))    def FactoryDynamicLPedestrian(testRun, vSpeed, sectorID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "vSpeed sectorID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.5, 0),        dictKeyType(3, 3)   :   dictDefType(1, 1.5,  0)    }        trafficNo = sectorPositionDict[(vSpeed, sectorID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartY += sectorPositionDict[(vSpeed, sectorID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticFront(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.47, 0.2),        dictKeyType(3, 3)   :   dictDefType(1, -1.07, 0.2),        dictKeyType(4, 4)   :   dictDefType(1, -1.54, 0)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticRearTwo(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.6, 0.3),        dictKeyType(3, 3)   :   dictDefType(1, 1.2, 0.3),        dictKeyType(4, 4)   :   dictDefType(1, 1.8, 0)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))    def FactoryStaticRearFive(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.6, 0.15),        dictKeyType(3, 3)   :   dictDefType(1, 1.2, 0.15),        dictKeyType(4, 4)   :   dictDefType(1, 1.8, 0)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticRearTen(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.7, 0.35),        dictKeyType(3, 3)   :   dictDefType(1, 1.3, 0.35),        dictKeyType(4, 4)   :   dictDefType(1, 2, 0)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))        def FactoryStaticRight(testRun, vSpeed, sectorID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "vSpeed sectorID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.5, 0),        dictKeyType(3, 3)   :   dictDefType(1, -1.5,  0)    }        trafficNo = sectorPositionDict[(vSpeed, sectorID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartY += sectorPositionDict[(vSpeed, sectorID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticLeft(testRun, vSpeed, sectorID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "vSpeed sectorID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.5, 0),        dictKeyType(3, 3)   :   dictDefType(1, 1.5, 0)    }        trafficNo = sectorPositionDict[(vSpeed, sectorID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartY += sectorPositionDict[(vSpeed, sectorID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryDynamicObstacleEgoStatic(testRun, vSpeed, sectorID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "vSpeed sectorID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.5, 0),        dictKeyType(3, 3)   :   dictDefType(1, -1.5,  0)    }        trafficNo = sectorPositionDict[(vSpeed, sectorID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartY += sectorPositionDict[(vSpeed, sectorID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryDynamicStraightInsideDrvTubeFront(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -1.07, 0),        dictKeyType(3, 3)   :   dictDefType(1, -2.14, 0)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryDynamicStraightInsideDrvTubeRear(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 1.07, 0),        dictKeyType(3, 3)   :   dictDefType(1, 2.14, 0)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))#Static Curved path ##Frontdef FactoryStaticCurvedLeftFrontTwo(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.5, 0),        dictKeyType(3, 3)   :   dictDefType(1, -0.9, -0.15),        dictKeyType(4, 4)   :   dictDefType(1, -1.5, -0.6)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))       def FactoryStaticCurvedLeftFrontFive(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.6, 0),        dictKeyType(3, 3)   :   dictDefType(1, -1, -0.15),        dictKeyType(4, 4)   :   dictDefType(1, -1.5, -0.6)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticCurvedLeftFrontTen(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.6, 0),        dictKeyType(3, 3)   :   dictDefType(1, -1.1, -0.15),        dictKeyType(4, 4)   :   dictDefType(1, -1.5, -0.5)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))    def FactoryStaticCurvedRightFrontTwo(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.53, -0.45),        dictKeyType(3, 3)   :   dictDefType(1, 1.03, -0.55),        dictKeyType(4, 4)   :   dictDefType(1, 1.7, -0.65)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))       def FactoryStaticCurvedRightFrontFive(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.53, -0.45),        dictKeyType(3, 3)   :   dictDefType(1, 1.03, -0.55),        dictKeyType(4, 4)   :   dictDefType(1, 1.7, -0.65)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticCurvedRightFrontTen(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.43, -0.35),        dictKeyType(3, 3)   :   dictDefType(1, 0.83, -0.55),        dictKeyType(4, 4)   :   dictDefType(1, 1.6, -0.35)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))##Reardef FactoryStaticCurvedRightRearTwo(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.5, 0.25),        dictKeyType(3, 3)   :   dictDefType(1, 1.1, 0.25),        dictKeyType(4, 4)   :   dictDefType(1, 1.7, 0)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticCurvedRightRearFive(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.5, 0.25),        dictKeyType(3, 3)   :   dictDefType(1, 1.1, 0.35),        dictKeyType(4, 4)   :   dictDefType(1, 1.7, 0.15)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticCurvedRightRearTen(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, 0.5, 0.4),        dictKeyType(3, 3)   :   dictDefType(1, 1.1, 0.45),        dictKeyType(4, 4)   :   dictDefType(1, 1.7, 0.15)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))    def FactoryStaticCurvedLeftRearTwo(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.6, -0.2),        dictKeyType(3, 3)   :   dictDefType(1, -1.2, -0.1),        dictKeyType(4, 4)   :   dictDefType(1, -1.65, 0.2)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticCurvedLeftRearFive(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.7, -0.2),        dictKeyType(3, 3)   :   dictDefType(1, -1.2, -0.15),        dictKeyType(4, 4)   :   dictDefType(1, -1.65, 0.15)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))def FactoryStaticCurvedLeftRearTen(testRun, sectorID, sliceID):    dictDefType = namedtuple("dictDefType", "trafficNumber latOff longOff")    dictKeyType = namedtuple("dictKeyType", "sectorID sliceID")        sectorPositionDict = {        dictKeyType(1, 1)   :   dictDefType(1, 0, 0),        dictKeyType(2, 2)   :   dictDefType(1, -0.7, -0.35),        dictKeyType(3, 3)   :   dictDefType(1, -1.2, -0.3),        dictKeyType(4, 4)   :   dictDefType(1, -1.65, 0.1)    }        trafficNo = sectorPositionDict[(sectorID, sliceID)].trafficNumber    tempList = testRun.getValues("Traffic." + str(trafficNo) + ".Init.Road = ")    trafStartX = float(tempList[0])    trafStartY = float(tempList[1])    trafStartX += sectorPositionDict[(sectorID, sliceID)].longOff    trafStartY += sectorPositionDict[(sectorID, sliceID)].latOff    trafStartX = round(trafStartX, 3)    trafStartY = round(trafStartY, 3)    testRun.addReplacement("Traffic." + str(trafficNo) + ".Init.Road = ", str(trafStartX) + " " + str(trafStartY))    #######    def FactoryDescription(testRun, useCase=1):    UCString = ""    if useCase == 1: # Activation Use Case        UCString = "1 (Use Case)"    else: # Non-Activation Use Case        UCString = "0 (Non-Use Case)"    testRun.addReplacement("	Non-/Use Case = ", UCString)    