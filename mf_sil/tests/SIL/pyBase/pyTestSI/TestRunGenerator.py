#********************************************************************# System Imports#*******************************************************************import sysimport osimport warningsfrom collections import namedtuplefrom itertools import productimport copy#********************************************************************# Own Imports#*******************************************************************from pyBase_path_cfg import *import openpyxl, jdcalfrom cmTestRunSimple import cmTestRunSimpleimport Factoriesfrom Constants import *# cmTestRunConfigType is named tuple containing for each testrun category:# testRunPrefix = prefix for name of the CarMaker scenario# testRunFolder = name for CarMaker scenario output folder# CMSign = the corresponding CMSigncmTestRunConfigType = namedtuple("cmTestRunConfigType", "testRunPrefix testRunFolder CMSign")cmTestRunConfig = {                       #        testRunPrefix          testRunFolder           CMSign    "Perpendicular-Right"   : cmTestRunConfigType("SISim_PerpRight_",   "02_Perpendicular_Right",   -1),    "Perpendicular-Left"    : cmTestRunConfigType("SISim_PerpLeft_",    "01_Perpendicular_Left" ,    1),    "Parallel-Right"        : cmTestRunConfigType("SISim_ParRight_",    "04_Parallel_Right"     ,   -1),    "Parallel-Left"         : cmTestRunConfigType("SISim_ParLeft_",     "03_Parallel_Left"      ,    1)    }baseTestRuns = ["Base1", "Base2"]limConfigInit = {                             #exists    limType    "lim_Rd_P"      : Factories.limConfigType( False,    "line"),     "lim_P1_P"      : Factories.limConfigType( False,    "line"),    "lim_P2_P"      : Factories.limConfigType( False,    "line"),    "lim_P_End"     : Factories.limConfigType( False,    "line")    }limConfig = copy.deepcopy(limConfigInit)#********************************************************************# Main Program#********************************************************************def GenerateCMTestRun():    print("Generating CM testRuns...")        if not os.path.exists(SIGENERATED_PATH):        os.makedirs(SIGENERATED_PATH)        for cat in cmTestRunConfig.keys():        outputFolder = os.path.join(SIGENERATED_TEMP_PATH, cmTestRunConfig[cat].testRunFolder)        if not os.path.exists(outputFolder):            os.makedirs(outputFolder)        #---------------------------------------------------------------------------    # Base1: two parked vehicles, standard parking slot size    #---------------------------------------------------------------------------        ## Ego velocity / lateral offset test    egoVelocityList     = [10, 20, 38] # km/h        for idxVel in range(len(egoVelocityList)):        currEgoVelocity     = egoVelocityList[idxVel]                ## No limiters, no obstacles, different scanning approach        egoLatOffList       = [0.5, 1.2, 3.0, 0.5, 0.9, 1.2] # m        egoScanAngList      = [  0,   0,   0,  -2,   2,   5] # °        sit = 1        for idxScanDir in range(len(egoLatOffList)):            currLatOff          = egoLatOffList[idxScanDir]            currScanAng         = egoScanAngList[idxScanDir]                        for cat in cmTestRunConfig.keys():                currName = cmTestRunConfig[cat].testRunPrefix + "_sit{}_vEgo{}_off{}_ang{}".format(sit, currEgoVelocity, currLatOff, currScanAng) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, cmTestRunConfig[cat].testRunPrefix + baseTestRuns[0] + ".testrun")                outputFolder = os.path.join(SIGENERATED_TEMP_PATH, cmTestRunConfig[cat].testRunFolder)                testRun = cmTestRunSimple(currName, basePath)                Factories.init(testRun, cmTestRunConfig[cat].CMSign)                Factories.FactoryEgoVehicle(testRun, currEgoVelocity, currLatOff, currScanAng)                testRun.save(outputFolder)                        ## Limiters, different scanning approach        egoLatOffList       = [0.5, 0.5, 0.9] # m        egoScanAngList      = [  0,  -2,   2] # °        limConfigList = [            #     lim_P1_P                    lim_P2_P                lim_Rd_P                   lim_P_End            [("lim_P1_P", "line"),     ("lim_P2_P", "line")],             [("lim_P1_P", "line"),     ("lim_P2_P", "line"),                               ("lim_P_End", "curb_t")],             [("lim_P1_P", "line"),     ("lim_P2_P", "line"),     ("lim_Rd_P", "line"),     ("lim_P_End", "line")],            [                                                    ("lim_Rd_P", "curb_t")]            ]        sit += 1        for idxScanDir in range(len(egoLatOffList)):            currLatOff          = egoLatOffList[idxScanDir]            currScanAng         = egoScanAngList[idxScanDir]            cnt = 0            for limCfg in limConfigList:                cnt += 1                limConfig = copy.deepcopy(limConfigInit)                for lim in limCfg:                    limConfig[lim[0]] = Factories.limConfigType(True, lim[1])                            for cat in cmTestRunConfig.keys():                    currName = cmTestRunConfig[cat].testRunPrefix + "_sit{}_vEgo{}_off{}_ang{}_lim{}".format(sit, currEgoVelocity, currLatOff, currScanAng, cnt) + ".testrun"                    basePath = os.path.join(src_pyCMBaseScenarios_PATH, cmTestRunConfig[cat].testRunPrefix + baseTestRuns[0] + ".testrun")                    outputFolder = os.path.join(SIGENERATED_TEMP_PATH, cmTestRunConfig[cat].testRunFolder)                    testRun = cmTestRunSimple(currName, basePath)                    Factories.init(testRun, cmTestRunConfig[cat].CMSign)                    Factories.FactoryEgoVehicle(testRun, currEgoVelocity, currLatOff, currScanAng)                    Factories.FactoryTrafficObjects(testRun, limConfig, [])                    testRun.save(outputFolder)                            ## Shifted / rotated parked vehicles        parkedVehiclesList = [        # xOffP1  yOffP1  psiOffP1  xOffP2  yOffP2  psiOffP2            [0,    -0.5,      0,      0,      0,       0],            [0,       0,      0,      0,      0,       5],            [0,       0,     -5,      0,     -0.5,     0]        ]        sit += 1        cnt = 0        for cfg in parkedVehiclesList:            cnt += 1            (xOffP1, yOffP1, psiOffP1, xOffP2, yOffP2, psiOffP2) = (param for param in cfg)                        for cat in cmTestRunConfig.keys():                currName = cmTestRunConfig[cat].testRunPrefix + "_sit{}_vEgo{}_park{}".format(sit, currEgoVelocity, cnt) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, cmTestRunConfig[cat].testRunPrefix + baseTestRuns[0] + ".testrun")                outputFolder = os.path.join(SIGENERATED_TEMP_PATH, cmTestRunConfig[cat].testRunFolder)                testRun = cmTestRunSimple(currName, basePath)                Factories.init(testRun, cmTestRunConfig[cat].CMSign)                Factories.FactoryEgoVehicle(testRun, currEgoVelocity)                Factories.FactoryParkedVehicles(testRun, xOffP1, yOffP1, psiOffP1, xOffP2, yOffP2, psiOffP2)                testRun.save(outputFolder)                        ## Obstacles inside parking area        # Obstacle - shape, xOff, yOff, psi, sizeX, sizeY, radius, height, hGround        obsConfigList = [            [["rect", 1, -0.3, 5, 0.5, 1, 0, 1, 0]],            [["cylinder", -0.3, 0, 0, 0, 0, 0.3, 1.5, 0]]        ]        sit += 1        cnt = 0        for cfg in obsConfigList:            cnt += 1                        for cat in cmTestRunConfig.keys():            # for cat in ["Perpendicular-Right", "Perpendicular-Left"]:                currName = cmTestRunConfig[cat].testRunPrefix + "_sit{}_vEgo{}_obst{}".format(sit, currEgoVelocity, cnt) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, cmTestRunConfig[cat].testRunPrefix + baseTestRuns[0] + ".testrun")                outputFolder = os.path.join(SIGENERATED_TEMP_PATH, cmTestRunConfig[cat].testRunFolder)                testRun = cmTestRunSimple(currName, basePath)                Factories.init(testRun, cmTestRunConfig[cat].CMSign)                Factories.FactoryEgoVehicle(testRun, currEgoVelocity)                Factories.FactoryTrafficObjects(testRun, limConfigInit, cfg)                testRun.save(outputFolder)if __name__ == "__main__":    try:        args = sys.argv        if len(args) == 1:            print("Starting TestRunGenerator.py")            GenerateCMTestRun()            print("Finished TestRunGenerator.py")        else:            print("Unknown argument for TestRunGenerator.py")            except Exception as e:        print (e)        input("Exception in executing TestRunGenerator.py.\nHit enter To Close...")