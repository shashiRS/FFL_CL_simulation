#********************************************************************# System Imports#********************************************************************import sysimport osimport warningsfrom collections import namedtuplefrom itertools import productimport copy#********************************************************************# Own Imports#********************************************************************from pyBase_path_cfg import *import openpyxl, jdcalfrom cmTestRunSimple import cmTestRunSimpleimport Factoriesfrom Constants import *TESTRUN_PREFIX = "AUPSim_"baseTestRuns = ["MemPark_SaveRedetect", "MemPark_RefineRedetectRefine", "MemPark_3_Static_SaveRedetect_CEM_Reset", "MemPark_2_Static_1_Dynamic_SaveRedetect_CEM_Reset"]#********************************************************************# Main Program#********************************************************************def GenerateCMTestRun():    print("Generating CM testRuns...")        if not os.path.exists(MPGENERATED_PATH):        os.makedirs(MPGENERATED_PATH)        #-------------------------------------------------------------------------------------------------    # Save -> Redetect, alter second scan end position    #-------------------------------------------------------------------------------------------------    ## Longitudinal offset    offXList    = [-2.0, 0.0, 2.0] # m        for currSetup in offXList:        currOffX = currSetup                currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__offX{}".format(currOffX) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactorySecondScan(testRun, offX=currOffX)        testRun.save(MPGENERATED_TEMP_PATH)                    ## Lateral offset    offYList    = [-0.5, 0.0, 0.5] # m        for currSetup in offYList:        currOffY = currSetup                currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__offY{}".format(currOffY) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactorySecondScan(testRun, offY=currOffY)        testRun.save(MPGENERATED_TEMP_PATH)                    ## Yaw angle    psiList     = [-10, -5, 5, 10] # deg        for currSetup in psiList:        currPsi = currSetup                currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__psi{}".format(currPsi) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactorySecondScan(testRun, psi=currPsi)        testRun.save(MPGENERATED_TEMP_PATH)                    #-------------------------------------------------------------------------------------------------    # Save -> Redetect, parking category    #-------------------------------------------------------------------------------------------------    parkCategoryList = ["Left_Par", "Left_Perp_Bwd", "Left_Perp_Fwd", "Right_Par", "Right_Perp_Bwd", "Right_Perp_Fwd"]        for currSetup in parkCategoryList:        currParkCategory = currSetup                categoryName = currParkCategory.replace("_", "")        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__{}".format(categoryName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryParkingCategory(testRun, parkCategory=currParkCategory)        testRun.save(MPGENERATED_TEMP_PATH)                    #-------------------------------------------------------------------------------------------------    # Refine -> Save -> Redetect -> Refine, alter second scan end position    #-------------------------------------------------------------------------------------------------    ## Longitudinal offset    offXList    = [-2.0, 0.0, 2.0] # m        for currSetup in offXList:        currOffX = currSetup                currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[1] + "__offX{}".format(currOffX) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactorySecondScan(testRun, offX=currOffX)        testRun.save(MPGENERATED_TEMP_PATH)                    ## Lateral offset    offYList    = [-0.5, 0.0, 0.5] # m        for currSetup in offYList:        currOffY = currSetup                currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[1] + "__offY{}".format(currOffY) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactorySecondScan(testRun, offY=currOffY)        testRun.save(MPGENERATED_TEMP_PATH)                    ## Yaw angle    psiList     = [-10, -5, 5, 10] # deg        for currSetup in psiList:        currPsi = currSetup                currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[1] + "__psi{}".format(currPsi) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactorySecondScan(testRun, psi=currPsi)        testRun.save(MPGENERATED_TEMP_PATH)                    #-------------------------------------------------------------------------------------------------    # Save -> Redetect, 3 static objects, reconfigure CEM surrogate, alter second scan end position    #-------------------------------------------------------------------------------------------------    ## Longitudinal offset    offXList    = [-2.0, 2.0] # m    ## Lateral offset    offYList    = [-0.5, 0.5] # m    ## Yaw angle    psiList     = [-7, 7] # deg    ## CEM Surrogate configuration parameters    fragmentObjectLengthList    = [[0.3, 0.5], [0.2, 0.4], [0.1, 0.5], [0.3, 0.6], [0.5, 0.2], [0.4, 0.3], [0.6, 0.1], [0.2, 0.3], [0.4, 0.6], [0.3, 0.1], [0.4, 0.3], [0.1, 0.2]] # [0.1 .. 0.6], 0.1 step    fragmentGapLengthList       = [[0.3, 0.4], [0.4, 0.3], [0.1, 0.5], [0.5, 1.0], [1.0, 0.8], [0.7, 0.4], [0.2, 0.3], [0.2, 0.1], [0.9, 0.6], [0.7, 1.0], [0.5, 0.3], [0.2, 0.4]] # [0.1 .. 1.0], 0.1 step    numVarEndPos = 2 # number of variations (of CEM surrogate params) per end position        variationSuffix = 0        for currSetup in offXList:        currOffX = currSetup                for i in range(numVarEndPos):            currfragmentObjectLengthList = fragmentObjectLengthList[variationSuffix]            currfragmentGapLengthList = fragmentGapLengthList[variationSuffix]            variationSuffix += 1            scenarioSuffix = "_" + str(variationSuffix).rjust(2, '0') # rjust(2, '0') forces the index to be a 2 digit number <=> '{:0>2}'.format(str(variationSuffix))                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[2] + "__offX{}".format(currOffX) + scenarioSuffix + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactorySecondScan(testRun, offX=currOffX)            Factories.FactoryCEMSurrogateReconfiguration(testRun, fragmentObjectLengthList=currfragmentObjectLengthList, fragmentGapLengthList=currfragmentGapLengthList)            testRun.save(MPGENERATED_TEMP_PATH)                for currSetup in offYList:        currOffY = currSetup                for i in range(numVarEndPos):            currfragmentObjectLengthList = fragmentObjectLengthList[variationSuffix]            currfragmentGapLengthList = fragmentGapLengthList[variationSuffix]            variationSuffix += 1            scenarioSuffix = "_" + str(variationSuffix).rjust(2, '0') # rjust(2, '0') forces the index to be a 2 digit number <=> '{:0>2}'.format(str(variationSuffix))                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[2] + "__offY{}".format(currOffY) + scenarioSuffix + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactorySecondScan(testRun, offY=currOffY)            Factories.FactoryCEMSurrogateReconfiguration(testRun, fragmentObjectLengthList=currfragmentObjectLengthList, fragmentGapLengthList=currfragmentGapLengthList)            testRun.save(MPGENERATED_TEMP_PATH)                for currSetup in psiList:        currPsi = currSetup                for i in range(numVarEndPos):            currfragmentObjectLengthList = fragmentObjectLengthList[variationSuffix]            currfragmentGapLengthList = fragmentGapLengthList[variationSuffix]            variationSuffix += 1            scenarioSuffix = "_" + str(variationSuffix).rjust(2, '0') # rjust(2, '0') forces the index to be a 2 digit number <=> '{:0>2}'.format(str(variationSuffix))                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[2] + "__psi{}".format(currPsi) + scenarioSuffix + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactorySecondScan(testRun, psi=currPsi)            Factories.FactoryCEMSurrogateReconfiguration(testRun, fragmentObjectLengthList=currfragmentObjectLengthList, fragmentGapLengthList=currfragmentGapLengthList)            testRun.save(MPGENERATED_TEMP_PATH)                            #-------------------------------------------------------------------------------------------------    # Save -> Redetect, 2 static objects and 1 dynamic object, reconfigure CEM surrogate, alter second scan end position    #-------------------------------------------------------------------------------------------------    ## Longitudinal offset    offXList    = [-2.0, 2.0] # m    ## Lateral offset    offYList    = [-0.5, 0.5] # m    ## Yaw angle    psiList     = [-7, 7] # deg    ## CEM Surrogate configuration parameters    fragmentObjectLengthList    = [[0.3, 0.5], [0.2, 0.4], [0.1, 0.5], [0.3, 0.6], [0.5, 0.2], [0.4, 0.3]] # [0.1 .. 0.6], 0.1 step    fragmentGapLengthList       = [[0.3, 0.4], [0.4, 0.3], [0.1, 0.5], [0.5, 1.0], [1.0, 0.8], [0.7, 0.4]] # [0.1 .. 1.0], 0.1 step    numVarEndPos = 1 # number of variations (of CEM surrogate params) per end position        variationSuffix = 0        for currSetup in offXList:        currOffX = currSetup                for i in range(numVarEndPos):            currfragmentObjectLengthList = fragmentObjectLengthList[variationSuffix]            currfragmentGapLengthList = fragmentGapLengthList[variationSuffix]            variationSuffix += 1            scenarioSuffix = "_" + str(variationSuffix).rjust(2, '0') # rjust(2, '0') forces the index to be a 2 digit number <=> '{:0>2}'.format(str(variationSuffix))                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[3] + "__offX{}".format(currOffX) + scenarioSuffix + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[3] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactorySecondScan(testRun, offX=currOffX)            Factories.FactoryCEMSurrogateReconfiguration(testRun, fragmentObjectLengthList=currfragmentObjectLengthList, fragmentGapLengthList=currfragmentGapLengthList)            testRun.save(MPGENERATED_TEMP_PATH)                for currSetup in offYList:        currOffY = currSetup                for i in range(numVarEndPos):            currfragmentObjectLengthList = fragmentObjectLengthList[variationSuffix]            currfragmentGapLengthList = fragmentGapLengthList[variationSuffix]            variationSuffix += 1            scenarioSuffix = "_" + str(variationSuffix).rjust(2, '0') # rjust(2, '0') forces the index to be a 2 digit number <=> '{:0>2}'.format(str(variationSuffix))                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[3] + "__offY{}".format(currOffY) + scenarioSuffix + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[3] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactorySecondScan(testRun, offY=currOffY)            Factories.FactoryCEMSurrogateReconfiguration(testRun, fragmentObjectLengthList=currfragmentObjectLengthList, fragmentGapLengthList=currfragmentGapLengthList)            testRun.save(MPGENERATED_TEMP_PATH)                for currSetup in psiList:        currPsi = currSetup                for i in range(numVarEndPos):            currfragmentObjectLengthList = fragmentObjectLengthList[variationSuffix]            currfragmentGapLengthList = fragmentGapLengthList[variationSuffix]            variationSuffix += 1            scenarioSuffix = "_" + str(variationSuffix).rjust(2, '0') # rjust(2, '0') forces the index to be a 2 digit number <=> '{:0>2}'.format(str(variationSuffix))                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[3] + "__psi{}".format(currPsi) + scenarioSuffix + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[3] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactorySecondScan(testRun, psi=currPsi)            Factories.FactoryCEMSurrogateReconfiguration(testRun, fragmentObjectLengthList=currfragmentObjectLengthList, fragmentGapLengthList=currfragmentGapLengthList)            testRun.save(MPGENERATED_TEMP_PATH)    if __name__ == "__main__":    try:        args = sys.argv        if len(args) == 1:            print("Starting TestRunGenerator.py")            GenerateCMTestRun()            print("Finished TestRunGenerator.py")        else:            print("Unknown argument for TestRunGenerator.py")            except Exception as e:        print (e)        input("Exception in executing TestRunGenerator.py.\nHit enter To Close...")