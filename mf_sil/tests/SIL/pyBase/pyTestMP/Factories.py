#********************************************************************# System Imports#********************************************************************import sysimport impimp.reload(sys)# sys.setdefaultencoding('utf8')import cmTestRunSimpleimport mathimport numpy as npimport scipy.interpolatefrom collections import namedtuplefrom Constants import *# Interpolation tables for determining vehicle orientation based on steering wheel angle# Interpolation values are applicable for 1s "Steer Step", during a 3.4m "Stop vehicle" maneuver, starting from 10km/h# ego vehicle yaw angle in deg# steering wheel angle in deg# EGO_YAW_ANGLE   = [0.0, 1.12, 2.29, 3.51,  4.74,  5.96,  7.17,  8.37,  9.59, 10.83, 12.08, 13.35, 14.64, 15.96, 17.33]# AMPLITUDE       = [0.0, 25.0, 50.0, 75.0, 100.0, 125.0, 150.0, 175.0, 200.0, 225.0, 250.0, 275.0, 300.0, 325.0, 350.0]EGO_YAW_ANGLE   = [0.0, 1.35, 2.77, 4.25,  5.72,  7.17,  8.62, 10.08, 11.58, 13.09, 14.64, 16.23, 17.89]AMPLITUDE       = [0.0, 30.0, 60.0, 90.0, 120.0, 150.0, 180.0, 210.0, 240.0, 270.0, 300.0, 330.0, 360.0]yInterp_egoYawAngle = scipy.interpolate.interp1d(EGO_YAW_ANGLE, AMPLITUDE)laneWidth     = 0egoStartX     = 0egoStartY     = 0#====================================================================# Test Factories#====================================================================def init(testRun):    global laneWidth, egoStartX, egoStartY        tempList = testRun.getValues("Road.Link.0.LaneSection.0.LaneR.0 = ")    laneWidth = float(tempList[1])    tempList = testRun.getValues("Road.VhclStartPos = ")    egoStartX = float(tempList[0])    egoStartY = float(tempList[1])    # Factory alters the end position for the second scanning phase# offX - longitudinal offset# offY - lateral offset# psi - yaw angle (see definition of <interpolation_table>)def FactorySecondScan(testRun, offX=0, offY=0, psi=0):    # offX    testRun.addReplacement("	Eval first() ? Qu::offX = ", str(offX))        # determine maneuver number for lateral offset and yaw angle based on scenario characteristics    tempList = testRun.getValues("DrivMan.6.TimeLimit = ")    if tempList[0] == "1": # it is a simple memory parking scenario (duration corresponds to save maneuver) with the following command sequence: create slot, park in, save, drive away, come back, redetect, park in, done        maneuverNo = 9    else: # it is an advanced memory parking scenario #TODO: add additional logic for scenarios with different command sequence        maneuverNo = 11        # offY - assumption is that the default lateral offset is 0m    testRun.addReplacement("DrivMan." + str(maneuverNo) + ".LatDyn = Driver ", str(offY)) # Drive forward    testRun.addReplacement("DrivMan." + str(maneuverNo + 1) + ".LatDyn = Driver ", str(offY)) # Stop vehicle    testRun.addReplacement("DrivMan." + str(maneuverNo + 2) + ".LatDyn = Driver ", str(offY)) # Drive backwards (vEgo = 25km/h)    testRun.addReplacement("DrivMan." + str(maneuverNo + 3) + ".LatDyn = Driver ", str(offY)) # Drive backwards (vEgo = 10km/h)    testRun.addReplacement("DrivMan." + str(maneuverNo + 4) + ".LatDyn = Driver ", str(offY)) # Stop vehicle    testRun.addReplacement("DrivMan." + str(maneuverNo + 5) + ".LatDyn = Driver ", str(offY)) # Scanning phase        # psi    # yaw angle is altered by turning the steering wheel which will influence lateral offset     amplitude = np.sign(psi) * yInterp_egoYawAngle(abs(psi))    testRun.addReplacement("DrivMan." + str(maneuverNo + 6) + ".LatDyn = Step ", str(round(amplitude,3)) + " 0.0 1.0 abs 1")        def FactoryCEMSurrogateReconfiguration(testRun, fragmentObjectLengthList, fragmentGapLengthList):    testRun.addReplacement("	Eval first() ? Qu::fragmentObjectLength_1 = ", str(fragmentObjectLengthList[0]))    testRun.addReplacement("	Eval first() ? Qu::fragmentObjectLength_2 = ", str(fragmentObjectLengthList[1]))    testRun.addReplacement("	Eval first() ? Qu::fragmentGapLength_1 = ", str(fragmentGapLengthList[0]))    testRun.addReplacement("	Eval first() ? Qu::fragmentGapLength_2 = ", str(fragmentGapLengthList[1]))        def FactoryParkingCategory(testRun, parkCategory="RIGHT_PERP_BWD"):    if parkCategory.upper() == "LEFT_PAR":        testRun.addReplacement("	# HMI UserInput - Select User Defined Parking Style ", "<Parallel Left>")        testRun.addReplacement("	Eval DM.ManTime > 0.3 ? AP.hmiOutputPort.userActionHeadUnit_nu=", str(TAP_ON_USER_SLOT_LEFT_PAR))    elif parkCategory.upper() == "LEFT_PERP_BWD":        testRun.addReplacement("	# HMI UserInput - Select User Defined Parking Style ", "<Perpendicular Left Backwards>")        testRun.addReplacement("	Eval DM.ManTime > 0.3 ? AP.hmiOutputPort.userActionHeadUnit_nu=", str(TAP_ON_USER_SLOT_LEFT_PERP_BWD))    elif parkCategory.upper() == "LEFT_PERP_FWD":        testRun.addReplacement("	# HMI UserInput - Select User Defined Parking Style ", "<Perpendicular Left Forwards>")        testRun.addReplacement("	Eval DM.ManTime > 0.3 ? AP.hmiOutputPort.userActionHeadUnit_nu=", str(TAP_ON_USER_SLOT_LEFT_PERP_FWD))    elif parkCategory.upper() == "RIGHT_PAR":        testRun.addReplacement("	# HMI UserInput - Select User Defined Parking Style ", "<Parallel Right>")        testRun.addReplacement("	Eval DM.ManTime > 0.3 ? AP.hmiOutputPort.userActionHeadUnit_nu=", str(TAP_ON_USER_SLOT_RIGHT_PAR))    elif parkCategory.upper() == "RIGHT_PERP_BWD":        testRun.addReplacement("	# HMI UserInput - Select User Defined Parking Style ", "<Perpendicular Right Backwards>")        testRun.addReplacement("	Eval DM.ManTime > 0.3 ? AP.hmiOutputPort.userActionHeadUnit_nu=", str(TAP_ON_USER_SLOT_RIGHT_PERP_BWD))    elif parkCategory.upper() == "RIGHT_PERP_FWD":        testRun.addReplacement("	# HMI UserInput - Select User Defined Parking Style ", "<Perpendicular Right Forwards>")        testRun.addReplacement("	Eval DM.ManTime > 0.3 ? AP.hmiOutputPort.userActionHeadUnit_nu=", str(TAP_ON_USER_SLOT_RIGHT_PERP_FWD))    else: # if parkCategory.upper() not in ["LEFT_PAR", "LEFT_PERP_BWD", "LEFT_PERP_FWD", "RIGHT_PAR", "RIGHT_PERP_BWD", "RIGHT_PERP_FWD"]:        print(("Parking category {} in {} is not supported.".format(parkCategory, testRun)))        sys.exit(0)     