#********************************************************************# System Imports#*******************************************************************import sysimport osimport warningsfrom collections import namedtuplefrom itertools import productimport copy#********************************************************************# Own Imports#*******************************************************************from pyBase_path_cfg import *import openpyxl, jdcalfrom cmTestRunSimple import cmTestRunSimpleimport Factoriesfrom Constants import *TESTRUN_PREFIX = "LSCASim_"baseTestRuns = ["Static_Pole", "LongPed_Straight", "LongPed_Curved", "LatPed_Straight", "LatPed_Curved", "LatPedAndCar_Straight", "Static_Boxes_Straight", "Static_Boxes_Curved", "LatPedAndStop_Straight", "LatPedAndStop_Curved", "ParkOut_LongPed", "DriveAndStop", "MaxSpeedTH", "Static_Obstacle_Straight", "Static_Obstacle_Curved"]#                0              1                   2                 3                  4                5                        6                        7                      8                         9                       10                 11              12            13                          14#********************************************************************# Main Program#********************************************************************def GenerateCMTestRun():    print("Generating CM testRuns...")        if not os.path.exists(LSCAGENERATED_PATH):        os.makedirs(LSCAGENERATED_PATH)        #---------------------------------------------------------------------------    # Static_Pole    #---------------------------------------------------------------------------        ## Activation use cases    egoVelocityList     = [1.5, 3.0 ,17.8, -1.5, -7.0, -17.8] # km/h    egoSteerWhlAngList  = [0.0, 8.527, -8.527] # rad    collPointList       = [0.5] # %    switchLSCALList     = ["ON", "OFF"]        for currSetup in product(egoVelocityList, egoSteerWhlAngList, collPointList, switchLSCALList):        currEgoVelocity = currSetup[0]        currSteerWheelAngle = currSetup[1]        currCollisionPoint = currSetup[2]        currSwitchLSCA = currSetup[3]        # if the steering wheel is fully turned, the maximum ego velocity will be 3 km/h going forwards and 7 km/h going backwards        # if the steering wheel is not turned, the maximum allowed ego velocity can be used        if (abs(currSteerWheelAngle) == 8.527 and currEgoVelocity > 3.0) or \           (abs(currSteerWheelAngle) == 8.527 and currEgoVelocity < -7.0) or \           (currSteerWheelAngle == 0 and abs(currEgoVelocity) > 1.5 and abs(currEgoVelocity) < 17.8):            continue                           currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}_{}".format(currEgoVelocity, currSteerWheelAngle, currCollisionPoint, currSwitchLSCA) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint, P_drivingTime, currSwitchLSCA)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Non-Activation use cases    egoVelocityList     = [18.5, -18.5] # km/h    egoSteerWhlAngList  = [0.0] # rad    collPointList       = [0.5] # %    switchLSCALList     = ["ON", "OFF"]        for currSetup in product(egoVelocityList, egoSteerWhlAngList, collPointList, switchLSCALList):        currEgoVelocity = currSetup[0]        currSteerWheelAngle = currSetup[1]        currCollisionPoint = currSetup[2]        currSwitchLSCA = currSetup[3]                        currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}_{}".format(currEgoVelocity, currSteerWheelAngle, currCollisionPoint, currSwitchLSCA) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint, P_drivingTime, currSwitchLSCA)        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)                    #===========================================================================    # Activation Use Cases    #===========================================================================            #---------------------------------------------------------------------------    # Static Forward    #---------------------------------------------------------------------------        ## Straight path    ## Static pole    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    egoSteerWhlAngList  = [0] # rad    collPointList       = [0.1, 0.5, 0.9] # % # corresponding to FL, FC, FR    collPointNameList   = ["FL", "FC", "FR"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                for currSetup in product(egoVelocityList, egoSteerWhlAngList):            currEgoVelocity = currSetup[0]            currSteerWheelAngle = currSetup[1]                            currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, currSteerWheelAngle, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                ## Static obstacle    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    egoSteerWhlAngList  = [0] # rad    collPointNameList   = ["FL", "FC", "FR"]    obstacleList        = ["adult", "vehicle"]    currObstacleName = ""        for currSetup in product(egoVelocityList, egoSteerWhlAngList, collPointNameList, obstacleList):        currEgoVelocity     = currSetup[0]        currSteerWheelAngle = currSetup[1]        currCollPointName   = currSetup[2]          currObstacle        = currSetup[3]                      # currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[13] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        if currObstacle == "adult":            currObstacleName = "Pedestrian"        elif currObstacle == "vehicle":            currObstacleName = "Vehicle"                    currName = TESTRUN_PREFIX + "UC_" + "Static_" + currObstacleName + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, currSteerWheelAngle, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[13] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticObstacle(testRun, currEgoVelocity, currCollPointName, currSteerWheelAngle, currObstacle)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path    ## Static pole    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    egoSteerWhlAngList  = [3.821, 7.043] # rad # corresponding to 15° and 30° at the inner wheel    # use different lists for the collision point based on steering wheel angle to compensate error in python factory / CarMaker behavior (this happens with forwards movement)    collPointList15     = [0.3, 0.65, 0.9] # % # corresponding to FL, FC, FR    collPointList30     = [0.5, 0.78, 0.95] # % # corresponding to FL, FC, FR    collPointNameList   = ["FL", "FC", "FR"]        for currSteerWheelAngle in egoSteerWhlAngList:        innerWheelAng = 0        if currSteerWheelAngle == 3.821:            innerWheelAng = 15            collPointList = collPointList15        elif currSteerWheelAngle == 7.043:            innerWheelAng = 30            collPointList = collPointList30                    for i in range(len(collPointList)):            currCollisionPoint = collPointList[i]            collPointName = collPointNameList[i]                        for currEgoVelocity in egoVelocityList:                                # if the inner wheel is turned to 30°, the maximum ego velocity will be 5 km/h (due to CarMaker suspension model error when braking)                if (abs(currSteerWheelAngle) == 7.043 and currEgoVelocity > 5.0):                    continue                                    currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, innerWheelAng, collPointName) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")                testRun = cmTestRunSimple(currName, basePath)                Factories.init(testRun)                Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint)                Factories.FactoryDescription(testRun, useCase=1)                testRun.save(LSCAGENERATED_TEMP_PATH)                    ## Static obstacle    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    egoSteerWhlAngList  = [3.821] # rad    collPointNameList   = ["FL", "FC", "FR"]    obstacleList        = ["adult", "vehicle"]    currObstacleName = ""        for currSteerWheelAngle in egoSteerWhlAngList:        innerWheelAng = 0        if currSteerWheelAngle == 3.821:            innerWheelAng = 15            collPointList = collPointList15        elif currSteerWheelAngle == 7.043:            innerWheelAng = 30            for currSetup in product(egoVelocityList, collPointNameList, obstacleList):            currEgoVelocity     = currSetup[0]            currCollPointName   = currSetup[1]              currObstacle        = currSetup[2]                              if currObstacle == "adult":                currObstacleName = "Pedestrian"            elif currObstacle == "vehicle":                currObstacleName = "Vehicle"                            currName = TESTRUN_PREFIX + "UC_" + "Static_" + currObstacleName + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, innerWheelAng, currCollPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[14] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryStaticObstacle(testRun, currEgoVelocity, currCollPointName, currSteerWheelAngle, currObstacle)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                #---------------------------------------------------------------------------    # Static Forward - Side    #---------------------------------------------------------------------------        ## Curved path    egoVelocityList     = [2.0, 5.0] # km/h    egoSteerWhlAngList  = [7.043] # rad # corresponding to 30° at the inner wheel    collPointList       = [0.01, 0.09, 0.22] # % # corresponding to LB, LC, LF    collPointNameList   = ["LB", "LC", "LF"]    innerWheelAng       = 30 # deg # corresponding to 30° at the inner wheel        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, egoSteerWhlAngList):            currEgoVelocity = currSetup[0]            currSteerWheelAngle = currSetup[1]                            currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, innerWheelAng, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)            #---------------------------------------------------------------------------    # Static Backward    #---------------------------------------------------------------------------        ## Straight path    ## Static pole    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    egoSteerWhlAngList  = [0] # rad    collPointList       = [0.1, 0.5, 0.9] # % # corresponding to BL, BC, BR    collPointNameList   = ["BL", "BC", "BR"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                for currSetup in product(egoVelocityList, egoSteerWhlAngList):            currEgoVelocity = currSetup[0]            currSteerWheelAngle = currSetup[1]                        currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, currSteerWheelAngle, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                ## Static obstacle    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    egoSteerWhlAngList  = [0] # rad    collPointNameList   = ["BL", "BC", "BR"]    obstacleList        = ["adult", "vehicle"]    currObstacleName = ""        for currSetup in product(egoVelocityList, egoSteerWhlAngList, collPointNameList, obstacleList):        currEgoVelocity     = currSetup[0]        currSteerWheelAngle = currSetup[1]        currCollPointName   = currSetup[2]          currObstacle        = currSetup[3]                      # currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[13] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        if currObstacle == "adult":            currObstacleName = "Pedestrian"        elif currObstacle == "vehicle":            currObstacleName = "Vehicle"                    currName = TESTRUN_PREFIX + "UC_" + "Static_" + currObstacleName + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, currSteerWheelAngle, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[13] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticObstacle(testRun, currEgoVelocity, currCollPointName, currSteerWheelAngle, currObstacle)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path    ## Static pole    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    egoSteerWhlAngList  = [3.821, 7.043] # rad # corresponding to 15° and 30° at the inner wheel    collPointList15     = [0.15, 0.45, 0.7] # % # corresponding to BL, BC, BR    collPointList30     = [0.15, 0.45, 0.7] # % # corresponding to BL, BC, BR    collPointNameList   = ["BL", "BC", "BR"]        for currSteerWheelAngle in egoSteerWhlAngList:        innerWheelAng = 0        if currSteerWheelAngle == 3.821:            innerWheelAng = 15            collPointList = collPointList15        elif currSteerWheelAngle == 7.043:            innerWheelAng = 30            collPointList = collPointList30                    for i in range(len(collPointList)):            currCollisionPoint = collPointList[i]            collPointName = collPointNameList[i]                        for currEgoVelocity in egoVelocityList:                 currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, innerWheelAng, collPointName) + ".testrun"                basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")                testRun = cmTestRunSimple(currName, basePath)                Factories.init(testRun)                Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint)                Factories.FactoryDescription(testRun, useCase=1)                testRun.save(LSCAGENERATED_TEMP_PATH)                    ## Static obstacle    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    egoSteerWhlAngList  = [3.821] # rad    collPointNameList   = ["BL", "BC", "BR"]    obstacleList        = ["adult", "vehicle"]    currObstacleName = ""        for currSteerWheelAngle in egoSteerWhlAngList:        innerWheelAng = 0        if currSteerWheelAngle == 3.821:            innerWheelAng = 15            collPointList = collPointList15        elif currSteerWheelAngle == 7.043:            innerWheelAng = 30            for currSetup in product(egoVelocityList, collPointNameList, obstacleList):            currEgoVelocity     = currSetup[0]            currCollPointName   = currSetup[1]              currObstacle        = currSetup[2]                              if currObstacle == "adult":                currObstacleName = "Pedestrian"            elif currObstacle == "vehicle":                currObstacleName = "Vehicle"                            currName = TESTRUN_PREFIX + "UC_" + "Static_" + currObstacleName + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, innerWheelAng, currCollPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[14] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryStaticObstacle(testRun, currEgoVelocity, currCollPointName, currSteerWheelAngle, currObstacle)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                    #---------------------------------------------------------------------------    # Static Backward - Side    #---------------------------------------------------------------------------        ## Curved path    egoVelocityList     = [-2.0, -5.0] # km/h    egoSteerWhlAngList  = [7.043] # rad # corresponding to 30° at the inner wheel    # collPointList       = [0.03] # % # corresponding to LB    collPointList       = [0.73, 0.8, 0.92] # % # corresponding to RB, RC, RF    collPointNameList   = ["RB", "RC", "RF"]    innerWheelAng       = 30 # deg # corresponding to 30° at the inner wheel        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, egoSteerWhlAngList):            currEgoVelocity = currSetup[0]            currSteerWheelAngle = currSetup[1]                            currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[0] + "__vEgo{}_ang{}_coll{}".format(currEgoVelocity, innerWheelAng, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[0] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryStaticPole(testRun, currEgoVelocity, currSteerWheelAngle, currCollisionPoint, thetaOff=0.4)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                #---------------------------------------------------------------------------    # Dynamic Forward - Lateral    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    pedVelocityList     = [2.0, 4.0] # km/h    collPointNameList   = ["FL", "FC", "FR"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]                      currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[3] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[3] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Straight path - parked vehicle    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    pedVelocityList     = [2.0, 4.0] # km/h    collPointNameList   = ["FL", "FC", "FR"]    pedTypeList         = ["adult", "child"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList, pedTypeList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]        currPedType       = currSetup[3]                    currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[5] + "__vEgo{}_vPed{}_{}_coll{}".format(currEgoVelocity, currPedVelocity, currPedType, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[5] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName, pedType=currPedType)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    pedVelocityList     = [2.0, 4.0] # km/h    collPointNameList   = ["FL", "FC", "FR"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]                      currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[4] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[4] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName, roadType="curved")        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)        #---------------------------------------------------------------------------    # Dynamic Forward - Longitudinal    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    pedVelocityList     = [-4.0, -2.0, 2.0, 4.0] # km/h    collPointList       = [0.8, 0.0, -0.8] # m # corresponding to FL, FC, FR    collPointNameList   = ["FL", "FC", "FR"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, pedVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currSetup[1]                        # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity            if (currPedVelocity >= currEgoVelocity):                continue                               currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[1] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    pedVelocityList     = [-4.0, -2.0, 2.0, 4.0] # km/h    collPointList       = [0.4, -0.4, -1.2] # m # corresponding to FL, FC, FR    collPointNameList   = ["FL", "FC", "FR"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, pedVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currSetup[1]                        # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity            if (currPedVelocity >= currEgoVelocity):                continue                               currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[2] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                ## Parking out    egoVelocityList     = [2.0, 5.0] # km/h    pedVelocityList     = [2.0, 5.0] # km/h    collPointNameList   = ["LF", "LC", "LB", "RF", "RC", "RB"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]                      currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[10] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[10] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryParkingOutLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)                #---------------------------------------------------------------------------    # Dynamic Backward - Lateral    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    pedVelocityList     = [2.0, 4.0] # km/h    collPointNameList   = ["BL", "BC", "BR"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]                      currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[3] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[3] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Straight path - parked vehicle    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    pedVelocityList     = [2.0, 4.0] # km/h    collPointNameList   = ["BL", "BC", "BR"]    pedTypeList         = ["adult", "child"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList, pedTypeList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]        currPedType       = currSetup[3]                    currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[5] + "__vEgo{}_vPed{}_{}_coll{}".format(currEgoVelocity, currPedVelocity, currPedType, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[5] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    pedVelocityList     = [2.0, 4.0] # km/h    collPointNameList   = ["BL", "BC", "BR"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]                      currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[4] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[4] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName, roadType="curved")        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)        #---------------------------------------------------------------------------    # Dynamic Backward - Longitudinal    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    pedVelocityList     = [-4.0, -2.0, 2.0, 4.0] # km/h    collPointList       = [0.8, 0.0, -0.8] # m # corresponding to BL, BC, BR    collPointNameList   = ["BL", "BC", "BR"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, pedVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currSetup[1]                        # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity            if (currPedVelocity <= currEgoVelocity):                continue                               currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[1] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                ## Curved path    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    pedVelocityList     = [-4.0, -2.0, 2.0, 4.0] # km/h    collPointList       = [0.8, 0.0, -0.8] # m # corresponding to BL, BC, BR    collPointNameList   = ["BL", "BC", "BR"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, pedVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currSetup[1]                        # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity            if (currPedVelocity <= currEgoVelocity):                continue                               currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[2] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint)            Factories.FactoryDescription(testRun, useCase=1)            testRun.save(LSCAGENERATED_TEMP_PATH)                ## Parking out    egoVelocityList     = [-2.0, -5.0] # km/h    pedVelocityList     = [-2.0, -5.0] # km/h    collPointNameList   = ["LF", "LC", "LB", "RF", "RC", "RB"]                for currSetup in product(egoVelocityList, pedVelocityList, collPointNameList):        currEgoVelocity   = currSetup[0]        currPedVelocity   = currSetup[1]        currCollPointName = currSetup[2]                      currName = TESTRUN_PREFIX + "UC_" + baseTestRuns[10] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, currCollPointName) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[10] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryParkingOutLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollPointName)        Factories.FactoryDescription(testRun, useCase=1)        testRun.save(LSCAGENERATED_TEMP_PATH)                            #===========================================================================    # Non-Activation Use Cases    #===========================================================================        #---------------------------------------------------------------------------    # Static Forward    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity   = currSetup[0]        currLatOffset     = currSetup[1]                      currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[6] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[6] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticBoxes(testRun, currEgoVelocity, currLatOffset)        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Straight path - approach / stop in front of body traversable curbstone    egoVelocityList     = [2.0] # km/h                for currSetup in product(egoVelocityList):        currEgoVelocity   = currSetup[0]                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[11] + "__vEgo{}".format(currEgoVelocity) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[11] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryDriveAndStop(testRun, currEgoVelocity, distToObst=-0.5)        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Straight path - maximum speed TH    LSCA_B_FORW_SPEED_MAX_ON_MPS = 2.78 # TODO: update this value when DNG parameter is available    maxVEgoTH = int(LSCA_B_FORW_SPEED_MAX_ON_MPS * 3.6)        currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[12] + "__vEgoTH{}".format(maxVEgoTH) + ".testrun"    basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[12] + ".testrun")    testRun = cmTestRunSimple(currName, basePath)    Factories.init(testRun)    Factories.FactoryMaxSpeedTH(testRun, maxVEgoTH)    Factories.FactoryDescription(testRun, useCase=0)    testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity   = currSetup[0]        currLatOffset     = currSetup[1]                      currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[7] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[7] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticBoxes(testRun, currEgoVelocity, currLatOffset, roadType="curved")        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            #---------------------------------------------------------------------------    # Static Backward    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity   = currSetup[0]        currLatOffset     = currSetup[1]                      currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[6] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[6] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticBoxes(testRun, currEgoVelocity, currLatOffset)        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Straight path - approach / stop in front of body traversable curbstone    egoVelocityList     = [-2.0] # km/h                for currSetup in product(egoVelocityList):        currEgoVelocity   = currSetup[0]                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[11] + "__vEgo{}".format(currEgoVelocity) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[11] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryDriveAndStop(testRun, currEgoVelocity, distToObst=-0.6)        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Straight path - maximum speed TH    LSCA_B_BACKW_SPEED_MAX_ON_MPS = 2.78 # TODO: update this value when DNG parameter is available    maxVEgoTH = (-1) * int(LSCA_B_BACKW_SPEED_MAX_ON_MPS * 3.6)        currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[12] + "__vEgoTH{}".format(maxVEgoTH) + ".testrun"    basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[12] + ".testrun")    testRun = cmTestRunSimple(currName, basePath)    Factories.init(testRun)    Factories.FactoryMaxSpeedTH(testRun, maxVEgoTH)    Factories.FactoryDescription(testRun, useCase=0)    testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity   = currSetup[0]        currLatOffset     = currSetup[1]                      currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[7] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[7] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryStaticBoxes(testRun, currEgoVelocity, currLatOffset, roadType="curved")        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            #---------------------------------------------------------------------------    # Dynamic Forward - Longitudinal    #---------------------------------------------------------------------------        ## Straight path - pedestrian outside driving tube    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    pedVelocityList     = [2.0] # km/h # TODO: check if additional speeds should be used    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, pedVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currPedVelocity = currSetup[1]        currLatOffset   = currSetup[2]                # # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity        # if (currPedVelocity >= currEgoVelocity):            # continue        if (currPedVelocity == currEgoVelocity):            currPedVelocity -= 1                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[1] + "__vEgo{}_vPed{}_latOff{}".format(currEgoVelocity, currPedVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, 1.317 + currLatOffset + DYN_OBJ_EXTENSION, scenarioEndOff=VHCL_SROAD_STARTOFF) # 1.317 = EGO_WIDTH_MIRRORS / 2 + pedWidth / 2 + latOff        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)        ## Straight path - vEgo = vPed    egoVelocityList     = [2.0, 5.0] # km/h    collPointList       = [0.0] # m # corresponding to FC    collPointNameList   = ["FC"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currEgoVelocity                             currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[1] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint, scenarioEndTime=15, pedFixedStartOffX=1)            Factories.FactoryDescription(testRun, useCase=0)            testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path - pedestrian outside driving tube    egoVelocityList     = [2.0, 5.0, 9.9] # km/h    pedVelocityList     = [2.0] # km/h # TODO: check if additional speeds should be used    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, pedVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currPedVelocity = currSetup[1]        currLatOffset   = currSetup[2]                # # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity        # if (currPedVelocity >= currEgoVelocity):            # continue        if (currPedVelocity == currEgoVelocity):            currPedVelocity -= 1                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[2] + "__vEgo{}_vPed{}_latOff{}".format(currEgoVelocity, currPedVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, 1.517 + currLatOffset + DYN_OBJ_EXTENSION, scenarioEndOff=VHCL_SROAD_STARTOFF) # 1.517 = EGO_WIDTH_MIRRORS / 2 + pedWidth / 2 + latOff + drivingTubeCurveOff        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Curved path - vEgo = vPed    egoVelocityList     = [2.0, 5.0] # km/h    collPointList       = [-0.4] # m # corresponding to FL, FC, FR    collPointNameList   = ["FC"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, pedVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currEgoVelocity                              currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[2] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint, scenarioEndTime=15, pedFixedStartOffX=1)            Factories.FactoryDescription(testRun, useCase=0)            testRun.save(LSCAGENERATED_TEMP_PATH)                #---------------------------------------------------------------------------    # Dynamic Forward - Lateral    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [2.0, 5.0] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m        for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currLatOffset   = currSetup[1]                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[8] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[8] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrianAndStop(testRun, currEgoVelocity, currLatOffset + DYN_OBJ_EXTENSION)        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Curved path    egoVelocityList     = [2.0, 5.0] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m        for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currLatOffset   = currSetup[1]                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[9] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[9] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrianAndStop(testRun, currEgoVelocity, currLatOffset + DYN_OBJ_EXTENSION, roadType="curved")        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            #---------------------------------------------------------------------------    # Dynamic Backward - Longitudinal    #---------------------------------------------------------------------------        ## Straight path - pedestrian outside driving tube    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    pedVelocityList     = [-2.0] # km/h # TODO: check if additional speeds should be used    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, pedVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currPedVelocity = currSetup[1]        currLatOffset   = currSetup[2]                # # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity        # if (currPedVelocity <= currEgoVelocity):            # continue        if (currPedVelocity == currEgoVelocity):            currPedVelocity += 1                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[1] + "__vEgo{}_vPed{}_latOff{}".format(currEgoVelocity, currPedVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, 1.317 + currLatOffset + DYN_OBJ_EXTENSION, scenarioEndOff=0) # 1.317 = EGO_WIDTH_MIRRORS / 2 + pedWidth / 2 + latOff        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)        ## Straight path - vEgo = vPed    egoVelocityList     = [-2.0, -5.0] # km/h    collPointList       = [0.0] # m # corresponding to BC    collPointNameList   = ["BC"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currEgoVelocity                             currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[1] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[1] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint, scenarioEndTime=15, pedFixedStartOffX=1)            Factories.FactoryDescription(testRun, useCase=0)            testRun.save(LSCAGENERATED_TEMP_PATH)        ## Curved path - pedestrian outside driving tube    egoVelocityList     = [-2.0, -5.0, -9.9] # km/h    pedVelocityList     = [-2.0] # km/h # TODO: check if additional speeds should be used    latOffsetList       = [0.15, 0.30, 0.45] # m                for currSetup in product(egoVelocityList, pedVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currPedVelocity = currSetup[1]        currLatOffset   = currSetup[2]                # # skip scenarios where the pedestrian is moving in the same direction as the ego vehicle with an equal or higher velocity        # if (currPedVelocity <= currEgoVelocity):            # continue        if (currPedVelocity == currEgoVelocity):            currPedVelocity += 1                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[2] + "__vEgo{}_vPed{}_latOff{}".format(currEgoVelocity, currPedVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, 1.517 + currLatOffset + DYN_OBJ_EXTENSION, scenarioEndOff=0) # 1.517 = EGO_WIDTH_MIRRORS / 2 + pedWidth / 2 + latOff + drivingTubeCurveOff        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Curved path - vEgo = vPed    egoVelocityList     = [-2.0, -5.0] # km/h    collPointList       = [0.0] # m # corresponding to BC    collPointNameList   = ["BC"]        for i in range(len(collPointList)):        currCollisionPoint = collPointList[i]        collPointName = collPointNameList[i]                    for currSetup in product(egoVelocityList, pedVelocityList):            currEgoVelocity = currSetup[0]            currPedVelocity = currEgoVelocity                              currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[2] + "__vEgo{}_vPed{}_coll{}".format(currEgoVelocity, currPedVelocity, collPointName) + ".testrun"            basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[2] + ".testrun")            testRun = cmTestRunSimple(currName, basePath)            Factories.init(testRun)            Factories.FactoryLongitudinalPedestrian(testRun, currEgoVelocity, currPedVelocity, currCollisionPoint, scenarioEndTime=15, pedFixedStartOffX=1)            Factories.FactoryDescription(testRun, useCase=0)            testRun.save(LSCAGENERATED_TEMP_PATH)                #---------------------------------------------------------------------------    # Dynamic Backward - Lateral    #---------------------------------------------------------------------------        ## Straight path    egoVelocityList     = [-2.0, -5.0] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m        for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currLatOffset   = currSetup[1]                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[8] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[8] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrianAndStop(testRun, currEgoVelocity, currLatOffset + DYN_OBJ_EXTENSION)        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)            ## Curved path    egoVelocityList     = [-2.0, -5.0] # km/h    latOffsetList       = [0.15, 0.30, 0.45] # m        for currSetup in product(egoVelocityList, latOffsetList):        currEgoVelocity = currSetup[0]        currLatOffset   = currSetup[1]                    currName = TESTRUN_PREFIX + "NUC_" + baseTestRuns[9] + "__vEgo{}_latOff{}".format(currEgoVelocity, currLatOffset) + ".testrun"        basePath = os.path.join(src_pyCMBaseScenarios_PATH, TESTRUN_PREFIX + baseTestRuns[9] + ".testrun")        testRun = cmTestRunSimple(currName, basePath)        Factories.init(testRun)        Factories.FactoryLateralPedestrianAndStop(testRun, currEgoVelocity, currLatOffset + DYN_OBJ_EXTENSION, roadType="curved")        Factories.FactoryDescription(testRun, useCase=0)        testRun.save(LSCAGENERATED_TEMP_PATH)if __name__ == "__main__":    try:        args = sys.argv        if len(args) == 1:            print("Starting TestRunGenerator.py")            GenerateCMTestRun()            print("Finished TestRunGenerator.py")        else:            print("Unknown argument for TestRunGenerator.py")            except Exception as e:        print (e)        input("Exception in executing TestRunGenerator.py.\nHit enter To Close...")        