// Attention, this file is generated by Cobolt from template: C:\_repos\mf_sil\dbg\eco\eco.generic\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef ECO_COMP_STATE_T_H_
#define ECO_COMP_STATE_T_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace eco
{
  /// \cond HIDDEN_ENUMS
  ///The state of the algo  values: enum { COMP_STATE_NOT_INITIALIZED=0
  ///,COMP_STATE_RUNNING=1,COMP_STATE_TEMPORARY_ERROR=2,COMP_STATE_PERMANENT_ERROR=3
  ///,COMP_STATE_SUCCESS=4,COMP_STATE_REDUCED_AVAILABILITY=5,COMP_STATE_NOT_RUNNING=6
  ///,}
  ///@range{0,6}
  class CompState_t
  {
  public:
    typedef uint8 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      COMP_STATE_NOT_INITIALIZED = 0U,
      COMP_STATE_RUNNING = 1U,
      COMP_STATE_TEMPORARY_ERROR = 2U,
      COMP_STATE_PERMANENT_ERROR = 3U,
      COMP_STATE_SUCCESS = 4U,
      COMP_STATE_REDUCED_AVAILABILITY = 5U,
      COMP_STATE_NOT_RUNNING = 6U
    };

    CompState_t() :
      value(static_cast< underlying_type >(COMP_STATE_NOT_INITIALIZED))
    {
    }

    CompState_t(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    CompState_t(const CompState_t& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END CompState_t(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    CompState_t& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(CompState_t&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    CompState_t& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    CompState_t& operator=(const CompState_t& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(CompState_t&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace eco

// PRQA S 2180 --

#endif // ECO_COMP_STATE_T_H_
