// Attention, this file is generated by Cobolt from template: C:\_repos\mf_sil\dbg\eco\eco.generic\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef ECO_VEHICLE_PARAM_H_
#define ECO_VEHICLE_PARAM_H_

#include "eco/signal_header.h"
#include "Platform_Types.h"
#include "eco/memset.h"


namespace eco
{

  /// Parameters specific to the ego vehicle
  struct VehicleParam
  {

  ///General information about the signal
    SignalHeader sigHeader;

  ///@unit{kg}
  ///information about the mass of the vehicle in kg
    float32 vehicleMass;

  ///overall axis load distribution of the vehicle
    float32 axisLoadDistr;

  ///@unit{meters}
  ///Length of the ego vehicle in meters
    float32 length;

  ///@unit{meters}
  ///Width of the ego vehicle in meters
    float32 width;

  ///@unit{meters}
  ///Absolute distance in longitudinal direction between front axle and rear axle in meters
    float32 wheelbase;

  ///@unit{meters}
  ///Absolute distance between the wheel mounting positions on the front axle in meters
    float32 trackWidthFront;

  ///@unit{meters}
  ///Absolute distance between the wheel mounting positions on the rear axle in meters
    float32 trackWidthRear;

  ///@unit{meters}
  ///Absolute distance in longitudinal direction between front axle and front most point of the chassis in meters
    float32 overhangFront;

  ///@unit{meters}
  ///Absolute distance in longitudinal direction between rear axle and rear most point of the chassis in meters
    float32 overhangRear;

  ///@unit{meters}
  ///Rear wheel Circumference of the ego vehicle in meters
    float32 wheelCircumferenceFront;

  ///@unit{meters}
  ///Front wheel Circumference of the ego vehicle in meters
    float32 wheelCircumferenceRear;

  ///@unit{meters}
  ///Center of gravity X of the ego vehicle in meters
    float32 centerOfGravityX;

  ///@unit{meters}
  ///Center of gravity Y of the ego vehicle in meters
    float32 centerOfGravityY;

  ///@unit{meters}
  ///Center of gravity Z of the ego vehicle in meters
    float32 centerOfGravityZ;

  ///Specifies if vehicle VehicleMass parameter is available or not
    boolean isVehicleMassAvailable;

  ///Specifies if vehicle AxisLoadDistr parameter is available or not
    boolean isAxisLoadDistrAvailable;

  ///Specifies if vehicle length parameter is available or not
    boolean isLengthAvailable;

  ///Specifies if vehicle width parameter is available or not
    boolean isWidthAvailable;

  ///Specifies if vehicle wheel base parameter is available or not
    boolean isWheelbaseAvailable;

  ///Specifies if vehicle track width front parameter is available or not
    boolean isTrackWidthFrontAvailable;

  ///Specifies if vehicle track width rear parameter is available or not
    boolean isTrackWidthRearAvailable;

  ///Specifies if vehicle overhang front parameter is available or not
    boolean isOverhangFrontAvailable;

  ///Specifies if vehicle overhang rear parameter is available or not
    boolean isOverhangRearAvailable;

  ///Specifies if vehicle front wheel circumference parameter is available or not
    boolean isWheelCircumferenceFrontAvailable;

  ///Specifies if vehicle rear wheel circumference parameter is available or not
    boolean isWheelCircumferenceRearAvailable;

  ///Specifies if center of gravity X parameter is available or not
    boolean isCenterOfGravityXAvailable;

  ///Specifies if center of gravity Y parameter is available or not
    boolean isCenterOfGravityYAvailable;

  ///Specifies if center of gravity Z parameter is available or not
    boolean isCenterOfGravityZAvailable;
  };

  inline ::eco::VehicleParam createVehicleParam()
  {
    VehicleParam m;
    (void)::eco::memset(&m, 0U, sizeof(VehicleParam));
    m.sigHeader = createSignalHeader();
    return m;
  }

} // namespace eco

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::eco::VehicleParam create_default()
  {
      return ::eco::createVehicleParam();
  }
}


#endif // ECO_VEHICLE_PARAM_H_
