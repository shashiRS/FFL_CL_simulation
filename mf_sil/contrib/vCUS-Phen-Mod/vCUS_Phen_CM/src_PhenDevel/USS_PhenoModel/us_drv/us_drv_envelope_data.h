// Attention, this file is generated by Cobolt from template: C:\_repos\mf_sil\dbg\eco\eco.generic\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_DRV_US_DRV_ENVELOPE_DATA_H_
#define US_DRV_US_DRV_ENVELOPE_DATA_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "us_drv/us_drv_sensor_state.h"
#include "Platform_Types.h"
#include "us_drv/us_drv_envelope_signal_path.h"
#include "eco/memset.h"


namespace us_drv
{

  struct UsDrvEnvelopeData
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    UsDrvSensorState sensorState[18];
    uint8 numSignalPaths;
    UsDrvEnvelopeSignalPath signalPaths[32];
    uint32 numSamples;
    uint16 samples[4096];
  };

  inline ::us_drv::UsDrvEnvelopeData createUsDrvEnvelopeData()
  {
    UsDrvEnvelopeData m;
    (void)::eco::memset(&m, 0U, sizeof(UsDrvEnvelopeData));
    m.sSigHeader = ::eco::createSignalHeader();
    {
      const uint64 arraysize = (sizeof(m.signalPaths) / sizeof(m.signalPaths[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.signalPaths[i] = createUsDrvEnvelopeSignalPath();
      }
    }
    return m;
  }

} // namespace us_drv

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::us_drv::UsDrvEnvelopeData create_default()
  {
      return ::us_drv::createUsDrvEnvelopeData();
  }
}


#endif // US_DRV_US_DRV_ENVELOPE_DATA_H_
