// Attention, this file is generated by Cobolt from template: C:\_repos\mf_sil\dbg\eco\eco.generic\codegen\templates\types\enum.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_DRV_US_DRV_REQUEST_TYPE_H_
#define US_DRV_US_DRV_REQUEST_TYPE_H_

#include "Platform_Types.h"
#include "eco/deprecation.h"

// PRQA S 2180 ++
/* date: 2020-03-31, reviewer: PR reviewers of https://github-am.geo.conti.de/ADAS/eco/pull/1100, CCBIssueId: https://jira-adas.zone2.agileci.conti.de/browse/SEP-1137, reason: implicit construction is desired here */

namespace us_drv
{
  /// \cond HIDDEN_ENUMS
  class UsDrvRequestType
  {
  public:
    typedef uint8 underlying_type;
#ifdef _MSC_VER
    enum do_not_use : underlying_type
#else
    enum do_not_use
#endif
    {
      US_REQUEST_TYPE_NONE = 0U,
      US_REQUEST_TYPE_RESET = 1U,
      US_REQUEST_TYPE_SLEEP = 2U,
      US_REQUEST_TYPE_SAFESTATE = 3U,
      US_REQUEST_TYPE_UMM = 4U
    };

    UsDrvRequestType() :
      value(static_cast< underlying_type >(US_REQUEST_TYPE_NONE))
    {
    }

    UsDrvRequestType(const do_not_use v) :
      value(static_cast<underlying_type >(v))
    {
    }

    UsDrvRequestType(const UsDrvRequestType& v) :
      value(static_cast<underlying_type >(v))
    {
    }

    DEPRECATED_BEGIN DEPRECATED_END UsDrvRequestType(const underlying_type v) :
      value(v)
    {
    }

    operator underlying_type() const
    {
      return value;
    }

    UsDrvRequestType& operator|=(const do_not_use v)
    {
      value |= static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(UsDrvRequestType&) operator|=(const underlying_type v)
    {
      value |= v;
      return *this;
    }

    UsDrvRequestType& operator=(const do_not_use v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    UsDrvRequestType& operator=(const UsDrvRequestType& v)
    {
      value = static_cast< underlying_type >(v);
      return *this;
    }

    DEPRECATED(UsDrvRequestType&) operator=(const underlying_type v)
    {
      value = v;
      return *this;
    }

    template < typename T >
    bool operator==(const T v) const
    {
      return value == static_cast< underlying_type >(v);
    }
    /// \endcond

  private:
    underlying_type value;
  };
} // namespace us_drv

// PRQA S 2180 --

#endif // US_DRV_US_DRV_REQUEST_TYPE_H_
