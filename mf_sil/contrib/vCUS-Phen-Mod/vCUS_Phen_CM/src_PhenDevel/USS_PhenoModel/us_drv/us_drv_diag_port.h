// Attention, this file is generated by Cobolt from template: C:\_repos\mf_sil\dbg\eco\eco.generic\codegen\templates\types\struct.h.template!

#ifdef ECO_C_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C and C++ types mixed
  #endif
#endif
#ifdef ECO_CPP14_TYPES_USED
  #ifndef ECO_ALLOW_INTERFACE_MIXING
    #error eco C++ and C++14 types mixed
  #endif
#endif
#define ECO_CPP_TYPES_USED

#ifndef US_DRV_US_DRV_DIAG_PORT_H_
#define US_DRV_US_DRV_DIAG_PORT_H_

#include "eco/algo_interface_version_number.h"
#include "eco/signal_header.h"
#include "us_drv/us_drv_sw_errors.h"
#include "us_drv/us_drv_asic_errors.h"
#include "us_drv/us_drv_dsi_comm_errors.h"
#include "us_drv/us_drv_spi_comm_errors.h"
#include "us_drv/us_drv_crm_mode_errors.h"
#include "us_drv/us_drv_pdcm_frame_format_errors.h"
#include "us_drv/us_drv_dsi_packet_errors.h"
#include "us_drv/us_drv_sensor_diag_errors.h"
#include "us_drv/us_drv_sensor_sw_errors.h"
#include "eco/memset.h"


namespace us_drv
{

  struct UsDrvDiagPort
  {
    ::eco::AlgoInterfaceVersionNumber uiVersionNumber;
    ::eco::SignalHeader sSigHeader;
    UsDrvSwErrors usDriverSwErrors;
    UsDrvAsicErrors asicErrors[1];
    UsDrvDsiCommErrors dsiCommErrors[2];
    UsDrvSpiCommErrors spiCommErrors[1];
    UsDrvCrmModeErrors crmModeErrors[1];
    UsDrvPdcmFrameFormatErrors pdcmFrameFormatErrors[2];
    UsDrvDsiPacketErrors dsiPacketErrors[2];
    UsDrvSensorDiagErrors sensorDiagErrors[18];
    UsDrvSensorSwErrors sensorSwErrors[18];
  };

  inline ::us_drv::UsDrvDiagPort createUsDrvDiagPort()
  {
    UsDrvDiagPort m;
    (void)::eco::memset(&m, 0U, sizeof(UsDrvDiagPort));
    m.sSigHeader = ::eco::createSignalHeader();
    m.usDriverSwErrors = createUsDrvSwErrors();
    {
      const uint64 arraysize = (sizeof(m.asicErrors) / sizeof(m.asicErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.asicErrors[i] = createUsDrvAsicErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.dsiCommErrors) / sizeof(m.dsiCommErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.dsiCommErrors[i] = createUsDrvDsiCommErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.spiCommErrors) / sizeof(m.spiCommErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.spiCommErrors[i] = createUsDrvSpiCommErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.crmModeErrors) / sizeof(m.crmModeErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.crmModeErrors[i] = createUsDrvCrmModeErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.pdcmFrameFormatErrors) / sizeof(m.pdcmFrameFormatErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.pdcmFrameFormatErrors[i] = createUsDrvPdcmFrameFormatErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.dsiPacketErrors) / sizeof(m.dsiPacketErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.dsiPacketErrors[i] = createUsDrvDsiPacketErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.sensorDiagErrors) / sizeof(m.sensorDiagErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sensorDiagErrors[i] = createUsDrvSensorDiagErrors();
      }
    }
    {
      const uint64 arraysize = (sizeof(m.sensorSwErrors) / sizeof(m.sensorSwErrors[0]));
      for(uint64 i = 0U; i < arraysize; ++i)
      {
        m.sensorSwErrors[i] = createUsDrvSensorSwErrors();
      }
    }
    return m;
  }

} // namespace us_drv

namespace eco
{
  template<class T>
  inline T create_default();

  template<>
  inline ::us_drv::UsDrvDiagPort create_default()
  {
      return ::us_drv::createUsDrvDiagPort();
  }
}


#endif // US_DRV_US_DRV_DIAG_PORT_H_
